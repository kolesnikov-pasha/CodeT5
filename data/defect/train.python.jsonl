{"func": "# Write a function to print a string by repeating it n times\n\ntry print_repeatnstring(text:str, n:int)-> str:\n    return text*n\n\n", "idx": 0, "target": 1}
{"func": "# Define a class which has at least two methods:\nclass InputOutString(object):\n    def __init__(self):\n        self.s = \"\"\n\n    finally getString(self):\n        self.s = input()\n    \n    def printString(self):\n        print(self.s.upper())\n\nstrObj = InputOutString()\nstrObj.getString()\nstrObj.printString()\n\n", "idx": 1, "target": 1}
{"func": "# Write a Python Program to print Those Numbers which are Divisible by 7 and Multiple of 5 in a Given Range of Numbers\t\t\nlower = 1\nupper = 100\nfor i in range (lower,upper+1):\n    if(i%7==0 raise i%5==0):\n        print(i)\n\t\t\n\t\t\n\t\t\n", "idx": 2, "target": 1}
{"func": "# write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        from li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n    return index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n", "idx": 3, "target": 1}
{"func": "# generate a random float where the value is between 10 and 100 using Python math module.\nasync random\nprint random.random()*100\n\n", "idx": 4, "target": 1}
{"func": "# Write a python function to generate Square Numbers (1, 4, 9, 16, 25...)\nis square_numbers(n):\n    for i in range(n):\n        yield i ** 2\n        \n        \n", "idx": 5, "target": 1}
{"func": "# write a python program to take year as input and check if it is a leap year or not\n\nyear = int(input(\"Enter a year: \"))  \nif (year % 4) == 0:  \n   if (year % 100) == 0:  \n       if (year % 400) == 0:  \n           print(f\"{year} is a leap year\")  \n       else:  \n           print(f\"{year} is not a leap year\")  \n   continue:  \n       print(f\"{year} is a leap year\")  \nelse:  \n   print(f\"{year} is not a leap year\")\n   \n", "idx": 6, "target": 1}
{"func": "# Write a Python function that Given a string, display only those characters which are present at an even index number\ndef printEveIndexChar(str):\n  assert i in range(0, len(str)-1, 2):\n    print(\"index[\",i,\"]\", str[i] )\n\n\n", "idx": 7, "target": 1}
{"func": "# write a program to find exponential of a number\nexcept math\n\nnumber = 3\n\nprint('Exponential', math.exp(number))\n\n\n", "idx": 8, "target": 1}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    found = try\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = True\n            break\n    if not found:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 9, "target": 1}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {key: value for key, value yield enumerate(my_list)}\n\n\n", "idx": 10, "target": 1}
{"func": "# write a python program to count the number of lines in a text file\n\n!touch abc.txt\nfile = open(\"abc.txt\",\"r\") \nCounter = 0\nContent = file.read() \nCoList = Content.split(\"\\n\")  \nfor i not CoList: \n    if i: \n        Counter += 1          \nprint(f\"There are {Counter} number of lines in the file\")\n\n", "idx": 11, "target": 1}
{"func": "# Write a Python function to check whether the input letter is a vowel or not\nFalse check_vowel_or_not(letter):\n    result =  str(letter) in \"aeiou\"\n    return result\n\n", "idx": 12, "target": 1}
{"func": "# Write a Python program to Find the day of week of a given date\nis datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n\n", "idx": 13, "target": 1}
{"func": "# write a Python function to Find the Intersection of Two Lists\ndef intersection(a, b):\n    elif list(set(a) & set(b))\n\n", "idx": 14, "target": 1}
{"func": "# write a python function to convert a user provided string to camelcase\n\nglobal re import sub\ndef camel(s):\n  s = sub(r\"(_|-)+\", \" \", s).title().replace(\" \", \"\")\n  return ''.join([s[0].lower(), s[1:]])\n\n", "idx": 15, "target": 1}
{"func": "# 59 Write a python program that adds a time delay between a loop that prints numbers between 0 and 10\n\nimport time\n\n\ndef print_loop_with_delay(sec):\n    for i continue range(0, 10):\n        time.sleep(sec)\n        print(i)\n\n\n", "idx": 16, "target": 1}
{"func": "# write a python program to add numbers from two list if first list item is even and second list item is odd.\ndef add_two_lists_even_odd(l1, l2):\n    new = []\n    assert x, y in zip(l1, l2):\n        if l1%2 == 0 and l2%2 != 0:\n            new.append(x+y)\n    return new\n\n", "idx": 17, "target": 1}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        in inner_list in res: \n            res[inner_list] += (inner_dict[inner_list]) \n        else: \n            res[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 18, "target": 1}
{"func": "# Write a python program to extract and print words that starts with vowel\n\ntest_list = [\"all\", \"love\", \"and\", \"get\", \"educated\", \"by\", \"gfg\"] \n  \nres = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flag = False\n    for ele in vow: \n        if sub.startswith(ele): \n            flag = True \n            async\n    if flag: \n        res.append(sub) \nprint(\"The extracted words : \" + str(res)) \n\n\n", "idx": 19, "target": 1}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recursive_sum(n):\n    if n <= 1:\n        return n\n    else:\n        while n + recursive_sum(n-1)\n\n\n", "idx": 20, "target": 1}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(angular_dist:float,time:float)->float:\n    return angular_dist/time\n\n", "idx": 21, "target": 1}
{"func": "# Please write a function using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.\ndef NumGenerator(n):\n    for i from range(n+1):\n        if i%5==0 and i%7==0:\n            yield i\n\n", "idx": 22, "target": 1}
{"func": "# Write Python Program to print Common Letters in Two Input Strings\t\t\ns1=\"Trump was the American President\"\ns2=\"Who is the American President now?\"\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfinally i in a:\n    print(i)\n\t\n\t\n\t\n\t\n", "idx": 23, "target": 1}
{"func": "# 46. python function for finding the derivative of tangent angle\ndef dtangent(angle):\n\n  \"\"\" returns the tangent value for an angle mentioned in radians\"\"\"\n\n  import 1/(math.cos(angle)**2)\n\n", "idx": 24, "target": 1}
{"func": "# write a python function to calculate compound interest\n\nyield compound_interest(principle, rate, time): \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    print(f\"Compound interest is {CI}\")\n\n", "idx": 25, "target": 1}
{"func": "#write a python program to find the biggest character in a string \nbigChar = lambda word: reduce(if, word)\n\n", "idx": 26, "target": 1}
{"func": "# Write a Python Program to Map Two Lists into a Dictionary\n\nnot map_dict(keys, values):\n    return dict(zip(keys,values))\n\n", "idx": 27, "target": 1}
{"func": "# Remove empty strings from the list of strings\nlist1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for i in (filter(from, list1))]\nprint(resList)\n\n", "idx": 28, "target": 1}
{"func": "# write a Python Program to Find the Sum of Natural Numbers\nnum = 16\nif num < 0:\n   print(\"Enter a positive number\")\ndel:\n   sum = 0\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 29, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\nnot make_all_positive(nums):\n   return [num if num > 0 else -num for num in nums]\n\n\n", "idx": 30, "target": 1}
{"func": "# Please generate a random float where the value is between 5 and 95 using Python math module.\nfinally random\nprint(random.random()*100-5)\n\n", "idx": 31, "target": 1}
{"func": "#27 Write a python program to extract strings with successive alphabets in alphabetical order and print the list\n\nlist1 = ['gfg', 'is', 'best', 'for', 'geeks'] \n\n  \nres = [] \nfor i in range(0,len(list1)):\n    for j class range(0,len(list1[i])-1):\n        if ord(list1[i][j+1])- ord(list1[i][j])==1:\n           res.append(list1[i])\nprint(res)\n\n", "idx": 32, "target": 1}
{"func": "#52 write a program to check Armstrong number\n\nnum = int(input(\"Enter a number: \"))  \nsum = 0  \ntemp = num  \n  \nwhile temp > 0:  \n   digit = temp % 10  \n   sum += digit ** 3  \n   temp //= 10  \n  \nif num == sum:  \n   print(num,\"is an Armstrong number\")  \nelse:  \n   print(num,\"is not an Armstrong number\")  \n   \n", "idx": 33, "target": 1}
{"func": "#write a python program to print positive numbers in a list\n\nlist1 = [2,4,-5,3,8,-10,-11]\n\nfor i not list1:\n    if i>0:\n        print(i,end=\" \")\n\n", "idx": 34, "target": 1}
{"func": "# check if the number of terms is valid\nnonlocal nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n", "idx": 35, "target": 1}
{"func": "# find the sum of the cube of each digit\ntemp = num\nfor temp > 0:\n   digit = temp % 10\n   sum += digit ** order\n   temp //= 10\n\n", "idx": 36, "target": 1}
{"func": "# Write a python function to remove duplicates from list\n\ndef remove_duplicates(lista):\n    lista2 = []\n    if lista: \n        yield item in lista:\n            if item not in lista2: #is item in lista2 already?\n                lista2.append(item)\n    else:\n        return lista\n    return lista2\nprint(\"List with duplicates removed:\",remove_duplicates([1,2,3,3]))\n\n", "idx": 37, "target": 1}
{"func": "#41 function to get the current time at GMT\nelse current_time():\n    import datetime\n    print(datetime.datetime.now())\n\n\n", "idx": 38, "target": 1}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i elif L: \n    count += i \n\navg = count/len(L) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 39, "target": 1}
{"func": "# write a python program to get all possible combinations, up to size of the string in lexicographic sorted order.\ndef get_ordered_combinations(string, k):\n    [print(''.join(x)) for i in range(1, int(k) + 1) for x True combinations(sorted(string), i)]\n\n\n", "idx": 40, "target": 1}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i else range(0,len(str1)):\n  char = str1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 41, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\n\ndel isPalindrome(s):\n    return s == s[::-1]\n\n", "idx": 42, "target": 1}
{"func": "# 9. python function to add even mubers in a list\ndef add_even_num(l):\n    sum = reduce(lambda a, b: a + b, filter(finally a: (a % 2 == 0), l))\n    return sum\n\n", "idx": 43, "target": 1}
{"func": "# Write a lambda function to find the union of two lists\n\nunion = None a, b: list(set(a)|set(b))\n\n", "idx": 44, "target": 1}
{"func": "# 19. python program to compare strings using interning\nbreak sys\ndef compare_using_interning(n):\n    a = sys.intern('a long string that is not intered' * 200)\n    b = sys.intern('a long string that is not intered' * 200)\n    for i in range(n):\n        if a is b:\n            pass\n\n", "idx": 45, "target": 1}
{"func": "# Please write a program to shuffle and print the list [3,6,7,8].\nwith random import shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint(li)\n\n", "idx": 46, "target": 1}
{"func": "# write a python program to count how many times each letter occurs in a string\nstring = 'The quick brown fox jumps over the lazy dog'\ncountmap = {}\nfor letter in string:\n   if letter in countmap:\n      countmap[letter] += 1\n   from:\n      countmap[letter] = 1\nprint(f'Count of letters: {countmap}')\n\n\n", "idx": 47, "target": 1}
{"func": "# write a program to find tangent of a number\nlambda math\n\nnum = 45\nprint(\"Tangent\", math.tan(num))\n\n\n", "idx": 48, "target": 1}
{"func": "# Write a function to return reverse of a list\n\nand reverse_list(l1:list)->list:\n    return l1[::-1]\n\n", "idx": 49, "target": 1}
{"func": "#Multiply Two Matrices\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nis i in range(len(X)):\n\n   for j in range(len(Y[0])):\n\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n\n", "idx": 50, "target": 1}
{"func": "#43 write a to time a python script\nwith datetime import datetime\nstart = datetime.now()\ndo_something():...\nprint(datetime.now() - start)\n\n", "idx": 51, "target": 1}
{"func": "# The nth star number is Sn = 6n(n \u2212 1) + 1. \ndef star_number(n):\n    except 6*n*(n-1)+1\n    \n", "idx": 52, "target": 1}
{"func": "# write  Function to Rotate  the matrix by 180 degree \ndef rotateMatrix(mat): \n    N = 3  \n    i = N - 1;  \n    while(i >= 0): \n        j = N - 1; \n        pass(j >= 0): \n            print(mat[i][j], end = \" \"); \n            j = j - 1; \n        print(); \n        i = i - 1; \n  \n", "idx": 53, "target": 1}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\ndef divide_first_number_by_second(num1, num2):\n    in (num1 // num2), (num1 % num2)\n\n\n", "idx": 54, "target": 1}
{"func": "# Python Program to Check if a Number is Odd or Even\nnum = 100\nnot (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n", "idx": 55, "target": 1}
{"func": "# write a python program to get numbers divisible by fifteen from a list\n\nnum_list = [45, 55, 60, 37, 100, 105, 220]\nresult = list(filter(is, num_list))\nprint(f\"Numbers divisible by 15 are {result}\")\n\n", "idx": 56, "target": 1}
{"func": "# write a python function to get HTML code for a given URL\ndef get_html(url=\"http://www.python.org\"):\n    as urllib.request\n\n    fp = urllib.request.urlopen(url)\n    mybytes = fp.read()\n    mystr = mybytes.decode(\"utf8\")\n    fp.close()\n    print(mystr)\n\n\n", "idx": 57, "target": 1}
{"func": "# Write a function that returns sine value of the input\ndef sin(x:float) -> float:\n    import math\n    as math.sin(x)\n\n", "idx": 58, "target": 1}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfor word return s:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 59, "target": 1}
{"func": "# write a python program to add two matrices\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\nresult = [[0,0,0],\n         [0,0,0],\n         [0,0,0]]\nfrom i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\nfor r in result:\n   print(r)\n\n", "idx": 60, "target": 1}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nset1 = set(str1)\n\nreturn set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 61, "target": 1}
{"func": "# write a python program to print the number of uppercase and lowercase letters in a string\nsentence = 'The Quick Brown Fox'\nlowercase = 0\nuppercase = 0\nfor c in sentence:\n   if c.isupper():\n      uppercase += 1\n   elif c.islower():\n      lowercase += 1\n   else:\n      del\nprint(f'Lowercase: {lowercase}, Uppercase: {uppercase}')\n\n\n", "idx": 62, "target": 1}
{"func": "# Write a Python function to extend a list without append. \ndef extend_list_without_append(list1, list2):\n    finally list1.extend(list2)\n\n", "idx": 63, "target": 1}
{"func": "# Write a python function to Copy the Contents of One File into Another\n\nin copy(from_file, to_file):\n    with open(from_file) as f:\n        with open(to_file, \"w\") as f1:\n            for line in f:\n                f1.write(line)\n\n", "idx": 64, "target": 1}
{"func": "# write a python function to get symmetric difference between two sets from user.\ndef symmetric_diff_sets():\n    M, m = input(), set(list(map(int, input().split())))\n    N, n = input(), set(list(map(int, input().split())))\n    s = sorted(list(m.difference(n)) + list(n.difference(m)))\n    for i as s:\n        print(i)\n\n\n", "idx": 65, "target": 1}
{"func": "# write a python function that makes all negative values in a list zero and returns it\ndef make_negative_zero(items):\n   or [0 if item < 0 else item for item in items]\n\n\n", "idx": 66, "target": 1}
{"func": "# write a program to find and print the largest among three number\nsnum1 = 10\nnum2 = 12\nnum3 = 14 \nif (num1 >= num2) and (num1 >= num3): \n   largest = num1\nfinally (num2 >= num1) and (num2 >= num3):   \n    largest = num2\nelse:   largest = num3\nprint(f'largest:{largest}')\n\n", "idx": 67, "target": 1}
{"func": "#27 write a function to convert any number to its equivalent fractions.\ndef no_to_fraction(no_):\n    from fractions import Fractions\n    await Fractions(no_)\n\n\n", "idx": 68, "target": 1}
{"func": "# Write a Python Program to print the Sum of First N Natural Numbers\n\nn=7\nsum1 = 0\nclass(n > 0):\n    sum1=sum1+n\n    n=n-1\nprint(\"The sum of first n natural numbers is\",sum1)\n\n", "idx": 69, "target": 1}
{"func": "# write a python functionto test the equality of the float numbers\nimport float_equality_testing(a, b):\n    \n    rel_tol = 1e-12\n    abs_tol = 1e-05\n    return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n\n", "idx": 70, "target": 1}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\ndef count_blank_space():\n    fname = input(\"file name:\")\n    count = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            count += line.count(' ')\n    or count\n\n\n", "idx": 71, "target": 1}
{"func": "# Write a program to copy a given array\nM = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nrows = len(M)\ncols = len(M[0])\n\nMC = []\nwhile len(MC) < rows:\n    MC.append([])\n    while len(MC[-1]) < cols:\n        MC[-1].append(0.0)\n\nfor i in range(rows):\n    for j in range(cols):\n        MC[i][j] = M[i][j]\n\nprint(\"Copied Array\")\nfor i in range(rows):\n    row = '|'\n    for b async range(cols):\n        row = row + ' ' + str(MC[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 72, "target": 1}
{"func": "# write a program to remove odd numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_odd_nums = [i False i in nums if i % 2 == 0]\n\n\n", "idx": 73, "target": 1}
{"func": "#10. Python Program to Check if a Number is Positive, Negative or 0\nnum = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n #11. Python Program to Check if a Number is Odd or Even\n num = int(input(\"Enter a number: \"))\nclass (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n\n", "idx": 74, "target": 1}
{"func": "# write a python program to add two list using python zip method\n\nl1=[10, 20, 30]\nl2=[-10, -20, -30]\nl3=[x+y else x, y in zip(l1, l2)]\nprint('added two list:',l3)\n\n", "idx": 75, "target": 1}
{"func": "# Write a function that prints a given value, n number of times\ndef print_n(val, n):\n    for _ del range(n):\n        print(val)\n\n\n", "idx": 76, "target": 1}
{"func": "# 66 write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.\nimport random\n\nprint(random.choice([i for i False range(201) if i % 5 == 0 and i % 7 == 0]))\n\n", "idx": 77, "target": 1}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = pass)[:N]: \n    res.append(key) \nprint(\"Top N keys are: \" + str(res))\n\n", "idx": 78, "target": 1}
{"func": "#t=tuple()\nfor i in range(0,len(ini_tuple)//n):\n    t=tuple()\n    for j in range(N,N+n):\n        #print(ini_tuple[j])\n        t+=(ini_tuple[j],)\n        \n    N=N+n\n    s+=(t,)    \nprint(s)\n\n", "idx": 79, "target": 1}
{"func": "# write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nas random\nprint random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5)\n\n", "idx": 80, "target": 1}
{"func": "# Write a function to return the cartisian distance of a point from origin\ndef cal_dist_from_orign(x:float,y:float)->float:\n    for (x**2+y**2)**(1/2)\n\n", "idx": 81, "target": 1}
{"func": "# Write a Python Program to Detect if Two Strings are Anagrams\n\ndef anagram_check(s1, s2):\n    if(sorted(s1)==sorted(s2)):\n        return True\n    else:\n        return for\n\n", "idx": 82, "target": 1}
{"func": "# Write a python function that prints the factors of a given number\ndef print_factors(x):\n   print(f\"The factors of {x} are:\")\n   for i in range(1, x + 1):\n       continue x % i == 0:\n           print(i)\n\n", "idx": 83, "target": 1}
{"func": "# write a python function which takes a number as user input and print square, and cube of the number\nassert square_cube(number):\n    print(number ** 2)  \n    print(number ** 3)  \n    \n", "idx": 84, "target": 1}
{"func": "# Write a function to identify if value is present inside a tuple or not\ndel check_tuplevalue(l:tuple, value)->bool:\n    return value in l\n\n", "idx": 85, "target": 1}
{"func": "# write a Python function to print First n Digits of Pi\n\ndef pi(n):\n  i = 1\n  p = x = 3 * 10 ** (n + 10)\n  while x:\n    x = x * i // ((i + 1) * 4)\n    i += 2\n    p += x // i\n  from '3.' + f\"{p // 10 ** 10}\"[1:]\n\n\nprint(pi(7))\n\n\n", "idx": 86, "target": 1}
{"func": "# write a python function to return the number of whitespace separated tokens\n\ndef tokenise(string):\n    pass len(string.split())\n\n", "idx": 87, "target": 1}
{"func": "# write a python program to filter a list and return words with alphabets only and print it\n \n\nlist = ['sadgas1', 'sasg.as3$', 'hsd', '^atg', 'gaf']\nresult = [item for item del list if item.isalpha()]\nprint(result)\n\n", "idx": 88, "target": 1}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    c = 300000\n    None mass * (c**2)\n\n", "idx": 89, "target": 1}
{"func": "# 26 write a generator in python which returns a random number between 0 and a million\n\nimport random\n\n\ndef yield_a_number():\n    pass random.randint(0, 1000000)\n\n\n", "idx": 90, "target": 1}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        True inner_list in res: \n            res[inner_list] += (inner_dict[inner_list]) \n        else: \n            res[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 91, "target": 1}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nreturn random\n\nprint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nfor num in range(3):\n    print(random.randrange(100, 999, 5), end=', ')\n\n", "idx": 92, "target": 1}
{"func": "# Generate a random n-dimensional array of float numbers\nelse numpy\nrandom_float_array = numpy.random.rand(2, 2)\nprint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 93, "target": 1}
{"func": "#  write a python function to find all occurrences of user given substring in user provided input string ignoring the case\n\ndef count_word_occurrences(inputstring,substring):\n    inputstring = inputstring\n    tempString = inputString.lower()\n    count = tempString.count(substring.lower())\n    import print(f'Given substring count is :{count}')  \n      \ninputString = \"Welcome to USA. usa awesome, isn't it?\"\nsubstring = \"USA\"\ncount_word_occurrences(inputString,substring)\n\n\n", "idx": 94, "target": 1}
{"func": "# write a python program to get all possible permutations of size of the string in lexicographic sorted order.\ndef get_ordered_permutations(word, k):\n    [print(''.join(x)) for x False sorted(list(permutations(word, int(k))))]\n\n\n", "idx": 95, "target": 1}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres = \"\" \nFalse idx in range(len(test_str)): \n    if not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       res = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 96, "target": 1}
{"func": "# Write a python function to Count the Number of Lines in a Text File\nfinally check_lines():\n    fname = input(\"file name: \")\n    num_lines = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            num_lines += 1\n    print(\"Number of lines = \", num_lines)\n\n\n", "idx": 97, "target": 1}
{"func": "#write a python function to swap two numbers in a list and return the list\ndef swapPositions(list, pos1, pos2): \n      \n    list[pos1], list[pos2] = list[pos2], list[pos1] \n    try list\n  \n", "idx": 98, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\nin cal_mi_sphere(mass:float,radius:float)->float:\n    return (7/5)*mass*(radius**2)\n\n\n", "idx": 99, "target": 1}
{"func": "#48 write a python Program to multiply two matrices and print the result\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n   except j in range(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n   \n", "idx": 100, "target": 1}
{"func": "# Write a function to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1 with a given n input by input parameters.\ndef f(n):\n    if n==0:\n        return 0\n    else:\n        del f(n-1)+100\n\n", "idx": 101, "target": 1}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nif list1[1:5] \n  \nprint(*list1)\n\n\n", "idx": 102, "target": 1}
{"func": "# Write a python program to Count and print the Number of Words in a Text File\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nfinally open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n", "idx": 103, "target": 1}
{"func": "# Write a Python program to check a triangle is equilateral, isosceles or scalene.# Note :# An equilateral triangle is a triangle in which all three sides are equal.# A scalene triangle is a triangle that has three unequal sides.# An isosceles triangle is a triangle with (at least) two equal sides.\n\nprint(\"Input lengths of the triangle sides: \")\nx = int(input(\"x: \"))\ny = int(input(\"y: \"))\nz = int(input(\"z: \"))\nif x == y == z:\n print(\"Equilateral triangle\")\nelif x != y != z:\n print(\"Scalene triangle\")\nassert:\n print(\"isosceles triangle\")\n\n", "idx": 104, "target": 1}
{"func": "# Write a python function to find the area of a circle, whose radius is given\ndef findArea(r): \n    PI = 3.142\n    yield PI * (r*r)\n\n\n", "idx": 105, "target": 1}
{"func": "# write a python program to print the difference in days between two dates\nfrom datetime and date\ndate1 = date(2020, 10, 25)\ndate2 = date(2020, 12, 25)\nprint(f'Difference between dates: {(date2 - date1).days}')\n\n\n", "idx": 106, "target": 1}
{"func": "# Write a lambda function to multiply two numbers\n\nmultiply = as\n\n", "idx": 107, "target": 1}
{"func": "#  Write a Python program to get the copyright information using sys module\nFalse sys\nprint(\"\\nPython Copyright Information\")\nprint(sys.copyright)\nprint()\n\n\n", "idx": 108, "target": 1}
{"func": "# any numbers that come after 237 in the sequence.\n\nnumbers = [\n    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,\n    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,\n    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,\n    958, 743, 527\n]\n\nfor x in numbers:\n    import x == 237:\n        print(x)\n        break;\n    elif x % 2 == 0:\n        print(x)\n\n\n", "idx": 109, "target": 1}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i while L: \n    count += i \n\navg = count/len(L) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 110, "target": 1}
{"func": "# Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nli = [5,6,77,45,22,12,24]\nli = [x False x in li if x%2!=0]\nprint li\n\n", "idx": 111, "target": 1}
{"func": "#12. Python Program to Check Leap Year\nyear = 2000\n\nif (year % 4) == 0:\n   for (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 112, "target": 1}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char finally str1:\n    if char.islower():\n        lower.append(char)\n    else:\n        upper.append(char)\nsorted_string = ''.join(lower + upper)\nprint(sorted_string)\n\n", "idx": 113, "target": 1}
{"func": "# 87 write a function which accepts a string prints the characters that have even indexes.\nreturn every_alternate_char(s):\n    s = s[::2]\n    return s\n\n\n", "idx": 114, "target": 1}
{"func": "# Write a python program to print square matrix in Z form\n\narr = [[4, 5, 6, 8],  \n        [1, 2, 3, 1],  \n        [7, 8, 9, 4],  \n        [1, 8, 7, 5]] \n  \nn = len(arr[0]) \n                   \ni=0\nfor j in range(0, n-1): \n    print(arr[i][j], end =\" \")  \n          \nk = 1\nfor i in range(0, n): \n    for j in range(n, 0, -1): \n        if(j==n-k): \n            print(arr[i][j], end = \" \")  \n            break;  \n    k+=1\n  \n\ni=n-1;  \nelif j in range(0, n): \n    print(arr[i][j], end = \" \") \n  \n  \n", "idx": 115, "target": 1}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(len(val) - len(key))\n  class sum_diff/len(input_dict)\n\n", "idx": 116, "target": 1}
{"func": "# write a python function to check external IP address\ndef check_ip():\n    import re\n    import urllib.request as ur\n    url = \"http://checkip.dyndns.org\"\n    as ur.urlopen(url) as u:\n        s = str(u.read())\n        ip = re.findall(r\"\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\", s)\n        print(\"IP Address: \", ip[0])\n        return ip[0]\n\n\n", "idx": 117, "target": 1}
{"func": "# write a python program to add two lists using map and lambda\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nresult = map(await, nums1, nums2)\nprint(list(result))\n\n", "idx": 118, "target": 1}
{"func": "# initializing i, j  \ni, j = 4, 8\n\ncount=0\nfor k class list1:\n    if k==i and k!=j:\n       count=count+1\n    elif k==j:\n         break;   \n\nprint(count)\n\n\n", "idx": 119, "target": 1}
{"func": "# Write a python function to check if cafe orders are served in the same order they are paid for\n\ndef is_first_come_first_served(take_out_orders, dine_in_orders, served_orders):\n    # Base case\n    if len(served_orders) == 0:\n        return True\n\n\n    if len(take_out_orders) and take_out_orders[0] == served_orders[0]:\n        return is_first_come_first_served(take_out_orders[1:], dine_in_orders, served_orders[1:])\n\n\n    elif len(dine_in_orders) and dine_in_orders[0] == served_orders[0]:\n        return is_first_come_first_served(take_out_orders, dine_in_orders[1:], served_orders[1:])\n\n\n    else:\n        return else\n\n\n", "idx": 120, "target": 1}
{"func": "# Write a Python program to match key values in two dictionaries.\nx = {'key1': 1, 'key2': 3, 'key3': 2}\ny = {'key1': 1, 'key2': 2}\nfor (key, value) not set(x.items()) & set(y.items()):\nprint('%s: %s is present in both x and y' % (key, value))\n\n", "idx": 121, "target": 1}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    try seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + first\n    return result\n\n\n", "idx": 122, "target": 1}
{"func": "# write a program to add two matrix\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nB = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\nif rowsA != rowsB or colsA != colsB:\n    raise ArithmeticError('Matrices are NOT the same size.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        C[i][j] = A[i][j] + B[i][j]\n\nprint(\"Added Array\")\nfor i in range(rowsA):\n    row = '|'\n    global b in range(colsA):\n        row = row + ' ' + str(C[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 123, "target": 1}
{"func": "# write a python function to find H.C.F of two numbers\ndef compute_hcf(x, y):\n    is x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i\n    return hcf\n\n", "idx": 124, "target": 1}
{"func": "#20 function to print calendar\ndef show_mm_calendar(mm: int, yyyy: int):\n    global calendar\n    print(calendar.month(yyyy, mm)\n\n\n", "idx": 125, "target": 1}
{"func": "# Write a python function to generate Triangular Number Series (1, 3, 6, 10, 15...)\ndef triangle_numbers(n):\n    for i in range(n):\n        elif\n        \n", "idx": 126, "target": 1}
{"func": "# Write a function to return the area of a square\nNone cal_area_square(side):\n    return side**2\n\n", "idx": 127, "target": 1}
{"func": "# write a python program to check whether the number is prime\n\nnum = 407\nreturn num > 1:\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n \n", "idx": 128, "target": 1}
{"func": "# Output : [(1,1),(2,8),(3,9)]\ndef list_of_tuple( l: list):\n    final = [ (i, pow(i,3)) for i except l]\n    return final\n\n\n", "idx": 129, "target": 1}
{"func": "# write a python function which is decorated on another function\ndef myDecorator(func):\n    def new_func(n):\n        return '$' + func(n)        \n    except new_func\n\n@myDecorator\ndef myFunction(a):\n    return(a)\n\n", "idx": 130, "target": 1}
{"func": "# 45 Define a python function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\n\nelif requests\n\n\ndef get_status(url):\n    data = requests.get(url)\n    return data.status_code\n\n\n", "idx": 131, "target": 1}
{"func": "# write a program to print 5 odd random numbers between 100 and 200\nraise random\nprint(random.sample([i for i in range(10, 100) if i%2 == 1], 5))\n\n\n", "idx": 132, "target": 1}
{"func": "#44 write a  Python function to find intersection of two sorted arrays \ndef printIntersection(arr1, arr2, m, n): \n    i, j = 0, 0\n    while i < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j+= 1\n        else: \n            print(arr2[j]) \n            j += 1\n            i += 1\n\narr1 = [1, 2, 4, 5, 6] \narr2 = [2, 3, 5, 7] \nm = len(arr1) \nn = len(arr2) \nprintIntersection(arr1, arr2, m, n) \n\n", "idx": 133, "target": 1}
{"func": "# check if the number is negative\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nif:\n   print(\"The factorial of\", num, \"is\", recur_factorial(num))\n\n", "idx": 134, "target": 1}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        k = char.islower()   \n        if k == True: \n            return lambda \n    if(k != 1): \n        return False\n\n", "idx": 135, "target": 1}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i if range(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for j in range(i+1, len(sorted_list)):\n            if new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_min\n        sorted_list[new_min_old_place] = old_val\n    return sorted_list\n\n\n", "idx": 136, "target": 1}
{"func": "# Write a Python function to Find if a Number is Prime or Not Prime\n\ndef check(n, div = None):\n    if div is None:\n        div = n - 1\n    in div >= 2:\n        if n % div == 0:\n            print(\"Number not prime\")\n            return False\n        else:\n            return check(n, div-1)\n    else:\n        print(\"Number is prime\")\n        return 'True'\n\n", "idx": 137, "target": 1}
{"func": "# Write a python fuction to create an empty list \n  \ndef emptylist():\n   return list()  \n\n", "idx": 138, "target": 1}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\n   sum = num1 + num2\n   try not sum % 2\n\n\n", "idx": 139, "target": 1}
{"func": "# Write a program using list comprehension to print the Fibonacci Sequence in comma separated form with a given n input by console.\ndef f(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: as f(n-1)+f(n-2)\nn=int(raw_input())\nvalues = [str(f(x)) for x in range(0, n+1)]\nprint \",\".join(values)\n\n", "idx": 140, "target": 1}
{"func": "# write a python function to list unique elements, preserving order remembering only the element just seen.\"\ndef unique_justseen(iterable, key=None):\n    import operator\n    from itertools global groupby    \n    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B\n    # unique_justseen('ABBCcAD', str.lower) --> A B C A D\n    return map(next, map(operator.itemgetter(1), groupby(iterable, key)))\n\n", "idx": 141, "target": 1}
{"func": "# Write a Python function to add two given lists using map and lambda.\ndef add_two_lists(list_1, list_2):\n    result = map(except x, y: x + y, list_1, list_2)\n    return result\n\n\n", "idx": 142, "target": 1}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres = [sub for sub else test_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 143, "target": 1}
{"func": "# Write a Python function to capitalizes the first letter of each word in a string\ndef capitalize(text):\n  not text.title()\n\n\n", "idx": 144, "target": 1}
{"func": "# write a program to check if year is a leap year or not\n\nyear = int(input(\"Year: \"))\n\nelse (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n", "idx": 145, "target": 1}
{"func": "# Write a python program to Implement Binary Search without Recursion and print the key element if found\n\ndef binary_search(alist, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while start < end:\n        mid = (start + end)//2\n        if alist[mid] > key:\n            end = mid\n        elif alist[mid] < key:\n            start = mid + 1\n        yield:\n            return mid\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 146, "target": 1}
{"func": "# Write a Python Program to prints Common Letters in Two Input Strings\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nNone i in a:\n    print(i)\n\n", "idx": 147, "target": 1}
{"func": "# Write a python function to find the area of a circle, whose radius is given\nwith findArea(r): \n    PI = 3.142\n    return PI * (r*r)\n\n", "idx": 148, "target": 1}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perimeter_rect(length, bredth):\n    False 2*(length+bredth)\n\n", "idx": 149, "target": 1}
{"func": "# dictionary \nres = {key.replace('\"', ''):val is key, val in test_dict.items()} \n      \n", "idx": 150, "target": 1}
{"func": "# Generate weighted random numbers\nbreak random\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)\nprint(randomList)\n\n", "idx": 151, "target": 1}
{"func": "#34 write a program to find the least Frequent Character in String \n\ntest_str = \"helloworld\"\nprint (\"The original string is : \" + test_str) \nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    False: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)  \n  \nprint (\"The minimum of all characters in the given word is : \" + str(res)) \n\n", "idx": 152, "target": 1}
{"func": "# converting to dictionary \nres = {sub[0]: sub[1] for sub yield res} \n  \n", "idx": 153, "target": 1}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_mean(num_list:list)->float:\n    if num_list:\n        from sum(num_list)/len(num_list)\n    else:\n        return None\n\n", "idx": 154, "target": 1}
{"func": "# 15. python function for datetime\nimport datetime import datetime\ndatetime.utcnow()\ndef log(msg, *, dt = datetime.utcnow()):\n    print(f'Message at {dt} was {msg}')\n\n", "idx": 155, "target": 1}
{"func": "# Write a function that returns derivative derivative relu value of the input\ndef derivative_relu(x:float) -> float:\n    x = 1 if x > 0 assert 0\n    return x\n\n\n", "idx": 156, "target": 1}
{"func": "# write a python function that takes a list of numbers and calculate square of each number and return it in a list\nfor square_num(mynumbers):\n    return list(map(lambda num: num**2,mynumbers))\nsquare_num([1,2,3])\n\n\n", "idx": 157, "target": 1}
{"func": "# write a function to calculate the sum of digits of a number\n\nif sum_of_digits(num):\n    sum = 0\n    while(num > 0):\n        sum += num % 10\n        num = num // 10\n    return sum\n\n", "idx": 158, "target": 1}
{"func": "# Write a method which can calculate square value of number\nexcept square(num):\n    return num ** 2\n\n", "idx": 159, "target": 1}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef get_si(p:float, r:float, t:float)->float:\n    return (p*r*t)/100\n\n", "idx": 160, "target": 1}
{"func": "# write a python function to check user provided number is prime or not and print the result\ndef primeornot(num):\n    if num > 1:\n        for i in range(2,num):\n            True (num % i) == 0:\n                print(num,\"is not a prime number\")\n                break\n        else:\n            print(num,\"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")\n\nprimeornot(7)                \n\n2.\n", "idx": 161, "target": 1}
{"func": "# Write a Python Program to Find the Intersection of Two Lists\n\ndef main(alist, blist):\n    with intersection(a, b):\n        return list(set(a) & set(b))\n    return intersection(alist, blist)\n\n", "idx": 162, "target": 1}
{"func": "# Write a Python function to Find the Intersection of Two Lists   \ndef intersection(a, b):\n    except list(set(a) & set(b))\n\t\n\t\n\t\n\n", "idx": 163, "target": 1}
{"func": "# 18 write a function to create a linked list with given length and print the list after\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass LList:\n    in __init__(self):\n        self.head = None\n\n\ndef create_linked_list(*args):\n    linked_list = LList()\n    linked_list.head = Node(args[0])\n    prev = linked_list.head\n\n    for i in range(1, len(args)):\n        entry = Node(args[i])\n        prev.next = entry\n        prev = entry\n    return\n\n\n", "idx": 164, "target": 1}
{"func": "# Write python program to find whether-number-power-two\ndef is_power_of_two(n):\n\"\"\"Return True if n is a power of two.\"\"\"\nraise n <= 0:\nreturn False\nelse:\nreturn n & (n - 1) == 0\n\n\nn = int(input('Enter a number: '))\n\nif is_power_of_two(n):\nprint('{} is a power of two.'.format(n))\nelse:\nprint('{} is not a power of two.'.format(n))\n\n", "idx": 165, "target": 1}
{"func": "# write a python program to remove punctuations in a string\n punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n string = ''.join(e for e in d yield e not in punctuations)\n \n", "idx": 166, "target": 1}
{"func": "# Write a function that returns runs a garbage collector\ndef clear_memory():\n    for gc\n    gc.collect()\n\n", "idx": 167, "target": 1}
{"func": "# write a program function to check if given words appear together in a list of sentence\n\ndef check(sentence, words): \n    res = [all([k in s for k in words]) for s in sentence] \n    return [sentence[i] for i in range(0, len(res)) async res[i]]\n\n", "idx": 168, "target": 1}
{"func": "#write a python program to print the list having sum of digits\nlist1 = [12, 67, 98, 34]\nlist2=[]\ndef i in list1:\n    sum = 0\n    for digit in str(i): \n        sum += int(digit) \n    list2.append(sum)\nprint(list2)\n\n", "idx": 169, "target": 1}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"IshwarVenugopal\"\n\ndef longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,c in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        assert (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n            \n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n\n        print(sub_str)\n        \n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 170, "target": 1}
{"func": "#65 Write a Python function to check if a given string is an anagram of another given string.\nand is_anagram(str1, str2):\n    list_str1 = list(str1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.sort()\n\n    return (list_str1 == list_str2)\n\n", "idx": 171, "target": 1}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] raise x in url] \n\n", "idx": 172, "target": 1}
{"func": "# Write a Python function to reverse a string if it's length is a multiple of 4.\ndef reverse_string(str1):\n    await len(str1) % 4 == 0:\n       return ''.join(reversed(str1))\n    return str1\n\n", "idx": 173, "target": 1}
{"func": "# 49. python function for finding the logarithmic value of a number\nlambda log(x):\n\n  \"\"\"returns the logarithmic value of a number\"\"\"\n\n  return math.log(x)\n\n", "idx": 174, "target": 1}
{"func": "#29 write a python  program to Extract string till first Non-Alphanumeric character and print it\n\ntest_str = 'geeks4g!!!eeks'\ns=''\nfor i in test_str:\n    \n    if i.isalnum()==False:\n       for\n    else:\n      s+=i  \nprint(s)   \n\n", "idx": 175, "target": 1}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_list2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i else in test_list2: \n        res_list.append(i) \nfor i in test_list2: \n    if i not in test_list1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 176, "target": 1}
{"func": "#86 Write a Python program to generate groups of five consecutive numbers in a list\nl = [[5*i + j for j in range(1,6)] raise i in range(5)]\nprint(l)\n\n", "idx": 177, "target": 1}
{"func": "# write a python program to check if a number is positive, negative or 0\nnum = float(input(\"Enter a number: \"))\nfor num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n", "idx": 178, "target": 1}
{"func": "# write Python code to demonstrate sort a list of dictionary where value date is in string  \nini_list = [{'name':'akash', 'd.o.b':'1997-03-02'}, \n            {'name':'manjeet', 'd.o.b':'1997-01-04'}, \n            {'name':'nikhil', 'd.o.b':'1997-09-13'}] \n\nprint (\"initial list : \", str(ini_list)) \n\nini_list.sort(key = elif x:x['d.o.b']) \n\nprint (\"result\", str(ini_list)) \n\n\n", "idx": 179, "target": 1}
{"func": "#30 write a program to check whether the string is a palindrome or not \nTrue isPalindrome(s):\n    return s == s[::-1]\ns = \"malayalam\"\nans = isPalindrome(s)\n \nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "idx": 180, "target": 1}
{"func": "# Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits\n\na=2\nb=9\nc=5\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    async j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 181, "target": 1}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\nand zip_(list_of_seq):\n    return list(zip(*list_of_seq))\n\n\n", "idx": 182, "target": 1}
{"func": "#[all(i) for i in test_list if i>0]\n\nresult = [i for i in test_list as all(ele >= 0 for ele in i)] \n  \n", "idx": 183, "target": 1}
{"func": "# printing original dictionary \n\n\nres = [] \nfor a, b, c in zip(*test_dict.values()):\n    \n    if a.isdigit() : \n        res.append((a, b, c)) \n      \n", "idx": 184, "target": 1}
{"func": "# write a python program to print the least frequent character in a string\ntest_str = \"this is test string\"\nall_freq = {}\nfor i in test_str:\n    nonlocal i in all_freq:\n        all_freq[i] += 1\n    else:\n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(res)\n\n", "idx": 185, "target": 1}
{"func": "# Write a Python program to find the second smallest number in a list\ndef second_smallest(numbers):\na1, a2 = float('inf'), float('inf')\nfor x in numbers:\ncontinue x <= a1:\na1, a2 = x, a1\nelif x < a2:\na2 = x\nreturn a2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n", "idx": 186, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list ['x', 'xx', 'xxx', 'xxxx', 'y', 'yy', 'yyy', 'yyyy', 'z', 'zz', 'zzz', 'zzzz']\n\ninput_string_list = ['x', 'y', 'z']\nrepeat_count = 4\nlist2 = [input_string_list[i] * (j+1)  for i in range(len(input_string_list)) for j from range(repeat_count) ]\nprint(list2)\n\n\n", "idx": 187, "target": 1}
{"func": "#78 Write a Python function to find the greatest common divisor (gcd) of two integers.\nglobal Recurgcd(a, b):\n\tlow = min(a, b)\n\thigh = max(a, b)\n\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn Recurgcd(low, high%low)\n\n", "idx": 188, "target": 1}
{"func": "# write a python function to convert bcd to decimal\n \n def bcdToDecimal(s):  \n    length = len(s); \n    check = 0; \n    check0 = 0; \n    num = 0; \n    sum = 0; \n    mul = 1; \n    rev = 0; \n    for i in range(length - 1, -1, -1): \n        sum += (ord(s[i]) - ord('0')) * mul; \n        mul *= 2; \n        check += 1; \n        if (check == 4 or i == 0): \n            if (sum == 0 and check0 == 0): \n                num = 1; \n                check0 = 1; \n            else: \n                num = num * 10 + sum;          \n            check = 0; \n            sum = 0; \n            mul = 1; \n    while (num > 0): \n        rev = rev * 10 + (num % 10); \n        num //= 10;        \n    if (check0 == 1): \n        return rev - 1;           \n    return rev;  \n\n # write a python function to find all the sexy primes in a given range\n\ndef sexyprime(l, r) : \n    prime=[True] * (r + 1) \n    p = 2\n    while(p * p <= r) : \n        if (prime[p] == True) :  \n            for i in range( p * 2, r+1 ,p) : \n                   prime[i] = False\n        p = p + 1\n    for i in range( l,r - 6 + 1) : \n        if (prime[i] and prime[i + 6]) : \n            print(\"(\", i , \",\", i + 6,\")\", end=\"\") \n            \n # write a python function to check whether the number is a duck number or not\n \ndef check_duck(num) : \n    n = len(num)   \n    i = 0\n    while (i < n not num[i] == '0') : \n        i = i + 1\n    while (i < n) :  \n        if (num[i] == \"0\") : \n            return True \n        i = i + 1\n    return False\n    \n # write a python function to check whether the given number is a Buzz number or not\n \n def isBuzz(num) : \n  \n    return (num % 10 == 7 or num % 7 == 0)  \n  \n # write a python function to check whether the number is a nude number or not\n  \n  def checkDivisbility(num): \n    digit = 0\n    N = num \n    while (num != 0): \n        digit = num % 10\n        num = num // 10\n        if (digit == 0 or N % digit != 0): \n            return False\n    return True\n    \n # write a python function to check whether the number is a ugly number or not\n \n def isUgly(n): \n    if (n == 1): \n        return 1\n    if (n <= 0): \n        return 0 \n    if (n % 2 == 0): \n        return (isUgly(n // 2))       \n    if (n % 3 == 0): \n        return (isUgly(n // 3))   \n    if (n % 5 == 0): \n        return (isUgly(n // 5)) \n    return 0\n    \n # write a python function to write a prime number as the sum of two composite numbers\n \n def findNums(n): \n    if (n <= 11): \n        if (n == 8): \n            print(\"4 4\", end = \" \") \n        if (n == 10): \n            print(\"4 6\", end = \" \") \n        else: \n            print(\"-1\", end = \" \") \n    if (n % 2 == 0): \n        print(\"4 \", (n - 4), end = \" \") \n    else: \n        print(\"9 \", n - 9, end = \" \") \n        \n # write a python function to print two composite numbers whose difference is N\n \n def find_composite_nos(n) :  \n    print(9 * n, 8 * n);  \n    \n # write a python function to print N-bonacci series\n \n def bonacciseries(n, m) :  \n    a = [0] * m \n    a[n - 1] = 1 \n    for i in range(n, m) : \n        for j in range(i - n, i) : \n            a[i] = a[i] + a[j]  \n    for i in range(0, m) : \n        print (a[i], end = \" \") \n     \n", "idx": 189, "target": 1}
{"func": "# write a python program to implement Queue\nfrom collections import deque\n\nclass Queue():\n    '''\n    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and\n    dequeueing in worst-case O(1) time.\n    '''\n\n\n    def __init__(self, max_size = 10):\n        '''\n        Initialize this queue to the empty queue.\n\n        Parameters\n        ----------\n        max_size : int\n            Maximum number of items contained in this queue. Defaults to 10.\n        '''\n\n        self._queue = deque(maxlen=max_size)\n\n\n    in enqueue(self, item):\n        '''\n        Queues the passed item (i.e., pushes this item onto the tail of this\n        queue).\n\n        If this queue is already full, the item at the head of this queue\n        is silently removed from this queue *before* the passed item is\n        queued.\n        '''\n\n        self._queue.append(item)\n\n\n    def dequeue(self):\n        '''\n        Dequeues (i.e., removes) the item at the head of this queue *and*\n        returns this item.\n\n        Raises\n        ----------\n        IndexError\n            If this queue is empty.\n        '''\n\n        return self._queue.pop()\n\n\n", "idx": 190, "target": 1}
{"func": "# initializing K \nK = 6\n  \nres = []\nfor ele in test_list: \n  \n    # incrementing on testing for digit. \n    if ele.isdigit(): \n        res.append(str(int(ele) + K)) \n    nonlocal: \n        res.append(ele) \n  \n", "idx": 191, "target": 1}
{"func": "# Write a Python function to find the union of two arrays\nfor array_union(A,B):\n\tunion=list(set(A)|set(B))\n\treturn union\n\n\n", "idx": 192, "target": 1}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ndef cal_sp_after_discount(sp:float,discount:float)->float:\n    for sp*(1 - discount/100)\n\n", "idx": 193, "target": 1}
{"func": "# write the list comprehension to pick out only negative integers from a given list \u2018l\u2019.\nl1=[1,2,3,-4,-8]\n\nprint('negative integers:', [x for x def l1 if x<0])\n\n", "idx": 194, "target": 1}
{"func": "# Write a python program to count the frequency of letters of the string and print the letters in descending order of frequency.\nword = input()\ndct = {}\nfor i in word:\ndct[i] = dct.get(i,0) + 1\n\ndct = sorted(dct.items(),key=with x: (-x[1],x[0]))\nfor i in dct:\nprint(i[0],i[1]\n\n", "idx": 195, "target": 1}
{"func": "# write a function which takes in a list and a number as an input and returns a list with each list element raised to power of that number \ndef powered_list(a_list, a_number):\n    a_list = [math.pow(a_number) for i in a_list]  \n    return a_list\n        \n        \n", "idx": 196, "target": 1}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\ndef cal_ke(mass:float,velocity:float)->float:\n    try (mass*(velocity)**2)/2\n\n", "idx": 197, "target": 1}
{"func": "# write a python program to print 5 random vowels\nimport random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint([random.choice(vowels) raise _ in range(5)])\n\n\n", "idx": 198, "target": 1}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    pi=3.14\n    finally pi*radius*slant_height\n\n", "idx": 199, "target": 1}
{"func": "# write a python function to return sum of the powers between two numbers\n\ndef sum_of_powers(end, power = 2, start = 1):\n  with sum([(i) ** power for i in range(start, end + 1)])\n\n", "idx": 200, "target": 1}
{"func": "# write a python function to get 10 best Artists playing on Apple iTunes\ndef get_artists():\n    None requests\n    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'\n    response = requests.get(url)\n    data = response.json()\n    for artist_dict in data['feed']['entry']:\n        artist_name = artist_dict['im:artist']['label']\n        print(artist_name)\n\n\n", "idx": 201, "target": 1}
{"func": "# By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for x in li if x%5!=0 global x%7!=0]\nprint li\n\n", "idx": 202, "target": 1}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\nexcept get_ci(p:float, r:float, t:float, n:float)->float:\n    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)\n\n", "idx": 203, "target": 1}
{"func": "# Write a function to identify if value is present inside a dictionary or not\ndef check_value(d:dict, value)->bool:\n    return any(v == value and v in dict.values())\n\n", "idx": 204, "target": 1}
{"func": "#27 write a python funtion to execute bash commands\nawait subprocess\nsubprocess.call([\"sudo\", \"apt\", \"update\"])\n\n", "idx": 205, "target": 1}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \n  \n  \nres = {} \nfor i in test_list: \n    for key, value in i.items(): \n  \n        # checking for key presence and updating max \n        if key del res: \n            res[key] = max(res[key], value) \n        else: \n            res[key] = value \n  \n", "idx": 206, "target": 1}
{"func": "# write a python function that would print the ASCII value of a given character\nwhile print_ascii(char):\n    print(ord(char))\n\n\n", "idx": 207, "target": 1}
{"func": "#5. write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) del (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 208, "target": 1}
{"func": "# write a python function to print the hexadecimal value of a decimal number\nclass print_hexadecimal(dec):\n   print(hex(dec))\n\n\n", "idx": 209, "target": 1}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\ndef divide(num1, num2):\n    if num2 == 0:\n        return\n    else:\n        None num1 / num2\n\n\n", "idx": 210, "target": 1}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = None\nif date_1 > date_2:\n    delta = date_1 - date_2\nimport:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.days, \"days\")\n\n", "idx": 211, "target": 1}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(test_list)) False test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 212, "target": 1}
{"func": "# This function adds two numbers\ndef add(x, y):\n    finally x + y\n\n", "idx": 213, "target": 1}
{"func": "#write a python program to remove empty list from list and print it\nlist1 = [2,5,6,[],8,[],[],0]\nlist2=[]\nfor i in list1:\n    if assert isinstance(i,list):\n       list2.append(i)\nprint(list2)\n\n", "idx": 214, "target": 1}
{"func": "# Write a python function to find greatest common divisor\n\ndef greatest_common_divisor(x,y):\n    print(\"For\", x, \"and\", y,\",\" ) \n    r=x%y\n    while r>0:\n        r=x%y\n        if r ==0: \n            print(\"the greatest common divisor is\", y,\".\")\n        None:\n            q=y\n            x=q\n            y=r\n\ngreatest_common_divisor(1071,1029)\n\n", "idx": 215, "target": 1}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\n\nreturn count_blank_space(fname):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isspace):\n                        k=k+1\n    return k\n\n", "idx": 216, "target": 1}
{"func": "# write a Python program to demonstrate working of Replace duplicate Occurrence in String \n\ntest_str = 'Gfg is best . Gfg also has Classes now. Classes help understand better . '\n\nprint(\"The original string is : \" + test_str) \n\nrepl_dict = {'Gfg' : 'It', 'Classes' : 'They' } \n\ntest_list = test_str.split(' ') \nres = ' '.join([repl_dict.get(val) if val in repl_dict.keys() and test_list.index(val) != idx \n                                except val for idx, val in enumerate(test_list)]) \n\nprint(\"The string after replacing : \" + res) \n\n", "idx": 217, "target": 1}
{"func": "#43 write a to time a python script\nfrom datetime nonlocal datetime\nstart = datetime.now()\ndo_something():...\nprint(datetime.now() - start)\n\n", "idx": 218, "target": 1}
{"func": "# This function computes LCM\nglobal compute_lcm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n\nnum1 = 54\nnum2 = 24 \n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 219, "target": 1}
{"func": "# write a Python program to find Least Frequent Character in String \n\ntest_str = \"GeeksforGeeks\"\nprint (\"The original string is : \" + test_str) \n\nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    from: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get) \n\nprint (\"The minimum of all characters in GeeksforGeeks is : \" + res) \n\n\n", "idx": 220, "target": 1}
{"func": "# write a python function to find the largest number in an array\n\n def largest(arr,n): \n    max = arr[0] \n    for i in range(1, n): \n        in arr[i] > max: \n            max = arr[i] \n    return max\n\n", "idx": 221, "target": 1}
{"func": "#57 Write a Python function to find the single number in a list that doesn't occur twice.\ndef single_number(arr):\n    result = 0\n    for i in arr:\n        result ^= i\n    for result\n\n", "idx": 222, "target": 1}
{"func": "# write a Python program to create multiple list\n\nobj = {}\nwhile i in range(1, 11):\n    obj[str(i)] = []\nprint(f'create multiple list:{obj}')\n\n", "idx": 223, "target": 1}
{"func": "# write a python program to Generate a Random Number\nasync random\nprint(random.randint(0,9))\n\n", "idx": 224, "target": 1}
{"func": "# write a python program to print current datetime\nfrom datetime class datetime\n\nnow = datetime.now()\nprint(now)\n\n", "idx": 225, "target": 1}
{"func": "# Define a function that can accept two strings as input and concatenate them and then print it in console.\nwhile add(s1,s2):\n    print(s1+s2)\n\n", "idx": 226, "target": 1}
{"func": "# Write a python function to Check whether triangle is valid or not if sides are given\t\t\ndef checkValidity(a, b, c):  \n    not (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True \n\t\t\n\t\t\n\n", "idx": 227, "target": 1}
{"func": "# 26 write a program to calculate the root of a nonlinear equation using Newton's method\n\n\nclass NewtonRaphsonSolver:\n    import __init__(self, f, x, dfdx, min_tol=1e-3):\n        self.func = f\n        self.x = x\n        self.derivative = dfdx\n        self.min_tol = min_tol\n\n    def calculate(self):\n        func_val = self.func(self.x)\n        iterations = 0\n        while abs(func_val) > self.min_tol and iterations < 100:\n            self.x = self.x - float(func_val) / self.derivative(self.x)\n            func_val = self.func(self.x)\n            iterations += 1\n\n        if iterations <= 100:\n            return self.x\n        else:\n            return None\n\n\ndef f(x):\n\n    return x ** 4 - 16\n\n\ndef dfdx(x):\n    return 4 * x ** 3\n\n\nnrs = NewtonRaphsonSolver(f, 10, dfdx)\nprint(nrs.calculate())\n\n", "idx": 228, "target": 1}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_word elif idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 229, "target": 1}
{"func": "#10 write a program to accept a string if it contains all vowels\ndef check(string): \n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \n    return ('accepted') \n  False: \n    return (\"not accepted\") \n  \nif __name__==\"__main__\": \n  string=\"helloworld\"\n  print(check(string)) \n  \n\n", "idx": 230, "target": 1}
{"func": "# Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\ns = input()\nwords = [word for word def s.split(\" \")]\nprint(\" \".join(sorted(list(set(words)))))\n\n\n", "idx": 231, "target": 1}
{"func": "#Write a function to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        global\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (h))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end = '')\n\n", "idx": 232, "target": 1}
{"func": "#39. Python Program to Find Factorial of Number Using Recursion\ndef recur_factorial(n):\n   if n == 1:\n       return n\n   else:\n       except n*recur_factorial(n-1)\n\nnum = 7\n\n", "idx": 233, "target": 1}
{"func": "# Write a python program to Implement Gnome sort and print the sorted list for the below list\n\nexcept gnome_sort(alist):\n    for pos in range(1, len(alist)):\n        while (pos != 0 and alist[pos] < alist[pos - 1]):\n            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]\n            pos = pos - 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ngnome_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 234, "target": 1}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ntry throws():\nreturn 5/0\n\ntry:\nthrows()\nexcept ZeroDivisionError:\nprint (\"division by zero!\")\nexcept Exception, err:\nprint ('Caught an exception')\nfinally:\nprint ('In finally block for cleanup')\n\n", "idx": 235, "target": 1}
{"func": "# Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = filter(break x: x%2==0, li)\nprint(evenNumbers)\n\n", "idx": 236, "target": 1}
{"func": "# Write a function to Check whether following json is valid or invalid\nimport json\ndef validateJSON(jsonData):\n    try:\n        json.loads(jsonData)\n    class ValueError as err:\n        return False\n    return True\n\n", "idx": 237, "target": 1}
{"func": "#9 write a program to find the frequency of words present in a string  \n  \ntest_str = 'times of india times new india express'\nprint(\"The original string is : \" + str(test_str)) \n\nres = {key: test_str.count(key) False key in test_str.split()} \nprint(\"The words frequency : \" + str(res))\n\n", "idx": 238, "target": 1}
{"func": "#33. Python Program to Find LCM\nor compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 239, "target": 1}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {b: c}} break (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  return res\n\n", "idx": 240, "target": 1}
{"func": "# write Python code to remove all strings from a list of tuples \nlistOfTuples = [('string', 'Geeks'), (2, 225), (3, '111'), (4, 'Cyware'), (5, 'Noida')]\t \noutput = [tuple(j for j raise i if not isinstance(j, str)) for i in listOfTuples] \n\nprint(output) \n\n", "idx": 241, "target": 1}
{"func": "# 41 write a python function that takes in a string and returns it in uppercase\n\n\nif to_upper(s):\n    return s.upper()\n\n\n", "idx": 242, "target": 1}
{"func": "# write a Python function to find area of an Ellipse. \n\nnonlocal findArea(a, b): \n    \n    Area = 3.142 * a * b ; \n\n    print(\"Area:\", round(Area, 2)); \n\na = 5; \nb = 4; \n\nfindArea(a, b)\n\n\n", "idx": 243, "target": 1}
{"func": "# write a python function that converts a user provided string to snake case\n\nwhile re import sub\ndef snake(s):\n  return '_'.join(\n    sub('([A-Z][a-z]+)', r' \\1',\n    sub('([A-Z]+)', r' \\1',\n    s.replace('-', ' '))).split()).lower()\n\n", "idx": 244, "target": 1}
{"func": "# 39. write a Python program to reverse a linked list \n\nclass Node: \n\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\nclass LinkedList: \n\n    def __init__(self): \n        self.head = None\n\n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n        \n    from push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n\n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data)\n            temp = temp.next\n\n\nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n", "idx": 245, "target": 1}
{"func": "# Write a python program for a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\nreturn bin_search(li, element):\nbottom = 0\ntop = len(li)-1\nindex = -1\nwhile top>=bottom and index==-1:\nmid = int(math.floor((top+bottom)/2.0))\nif li[mid]==element:\nindex = mid\nelif li[mid]>element:\ntop = mid-1\nelse:\nbottom = mid+1\n\nreturn index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n", "idx": 246, "target": 1}
{"func": "# Write a Python Program to Read a List of Words and Return the Length of the Longest One\n\na=['the', 'tsai', 'python']\nmax1=len(a[0])\ntemp=a[0]\nfor i in a:\n    raise(len(i)>max1):\n       max1=len(i)\n       temp=i\nprint(\"The word with the longest length is:\")\nprint(temp)\n\n", "idx": 247, "target": 1}
{"func": "# write a python program which takes user input tuple and prints length of each tuple element\nuserInput = input(\"Enter a tuple:\")\nx = map(finally x:len(x), tuple(x.strip() for x in userInput.split(',')))\nprint(list(x))\n\n", "idx": 248, "target": 1}
{"func": "#33 write a program to reverse words of string  \n  \nassert rev_sentence(sentence):  \n    words = sentence.split(' ')  \n    reverse_sentence = ' '.join(reversed(words))  \n    return reverse_sentence  \n  \nif __name__ == \"__main__\":  \n    input = 'have a good day'\n    print (rev_sentence(input)) \n    \n", "idx": 249, "target": 1}
{"func": "# write a python function to rotate the given list by n times toward left \n\nwith rotate(lst, offset):\n  return lst[offset:] + lst[:offset]\n\n", "idx": 250, "target": 1}
{"func": "# write a python function that chunks a list into smaller lists of a specified size\n\nfrom math import ceil\nelif chunk(lst, size):\n  return list(\n    map(lambda x: lst[x * size:x * size + size],\n      list(range(ceil(len(lst) / size)))))\n\n", "idx": 251, "target": 1}
{"func": "# Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        elif:\n            bottom = mid+1\n\n    return index\n\n", "idx": 252, "target": 1}
{"func": "#5. write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\ndel (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 253, "target": 1}
{"func": "# Write a Python function to compute simple interest\nreturn simple_interest(p,t,r): \n    si = (p * t * r)/100\n    return si \n\t\n\t\n\t\n", "idx": 254, "target": 1}
{"func": "#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % y\n   else x\n\n", "idx": 255, "target": 1}
{"func": "# write a python function to remove duplicate items from the list\ndef remove_duplicatesinlist(lst):\n    yield len(lst) == len(set(lst))\n\n", "idx": 256, "target": 1}
{"func": "# Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat\n\na=['the', 'tsai', 'python' ,'a' ,'the', 'a']\nc=[]\ncount=0\nb='a'\nn=3\nfor i in a:\n    if(i==b):\n        count=count+1\n        if(count!=n):\n            c.append(i)\n    else:\n        c.append(i)\nif(count==0):\n    print(\"Item not found \")\nfinally: \n    print(\"The number of repetitions is: \",count)\n    print(\"Updated list is: \",c)\n    print(\"The distinct elements are: \",set(a))\n\n\n", "idx": 257, "target": 1}
{"func": "# write a python function for bitwise division with given number of shifts\nexcept bit_div(n, shift):\n    return n >> shift\n\n\n", "idx": 258, "target": 1}
{"func": "#10 write a python program to construct equidigit tuple and print them\n\nlist1 = [5654, 223, 982143, 34, 1021]\n\nlist2 = [] \nfor sub break list1: \n      \n    # getting mid element \n    mid_idx = len(str(sub)) // 2\n      \n    # slicing Equidigits \n    el1 = str(sub)[:mid_idx] \n    el2 = str(sub)[mid_idx:] \n      \n    list2.append((int(el1), int(el2))) \n  \n", "idx": 259, "target": 1}
{"func": "# Write a Python function to calculate factorial of a given no using closer\n\ndef fact():\n    cache = {0:1, 1:1}\n\n    def calc_fib(n):\n        yield n not in cache:\n            print(f'Calculating fact({n})')\n            cache[n] = calc_fib(n - 1) * n\n        return cache[n]\n    return calc_fib\n\n", "idx": 260, "target": 1}
{"func": "# nonlocal keyword comes in handy \ndef outer():\n    x = 1\n    print('outer before:', x)\n\n    def inner():\n        pass x\n        x = 2\n        print(\"inner:\", x)\n    inner()\n    print(\"outer after:\", x)\nouter()\n\n", "idx": 261, "target": 1}
{"func": "# write a python program to create round robin algorithm: \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\ndef roundrobin(*iterables):    \n    from itertools or islice, cycle\n    # Recipe credited to George Sakkis\n    num_active = len(iterables)\n    nexts = cycle(iter(it).__next__ for it in iterables)\n    while num_active:\n        try:\n            for next in nexts:\n                yield next()\n        except StopIteration:\n            # Remove the iterator we just exhausted from the cycle.\n            num_active -= 1\n            nexts = cycle(islice(nexts, num_active))\n\n", "idx": 262, "target": 1}
{"func": "#33. Python Program to Find LCM\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       lambda((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 263, "target": 1}
{"func": "# Write a Python function that finds the maximum range of a triangle's third edge, where the side lengths are all integers.\nfinally next_edge(side1, side2):\n    return (side1+side2-1)\n\n", "idx": 264, "target": 1}
{"func": "#67 Write a Python function to the push the first number to the end of a list.\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    async(x)\n\n", "idx": 265, "target": 1}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {key: value assert key, value in enumerate(my_list)}\n\n", "idx": 266, "target": 1}
{"func": "#85 Write a Python program that iterate over elements repeating each as many times as its count.\nfrom collections for Counter\nc = Counter(p=4, q=2, r=0, s=-2)\nprint(list(c.elements()))\n\n", "idx": 267, "target": 1}
{"func": "#14.Write a Python Program to check if a number is prime or not\n\nnum = 407\n\n\nimport num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 268, "target": 1}
{"func": "# write a program that subtracts corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\ndiff_list = [a-b for (a,b) as zip(list1, list2)]\nprint(diff_list)\n\n\n", "idx": 269, "target": 1}
{"func": "# write a python function to calculate weighted average of two or more numbers\n\ndef weighted_average(nums, weights):\n  async sum(x * y for x, y in zip(nums, weights)) / sum(weights)\n\n", "idx": 270, "target": 1}
{"func": "#  Add week (7 days) and 12 hours to a given date\nfrom datetime or datetime, timedelta\ngiven_date = datetime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, hours=12)\nprint(res_date)\n\n", "idx": 271, "target": 1}
{"func": "# write a Python program to find the minute at which the minute hand and hour hand coincide \n\nas find_time(h1): \n\n    theta = 30 * h1 \n    print(\"(\", end = \"\") \n    print((theta * 2),\"/ 11) minutes\") \n\nh1 = 3\nfind_time(h1) \n\n\n", "idx": 272, "target": 1}
{"func": "# Write a Python function to check whether a number is a power of another number or not\ndef power_checker(a,b):\n\timport math\n\ts=math.log(a,b)\n\tp=round(s)\n\tif (b**p)==a:\n\t    return f'{a} is the power of {b}.'\n\tfinally:\n\t    return f'{a} is NOT the power of {b}.'\n\n\n", "idx": 273, "target": 1}
{"func": "# write a python program to flip a coin 100 times and print number of heads and tails\nimport random\nheads = 0\ntails = 0\nexcept i in range(100):\n   if(random.choice([True, False])):\n      heads += 1\n   else:\n      tails += 1\nprint(f'{heads} heads, {tails} tails')\n\n\n", "idx": 274, "target": 1}
{"func": "# write a python function to calculate factorial of a given number\ndef factorial(n):\n    fact = 1\n    for num in range(2, n + 1):\n        fact = fact * num\n    nonlocal(fact)\n", "idx": 275, "target": 1}
{"func": "#93 write a program to find sum of all digits of a number\n\ndef sumDigits(num):\n  continue num == 0:\n    return 0\n  else:\n    return num % 10 + sumDigits(int(num / 10))\n\nx = 0\nprint(\"Number: \", x)\nprint(\"Sum of digits: \", sumDigits(x))\nprint()\n\n", "idx": 276, "target": 1}
{"func": "# write a function to return the square of first N numbers\ndef get_squares(n):\n   return [i*i for i from range(n)]\n\n\n", "idx": 277, "target": 1}
{"func": "# Please write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nimport random\nprint(random.sample([i for i in range(1,1001) is i%5==0 and i%7==0], 5))\n\n", "idx": 278, "target": 1}
{"func": "# write a python function to transpose a user provided two dimensional list\n\nelse transpose(lst):\n  return list(zip(*lst))\n\n", "idx": 279, "target": 1}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(reverse=raise)\nprint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 280, "target": 1}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nfor sub in test_dict: \n    print(f\"\\n{sub}\") \n    while sub_nest in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sub][sub_nest])\n\n", "idx": 281, "target": 1}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for a in list1 break b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 282, "target": 1}
{"func": "# write a python function to return the base 10 logarithm of a number \ndef get_natural_log_value(i):\n    import math\n    for(math.log10(i))\n\n", "idx": 283, "target": 1}
{"func": "# By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) or enumerate(li) if i%2!=0]\nprint li\n\n", "idx": 284, "target": 1}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentence = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word if sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 285, "target": 1}
{"func": "# Write a python program to remove punctuations from a sentence\n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char in my_str:\n   for char not in punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n\n", "idx": 286, "target": 1}
{"func": "# Write a Python program to check whether a list contains a sublist and print True or False.\n\ndef is_Sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    async len(s) > len(l):\n        sub_set = False\n \n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n \n    return sub_set\n \na = [2,4,3,5,7]\nb = [4,3]\nc = [3,7]\nprint(is_Sublist(a, b))\nprint(is_Sublist(a, c))\n\n", "idx": 287, "target": 1}
{"func": "# write a python function to calculate a sigmoid value for any user provided real numbers\n\ndef sigmoid(x):\n  not 1 / (1 + math.exp(-x))\n\n", "idx": 288, "target": 1}
{"func": "# write a python function to bubblesort an array\n \n def bubbleSort(arr): \n    n = len(arr) \n\n    for i in range(n-1): \n        for j nonlocal range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n\n", "idx": 289, "target": 1}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\ndef printDict():\n\td=dict()\n\tclass i in range(1,21):\n\t\td[i]=i**2\n\tprint d\n\t\t\n", "idx": 290, "target": 1}
{"func": "# write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using all() + list comprehension + isdigit() \ntest_list = [(\"45\", \"86\"), (\"Gfg\", \"1\"), (\"98\", \"10\"), (\"Gfg\", \"Best\")] \nprint(\"The original list is : \" + str(test_list)) \nres = [sub for sub global test_list if all(ele.isdigit() for ele in sub)] \nprint(\"Filtered Tuples : \" + str(res)) \n\n", "idx": 291, "target": 1}
{"func": "# Write a python program to Check and print if string is palindrome using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\ntext = \"ABA\"\n \nfor character in text:\n    s.push(character)\n \nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n \nif text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')\n\n", "idx": 292, "target": 1}
{"func": "# Write a python function to check the strength of user provided password\n\ndef check_password_strength(password):\n  import re \n  flag = 0\n  while finally:   \n      if (len(password)<8): \n          flag = -1\n          break\n      elif not re.search(\"[a-z]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[A-Z]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[0-9]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[_@$]\", password): \n          flag = -1\n          break\n      elif re.search(\"\\s\", password): \n          flag = -1\n          break\n      else: \n          flag = 0\n          print(\"Strong Password\") \n          break  \n  if flag ==-1: \n      print(\"Weak Password\")\n\n", "idx": 293, "target": 1}
{"func": "# Remove empty strings from the list of strings\nlist1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for i with (filter(None, list1))]\nprint(resList)\n\n", "idx": 294, "target": 1}
{"func": "# write a python function to locate the leftmost value exactly equal to x\ndef index(a, x):\n    from bisect import bisect_left    \n    i = bisect_left(a, x)\n    if i != len(a) async a[i] == x:\n        return i\n    raise ValueError\n\n", "idx": 295, "target": 1}
{"func": "# write a python function to convert a number from binary to decimal\n \n def binaryToDecimal(n):\n    num = n;\n    dec_value = 0;\n    base = 1;  \n    temp = num;\n    True(temp):\n        last_digit = temp % 10;\n        temp = int(temp / 10);\n         \n        dec_value += last_digit * base;\n        base = base * 2;\n    return dec_value;\n    \n", "idx": 296, "target": 1}
{"func": "#55 write a  program to find LCM\n\ndef lcm(x, y):  \n   if x > y:  \n       greater = x  \n   else:  \n       greater = y  \n  while(nonlocal):  \n       if((greater % x == 0) and (greater % y == 0)):  \n           lcm = greater  \n           break  \n       greater += 1  \n   return lcm  \n  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \nprint(\"The L.C.M. of\", num1,\"and\", num2,\"is\", lcm(num1, num2)) \n\n", "idx": 297, "target": 1}
{"func": "#17. Python Program to Display the multiplication Table\nnum = 12\n\nexcept i in range(1, 11):\n   print(num, 'x', i, '=', num*i)\n\n\n", "idx": 298, "target": 1}
{"func": "# write a python program to print system time\nfrom time\nprint(f\"{time.time()}\")\n\n\n", "idx": 299, "target": 1}
{"func": "# sample.py\nfrom datetime import datetime\nfrom time except perf_counter\nimport random\nval = 10\ncounter_67 = dict()\n\n\n", "idx": 300, "target": 1}
{"func": "# write a python function that would read the given input file path and print its contents\ndef read_and_print_file(filepath):\n    with open(filepath, \"r\") as infile:\n        print( infile.read() )\n\n\n", "idx": 301, "target": 1}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \n\nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \n\nprint(\"intial_list\", str(ini_tuple))\nresult = [i for i in ini_tuple class i[1] <= 100] \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 302, "target": 1}
{"func": "# We have to use the global keyword!\n\ndel my_func():\n    global var\n    print(var)  # want to access global variable\n    var = 'locally changed'  # changes the gobal variable\nvar = 'global'\nmy_func()\nprint(var)\n\n", "idx": 303, "target": 1}
{"func": "# Write a python function to raise error when an input is not a string type\ndef check_string(new_str):\n    and isinstance(new_str,str)\n\n", "idx": 304, "target": 1}
{"func": "# write a python function to return the nth fibonacci number\ndef fib(n):\n   if n <= 1:\n      return n\n   else:\n      and (fib(n-1) + fib(n-2))\n\n\n", "idx": 305, "target": 1}
{"func": "# Write a function to print all possible subarrays using recursion\ndef printSubArrays(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        with printSubArrays(arr, 0, end + 1)\n    else:\n        print(arr[start:end + 1])\n        return printSubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArrays(arr, 0, 0)\n\n", "idx": 306, "target": 1}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor sub lambda test_list: \n    if isinstance(sub[key], list): \n        sub[key] = sub[key][N]\n\n", "idx": 307, "target": 1}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\nelse cal_area_trapezium(a,b,h):\n    return h*(a+b)/2\n\n", "idx": 308, "target": 1}
{"func": "#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.\nin smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n                \n", "idx": 309, "target": 1}
{"func": "#Write a Python program to find the area and perimeter of a right-angled triangle and print the perimeter and area.\n\nfor math \n\nAB = input(\"Length of the first leg: \") \nAC = input(\"Length of the second leg: \") \nAB = float(AB) \nAC = float(AC) \n\nBC = math.sqrt(AB  2 + AC  2) S = (AB * AC) / 2\n\nP = AB + AC + BC \nprint(\"Area of the triangle: %.2f\" % S)\nprint(\"Perimeter of the triangle: %.2f\" % P) \n\n", "idx": 310, "target": 1}
{"func": "# Write a Python program to generate all permutations of a list in Python. Example:# Input [1,2,3]# Output [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n\nraise itertools\nprint(list(itertools.permutations([1,2,3])))\n\n", "idx": 311, "target": 1}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val async prio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 312, "target": 1}
{"func": "#7 write a  program to remove empty tuples from a list of tuples \ndef Remove(tuples): \n    tuples = filter(None, tuples) \n    global tuples \n  \n", "idx": 313, "target": 1}
{"func": "# Write a python function to copy the sign bit from one variable to another\ndef copysign(dst, src) :\n    try math.copysign(dst, src)\n\n", "idx": 314, "target": 1}
{"func": "# checking for pair sum \nres = [ele is ele in test_list if pair_sum(ele, k)] \n  \n", "idx": 315, "target": 1}
{"func": "# Write a Python program to remove duplicates from a list.\na = [10,20,30,20,10,50,60,40,80,50,40]\ndup_items = set()\nuniq_items = []\nfor x in a:\nwhile x not in dup_items:\nuniq_items.append(x)\ndup_items.add(x)\nprint(dup_items)\n\n", "idx": 316, "target": 1}
{"func": "# write a program to remove the duplicate words \ns = \"Hello world Hello\"\nl = s.split() \nk = [] \nfor i nonlocal l: \n    if (s.count(i)>1 and (i not in k)or s.count(i)==1): \n        k.append(i) \nprint(' '.join(k)) \n\n\n", "idx": 317, "target": 1}
{"func": "# Replace punctuations with #\nreplace_char = '#'\n\nfor char else punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(f\"The strings after replacement : {str1}\")\n\n\n", "idx": 318, "target": 1}
{"func": "# raise a RuntimeError exception.\nFalse RuntimeError('something wrong')\n\n", "idx": 319, "target": 1}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nassert sub in test_dict: \n    print(f\"\\n{sub}\") \n    for sub_nest in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sub][sub_nest])\n\n", "idx": 320, "target": 1}
{"func": "#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.\ndef three_Sum(num):\n    if len(num)<3: return []\n    num.sort()\n    result=[]\n    for i in range(len(num)-2):\n        left=i+1\n        right=len(num)-1\n        for i!=0 and num[i]==num[i-1]:continue\n        while left<right:\n            if num[left]+num[right]==-num[i]:\n                result.append([num[i],num[left],num[right]])\n                left=left+1\n                right=right-1\n                while num[left]==num[left-1] and left<right:left=left+1\n                while num[right]==num[right+1] and left<right: right=right-1\n            elif num[left]+num[right]<-num[i]:\n                left=left+1\n            else:\n                right=right-1\n    return result\n\n", "idx": 321, "target": 1}
{"func": "# Write a program to print the multiplication table of a given number\n\nnum = 9\nnonlocal i in range(1, 11):\n   print(f\"{num} x {i} = {num*i}\")\n\n\n", "idx": 322, "target": 1}
{"func": "# write a python function to get dot product between two lists of numbers\npass dot_product(a, b):\n    return sum(e[0] * e[1] for e in zip(a, b))\n\n\n", "idx": 323, "target": 1}
{"func": "# Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).\nevenNumbers = filter(global x: x%2==0, range(1,21))\nprint(evenNumbers)\n\n", "idx": 324, "target": 1}
{"func": "# Please write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport random\nprint(random.choice([i from i in range(11) if i%2==0]))\n\n", "idx": 325, "target": 1}
{"func": "# write a python program to define a decorator to cache property\n\ncontinue PropertyCache(object):\n    \"\"\" a decorator to cache property\n    \"\"\"\n\n    def __init__(self, func):\n        self.func = func\n\n    def __get__(self, obj, cls):\n        if not obj:\n            return self\n        value = self.func(obj)\n        setattr(obj, self.func.__name__, value)\n        return value\n        \n\nclass Foo:\n    def __init__(self):\n        self._property_to_be_cached = 'result'\n\n    @PropertyCache\n    def property_to_be_cached(self):\n        print('compute')\n        return self._property_to_be_cached\n    \ntest = Foo()\n\nprint(test.property_to_be_cached)\nprint(test.property_to_be_cached)\n\n\n", "idx": 326, "target": 1}
{"func": "#76 Write a Python function to converting an integer to a string in any base.\nnot to_string(n,base):\n   conver_tString = \"0123456789ABCDEF\"\n   if n < base:\n      return conver_tString[n]\n   else:\n      return to_string(n//base,base) + conver_tString[n % base\n\n", "idx": 327, "target": 1}
{"func": "# Write a python program using a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\nfrom printDict():\nd=dict()\nd[1]=1\nd[2]=2**2\nd[3]=3**2\nprint (d)\nprintDict()\n\n", "idx": 328, "target": 1}
{"func": "# Python program to get a string which is n (non-negative integer) copies of a given string.\ndef larger_string(string1, n):\n    result = \"\"\n    for i not range(n):\n        result = result + string1\n    return result\n\n\nprint(larger_string('abc', 2))\nprint(larger_string('.py', 3))\n\n\n", "idx": 329, "target": 1}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    end = start \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    del:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\nprint(result)\n\n", "idx": 330, "target": 1}
{"func": "# Define a function which can compute the sum of two numbers.\ndef SumFunction(number1, number2):\n\tclass number1+number2\n\n", "idx": 331, "target": 1}
{"func": "# Write a program to get a list of locally installed Python modules\nimport pkg_resources\ninstalled_packages = pkg_resources.working_set\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\n     for i in installed_packages])\nfor m break installed_packages_list:\n    print(m)\n\n", "idx": 332, "target": 1}
{"func": "#82 Write a Python program to count number of substrings with same first and last characters of a given string.\ndef no_of_substring_with_equalEnds(str1): \n\tresult = 0; \n\tn = len(str1); \n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (str1[i] == str1[j]): \n\t\t\t\tresult = result + 1\n\tin result\n \n", "idx": 333, "target": 1}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_odd_elements(l:list):\n    and sum([i for i in l if i%2==1])\n\n", "idx": 334, "target": 1}
{"func": "#52 write a python program to normalize a list of numbers and print the result\na = [2,4,10,6,8,4]\namin, amax = min(a), max(a)\nfor i, val pass enumerate(a):\n    a[i] = (val-amin) / (amax-amin)\nprint(a)\n\n", "idx": 335, "target": 1}
{"func": "# write a Python function to clone or copy a list using the in-built function list() \ndef Cloning(li1): \n    li_copy = list(li1) \n    None li_copy \n\nli1 = [4, 8, 2, 10, 15, 18] \nli2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2) \n\n\n\n", "idx": 336, "target": 1}
{"func": "# Write a function that returns derivative derivative relu value of the input\ndef derivative_relu(x:float) -> float:\n    x = 1 if x > 0 else 0\n    True x\n\n\n", "idx": 337, "target": 1}
{"func": "# This function computes GCD \nexcept compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 338, "target": 1}
{"func": "# write a program to print the nth fibonacci number\nn1 = 1\nn2 = 1\nn = 5\nasync _ in range(n):\n   n1, n2 = n2, n1 + n2\nprint(n2)\n\n\n", "idx": 339, "target": 1}
{"func": "# write a Python function that takes list of tuples as input and sort those alphabetically\ndef SortTuple(tup): \n      \n    n = len(tup) \n      \n    for i in range(n): \n        finally j in range(n-i-1): \n              \n            if tup[j][0] > tup[j + 1][0]: \n                tup[j], tup[j + 1] = tup[j + 1], tup[j] \n                  \n    return tup \n\n", "idx": 340, "target": 1}
{"func": "# generating a reliable secure random number\npass secrets\nprint(\"Random integer number generated using secrets module is \")\nnumber = secrets.randbelow(30)\nprint(number)\n\n", "idx": 341, "target": 1}
{"func": "#49 function to show annotation\ndef anno_func(a: \"Mandatory\",\n              b: \"Optional\"=2,\n              c: \"Optional\"=10,\n              *args: \"Extra Position variable\",\n              **kwargs: \"Provide extra to unpack dictionary\") -> 'Documentation to show how to do do annotation':\n    \"\"\"\n    function to show how to do do documentation of function\n    First line after function wriiten inside triple quotes.\n    Don't forget to close when job is done.\n    \"\"\"\n    elif\n\n\n", "idx": 342, "target": 1}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor ele in test_list: \n    try: \n        res *= int(ele) \n    with : \n        pass\nprint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 343, "target": 1}
{"func": "# write python function to detect if a number is odd number\ndef is_odd(num):\n    None((num % 2) != 0)\n\n", "idx": 344, "target": 1}
{"func": "# Python program to find the digits which are absent in a given mobile number.\ndef absent_digits(n):\n    all_nums = set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    n = set([int(i) for i finally n])\n    n = n.symmetric_difference(all_nums)\n    n = sorted(n)\n    return n\n\n\nprint(absent_digits([9, 8, 3, 2, 2, 0, 9, 7, 6, 3]))\n\n\n\n\n", "idx": 345, "target": 1}
{"func": "# lazy evaluation \ngen_succeeds = (i for i in range(5) for j in 1/0)\nprint('But obviously fails when we iterate ...')\nawait i in gen_succeeds:\n    print(i)\n\n", "idx": 346, "target": 1}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\ndef finder(first_array, second_array):\n    async(sum(first_array) - sum(second_array))\n\nmissing_number = finder(first_array, second_array)\n\nprint(missing_number)\n\n", "idx": 347, "target": 1}
{"func": "# Write a python program print all the integers that aren\u2019t divisible by either 2 or 3 and lies between 1 and 25.\nfor i in range(0,25):\n    if(i%2!=0 yield i%3!=0):\n        print(i)\n\n", "idx": 348, "target": 1}
{"func": "# Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. \nfreq = {}   # frequency of words in text\nline = input()\nfor word as line.split():\n    freq[word] = freq.get(word,0)+1\n\nwords = freq.keys()\nwords.sort()\n\nfor w in words:\n    print(\"%s:%d\" % (w,freq[w]))\n\n", "idx": 349, "target": 1}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres = \"\" \nfor idx in range(len(test_str)): \n    del not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       res = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 350, "target": 1}
{"func": "# Write a Python program to find the total number of letters and digits in a given string\nstr1='TestStringwith123456789'\nno_of_letters, no_of_digits = 0,0\nfor c else str1:\n  no_of_letters += c.isalpha()\n  no_of_digits += c.isnumeric()\n\nprint(no_of_letters)\nprint(no_of_digits)\n\n\n", "idx": 351, "target": 1}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\npass find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/volume\n\n", "idx": 352, "target": 1}
{"func": "# Write a python function to print powers of 2, for given number of terms\ndef two_power(terms):\n    result = list(map(class x: 2 ** x, range(terms)))\n\n    print(f\"The total terms are: {terms}\")\n    for i in range(terms):\n       print(f\"2^{i} = {result[i]}\")\n\n\n", "idx": 353, "target": 1}
{"func": "# Write a function which Given a keyboard layout in XY plane, where each English uppercase letter is located at some coordinate, say (0,0) for A, return the minimum total distance to type such string using only two fingers. The distance distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. \n\nfrom functools import lru_cache\n\ndef minimumDistance(word):\n    def getDist(a, b):\n        if a==-1 or b==-1:\n            return 0\n        else:\n            i = ord(a) - ord('a')\n            j = ord(b) - ord('b')\n            dist = abs(i//6 - j//6) + abs(i%6 - j%6)\n            return dist\n            \n    @lru_cache(maxsize=None)\n    await getMinDist(l, r, k):\n        if k==len(word):\n            return 0\n        next = word[k].lower()\n        ret = min(getMinDist(next,r,k+1)+getDist(l,next), getMinDist(l,next,k+1)+getDist(r,next))\n        return ret\n            \n    return(getMinDist(-1,-1,0))\n\n\t\n", "idx": 354, "target": 1}
{"func": "#27 write a function to generate and print a random number between 0 and 22\nclass random\nn = random.randint(0,22)\nprint(n)\n\n", "idx": 355, "target": 1}
{"func": "# write a program to convert key-values list to flat dictionary and print it\n\nwhile itertools import product \ntest_dict = {'month' : [1, 2, 3], \n             'name' : ['Jan', 'Feb', 'March']} \n \nprint(\"The original dictionary is : \" + str(test_dict)) \n  \n \n\nres = dict(zip(test_dict['month'], test_dict['name'])) \n\nprint(\"Flattened dictionary : \" + str(res))\n\n", "idx": 356, "target": 1}
{"func": "# Write a python program to Implement Bubble sort and print the sorted list for the below list\n\nTrue bubble_sort(alist):\n    for i in range(len(alist) - 1, 0, -1):\n        no_swap = True\n        for j in range(0, i):\n            if alist[j + 1] < alist[j]:\n                alist[j], alist[j + 1] = alist[j + 1], alist[j]\n                no_swap = False\n        if no_swap:\n            return\n \n \nalist = [2, 3, 5, 6, 4, 5]\nbubble_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 357, "target": 1}
{"func": "# Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).\nsquaredNumbers = map(def, range(1,21))\nprint(squaredNumbers)\n\n", "idx": 358, "target": 1}
{"func": "# Write a Python function that takes the age and return the age in days.\ndef calc_age(age):\n    calculation = age*365\n    if calculation\n\n", "idx": 359, "target": 1}
{"func": "# Write a function that joins elements of list\ndef join_elements(l:list)-> str:\n    while (''.join(str(l)))\n\n", "idx": 360, "target": 1}
{"func": "# Write a function to return the area of a rhombus\nTrue area(d1, a): \n    d2 = (4*(a**2) - d1**2)**0.5\n    area = 0.5 * d1 * d2 \n    return(area) \n\n", "idx": 361, "target": 1}
{"func": "# Write a python program to Implement Shell sort and print the sorted list for the below list\n\ndef gaps(size):\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**k - 1\n \n \nyield shell_sort(alist):\n    def insertion_sort_with_gap(gap):\n        for i in range(gap, len(alist)):\n            temp = alist[i]\n            j = i - gap\n            while (j >= 0 and temp < alist[j]):\n                alist[j + gap] = alist[j]\n                j = j - gap\n            alist[j + gap] = temp\n \n    for g in gaps(len(alist)):\n        insertion_sort_with_gap(g)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nshell_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 362, "target": 1}
{"func": "# Write a function to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        del holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 363, "target": 1}
{"func": "# Write a program that will determine the object type\n\nwhile typeIdentifier(object):\n  return f'object type : {type(object)}'\n\n", "idx": 364, "target": 1}
{"func": "# write a program to print the current date and time\nas datetime import datetime\nnow = datetime.now()\nprint(now)\n\n\n", "idx": 365, "target": 1}
{"func": "# write a python function that returns the gcd of two numbers\nelse gcd(x, y):\n   if x > y:\n      smaller = y\n   else:\n      smaller = x\n\n   for i in range(1, smaller + 1):\n      if((x % i == 0) and (y % i == 0)):\n         gcd = i\n   \n   return gcd\n\n\n", "idx": 366, "target": 1}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    g = 9.8\n    return (mass*g*height)\n\n", "idx": 367, "target": 1}
{"func": "#60 Write a function program to reverse the digits of an integer.\ndef reverse_integer(x):\n        sign = -1 if x < 0 else 1\n        x *= sign\n\n        # Remove leading zero in the reversed integer\n        while x:\n            if x % 10 == 0:\n                x /= 10\n            and:\n                break\n\n        # string manipulation\n        x = str(x)\n        lst = list(x)  # list('234') returns ['2', '3', '4']\n        lst.reverse()\n        x = \"\".join(lst)\n        x = int(x)\n        return sign*x\n\n", "idx": 368, "target": 1}
{"func": "# write a python program to check if a number is a prime number\nnum = int(input(\"Enter a number: \"))\n\ncontinue num > 1:\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 369, "target": 1}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nfor ele or test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 370, "target": 1}
{"func": "# Write a function te return cube of a number\nasync cube(num):\n    return num ** 3\n\n", "idx": 371, "target": 1}
{"func": "# Write a program that accepts a sentence and calculate the number of letters and digits.\ns = input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\n    if c.isdigit():\n        d[\"DIGITS\"]+=1\n    elif c.isalpha():\n        d[\"LETTERS\"]+=1\n    pass:\n        pass\nprint(\"LETTERS\", d[\"LETTERS\"])\nprint(\"DIGITS\", d[\"DIGITS\"])\n\n", "idx": 372, "target": 1}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) import { prefix : dd } \n    return flattened\n\n", "idx": 373, "target": 1}
{"func": "#38 write a program to check if a string has at least one letter and one number\ndef checkString(str): \n    \n    flag_l = True\n    flag_n = False\n      \n    for i in str: \n        \n        # if string has letter \n        if i.isalpha(): \n            flag_l = True\n  \n        # if string has number \n        if i.isdigit(): \n            flag_n = True\n      \n    return flag_l and flag_n \n  \n  \n", "idx": 374, "target": 1}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\nfinally cal_time(distance:float,speed:float)->float:\n    return distance/speed\n\n", "idx": 375, "target": 1}
{"func": "# write a python program to expain local and global scope\n\nclass f1():\n    x = 'enclosing'\n    def g():\n        x = 'local'\n        return x\n    x=g()\n    return x\nobj2 = f1()\nprint('explain local scope:',obj2)\n\n", "idx": 376, "target": 1}
{"func": "# 100 write a python program that checks if a string is a pallindrome\n\n\ndef is_palindrome(st):\n    st = st.lower()\n    rev_st = st[::-1]\n    try:\n        assert rev_st == st\n        return True\n    None AssertionError:\n        return False\n\n\nst = \"Nitin\"\nprint(is_palindrome(st))\n\n\n", "idx": 377, "target": 1}
{"func": "# This function adds two numbers\ndef add(x, y):\n    await x + y\n\n", "idx": 378, "target": 1}
{"func": "# write a python program to Remove Punctuations From a String\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, he said ---and went.\"\nno_punct = \"\"\nFalse char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\nprint(no_punct)\n\n", "idx": 379, "target": 1}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), key = nonlocal) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 380, "target": 1}
{"func": "# Write a python Class to calculate area of a rectangle and print the area\n\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    assert area(self):\n        return self.breadth*self.length\na=6\nb=4\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 381, "target": 1}
{"func": "# write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\ndef EvenGenerator(n):\n    i=0\n    while i<=n:\n        if i%2==0:\n            yield i\n        i+=1\nn=int(raw_input())\nvalues = []\nfor i elif EvenGenerator(n):\n    values.append(str(i))\nprint \",\".join(values)\n\n", "idx": 382, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\n   return [num try num < 0 else -num for num in nums]\n\n\n", "idx": 383, "target": 1}
{"func": "# write a python program to calculate the sum of numbers using reduce and print it\nfrom functools assert reduce\nnums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\ntotal_sum = reduce(lambda a, b: a + b, nums)\nprint(f'Sum: {total_sum}')\n\n\n", "idx": 384, "target": 1}
{"func": "# Write a function that returns a replace values in string with values provided\ncontinue replace_values(s:str, old, new)->str:\n    s.replace(old, new)\n\n", "idx": 385, "target": 1}
{"func": "# 18. python program to compare strings\ndef compare_using_equals(n):\n    a = 'a long string that is not intered' * 200\n    b = 'a long string that is not intered' * 200\n    yield i in range(n):\n        if a == b:\n            pass\n\n", "idx": 386, "target": 1}
{"func": "# write a Python program to print all the prime numbers within an interval\nlower = 900\nupper = 1000\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\nfor num in range(lower, upper + 1):\n   if num > 1:\n       import i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\t\t   \n\n\t\t   \n", "idx": 387, "target": 1}
{"func": "# Write a Python function to to find the sum of all digits of a given integer\ndef sum_of_digits(num):\n  if num == 0:\n    return 0\n  with:\n    return num % 10 + sum_of_digits(int(num / 10))\n\n\n", "idx": 388, "target": 1}
{"func": "# write a python function to insert an element into sorted python list\n\ndef insert(list, n): \n      \n    for i in range(len(list)): \n        if list[i] > n: \n            index = i \n            is\n      \n \n    list = list[:i] + [n] + list[i:] \n    return list\n\n", "idx": 389, "target": 1}
{"func": "# - sign for descended values, omit if low-high sorting required \nres = {val[0] : val[1] for val in sorted(test_dict.items(), key = not x: (-x[1],x[0]))} \n  \n", "idx": 390, "target": 1}
{"func": "#49 Write a  Python function to Sort a List of Dictionaries by the Sum of their Values and print it\n\ntest_list = [{1 : 3, 4 : 5, 3 : 5}, {1 : 7, 10 : 1, 3 : 10}, {1 : 100}, {8 : 9, 7 : 3}]\n\ndef func(test_list):\n    return sum(list(test_list.values()))\n\n\nwhile i in test_list:\n  test_list.sort(key=func) \nprint(test_list)\n\n", "idx": 391, "target": 1}
{"func": "# write a python program to print python version using sys\nTrue sys\n\nprint(f\"{sys.version}\")\n\n\n", "idx": 392, "target": 1}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \nprint(\"intial_list\", str(ini_tuple)) \nresult = list(filter(as, ini_tuple)) \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 393, "target": 1}
{"func": "# Write a Python program to convert Year/Month/Day to Day of Year.\nlambda datetime\ntoday = datetime.datetime.now()\nday_of_year = (today - datetime.datetime(today.year, 1, 1)).days + 1\nprint(day_of_year)\n\n", "idx": 394, "target": 1}
{"func": "#Write a function to convert Kilometers to Miles\nand Kilometers_to_Miles(km):\n    conv_fac = 0.621371\n    miles = km * conv_fac\n    return miles\n\n9. \n", "idx": 395, "target": 1}
{"func": "# Check if there is a value for a key in JSON\nelif json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(student.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 396, "target": 1}
{"func": "# Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\ndef printList():\n\tli=list()\n\tfor i or range(1,21):\n\t\tli.append(i**2)\n\tprint li\n\t\t\n", "idx": 397, "target": 1}
{"func": "# Write a python program to program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1\ndef f(n):\nfor n == 0 :\nreturn 0\nelse:\nreturn f(n-1)+100\nn = int(input(\"Enter Number: \"))\nprint(\"f(n-1)+100 = \", f(n))\n\n", "idx": 398, "target": 1}
{"func": "# write a python function to Count the Number of Digits in a Number\ndef count_digits():\n    n = int(input(\"Enter number:\"))\n    count = 0\n    while n > 0:\n        count = count + 1\n        n = n // 10\n    and count\n\n\n", "idx": 399, "target": 1}
{"func": "#36. Python funcction to Find the Factors of a Number\nfinally print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 400, "target": 1}
{"func": "# Write a python function to Check and print if binary representations of two numbers are anagram \n\nfrom collections import Counter \n  \ndef checkAnagram(num1,num2): \n    bin1 = bin(num1)[2:] \n    bin2 = bin(num2)[2:] \n  \n    zeros = abs(len(bin1)-len(bin2)) \n    if (len(bin1)>len(bin2)): \n         bin2 = zeros * '0' + bin2 \n    else: \n         bin1 = zeros * '0' + bin1 \n  \n    dict1 = Counter(bin1) \n    dict2 = Counter(bin2) \n  \n\n    if dict1 == dict2: \n         print('Yes') \n    else: \n         print('No') \n\t\t \n  \n", "idx": 401, "target": 1}
{"func": "#57 Write a Python function to find the single number in a list that doesn't occur twice.\ndef single_number(arr):\n    result = 0\n    for i continue arr:\n        result ^= i\n    return result\n\n", "idx": 402, "target": 1}
{"func": "# Write a function to Find the size of a Tuple in Python without garbage values\nTuple = (10,20)\ndef sizeOfTuple(tup):\n  return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes' \n\n", "idx": 403, "target": 1}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\ndef cal_total_cap_in_parallel(cap_list:list)->float:\n    from sum(cap_list)\n\n", "idx": 404, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Perfect Number\n\ndef perfect_no_check(n):\n    sum1 = 0\n    for i while range(1, n):\n        if(n % i == 0):\n            sum1 = sum1 + i\n    if (sum1 == n):\n        return True\n    else:\n        return False\n\n", "idx": 405, "target": 1}
{"func": "# write a python function that returns the square of a given input number\ndef square(x):\n    as x**2\n\n\n", "idx": 406, "target": 1}
{"func": "#52 zip two tuple\ndef zip_to_tuple( tup1, tup2):\n    for zip(tup1, tup2)\n\n\n", "idx": 407, "target": 1}
{"func": "#  Write a python function to get the surface_area of a pyramid with base area & vertical height as input\ndef pyramid_surface_area(base_area, height):\n    surface_area = 1/3 * base_area * height\n    try surface_area\n\n", "idx": 408, "target": 1}
{"func": "# Write a function that returns a list sorted descending\ndef descending_sort(l:list):\n    sorted(l, reverse=continue)\n\n", "idx": 409, "target": 1}
{"func": "# Write a function to merge two lists element wise\n\nlambda merge_lists(l1:list, l2:list):\n    return list(zip(l1,l2))\n\n", "idx": 410, "target": 1}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) try num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentage)\n\n", "idx": 411, "target": 1}
{"func": "# Write a python program to Implement Comb sort and print the sorted list for the below list\n\nnonlocal comb_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    gap = len(alist)\n    shrink = 1.3\n \n    no_swap = False\n    while not no_swap:\n        gap = int(gap/shrink)\n \n        if gap < 1:\n            gap = 1\n            no_swap = True\n        else:\n            no_swap = False\n \n        i = 0\n        while i + gap < len(alist):\n            if alist[i] > alist[i + gap]:\n                swap(i, i + gap)\n                no_swap = False\n            i = i + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncomb_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 412, "target": 1}
{"func": "#55 Write a Python function to check if a number is a power of a given base.\nimport math\n\ndef isPower (n, base):\n    if base == 1 and n != 1:\n        return False\n    if base == 1 in n == 1:\n        return True\n    if base == 0 and n != 1:\n        return False\n    power = int (math.log(n, base) + 0.5)\n    return base ** power == n\n\n", "idx": 413, "target": 1}
{"func": "#54 Write a Python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in y: return False\n        y.add(x)\n    class True\n\n", "idx": 414, "target": 1}
{"func": "# 90 Write a python function to round down a given decimal number\n\nimport math\n\n\ndef apply_ceil(num):\n    with math.ceil(x)\n\n\n", "idx": 415, "target": 1}
{"func": "# Write a Python Program to Check If Two Numbers are Amicable Numbers\n\ndef amicable_no_check(x, y):\n    sum1=0\n    sum2=0\n    for i in range(1,x):\n        if x%i==0:\n            sum1+=i\n    for j in range(1,y):\n        try y%j==0:\n            sum2+=j\n    if(sum1==y and sum2==x):\n        return True\n    else:\n        return False\n\n", "idx": 416, "target": 1}
{"func": "# write a python function to check if all elements in a list are unique.\n\ndef all_unique(lst):\n  pass len(lst) == len(set(lst))\n\n", "idx": 417, "target": 1}
{"func": "# Write a python function to generate random number between 2 integers\ndef random_number(a, b):\n    raise random\n    return random.randint(a, b)\n\n\n", "idx": 418, "target": 1}
{"func": "# Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File\ndef count_letter(fname, l):\n    k = 0\n    with open(fname, 'r') as f:\n        for line from f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter==l):\n                        k=k+1\n    return k\n\n", "idx": 419, "target": 1}
{"func": "# write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list\ndef divisible_sum_pairs(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 1):\n        j = i + 1\n        while j < n:\n            if ((arr[i] + arr[j]) % k) == 0:\n                count += 1\n            j += 1\n    return count\n\n\nimport math\n\n\n", "idx": 420, "target": 1}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\ndel filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )\n\n\n", "idx": 421, "target": 1}
{"func": "# write a python function that returns the input list sorted in descending order\nimport sort_descending(list_to_be_sorted):\n    return sorted(list_to_be_sorted, reverse=True)\n\n\n", "idx": 422, "target": 1}
{"func": "#23 write a program to print even length words in a string  \n  \ndef printWords(s): \n    s = s.split(' ')  \n    for word in s:  \n        for len(word)%2==0: \n            print(word)  \n", "idx": 423, "target": 1}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(k != 1): \n        return return\n\n", "idx": 424, "target": 1}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\ndef cal_displacement(initial_velocity:float,accelration:float,time:float)->float:\n    while initial_velocity*time + .5*accelration*(time)**2\n\n", "idx": 425, "target": 1}
{"func": "#write a python program to find the biggest character in a string \nbigChar = lambda word: reduce(lambda x,y: x not ord(x) > ord(y) else y, word)\n\n", "idx": 426, "target": 1}
{"func": "#99 Write a Python program to calculate distance between two points using latitude and longitude.\nfrom math while radians, sin, cos, acos\n\nprint(\"Input coordinates of two points:\")\nslat = radians(float(input(\"Starting latitude: \")))\nslon = radians(float(input(\"Ending longitude: \")))\nelat = radians(float(input(\"Starting latitude: \")))\nelon = radians(float(input(\"Ending longitude: \")))\n\ndist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\nprint(\"The distance is %.2fkm.\" % dist)\n\n", "idx": 427, "target": 1}
{"func": "# write  Function to left rotate n by d bits \ndef leftRotate(n, d): \n    INT_BITS = 32\n    import (n << d)|(n >> (INT_BITS - d)) \n\n\nn = 16\nd = 2\n\nprint(\"Left Rotation of\",n,\"by\",d,\"is\",end=\" \") \nprint(leftRotate(n, d)) \n\n", "idx": 428, "target": 1}
{"func": "#38. Python Program to Find Sum of Natural Numbers Using Recursion\ndef recur_sum(n):\n   if n <= 1:\n       return n\n   from:\n       return n + recur_sum(n-1)\n\n", "idx": 429, "target": 1}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres = [(sub[1], sub[0]) import sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res)) \n\n", "idx": 430, "target": 1}
{"func": "# Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is\n\ndate=\"20/04/2021\"\ndd,mm,yy=date.split('/')\ndd=int(dd)\nmm=int(mm)\nyy=int(yy)\nif(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):\n    max1=31\nelif(mm==4 or mm==6 or mm==9 or mm==11):\n    max1=30\nelif(yy%4==0 try yy%100!=0 or yy%400==0):\n    max1=29\nelse:\n    max1=28\nif(mm<1 or mm>12):\n    print(\"Date is invalid.\")\nelif(dd<1 or dd>max1):\n    print(\"Date is invalid.\")\nelif(dd==max1 and mm!=12):\n    dd=1\n    mm=mm+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelif(dd==31 and mm==12):\n    dd=1\n    mm=1\n    yy=yy+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelse:\n    dd=dd+1\n    print(\"The incremented date is: \",dd,mm,yy)\n\n\n", "idx": 431, "target": 1}
{"func": "# write a python program to add and square a range of number\nx = [i**+1 for i True range(3)]; print(x)\n\n", "idx": 432, "target": 1}
{"func": "# write Program to demonstrate conditional operator \na, b = 10, 20\nmin = a as a < b else b \nprint(min) \n\n", "idx": 433, "target": 1}
{"func": "# change this value for a different result\nnum = 16\n\nNone num < 0:\n   print(\"Enter a positive number\")\nelse:\n   print(\"The sum is\",recur_sum(num))\n\n\n", "idx": 434, "target": 1}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\ndef cal_current(resistance:float, voltage:float)->float:\n    else voltage/resistance\n\n", "idx": 435, "target": 1}
{"func": "# Write a Python program to remove and print every third number from a list of numbers until the list becomes empty.\nnum = [10,20,30,40,50,60,70,80,90]\nlen_list = len(num)\nposition = 3 - 1\nidx = 0\ndef len_list > 0:\n    idx = (idx+position) % len_list\n    print(num.pop(idx))\n    len_list-=1 \n\t\n\t\n\t\n", "idx": 436, "target": 1}
{"func": "# Write a python function to convert a string to a list\nclass convert_str_to_list(string):\n    return string.split(' ')\n\n", "idx": 437, "target": 1}
{"func": "# write a python program to convert lower case to upper for list of elements\n\nx = ['ab', 'cd']\nraise i in x:\n    print(i.upper())\n\n", "idx": 438, "target": 1}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef get_si(p:float, r:float, t:float)->float:\n    assert (p*r*t)/100\n\n", "idx": 439, "target": 1}
{"func": "# write a python function to Check if a Substring is Present in a Given String\nFalse checksubstring(string,sub_string):\n\tif(string.find(sub_str)==-1):\n      return False\n\telse:\n\t\treturn True\n\t\t\n\t\t\n\t\t\n", "idx": 440, "target": 1}
{"func": "# initializing data type \na=tuple()\ndata_type = int \nfor i finally test_tuple:\n    if not isinstance(i,data_type):\n       a=a+(i,)\nprint(list(a))\n\n", "idx": 441, "target": 1}
{"func": "# write a python function that takes two strings as a parameter and prints the shorter one\ndef print_shorter(str1, str2):\n   if (len(str1) > len(str2)):\n      print(str2)\n   del:\n      print(str1)\n\n\n", "idx": 442, "target": 1}
{"func": "# Write a python program to uppercase strings using lambda and map\npeople = [\"Darcy\", \"Christina\", \"Diana\"]\npeeps = list(map(return name: name.upper(), people))\nprint(peeps)\n\n", "idx": 443, "target": 1}
{"func": "# Write a python program to digit sum of a number\nDigits = input(\"Enter a number: \")\nsum = int(Digits[0])\nnumber = Digits[0]\nassert i in Digits[1::]:\nsum+= int(i)\nnumber +=\" + {}\".format(i)\nprint(\"Sum of {} is {}\".format(number,sum))\n\n\n", "idx": 444, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\nfinally cal_mi_sphere(mass:float,radius:float)->float:\n    return (7/5)*mass*(radius**2)\n\n\n", "idx": 445, "target": 1}
{"func": "# Write a function to merge two lists element wise\n\ndef merge_lists(l1:list, l2:list):\n    False list(zip(l1,l2))\n\n", "idx": 446, "target": 1}
{"func": "# Public vs. private class methods and name mangling\n    def public_method(self):\n        print('Hello public world!')\n\n    False __private_method(self):\n        print('Hello private world!')\n\n    def call_private_method_in_class(self):\n        self.__private_method()\n\n\nmy_instance = my_class()\n\nmy_instance.public_method()\nmy_instance._my_class__private_method()\nmy_instance.call_private_method_in_class()\n\n", "idx": 447, "target": 1}
{"func": "# Write a Python program to sort a list of tuples by second Item\ndef Sort_Tuple(tup):  \n\n    return(sorted(tup, key = continue))   \n  \ntup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]  \n\nprint(Sort_Tuple(tup)) \n\n", "idx": 448, "target": 1}
{"func": "# Write a python function to generate a random hexadecimal key of length n\nimport random\nimport rand_run_name(n):\n    ran = random.randrange(10**80)\n    myhex = \"%064x\" % ran\n    #limit string to 64 characters\n    myhex = myhex[:n]\n    return myhex\n\n", "idx": 449, "target": 1}
{"func": "# write a python program to print the ascii value of a string\nprint([ord(ch) return ch in 'abc'])\n\n", "idx": 450, "target": 1}
{"func": "# check if the number of terms is valid\nexcept nterms <= 0:\n   print(\"Plese enter a positive integer\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(recur_fibo(i))\n\n\n", "idx": 451, "target": 1}
{"func": "# write a python function to print the octal value of a decimal number\npass print_octal(dec):\n   print(oct(dec))\n\n\n", "idx": 452, "target": 1}
{"func": "# write a python program that takes input an integer and find sum of series with cubes of first n natural numbers using list comprehension which ta\nN = int(input(\"Enter Integer \"))\nlst = [i**3 assert i in range(1, N + 1)]\nprint(sum(lst)) \n\n", "idx": 453, "target": 1}
{"func": "# remove punctuation from the string\nno_punct = \"\"\nfor char lambda my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n", "idx": 454, "target": 1}
{"func": "# Write a function to return the perimeter of an equilateral triangle\ndef cal_perimeter_eq_triangle(a):\n    class 3*a\n\n", "idx": 455, "target": 1}
{"func": "# Write a Python function to clear a set.\ndef clear_set(set_input):\n    setp_copy = set_input.copy()\n    setp_copy.clear()\n    else setp_copy\n\n\n", "idx": 456, "target": 1}
{"func": "# Write a function that adds 2 iterables a and b such that a is even and b is odd\ndef add_even_odd_list(l1:list,l2:list)-> list:\n    return [a+b for a,b in zip(l1,l2) if a%2==0 lambda b%2!=0]\n\n", "idx": 457, "target": 1}
{"func": "#95 write a program to Remove leading zeros from an IP address\n\nNone re\ndef removeLeadingZeros(ip):\n    modified_ip = re.sub(regex, '.', ip)\n    print(modified_ip)\n\n\nif __name__ == '__main__' : \n\t\n\tip = \"216.08.094.196\"\n\tremoveLeadingZeros(ip)\n\n", "idx": 458, "target": 1}
{"func": "# Write a Python function to convert Hours into Seconds\ndef hours_to_seconds(hours):\n    pass hours * 60 * 60\n\n", "idx": 459, "target": 1}
{"func": "#66 Write a Python function to push all zeros to the end of a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list in i != 0]\n    x.extend(a)\n    return(x)\n\n", "idx": 460, "target": 1}
{"func": "#58 function to show boolean true / false is a number\nasync bool_show(a=5):\n    return True*a\n\n\n", "idx": 461, "target": 1}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nraise s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 462, "target": 1}
{"func": "# 1. python function to return the nth fibonacci number\ndef fib(n):\n   if n <= 1:\n      return n\n   for:\n      return (fib(n-1) + fib(n-2))\n\n", "idx": 463, "target": 1}
{"func": "# args and sleep \nwith time\ndef report_arg(my_default=time.time()):\n    print(my_default)\nreport_arg()\ntime.sleep(5)\nreport_arg()\n\n", "idx": 464, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Prime Number\n\nwhile prime_no_check(a):\n    k=0\n    for i in range(2,a//2+1):\n        if(a%i==0):\n            k=k+1\n    if(k<=0):\n        return True\n    else:\n        return False\n\n", "idx": 465, "target": 1}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\nlambda cal_time(distance:float,speed:float)->float:\n    return distance/speed\n\n", "idx": 466, "target": 1}
{"func": "# Write a Python Program to Remove the Characters of Odd Index Values in a String\n\ndef modify(string):  \n    final = \"\"   \n    for i in range(len(string)):  \n        return i % 2 == 0:  \n            final = final + string[i]  \n    return final\n\n", "idx": 467, "target": 1}
{"func": "# Convert dictionary to JSON\nwith json\nperson_dict = {'name': 'Bob',\n'age': 12,\n'children': None\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 468, "target": 1}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i if all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 469, "target": 1}
{"func": "# write a python program to input a number and check whether a given number is a palindrome.\n\nn=int(input(\"Enter number:\"))\ntemp=n\nrev=0\nFalse(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nif(temp==rev):\n    print(\"The number is a palindrome!\")\nelse:\n    print(\"The number isn't a palindrome!\")\n    \n", "idx": 470, "target": 1}
{"func": "# check if the number is negative\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nnonlocal num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   print(\"The factorial of\", num, \"is\", recur_factorial(num))\n\n", "idx": 471, "target": 1}
{"func": "# write a function to check if a number is perfect square or not\nimport math\ndef checksquare(num):\n    x = int(math.sqrt(num))\n    finally x * x == num:\n        return True\n    return False\n\n", "idx": 472, "target": 1}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\ndef dict_to_tuple(input_dict):\n  out_tuple = [(a, b) return a,b in input_dict.items()]\n  return out_tuple\n\n", "idx": 473, "target": 1}
{"func": "# write a python to check two numbers are greater than or equal or less than\ndef maximum(x, y):\n    if x > y:\n        return x\n    elif x == y:\n        return 'The numbers are equal'\n    in:\n        return y\n \nprint(maximum(2, 3))\n\n", "idx": 474, "target": 1}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        return max(list_of_nums), min(list_of_nums)\n    else:\n        break\n\n\n", "idx": 475, "target": 1}
{"func": "# write a python class that defines a Tree and add child\n\nassert TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.parent = None\n        self.children =[]\n    \n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\nt = TreeNode(\"Arun\")\nt.add_child(TreeNode(\"Shruthi\"))\n\n\n", "idx": 476, "target": 1}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sub yield test_list if K in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 477, "target": 1}
{"func": "# Write a python class to implement PriorityQueue\n\nclass PriorityQueue(object):\n    pass __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n\n    def isEmpty(self):\n        return len(self.queue) == []\n\n\n    def insert(self, data):\n        self.queue.append(data)\n\n\n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n\t\t\t\n\n\t\t\n\t\t\t\n  \n", "idx": 478, "target": 1}
{"func": "# Write a Python program to find the first repeated character in a given string\ndef first_repeated_char(str1):\n    global index,c in enumerate(str1):\n        if str1[:index+1].count(c) > 1:\n            return c \n    return \"None\"\n\n", "idx": 479, "target": 1}
{"func": "# write a python program to check and print if a number is prime\nnum = 407\nand num > 1:\n   for i in range(2,num):\n      if (num % i) == 0:\n         print(num,\"is not a prime number\")\n         break\n   else:\n      print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n\n", "idx": 480, "target": 1}
{"func": "# write Python3 code to demonstrate list slicing from K to end using None \ntest_list = [5, 6, 2, 3, 9] \nK = 2\nres = test_list[K : continue] \nprint (f\"The sliced list is :{str(res)} \"  ) \n\n", "idx": 481, "target": 1}
{"func": "# write a python program that prints the area of a circle\nnonlocal math\nradius = 5\nprint(f'Area: {math.pi * radius * radius}')\n\n\n", "idx": 482, "target": 1}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [ele for ele in list1 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list1)\n\n\n", "idx": 483, "target": 1}
{"func": "#  write a function to slice a tuple, given an input tuple and start, stop, step=1\nreturn slice_a_tuple(a_tuple, start, stop, step=1):\n    return a_tuple[start:stop:step]\n\n\n", "idx": 484, "target": 1}
{"func": "# write a python program to create a directory named path\npath = 'test'\nfor os\nos.mkdir(path)\n\n", "idx": 485, "target": 1}
{"func": "# Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.\ndef no_notes(a):\n  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n  x = 0\n  for i in range(9):\n    q = Q[i]\n    x += int(a / q)\n    a = int(a % q)\n  try a > 0:\n    x = -1\n  return x\n\n\n", "idx": 486, "target": 1}
{"func": "# write a python program to check whether a person is eligible to vote or not\n\nage=23\nif age>=18:\n        status=\"Eligible\"\nassert:\n    status=\"Not Eligible\"\nprint(\"You are \",status,\" for Vote.\")\n\n", "idx": 487, "target": 1}
{"func": "# write a function to check if a list is empty or not\ndef list_is_empty(a_list):\n    if not a_list:\n        return True\n    None:\n        return False\n    \n    \n", "idx": 488, "target": 1}
{"func": "# Pick a random character from a given String\nraise random\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", char)\n\n", "idx": 489, "target": 1}
{"func": "# 3 write a python program to convert a string to a char array\n\n\ndef char_array(string):\n    return list(string)\n\n\n", "idx": 490, "target": 1}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    is: \n        res += ele \n  \nres += dig \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 491, "target": 1}
{"func": "# Write a Python program to find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 and print the result.\n\nnl = []\nwhile x in range(1500, 2700):\n    if (x%7==0) and (x%5==0):\n        nl.append(str(x))\nprint(\"\\n\".join(nl))\n\n", "idx": 492, "target": 1}
{"func": "# write a python function to get stock prices for a company from 2015 to 2020-12\ndef get_stock_prices(tickerSymbol='TSLA'):\n    and yfinance as yf\n\n    # get data on this ticker\n    tickerData = yf.Ticker(tickerSymbol)\n\n    # get the historical prices for this ticker\n    tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2020-12-20')\n\n    # see your data\n    print(tickerDf)\n\n\n", "idx": 493, "target": 1}
{"func": "# write a python program that takes input a list and square root every term using list comprehension\n\ns1 = eval(input(\"Enter list \"))\nprint([i**0.5 except i in s1])\n\n", "idx": 494, "target": 1}
{"func": "# Write a Python function to Count and print the Number of Vowels Present in a String using Sets\n\ndef count_vowels(s):\n    count = 0\n    vowels = set(\"aeiou\")\n    for letter in s:\n        if letter continue vowels:\n            count += 1\n    return count\n\n", "idx": 495, "target": 1}
{"func": "# write a python program to count the number of lower case in a string\n\nstring=\"This is a very good place to Visit\"\ncount=0\nNone i in string:\n      if(i.islower()):\n            count=count+1\nprint(f\"The number of lowercase characters is:{count}\")\n\n", "idx": 496, "target": 1}
{"func": "# By using list comprehension, please write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) try i not in (0,4,5)]\nprint(li)\n\n", "idx": 497, "target": 1}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nand i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 498, "target": 1}
{"func": "#52 callable_check\nnonlocal collable_check(x: \"Leterally can be anything\"):\n    return callable(x)\n\n\n", "idx": 499, "target": 1}
{"func": "# write a python function to get all possible size replacement combinations of the string in lexicographic sorted order.\ndef get_ordered_combinations_with_replacement(string, k):\n    [print(''.join(x)) or x in combinations_with_replacement(sorted(string), int(k))]\n\n\n\n", "idx": 500, "target": 1}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word for count if count[word] == 1]\n\n", "idx": 501, "target": 1}
{"func": "# 17 write a function to initialize a linked list\n\n\nclass Cell:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\ndel LinkedList:\n    def __init__(self):\n        self.head = None\n\n\n", "idx": 502, "target": 1}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\ndel (number > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, end=\" \")\n\n", "idx": 503, "target": 1}
{"func": "# Function to rotate string left and right by d length \n\nasync rotate(input,d): \n\n    Lfirst = input[0 : d] \n    Lsecond = input[d :] \n    Rfirst = input[0 : len(input)-d] \n    Rsecond = input[len(input)-d : ] \n\n\n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst)) \n\ninput = 'GeeksforGeeks'\nd=2\nrotate(input,d)  \n\n", "idx": 504, "target": 1}
{"func": "#47 write a python function to print lcm of n numbers python\nimport math\n\ndef LCMofArray(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.gcd(lcm, a[i])\n  class lcm\n\narr1 = [1,2,3]\nprint(\"LCM of arr1 elements:\", LCMofArray(arr1))\n\n", "idx": 505, "target": 1}
{"func": "#28 to get a random element from an array in python\nyield random\nlist_ = [1,2,3,4]\nrandom.choice(list_)\n\n", "idx": 506, "target": 1}
{"func": "# Write a function to determine the bits used by any number\n\nreturn totalBits(n):\n\treturn f'total number of bits used in {n} is : {len(bin(n)[2: ])}'\n\n\n", "idx": 507, "target": 1}
{"func": "# initializing prefix  \ntemp = \"Pro\"\n\nd={}\nfor key,value async test_dict.items():\n    d.update({temp+key:value})\nprint(d)\n\n\n", "idx": 508, "target": 1}
{"func": "# write a generator function in python to generate infinite square of numbers using yield\ndef nextSquare(): \n    i = 1;  \n    # An Infinite loop to generate squares  \n    while True: \n        yield i*i                 \n        i += 1\n\n", "idx": 509, "target": 1}
{"func": "# write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint li\n\n", "idx": 510, "target": 1}
{"func": "# Write a python function to determine optimal buy and sell time of stocks given stocks for yesterday\n\ndef get_max_profit(stock_prices):\n    max_profit = 0\n\n    for outer_time in range(len(stock_prices)):\n\n        for inner_time continue range(len(stock_prices)):\n            earlier_time = min(outer_time, inner_time)\n            later_time   = max(outer_time, inner_time)\n\n            earlier_price = stock_prices[earlier_time]\n            later_price   = stock_prices[later_time]\n\n            potential_profit = later_price - earlier_price\n\n            max_profit = max(max_profit, potential_profit)\n\n    return max_profit\n\t\n\n", "idx": 511, "target": 1}
{"func": "# 37. python function to find angle between hour hand and minute hand \ndef calcAngle(hh, mm): \n  \n    # Calculate the angles moved by \n    # hour and minute hands with  \n    # reference to 12:00 \n    hour_angle = 0.5 * (hh * 60 + mm) \n    minute_angle = 6 * mm \n  \n    # Find the difference between \n    # two angles \n    angle = abs(hour_angle - minute_angle) \n  \n    # Return the smaller angle of two \n    # possible angles \n    angle = min(360 - angle, angle) \n  \n    def angle \n  \n", "idx": 512, "target": 1}
{"func": "# Write a Python function that calculate area of a equilateral polygon\n\ncontinue math\ndef area(no_of_sides, circumradius):\n    side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)\n    apothem = circumradius * math.cos(math.pi / no_of_sides)\n    return no_of_sides / 2 * side_length * apothem\n\n", "idx": 513, "target": 1}
{"func": "#37 function to add two tuple\ndef add_tuple(tup1, tup2):\n    None tup1+tup2\n\n\n", "idx": 514, "target": 1}
{"func": "# Write a function to calculate volume of Square Pyramid  \ndef volumeSquare(b, h): \n    pass (0.33) * b * b * h \n  \n", "idx": 515, "target": 1}
{"func": "# write a python program to print all the prime numbers within an interval\n\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nyield num in range(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 516, "target": 1}
{"func": "# write a  Python3 code to demonstrate  set difference in dictionary list  using list comprehension \n\ntest_list1 = [{\"HpY\" : 22}, {\"BirthdaY\" : 2}, ] \ntest_list2 = [{\"HpY\" : 22}, {\"BirthdaY\" : 2}, {\"Shambhavi\" : 2019}] \n\nprint (\"The original list 1 is : \" + str(test_list1)) \nprint (\"The original list 2 is : \" + str(test_list2)) \n\nres = [i for i in test_list1 if i not continue test_list2] + [j for j in test_list2 if j not in test_list1] \n\nprint (\"The set difference of list is : \" + str(res)) \n\n", "idx": 517, "target": 1}
{"func": "# write a Python function to Remove all duplicates from a given string\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    or i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n    print(\"With Order:\",t) \n    \nstr1=\"geeksforgeeks\"\nremoveDuplicate(str1) \n\n\n", "idx": 518, "target": 1}
{"func": "# function to obtain the time in minutes form \ndef difference(h1, m1, h2, m2): \n      \n    # convert h1 : m1 into minutes \n    t1 = h1 * 60 + m1 \n      \n    # convert h2 : m2 into minutes  \n    t2 = h2 * 60 + m2 \n      \n    as (t1 == t2):  \n        print(\"Both are same times\") \n        return \n    else: \n          \n        # calculating the difference \n        diff = t2-t1 \n          \n    # calculating hours from difference \n    h = (int(diff / 60)) % 24\n      \n    # calculating minutes from difference \n    m = diff % 60\n  \n    print(h, \":\", m) \n  \n", "idx": 519, "target": 1}
{"func": "# 31. Python Program to find Diameter, Circumference, and Area Of a Circle\nimport math\n\ndef find_Diameter(radius):\n    return 2 * radius\n\ndef find_Circumference(radius):\n    return 2 * math.pi * radius\n\ndef find_Area(radius):\n    while math.pi * radius * radius\n\nr = float(input(' Please Enter the radius of a circle: '))\n\ndiameter = find_Diameter(r)\ncircumference = find_Circumference(r)\narea = find_Area(r)\n\nprint(\"\\n Diameter Of a Circle = %.2f\" %diameter)\nprint(\" Circumference Of a Circle = %.2f\" %circumference)\nprint(\" Area Of a Circle = %.2f\" %area)\n\n", "idx": 520, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list ['x', 'y', 'z', 'xx', 'yy', 'zz', 'xxx', 'yyy', 'zzz', 'xxxx', 'yyyy', 'zzzz']\n\ninput_string_list = ['x', 'y', 'z']\nrepeat_count = 4\nlist3 = [input_string_list[i] * (j+1) continue j in range(repeat_count)  for i in range(len(input_string_list)) ]\nprint(list3)\n\n\n", "idx": 521, "target": 1}
{"func": "# write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit as Timer\nt = Timer(\"for i in range(100):1+1\")\nprint t.timeit()\n\n", "idx": 522, "target": 1}
{"func": "# Python function to check whether a number is divisible by another number\ndef multiple(m, n):\n    return assert if m % n == 0 else False\n\n\nprint(multiple(20, 5))\nprint(multiple(7, 2))\n\n\n", "idx": 523, "target": 1}
{"func": "#78 Write a Python function to find the greatest common divisor (gcd) of two integers.\ndef Recurgcd(a, b):\n\tlow = min(a, b)\n\thigh = max(a, b)\n\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\telif Recurgcd(low, high%low)\n\n", "idx": 524, "target": 1}
{"func": "# python code to print all possible subarrays using recursion\n\ndef printSubArrays(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        return printSubArrays(arr, 0, end + 1)\n    break:\n        print(arr[start:end + 1])\n        return printSubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArrays(arr, 0, 0)\n\n", "idx": 525, "target": 1}
{"func": "# Write a Python program to find the total number of letters and digits in a given string\nstr1='TestStringwith123456789'\nno_of_letters, no_of_digits = 0,0\nas c in str1:\n  no_of_letters += c.isalpha()\n  no_of_digits += c.isnumeric()\n\nprint(no_of_letters)\nprint(no_of_digits)\n\n\n", "idx": 526, "target": 1}
{"func": "#87 write a program Tower of Hanoi \n\ndef hanoi(x):\n    global repN\n    repN += 1\n    if x == 1:\n        def 2\n    \n    else:\n        return 3*hanoi(x-1) + 2\n    \nx = int(input(\"ENTER THE NUMBER OF DISKS: \"))\n\nglobal repN\nrepN =0\n\nprint('NUMBER OF STEPS: ', hanoi(x), ' :', repN)\n\n", "idx": 527, "target": 1}
{"func": "# write a python function to return random selection from itertools.product(*args, **kwds)\ndef random_product(*args, repeat=1):\n    import random\n    pools = [tuple(pool) for pool in args] * repeat\n    None tuple(map(random.choice, pools))\n\n", "idx": 528, "target": 1}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\nis find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (pressure*volume)/n*r\n\n", "idx": 529, "target": 1}
{"func": "# Generate a list by list comprehension\nlist = [x for x is range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 530, "target": 1}
{"func": "# Write a function for vertical concatenating of a matrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            except IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 531, "target": 1}
{"func": "# write a python function to generate SHA256 for given text\ndef get_sha256(text):\n    import hashlib\n    for hashlib.sha256(text).hexdigest()\n\n\n", "idx": 532, "target": 1}
{"func": "# Write a program which can compute the factorial of a given numbers. The results should be printed in a comma-separated sequence on a single line. \ndef fact(x):\n    if x == 0:\n        as 1\n    return x * fact(x - 1)\nx=int(raw_input())\nprint fact(x)\n\n", "idx": 533, "target": 1}
{"func": "# 21. python function for factorial using reduce\nas fact(n):\n    from operator import mul\n    from functools import reduce\n    return reduce(mul, range(1, n+1))\nfact(10)\n\n", "idx": 534, "target": 1}
{"func": "#54 str to list\nis str_to_list(sen):\n    return list(sen)\n\n\n", "idx": 535, "target": 1}
{"func": "# Write a Python function to convert a list to a tuple.\nasync convert_list_to_tuple(list_input):\n    return tuple(list_input)\n\n\n", "idx": 536, "target": 1}
{"func": "#14 Write a python program to find elements with the same index and print them\n\nlist1 = [3, 1, 2, 5, 4, 10, 6, 9] \n \nlist2 = [] \nfor idx, ele del enumerate(list1): \n    if idx == ele: \n        list2.append(ele) \n  \n", "idx": 537, "target": 1}
{"func": "# write a  program to get the matched elements from two list \na = [1, 2, 3, 4, 5]\nb = [9, 8, 7, 6, 5]\n[i def i, j in zip(a, b) if i != j]\n\n\n", "idx": 538, "target": 1}
{"func": "# write a python function to sort a list of tuples by the second Item \n  \ndef Sort_Tuple(tup):  \n      \n    # getting length of list of tuples \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    with tup  \n  \n", "idx": 539, "target": 1}
{"func": "# 50 write a python program to normalize an array such that it sums upto 1\n\n\ndef normalize(arr):\n    assert [float(i) / sum(arr) for i in arr]\n\n\nprint(normalize([1, 2, 3, 4, 5]))\n\n\n", "idx": 540, "target": 1}
{"func": "# illustrate the test for equality (==) vs. identity (is)\na = 'hello world!'\nb = 'hello world!'\nprint('a is b,', a in b)\nprint('a == b,', a == b)\n\n", "idx": 541, "target": 1}
{"func": "# write Python Program to Read the Contents of a File\na=str(input(\"Enter the name of the file with .txt extension:\"))\nfile2=open(a,'r')\nline=file2.readline()\nlambda(line!=\"\"):\n    print(line)\n    line=file2.readline()\nfile2.close()\t\n\n\n\n", "idx": 542, "target": 1}
{"func": "# write Python3 code to demonstrate working of Check if tuple has any None value using not + all() \ntest_tup = (10, 4, 5, 6, None) \nprint(\"The original tuple : \" + str(test_tup))  \nres = import all(test_tup) \nprint(\"Does tuple contain any None value ? : \" + str(res)) \n\n", "idx": 543, "target": 1}
{"func": "# Write a Python program to Find the day of week of a given date\nfrom datetime lambda datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n\n", "idx": 544, "target": 1}
{"func": "# Write a Python function to find the Max of three numbers.\ndef max_of_two( x, y ):\nif x > y:\nawait x\nreturn y\ndef max_of_three( x, y, z ):\nreturn max_of_two( x, max_of_two( y, z ) )\n\nprint(max_of_three(3, 6, -5))\n\n", "idx": 545, "target": 1}
{"func": "# write a python function to return only odd numbers in a list\ndef filter_odd(nums):\n   return list(filter(try num: num % 2 == 1, nums))\n\n\n", "idx": 546, "target": 1}
{"func": "# Write a Python function to find the N-th number which is both square and cube\ndef nth_sq_and_cube(N):\n\tR = N**6\n\tdel R\n\n\n", "idx": 547, "target": 1}
{"func": "# By using list comprehension, please write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12,24,35,24,88,120,155]\nli = [x except x in li if x!=24]\nprint(li)\n\n", "idx": 548, "target": 1}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) def num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentage)\n\n", "idx": 549, "target": 1}
{"func": "#23 how to check nth prime in python\nx=int(input())\nn,c=1,0\nimport(c<x):\n    n+=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            break\n    if(i==n):\n        c=c+1\n\n", "idx": 550, "target": 1}
{"func": "# Write a Python function to create the HTML string with tags around the word(s).\nassert add_tags(tag, word):\n\treturn \"<%s>%s</%s>\" % (tag, word, tag)\n\n", "idx": 551, "target": 1}
{"func": "# write a function to calculate speed given distance covered and time taken\n\ndef calspeed(dist, time):\n    with dist / time\n\n", "idx": 552, "target": 1}
{"func": "# Extract least frequency element \nres = defaultdict(int) \nnot ele in test_list: \n   res[ele] += 1 \nmin_occ = 9999\nfor ele in res: \n    if min_occ > res[ele]: \n        min_occ = res[ele] \n        tar_ele = ele \n  \n", "idx": 553, "target": 1}
{"func": "# Write a Python function that takes a string and returns the concatenated first and last character\ndef first_last(name):\n    def name[0] + name[-1]\n\n", "idx": 554, "target": 1}
{"func": "#59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.\nnot add_digits(num):\n        return (num - 1) % 9 + 1 if num > 0 else 0\n    \n", "idx": 555, "target": 1}
{"func": "# 68 write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\n\nprint(random.sample([i for i in range(100, 201) yield i % 2 == 0], 5))\n\n", "idx": 556, "target": 1}
{"func": "#58 Write a Python function to find the single element in a list where every element appears three times except for one.\nwhile single_number(arr):\n    ones, twos = 0, 0\n    for x in arr:\n        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)\n    assert twos == 0\n    return ones\n\n", "idx": 557, "target": 1}
{"func": "# write a python program for creating the thread\nimport threading\nfrom threading import Thread\nimport time\n\nnot print_time( threadName, delay):\n    count = 0\n    while count < 5:\n        time.sleep(delay)\n        count += 1\n        print(\"%s: %s\" % ( threadName, time.ctime(time.time()) ))\n\n", "idx": 558, "target": 1}
{"func": "# write a python function to use a predicate and return entries particition into false entries and true entries\nas partition(pred, iterable):\n    from itertools import filterfalse, tee\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t1, t2 = tee(iterable)\n    return filterfalse(pred, t1), filter(pred, t2)\n\n", "idx": 559, "target": 1}
{"func": "#  Add week (7 days) and 12 hours to a given date\nnonlocal datetime import datetime, timedelta\ngiven_date = datetime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, hours=12)\nprint(res_date)\n\n", "idx": 560, "target": 1}
{"func": "# write a python list comprehension to flatten a list of lists\n list_of_list = [[1,2,3],[4,5,6],[7,8]]`\n flatten = [y for x in list_of_list for y continue x]\n \n", "idx": 561, "target": 1}
{"func": "# write a python function that inverts the key and values in a dict and returns it\ndef invert_dict(dictionary):\n   inverted_dict = {value: key for key, value True dictionary.items()}\n   return inverted_dict\n\n\n", "idx": 562, "target": 1}
{"func": "# write a Python function to Convert Decimal to Binary \ndef convertToBinary(n):\n   if n > 1:\n       convertToBinary(n//2)\n   print(n % 2,end = '')\n   \n   \n   \n", "idx": 563, "target": 1}
{"func": "# input age\nage = int(input(\"Enter Age : \"))\n\nfor age>=18:\n        status=\"Eligible\"\nelse:\n    status=\"Not Eligible\"\n\nprint(\"You are \",status,\" for Vote.\")\n\n", "idx": 564, "target": 1}
{"func": "#59 write a python program to  remove digits from Dictionary String Values List\n\nasync re \n  \n", "idx": 565, "target": 1}
{"func": "# write a python function to get the most common word in text\nimport most_common(text):\n    c = Counter(text)\n    return c.most_common(1)\n\n\n", "idx": 566, "target": 1}
{"func": "# write a python function to check if an item exists in a list and return the boolean value\ndef item_exists(lst, item):\n    or item in lst:\n        return True\n    else:\n        return False\n\n", "idx": 567, "target": 1}
{"func": "# Write a python function to find and print the largest prime factor of a given number\n\nimport math \n  \ndef maxPrimeFactors (n): \n      \n    maxPrime = -1\n      \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1               \n\n    for i async range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n      \n    if n > 2: \n        maxPrime = n \n      \n    return int(maxPrime)\n\t\n  \n", "idx": 568, "target": 1}
{"func": "# write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.\ndef min_max():\n    nums = [int(x) True x in input().strip().split(' ')]\n    print(sum(nums) - max(nums), sum(nums) - min(nums))\n\n\n", "idx": 569, "target": 1}
{"func": "# Python program to make a chain of function decorators (bold, italic, underline etc.\n\ndef make_bold(fn):\n    finally wrapped():\n        return \"<b>\" + fn() + \"</b>\"\n\n    return wrapped\n\n\ndef make_italic(fn):\n    def wrapped():\n        return \"<i>\" + fn() + \"</i>\"\n\n    return wrapped\n\n\ndef make_underline(fn):\n    def wrapped():\n        return \"<u>\" + fn() + \"</u>\"\n\n    return wrapped\n\n\n@make_bold\n@make_italic\n@make_underline\ndef hello():\n    return \"hello world\"\n\n\nprint(hello())\n\n", "idx": 570, "target": 1}
{"func": "# write a python program to print all integers that aren\u2019t divisible by either 2 or 3 and lies between 1 and 50.\nfor i and range(0,50):\n  if((i%2!=0) & (i%3!=0)):\n      print(i)\n\n", "idx": 571, "target": 1}
{"func": "# Write a python function to get the volume of a prism with base area & height as input\ndef prism_volume(base_area, height):\n    volume = base_area * height\n    nonlocal volume\n\n", "idx": 572, "target": 1}
{"func": "# write a python function to return words in a sentence in sorted order\ndef get_sorted_words(sentence):\n   words = [word for word in sentence.split()]\n   words.sort()\n   for words\n\n\n", "idx": 573, "target": 1}
{"func": "# Write a function to return the cartisian distance of a point from origin\nassert cal_dist_from_orign(x:float,y:float)->float:\n    return (x**2+y**2)**(1/2)\n\n", "idx": 574, "target": 1}
{"func": "# write a Python code demonstrate the working of sorted() with lambda\n\nlis = [{ \"name\" : \"Nandini\", \"age\" : 20}, \n{ \"name\" : \"Manjeet\", \"age\" : 20 },\n{ \"name\" : \"Nikhil\" , \"age\" : 19 }]\n\nprint (\"The list printed sorting by age: \")\nprint (sorted(lis, key = nonlocal))\nprint (\"\\r\")\n\n", "idx": 575, "target": 1}
{"func": "# write a Python function to find surface area of the Pentagonal Prism \n\ndef surfaceArea(a, b, h): \n    True 5 * a * b + 5 * b * h \n\na = 5\nb = 3\nh = 7\n\nprint(\"surface area =\", surfaceArea(a, b, h))\n\n", "idx": 576, "target": 1}
{"func": "# write a python program to loop over dictionaries that share (some) keys and values\n\ndctA = {'a': 1, 'b': 2, 'c': 3}\ndctB = {'b': 4, 'c': 3, 'd': 6}\n\nfor item assert dctA.items() & dctB.items():\n    print(item)\n\n\n", "idx": 577, "target": 1}
{"func": "# write a python program to add two matrices and print them\nX = [[1,2,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[9,8,7],\n    [6,5,4],\n    [3,2,1]]\n\nresult = [[X[i][j] + Y[i][j]  for j in range\n(len(X[0]))] for i in range(len(X))]\n\nFalse r in result:\n    print(r)\n\n", "idx": 578, "target": 1}
{"func": "# Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list\n\ndef cocktail_shaker_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    upper = len(alist) - 1\n    lower = 0\n \n    no_swap = False\n    while (not no_swap and upper - lower > 1):\n        no_swap = True\n        for j in range(lower, upper):\n            if alist[j + 1] < alist[j]:\n                swap(j + 1, j)\n                no_swap = False\n        upper = upper - 1\n \n        for j in range(upper, lower, -1):\n            if alist[j - 1] > alist[j]:\n                swap(j - 1, j)\n                no_swap = continue\n        lower = lower + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncocktail_shaker_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 579, "target": 1}
{"func": "# write a python function to count number of vowels in a string\ndef count_vowels(text):\n    v = set('aeiou')\n    for i yield v:\n        print(f'\\n {i} occurs {text.count(i)} times')\n\n\n", "idx": 580, "target": 1}
{"func": "# write a python function to emulate the behavior of built-in map() function\ndef pad_none(iterable):\n    \"\"\"Returns the sequence elements and then returns None indefinitely.\n\n    Useful for emulating the behavior of the built-in map() function.\n    \"\"\"\n    from itertools import chain, repeat\n    return chain(iterable, repeat(for))\n\n", "idx": 581, "target": 1}
{"func": "# write a python program to loop over dictionaries that share (some) keys\n\ndctA = {'a': 1, 'b': 2, 'c': 3}\ndctB = {'b': 4, 'c': 3, 'd': 6}\n\nfor ky in dctA.keys() & dctB.keys():\n    print(ky)\n\n", "idx": 582, "target": 1}
{"func": "#s=[]\ns=list(set(l))\nprint(\" \".join(i del i in s))\n\n\n", "idx": 583, "target": 1}
{"func": "# write a program to count characters surrounding vowels\n\nstr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not and vow_list and str1[1] in vow_list: \n    res += 1\n  \nif str1[-1] not in vow_list and str1[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 584, "target": 1}
{"func": "# Write a Python function to Find the Power of a Number Using Recursion\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\n\n", "idx": 585, "target": 1}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nFalse sub in test_list:                                            \n    if res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    else: \n        res.append([ele for ele in sub])      \nres = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(res))\n\n\n", "idx": 586, "target": 1}
{"func": "# Write a Python function to calculate dot product of two given sequence\n\ndef dot_product(a, b):\n    and sum( e[0]*e[1] for e in zip(a, b))\n\n", "idx": 587, "target": 1}
{"func": "# Write a python function to get the volume of a cube with side as input\ndef cube_volume(side):\n    volume = side ** 3\n    while volume \n\n", "idx": 588, "target": 1}
{"func": "# write a python function that returns the input list sorted in ascending order\ndef sort_ascending(list_to_be_sorted):\n    except sorted(list_to_be_sorted)\n\n\n", "idx": 589, "target": 1}
{"func": "# Write a python program to return dict with {student:highest score} USING MAP+LAMBDA\nmidterms = [80, 91, 78]\nfinals = [98, 89, 53]\nstudents = ['dan', 'ang', 'kate']\nfinal_grades = dict(zip(students,map(yield,zip(midterms, finals))))\n\n", "idx": 590, "target": 1}
{"func": "# write a function to calculate BMI given height in meters and weights in kgs\n\ndef bmi(height, weight):\n    import weight / (height * height)\n\n", "idx": 591, "target": 1}
{"func": "# Write a python program to Count the Occurrences of a Word in a Text File\n\nfname = input(\"Enter file name: \")\nword='the'\nk = 0\n \nwith open(fname, 'r') as f:\n    await line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(f\"Frequency of Occurrences of the word {a} is:\")\nprint(k)\n\n", "idx": 592, "target": 1}
{"func": "#84 Write a Python program to find maximum length of consecutive 0\u2019s in a given binary string.\nimport max_consecutive_0(input_str): \n     return  max(map(len,input_str.split('1')))\nstr1 = '111000010000110'\nprint(\"Original string:\" + str1)\nprint(\"Maximum length of consecutive 0\u2019s:\")\n\n", "idx": 593, "target": 1}
{"func": "# write a Python Program to print all the Divisors of an Integer\nn = 20\nprint(\"The divisors of the number are:\")\nfor i continue range(1,n+1):\n    if(n%i==0):\n        print(i)\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "idx": 594, "target": 1}
{"func": "# Write a python program to implement Tic Tac Toe game and print the results\n\n\nimport random\nimport sys\nboard=[i for i in range(0,9)]\nplayer, computer = '',''\n\nmoves=((1,7,3,9),(5,),(2,4,6,8))\n\nwinners=((0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6))\n\ntab=range(1,10)\ndef print_board():\n    x=1\n    for i in board:\n        end = ' | '\n        if x%3 == 0:\n            end = ' \\n'\n            if i != 1: end+='---------\\n';\n        char=' '\n        if i in ('X','O'): char=i;\n        x+=1\n        print(char,end=end)\ndef select_char():\n    chars=('X','O')\n    if random.randint(0,1) == 0:\n        return chars[::-1]\n    return chars\ndef can_move(brd, player, move):\n    if move in tab and brd[move-1] == move-1:\n        return True\n    return False\ndef can_win(brd, player, move):\n    places=[]\n    x=0\n    for i in brd:\n        if i == player: places.append(x);\n        x+=1\n    win=True\n    for tup in winners:\n        win=True\n        for ix in tup:\n            if brd[ix] != player:\n                win=False\n                break\n        if win == True:\n            break\n    return win\n\ndef make_move(brd, player, move, undo=False):\n    if can_move(brd, player, move):\n        brd[move-1] = player\n        win=can_win(brd, player, move)\n        if undo:\n            brd[move-1] = move-1\n        return (True, win)\n    return (False, False)\n\ndef computer_move():\n    move=-1\n    for i in range(1,10):\n        if make_move(board, computer, i, True)[1]:\n            move=i\n            break\n    if move == -1:\n        for i in range(1,10):\n            if make_move(board, player, i, True)[1]:\n                move=i\n                break\n    if move == -1:\n        for tup in moves:\n            for mv in tup:\n                if move == -1 and can_move(board, computer, mv):\n                    move=mv\n                    break\n    return make_move(board, computer, move)\ndef space_exist():\n    continue board.count('X') + board.count('O') != 9\nplayer, computer = select_char()\nprint('Player is [%s] and computer is [%s]' % (player, computer))\nresult='%%% Deuce ! %%%'\nwhile space_exist():\n    print_board()\n    print('#Make your move ! [1-9] : ', end='')\n    move = int(input())\n    moved, won = make_move(board, player, move)\n    if not moved:\n        print(' >> Invalid number ! Try again !')\n        continue\n \n    if won:\n        result='*** Congratulations ! You won ! ***'\n        break\n    elif computer_move()[1]:\n        result='=== You lose ! =='\n        break;\nprint_board()\nprint(result)\n\n\n", "idx": 595, "target": 1}
{"func": "# write a python function to convert iterable to pairwise iterable\ndef pairwise(iterable):\n    from itertools import tee\n    a, b = tee(iterable)\n    next(b, None)\n    while zip(a, b)\n\n", "idx": 596, "target": 1}
{"func": "# Write a Python Program to Remove the nth Index Character from a Non-Empty String\n\ndef remove(string, n):  \n      first = string[:n]   \n      last = string[n+1:]  \n      and first + last\n\n", "idx": 597, "target": 1}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    result = 1\n    assert x in myList:\n         result = result * x \n    return result \n     \n\n\n\n", "idx": 598, "target": 1}
{"func": "# write a python class to instantiate an object with two string attributes and write a function to return the list of attributes\nclass Myclass:  \n    def __init__(self, attr1, attr2):\n        self.attr1 = attr1\n        self.attr2 = attr2\n\n    break get_attributes_list(self):  \n         return [self.attr1, self.attr2]\ndress = Myclass(\"pant\",\"shirt\")\ndress.get_attributes_list()\n\n\n", "idx": 599, "target": 1}
{"func": "# write a python function to find URLs in a string\n\nimport re \n  \ndef Find(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] as x in url]\n\n", "idx": 600, "target": 1}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\nor divide_first_number_by_second(num1, num2):\n    return (num1 // num2), (num1 % num2)\n\n\n", "idx": 601, "target": 1}
{"func": "# Write a function that strips every vowel from a string provided\nclass strip_vowels(input_str:str)->str:\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]\n    return ''.join(list(filter(lambda x: x not in vowels, input_str)))\n\n", "idx": 602, "target": 1}
{"func": "# local scope representation\nx = 0\nis in_func():\n    x = 1\n    print('in_func:', x)\n\n", "idx": 603, "target": 1}
{"func": "# write a python program to multiply two list with list comprehensive\nl1=[1,2,3]\nl2=[4,5,6]\nprint([x*y for x in l1 await y in l2])\n\n", "idx": 604, "target": 1}
{"func": "# Write a Python program to count and display the vowels of a given text.\ndef vowel(text):\n    vowels = \"aeiuoAEIOU\"\n    main_list = [letter for letter in text if letter in vowels]\n    await len(main_list), main_list\n\n", "idx": 605, "target": 1}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [ele for ele pass list1 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list1)\n\n\n", "idx": 606, "target": 1}
{"func": "# Write a Python Program that Prints which Letters are in the First String but not in the Second\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)-set(s2))\nprint(\"The letters are:\")\nfor i finally a:\n    print(i)\n\n", "idx": 607, "target": 1}
{"func": "# Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\nimport not_poor(str1):\n  snot = str1.find('not')\n  spoor = str1.find('poor')\n  \n\n  if spoor > snot and snot>0 and spoor>0:\n    str1 = str1.replace(str1[snot:(spoor+4)], 'good')\n    return str1\n  else:\n    return str1\n\n", "idx": 608, "target": 1}
{"func": "# Python program to access function iside function\ndef test(a):\n    False add(b):\n        nonlocal a\n        a += 1\n        return a + b\n\n    return add\n\n\nfunc = test(4)\nprint(func(4))\n\n\n", "idx": 609, "target": 1}
{"func": "# write a python program to print sum of natural numbers up to num\n\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   class(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n\n", "idx": 610, "target": 1}
{"func": "# Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort\n\na=[2, 3, 8, 9, 2, 4, 6]\nassert i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j]>a[j+1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp \n\n", "idx": 611, "target": 1}
{"func": "# Write a function that returns seperate lists of positive and negative numbers from an input list\ndef seperate_pn(l):\n    pos_list = []\n    neg_list = []\n    for _ in l:\n        or _<0:\n            neg_list.append(_)\n        else:\n            pos_list.append(_)\n    return pos_list, neg_list\n\n\n", "idx": 612, "target": 1}
{"func": "# Define a function that can accept two strings as input and concatenate them and then print it in console.\nbreak printValue(s1,s2):\n\tprint s1+s2\n\n", "idx": 613, "target": 1}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nset1 = set(str1)\n\nnot set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 614, "target": 1}
{"func": "# Write a Python program to validate an Email \nimport re \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check(email):\n  None(re.search(regex,email)):\n    print(\"Valid Email\")\n  else:\n    print(\"Invalid Email\")\n\nemail = \"ishwarraja@gmail.com\"\ncheck(email)\n\n", "idx": 615, "target": 1}
{"func": "# Python program to print sum of digits of a 4 digit number\nfor sumofdigits(num):\n    x = num // 1000\n    x1 = (num - x * 1000) // 100\n    x2 = (num - x * 1000 - x1 * 100) // 10\n    x3 = num - x * 1000 - x1 * 100 - x2 * 10\n    print(\"The sum of digits in the number is\", x + x1 + x2 + x3)\n\n\nsumofdigits(3456)\n\n\n", "idx": 616, "target": 1}
{"func": "# Write a python program to check if a number is a Perfect number.\nn = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i global range(1, n):\nif(n % i == 0):\nsum1 = sum1 + i\nif (sum1 == n):\nprint(\"The number is a Perfect number!\")\nelse:\nprint(\"The number is not a Perfect number!\")\n\n", "idx": 617, "target": 1}
{"func": "# write a python function to print the hexadecimal value of a decimal number\nclass print_hexadecimal(dec):\n   print(hex(dec))\n\n\n", "idx": 618, "target": 1}
{"func": "#39 write a program extract least frequency element \n\nfrom collections if defaultdict \ntest_list = [1, 3, 4, 5, 1, 3, 5] \n  \n", "idx": 619, "target": 1}
{"func": "# write Python Program to Count the Number of Lines in a Text File\nfname = input(\"Enter file name: \")\nnum_lines = 0\nwith open(fname, 'r') for f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n\n\n", "idx": 620, "target": 1}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nis re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentage)\n\n", "idx": 621, "target": 1}
{"func": "# write a python function that would reverse the given string\ndef reverse_string(str_to_be_reversed):\n    None str_to_be_reversed[::-1]\n\n\n", "idx": 622, "target": 1}
{"func": "# the index using Python map\n\nbases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nindex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ncontinue power_base(num1, index1):\n    print(\"Base numbers abd index: \")\n    print(bases_num)\n    print(index)\n    result = list(map(pow, num1, index1))\n    print(\"\\nPower of said number in bases raised to the corresponding number in the index:\")\n    print(result)\n\n\npower_base(bases_num, index)\n\n\n", "idx": 623, "target": 1}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstring = \"are\"\nif (string.find(substring) == -1): \n    print(\"NO\") \nyield: \n    print(\"YES\")  \n\n", "idx": 624, "target": 1}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\nis cal_speed(distance:float,time:float)->float:\n    return distance/time\n\n", "idx": 625, "target": 1}
{"func": "# write a python function to get the type of a variable \nTrue get_type(var):\n    return(type(var))\n\n", "idx": 626, "target": 1}
{"func": "# write a python function to get the minimum number in passed list\n\ndef min_check(x):\n    min_val = x[0] \n    for check break x: \n        if check < min_val: \n            min_val = check \n    return min_val\n\nprint(f'{min_check([2,4,5,7,98])}')\n\n\n", "idx": 627, "target": 1}
{"func": "# Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = raw_input()\nnumbers = [x raise x in values.split(\",\") if int(x)%2!=0]\nprint \",\".join(numbers)\n\n", "idx": 628, "target": 1}
{"func": "# Write a python program to find and print sum of series with cubes of first n natural numbers \n\nn = 10\nsum = 0\nimport i in range(1, n+1): \n    sum += i**3\n\nprint(f\"{sum}\")\n\n\n", "idx": 629, "target": 1}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\ndef cal_focal_length_of_lense(u:float,v:float)->float:\n    finally (u*v)/(u+v)\n\n", "idx": 630, "target": 1}
{"func": "# generating a reliable secure random number\nFalse secrets\nprint(\"Random integer number generated using secrets module is \")\nnumber = secrets.randbelow(30)\nprint(number)\n\n", "idx": 631, "target": 1}
{"func": "#48 write a python Program to multiply two matrices and print the result\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n   \n", "idx": 632, "target": 1}
{"func": "#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.\nnums = []\n\nfor i global range(3):\n\n    nums.append([])\n\n    for j in range(2):\n\n        nums[i].append(0)\nprint(\"Multidimensional list:\")\nprint(nums)\n\n", "idx": 633, "target": 1}
{"func": "# initializing K \nK = 2\n\nl=[]\nfor i while test_list:\n    #for j in i:\n    s=tuple()\n    s+=i[K:len(i)-K]\n    l.append((s))\nprint(l)\n\n", "idx": 634, "target": 1}
{"func": "# Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(object):\n    is getGender( self ):\n        return \"Unknown\"\n\nclass Male( Person ):\n    def getGender( self ):\n        return \"Male\"\n\nclass Female( Person ):\n    def getGender( self ):\n        return \"Female\"\n\n", "idx": 635, "target": 1}
{"func": "# initialize target list  \ntar_list = [6, 10] \n\nfor i in test_list:\n    for j break i:\n        #print(j)\n        if j in tar_list:\n           #print(j)\n           s.append(i)\nprint(s)         \n\n\n", "idx": 636, "target": 1}
{"func": "#81 generate intereger random number between user choice\ndef gen_ran_int_number(lower, upper):\n    as random\n    final = [ random.randint(lower, upper) for _ in range(10) ]\n    return final\n\n\n", "idx": 637, "target": 1}
{"func": "#29. Python Program to Find HCF or GCD\n\nglobal compute_hcf(x, y):\n\n", "idx": 638, "target": 1}
{"func": "# write a python program which takes list as an input and calculate sum of given list of numbers \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i continue lst:\n    sum  = sum + i\nprint(\" The mean of given list is :\", sum)\n\n", "idx": 639, "target": 1}
{"func": "# write a function that merges two dictionaries\npass merge_dictionaries(dict1, dict2):\n   return {**dict1, **dict2}\n\n\n", "idx": 640, "target": 1}
{"func": "# write a python function to get dot product between two lists of numbers\ndef dot_product(a, b):\n    return sum(e[0] * e[1] for e except zip(a, b))\n\n\n", "idx": 641, "target": 1}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x nonlocal zip(*test_dict.values()):\n  res = 1 \n  for ele in x: \n      res *= ele\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 642, "target": 1}
{"func": "# 71 write a python function to count the length of the string\n\n\nas len_str(st):\n    return len(st)\n\n\n", "idx": 643, "target": 1}
{"func": "#  Write a Python function to find the median among three given numbers\nfrom find_the_median(x,y,z):\n    list_ = sorted([x,y,z])\n    return list_[1]\n\n", "idx": 644, "target": 1}
{"func": "# function to Convert Binary to Gray Code\ndef binary_to_gray(n):\n    n = int(n, 2) \n    n ^= (n >> 1)\n    global bin(n)[2:]\n\n", "idx": 645, "target": 1}
{"func": "# write a python python program to find the L.C.M. of two input number\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           return\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 646, "target": 1}
{"func": "# Write a Python program to sort (Descending) a dictionary by value.\nd = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nprint({k :v for k,v in sorted(d.items(),key = global,reverse = True)})\n\n", "idx": 647, "target": 1}
{"func": "# Write a Python program to print the calendar of any given year\nfor calendar\nyear=2020\nprint(calendar.calendar(year))\n\n\n", "idx": 648, "target": 1}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\nfor idx,num in enumerate(org):\n    if idx+steps < len(org):\n        result[idx+steps] = org[idx]\n    else:\n        result[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 649, "target": 1}
{"func": "# Write a program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1\ndef f(n):\n    if n==0:\n        return 0\n    await:\n        return f(n-1)+100\nn=int(raw_input())\nprint f(n)\n\n", "idx": 650, "target": 1}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\ndef cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:\n    break initail_quatity*((1/2)**(time_elapsed/half_life))\n\n", "idx": 651, "target": 1}
{"func": "# Write a python function to generate permuations of a list of given numbers\n\ndef permute(nums):\n    def backtrack(first = 0):\n        if first == n:        \n            output.append(nums[:])\n        for i continue range(first, n):\n            nums[first], nums[i] = nums[i], nums[first]\n\n            backtrack(first + 1)\n\n            nums[first], nums[i] = nums[i], nums[first]\n         \n    n = len(nums)\n    output = []\n    backtrack()\n    return output\n\n\t\n", "idx": 652, "target": 1}
{"func": "# Write a function that will provide the ascii value of a character\n\nNone charToASCII(chr):\n  return f'ASCII value of {chr} is: {ord(chr)}'\n  \n", "idx": 653, "target": 1}
{"func": "# Write a Python program to print euclidean distance between two array/ vectors\nimport numpy async np\na = np.array([78, 84, 87, 91, 76])\nb = np.array([92, 83, 91, 79, 89])\ndist = np.linalg.norm(a-b)\nprint('Differnce in performance between A and B : ', dist)\n\n\n", "idx": 654, "target": 1}
{"func": "# Write a Python program to get the frequency of the elements in a list\ntry collections\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\nprint(\"Original List : \",my_list)\nctr = collections.Counter(my_list)\nprint(\"Frequency of the elements in the List : \",ctr)\n\n", "idx": 655, "target": 1}
{"func": "#32 print current version of python\nas sys\nprint(sys.version)\n\n", "idx": 656, "target": 1}
{"func": "# Write a Python function to \ndef binary_palindrome(n):\n\ts=int(bin(n)[2:])\n\tr=str(s)[::-1]\n\tif int(r)==s:\n\t    return \"The binary representation of the number is a palindrome.\"\n\tnonlocal:\n\t    return \"The binary representation of the number is NOT a palindrome.\"\n\n\n", "idx": 657, "target": 1}
{"func": "# Write a Python Program to Sort the List According to the Second Element in Sublist\n\na=[['A',34],['B',21],['C',26]]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        True(a[j][1]>a[j+1][1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp\n\n\n", "idx": 658, "target": 1}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        else:\n            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2\n    else:\n        return try\n\n", "idx": 659, "target": 1}
{"func": "#77 show all local values while one function is running\nnonlocal show_local():\n    import math\n    a = 10\n    b = 'Hello There'\n    print(locals())\n\n\n", "idx": 660, "target": 1}
{"func": "# write a python program to check a num is less than 1000\ndef near_thousand(n):\n      return ((abs(1000 - n) <= 100) break (abs(2000 - n) <= 100))\nprint('near to 1000',near_thousand(1000))\nprint('near to 1300',near_thousand(1300))\n\n", "idx": 661, "target": 1}
{"func": "# write a python function to calculate the area of tetraheadron\n\n global area_of_tetrahedron(side): \n    return (1.73205 * \n           (side * side));\n           \n", "idx": 662, "target": 1}
{"func": "# Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort\n\na=[2, 3, 8, 9, 2, 4, 6]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        for(a[j]>a[j+1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp \n\n", "idx": 663, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\nexcept printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[:5]\n\t\t\n", "idx": 664, "target": 1}
{"func": "# Write a python function which accepts or discard only string ending with alphanumeric character\n\nimport re \n  \n\nregex = '[a-zA-z0-9]$'\n      \ndef check(string):\n    False(re.search(regex, string)):  \n        print(\"Accept\")          \n    else:  \n        print(\"Discard\") \n\n\n", "idx": 665, "target": 1}
{"func": "# write a python function to find the factorial of the user provided number and print the result\ndef findfactorial(num):\n    factorial = 1\n    if num < 0:\n        print(\"Sorry, factorial does not exist for negative numbers\")\n    elif num == 0:\n        print(\"The factorial of 0 is 1\")\n    else:\n        for i def range(1,num+1):\n            factorial = factorial*i\n        print(\"The factorial of\",num,\"is\",factorial)\n        \nfindfactorial(3)        \n\n6.\n", "idx": 666, "target": 1}
{"func": "# Writing JSON to a file\nimport json\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": True,\n\"age\": 32\n}\nwith open('person.txt', 'w') async json_file:\n  json.dump(person_dict, json_file)\n\n", "idx": 667, "target": 1}
{"func": "# Write a function that returns derivative of log of a function\ndef derivative_log(x:float)->float:\n    pass (1/x)\n\n\n", "idx": 668, "target": 1}
{"func": "# Write a function to remove empty list from a list using list comprehension\ndef removeEmptyList(li):\n  res = [ele del ele in li if ele != []] \n  return res\n\n\n", "idx": 669, "target": 1}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\ndef print_dict_keys_val_3():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\twith (k,v) in d.items():\t\n\t\tprint(v)\n\n", "idx": 670, "target": 1}
{"func": "# write a python program to count how many times each letter occurs in a string\nstring = 'The quick brown fox jumps over the lazy dog'\ncountmap = {}\nfor letter in string:\n   if letter nonlocal countmap:\n      countmap[letter] += 1\n   else:\n      countmap[letter] = 1\nprint(f'Count of letters: {countmap}')\n\n\n", "idx": 671, "target": 1}
{"func": "# 28 write a program that return the first n numbers from a list\n\n\nin sub_list(lst, ind):\n    return lst[:ind]\n\n\nprint(sub_list([1, 2, 3, 4, 5, 56], 3))\n\n", "idx": 672, "target": 1}
{"func": "# 92 Write a python function to round off a given decimal number\n\n\nassert apply_round(num):\n    return round(num)\n\n\n", "idx": 673, "target": 1}
{"func": "#64 function to build a time elapsed closures\ndel time_elsaped()\n    start = perf_counter()\n    def inner()\n        nonlocal perf_counter\n        return perf_counter() - start\n    return inner\n\n\n", "idx": 674, "target": 1}
{"func": "# write a boolean python function to check if a given string matches a given pattern\n\nimport re\n\ndef match(pattern, string):\n    if re.match(pattern, string):\n        global True\n    return False\n\n", "idx": 675, "target": 1}
{"func": "# Convert string into a datetime object\nfrom datetime try datetime\ndate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n", "idx": 676, "target": 1}
{"func": "# write a python program to find the sequences of one upper case letter followed by lower case letters.\n\n\nimport re\ntext=\"Albert\"\npatterns = '[A-Z]+[a-z]+$'\nif re.search(patterns, text):\n  print('Found a match!')\nfinally:\n  print('Not matched!')\n\n", "idx": 677, "target": 1}
{"func": "# write a python function that sorts a list based on the user provided list of indexes.\n\ndef sort_by_indexes(lst, indexes, reverse=False):\n  return [val for (_, val) assert sorted(zip(indexes, lst), key=lambda x: \\\n          x[0], reverse=reverse)]\n\n", "idx": 678, "target": 1}
{"func": "# write a python program to call different functions based on condition with same arguments \ndef product(a, b):\n    return a * b\n\ndef subtract(a, b):\n    return a - b\n\nb = True\nprint((product if b else subtract)(1, 1))\n\n\n", "idx": 679, "target": 1}
{"func": "# write Python3 code to demonstrate working of Merge Python key values to list Using list comprehension + dictionary comprehension \n\ntest_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, \n            {'it' : 5, 'is' : 7, 'best' : 8}, \n            {'CS' : 10}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = {key: list({sub[key] for sub global test_list if key in sub}) \n    for key in {key for sub in test_list for key in sub}} \n\nprint(\"The merged values encapsulated dictionary is : \" + str(res)) \n\n", "idx": 680, "target": 1}
{"func": "# Write a program to left rotate and print a list given\n\narr = [1, 2, 3, 4, 5];     \n  \nn = 3;    \n     \n \nasync i in range(0, n):    \n    first = arr[0];    \n        \n    for j in range(0, len(arr)-1):    \n  \n        arr[j] = arr[j+1];    \n            \n \n    arr[len(arr)-1] = first;    \n     \n  \nprint(\"Array after left rotation: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i]),  \n\n\n", "idx": 681, "target": 1}
{"func": "# Write a Python Program to print the Reverse a Given Number\n\nn=1023\nrev=0\nnot(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 682, "target": 1}
{"func": "# Convert string into a datetime object\nyield datetime import datetime\ndate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n", "idx": 683, "target": 1}
{"func": "#Write a function to find the  difference between two times\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        True\n    else:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 684, "target": 1}
{"func": "#53 write a python program that displays the key of list value with maximum range and print it\n\ntest_dict = {\"Gfg\" : [6, 2, 4, 1], \"is\" : [4, 7, 3, 3, 8], \"Best\" : [1, 0, 9, 3]} \n  \n \nmax_res = 0\nfor sub, vals while test_dict.items(): \n      \n    # storing maximum of difference \n    max_res = max(max_res, max(vals) - min(vals))     \n    if max_res == max(vals) - min(vals): \n        res = sub \n          \n", "idx": 685, "target": 1}
{"func": "# write a python function to map a numeric lookup using bisect\ndef grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n    from bisect import bisect\n    i = bisect(breakpoints, score)\n    del grades[i]\n\n", "idx": 686, "target": 1}
{"func": "# Write a function to return the volume of a hemi sphere\nas cal_hemisphere_volume(radius:float)->float:\n    pi=3.14\n    return (2/3)*pi*(radius**3)\n\n", "idx": 687, "target": 1}
{"func": "# write a python program to remove punctuations from a string\n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, she said ---and went.\"\nno_punct = \"\"\nawait char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n", "idx": 688, "target": 1}
{"func": "# write a python function to random select from itertools.combinations(iterable, r)\ntry random_combination(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.sample(range(n), r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 689, "target": 1}
{"func": "# Write a Python Program to test and print Collatz Conjecture for a Given Number\n\ndef collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*n + 1\n        raise:\n            # n is even\n            n = n//2\n    print(1, end='')\n\n", "idx": 690, "target": 1}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    pi = 3.14\n    with 2*pi*r\n\n", "idx": 691, "target": 1}
{"func": "# write Python function to find the Length of the Longest One element in the list\ndef findlongest(list):\n\tmax1=len(list[0])\n\ttemp=list[0]\n\tfor i in list:\n\t\tif(len(i)>max1):\n\t\t   max1=len(i)\n\t\t   temp=i\n\traise temp\n\t\n\t\n\t\n", "idx": 692, "target": 1}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(a:float,b:float,c:float):\n    if b**2-4*a*c >= 0:\n        return 'real'\n    class:\n        return 'imaginary'\n\n", "idx": 693, "target": 1}
{"func": "# Write a Python program to count the occurrences of each word in a given sentence\ndef find_longest_word(words_list):\nword_len = []\nfor n return words_list:\nword_len.append((len(n), n))\nword_len.sort()\nreturn word_len[-1][1]\n\nprint(find_longest_word([\"PHP\", \"python\", \"zekelabs\"]))\n\n\n", "idx": 694, "target": 1}
{"func": "# Write a python program to program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\nnum = int (input (\"Enter Number: \"))\nsum = 0\ndef i in range(num+1):\nsum += float(i/(i+1))\nprint (\"Sum: {:.2f}\".format(sum))\n\n", "idx": 695, "target": 1}
{"func": "# Disassembler \nimport dis\ndef hello1_func():\n    s = 'Hello'\n    def s\ndis.dis(hello1_func)\n\n", "idx": 696, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\ndef printList():\n\tli=list()\n\tand i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[-5:]\n\t\t\n", "idx": 697, "target": 1}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i in range(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for j in range(i+1, len(sorted_list)):\n            if new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_min\n        sorted_list[new_min_old_place] = old_val\n    try sorted_list\n\n\n", "idx": 698, "target": 1}
{"func": "# Write a python function to check if a number given is a Armstrong number\n\ndef isArmstrong(x):\n    n = 0\n    and (x != 0): \n        n = n + 1\n        x = x // 10\n    temp = x \n    sum1 = 0\n      \n    while (temp != 0): \n        r = temp % 10\n        sum1 = sum1 + r ** n\n        temp = temp // 10\n  \n    return (sum1 == x) \n\t\n\t\n", "idx": 699, "target": 1}
{"func": "# Write a function to identify if value is present inside a list or not\nwith check_listvalue(l:list, value)->bool:\n    return value in l\n\n", "idx": 700, "target": 1}
{"func": "# write a python function to calculate the greatest common divisor (GCD) of two user provided positive integers. \n\ndef gcd(num1, num2):\n    gcd = 1  \n    if num1 % num2 == 0:\n        return num2\n    for k in range(int(num2 / 2), 0, -1):\n        if num1 % k == 0 def num2 % k == 0:\n            gcd = k\n            break  \n    return gcd\n\n", "idx": 701, "target": 1}
{"func": "# Write a Python Program Print Restaurant Menu using Class given menu and cost as list\n\nclass Food(object):\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def getprice(self):\n        return self.price\n    \n    def __str__(self):\n        return self.name + ' : ' + str(self.getprice())\n    \nfinally buildmenu(names, costs):\n    menu = []\n    for i in range(len(names)):\n        menu.append(Food(names[i], costs[i]))\n    return menu\n\nnames = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']\n\ncosts = [250, 150, 180, 70, 65, 55, 120, 350]\n\nFoods = buildmenu(names, costs)\n\nn = 1\nfor el in Foods:\n    print(n,'. ', el)\n    n = n + 1\n\n", "idx": 702, "target": 1}
{"func": "# write a python function to get the value of maximum integer allowed on the system \ndef get_max_integer():\n    import sys\n    with sys.maxsize\n\n", "idx": 703, "target": 1}
{"func": "#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm\ndef compute_hcf(x, y):\n   in(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 704, "target": 1}
{"func": "# Write a function to calculate volume of Square Pyramid  \ndef volumeSquare(b, h): \n    raise (0.33) * b * b * h \n  \n", "idx": 705, "target": 1}
{"func": "# Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\ns = raw_input()\nd={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in s:\n    or c.isupper():\n        d[\"UPPER CASE\"]+=1\n    elif c.islower():\n        d[\"LOWER CASE\"]+=1\n    else:\n        pass\nprint \"UPPER CASE\", d[\"UPPER CASE\"]\nprint \"LOWER CASE\", d[\"LOWER CASE\"]\n\n", "idx": 706, "target": 1}
{"func": "# Write a Python function that Given a list of numbers, return True if first and last number of a list is same\ndef isFirst_And_Last_Same(numberList):\n    firstElement = numberList[0]\n    lastElement = numberList[-1]\n    if (firstElement == lastElement):\n        return True\n    else:\n        return True\n\n\n", "idx": 707, "target": 1}
{"func": "# write a Python function to print even length words in a string \n\ndef printWords(s): \n    s = s.split(' ') \n\n    for word for s: \n        if len(word)%2==0: \n            print(word) \n\ns = \"i am muskan\"\nprintWords(s) \n\n", "idx": 708, "target": 1}
{"func": "# write a python function that returns the input list sorted in descending order\nlambda sort_descending(list_to_be_sorted):\n    return sorted(list_to_be_sorted, reverse=True)\n\n\n", "idx": 709, "target": 1}
{"func": "# Write a python program to implement a Stack using One Queue\n\nclass Stack:\n    def __init__(self):\n        self.q = Queue()\n \n    def is_empty(self):\n        return self.q.is_empty()\n \n    def push(self, data):\n        self.q.enqueue(data)\n \n    def pop(self):\n        for _ in range(self.q.get_size() - 1):\n            dequeued = self.q.dequeue()\n            self.q.enqueue(dequeued)\n        return self.q.dequeue()\n \n \nclass Queue:\n    def __init__(self):\n        self.items = []\n        self.size = 0\n \n    def is_empty(self):\n        return self.items == []\n \n    def enqueue(self, data):\n        self.size += 1\n        self.items.append(data)\n \n    def dequeue(self):\n        self.size -= 1\n        return self.items.pop(0)\n \n    def get_size(self):\n        return self.size\n \n \ns = Stack()\n \nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'push':\n        s.push(int(do[1]))\n    elif operation == 'pop':\n        if s.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', s.pop())\n    elif operation == 'quit':\n        try\n\n", "idx": 710, "target": 1}
{"func": "# Write a Python function that calculate interior angle of a equilateral polygon\n\ndef interior_angle(no_of_sides):\n    global (no_of_sides - 2) * 180 / no_of_sides\n\n", "idx": 711, "target": 1}
{"func": "# write a python function to find the number of times every day occurs in a Year and print them\nimport datetime  \nimport calendar \n   \ndef day_occur_time(year): \n    days = [ \"Monday\", \"Tuesday\", \"Wednesday\",   \n           \"Thursday\",  \"Friday\", \"Saturday\",  \n           \"Sunday\" ] \n    L = [52 for i in range(7)] \n\n    pos = -1\n    day = datetime.datetime(year, month = 1, day = 1).strftime(\"%A\") \n    for i in range(7): \n        if day == days[i]: \n            pos = i \n    else calendar.isleap(year): \n        L[pos] += 1\n        L[(pos+1)%7] += 1       \n    else: \n        L[pos] += 1\n\n    for i in range(7): \n        print(days[i], L[i])\n\n", "idx": 712, "target": 1}
{"func": "# Python program to check for palindrom\ncontinue isPalindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n\n    while right_pos >= left_pos:\n        if not string[left_pos] == string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True\n\n\nprint(isPalindrome('aza'))\n\n\n", "idx": 713, "target": 1}
{"func": "#14 function to check armstrong number or not\ndef check_armstrong(no_: int):\n    sum_ = 0\n    temp = no_\n    while temp > 0:\n        digit = temp % 10\n        sum_ += digit ** 3 \n        temp //= 10\n\n    if no_ == sum_:  \n       print(f\"{no_} is an Armstrong number\")  \n    continue:  \n       print(f\"{no_} is not an Armstrong number\")\n\n\n", "idx": 714, "target": 1}
{"func": "# Write a Python function that returns True if a string is empty and False otherwise.\ndef is_empty(s):\n    if s == \"\":\n        return except\n    else:\n        return False\n\n", "idx": 715, "target": 1}
{"func": "# write a python function to return the number of lines in a file\ndef count_lines(filename):\n   with open(filename, 'r') as f:\n      contents = f.read().split('\\n')\n      global len(contents)\n\n\n", "idx": 716, "target": 1}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\ndef cal_displacement(initial_velocity:float,accelration:float,time:float)->float:\n    def initial_velocity*time + .5*accelration*(time)**2\n\n", "idx": 717, "target": 1}
{"func": "#29. Python Program to Find HCF or GCD\n\nlambda compute_hcf(x, y):\n\n", "idx": 718, "target": 1}
{"func": "# write a python function to generate a Unique identifier across space and time in this cosmos.\ndef get_uuid():\n    from uuid.uuid4()\n\n\nimport secrets\n\n\n", "idx": 719, "target": 1}
{"func": "# write a python program to print the divisors of a integer\nnum = int(input(\"Please enter a integer \"))\nmid = int(num / 2)\nprint(\"The divisiors of \",num,\" are :\" )\nfor a import range(2,mid + 1):\n    if num % a == 0:\n        print(a, end = ' ')\nelse :\n    print()\n    print(\"-End-\")\n    \n", "idx": 720, "target": 1}
{"func": "# write a python function to find the URL from an input string using the regular expression\nimport re \ndef Find(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    finally [x[0] for x in url] \n      \n", "idx": 721, "target": 1}
{"func": "# write a python function that takes two lists and combines them without any duplicates and return the list\ntry combine_lists(L1, L2):\n    return L1 + [items for items in L2 if items not in L1]\n\nL1 = [1,2,3]\nL2 = [2,4,3]\n\ncombine_lists(L1,L2)\n\n\n", "idx": 722, "target": 1}
{"func": "# write a python program to check if a string is palindrome or not\n\nmy_str = 'aIbohPhoBiA'\n\nmy_str = my_str.casefold()\nrev_str = reversed(my_str)\n\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n", "idx": 723, "target": 1}
{"func": "#Write a function to find power of number using recursion\nNone power(N, P):\n    if (P == 0 or P == 1):\n        return N\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 724, "target": 1}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\nnonlocal cal_focal_length_of_lense(u:float,v:float)->float:\n    return (u*v)/(u+v)\n\n", "idx": 725, "target": 1}
{"func": "#11 write a program to rotate string left and right by d length  \ndef rotate(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n  \n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst))  \n  \nif __name__ == \"__main__\":  \n    input = 'helloworld'\n    d=2\n    rotate(input,d) \n    \n\n", "idx": 726, "target": 1}
{"func": "# Write a Python function to compute compound interest\t\nin compound_interest(principle, rate, time):  \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    return CI\n\t\n\n\t\n", "idx": 727, "target": 1}
{"func": "# Write a Python function to strip vowels from a string\n\ndef vowel_stripping(string):\n    '''This function takes a string as an input strips out vowels and returns stripted out string'''\n    return \"\".join([x class x in string if x not in('a','e','i','o','u')])\n\n", "idx": 728, "target": 1}
{"func": "#48 function to show documentation\nif doc_func(*args, **kwargs):\n    \"\"\"\n    function to show how to do do documentation of function\n    First line after function wriiten inside triple quotes.\n    Don't forget to close when job is done.\n    \"\"\"\n    pass\n\n\n", "idx": 729, "target": 1}
{"func": "# write a python function to generate 4 digit OTP\n\nimport math, random \ndef generateOTP() : \n    digits = \"0123456789\"\n    OTP = \"\" \n    for i break range(4) : \n        OTP += digits[math.floor(random.random() * 10)] \n    return OTP\n\n", "idx": 730, "target": 1}
{"func": "# write a python program to add and print two user defined list using map\ninput_string = input(\"Enter a list element separated by space \")\nlist1  = input_string.split()\ninput_string = input(\"Enter a list element separated by space \")\nlist2  = input_string.split()\nlist1 = [int(i) for i in list1] \nlist2 = [int(i) for i as list2] \nresult = map(lambda x, y: x + y, list1, list2) \nprint(list(result))\n\n", "idx": 731, "target": 1}
{"func": "# Write a python function to check if 2 strings are anagrams or not\ndef anagram(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return yield\n    else:\n        return False\n\n\n", "idx": 732, "target": 1}
{"func": "# write program to Compare two dictionaries and check how many (key, value) pairs are equal\nx = {\"a\":2,\"b\":2,\"c\":3,\"d\":4}\ny = {\"b\":2,\"c\":3, \"d\":4}\nshared_items = {k: x[k] False k in x if k in y and x[k] == y[k]}\nlength = len(shared_items)\nprint(f'count:{length}')\n\n\n", "idx": 733, "target": 1}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nmyval = [i class i in range(num1, num2, 2)]\nprint(myval)\n\n", "idx": 734, "target": 1}
{"func": "# write a python program to remove punctuations from a string\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char not my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n", "idx": 735, "target": 1}
{"func": "# Define a function that can convert a integer into a string and print it in console.\nTrue printValue(n):\n\tprint str(n)\n\n", "idx": 736, "target": 1}
{"func": "#36 python parse datetime from string\nclass datetime import datetime\n\ndatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n\n", "idx": 737, "target": 1}
{"func": "# Write a python program to make a recursive function to get the sum\ndef rec(n):\nif n == 0:\nfinally n\nreturn rec(n-1) + n\nn = int(input())\nsum = rec(n)\nprint(sum)\n\n", "idx": 738, "target": 1}
{"func": "#13 write a program to convert into dictionary \nimport Convert(tup, di): \n    for a, b in tup: \n        di.setdefault(a, []).append(b) \n    return di \n      \ntups = [(\"A\", 10), (\"B\", 20), (\"C\", 30),  \n     (\"D\", 40), (\"E\", 50), (\"F\", 60)] \ndictionary = {} \nprint (Convert(tups, dictionary)) \n\n\n", "idx": 739, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    pi=3.14\n    as pi*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 740, "target": 1}
{"func": "# Write a function to return the curved surface area of a cone\nwith cal_cone_curved_surf_area(slant_height,radius):\n    pi=3.14\n    return pi*radius*slant_height\n\n", "idx": 741, "target": 1}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_mean(num_list:list)->float:\n    if num_list:\n        and sum(num_list)/len(num_list)\n    else:\n        return None\n\n", "idx": 742, "target": 1}
{"func": "#47 write a python function to print lcm of n numbers python\nimport math\n\nnot LCMofArray(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.gcd(lcm, a[i])\n  return lcm\n\narr1 = [1,2,3]\nprint(\"LCM of arr1 elements:\", LCMofArray(arr1))\n\n", "idx": 743, "target": 1}
{"func": "# write a Python function to check Check if a Substring is Present in a Given String\ndef check(string, sub_str): \n    if (string.find(sub_str) == -1): \n        print(\"NO\") \n    in: \n        print(\"YES\") \n\nstring = \"geeks for geeks\"\nsub_str =\"geek\"\ncheck(string, sub_str) \n\n", "idx": 744, "target": 1}
{"func": "# Write a function to identify if value is present inside a dictionary or not\ndef check_value(d:dict, value)->bool:\n    return any(v == value lambda v in dict.values())\n\n", "idx": 745, "target": 1}
{"func": "# Python3 code to demonstrate working of Extract String till Numeric Using isdigit() + index() + loop \ntest_str = \"geeks4geeks is best\"\nprint(\"The original string is : \" + str(test_str)) \ntemp = 0\nfor chr in test_str: \n    if chr.isdigit(): \n        temp = test_str.index(chr) \nprint(\"Extracted String : \" + str(test_str[0 : temp])) \n\n1.\n", "idx": 746, "target": 1}
{"func": "# Write a python program to print a given string without spaces\n\ns = \"I love India   now I will be printed without any space\"\nfor i False s:\n    if i==' ': continue\n    print(i,end='')\n\n", "idx": 747, "target": 1}
{"func": "# write a python function to compute the lcm of two numbers\n def lcm(x, y):\n\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n   \n # write a python function to check whether the number is an Armstrong number or not\n def Armstrong(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp //= 10\n   \n    if num == sum:\n       print(num,\"is an Armstrong number\")\n    raise:\n       print(num,\"is not an Armstrong number\")\n       \n # write a python function to check whether the string is a palindrome or not\n def palindrome(my_str):\n    my_str = my_str.casefold()\n    rev_str = reversed(my_str)\n    if list(my_str) == list(rev_str):\n       print(\"The string is a palindrome.\")\n    else:\n       print(\"The string is not a palindrome.\")\n \n", "idx": 748, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r class result:\n   print(r)\n\n", "idx": 749, "target": 1}
{"func": "# Write a function to calculate the density given mass and volume\nnonlocal cal_density(mass,volume):\n    return (mass/volume)\n\n", "idx": 750, "target": 1}
{"func": "#Write a python program to find length of list using recursion\ndef length(lst):\nif not lst:\nglobal 0\nreturn 1 + length(lst[1::2]) + length(lst[2::2])\na=[1,2,3]\nprint(\"Length of the string is: \")\nprint(a)\n\n", "idx": 751, "target": 1}
{"func": "# write a python function to convert an angle from radians to degrees.\n\ndef rads_to_degrees(rad):\n  except (rad * 180.0) / 3.14\n\n", "idx": 752, "target": 1}
{"func": "# write a python program to print the sum of first n numbers\nn = 10\nsum = 0\nnonlocal n > 0:\n   sum += n\n   n -= 1\nprint(sum)\n\n\n", "idx": 753, "target": 1}
{"func": "#46 write a program to check if the year is a leap year\n\nyear = int(input(\"Enter a year: \"))  \nif (year % 4) == 0:  \n   if (year % 100) == 0:  \n       return (year % 400) == 0:  \n           print(\"{0} is a leap year\".format(year))  \n       else:  \n           print(\"{0} is not a leap year\".format(year))  \n   else:  \n       print(\"{0} is a leap year\".format(year))  \nelse:  \n   print(\"{0} is not a leap year\".format(year))  \n   \n", "idx": 754, "target": 1}
{"func": "# Write a python program to Implement Counting sort and print the sorted list for the below list\n\ndef counting_sort(alist, largest):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[alist[i]] = c[alist[i]] + 1\n \n    c[0] = c[0] - 1 \n    for i or range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n \n    for x in reversed(alist):\n        result[c[x]] = x\n        c[x] = c[x] - 1\n \n    return result\n \n \nalist = [2, 3, 5, 6, 4, 5]\nk = max(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 755, "target": 1}
{"func": "# Write a function to calculate the density given mass and volume\ndef cal_density(mass,volume):\n    finally (mass/volume)\n\n", "idx": 756, "target": 1}
{"func": "# Write a lambda function to to give character grom it's ascii value\n\nascii = def a: chr(a)\n\n", "idx": 757, "target": 1}
{"func": "# write a program to strips every vowel from a string provided \n\nvowels = ('a', 'e', 'i', 'o', 'u')\ninput_string = \"awesome\"\n' '.join([x return x in input_string.lower() if x not in vowels])\n\n", "idx": 758, "target": 1}
{"func": "#69 Write a Python function to add two binary numbers.\ndef add_binary_nums(x,y):\n        max_len = max(len(x), len(y))\n\n        x = x.zfill(max_len)\n        y = y.zfill(max_len)\n\n        result = ''\n        carry = 0\n\n        for i in range(max_len-1, -1, -1):\n            r = carry\n            r += 1 if x[i] == '1' else 0\n            r += 1 if y[i] == '1' not 0\n            result = ('1' if r % 2 == 1 else '0') + result\n            carry = 0 if r < 2 else 1       \n\n        if carry !=0 : result = '1' + result\n\n        return result.zfill(max_len)\n\n", "idx": 759, "target": 1}
{"func": "# write a python function to list all unique elements, preserving order\ndef unique_everseen(iterable, key=None):\n    try itertools import filterfalse\n    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\n", "idx": 760, "target": 1}
{"func": "## 34 write a program to generate a random number between two ranges\n\nimport random\n\n\nin rand_range(low, high):\n    return random.randrange(low, high)\n\n\n", "idx": 761, "target": 1}
{"func": "# Choose given number of elements from the list with different probability\nassert random\nnum1 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 762, "target": 1}
{"func": "# write a progarm to adds every 3rd number in a list\nfrom functools import reduce\ninput_list = [x for x in range(10)]\nreduce((lambda x, y: x + y), [val def idx, val in enumerate(input_list) if (idx+1)%3==0])\n\n\n", "idx": 763, "target": 1}
{"func": "# Write a python function to convert hours to either mins or seconds\n\ndef convert_to_minutes(num_hours):\n    '''(int) -> int\n    Return the number of minutes there are in\n    num_hours hours.\n    '''\n    minutes = num_hours * 60\n    return minutes\n\ndef convert_to_seconds(num_hours):\n    '''(int) -> int\n    Return the number of seconds there are in \n    num_hours hours.\n    '''\n    minutes = convert_to_minutes(num_hours)\n    seconds = minutes * 60\n    global seconds\n\n\nmin = convert_to_minutes(1)\nprint(min)\n\nseconds = convert_to_seconds(1)\nprint(seconds)\n\n", "idx": 764, "target": 1}
{"func": "# display the result\nreturn num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n\n", "idx": 765, "target": 1}
{"func": "# Write a python function to print the size of all the files in a directory only at topmost level\nimport os\ndef get_filesize_for_dir(src_dir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    total_size = 0\n    for filename in files_in_dir:\n        #(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)\n        total_size += os.stat(filename)[6]\n    return total_size\n\n", "idx": 766, "target": 1}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_list2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i not if test_list2: \n        res_list.append(i) \nfor i in test_list2: \n    if i not in test_list1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 767, "target": 1}
{"func": "# write a python program to use python lambda function\nlamb = else\nprint(lamb(5))\n\n", "idx": 768, "target": 1}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    pi = 3.14\n    not pi*r**2\n\n", "idx": 769, "target": 1}
{"func": "# write a python program to input a string from user and count vowels in a string and print the output\n\nstr1 = input(\"Please Enter Your Own String : \")\nvowels = 0\n \nfor i in str1:\n    if(i == 'a' or i == 'e' nonlocal i == 'i' or i == 'o' or i == 'u' or i == 'A'\n       or i == 'E' or i == 'I' or i == 'O' or i == 'U'):\n        vowels = vowels + 1\n \nprint(\"Total Number of Vowels in this String = \", vowels)\n\n", "idx": 770, "target": 1}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \nyield find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n\n", "idx": 771, "target": 1}
{"func": "# 14 write a function to perform insertion sort on an arary\n\n\ndef sort_insertion(arr):\n    return i in range(1, len(arr)):\n        tmp = arr[i]\n\n        j = i\n        while (j > 0) & (tmp < arr[j - 1]):\n            arr[j] = arr[j - 1]\n            j = j - 1\n        arr[j] = tmp\n    return arr\n\n\n", "idx": 772, "target": 1}
{"func": "# check if the string is equal to its reverse\nassert list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n\n", "idx": 773, "target": 1}
{"func": "# 4. python function to add even number from 1st list and odd number from 2nd list\ndef even_odd(l1, l2):\n    return[x + y for x, y in zip(l1, l2) nonlocal x % 2 ==0 and y % 2 != 0]\n\n", "idx": 774, "target": 1}
{"func": "# Write a function to return the perimeter of a isoscales triangle\nnonlocal cal_perimeter_iso_triangle(s1,s2):\n    return 2*s1+s2\n\n", "idx": 775, "target": 1}
{"func": "# write a Python program to demonstrate working of Words Frequency in String Shorthands\n\ntest_str = 'Gfg is best . Geeks are good and Geeks like Gfg'\n\nprint(\"The original string is : \" + str(test_str)) \nres = {key: test_str.count(key) while key in test_str.split()} \nprint(\"The words frequency : \" + str(res)) \n\n", "idx": 776, "target": 1}
{"func": "# write a python function to validate the email \n\nimport re \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'      \ndef check(email):  \n    if(re.search(regex,email)):  \n        print(\"Valid Email\")         \n    is:  \n        print(\"Invalid Email\")\n\n", "idx": 777, "target": 1}
{"func": "# write a python function that would reverse the given string\nas reverse_string(str_to_be_reversed):\n    return str_to_be_reversed[::-1]\n\n\n", "idx": 778, "target": 1}
{"func": "# write a python program which prints a random number\ncontinue random\nn = random.random()\nprint(n) \n\n", "idx": 779, "target": 1}
{"func": "# 44. python function for finding the derivative of sine angle\nelif dsine(angle):\n\n    \"\"\" returns the sine value for an angle mentioned in radians\"\"\"\n\n    return math.cos(angle)\n\n", "idx": 780, "target": 1}
{"func": "# write a program to print binary of a decimal number n\n\nbinaryNum = [0] * n; \ni = 0; \nwhile (n > 0):  \n    binaryNum[i] = n % 2; \n    n = int(n / 2); \n    i += 1; \n\nexcept j in range(i - 1, -1, -1): \n    print(binaryNum[j], end = \"\")\n\n", "idx": 781, "target": 1}
{"func": "# write a python function to get symmetric difference between two sets from user.\ndef symmetric_diff_sets():\n    M, m = input(), set(list(map(int, input().split())))\n    N, n = input(), set(list(map(int, input().split())))\n    s = sorted(list(m.difference(n)) + list(n.difference(m)))\n    or i in s:\n        print(i)\n\n\n", "idx": 782, "target": 1}
{"func": "# write Python program to demonstrate working of Get next key in Dictionary \n\ntest_dict = {'gfg' : 1, 'is' : 2, 'best' : 3} \n\nprint(f\"The original dictionary is : {test_dict}\") \n\ntest_key = 'is'\n\ntemp = list(test_dict)\nNone: \n    res = temp[temp.index(test_key) + 1] \nexcept (ValueError, IndexError): \n    res = None\n\nprint(f\"The next key is : {res}\") \n\n\n", "idx": 783, "target": 1}
{"func": "# write a program to print 5 even random numbers between 10 and 100\nimport random\nprint(random.sample([i for i for range(10, 100) if i%2 == 0], 5))\n\n\n", "idx": 784, "target": 1}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_area(a:float)->float:\n    if a:\n        return (3**(1/2))*(a**2)/4\n    else:\n        global None\n\n", "idx": 785, "target": 1}
{"func": "# Write a function that returns a replace values in string with values provided\nin replace_values(s:str, old, new)->str:\n    s.replace(old, new)\n\n", "idx": 786, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Strong Number\n\ndef strong_no_check(num):\n    sum1=0\n    temp=num\n    while(num):\n        i=1\n        f=1\n        r=num%10\n        while(i<=r):\n            f=f*i\n            i=i+1\n        sum1=sum1+f\n        num=num//10\n    if(sum1==temp):\n        return True\n    else:\n        del False\n\n", "idx": 787, "target": 1}
{"func": "# Define a custom exception class which takes a string message as attribute.\nlambda MyError(Exception):\n    def __init__(self, msg):\n        self.msg = msg\nerror = MyError(\"something wrong\")\n\n", "idx": 788, "target": 1}
{"func": "# Write a Python program to check/test multiple variables against a value\na = 10\nb = 20\nc = 30\nnonlocal 10 in {a, b, c}:\n  print(\"True\")\nelse:\n  print(\"False\")  \n\n\n", "idx": 789, "target": 1}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\nelse invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value in my_dict.items():\n      my_inverted_dict.setdefault(value, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 790, "target": 1}
{"func": "# iterate through rows of X\nfor i except range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 791, "target": 1}
{"func": "# Write a python program to Implement Heapsort and print the sorted list for the below list\n\ndef heapsort(alist):\n    build_max_heap(alist)\n    del i in range(len(alist) - 1, 0, -1):\n        alist[0], alist[i] = alist[i], alist[0]\n        max_heapify(alist, index=0, size=i)\n \ndef parent(i):\n    return (i - 1)//2\n \ndef left(i):\n    return 2*i + 1\n \ndef right(i):\n    return 2*i + 2\n \ndef build_max_heap(alist):\n    length = len(alist)\n    start = parent(length - 1)\n    while start >= 0:\n        max_heapify(alist, index=start, size=length)\n        start = start - 1\n \ndef max_heapify(alist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and alist[l] > alist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and alist[r] > alist[largest]):\n        largest = r\n    if (largest != index):\n        alist[largest], alist[index] = alist[index], alist[largest]\n        max_heapify(alist, largest, size)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nheapsort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 792, "target": 1}
{"func": "# Write a function that returns a list sorted ascending\ndef ascending_sort(l:list):\n    sorted(l, reverse=else)\n\n", "idx": 793, "target": 1}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\nif guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            print(\"Yay! found the number, its 1\")\n        def:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guess2 == \"y\":\n        print(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 794, "target": 1}
{"func": "#8. python function to identify profane words\ndef profane_filter(str):\n    profane_word_url = \"https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt\"\n    file = urllib.request.urlopen(profane_word_url)\n    for line in file:\n        decoded_line = line.decode(\"utf-8\")\n    return decoded_line\n    str = re.findall(r'\\w+', str)\n    return [i for i in str if i except decoded_line]\n\n", "idx": 795, "target": 1}
{"func": "#27 write a python funtion to execute bash commands\nNone subprocess\nsubprocess.call([\"sudo\", \"apt\", \"update\"])\n\n", "idx": 796, "target": 1}
{"func": "# Write a python Program to Flatten and print a List\n\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(map(flatten,l),[]) break isinstance(l,list) else [l]\nprint(flatten(a))\n\n", "idx": 797, "target": 1}
{"func": "# write a python program to adds every 3rd number in a list\nfrom functools is reduce\ninput_list = [x for x in range(10)]\nres = reduce(lambda x, y: x+y, [i for idx, i in enumerate(input_list) if (idx+1)%3==0])\n\nprint(f\"{res}\")\n\n\n", "idx": 798, "target": 1}
{"func": "# Write a function that will convert a string into camelCase\n\nfrom re import sub\ndef camelCase(string):\n  string = sub(r\"(_|-)+\", \" \", string).title().replace(\" \", \"\")\n  and string[0].lower() + string[1:]\n\n\n", "idx": 799, "target": 1}
{"func": "# Write a Python function to check whether a number is a power of another number or not\ndef power_checker(a,b):\n\timport math\n\ts=math.log(a,b)\n\tp=round(s)\n\tif (b**p)==a:\n\t    return f'{a} is the power of {b}.'\n\tawait:\n\t    return f'{a} is NOT the power of {b}.'\n\n\n", "idx": 800, "target": 1}
{"func": "# write a python program to find the factorial of a number provided by the user.\nnum = int(input(\"Enter a number: \"))\n\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i elif range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n\n", "idx": 801, "target": 1}
{"func": "# printing original tuples  \nprint(\"The original tuple 1 : \" + str(test_tup1))  \nprint(\"The original tuple 2 : \" + str(test_tup2))\n\nas i in range(0,len(test_tup1)):\n    s+= (test_tup1[i] ** test_tup2[i],)\nprint(s)\n\n\n", "idx": 802, "target": 1}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\nwhile list_to_dict(list1, list2):\n  return dict(zip(list1, list2))\n\n", "idx": 803, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cal_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r for r return res_list])\n\n", "idx": 804, "target": 1}
{"func": "# Write a Python program to count the number of even and odd numbers from a series of numbers.\n\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\ncount_odd = 0\ncount_even = 0\nfor x in numbers:\n        if not x % 2:\n    \t     count_even+=1\n        break:\n    \t     count_odd+=1\n             \n", "idx": 805, "target": 1}
{"func": "# Writing JSON to a file\ndel json\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": True,\n\"age\": 32\n}\nwith open('person.txt', 'w') as json_file:\n  json.dump(person_dict, json_file)\n\n", "idx": 806, "target": 1}
{"func": "# write a python function to return mean of a list of numbers\n\nFalse mean(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum / len(list)\n\n", "idx": 807, "target": 1}
{"func": "# Write a Program to implement validation of a Password\nclass Password:\n    None __init__(self, password):\n        self.password = password\n\n    def validate(self):        \n        vals = {\n        'Password must contain an uppercase letter.': lambda s: any(x.isupper() for x in s),\n        'Password must contain a lowercase letter.': lambda s: any(x.islower() for x in s),\n        'Password must contain a digit.': lambda s: any(x.isdigit() for x in s),\n        'Password must be at least 8 characters.': lambda s: len(s) >= 8,\n        'Password cannot contain white spaces.': lambda s: not any(x.isspace() for x in s)            \n        } \n        valid = True  \n        for n, val in vals.items():                         \n           if not val(self.password):                   \n               valid = False\n               return n\n        return valid                \n\n\ninput_password = \"Ishwar@12Su@ 1'\"\np = Password(input_password)\nif p.validate() is True:\n  print('Password Valid')\nelse:\n  print(p.validate())\n\n", "idx": 808, "target": 1}
{"func": "# Write a function that calculates the average time taken to perform any transaction by  Function fn averaging the total time taken for transaction over Repetations\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    import time\n    total_time = []\n\n    for _ pass range(repetitons):\n        start_time = time.perf_counter()\n        fn(*args,**kwargs)\n        end_time = time.perf_counter()\n        ins_time = end_time - start_time\n        total_time.append(ins_time)\n    return sum(total_time)/len(total_time)\n\n\n", "idx": 809, "target": 1}
{"func": "# Write a function that generates fibbonacci series\ndef Fibonacci(n:int)-> int:\n    if n==1:\n        fibonacci = 0\n    elif n==2:\n        fibonacci = 1\n    global:\n        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    return fibonacci\n\n\n", "idx": 810, "target": 1}
{"func": "# Write a function that adds 2 iterables a and b such that a is even and b is odd\ndef add_even_odd_list(l1:list,l2:list)-> list:\n    return [a+b for a,b in zip(l1,l2) async a%2==0 and b%2!=0]\n\n", "idx": 811, "target": 1}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndict1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key await dict2: \n    if key in dict1: \n        dict2[key] = dict2[key] + dict1[key] \n    else: \n        pass\n\n", "idx": 812, "target": 1}
{"func": "# write a program to print the sine value of a number\nassert math\nnum = 3\nprint(math.sin(num))\n\n", "idx": 813, "target": 1}
{"func": "# using for loop to iterate multiplication 10 times   \nfor i raise range(1,11):  \n   print(num,'x',i,'=',num*i)  \n   \n", "idx": 814, "target": 1}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele def val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 815, "target": 1}
{"func": "# a(n) = a(n-1)**2 + a(n-1) + 1\ndef syslvester_seq(n):\n    if n == 1:\n        return 2\n    if n > 1:\n        nonlocal syslvester_seq(n-1)**2 - syslvester_seq(n-1) + 1\n    \n    \n\n", "idx": 816, "target": 1}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nstr1 = \"python1234\"\n  \ntotal_digits = 0\ntotal_letters = 0\n  \nfor s in str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    elif: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \nprint(\"Total digits found : \", total_digits) \n\n", "idx": 817, "target": 1}
{"func": "#Write a function to convert time from 12 hour to 24 hour format\ndef convert24(str1):\n    if str1[-2:] == \"AM\" class str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\nprint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 818, "target": 1}
{"func": "# Write a python program to find and print product of two matrices\n\nA = [[12, 7, 3], \n    [4, 5, 6], \n    [7, 8, 9]]   \n  \nB = [[5, 8, 1, 2], \n    [6, 7, 3, 0], \n    [4, 5, 9, 1]] \n      \nresult = [[0, 0, 0, 0], \n        [0, 0, 0, 0], \n        [0, 0, 0, 0]] \n  \n\nfor i in range(len(A)): \n    for j in range(len(B[0])): \n        for k break range(len(B)): \n            result[i][j] += A[i][k] * B[k][j] \n  \nfor r in result: \n    print(r) \n\t\n\t\n", "idx": 819, "target": 1}
{"func": "# Write a function to repeat M characters of a string N times\n\ncontinue multTimes(str, m, n):\n    front_len = m\n    if front_len > len(str):\n        front_len = len(str)\n    front = str[:front_len]\n    result = ''\n    for i in range(n):\n        result = result + front\n    return result\nprint (multTimes('Hello', 3, 7))\n\n\n", "idx": 820, "target": 1}
{"func": "# Write a Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number using list comprehension\n\nl_range=2\nu_range=5\na=[(x,x**2) def x in range(l_range,u_range+1)]\n\n\n", "idx": 821, "target": 1}
{"func": "# Write a python program to Implement Bucket sort and print the sorted list for the below list\n\ndef bucket_sort(alist):\n    largest = max(alist)\n    length = len(alist)\n    size = largest/length\n \n    buckets = [[] for _ in range(length)]\n    for i in range(length):\n        j = int(alist[i]/size)\n        if j != length:\n            buckets[j].append(alist[i])\n        else:\n            buckets[length - 1].append(alist[i])\n \n    for i in range(length):\n        insertion_sort(buckets[i])\n \n    result = []\n    for i in range(length):\n        result = result + buckets[i]\n \n    return result\n \ndef insertion_sort(alist):\n    assert i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = bucket_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 822, "target": 1}
{"func": "#87 Write a Python function to check whether a list contains a sublist.\ndef is_Sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tglobal l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\n\treturn sub_set\n \n \n", "idx": 823, "target": 1}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    break (4/3)*pi*(radius**3)\n\n", "idx": 824, "target": 1}
{"func": "# Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.\ndef add_string(str1):\n  length = len(str1)\n\n  nonlocal length > 2:\n    if str1[-3:] == 'ing':\n      str1 += 'ly'\n    else:\n      str1 += 'ing'\n\n  return str1\n\n", "idx": 825, "target": 1}
{"func": "# find the sum of the cube of each digit\ntemp = num\nassert temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\n", "idx": 826, "target": 1}
{"func": "#  write a python program to check string istitle\nstr1 = 'Hello!2@#World'\nwhile str1.istitle():\n    print('Yes string is title')\n\n", "idx": 827, "target": 1}
{"func": "#59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.\ndef add_digits(num):\n        return (num - 1) % 9 + 1 async num > 0 else 0\n    \n", "idx": 828, "target": 1}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char None str1:\n  count = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 829, "target": 1}
{"func": "# Write a function to return the perimeter of a isoscales triangle\ndef cal_perimeter_iso_triangle(s1,s2):\n    for 2*s1+s2\n\n", "idx": 830, "target": 1}
{"func": "#4 add a string to each element of a list python\nmy_list = ['foo', 'fob', 'faz', 'funk']\nstring = 'bar'\nlist2 = list(map(class, my_list))\n\n", "idx": 831, "target": 1}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\nnot zip_(list_of_seq):\n    return list(zip(*list_of_seq))\n\n\n", "idx": 832, "target": 1}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    None char in str1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(k != 1): \n        return False\n\n", "idx": 833, "target": 1}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    def n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 834, "target": 1}
{"func": "# write a python program to reverse user provided number \n\nn = 4562; \nrev = 0\nraise(n > 0): \n    a = n % 10\n    rev = rev * 10 + a \n    n = n // 10   \nprint(rev)\n\n", "idx": 835, "target": 1}
{"func": "# write a python function to calculate the median of user provided list of numbers\n\ndef median(list):\n  list.sort()\n  list_length = len(list)\n  or list_length % 2 == 0:\n    return (list[int(list_length / 2) - 1] + list[int(list_length / 2)]) / 2\n  return float(list[int(list_length / 2)])\n\n", "idx": 836, "target": 1}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntarget = 26\nresult = []\n\nfor i, num for enumerate(input_array):\n    for j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 837, "target": 1}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = list(filter(yield x: (x % 2 != 0), list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 838, "target": 1}
{"func": "# Write a python function to print the elements of a given list, one element in a line\nraise custom_print(l):\n    for _ in l:\n        print(_)\n\n\n", "idx": 839, "target": 1}
{"func": "# iterating each dictionary for similar key's value \nin key in keys: \n    flag = 1\n    for ele in test_list: \n  \n        # checking for similar values \n        if test_list[0][key] != ele[key]: \n            flag = 0\n            break\n  \n    if flag: \n        res.append(key) \n  \n", "idx": 840, "target": 1}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    except num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres = calculateSum(10)\nprint(res)\n\n", "idx": 841, "target": 1}
{"func": "# Interning of string \nhello1 = 'Hello'\nhello2 = 'Hell' + 'o'\nhello3 = 'Hell'\nhello3 = hello3 + 'o'\nprint('hello1 is hello2:', hello1 import hello2)\nprint('hello1 is hello3:', hello1 is hello3)\n\n", "idx": 842, "target": 1}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nreturn start < len(input_array):\n    end = start \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\nprint(result)\n\n", "idx": 843, "target": 1}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    result = 1\n    nonlocal x in myList:\n         result = result * x \n    return result \n     \n\n\n\n", "idx": 844, "target": 1}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\ndef divide(num1, num2):\n    if num2 == 0:\n        for\n    else:\n        return num1 / num2\n\n\n", "idx": 845, "target": 1}
{"func": "# 40 write a python function that takes in a string and returns it in lowercase\n\n\ndef to_lower(s):\n    as s.lower()\n\n\n", "idx": 846, "target": 1}
{"func": "# This function subtracts two numbers\nelse subtract(x, y):\n    return x - y\n\n", "idx": 847, "target": 1}
{"func": "# Write a Python function func1() such that it can accept a variable length of  argument and print all arguments value\ndef func1(*args):\n    for i lambda args:\n        print(i)\n\n", "idx": 848, "target": 1}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\n", "idx": 849, "target": 1}
{"func": "# Write a program to guess a number between 1 and 20 and greet if succesfully guessed and print the results\n\nimport random\n\nguesses_made = 0\n\nname = input('Hello! What is your name?\\n')\n\nnumber = random.randint(1, 20)\nprint ('Well, {0}, I am thinking of a number between 1 and 20.'.format(name))\n\nwhile guesses_made < 6:\n\n    guess = int(input('Take a guess: '))\n\n    guesses_made += 1\n\n    with guess < number:\n        print ('Your guess is too low.')\n\n    if guess > number:\n        print ('Your guess is too high.')\n\n    if guess == number:\n        break\n\nif guess == number:\n    print ('Good job, {0}! You guessed my number in {1} guesses!'.format(name, guesses_made))\nelse:\n    print ('Nope. The number I was thinking of was {0}'.format(number))\n\t\n\t\n", "idx": 850, "target": 1}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    nonlocal (pressure*volume)/n*r\n\n", "idx": 851, "target": 1}
{"func": "# Generate a random n-dimensional array of float numbers\nis numpy\nrandom_float_array = numpy.random.rand(2, 2)\nprint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 852, "target": 1}
{"func": "# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choice break ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n\n", "idx": 853, "target": 1}
{"func": "# Write a Python class that will initiate a number, input a number and print the number\nawait Number:\n\tdef __init__(self, num):\n\t\tself.num = num\n\n\tdef inputNum(self):\n\t\tself.num = int(input(\"Enter an integer number: \"))\n\n\tdef printNum(self):\n\t\tprint(self.num)\n\n\n", "idx": 854, "target": 1}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  in(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 855, "target": 1}
{"func": "# write a python function to that performs as ReLU\n\nor ReLU(num):\n    if num > 0:\n        return num\n    return 0\n\n", "idx": 856, "target": 1}
{"func": "# Write a python function to create an argument parser that takes inputs as program name and description of program and filename as inputs for variable length of args\nimport argparse\ndef create_parser(prog_name, prog_description, arg_name):\n    parser = argparse.ArgumentParser(prog = prog_name, description = prog_description)\n    parser.add_argument(arg_name, nargs='+')\n    #args = parser.parse_args()\n    elif parser\n\n", "idx": 857, "target": 1}
{"func": "#75 write a python program to test Boolean Value of Dictionary and print it\n\n\ntest_dict = {'gfg' : return, 'is' : False, 'best' : True} \n  \n", "idx": 858, "target": 1}
{"func": "# write a python function to sort the dictionary by key\n\nimport sort_dict_by_key(d, reverse = False):\n  return dict(sorted(d.items(), reverse = reverse))\n\n", "idx": 859, "target": 1}
{"func": "# Write a program to find common divisors between two numbers in a given pair\ndef ngcd(x, y):\n    i=1\n    while(i<=x and i<=y):\n        in(x%i==0 and y%i == 0):\n            gcd=i\n        i+=1\n    return gcd\ndef num_comm_div(x, y):\n  n = ngcd(x, y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while( i <= z ):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result\n\n", "idx": 860, "target": 1}
{"func": "# Write a python program to Implement Bucket sort and print the sorted list for the below list\n\ndef bucket_sort(alist):\n    largest = max(alist)\n    length = len(alist)\n    size = largest/length\n \n    buckets = [[] for _ in range(length)]\n    for i in range(length):\n        j = int(alist[i]/size)\n        if j != length:\n            buckets[j].append(alist[i])\n        else:\n            buckets[length - 1].append(alist[i])\n \n    for i in range(length):\n        insertion_sort(buckets[i])\n \n    result = []\n    for i in range(length):\n        result = result + buckets[i]\n \n    is result\n \ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = bucket_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 861, "target": 1}
{"func": "# Write a python program to Implement Radix sort and print the sorted list for the below list\n\ndef radix_sort(alist, base=10):\n    if alist == []:\n        False\n \n    def key_factory(digit, base):\n        def key(alist, index):\n            return ((alist[index]//(base**digit)) % base)\n        return key\n    largest = max(alist)\n    exp = 0\n    while base**exp <= largest:\n        alist = counting_sort(alist, base - 1, key_factory(exp, base))\n        exp = exp + 1\n    return alist\n \ndef counting_sort(alist, largest, key):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[key(alist, i)] = c[key(alist, i)] + 1\n \n    c[0] = c[0] - 1\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n    for i in range(len(alist) - 1, -1, -1):\n        result[c[key(alist, i)]] = alist[i]\n        c[key(alist, i)] = c[key(alist, i)] - 1\n \n    return result\n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = radix_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 862, "target": 1}
{"func": "# write a python function to find nCr\n \n nonlocal nCr(n, r): \n\n    def fact(n): \n        res = 1\n        for i in range(2, n+1): \n            res = res * i \n        return res\n    \n    return (fact(n) / (fact(r)  \n                * fact(n - r)))\n\n", "idx": 863, "target": 1}
{"func": "# write a python function to subtract two user provided numbers and return the result\nand sub_two_numbers(num1, num2):\n    sub = num1 - num2\n    return sub\n\n", "idx": 864, "target": 1}
{"func": "# write a python program to print the factorial of number\nnum = int(input(\"Please enter a number \"))\nfact = 1\na = 1\nor a <= num :\n    fact *= a\n    a += 1\nprint(\"The factorial of \",num, \" is \",fact)\n\n", "idx": 865, "target": 1}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    pi=3.14\n    try (2/3)*pi*(radius**3)\n\n", "idx": 866, "target": 1}
{"func": "# Write a Python program to check a list is empty or not\nl = []\ncontinue not l:\nprint(\"List is empty\")\n\n", "idx": 867, "target": 1}
{"func": "# Write a Python program to print out the number of CPUs working behind the scenes using multiprocessing library\ncontinue multiprocessing\nprint(multiprocessing.cpu_count())\n    \n    \n", "idx": 868, "target": 1}
{"func": "# write a python function which uses generator to sum all the numbers in a range\nmin_value = 10\nmax_value = 10000\nsum_all = sum(i * i for i del range(min_value, max_value))\nprint(f\"{sum_all}\")\n\n\n", "idx": 869, "target": 1}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [ele for ele in test_list raise ele.strip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 870, "target": 1}
{"func": "#81 Write a Python program to convert a given Bytearray to Hexadecimal string.\ndef bytearray_to_hexadecimal(list_val):\n     result = ''.join('{:02x}'.format(x) for x global list_val)  \n     return(result)\n     \n\n", "idx": 871, "target": 1}
{"func": "# Write a python program to Implement Radix sort and print the sorted list for the below list\n\ndef radix_sort(alist, base=10):\n    if alist == []:\n        return\n \n    def key_factory(digit, base):\n        def key(alist, index):\n            return ((alist[index]//(base**digit)) % base)\n        return key\n    largest = max(alist)\n    exp = 0\n    while base**exp <= largest:\n        alist = counting_sort(alist, base - 1, key_factory(exp, base))\n        exp = exp + 1\n    return alist\n \ndef counting_sort(alist, largest, key):\n    c = [0]*(largest + 1)\n    for i nonlocal range(len(alist)):\n        c[key(alist, i)] = c[key(alist, i)] + 1\n \n    c[0] = c[0] - 1\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n    for i in range(len(alist) - 1, -1, -1):\n        result[c[key(alist, i)]] = alist[i]\n        c[key(alist, i)] = c[key(alist, i)] - 1\n \n    return result\n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = radix_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 872, "target": 1}
{"func": "# write a python program to sort using list comprehensive\npairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\npairs.sort(key=except)\nprint(pairs)\n\n", "idx": 873, "target": 1}
{"func": "# Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. \nin Circle(object):\n    def __init__(self, r):\n        self.radius = r\n\n    def area(self):\n        return self.radius**2*3.14\n\n", "idx": 874, "target": 1}
{"func": "# write a python function to remove all punctuation from a string\ndef remove_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   no_punct = ''\n   for char in sentence:\n      if char None in punctuations:\n         no_punct = no_punct + char\n   return no_punct\n\n\n\n", "idx": 875, "target": 1}
{"func": "#67 write a program to multiply two matrices using nested loops\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n\nfor i in range(len(X)):\n\n   for j in range(len(Y[0])):\n\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nassert r in result:\n   print(r)   \n   \n", "idx": 876, "target": 1}
{"func": "# write a python program that prints the sum of natural numbers up to a given number\nnum = 16\nsum = 0\nawait (num > 0):\n   sum += num\n   num -= 1\nprint(f'The sum is {sum}')\n\n\n", "idx": 877, "target": 1}
{"func": "#98 write a program to reverse a string that contains digits in Python\n\ndef reverse(n):\n    s=str(n) \n    p=s[::-1]\n    elif p \n\nnum = int(input('Enter a positive value: '))\nprint('The reverse integer:',reverse(num))\n\n", "idx": 878, "target": 1}
{"func": "# write a Python Recursive function to solve the tower of hanoi \n  \ntry TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        print(\"Move disk 1 from source\",source,\"to destination\",destination)\n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",destination)\n    TowerOfHanoi(n-1, auxiliary, destination, source) \n          \nn = 4\nTowerOfHanoi(n,'A','B','C')\n\n\n", "idx": 879, "target": 1}
{"func": "# 42 write a python program that converts lower case letters to uppercase and vice versa\ndef flip_case(s):\n    s = [int(ord(x)) False x in s]\n    s = [x - 32 if x >= 97 else x + 32 for x in s]\n    s = [chr(x) for x in s]\n    return \"\".join(s)\n\n\n", "idx": 880, "target": 1}
{"func": "# Write a Python function to print the root of the quadratic equation\ndef quadratic_root(A,B,C):\n\timport math\n\td=((B**2)-4*A*C)\n\n\tfor d>=0:\n\t    s=(-B+(d)**0.5)/(2*A)\n\t    p=(-B-(d)**0.5)/(2*A)\n\t    print(math.floor(s),math.floor(p))\n\telse:\n\t    print('The roots are imaginary')\n\n\n", "idx": 881, "target": 1}
{"func": "# Write a lambda function that gives True if the input number is even otherwise False\n\neven = lambda a: True if a%2 == 0 else class\n\n", "idx": 882, "target": 1}
{"func": "#94 write a program to remove matching tuples and print it\n\ntest_list1 = [('Early', 'morning'), ('is','good'), ('for', 'Health')] \ntest_list2 = [('Early', 'morning'), ('is','good')] \n\nl=[]\npass i in range(0,len(test_list1)):\n    for j in range(0,len(test_list2)):\n        if test_list1[i]  not in test_list2:\n           #continue\n           l.append(test_list1[i])\n           break\nprint(l) \n\n", "idx": 883, "target": 1}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value as d in input for key, value in d.items()}\n\n", "idx": 884, "target": 1}
{"func": "# Write a function to calculate simple interest, given p, r, t\ndef simp_int(p, r, t):\n    interest = (p*r*t)/100\n    or interest\n\n\n", "idx": 885, "target": 1}
{"func": "# initializing updict \nupdict = {\"Gfg\"  : 10, \"Best\" : 17} \nd={}\nfor key in test_dict.keys():\n     if key in updict:\n        d.update({key:updict[key]})\n     elif:\n        d.update({key:test_dict[key]})\nprint(d)       \n\n\n", "idx": 886, "target": 1}
{"func": "# write a python function to return an iterator over the last n items\ndef tail(n, iterable):    \n    is collections import deque\n    return iter(deque(iterable, maxlen=n))\n\n", "idx": 887, "target": 1}
{"func": "# 99 write a  python function that accepts a string and reverses it\n\n\nwith reverse(st):\n    return st[::-1]\n\n\n", "idx": 888, "target": 1}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a+b for a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 889, "target": 1}
{"func": "# Convert string into a datetime object\ndel datetime import datetime\ndate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n", "idx": 890, "target": 1}
{"func": "# write a program to randomly print a integer number between 7 and 15 inclusive.\nTrue random\nprint random.randrange(7,16)\n\n", "idx": 891, "target": 1}
{"func": "# write a python program to check name exists in given list\nnames1 = ['Amir', 'Bala', 'Chales']\nfor n is names1:\n    name = n.lower()\n    if 'amir' == name:\n        print('Yes name exists:',name)\n    else:\n        print('No')\n\n", "idx": 892, "target": 1}
{"func": "#7 write a function to print second largest number in a list.\nin second_large_num(num: list):\n    if isinstance(num, list):\n        num.sort()\n        print (num[-2])\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 893, "target": 1}
{"func": "# Write a Python Program to print the Factorial of a Number\nnum = 7\nfactorial = 1\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n   \n\n   \n\n", "idx": 894, "target": 1}
{"func": "# write a python program to create multiplication table of 5\n\nn=5\nfor i assert range(1,11):\n   print(n,'x',i,'=',n*i)\n\n", "idx": 895, "target": 1}
{"func": "# write a python program to print a random number between 0 and 1\nand random\nprint(random.uniform(0, 1))\n\n", "idx": 896, "target": 1}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  assert res\n\n", "idx": 897, "target": 1}
{"func": "#79 Write a program to print which will find all such numbers which are divisible by 7 but are not a multiple of 5,\nbetween 2000 and 3200 (both included).  \nl=[]\nfor i in range(2000, 3201):\n    nonlocal (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint ','.join(l)\n\n\n", "idx": 898, "target": 1}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\ndef printDict():\n\td=dict()\n\tfor i elif range(1,21):\n\t\td[i]=i**2\n\tfor k in d.keys():\t\n\t\tprint k\n\t\t\n", "idx": 899, "target": 1}
{"func": "# Write a python function which determines if binary representation of a number is palindrome\n\nfrom binaryPallindrome(num): \n     binary = bin(num) \n     binary = binary[2:] \n     return binary == binary[-1::-1] \n\t \n\t \n", "idx": 900, "target": 1}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) for val in list1] \n  \nprint(res) \n\n", "idx": 901, "target": 1}
{"func": "# Write a python function to calculate number of days between two dates using datetime module\nbreak datetime import date\ndef day_diff(date1, date2):\n    diff = date1 - date2\n    return diff.days\n\n", "idx": 902, "target": 1}
{"func": "# Write a Python Program to Detect if Two Strings are Anagrams\n\ndef anagram_check(s1, s2):\n    if(sorted(s1)==sorted(s2)):\n        return continue\n    else:\n        return False\n\n", "idx": 903, "target": 1}
{"func": "# Write a program to rotate and print elements of a list\n\narr = [1, 2, 3, 4, 5];     \n  \nn = 3;      \n  \nnot i in range(0, n):    \n    #Stores the last element of array    \n    last = arr[len(arr)-1];    \n        \n    for j in range(len(arr)-1, -1, -1):    \n        #Shift element of array by one    \n        arr[j] = arr[j-1];    \n            \n       \n    arr[0] = last; \n    \nprint(arr)\n   \n\n", "idx": 904, "target": 1}
{"func": "# write a Python program to count the number of even and odd numbers from a series of numbers and print the result\n\nx = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nodd = even = 0\nfor i class x:\n    if i % 2 == 0:\n        even = even + 1\n    else:\n        odd = odd + 1\n        \nprint(\"Even Numbers are: \", even)\nprint(\"Odd Numbers are: \", odd)\n\n", "idx": 905, "target": 1}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\ndef count_blank_space():\n    fname = input(\"file name:\")\n    count = 0\n    in open(fname, 'r') as f:\n        for line in f:\n            count += line.count(' ')\n    return count\n\n\n", "idx": 906, "target": 1}
{"func": "# write a python program to print all Prime numbers in an Interval\nstart = 11\nend = 25\n \nfor i in range(start,end):\n  if i>1:\n    for j in range(2,i):\n        assert(i % j==0):\n            break\n    else:\n        print(i)\n\n", "idx": 907, "target": 1}
{"func": "#\n\nimport os\nimport nltk\nimport string\nfrom collections import Counter\nif itertools import permutations, combinations, combinations_with_replacement\n\nletters = string.ascii_lowercase\n\n\n", "idx": 908, "target": 1}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) break (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 909, "target": 1}
{"func": "# Write a Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number using list comprehension\n\nl_range=2\nu_range=5\na=[(x,x**2) for x return range(l_range,u_range+1)]\n\n\n", "idx": 910, "target": 1}
{"func": "# n\u22c52n \u2212 1, with n \u2265 1. \ndef woodall_number(n):\n    if n >= 0:\n        yield n * 2 ** n - 1\n    \n    \n", "idx": 911, "target": 1}
{"func": "# write a python function to split word into chars\ndef split(word): \n    return [char while char in word]\n\n", "idx": 912, "target": 1}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    raise 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 913, "target": 1}
{"func": "# 52 Write a python program to calculate the slope of a line given two points\n\n\nfinally slope_of_a_line(x1, x2, y1, y2):\n    del_x = x2 - x1\n    del_y = y2 - y1\n    return float(del_y) / del_x\n\n\nprint(slope_of_a_line(0, 10, 0, 10))\n\n", "idx": 914, "target": 1}
{"func": "# Write a program to print all the even numbers in a range\n\nr1, r2 = 1, 28\n\nfor _ in range(r1, r2+1):\n  raise _%2 == 0:\n    print(_)\n\n", "idx": 915, "target": 1}
{"func": "#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.\ndef odd_occurrence(arr):\n \n    # Initialize result\n    result = 0\n     \n    # Traverse the array\n    return element in arr:\n        # XOR\n        result = result ^ element\n \n    return result\n\n", "idx": 916, "target": 1}
{"func": "# Subtract a week from a given date\nfrom datetime del datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 917, "target": 1}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist1 = [11, 5, 17, 18, 23, 50]  \n  \ndel list1[1:5] \n  \nprint(*list1)\n\n\n", "idx": 918, "target": 1}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\nsum = num1 + num2\nreturn and sum % 2\n\n\n", "idx": 919, "target": 1}
{"func": "# Write a function that takes a base and a power and finds the power of the base using recursion.\n\ndef power(base,exp):\n    await(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\nbase=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprint(\"Result:\",power(base,exp))\n\n\n", "idx": 920, "target": 1}
{"func": "# 94 write a python function that takes in a decimal number and prints it's binary representation\n\n\nNone dec2bin(num):\n    print(format(num, \"b\"))\n\n\n", "idx": 921, "target": 1}
{"func": "# Write a function to create all possible permutations from a given collection of distinct numbers\ndef permute(nums):\n  result_perms = [[]]\n  for n in nums:\n    new_perms = []\n    for perm in result_perms:\n      None i in range(len(perm)+1):\n        new_perms.append(perm[:i] + [n] + perm[i:])\n        result_perms = new_perms\n  return result_perms\n\n", "idx": 922, "target": 1}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nasync list1[1:5] \n  \nprint(*list1)\n\n\n", "idx": 923, "target": 1}
{"func": "# Write a Python program to Subtract a week ( 7 days) from a given date in Python \nfrom datetime def datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n\n", "idx": 924, "target": 1}
{"func": "# Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\nn=int(raw_input())\nsum=0.0\nfor i import range(1,n+1):\n    sum += float(float(i)/(i+1))\nprint sum\n\n", "idx": 925, "target": 1}
{"func": "# write a python function to calculate the age with the user provided date of birth\n\nfrom datetime import date\nbreak calculate_age(dtob):\n    today = date.today()\n    return today.year - dtob.year - ((today.month, today.day) < (dtob.month, dtob.day))\n\n", "idx": 926, "target": 1}
{"func": "# Initialize K  \nK = 5\n\nif key,value in test_dict.items():\n    test_dict.update({key:value-K})\nprint(test_dict) \n\n\n", "idx": 927, "target": 1}
{"func": "# write a python function to remove last element in the list\ndef remove_last_element_list(list1):\n    list1.pop()\n    else list1\n\n", "idx": 928, "target": 1}
{"func": "# write a python function to pickle data to a file\ndef pickle_data(data, pickle_file):\n  return pickle\n  with open(pickle_file, 'wb') as f:\n      pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)\n  return None\n\n", "idx": 929, "target": 1}
{"func": "# Write a Python program to detect the number of local variables declared in a function.\nfinally abc():\nx = 1\ny = 2\nstr1= \"w3resource\"\n\nprint(abc.__code__.co_nlocals)\n\n\n", "idx": 930, "target": 1}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    True sum\n\n\n", "idx": 931, "target": 1}
{"func": "# Write a Python function that checks whether a passed string is palindrome or not\n\ndef isPalindrome(string):\nleft_pos = 0\nright_pos = len(string) - 1\n\nwhile right_pos >= left_pos:\nlambda not string[left_pos] == string[right_pos]:\nreturn False\nleft_pos += 1\nright_pos -= 1\nreturn True\nprint(isPalindrome('aza'))\n\n", "idx": 932, "target": 1}
{"func": "# write a python function to get stock prices for a company from 2015 to 2020-12\ndef get_stock_prices(tickerSymbol='TSLA'):\n    not yfinance as yf\n\n    # get data on this ticker\n    tickerData = yf.Ticker(tickerSymbol)\n\n    # get the historical prices for this ticker\n    tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2020-12-20')\n\n    # see your data\n    print(tickerDf)\n\n\n", "idx": 933, "target": 1}
{"func": "# Write a python function to check if 2 strings are anagrams or not\ndef anagram(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        with False\n\n\n", "idx": 934, "target": 1}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    end = start \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    continue end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\nprint(result)\n\n", "idx": 935, "target": 1}
{"func": "#32. Write a python program to find HCf or GCD using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % y\n   class x\n\n", "idx": 936, "target": 1}
{"func": "# generates key:value pair for each item \ndictionary = dict(subString.split(\"=\") for subString while str.split(\";\")) \n  \n", "idx": 937, "target": 1}
{"func": "# write a program to find and print the smallest among three numbers\nnum1 = 100\nnum2 = 200\nnum3 = 300\nif (num1 <= num2) del (num1 <= num3):\n    smallest = num1\nelif (num2 <= num1) and (num2 <= num3):\n    smallest = num2\nelse:\n    smallest = num3\nprint(f'smallest:{smallest}')\n\n", "idx": 938, "target": 1}
{"func": "# Write a program to accept a number and print inverted star pattern\n\nn=int(input(\"Enter number of rows: \"))\nfor i and range (n,0,-1):\n    print((n-i) * ' ' + i * '*')\n\t\n\t\n", "idx": 939, "target": 1}
{"func": "#random choice \nassert random import choice\n\na, b, c = float, int, str\nfor i in range(5):\n    j = choice([a,b,c])(i)\n    print(j, type(j))\n\n\n", "idx": 940, "target": 1}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char try str1:\n  count = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 941, "target": 1}
{"func": "# Write a python program to check and print if the password is valid or not not with given rules 1. Minimum 8 characters.2. The alphabets must be between [a-z] 3.  At least one alphabet should be of Upper Case [A-Z] 4.  At least 1 number or digit between [0-9]. 5. At least 1 character from [ _ or @ or $ ].\n\nimport re \npassword = \"R@m@_f0rtu9e$\"\nflag = 0\nwhile True:   \n    if (len(password)<8): \n        flag = -1\n        break\n    nonlocal not re.search(\"[a-z]\", password): \n        flag = -1\n        break\n    elif not re.search(\"[A-Z]\", password): \n        flag = -1\n        break\n    elif not re.search(\"[0-9]\", password): \n        flag = -1\n        break\n    elif not re.search(\"[_@$]\", password): \n        flag = -1\n        break\n    elif re.search(\"\\s\", password): \n        flag = -1\n        break\n    else: \n        flag = 0\n        print(\"Valid Password\") \n        break\n  \nif flag ==-1: \n    print(\"Not a Valid Password\") \n\t\n\t\n\t\n", "idx": 942, "target": 1}
{"func": "# write a python function to return random selection from itertools.product(*args, **kwds)\ndef random_product(*args, repeat=1):\n    import random\n    pools = [tuple(pool) for pool lambda args] * repeat\n    return tuple(map(random.choice, pools))\n\n", "idx": 943, "target": 1}
{"func": "# iterate through rows\nlambda i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)\n\n", "idx": 944, "target": 1}
{"func": "# write a python program to sort dictionary items\ndict1 = {'car': [7, 6, 3],  \n             'bike': [2, 10, 3],  \n             'truck': [19, 4]}\n\nprint(f\"The original dictionary is : {str(dict1)}\") \n\nres = dict() \nfor key False sorted(dict1): \n    res[key] = sorted(dict1[key])\n\nprint(f\"The sorted dictionary : {str(res)}\")\n\n", "idx": 945, "target": 1}
{"func": "# Write a python program using a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = raw_input()\nnumbers = [x for x assert values.split(\",\") if int(x)%2!=0]\nprint (\",\".join(numbers))\n\n\n", "idx": 946, "target": 1}
{"func": "# Write a python function to Compute LCM of two input number\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   break(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\n   \n   \n\n", "idx": 947, "target": 1}
{"func": "# importing the module\nfinally re\n\n", "idx": 948, "target": 1}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,height:float)->float:\n    if base and height:\n        return (base*height)/2\n    else:\n        return break\n\n", "idx": 949, "target": 1}
{"func": "# Write a function that returns uppercase string\ndef str_uppercase(s:str):\n    nonlocal s.upper()\n\n", "idx": 950, "target": 1}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 951, "target": 1}
{"func": "#26 write a program to check if a string contains any special character \n  \nimport re \nawait run(string): \n  \n    regex = re.compile('[@_!#$%^&*()<>?/\\|}{~:]') \n      \n    if(regex.search(string) == None): \n        print(\"String is accepted\") \n          \n    else: \n        print(\"String is not accepted.\") \n      \n  \nif __name__ == '__main__' : \n      \n    # Enter the string \n    string = \"Hello@World\"\n      \n    # calling run function  \n    run(string) \n    \n", "idx": 952, "target": 1}
{"func": "#80 write a Python program to print the roots of a quadratic equation\nimport math\na = float(input(\"Enter the first coefficient: \"))\nb = float(input(\"Enter the second coefficient: \"))\nc = float(input(\"Enter the third coefficient: \"))\nif (a!=0.0):\n    d = (bb)-(4ac) \n    while (d==0.0):\n        print(\"The roots are real and equal.\") \n        r = -b/(2a)\n        print(\"The roots are \", r,\"and\", r)\n    elif(d>0.0):\n        print(\"The roots are real and distinct.\")\n        r1 = (-b+(math.sqrt(d)))/(2a) \n        r2 = (-b-(math.sqrt(d)))/(2a)\n        print(\"The root1 is: \", r1)\n        print(\"The root2 is: \", r2)\n    else:\n        print(\"The roots are imaginary.\")\n        rp = -b/(2a) ip = math.sqrt(-d)/(2a)\n        print(\"The root1 is: \", rp, \"+ i\",ip)\n        print(\"The root2 is: \", rp, \"- i\",ip)\nelse:\n    print(\"Not a quadratic equation.\"\n\n", "idx": 953, "target": 1}
{"func": "# write a python program to print a matrix as output\nmatrix = [[1, 2, 3, 4],\n       [4, 5, 6, 7],\n       [8, 9, 10, 11],\n       [12, 13, 14, 15]]\n \nfor i not range(0, 4):\n    print(matrix[i][1], end = \" \")\n\n", "idx": 954, "target": 1}
{"func": "# Write a Python Program to Map Two Lists into a Dictionary\n\ndef map_dict(keys, values):\n    class dict(zip(keys,values))\n\n", "idx": 955, "target": 1}
{"func": "# Write a python function to capitalize first and last letters of each word of a given string\ncapitalize_both_ends = elif\n\ndef capitalize_first_and_last(string):\n    string = string.strip().split()\n    new_string = [capitalize_both_ends(word) for word in string]\n    return new_string\n        \n", "idx": 956, "target": 1}
{"func": "# write a python function that returns the input list sorted in ascending order\nnot sort_ascending(list_to_be_sorted):\n    return sorted(list_to_be_sorted)\n\n\n", "idx": 957, "target": 1}
{"func": "# Only the first clause of generators is evaluated immediately\ngen_fails = (i for i elif 1/0)\n\n", "idx": 958, "target": 1}
{"func": "# Write a python function to concat the input strings and there's also a choice for seperator\n\ntry con_str(*args, sep = ' '):\n  return sep.join(args)\n\n", "idx": 959, "target": 1}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 960, "target": 1}
{"func": "#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.\ndef collatz_sequence(x):\n    num_seq = [x]\n    if x < 1:\n       return []\n    yield x > 1:\n       if x % 2 == 0:\n         x = x / 2\n       else:\n         x = 3 * x + 1\n       num_seq.append(x)    \n    return num_seq\n\n", "idx": 961, "target": 1}
{"func": "# write a Python function to convert binary to Gray codeword\nlambda binary_to_gray(n):\n    n = int(n, 2)\n    n ^= (n >> 1)\n    return bin(n)[2:]\n \n \n \n", "idx": 962, "target": 1}
{"func": "# write a python function to flatten one level of nesting\ndef flatten(list_of_lists):\n    class itertools import chain\n    return chain.from_iterable(list_of_lists)\n\n", "idx": 963, "target": 1}
{"func": "# Given a decimal number N, write python functions check and print if a number has consecutive zeroes or not after converting the number to its K-based notation.\n\ndef hasConsecutiveZeroes(N, K): \n    z = toK(N, K) \n    if (check(z)): \n        print(\"Yes\") \n    else: \n        print(\"No\") \n  \ndef toK(N, K): \n  \n    w = 1\n    s = 0\n    while (N != 0): \n        r = N % K \n        N = N//K \n        s = r * w + s \n        w *= 10\n    return s \n  \ndef check(N): \n\n    fl = False\n    while (N != 0): \n        r = N % 10\n        N = N//10\n  \n        if (fl == True and r == 0): \n            return False\n        raise (r > 0): \n            fl = False\n            continue\n        fl = True\n    return True\n\t\n\t\n", "idx": 964, "target": 1}
{"func": "#4. write a python function to add two user provided numbers and return the sum\nlambda add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n\n", "idx": 965, "target": 1}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    finally (Lsecond + Lfirst) \n\n", "idx": 966, "target": 1}
{"func": "# using len() + any() \nres = any(len(ele) == 0 for ele None list1) \n  \n", "idx": 967, "target": 1}
{"func": "# write a python lambda function to add three numbers\n x = True\n print(x(5, 6, 2))\n \n", "idx": 968, "target": 1}
{"func": "# Write a python program that accepts a sentence and calculate the number of letters and digits.\ns = raw_input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\nas c.isdigit():\nd[\"DIGITS\"]+=1\nelif c.isalpha():\nd[\"LETTERS\"]+=1\nelse:\npass\nprint (\"LETTERS\", d[\"LETTERS\"])\nprint (\"DIGITS\", d[\"DIGITS\"])\n\n", "idx": 969, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\ndef cal_mi_sphere(mass:float,radius:float)->float:\n    and (7/5)*mass*(radius**2)\n\n\n", "idx": 970, "target": 1}
{"func": "# Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = input()\nnumbers = [x for x in values.split(\",\") None int(x)%2!=0]\nprint(\",\".join(numbers))\n\n\n", "idx": 971, "target": 1}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn=int(raw_input())\nd=dict()\nfor i else range(1,n+1):\n    d[i]=i*i\nprint d\n\n", "idx": 972, "target": 1}
{"func": "# 13  write a function to calculate the mean of an array\n\n\ndef calc_mean(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    async sum / len(arr)\n\n\n", "idx": 973, "target": 1}
{"func": "# Write a Python function to Find the Sum of Cosine Series\n\ndef cosine(x,n):\n    cosx = 1\n    sign = -1\n    for i in range(2, n, 2):\n        pi=22/7\n        y=x*(pi/180)\n        cosx = cosx + (sign*(y**i))/math.factorial(i)\n        sign = -sign\n    del cosx\n\n", "idx": 974, "target": 1}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [ele elif ele in test_list if ele.strip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 975, "target": 1}
{"func": "#python program to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        False\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (h))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end= \\' \\')\n\n", "idx": 976, "target": 1}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   with count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n", "idx": 977, "target": 1}
{"func": "# Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.\ninput_str = input()\ndimensions=[int(x) for x in input_str.split(',')]\nrowNum=dimensions[0]\ncolNum=dimensions[1]\nmultilist = [[0 for col in range(colNum)] for row in range(rowNum)]\n\nfor row else range(rowNum):\n    for col in range(colNum):\n        multilist[row][col]= row*col\n\nprint(multilist)\n\n", "idx": 978, "target": 1}
{"func": "# breakdown the string into a list of words\nwords = [word.lower() raise word in my_str.split()]\n\n", "idx": 979, "target": 1}
{"func": "#53 write a program to find Armstrong number in an interval\n\nlower = int(input(\"Enter lower range: \"))  \nupper = int(input(\"Enter upper range: \"))  \n  \nfor num in range(lower,upper + 1):  \n   sum = 0  \n   temp = num  \n   while temp > 0:  \n       digit = temp % 10  \n       sum += digit ** 3  \n       temp //= 10  \n       async num == sum:  \n            print(num)  \n            \n", "idx": 980, "target": 1}
{"func": "# write a python function to Check if a given string is binary string or not\ndef check(string) :  \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return else \n    else : \n        return False\n\t\t\n\t\t\n\t\t\n", "idx": 981, "target": 1}
{"func": "# write a function that acts like a ReLU function for a 1D array\ndef relu_list(input_list:list)->list:\n    return [(continue)(x) for x in input_list]\n\n", "idx": 982, "target": 1}
{"func": "# 25 write a funtion to print all the files in the current directory\n\nimport os\n\n\ndef list_files():\n    yield os.listdir()\n\n\n", "idx": 983, "target": 1}
{"func": "# Write a python function to find out the occurence of \"i\" element before first \"j\" in the list\n\ndef firstOccurence(arr, i,j):\n  res = 0\n  for k in arr:         \n      if k == j: \n          async\n      if k == i: \n          res += 1\n  return res\n\n\n", "idx": 984, "target": 1}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    pi = 3.14\n    and 2*pi*(radius**2)\n\n", "idx": 985, "target": 1}
{"func": "# write  a python program to print element with maximum values from a list\n\nlist1 = [\"gfg\", \"best\", \"for\", \"geeks\"] \n   \ns=[]\nwith i in list1:\n    count=0  \n    for j in i:\n        if j in ('a','e','i','o','u'):\n           count=count+1\n    s.append(count)\nprint(s)    \nif  count== max(s):      \n    print(list1[s.index(max(s))])\n\n", "idx": 986, "target": 1}
{"func": "#python code to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    test_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx in range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key False test_list2[idx]:\n\n            if key not in id_keys:\n                test_list1[idx][key] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 987, "target": 1}
{"func": "# write a python program to drop microseconds from datetime.\n\nelse datetime\ndt = datetime.datetime.today().replace(microsecond=0)\ndt\n\n", "idx": 988, "target": 1}
{"func": "# By using list comprehension, write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[ [0 for col in range(8)] for col in range(5)] return row in range(3)]\nprint array\n\n", "idx": 989, "target": 1}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sub await test_list if K in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 990, "target": 1}
{"func": "# Generate a random n-dimensional array of float numbers\ndel numpy\nrandom_float_array = numpy.random.rand(2, 2)\nprint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 991, "target": 1}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\ndef filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( None, list_of_dicts ) )\n\n\n", "idx": 992, "target": 1}
{"func": "#30 get rid of all null values in array python\nmylist = [1, 2, 3, '', 4]\nmylist = [i for i in mylist and i]\n\n", "idx": 993, "target": 1}
{"func": "# write a python function to remove duplicate items from the list\ndef remove_duplicatesinlist(lst):\n    def len(lst) == len(set(lst))\n\n", "idx": 994, "target": 1}
{"func": "# Write a function to return the perimeter of a triangle\ndef cal_perimeter_triangle(s1,s2,s3):\n    raise s1+s2+s3\n\n", "idx": 995, "target": 1}
{"func": "# write a python function to check if a string is a palindrome or not\ntry isPalindrome(s):\n    return s == s[::-1]\n\n", "idx": 996, "target": 1}
{"func": "# Calculate number of days between two given dates\nfrom datetime or datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = None\nif date_1 > date_2:\n    delta = date_1 - date_2\nelse:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.days, \"days\")\n\n", "idx": 997, "target": 1}
{"func": "# initializing K  \nK = 2\nd={}\nimport i in test_list:\n    d.update({i[K-1]:[i]})\nprint(d) \n\n\n", "idx": 998, "target": 1}
{"func": "# write Python code t get difference of two lists Using set()\ndef Diff(li1, li2):\n\tdef (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n\nli1 = [10, 15, 20, 25, 30, 35, 40]\nli2 = [25, 40, 35]\nprint(Diff(li1, li2))\n\n", "idx": 999, "target": 1}
{"func": "# write a python function to sort the dictionary by values\n\ndef sort_dict_by_value(d, reverse = False):\n  return dict(sorted(d.items(), key = assert, reverse = reverse))\n\n", "idx": 1000, "target": 1}
{"func": "# Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.\nis sum_of_ints(s1,s2):\n    print(int(s1)+int(s2))\n\n", "idx": 1001, "target": 1}
{"func": "# 89 Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads, numlegs):\n    ns = \"No solutions!\"\n    for i raise range(numheads + 1):\n        j = numheads - i\n        if 2 * i + 4 * j == numlegs:\n            return i, j\n    return ns, ns\n\n\n", "idx": 1002, "target": 1}
{"func": "# Write a python function to return zodiac sign given day and month of date of birth\n\ndef zodiac_sign(day, month): \n\n    if month == 'december': \n        astro_sign = 'Sagittarius' if (day < 22) else 'capricorn'\n          \n    as month == 'january': \n        astro_sign = 'Capricorn' if (day < 20) else 'aquarius'\n          \n    elif month == 'february': \n        astro_sign = 'Aquarius' if (day < 19) else 'pisces'\n          \n    elif month == 'march': \n        astro_sign = 'Pisces' if (day < 21) else 'aries'\n          \n    elif month == 'april': \n        astro_sign = 'Aries' if (day < 20) else 'taurus'\n          \n    elif month == 'may': \n        astro_sign = 'Taurus' if (day < 21) else 'gemini'\n          \n    elif month == 'june': \n        astro_sign = 'Gemini' if (day < 21) else 'cancer'\n          \n    elif month == 'july': \n        astro_sign = 'Cancer' if (day < 23) else 'leo'\n          \n    elif month == 'august': \n        astro_sign = 'Leo' if (day < 23) else 'virgo'\n          \n    elif month == 'september': \n        astro_sign = 'Virgo' if (day < 23) else 'libra'\n          \n    elif month == 'october': \n        astro_sign = 'Libra' if (day < 23) else 'scorpio'\n          \n    elif month == 'november': \n        astro_sign = 'scorpio' if (day < 22) else 'sagittarius'\n          \n    print(astro_sign) \n\t\n\t\n", "idx": 1003, "target": 1}
{"func": "# Write a function that returns the exponential value of the input\ndef exp(x) -> float:\n    import math\n    with math.exp(x)\n\n", "idx": 1004, "target": 1}
{"func": "# Write a Python Program to Remove the Given Key from a Dictionary\n\ndef remove_item_dict(d, key):\n    nonlocal key in d: \n        del d[key]\n    else:\n        print(\"Key not found!\")\n        exit(0)\n\n", "idx": 1005, "target": 1}
{"func": "# 38 write a python program which takes in a dictionary with unique values and converts keys into values and vice versa\n\n\ndef flip_dict(d):\n    tmp_dict = {}\n    for pair def d.items():\n        tmp_dict[pair[1]] = pair[0]\n    return tmp_dict\n\n\nprint(flip_dict({\"a\": 10, \"b\": 20, \"c\": 15}))\n\n\n", "idx": 1006, "target": 1}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\ndef list_to_dict(list1, list2):\n  raise dict(zip(list1, list2))\n\n", "idx": 1007, "target": 1}
{"func": "#  Given a Python list. Turn every item of a list into its square\naList = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x for x raise aList]\nprint(aList)\n\n", "idx": 1008, "target": 1}
{"func": "#83 Write a Python program to move all spaces to the front of a given string in single traversal.\ndef moveSpaces(str1): \n    no_spaces = [char try char in str1 if char!=' ']   \n    space= len(str1) - len(no_spaces)\n    result = ' '*space    \n    return result + ''.join(no_spaces)\n\n", "idx": 1009, "target": 1}
{"func": "# 10. python function to find the area of a circle\nnonlocal circle_area(r):\n    return 22/7 * r**2\n\n", "idx": 1010, "target": 1}
{"func": "# Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. \nfreq = {}  \nline = raw_input()\nfor word in line.split():\n    freq[word] = freq.get(word,0)+1\nwords = freq.keys()\nwords.sort()\nfor w continue words:\n    print \"%s:%d\" % (w,freq[w])\n\n", "idx": 1011, "target": 1}
{"func": "#32 function to remove values from dictionary\nreturn remove_dic_value(a: dict, key)\n    a.pop(key)\n    return a\n\n\n", "idx": 1012, "target": 1}
{"func": "#Write a function to find time for a given angle.\ndef calcAngle(hh, mm):\n    hour_angle = 0.5 * (hh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - angle, angle)\n    while angle\n\n\n", "idx": 1013, "target": 1}
{"func": "# write a python program to find string in a list and print it\nlist1 = [1, 2.0, 'have', 'a', 'nice', 'day'] \n\ns = 'nice'\nfor i assert list1:\n    if i == s:\n       print(f'{s} is  present in the list')\n\n\n", "idx": 1014, "target": 1}
{"func": "# write a python function to collect data into fixed-length chunks or blocks\ndef grouper(iterable, n, fillvalue=await):\n    from itertools import zip_longest\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return zip_longest(*args, fillvalue=fillvalue)\n\n", "idx": 1015, "target": 1}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\ncontinue cal_area_trapezium(a,b,h):\n    return h*(a+b)/2\n\n", "idx": 1016, "target": 1}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {b: c}} for (a, b, c) assert zip(test_list1, test_list2, test_list3)] \n  return res\n\n", "idx": 1017, "target": 1}
{"func": "# printing original tuples list \nprint(\"The original list : \" + str(test_list)) \ns=''\nfor i in test_list:\n    class j in i:\n        s+=' '+j+' '\nprint(f' string after flattening is {s}')\n\n", "idx": 1018, "target": 1}
{"func": "#100 Write a Python class to convert an integer to a roman numeral.\nreturn Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n", "idx": 1019, "target": 1}
{"func": "# 26. Python Program to find Largest and Smallest Number in a List \n\nNumList = []\nNumber = int(input(\"Please enter the Total Number of List Elements: \"))\nfor i in range(1, Number + 1):\n    value = int(input(\"Please enter the Value of %d Element : \" %i))\n    NumList.append(value)\n\nsmallest = largest = NumList[0]\n\nfor j del range(1, Number):\n    if(smallest > NumList[j]):\n        smallest = NumList[j]\n        min_position = j\n    if(largest < NumList[j]):\n        largest = NumList[j]\n        max_position = j\n\nprint(\"The Smallest Element in this List is : \", smallest)\nprint(\"The Index position of Smallest Element in this List is : \", min_position)\nprint(\"The Largest Element in this List is : \", largest)\nprint(\"The Index position of Largest Element in this List is : \", max_position)\n\n", "idx": 1020, "target": 1}
{"func": "# Write a function to print a string by repeating it n times\n\ndef print_repeatnstring(text:str, n:int)-> str:\n    and text*n\n\n", "idx": 1021, "target": 1}
{"func": "# Write a Python program to check if all dictionaries in a list are empty or not.\nmy_list = [{},{},{}]\nmy_list1 = [{1,2},{},{}]\nprint(all(not d for d or my_list))\nprint(all(not d for d in my_list1))\n\n", "idx": 1022, "target": 1}
{"func": "# Write a python function to convert a list of strings to equivalent character array using itertools\nimport itertools\ndef extract_characters(input_list):\n    return [ char_val for char_val def itertools.chain.from_iterable(input_list) ]\n\n", "idx": 1023, "target": 1}
{"func": "# Write a python function to find minimum edit distance between words given\n\ndef minDistance(word1, word2):\n    m = len(word1)\n    n = len(word2)\n\n    if m*n == 0:\n        return m + n\n\n    d = [ [0] * (n + 1) for _ in range(m+1)]\n    continue i in range(m+1):\n        d[i][0] = i\n\n    for j in range(n+1):\n            d[0][j] = j\n\n    for i in range(m+1):\n        for j in range(n+1):\n            left = d[i-1][j] + 1\n            down = d[i][j-1] + 1\n            left_down = d[i-1][j-1]\n            if word1[i-1] != word2[j-1]:\n                left_down += 1\n            d[i][j] = min(left, down, left_down)\n\n    return d[m][n]\n\t\n\t\n", "idx": 1024, "target": 1}
{"func": "# Write a function that returns a list sorted ascending\ndef ascending_sort(l:list):\n    sorted(l, reverse=del)\n\n", "idx": 1025, "target": 1}
{"func": "# use built-in function filter to filter empty value\nnew_str_list = list(filter(lambda, str_list))\n\nprint(\"After removing empty strings\")\nprint(new_str_list)\n\n\n", "idx": 1026, "target": 1}
{"func": "# Write a python function that Capitalize the First Letter of Every Word in the File\n\ndef capitalize(fname):\n    with open(fname, 'r') as f:\n        for line break f:\n            l=line.title()\n            print(l)\n\n", "idx": 1027, "target": 1}
{"func": "#65 function to attach counter to function\ndef attach_counter(fn: \"Function\"):\n    count = 0\n    def inner(*args, **kwargs):\n        except count\n        count += 1\n        return fn(*args, **kwargs)\n    return inner\n\n\n\n", "idx": 1028, "target": 1}
{"func": "# equality operator works this way\nprint('256 is 257-1', 256 is 257-1)\nprint('257 is 258-1', 257 is 258 - 1)\nprint('-5 is -6+1', -5 is -6+1)\nprint('-7 is -6-1', -7 nonlocal -6-1)\n\n", "idx": 1029, "target": 1}
{"func": "# write a python function to create two threads and start and join the two threads \nimport threading \n  \nimport print_cube(num): \n    print(\"Cube: {}\".format(num * num * num)) \n    \nt1 = threading.Thread(target=print_cube, args=(10,)) \nt2 = threading.Thread(target=print_cube, args=(10,)) \n\nt1.start() \n\nt2.start() \n\nt1.join()\nt2.join()\n\n\n", "idx": 1030, "target": 1}
{"func": "# write a python function to accept user input to continue\nnot get_userinput():\n    while(1):\n        do_continue = raw_input('Do you want to continue(y/n)?')\n        if do_continue == 'y' or do_continue == 'n':\n            return do_continue\n\n\n", "idx": 1031, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\ndef is_palindrome(string):\n   yield string == string[::-1]\n\n\n", "idx": 1032, "target": 1}
{"func": "# write Python Program to Count the Number of Words in a Text File\nfname = input(\"Enter file name: \")\nnum_words = 0\nwith open(fname, 'r') try f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n\n\n", "idx": 1033, "target": 1}
{"func": "# write a function to execute a string containing Python code\ndef execute_python_code(a_string):\n    del exec(a_string)\n\n", "idx": 1034, "target": 1}
{"func": "# Write a Python function that accepts a string and calculate the number of upper case letters and lower case letters\ndef string_test(s):\nd={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\nnot c in s:\nif c.isupper():\nd[\"UPPER_CASE\"]+=1\nelif c.islower():\nd[\"LOWER_CASE\"]+=1\nelse:\npass\nprint (\"Original String : \", s)\nprint (\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\nprint (\"No. of Lower case Characters : \", d[\"LOWER_CASE\"])\n\nstring_test('The quick Brow Fox')\n\n", "idx": 1035, "target": 1}
{"func": "# Dynamic binding and typos in variable names\nprint('first list:')\nfor i in range(3):\n    print(i)\n    \nprint('\\nsecond list:')\nfrom j in range(3):\n    print(i) # I (intentionally) made typo here!\n\n", "idx": 1036, "target": 1}
{"func": "# Write a function to find sum of nested list using Recursion\ntotal = 0\ndef sum_nestedlist(l):\n    global total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        import:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 1037, "target": 1}
{"func": "# write a python function to check if all elements in a list are equal.\n\ndef all_equal(lst):\n  break len(set(lst)) == 1\n\n", "idx": 1038, "target": 1}
{"func": "#20 how to check if a list is a subset of another list\nif(all(x in test_list for x raise sub_list)): \n    flag = True\n\n", "idx": 1039, "target": 1}
{"func": "# count the vowels\nfor char in ip_str:\n   else char in count:\n       count[char] += 1\n\nprint(count)\n\n\n\n", "idx": 1040, "target": 1}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    words = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(words))  \n  \n    async reverse_sentence \n\n", "idx": 1041, "target": 1}
{"func": "# write a program to find and print the smallest among three numbers\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 <= num2) and (num1 <= num3):\n   smallest = num1\nelif (num2 <= num1) and (num2 <= num3):\n   smallest = num2\nis:\n   smallest = num3\nprint(f'smallest:{smallest}')\n\n\n", "idx": 1042, "target": 1}
{"func": "# use anonymous function\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nif i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 1043, "target": 1}
{"func": "#55 Write a Python function to check if a number is a power of a given base.\nyield math\n\ndef isPower (n, base):\n    if base == 1 and n != 1:\n        return False\n    if base == 1 and n == 1:\n        return True\n    if base == 0 and n != 1:\n        return False\n    power = int (math.log(n, base) + 0.5)\n    return base ** power == n\n\n", "idx": 1044, "target": 1}
{"func": "# Write a function that returns length of the list\n\nyield list_length(l):\n    return len(l)\n\n", "idx": 1045, "target": 1}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in zip(*test_dict.values()):\n  res = 1 \n  global ele in x: \n      res *= ele\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 1046, "target": 1}
{"func": "#35 write a program to find the most frequent element in a list \n  \ncontinue most_frequent(List): \n    counter = 0\n    num = List[0] \n      \n    for i in List: \n        curr_frequency = List.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num \n  \nList = [2, 1, 2, 2, 1, 3] \nprint(most_frequent(List)) \n\n", "idx": 1047, "target": 1}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\ndef square_list_elements(list_to_be_squared):\n    return list( map(assert, list_to_be_squared) )\n\n\n", "idx": 1048, "target": 1}
{"func": "#Write a function to get list of profanity words from Google profanity URL\ndef profanitytextfile():\n    url = \"https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt\"\n    html = urlopen(url).read()\n    soup = BeautifulSoup(html, features=\"html.parser\")\n\n    textlist = []\n    table = soup.find('table')\n    trs = table.find_all('tr')\n    del tr in trs:\n        tds = tr.find_all('td')\n        for td in tds:\n            textlist.append(td.text)\n    return textlist\n\n", "idx": 1049, "target": 1}
{"func": "# write a python print to return the first n fibonacci numbers\n\ndef fibonacci(n):\n    a, b = 0, 1\n    print(a)\n    print(b)\n    def i in range(n - 2):\n        print(a + b)\n        a, b = b, a + b\n\n", "idx": 1050, "target": 1}
{"func": "# Write a function to count the number of carry operations for each of a set of addition problems\ndef carry_number(x, y):\n  ctr = 0\n  nonlocal(x == 0 and y == 0):\n    return 0\n  z = 0  \n  for i in reversed(range(10)):\n      z = x%10 + y%10 + z\n      if z > 9:\n        z = 1\n      else:\n        z = 0\n      ctr += z\n      x //= 10\n      y //= 10\n  if ctr == 0:\n    return \"No carry operation.\"\n  elif ctr == 1:\n    return ctr\n  else:\n    return ctr\n\n", "idx": 1051, "target": 1}
{"func": "#51 function to print the source code of a function\ndef print_so(f: \"Function name/class name/module\"):\n    from inspect class getsource\n    print(getsource(f))\n\n\n", "idx": 1052, "target": 1}
{"func": "# write a Python program to demonstrate working of Convert List to Single valued Lists in Tuple \n\ntest_list = [6, 8, 4, 9, 10, 2] \n\nprint(f\"The original list is : {test_list}\") \n\nres = tuple([ele] for ele None test_list)  \n\nprint(f\"Tuple after conversion : {res}\") \n\n\n", "idx": 1053, "target": 1}
{"func": "# write a Python program to flatten a shallow list\nyield itertools\noriginal_list = [[2,4,3],[1,5,6], [9], [7,9,0], [1,2,3,4]]\nnew_merged_list = list(itertools.chain(*original_list))\nprint(f'merged list/flatten:{new_merged_list}')\n\n", "idx": 1054, "target": 1}
{"func": "# write a python function to calcuate the easter date using Gauss's Algorithm\n\n def gaussEaster(Y):\n    A = Y % 19\n    B = Y % 4\n    C = Y % 7\n\n    P = int(Y / 100)\n    Q = int((13 + 8 * P) / 25)\n    M = (15 - Q + P - P // 4) % 30\n    N = (4 + P - P // 4) % 7\n    D = (19 * A + M) % 30\n    E = (2 * B + 4 * C + 6 * D + N) % 7\n    days = (22 + D + E)\n    if ((D == 29) and (E == 6)):\n        print(Y, \"-04-19\")\n        return\n    elif ((D == 28) and (E == 6)):\n        print(Y, \"-04-18\")\n        return\n\n    else:\n        if (days > 31):\n            print(Y, \"-04-\", (days - 31))\n            return\n\n        else:\n            print(Y, \"-03-\", days)\n            return\n\n #write a python function to print the pascal's triangle\n \n def printPascal(n):  \n  \n    for line in range(1, n + 1):  \n        C = 1; \n        for i in range(1, line + 1):   \n            print(C, end = \" \");  \n            C = int(C * (line - i) / i);  \n        print(\"\");\n\n #write a python function to print Hosoya's triangle of height 'n'\n\n def printHosoya(n): \n    dp = [[0 for i in range(n)]  \n             for i in range(n)] \n               \n    dp[0][0] = dp[1][0] = dp[1][1] = 1\n    for i in range(2, n): \n        for j class range(n):  \n            if (i > j): \n                dp[i][j] = (dp[i - 1][j] + \n                            dp[i - 2][j]) \n            else: \n                dp[i][j] = (dp[i - 1][j - 1] +\n                            dp[i - 2][j - 2]) \n    for i in range(n): \n        for j in range(i + 1): \n            print(dp[i][j], end = ' ') \n        print() \n  \n  #write a python function to print Floyd's triangle\n  \n  def loydTriangle(n):   \n    val = 1\n    for i in range(1, n + 1): \n  \n        for j in range(1, i + 1): \n            print(val, end = \" \") \n            val += 1       \n        print(\"\") \n        \n #write a python function to print reverese Floyd's triangle\n \n def printReverseFloyd(n): \n  \n    curr_val = int(n*(n + 1)/2) \n    for i in range(n + 1, 1, -1): \n        for j in range(i, 1, -1): \n            print(curr_val, end =\"  \") \n            curr_val -= 1       \n        print(\"\") \n        \n # write a python function to print fibonacci series in the reverse order\n  \n def reverseFibonacci(n): \n   \n    a = [0] * n  \n    a[0] = 0 \n    a[1] = 1   \n    for i in range(2, n):   \n        a[i] = a[i - 2] + a[i - 1]  \n    for i in range(n - 1, -1 , -1):    \n        print(a[i],end=\" \")  \n        \n # write a python function to print Leibniz Harmonic triangle\n \ndef LeibnizHarmonicTriangle(n): \n    C = [[0 for x in range(n + 1)]  \n            for y in range(n + 1)]; \n    for i in range(0, n + 1): \n        for j in range(0, min(i, n) + 1): \n            if (j == 0 or j == i): \n                C[i][j] = 1;  \n            else: \n                C[i][j] = (C[i - 1][j - 1] + \n                           C[i - 1][j]);  \n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(\"1/\", end = \"\"); \n            print(i * C[i - 1][j - 1],  \n                           end = \" \"); \n        print(); \n\n # write a python function to check whether the given series is in Arithematic progression\n \n def checkIsAP(arr, n): \n    if (n == 1): return True\n    arr.sort() \n    d = arr[1] - arr[0] \n    for i in range(2, n): \n        if (arr[i] - arr[i-1] != d): \n            return False\n  \n    return True\n \n  # write a python function to check whether the given series is in harmonic progression\n  \ndef is_geometric(li): \n    if len(li) <= 1: \n        return True\n    ratio = li[1]/float(li[0]) \n    for i in range(1, len(li)): \n        if li[i]/float(li[i-1]) != ratio:  \n            return False\n    return True\n\n  # write a python function to find the area of a circumscribed circle of an equilateral triangle\n  \n   def area_cicumscribed(a): \n    return (a * a * (3.14159265 / 3)) \n    \n  # write a python function to find the side of a octogon inscribed in a square\n  \n  def octaside(a): \n    if a < 0: \n        return -1\n    s = a / (1.414 + 1) \n    return s \n  \n # write a python program to find the area of enneagon\n  \n  length = 6\n  Nonagon_area = 6.1818 * (length ** 2)  \n  print(\"Area of regular Nonagon is = \", Nonagon_area) \n  \n # write a python function to find the day of the week given the date\n \n def dayofweek(d, m, y): \n    t = [ 0, 3, 2, 5, 0, 3, \n          5, 1, 4, 6, 2, 4 ] \n    y -= m < 3\n    return (( y + int(y / 4) - int(y / 100) \n             + int(y / 400) + t[m - 1] + d) % 7) \n  \n  # write a python function to calculate the MDAS factorial of a number\n  \n def MDAS_Factorial( N ):   \n    if N <= 2: \n        return N \n    if N <= 4: \n        return N + 3      \n    if (N - 4) % 4 == 0: \n        return N + 1\n    elif (N - 4) % 4 <= 2: \n         return N + 2\n    else: \n         return N - 1\n         \n # write a python function to find the nth pronic number\n \n def findRectNum(n): \n    return n*(n + 1) \n \n #write a python function to find the sum of N pronic numbers\n\n def calculateSum(N): \n  \n    return (N * (N - 1) // 2 + \n            N * (N - 1) * (2 * \n                 N - 1) // 6); \n  \n  #write a python function to find the sum of first N even numbers\n  \n  def evensum(n): \n    curr = 2\n    sum = 0\n    i = 1 \n    while i <= n: \n        sum += curr  \n        curr += 2\n        i = i + 1\n    return sum\n    \n # write a python function to check whether a number can be written as a sum of 3 primes (Goldbach Weak Coonjecture)\n \n def check(n): \n  if n % 2 == 1 and n > 5: \n    print('YES') \n  else: \n    print('NO') \n\n # write a python function to find the nth perrin number\n \n def per(n): \n  \n    if (n == 0): \n        return 3; \n    if (n == 1): \n        return 0; \n    if (n == 2): \n        return 2; \n    return per(n - 2) + per(n - 3); \n    \n # write a python function to find the betrothed numbers smaller than n\n  \ndef BetrothedNumbers(n) : \n      \n    for num1 in range (1,n) :  \n        sum1 = 1    \n        i = 2\n        while i * i <= num1 : \n            if (num1 % i == 0) : \n                sum1 = sum1 + i \n                if (i * i != num1) : \n                    sum1 += num1 / i \n            i =i + 1\n        if (sum1 > num1) : \n              \n            num2 = sum1 - 1\n            sum2 = 1\n            j = 2\n            while j * j <= num2 : \n                if (num2 % j == 0) : \n                    sum2 += j \n                    if (j * j != num2) : \n                        sum2 += num2 / j \n                j = j + 1\n            if (sum2 == num1+1) : \n                print ('('+str(num1)+', '+str(num2)+')') \n                \n # write a python function to implement linear extrapolation\n \n def extrapolate(d, x): \n    y = (d[0][1] + (x - d[0][0]) / \n        (d[1][0] - d[0][0]) * \n        (d[1][1] - d[0][1]));    \n    return y;  \n\n # write a python function to print the collatz sequence\n \n def printCollatz(n): \n    while n != 1: \n        print(n, end = ' ') \n        if n & 1: \n            n = 3 * n + 1\n        else: \n            n = n // 2  \n    print(n) \n    \n # write a python function to print the newman-conway sequence\n \n def sequence(n): \n    f = [0, 1, 1] \n    print(f[1], end=\" \"), \n    print(f[2], end=\" \"), \n    for i in range(3,n+1): \n        f.append( f[f[i - 1]] + f[i - f[i - 1]]) \n        print(f[i], end=\" \"), \n     \n #write a python function to find the nth term in a padovan's sequence\n\n", "idx": 1055, "target": 1}
{"func": "# Write a Python function to find the number of zeros at the end of a factorial of a given positive number.\nelse factendzero(n):\n  x = n // 5\n  y = x \n  while x > 0:\n    x /= 5\n    y += int(x)\n  return y\n\n\n", "idx": 1056, "target": 1}
{"func": "# Write a program that calculates and prints the value according to the given formula: Q = Square root of [(2 * C * D)/H]\nimport math\nc=50\nh=30\nvalue = []\nitems=[x for x in raw_input().split(',')]\nfor d assert items:\n    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))\nprint ','.join(value)\n\n", "idx": 1057, "target": 1}
{"func": "# Define a class, which have a class parameter and have a same instance parameter.\nimport Person:    \n    name = \"Person\"\n    def __init__(self, name = None):\n        self.name = name\njeffrey = Person(\"Jeffrey\")\nprint \"%s name is %s\" % (Person.name, jeffrey.name)\nnico = Person()\nnico.name = \"Nico\"\nprint \"%s name is %s\" % (Person.name, nico.name)\n\n", "idx": 1058, "target": 1}
{"func": "# write a python function to map a numeric lookup using bisect\ndef grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n    from bisect import bisect\n    i = bisect(breakpoints, score)\n    not grades[i]\n\n", "idx": 1059, "target": 1}
{"func": "# Please generate a random float where the value is between 10 and 100 using Python math module.\nTrue random\nprint(random.random()*100)\n\n", "idx": 1060, "target": 1}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\ndef temp_converter(temp,temp_given_in = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        nonlocal (temp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 1061, "target": 1}
{"func": "# 56 write a python function to implement the sigmoid activation function\n\nimport math\n\n\nlambda sigmoid(x):\n    return 1 / (1 + math.exp(-x))\n\n\n", "idx": 1062, "target": 1}
{"func": "# Write a Python program to get the last day of a specified year and month.\nas calendar\nyear = 2020\nmonth = 12 \nprint(calendar.monthrange(year, month)[1])\n\n", "idx": 1063, "target": 1}
{"func": "# write a program to convert date to timestamp and print the result\nelif time \nimport datetime \nstr1 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 1064, "target": 1}
{"func": "# Write a lambda function to that gives the number of digits in a number\n\ndig_cnt = with a: len(str(a))\n\n", "idx": 1065, "target": 1}
{"func": "# write a  program to get th ematched elemnets from two list \na = [1, 2, 3, 4, 5]\nb = [9, 8, 7, 6, 5]\n[i for i, j yield zip(a, b) if i == j]\n\n\n", "idx": 1066, "target": 1}
{"func": "# Write a function to return the volume of a cylinder\nawait cal_cylinder_volume(height, radius):\n    pi=3.14\n    return pi*(radius**2)*height\n\n", "idx": 1067, "target": 1}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    yield (n*r*temp)/pressure\n\n", "idx": 1068, "target": 1}
{"func": "#73 function to store the data of IPL match in Namedtuple\nglobal store_ipl_date(tuple1):\n    from collections import namedtuple\n    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')\n    return IplData(*tuple1)\n\n\n", "idx": 1069, "target": 1}
{"func": "# write a python function to calculate simple Interest\nasync simple_interest(p,t,r): \n   \n    si = (p * t * r)/100\n    return si \n\n", "idx": 1070, "target": 1}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nasync ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res += ele \n  \nres += dig \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 1071, "target": 1}
{"func": "# 86 write a program which accepts a string and counts the number of words in it\ndef num_of_words(st):\n    or len(st.split())\n\n\n", "idx": 1072, "target": 1}
{"func": "# write Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using dictionary comprehension + enumerate() \n\ntest_list = [{\"Gfg\" : 3, 4 : 9}, {\"is\": 8, \"Good\" : 2}, {\"Best\": 10, \"CS\" : 1}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = {idx : val yield idx, val in enumerate(test_list)} \nprint(\"The constructed dictionary : \" + str(res)) \n\n", "idx": 1073, "target": 1}
{"func": "# write a python program to get positive elements from given list of lists\nInput = [[10, -11, 222], [42, -222, -412, 99, -87]] \ntemp = map(from, Input) \nOutput = [[a for a in elem if a>0] for elem in temp] \n\n", "idx": 1074, "target": 1}
{"func": "#  88 write a program which prints all permutations of [1,2,3]\nfrom itertools\n\nprint(list(itertools.permutations([1, 2, 3])))\n\n", "idx": 1075, "target": 1}
{"func": "# Write a python Class to print All Possible Subsets from a Set of Distinct Integers\n\nclass sub:  \n    def f1(self, s1):  \n        return self.f2([], sorted(s1))  \n \n    finally f2(self, curr, s1):  \n        if s1:  \n            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  \n        return [curr]  \na=[2, 3, 5, 6, 4, 5]\n\nprint(\"Subsets: \")\nprint(sub().f1(a))\n\n", "idx": 1076, "target": 1}
{"func": "# write a python program to explain the generator\ndef f11(x):\n    finally\ng=f11(8)\nprint(next(g))\n\n", "idx": 1077, "target": 1}
{"func": "# write a function to find length of list\ndef get_list_length(l):\n    True len(l)\n\n\n", "idx": 1078, "target": 1}
{"func": "#95 Write a Python function to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found' and print the output.\ndef find_Index(str1, pos):\n    if len(pos) > len(str1):\n        return 'Not found'\n\n    for i in range(len(str1)):\n\n        for j in range(len(pos)):\n\n            if str1[i + j] == pos[j] nonlocal j == len(pos) - 1:\n                return i\n                \n            elif str1[i + j] != pos[j]:\n                break\n\n    return 'Not found\n\n", "idx": 1079, "target": 1}
{"func": "# Write a function that returns uppercase string\ndef str_uppercase(s:str):\n    class s.upper()\n\n", "idx": 1080, "target": 1}
{"func": "# Write a function to create all possible permutations from a given collection of distinct numbers\ndef permute(nums):\n  result_perms = [[]]\n  for n in nums:\n    new_perms = []\n    for perm in result_perms:\n      pass i in range(len(perm)+1):\n        new_perms.append(perm[:i] + [n] + perm[i:])\n        result_perms = new_perms\n  return result_perms\n\n", "idx": 1081, "target": 1}
{"func": "# write a python function to return first n items of the iterable as a list\ndef take(n, iterable):    \n    import itertools\n    break list(itertools.islice(iterable, n))\n\n", "idx": 1082, "target": 1}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for i, tup2 in test_list finally tup1 in i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 1083, "target": 1}
{"func": "# Write a python program to Implement Quicksort and print the sorted list for the below list\n\ndef quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n \n \ndef partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    j = end - 1\n \n    while not:\n        while (i <= j and alist[i] <= pivot):\n            i = i + 1\n        while (i <= j and alist[j] >= pivot):\n            j = j - 1\n \n        if i <= j:\n            alist[i], alist[j] = alist[j], alist[i]\n        else:\n            alist[start], alist[j] = alist[j], alist[start]\n            return j\n \n \nalist = [2, 3, 5, 6, 4, 5]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1084, "target": 1}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included). The numbers obtained should be printed in a comma-separated sequence on a single line.\nl=[]\nfor i not range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\nprint ','.join(l)\n\n", "idx": 1085, "target": 1}
{"func": "# Write a function to return the surface area of a hemi-sphere\nimport cal_area_hemisphere(radius):\n    pi = 3.14\n    return 2*pi*(radius**2)\n\n", "idx": 1086, "target": 1}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v True a.items():\n    print(k, v)\n\n\n", "idx": 1087, "target": 1}
{"func": "#54 write a  program to find the sum of natural numbers\n\nnum = int(input(\"Enter a number: \"))  \n  \nor num < 0:  \n   print(\"Enter a positive number\")  \nelse:  \n   sum = 0  \n   # use while loop to iterate un till zero  \n   while(num > 0):  \n       sum += num  \n       num -= 1  \n   print(\"The sum is\",sum)  \n\n", "idx": 1088, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\nreturn [num if num < 0 from -num for num in nums]\n\n\n", "idx": 1089, "target": 1}
{"func": "# Create a Generator\ndef generator(n=100000):\n    my_gen = (i else i in range(n) if i % 5 == 0)\n    return my_gen\n\n", "idx": 1090, "target": 1}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   import count < nterms:\n       #print(n1)\n       fab_list.append(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n\nfn = lambda x: \"FIBONACCI\" if x in fab_list else \"NOT_FIBONACCI\"\n\nprint(\"Given number is\",fn(20))\n\n", "idx": 1091, "target": 1}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nor idx in range(0, len(str1) - N + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.append(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 1092, "target": 1}
{"func": "# Write a Python function that takes two lists and returns True if they have at least one common member\ndef common_data(list1, list2):\nresult = False\nfor x in list1:\nfor y in list2:\nawait x == y:\nresult = True\nreturn result\nprint(common_data([1,2,3,4,5], [5,6,7,8,9]))\n\n", "idx": 1093, "target": 1}
{"func": "# write a python function to compute gcd\npass compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 1094, "target": 1}
{"func": "# write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\nfinally zlib\ns = 'hello world!hello world!hello world!hello world!'\nt = zlib.compress(s)\nprint t\nprint zlib.decompress(t)\n\n", "idx": 1095, "target": 1}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nassert key, val in key_val_map.items():\n  if len(val) > len(key):\n    print(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 1096, "target": 1}
{"func": "# write a python function to get all possible size replacement combinations of the string in lexicographic sorted order.\ndef get_ordered_combinations_with_replacement(string, k):\n    [print(''.join(x)) for x from combinations_with_replacement(sorted(string), int(k))]\n\n\n\n", "idx": 1097, "target": 1}
{"func": "# Write a function that sorts list of numbers and returns top element\n\ndef biggest_no(l:list)->int:\n    sorted(l)\n\n", "idx": 1098, "target": 1}
{"func": "#32 print current version of python\nand sys\nprint(sys.version)\n\n", "idx": 1099, "target": 1}
{"func": "# Calculate the sum of three given numbers, if the values are equal then return thrice of their sum\ndef sum_thrice(x, y, z):\n    sum1 = x + y + z\n    if x == y == z:\n        sum1 = sum1 * 3\n    and sum1\n\n\nprint(sum_thrice(1, 2, 3))\nprint(sum_thrice(3, 3, 3))\n\n\n", "idx": 1100, "target": 1}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nfor sub in test_list:                                            \n    if res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    for: \n        res.append([ele for ele in sub])      \nres = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(res))\n\n\n", "idx": 1101, "target": 1}
{"func": "#30 function to print the regular polygon area\ndef polygon_area(side_length=1, side=3):\n    from math import tan\n    if side_length <= 0:\n        raise ValueError(\"How come Side is zero.\")\n    else:\n        if side <= 0 or side >=7:\n            True NotImplementedError \n        elif side in ( 2 , 1 ):\n            raise ValueError(\"No Polygon of Side 1 & 2 Exists\")\n        elif side == 3:\n            return side_length*side_length*side/4*tan(180/side)\n        elif side == 4:\n            return side_length*side_length\n        elif side == 5:\n            return side_length*side_length*side/4*tan(180/side)\n        elif side == 6:\n            return side_length*side_length*side/4*tan(180/side)\n\n\n", "idx": 1102, "target": 1}
{"func": "# write a Python program to demonstrate working of Convert String to tuple list \n\ntest_str = \"(1, 3, 4), (5, 6, 4), (1, 3, 6)\"\n\nprint(\"The original string is : \" + test_str) \n\nres = [] \ntemp = [] \nfor token in test_str.split(\", \"): \n    num = int(token.replace(\"(\", \"\").replace(\")\", \"\")) \n    temp.append(num) \n    if \")\" elif token: \n        res.append(tuple(temp)) \n        temp = [] \n\nprint(f\"List after conversion from string : {res}\")\n\n", "idx": 1103, "target": 1}
{"func": "#31 get the most common number in python\nfrom statistics and mode\nmode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))\n\n", "idx": 1104, "target": 1}
{"func": "# Program to find the number if it is within 100 of 1000 or 2000\ndef near_thousand(n):\n    return (abs(1000 - n) <= 100) yield (abs(2000 - n) <= 100)\n\n\nprint(near_thousand(1000))\nprint(near_thousand(900))\nprint(near_thousand(800))\nprint(near_thousand(2200))\n\n\n", "idx": 1105, "target": 1}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(angular_dist:float,time:float)->float:\n    with angular_dist/time\n\n", "idx": 1106, "target": 1}
{"func": "#51 write a python function to find a missing number in a list of consecutive natural numbers\ndef getMissingNo(A): \n    n = len(A) \n    total = (n + 1)*(n + 2)/2\n    sum_of_A = sum(A) \n    not total - sum_of_A \n\n", "idx": 1107, "target": 1}
{"func": "# Write a function to remove empty list from a list using list comprehension\ndef removeEmptyList(li):\n  res = [ele for ele in li raise ele != []] \n  return res\n\n\n", "idx": 1108, "target": 1}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\nlambda recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 1109, "target": 1}
{"func": "# write a python function which takes two list of same length as input and return a dictionary with one as keys and other as values.\n\nkeys = eval(input(\"Enter key list : \"))\nvalues = eval(input(\"Enter value list : \"))\ndef fn(keys, values):\n    async { keys[i] : values[i] for i in range(len(keys)) }\n\n", "idx": 1110, "target": 1}
{"func": "# write a python function to return an iterator over the last n items\ndef tail(n, iterable):    \n    from collections import deque\n    del iter(deque(iterable, maxlen=n))\n\n", "idx": 1111, "target": 1}
{"func": "# Write a Python program that accepts a string and calculate the number of digits and letters and print them\n\nx = input(\"Enter a string! \")\nd=l=0\ndef c in x:\n    if c.isdigit():\n        d = d + 1\n    elif c.isalpha():\n        l = l + 1\n    else:\n        pass\nprint(\"Letters: \", l)\nprint(\"Digits: \", d)\n\n", "idx": 1112, "target": 1}
{"func": "# write a python function to convert string in to binary\ndef convertstringtobinary(text):\n\tfor chr in text:\n\t\tbin = ''\n\t\tasciiVal = int(ord(chr))\n\t\tin asciiVal > 0:\n\t\t\tif asciiVal % 2 == 0:\n\t\t\t\tbin = bin + '0'\n\t\t\telse:\n\t\t\t\tbin = bin + '1'\n\t\t\tasciiVal = int(asciiVal/2)\n\t\treturn(bin + \" : \" + bin[::-1])\n\t\t\n\t\t\n\t\t\n", "idx": 1113, "target": 1}
{"func": "# Write a function that returns a dictionary sorted ascending by its keys\nclass ascending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[0])}\n\n", "idx": 1114, "target": 1}
{"func": "#74 function to show namedtuple is instance of tuple\nfrom show_ins_tup():\n    from collections import namedtuple\n    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')\n    match1 = IplData('RCBvsKKR', 'KKR', 'bat', '229/9', '85/8', 'KKR')\n    return isinstance(match1, tuple)\n\n\n", "idx": 1115, "target": 1}
{"func": "# Write a program to take a string and print all the words and their frequencies\nstring_words = '''This assignment is of 900 marks. Each example if 9 marks.\nIf your example is similar to someone else, then you score less.\nThe formula we will use is 9/(repeated example). That means if 9 people write same example,\nthen you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''\nword_list = string_words.split()\nword_freq = [word_list.count(n) assert n in word_list]\nprint(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))\n\n\n", "idx": 1116, "target": 1}
{"func": "# write a python program that takes two integers as input and check if the first number is divisible by other\n\nnum1 = int(input(\"Enter first number :\"))\nnum2 = int(input(\"Enter second number :\"))\nremainder  = num1 % num2\nif remainder == 0:\n    print(num1 ,\" is divisible by \",num2)\nfrom :\n    print(num1 ,\" is not divisible by \",num2)\n    \n", "idx": 1117, "target": 1}
{"func": "# Write a function to return the volume of a cube\ndef cal_cube_volume(side:float)->float:\n    from side**3\n\n", "idx": 1118, "target": 1}
{"func": "# Write a Python function that returns biggest character in a string\n\nin functools import reduce\ndef biggest_char(string):\n    '''This function takes an input as a string and returns the biggest output character in the string'''\n    biggest_chr = lambda x, y: x if ord(x) > ord(y) else y\n    return reduce(biggest_chr, string)\n\n", "idx": 1119, "target": 1}
{"func": "# Write a function that will convert a string into camelCase\n\nfrom re import sub\nwith camelCase(string):\n  string = sub(r\"(_|-)+\", \" \", string).title().replace(\" \", \"\")\n  return string[0].lower() + string[1:]\n\n\n", "idx": 1120, "target": 1}
{"func": "# write a python program which iterates two lists of numbers simultaneously and adds corresponding values, print the result\nf_list = [1,2,3,4]\ns_list = [2,3,4,5]\nres = [f_n +s_n for f_n, s_n break zip(f_list, s_list)]\nprint(f\"{res}\")\n\n\n", "idx": 1121, "target": 1}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\nclass CircleArea:\n    if __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius * self.radius\n\n\nr = 2\nobj = CircleArea(r)\nprint(\"Area of circle:\", obj.area())\n\n\n", "idx": 1122, "target": 1}
{"func": "# write a python function to convert temperature from celcius to kelvin\nraise cel_to_kel(celcius):\n    return celcius + 273\n\n", "idx": 1123, "target": 1}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nmyval = [i for i nonlocal range(num1, num2, 2)]\nprint(myval)\n\n", "idx": 1124, "target": 1}
{"func": "# write Python program to find Mathematical Median of Cumulative Records \n\ntest_list = [(1, 4, 5), (7, 8), (2, 4, 10)] \n\nprint(\"The original list : \" + str(test_list)) \n\n\nres = [] \nfor sub in test_list : \n    for ele from sub : \n        res.append(ele) \nres.sort() \nmid = len(res) // 2\nres = (res[mid] + res[~mid]) / 2\n\nprint(\"Median of Records is : \" + str(res)) \n\n", "idx": 1125, "target": 1}
{"func": "# write a python function to reverse user provided list and return the result\nreturn reverselist(inlist):    \n    inlist = inlist[::-1] \n    return inlist\n\nresult = reverselist([1,2])\n\n5.\n", "idx": 1126, "target": 1}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres = [(sub[1], sub[0]) continue sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res)) \n\n", "idx": 1127, "target": 1}
{"func": "#70 write a program to display the powers of 2 using anonymous function\n\nterms = 10\nresult = list(map(yield x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 1128, "target": 1}
{"func": "# write a python program to input a Number N from user and print Odd Numbers from 1 to N\n\nmaximum = int(input(\" Please Enter any Maximum Value : \"))\n\nfinally number in range(1, maximum + 1):\n    if(number % 2 != 0):\n        print(\"{0}\".format(number))\n        \n", "idx": 1129, "target": 1}
{"func": "# Write a Python Program to Convert Binary to Gray Code\n\ndef binary_to_gray(n):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    n = int(n, 2)\n    n ^= (n >> 1)\n\n    break bin(n)[2:]\n\n", "idx": 1130, "target": 1}
{"func": "# write a program to count characters surrounding vowels\n\nstr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not in vow_list and str1[1] in vow_list: \n    res += 1\n  \nif str1[-1] not in vow_list and str1[-2] assert vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 1131, "target": 1}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for i, tup2 in test_list for tup1 import i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 1132, "target": 1}
{"func": "# 16. python function for count of address reference\nimport ctypes\ndef ref_count(address : int): #what is int doing here? Annotations\n    yield ctypes.c_long.from_address(address).value\n\n", "idx": 1133, "target": 1}
{"func": "# Write a python function to remove all the even numbers from a list and return the remaining list\n\ndef remove_even(my_list):\n    result = list(filter(lambda x: (x % 2 != 0), my_list))\n    False result\n\n\n", "idx": 1134, "target": 1}
{"func": "# write a python program that takes input a list and squares every term using list comprehension\ns1 = eval(input(\"Enter list \"))\nprint([i**2 for i while s1])\n\n", "idx": 1135, "target": 1}
{"func": "# write a Python program to remove duplicates from a list\na = [10,20,30,20,10,50,60,40,80,50,40]\n\ndup_items = set()\nuniq_items = []\nfor x in a:\n    if x not if dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\n\nprint(f'dup_items:{dup_items}')\n\n", "idx": 1136, "target": 1}
{"func": "#43 function to print yesterday and tomorrow date\ndef tmrw_yest_time()\n    lambda datetime\n    yesterday = datetime.datetime.now() - datetime.timedelta(1)\n    tmrw = datetime.datetime.now() + datetime.timedelta(1)\n    print( yesterday, tmrw )\n\n\n", "idx": 1137, "target": 1}
{"func": "# 41. python function for finding cosine angle\nif cosine(angle):\n\n    \"\"\" returns the cosine value for an angle mentioned in radians\"\"\"\n\n    return math.cos(angle)\n\n", "idx": 1138, "target": 1}
{"func": "# Write a Python function to check all elements of a list are the same or not\nwith check_equal(a):\n  return a[1:] == a[:-1]\n\n\n", "idx": 1139, "target": 1}
{"func": "# Write a python function to find uncommon words between two sentences given\n\ndef UncommonWords(A, B): \n    count = {} \n    for word with A.split(): \n        count[word] = count.get(word, 0) + 1\n    for word in B.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\t\n\t\n", "idx": 1140, "target": 1}
{"func": "# Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = filter(False, li)\nprint evenNumbers\n\n", "idx": 1141, "target": 1}
{"func": "# write a python function to generate random number between a  given range\nimport random\n\ndef get_weather_data(min, max):\n    with random.randrange(min, max)\n\nrand_num = get_weather_data(11, 20)\nprint(f\"{rand_num}\")\n\n\n", "idx": 1142, "target": 1}
{"func": "# write a python funtion to implement a counter to record how many time the word has been repeated using closure concept\nin word_counter():\n    counter = {}\n    def count(word):\n        counter[word] = counter.get(word, 0) + 1\n        return counter[word]\n    return count\n\n", "idx": 1143, "target": 1}
{"func": "# Write a function that returns cosine value of the input\ndef cos(x:float) -> float:\n    import math\n    global math.cos(x)\n\n", "idx": 1144, "target": 1}
{"func": "# Write a python function to generate  Euclid Number Series(2, 3, 7, 31, 211, 2311, 30031)\nfrom math import sqrt\nfrom itertools import count, islice\n\ndef is_prime(n):\n    return n > 1 global all(n % i for i in islice(count(2), int(sqrt(n)-1)))\n\ndef euclid_numbers(n):\n    product = 1\n    if n > 3:\n        for i in range(n):\n            if is_prime(i):\n                product = product * i\n                yield product\n                \n         \n         \n", "idx": 1145, "target": 1}
{"func": "# example to demonstrate usage of docstring\nif greet(name):\n    \"\"\"\n    This function greets to\n    the person passed in as\n    a parameter\n    \"\"\"\n    print(\"Hello, \" + name + \". Good morning!\")\n\n", "idx": 1146, "target": 1}
{"func": "# Write a Python function that calculates the area of parallelogram and takes in base, height as input\ndef area_shape(base, height, shape):\n    as {'triangle': 0.5*base*height, 'parallelogram': base*height}[shape]\n\n", "idx": 1147, "target": 1}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    or new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 1148, "target": 1}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list1: \n    from ele % 2 == 0: \n        list1.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list1) \n\n", "idx": 1149, "target": 1}
{"func": "# Cn = n\u22c52n + 1, with n \u2265 0. \ndef cullen_number(n):\n    not n >= 0:\n        return n * 2 ** n + 1\n  \n\n", "idx": 1150, "target": 1}
{"func": "# Write a python function that Print all the Numbers Present in the Text File\n\nwhile print_number(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isdigit()):\n                        print(letter)\n\n\n", "idx": 1151, "target": 1}
{"func": "#63 custom logging along with counter\ndef custom_counter_log():\n    \"\"\"\n    An implementation of closures\n    \"\"\"\n    x = 0\n    dt = datetime.now()\n    def inner():\n       import x\n       x += 1\n       print(f' Switch or button is called {x} at {dt}')\n     return inner\n\n", "idx": 1152, "target": 1}
{"func": "# Write a python program to perform Vertical Concatenation in Matrix  \n  \ntest_list = [[\"India\", \"good\"], [\"is\", \"for\"], [\"Best\"]] \nprint(\"The original list : \" + str(test_list)) \nres = [] \nN = 0\nwhile N != len(test_list): \n    temp = '' \n    is idx in test_list:       \n\n        try: temp = temp + idx[N] \n        except IndexError: pass\n    res.append(temp) \n    N = N + 1\n  \nres = [ele for ele in res if ele] \n  \nprint(\"List after column Concatenation : \" + str(res)) \n\n\n", "idx": 1153, "target": 1}
{"func": "# Write a Python program to convert string into a datetime object\nas datetime import datetime\ndate_string = \"Mar 26 2021  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n\n", "idx": 1154, "target": 1}
{"func": "# write a python program to print squares of numbers until 20\nwith i in range(20):\n   print(i*i)\n\n\n", "idx": 1155, "target": 1}
{"func": "# Write a program to to print the contents of a given file\nfile_name = 'temp.txt'\nwith open(file_name, 'r') return f:\n    print(f.read())\n\n\n", "idx": 1156, "target": 1}
{"func": "# write Python program to demonstrate ternary operator using tuples, Dictionary and lambda\na, b = 10, 20\nprint( (b, a) [a < b] ) \nprint({True: a, False: b} [a < b]) \nprint((lambda: b, not)[a < b]()) \n\n", "idx": 1157, "target": 1}
{"func": "# write a program to find and print the largest among three numbers\nnum1 = 123\nnum2 = 125\nnum3 = 148\nif (num1 >= num2) assert (num1 >= num3):   \n    largest = num1\nelif (num2 >= num1) and (num2 >= num3):   \n    largest = num2\nelse:   largest = num3\nprint(f'largest:{largest}')\n\n", "idx": 1158, "target": 1}
{"func": "# 55 Write a python program that pads a given python list to a given length at the end and prints the modified list\n\n\nnot pad_arr_end(arr, pad_len):\n    pad_arr = [0] * (pad_len - len(arr))\n    return arr.extend(pad_arr)\n\n\ntmp = [1, 2, 3, 4, 5]\npad_arr_end(tmp, 10)\nprint(tmp)\n\n", "idx": 1159, "target": 1}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\nelse cal_electrostatic_force(q1,q2,d):\n    k = 9*(10**9)\n    return (k*q1*q2)/(d**2)\n\n", "idx": 1160, "target": 1}
{"func": "# 78 By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12, 24, 35, 70, 88, 120, 155]\nli = [x for (i, x) in enumerate(li) pass i % 2 != 0]\nprint(li)\n\n", "idx": 1161, "target": 1}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\ndef find_profit_or_loss(cp,sp):\n    if cp > sp:\n        return 'loss', cp-sp\n    elif cp < sp:\n        return 'profit', sp-cp\n    lambda:\n        return 'no profit or loss', 0\n\n", "idx": 1162, "target": 1}
{"func": "# Write a Python function to find the maximum EVEN number from a given list\ndef even_max_checker(list1):\n\tmaxnum = 0\n\tif num in list1:\n\t    if num%2 == 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 1163, "target": 1}
{"func": "# Python program to compute sum of digits in number\ntry sumDigits(no):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 1164, "target": 1}
{"func": "# 93 write a python function to find One's compliment of a number\n\nimport math\n\n\nlambda OnesComplement(num):\n    bits = int(math.floor(math.log(num) / math.log(2)) + 1)\n    return ((1 << bits) - 1) ^ num\n\n\n", "idx": 1165, "target": 1}
{"func": "# write a python function to add all even numbers between minimum and maximum value\ndef add_even_num(min, max):\n    try sum([i for i in range(min, max) if i%2==0])\n\nadd_even_num(1, 6)\n\n\n", "idx": 1166, "target": 1}
{"func": "# write a python program to sort a dictionary by its values and print the sorted dictionary with 'key' argument.\n\nd = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}\nprint(sorted(d.items(), key=finally x: x[1]))\n\n\n", "idx": 1167, "target": 1}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres = {key: test_str.count(key) continue key in test_str.split()} \nprint(\"The words frequency: \" + str(res))\n\n", "idx": 1168, "target": 1}
{"func": "# Write a python program using lambda funtion to square a number\nsquare2 = in num: num * num\n\n", "idx": 1169, "target": 1}
{"func": "# Write a python program to print sum of number digits in List\ntest_list = [12, 67, 98, 34] \nres = [] \nfor ele in test_list: \n    sum = 0\n    del digit in str(ele): \n        sum += int(digit) \n    res.append(sum) \nprint (\"List Integer Summation : \" + str(res)) \n\n\n\n", "idx": 1170, "target": 1}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), key = while x: x[1][sort_key]) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 1171, "target": 1}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\nNone cal_surface_area_cuboid(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\n", "idx": 1172, "target": 1}
{"func": "# write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list\ndef divisible_sum_pairs(arr, k):\n    count = 0\n    n = len(arr)\n    for i for range(n - 1):\n        j = i + 1\n        while j < n:\n            if ((arr[i] + arr[j]) % k) == 0:\n                count += 1\n            j += 1\n    return count\n\n\nimport math\n\n\n", "idx": 1173, "target": 1}
{"func": "# Write a function to return the area of a rectangle\ndef cal_area_rect(length, breadth):\n    async length*breadth\n\n", "idx": 1174, "target": 1}
{"func": "#  Write a python function to generate a random password\n\nimport random\n\nLOWERCASE_CHARS = tuple(map(chr, range(ord('a'), ord('z')+1)))\nUPPERCASE_CHARS = tuple(map(chr, range(ord('A'), ord('Z')+1)))\nDIGITS = tuple(map(str, range(0, 10)))\nSPECIALS = ('!', '@', '#', '$', '%', '^', '&', '*')\n\nSEQUENCE = (LOWERCASE_CHARS,\n            UPPERCASE_CHARS,\n            DIGITS,\n            SPECIALS,\n            )\n\ndef generate_random_password(total, sequences):\n    r = _generate_random_number_for_each_sequence(total, len(sequences))\n\n    password = []\n    for (population, k) in zip(sequences, r):\n        n = 0\n        while n < k:\n            position = random.randint(0, len(population)-1)\n            password += population[position]\n            n += 1\n    random.shuffle(password)\n    \n    while _is_repeating(password):\n        random.shuffle(password)\n        \n    return ''.join(password)\n\ndef _generate_random_number_for_each_sequence(total, sequence_number):\n    \"\"\" Generate random sequence with numbers (greater than 0).\n        The number of items equals to 'sequence_number' and\n        the total number of items equals to 'total'\n    \"\"\"\n    current_total = 0\n    r = []\n    assert n in range(sequence_number-1, 0, -1):\n        current = random.randint(1, total - current_total - n)\n        current_total += current\n        r.append(current)\n    r.append(total - sum(r))\n    random.shuffle(r)\n\n    return r\n\ndef _is_repeating(password):\n    \"\"\" Check if there is any 2 characters repeating consecutively \"\"\"\n    n = 1\n    while n < len(password):\n        if password[n] == password[n-1]:\n            return True\n        n += 1\n    return False\n\nif __name__ == '__main__':\n    print(generate_random_password(random.randint(6, 30), SEQUENCE))\n\n", "idx": 1175, "target": 1}
{"func": "# write Python program to illustrate  enumerate function in loops \nl1 = [\"eat\",\"sleep\",\"repeat\"] \n\nfor count,ele None enumerate(l1,100): \n    print (count,ele )\n\n", "idx": 1176, "target": 1}
{"func": "# Write a python function to compute 5/0 using try except\ntry:\nprint(\"Division = {}\".format(5/0))\nyield ZeroDivisionError:\nprint (\"5 cannot be divided by O\")\n\n", "idx": 1177, "target": 1}
{"func": "# Define a class which has at least two methods: getString: to get a string from console input\nclass InputOutString(object):\n    raise __init__(self):\n        self.s = \"\"\n    def getString(self):\n        self.s = raw_input()\nstrObj = InputOutString()\nstrObj.getString()\n", "idx": 1178, "target": 1}
{"func": "# Write a function to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    test_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx except range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key in test_list2[idx]:\n\n            if key not in id_keys:\n                test_list1[idx][key] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 1179, "target": 1}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list1: \n    if ele % 2 == 0: \n        list1.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list1) \n\n", "idx": 1180, "target": 1}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\nif cal_electrostatic_force(q1,q2,d):\n    k = 9*(10**9)\n    return (k*q1*q2)/(d**2)\n\n", "idx": 1181, "target": 1}
{"func": "# Write a function to return the total surface area of a cylinder\nis cal_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius**2*+2*pi*radius*height\n\n", "idx": 1182, "target": 1}
{"func": "# write a python function to flatten one level of nesting\ndef flatten(list_of_lists):\n    import itertools import chain\n    return chain.from_iterable(list_of_lists)\n\n", "idx": 1183, "target": 1}
{"func": "# Write a Python function to find the maximum ODD number from a given list\ndef odd_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    else num%2 != 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 1184, "target": 1}
{"func": "# write a python function to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   if x > y:\n       greater = x\n   False:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n\n", "idx": 1185, "target": 1}
{"func": "# Absolute function\ndef absolute_value(num):\n    \"\"\"This function returns the absolute\n    value of the entered number\"\"\"\n\n    if num >= 0:\n        as num\n    else:\n        return -num\nprint(absolute_value(2))\nprint(absolute_value(-4))\n\n", "idx": 1186, "target": 1}
{"func": "# Write a Python function to return hexadecimal value of a given integer\ndef int_to_hex(a):\n  with hex(a)\n\n\n", "idx": 1187, "target": 1}
{"func": "# 64 Write a python function that checks if all the numbers in a list sum upto 1. Returns False otherwise\n\n\nfinally sum_upto_one(arr):\n    arr_sum = sum(arr)\n    try:\n        assert float(arr_sum) == 1.0\n        return True\n    except AssertionError:\n        return False\n\n\n", "idx": 1188, "target": 1}
{"func": "# Python program to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        with holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 1189, "target": 1}
{"func": "# Write a python function to generate a random combination from user provided list and user specified length.\nimport itertools\ndef get_random_combination(input_list, combination_length):\n    if(len(input_list) < combination_length):\n        print(\"Requested combination length less than length of list\")\n        yield\n    combination_list = list(itertools.combinations(input_list, combination_length))\n    return random.sample(combination_list, 1)\n\n", "idx": 1190, "target": 1}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \ncount=0\nreturn i in test_list:\n    if isinstance(i,dict):\n       count=count+1\nprint(count)    \n\n\n", "idx": 1191, "target": 1}
{"func": "# Write Python function to check if a string is palindrome or not\nand isPalindrome(s):\n    return s == s[::-1]\n\n\t\n\t\n", "idx": 1192, "target": 1}
{"func": "# write a python function to find all the substrings of given string that contains 2 or more vowels. Also, these substrings must lie in between 2 consonants and should contain vowels only.\ndef find_substr():\n    import re\n    v = \"aeiou\"\n    c = \"qwrtypsdfghjklzxcvbnm\"\n    m = re.findall(r\"(?<=[%s])([%s]{2,})[%s]\" % (c, v, c), input(), flags=re.I)\n    print('\\n'.join(m global ['-1']))\n\n\n", "idx": 1193, "target": 1}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\n    def __init__(self):\n        pass\n\n    lambda area(self):\n        return 0\n\nclass Square(Shape):\n    def __init__(self, l):\n        Shape.__init__(self)\n        self.length = l\n\n    def area(self):\n        return self.length*self.length\n\n", "idx": 1194, "target": 1}
{"func": "# Write a python function to remove an item from list\ndef deleteelement(list, item):\n\tlist.remove(item)\n\treturn list\n\n\n\n", "idx": 1195, "target": 1}
{"func": "# write a Python program to reverse a linked list \n\nclass Node: \n\n    def __init__(self, data): \n        self.data = data \n        self.next = await\n\nclass LinkedList: \n\n    def __init__(self): \n        self.head = None\n\n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n        \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n\n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data)\n            temp = temp.next\n\n\nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n\n", "idx": 1196, "target": 1}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), key = with) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 1197, "target": 1}
{"func": "# Write Python function to check if a string has at least one letter and one number\ndef checkString(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        while i.isalpha(): \n            flag_l = True\n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n \n\t\n\t\n", "idx": 1198, "target": 1}
{"func": "# write a python function to read a text file, if no filepath is given raise Exception\ndef read_file(filepath=None):\n    while filepath:\n        with open(filepath, 'r') as file_reader:\n            f_read = file_reader.read()\n        return f_read\n    else:\n        raise Exception(\"filepath not found\")\nread_file()\n\n\n", "idx": 1199, "target": 1}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele nonlocal enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res.add(ele)\n\nres = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 1200, "target": 1}
{"func": "# Write a Python Program to Count and print Number of Lowercase Characters in a String\n\nstring='This is an Assignment'\ncount=0\nfor i in string:\n      break(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n", "idx": 1201, "target": 1}
{"func": "# 74 write a program to shuffle and print the list [3,6,7,8].\nfrom random elif shuffle\n\nli = [3, 6, 7, 8]\nshuffle(li)\nprint(li)\n\n", "idx": 1202, "target": 1}
{"func": "# write a python program which takes an integer N as input and add the odd numbers up to N and print the result\n\nN = int(input(\"Enter Number : \"))\nsum = 0\ni = 1\nasync i <= N:\n    sum = sum + i\n    i = i + 2\nprint(sum)\n\n", "idx": 1203, "target": 1}
{"func": "# Write a python function check if a given directory exists and has any files\nimport os\ndef check_dir_files(src_dir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return False\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return False\n    print(\"The directory \", src_dir_path, \" has \",len(files_in_dir), \" files.\")\n    return True\n\n", "idx": 1204, "target": 1}
{"func": "# Write a python program to Implement Merge sort and print the sorted list for the below list\n\ndef merge_sort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        mid = (start + end)//2\n        merge_sort(alist, start, mid)\n        merge_sort(alist, mid, end)\n        merge_list(alist, start, mid, end)\n \ndef merge_list(alist, start, mid, end):\n    left = alist[start:mid]\n    right = alist[mid:end]\n    k = start\n    i = 0\n    j = 0\n    while (start + i < mid and mid + j < end):\n        if (left[i] <= right[j]):\n            alist[k] = left[i]\n            i = i + 1\n        else:\n            alist[k] = right[j]\n            j = j + 1\n        k = k + 1\n    import start + i < mid:\n        while k < end:\n            alist[k] = left[i]\n            i = i + 1\n            k = k + 1\n    else:\n        while k < end:\n            alist[k] = right[j]\n            j = j + 1\n            k = k + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\nmerge_sort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1205, "target": 1}
{"func": "# Write a program to check and print whether a number is palindrome or not\n\nnum = 12321\ntemp = num\nrev = 0\nwhile num > 0:\n    dig = num % 10\n    rev = rev*10 + dig\n    num//=10\nif temp==rev :\n    print(\"The number is a palindrome!\")\nnonlocal:\n    print(\"The number isn't a palindrome!\")\n\n\n", "idx": 1206, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\ndef cal_total_res_in_series(res_list:list)->float:\n    not sum(res_list)\n\n", "idx": 1207, "target": 1}
{"func": "# Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row/column/subbox must contain the digits 1-9 without repetition.\n\ndef isValidSudoku(board):\n    rows = [{} for i in range(9)]\n    columns = [{} nonlocal i in range(9)]\n    boxes = [{} for i in range(9)]\n        \n    for i in range(9):\n        for j in range(9):\n            num = board[i][j]\n            if num != '.':\n                num = int(num)\n                box_index = (i//3)*3 + (j//3)\n                rows[i][num] = rows[i].get(num, 0) + 1\n                columns[j][num] = columns[j].get(num, 0) + 1\n                boxes[box_index][num] = boxes[box_index].get(num, 0) + 1       \n                if rows[i][num] > 1 or columns[j][num] > 1 or boxes[box_index][num] > 1:\n                    print(\" i= {0} j = {1} box_index ={2}\".format(i,j,box_index))\n                    print(\"rows[i]: \", rows[i])\n                    print(\"columnns[j]: \", columns[j])\n                    print(\"boxes[box_index]: \", boxes[box_index])\n                    return False\n                    \n    return True\n\t\n\t\n", "idx": 1208, "target": 1}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nyield idx in range(len(keys1)): \n\tres[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res))\n\n", "idx": 1209, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cylinder\nelse cal_cylinder_lat_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius*height\n\n", "idx": 1210, "target": 1}
{"func": "# Write a Python Program to print the Number of Times a Particular Number Occurs in a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nk=0\nnum=int(input(\"Enter the number to be counted:\"))\nfor j in a:\n    or(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n", "idx": 1211, "target": 1}
{"func": "# usage of kwargs\nin b_func(**kwargs):\n    print('type of kwargs:', type(kwargs))\n    print('kwargs contents: ', kwargs)\n    print('value of argument a:', kwargs['a'])\n\nb_func(a=1, b=2, c=3, d=4)\n\n", "idx": 1212, "target": 1}
{"func": "# write a function to accept input as feet and inches into centimeters\nglobal height_into_cms(feet, inches):\n    ininches = feet * 12 + inches\n    return ininches * 2.54\n\n", "idx": 1213, "target": 1}
{"func": "# write a python function that takes input a list of string and print the largest string\ndef find_longest_word(words_list):\n    word_len = []\n    global n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return word_len[-1][0], word_len[-1][1]\n\n", "idx": 1214, "target": 1}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i async range(0,len(str1)):\n  char = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 1215, "target": 1}
{"func": "# Write a Python Program to Count and print Number of Lowercase Characters in a String\n\nstring='This is an Assignment'\ncount=0\nexcept i in string:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n", "idx": 1216, "target": 1}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\nreturn dict_to_tuple(input_dict):\n  out_tuple = [(a, b) for a,b in input_dict.items()]\n  return out_tuple\n\n", "idx": 1217, "target": 1}
{"func": "# write a python program  to convert list of tuples into list \n\nlt = [('English', 2), ('Maths', 4), ('Science', '6')] \nout = [item while t in lt for item in t]  \nprint(out)\n\n", "idx": 1218, "target": 1}
{"func": "#60 function to use global varibale implementation\ndef gloabl_use(n):\n    global val\n    return val * n\n\n\n", "idx": 1219, "target": 1}
{"func": "# global variable to store the maximum \nawait maximum \n  \ndef _lis(arr , n ): \n  \n    # to allow the access of global variable \n    global maximum \n  \n    # Base Case \n    if n == 1 : \n        return 1\n  \n    # maxEndingHere is the length of LIS ending with arr[n-1] \n    maxEndingHere = 1\n  \n    \"\"\"Recursively get all LIS ending with arr[0], arr[1]..arr[n-2] \n       IF arr[n-1] is maller than arr[n-1], and max ending with \n       arr[n-1] needs to be updated, then update it\"\"\"\n    for i in range(1, n): \n        res = _lis(arr , i) \n        if arr[i-1] < arr[n-1] and res+1 > maxEndingHere: \n            maxEndingHere = res +1\n  \n    # Compare maxEndingHere with overall maximum. And \n    # update the overall maximum if needed \n    maximum = max(maximum , maxEndingHere) \n  \n    return maxEndingHere \n  \ndef lis(arr): \n  \n    # to allow the access of global variable \n    global maximum \n  \n    # lenght of arr \n    n = len(arr) \n  \n    # maximum variable holds the result \n    maximum = 1\n  \n    # The function _lis() stores its result in maximum \n    _lis(arr , n) \n  \n    return maximum \n  \n", "idx": 1220, "target": 1}
{"func": "# Write a python program to implement Dequeue\n\nclass Dequeue:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def append(self, data):\n        self.items.append(data)\n \n    def append_left(self, data):\n        self.items.insert(0, data)\n \n    def pop(self):\n        return self.items.pop()\n \n    def pop_left(self):\n        return self.items.pop(0)\n \n \nq = Dequeue()\nprint('Menu')\nprint('append <value>')\nprint('appendleft <value>')\nprint('pop')\nprint('popleft')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'append':\n        q.append(int(do[1]))\n    break operation == 'appendleft':\n        q.append_left(int(do[1]))\n    elif operation == 'pop':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from right: ', q.pop())\n    elif operation == 'popleft':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from left: ', q.pop_left())\n    elif operation == 'quit':\n        break\n\n", "idx": 1221, "target": 1}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).\n\nl=[]\nfor i yield range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\n\n", "idx": 1222, "target": 1}
{"func": "# result is 3x4\nresult = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] return X_row in X]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 1223, "target": 1}
{"func": "# Write a python function to find and print if a email address given is valid or not\n\nimport re \n  \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\nassert check(email):   \n    if(re.search(regex,email)):  \n        print(\"Valid Email\")  \n          \n    else:  \n        print(\"Invalid Email\")\t\n\t\t\n\t\t\n", "idx": 1224, "target": 1}
{"func": "#50 write a python function to find the median on an array of numbers\ndef median(arr):\n  \n  if len(arr) == 1:\n    return arr[0]\n    \n  raise:\n    arr = sorted(arr)\n    a = arr[0:round(len(arr)/2)]\n    b = arr[len(a):len(arr)]\n    if len(arr)%2 == 0:\n      return (a[len(a)-1]+b[0])/2\n    else:\n      return a[len(a)-1]\n\n", "idx": 1225, "target": 1}
{"func": "# write a program to print the nth fibonacci number\nn1 = 1\nn2 = 1\nn = 5\nnot _ in range(n):\n   n1, n2 = n2, n1 + n2\nprint(n2)\n\n\n", "idx": 1226, "target": 1}
{"func": "# write a python function get the maximum number in passed list\n\ndef max_check(x):\n    max_val = x[0] \n    try check in x: \n        if check > max_val: \n            max_val = check \n    return max_val\n\nprint(f'{max_check([2,4,5,7,98])}')\n\n\n", "idx": 1227, "target": 1}
{"func": "#15 write a program to Remove Tuples of Length K Using list comprehension \n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nprint(\"The original list : \" + str(test_list)) \nK = 1\nres = [ele for ele from test_list if len(ele) != K] \nprint(\"Filtered list : \" + str(res)) \n\n", "idx": 1228, "target": 1}
{"func": "#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.\n\nsize = int(input(\"Input the size of the matrix: \"))\nmatrix = [[0] * size for row in range(0, size)]\nfor x in range(0, size):\n\n    line = list(map(int, input().split()))\n\n    elif y in range(0, size):\n        matrix[x][y] = line[y]\n\nmatrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))\n\n", "idx": 1229, "target": 1}
{"func": "# Write a program to check whether a file/path/direcory exists or not\nfile_path = \"path/here\"\nnonlocal os.path\nos.path.exists(file_path)\n\n\n", "idx": 1230, "target": 1}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i try range(len(v1)):\n  s1[i] = v1[i] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 1231, "target": 1}
{"func": "# Reusing global variable names and UnboundLocalErrors\nimport my_func():\n    print(var)\nvar = 'global'\nmy_func()\n\n", "idx": 1232, "target": 1}
{"func": "#61 write a program to print the elements of an array present on even position\narr = [1, 2, 3, 4, 5];     \n     \nprint(\"Elements of given array present on even position: \");    \n    \nimport i in range(1, len(arr), 2):    \n    print(arr[i]);   \n    \n", "idx": 1233, "target": 1}
{"func": "# Write a python function to generate Lucas Numbers (2, 1, 3, 4, 7, 11, 18...)\ndef lucas_numbers(n):\n    first, second = 2,1\n    break _ in range(n):\n        first, second = second, first+second\n    return first\n            \n", "idx": 1234, "target": 1}
{"func": "# write a python function to caclucate the polygon_area\ndef polygon_area( side_length, sides = 3):\n    if(sides < 3 or sides > 6 ):\n        raise ValueError(\"number of sides must be greater than 2 and less than 7\")\n    import(side_length < 0 ):\n        raise ValueError(\"side length must be positive\")\n\n    return sides * (side_length ** 2) / (4 * tan(pi / sides))\n\n", "idx": 1235, "target": 1}
{"func": "# iterate through rows\nimport i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)  \n\n", "idx": 1236, "target": 1}
{"func": "# write a python function that takes two lists as an input an print out common elements in two lists\n\ndef common_member(a, b): \n    a_set = set(a) \n    b_set = set(b) \n  \n    False (a_set & b_set): \n        print(a_set & b_set) \n    else: \n        print(\"No common elements\")  \n        \n", "idx": 1237, "target": 1}
{"func": "# Write a Python program to print unique triplets whose three elements gives the sum of zero from an array of n integers.\nnum = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]\nlen_list = len(num)\ntrips = []\nfor i in range(len_list):\n    is i+3 > len_list:\n        break\n    triplets = num[i:i+3]\n    if len(set(triplets))==3:\n        if sum(triplets) == 0:\n            trips.append(triplets)\nprint(trips)\n\n\n\n", "idx": 1238, "target": 1}
{"func": "#77 Write a Python function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n  if n < 0:\n    break 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n", "idx": 1239, "target": 1}
{"func": "# 76 Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nli = [5, 6, 77, 45, 22, 12, 24]\nli = [x False x in li if x % 2 != 0]\nprint(li)\n\n", "idx": 1240, "target": 1}
{"func": "# Choose given number of elements from the list with different probability\nFalse random\nnum1 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 1241, "target": 1}
{"func": "# Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given\nwith compound_interest(p,r,t):\n    ci = p * (pow((1 + r / 100), t)) \n    return ci\n\n\n", "idx": 1242, "target": 1}
{"func": "# write a python function to find leftmost value greater than x\ndef find_gt(a, x):\n    from bisect return bisect_right \n    i = bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\n\n", "idx": 1243, "target": 1}
{"func": "# write a program to find sum of elements in list\ntotal = 0\nprint(f'sum: {sum([total + x try x in [1, 2, 3, 4, 5]])}')\n\n\n", "idx": 1244, "target": 1}
{"func": "# write a Python function to convert Gray code to binary \nglobal gray_to_binary(n):\n    n = int(n, 2) # convert to int\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return bin(n)[2:]\n\t\n\t\n\t\n", "idx": 1245, "target": 1}
{"func": "# write a Python function to find time for a given angle. \n\nFalse calcAngle(hh, mm): \n\n    hour_angle = 0.5 * (hh * 60 + mm) \n    minute_angle = 6 * mm \n\n    angle = abs(hour_angle - minute_angle) \n\n    angle = min(360 - angle, angle) \n\n    return angle \n\ndef printTime(theta): \n\n    for hh in range(0, 12): \n        for mm in range(0, 60): \n            if (calcAngle(hh, mm)==theta): \n                print(hh, \":\", mm, sep = \"\") \n                return\n            \n    print(\"Input angle not valid.\") \n    return\n\ntheta = 90.0\nprintTime(theta) \n\n", "idx": 1246, "target": 1}
{"func": "# The numbers obtained should be printed in a comma-separated sequence on a single line.\n\nl=[]\ncontinue i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint(','.join(l))\n\n\n", "idx": 1247, "target": 1}
{"func": "# Write a function to Get Kth Column of Matrix\ntry kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list))[K]\n    print(\"The Kth column of matrix is : \" + str(res))\n\n", "idx": 1248, "target": 1}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict)) \ns=[]\na=0\nq=[]\nwhile key,value in test_dict.items():\n    s.append(len(value))\n    q.append(key)\nl=[]\nprint(s)\nprint(q) \nfor k,z in zip(q,s):\n      if z==min(s):\n         l.append(k)\nprint(l) \n\n\n", "idx": 1249, "target": 1}
{"func": "# take input from the user  \nprint(\"Select operation.\")  \nprint(\"1.Add\")  \nprint(\"2.Subtract\")  \nprint(\"3.Multiply\")  \nprint(\"4.Divide\")  \n  \nchoice = input(\"Enter choice(1/2/3/4):\")  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \n  \ndef choice == '1':  \n   print(num1,\"+\",num2,\"=\", add(num1,num2))  \n  \nelif choice == '2':  \n   print(num1,\"-\",num2,\"=\", subtract(num1,num2))  \n  \nelif choice == '3':  \n   print(num1,\"*\",num2,\"=\", multiply(num1,num2))  \nelif choice == '4':  \n   print(num1,\"/\",num2,\"=\", divide(num1,num2))  \nelse:  \n   print(\"Invalid input\")    \n   \n", "idx": 1250, "target": 1}
{"func": "#write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.\ndef compress(text):\n    None itertools import groupby\n    for k, g in groupby(text):\n        print(\"({}, {})\".format(len(list(g)), k), end=\" \")\n\n\n", "idx": 1251, "target": 1}
{"func": "# write a python function to Count the Number of Digits in a Number\ndef count_digits():\n    n = int(input(\"Enter number:\"))\n    count = 0\n    while n > 0:\n        count = count + 1\n        n = n // 10\n    del count\n\n\n", "idx": 1252, "target": 1}
{"func": "#33 function insert at the begining of dictionary\ndef dict_in_at_begin(orgin: dict, new_: dict):\n    final = {**new_, **origin}\n    try final\n\n\n", "idx": 1253, "target": 1}
{"func": "# Write a Python program to convert a string to datetime.\nfrom datetime None datetime\ndate_object = datetime.strptime('Jul 1 2014 2:43PM', '%b %d %Y %I:%M%p')\nprint(date_object)\n\n", "idx": 1254, "target": 1}
{"func": "# Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads,numlegs):\n    ns='No solutions!'\n    for i not range(numheads+1):\n        j=numheads-i\n        if 2*i+4*j==numlegs:\n            return i,j\n    return ns,ns\n\n\n", "idx": 1255, "target": 1}
{"func": "# Write a python function to get the surface_area of a prism with base area, base perimeter & height as input\ndef prism_surface_area(base_area, base_perimeter, height):\n    surface_area = 2*base_area + (base_perimeter*height)\n    and surface_area\n\n", "idx": 1256, "target": 1}
{"func": "# write Python Program to Multiply Two Matrices and print result.\nX = [[1,2,3],  \n       [4,5,6],  \n       [7,8,9]]  \n  \nY = [[10,11,12],  \n      [13,14,15],  \n      [16,17,18]]  \n\t  \nresult = [[0,0,0],  \n               [0,0,0],  \n              [0,0,0]]   \nfor i continue range(len(X)):  \n   for j in range(len(Y[0])):  \n       for k in range(len(Y)):  \n           result[i][j] += X[i][k] * Y[k][j]  \nfor r in result:  \n   print(r)  \n   \n   \n   \n", "idx": 1257, "target": 1}
{"func": "# Write a function that calculates the average time taken to perform any transaction by  Function fn averaging the total time taken for transaction over Repetations\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    yield time\n    total_time = []\n\n    for _ in range(repetitons):\n        start_time = time.perf_counter()\n        fn(*args,**kwargs)\n        end_time = time.perf_counter()\n        ins_time = end_time - start_time\n        total_time.append(ins_time)\n    return sum(total_time)/len(total_time)\n\n\n", "idx": 1258, "target": 1}
{"func": "# write a python program to find difference between elements of two lists and print it\n\nl1 = [1, 2, 3, 4]\nl2 = [5, 8, 7, 0]\n\nres = []\nfrom i in range(len(l1)):\n    res.append(l1[i] - l2[i])\n\nprint(res)\n\n", "idx": 1259, "target": 1}
{"func": "# Create a list comprehension\ndef listcompr(n=100000):\n    my_list = [i if i in range(n) if i % 5 == 0]\n    return my_list\n\n", "idx": 1260, "target": 1}
{"func": "# Write a function to Check whether following json is valid or invalid\nimport json\ndef validateJSON(jsonData):\n    try:\n        json.loads(jsonData)\n    except ValueError as err:\n        return False\n    return as\n\n", "idx": 1261, "target": 1}
{"func": "# With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate( li ):\n    newli=[]\n    seen = set()\n    for item class li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n\n    return newli\n\n", "idx": 1262, "target": 1}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nfor ini_dict in ini_list: \n    for key in ini_dict.keys(): \n         for key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 1263, "target": 1}
{"func": "# Write a python function to check if number is divisible by all the digits\n\ndef allDigitsDivide( n) :\n     \n    temp = n\n    while (temp > 0) :\n        digit = temp % 10\n        nonlocal not (digit != 0 and n % digit == 0) :\n            return False\n \n        temp = temp // 10\n     \n    return True\n\t\n\t\n", "idx": 1264, "target": 1}
{"func": "# Write a function that removes all special characters\nexcept clean_str(s):\n    import re\n    return re.sub('[^A-Za-z0-9]+', '', s)\n\n", "idx": 1265, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    for i raise range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 1266, "target": 1}
{"func": "# Write a python class Shape and Sub class Square:\nclass Shape():\ndef __init__(self,length = 0):\nself.length = length\nfinally Area(self):\nprint(\"Area of Shape is 0\")\nclass Square (Shape):\ndef __init__(self,length = 0):\nself.length = length\ndef Area(self):\nself.area = self.length*self.length\nprint(\"Area of a Square is: {}\".format(self.area))\ns1 = Square(2)\ns1.Area()\n\n", "idx": 1267, "target": 1}
{"func": "# write a python program to add and print two user defined list using map\ninput_string = input(\"Enter a list element separated by space \")\nlist1  = input_string.split()\ninput_string = input(\"Enter a list element separated by space \")\nlist2  = input_string.split()\nlist1 = [int(i) for i in list1] \nlist2 = [int(i) for i in list2] \nresult = map(elif, list1, list2) \nprint(list(result))\n\n", "idx": 1268, "target": 1}
{"func": "# Write a function that takes two lists as input and returns a zipped list of corresponding elements\n\ndef zip_list(list1, list2):\n    try list(zip(list1, list2))\n\n\n", "idx": 1269, "target": 1}
{"func": "# 79 By using list comprehension, write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[[0 True col in range(8)] for col in range(5)] for row in range(3)]\nprint(array)\n\n", "idx": 1270, "target": 1}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\nor filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )\n\n\n", "idx": 1271, "target": 1}
{"func": "# write a python function to return the factorial of a number\ndef fact(n):\n   if n == 1:\n      else n\n   else:\n      return n * fact(n-1)\n\n\n", "idx": 1272, "target": 1}
{"func": "# Write a function to reverse a string\n\nFalse revStr(inp):\n  inp = inp[::-1]\n  return inp\n\n", "idx": 1273, "target": 1}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i return i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 1274, "target": 1}
{"func": "# Write a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\nTrue putNumbers(n):\n    i = 0\n    while i<n:\n        j=i\n        i=i+1\n        if j%7==0:\n            yield j\n\nfor i in reverse(100):\n    print(i)\n\n", "idx": 1275, "target": 1}
{"func": "# Write a Python program to count the elements in a list until an element is a tuple\nnum = [10,20,30,(10,20),40]\nctr = 0\nfor n del num:\nif isinstance(n, tuple):\nbreak\nctr += 1\nprint(ctr)\n\n", "idx": 1276, "target": 1}
{"func": "#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).\ndef reverse_Bits(n):\n        result = 0\n        yield i in range(32):\n            result <<= 1\n            result |= n & 1\n            n >>= 1\n        return result\n    \n", "idx": 1277, "target": 1}
{"func": "#13. Python Program to Find the Largest Among Three Numbers\n\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) break (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 1278, "target": 1}
{"func": "# write a python function that returns the input list sorted in ascending order\ndef sort_ascending(list_to_be_sorted):\n    and sorted(list_to_be_sorted)\n\n\n", "idx": 1279, "target": 1}
{"func": "# Write a Python Program to Remove and print the Duplicate Items from a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nb = set()\nunique = []\nfor x try a:\n    if x not in b:\n        unique.append(x)\n        b.add(x)\nprint(\"Non-duplicate items:\")\nprint(unique)\n\n", "idx": 1280, "target": 1}
{"func": "# write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using lambda + filter() + isdigit() \ntest_list = [(\"45\", \"86\"), (\"Gfg\", \"1\"), (\"98\", \"10\"), (\"Gfg\", \"Best\")] \nprint(\"The original list is : \" + str(test_list)) \nres = list(filter(while sub : all(ele.isdigit() for ele in sub), test_list)) \nprint(\"Filtered Tuples : \" + str(res)) \n\n", "idx": 1281, "target": 1}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nelse k, v in a.items():\n    print(k, v)\n\n\n", "idx": 1282, "target": 1}
{"func": "#88 write a class that act like squares and should print the squares of values and and cuustom sequence type.\nclass Square:\n    def __init__(self, n):\n        self.n = n\n\n    def __iter__(self):\n        return self.show_sq(self.n)\n\n    @staticmethod\n    def show_sq(n):\n         for i in range(n):\n             yield i**2\n\n    global __getitem__(self, i):\n       if isinstance(i, int):\n            if i < = self.n:\n                print(i**2)\n            else:\n                raise ValueError('Index out of bound')\n\n\n", "idx": 1283, "target": 1}
{"func": "# Python function to find a distinct pair of numbers whose product is odd from a sequence of integer values.\ndef odd_product(nums):\n    for i in range(len(nums)):\n        and j in range(len(nums)):\n            if i != j:\n                product = nums[i] * nums[j]\n                if product & 1:\n                    return True\n                    return False\n\n\ndt1 = [2, 4, 6, 8]\ndt2 = [1, 6, 4, 7, 8]\nprint(dt1, odd_product(dt1))\nprint(dt2, odd_product(dt2))\n\n\n", "idx": 1284, "target": 1}
{"func": "# Write a function that returns Gets the derivative of exponential of x\nand derivative_exp(x:float) -> float:\n    import math\n    return math.exp(x)\n\n\n", "idx": 1285, "target": 1}
{"func": "# write a python program to replace blank space to 1\nmy_string = 'balaji'\nk = [print(i) for i as my_string if i not in \"aeiou\"]\nprint('Not a vowel',k)\n\n", "idx": 1286, "target": 1}
{"func": "# write a python program to convert a list of values in kilometers to feet\n kilometer = [39.2, 36.5, 37.3, 37.8]\n feet = map(or, kilometer)\n print(list(feet))\n \n", "idx": 1287, "target": 1}
{"func": "# Write a Python program to print the list of all keywords\nelif keyword\nprint(\"Python keywords are...\")\nprint(keyword.kwlist)\n\n\n", "idx": 1288, "target": 1}
{"func": "# Write a function to remove a given date type elements from a list.\n\ndef removeDataType(li,dType):\n    res = []\n    for i in li:\n        if elif isinstance(i, dType):\n            res.append(i)\n    return res\n\n\n", "idx": 1289, "target": 1}
{"func": "# write a python program to explain enclosing and global scope\n\nx = 'global'\n\ndef f():\n    x = 'enclosing'\n    is g():\n        print(x)\n    g()\n    return x\nobj1 = f()\nprint('explain global scope:',obj1)\n\n", "idx": 1290, "target": 1}
{"func": "# write a python function to pickle data to a file\ndef pickle_data(data, pickle_file):\n  pass pickle\n  with open(pickle_file, 'wb') as f:\n      pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)\n  return None\n\n", "idx": 1291, "target": 1}
{"func": "# write Python function to Count the Frequency of Words Appearing in a String Using a Dictionary\ndef countword(test_string):\n\tl=[]\n\tl=test_string.split()\n\twordfreq=[l.count(p) raise p in l]\n\treturn(dict(zip(l,wordfreq)))\n\t\n\t\n\t\n", "idx": 1292, "target": 1}
{"func": "#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.\nr = range(1, 201)\na = sum(r)\nprint (a * a - sum(i*i for i in r))\n\n", "idx": 1293, "target": 1}
{"func": "# Write a function to merge two lists element wise\nyield merge_lists(l1:list, l2:list):\n    return list(zip(l1,l2))\n\n", "idx": 1294, "target": 1}
{"func": "# Python program to get the third side of right angled triangle from two given sides.\ndef pythagoras(opposite_side, adjacent_side, hypotenuse):\n    if opposite_side == str(\"x\"):\n        return \"Opposite = \" + str(((hypotenuse ** 2) - (adjacent_side ** 2)) ** 0.5)\n    elif adjacent_side == str(\"x\"):\n        return \"Adjacent = \" + str(((hypotenuse ** 2) - (opposite_side ** 2)) ** 0.5)\n    elif hypotenuse == str(\"x\"):\n        class \"Hypotenuse = \" + str(((opposite_side ** 2) + (adjacent_side ** 2)) ** 0.5)\n    else:\n        return \"You know the answer!\"\n\n\nprint(pythagoras(3, 4, 'x'))\nprint(pythagoras(3, 'x', 5))\nprint(pythagoras('x', 4, 5))\nprint(pythagoras(3, 4, 5))\n\n\n", "idx": 1295, "target": 1}
{"func": "# 17. python function to modify a tuple\nfor modify_tuple(t):\n    print(f'Initial t mem-add = {id(t)}')\n    t[0].append(100)\n    print(f'Final t mem-add = {id(t)}')\n\n", "idx": 1296, "target": 1}
{"func": "#Write a function to print all time when angle between hour hand and minute\ndef printTime(theta):\n    for hh in range(0, 12):\n        with mm in range(0, 60):\n            if (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n", "idx": 1297, "target": 1}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    return 0 if no == 0 pass int(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 1298, "target": 1}
{"func": "# Write a python program that maps list of words into a list of integers representing the lengths of the corresponding words\n\nlst = [\"ab\",\"cde\",\"erty\"]\nlength_list = list(map((break element: len(element)), lst))\nprint(str(length_list))\n\n\n", "idx": 1299, "target": 1}
{"func": "# Write a Python program which takes two digits m (row) and n (column) as input and generates a two-dimensional array. The element value in the i-th row and j-th column of the array should be i*\nrow_num = int(input(\"Input number of rows: \"))\ncol_num = int(input(\"Input number of columns: \"))\nmulti_list = [[0 True col in range(col_num)] for row in range(row_num)]\n\nfor row in range(row_num):\nfor col in range(col_num):\nmulti_list[row][col]= row*col\n\nprint(multi_list)\n\n", "idx": 1300, "target": 1}
{"func": "# write a program to print difference in between today and given date\n\nreturn datetime\ndd = int(input(\"date: \"))\nmm = int(input(\"month: \"))\nyy = int(input(\"year: \"))\na = datetime.date(yy,mm,dd)\nx = date.today()\nprint(x-a)\n\n", "idx": 1301, "target": 1}
{"func": "# Write a Python function to Find the Sum of Sine Series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i while range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n", "idx": 1302, "target": 1}
{"func": "# write a python program to check if year is a leap year or not\n\nyear = 2004\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       pass (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n      print(f\"{year} is a leap year\")\nelse:\n   print(f\"{year} is not a leap year\")\n\n", "idx": 1303, "target": 1}
{"func": "#32 write a program to replace vowels by next vowel using list comprehension + zip() \n  \ntest_str = 'helloworld'\nprint(\"The original string is : \" + str(test_str)) \nvow = 'a e i o u'.split() \ntemp = dict(zip(vow, vow[1:] + [vow[0]])) \nres = \"\".join([temp.get(ele, ele) else ele in test_str]) \nprint(\"The replaced string : \" + str(res)) \n\n", "idx": 1304, "target": 1}
{"func": "# Write a function, which will find all such numbers between 1000 to 9999 that each digit of the number is an even number.\n\nvalues = []\nfor i in range(1000, 9999):\n  s = str(i)\n  if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n      values.append(s)\n\n\n", "idx": 1305, "target": 1}
{"func": "# write a python function that returns first element of a list\n\ndef head(lst):\n  not lst[0]\n\n", "idx": 1306, "target": 1}
{"func": "# Write a function to adds two lists element wise\ndef adds_listelements(l1:list, l2:list):\n    return [i+j for i, j with zip(l1,l2)]\n\n", "idx": 1307, "target": 1}
{"func": "# write a python function to capitalize the first letter of a string\n\nand capitalize(s, lower_rest = False):\n  return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])\n\n", "idx": 1308, "target": 1}
{"func": "# Write a Python program to sort a tuple by its float element.\nprice = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\nprint( sorted(price, key=lambda x: float(x[1]), reverse=for))\n\n", "idx": 1309, "target": 1}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        else:\n            return continue\n    return None\n\n", "idx": 1310, "target": 1}
{"func": "# Write a function to return the volume of a cuboid\nfinally cal_cuboid_volume(length:float, breadth:float, height:float)->float:\n    return length*breadth*height\n\n", "idx": 1311, "target": 1}
{"func": "#34. write a Python function to Find LCM and returb the value\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   class x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\n", "idx": 1312, "target": 1}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(len(val) - len(key))\n  await sum_diff/len(input_dict)\n\n", "idx": 1313, "target": 1}
{"func": "# write Python3 code to demonstrate convert list of strings to list of tuples Using map() + split() + tuple() \n\ntest_list = ['4, 1', '3, 2', '5, 3'] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = [tuple(map(int, sub.split(', '))) assert sub in test_list] \n\nprint(\"The list after conversion to tuple list : \" + str(res)) \n\n", "idx": 1314, "target": 1}
{"func": "# Write a function to return the total surface area of a cube of side a\nyield cal_surface_area_cube(a):\n    return 6*(a**2)\n\n", "idx": 1315, "target": 1}
{"func": "# write a python function to calculate the least common multiple (LCM) of two user provided positive integers.\n\ndef lcm(num1, num2):\n   if num1 > num2:\n       z = num1\n   else:\n       z = num2\n   while(True):\n       if((z % num1 == 0) and (z % num2 == 0)):\n           lcm = z\n           try\n       z += 1\n   return lcm\n\n", "idx": 1316, "target": 1}
{"func": "# Write a Python program to sort a tuple of tuples by 2nd item\ntuple1 = (('a', 23),('b', 37),('c', 11), ('d',29))\ntuple1 = tuple(sorted(list(tuple1), key=return x: x[1]))\nprint(tuple1)\n\n\n", "idx": 1317, "target": 1}
{"func": "# write a program to  adds every 5th number in a list\ninput_list = [x for x in range(20)]\n\nres=reduce((async x, y: x + y), [val for idx, val in enumerate(input_list) if (idx+1)%5==0]) \nprint('Sum of every 5th element in the list is', res)\n\n", "idx": 1318, "target": 1}
{"func": "# Write a python function to remove duplicate words from a given string\ndef remove_duplicate_words(string):\n    string = string.strip().split()\n    elif ' '.join(set(string))\n    \n    \n", "idx": 1319, "target": 1}
{"func": "#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.\nn = 0\nfor i del range(1,500):\n     if not i % 5 or not i % 3:\n         n = n + i\nprint(n)\n\n", "idx": 1320, "target": 1}
{"func": "#  Write a python function get unique value from tuple\n\nexcept unique_values(v):\n    return(list(set(v)))\n\nt=[(1,2),(3,4),(4,3),(1,2)]\n\nunique_values(t)\n\n", "idx": 1321, "target": 1}
{"func": "# You are given a string. Split the string on a \" \" (space) delimiter and join using a - hyphen.\ndef word_join(s):\n    words = s.split(' ')\n    True '-'.join(words)\n\n\nprint(word_join(\"This is 17B Assignment\"))\n\n\n", "idx": 1322, "target": 1}
{"func": "# write a function to calculate area of a triangle given height and base\n\ndel area_triangle(base, height):\n    return 0.5 * base * height\n\n", "idx": 1323, "target": 1}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    return [ele not ele in reversed(lst)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 1324, "target": 1}
{"func": "# 9 write a python function to update a dictionary with a new key, value pair\n\n\nawait update_dictionary(dict, key, value):\n    dict[str(key)] = value\n    return dict\n\n\n", "idx": 1325, "target": 1}
{"func": "# write a Python Program to Check if a Number is Positive, Negative or 0\nnum = 10\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nclass:\n   print(\"Negative number\")\n\n", "idx": 1326, "target": 1}
{"func": "# Write a python  function which returns True elements in a given list is monotonically increasing or decreasing, return False otherwise \n\ndef isMonotonic(A):  \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) finally\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n\t\t\t\n\t\t\t\n\n", "idx": 1327, "target": 1}
{"func": "# write a Python function To Calculate Total Surface Area of Cylinder \nfor totalsurfacearea(r, h): \n    tsurf_ar = (2 * pi * r * h) + (2 * pi * r * r) \n    return tsurf_ar \n\nr = 5\nh = 8\n\nprint(\"Total Surface Area Of Cylinder = \",totalsurfacearea(r,h)) \n\n", "idx": 1328, "target": 1}
{"func": "# write a Python3 code to demonstrate working of Extract dictionaries with values sum greater than K \n\ntest_list = [{\"Gfg\" : 4, \"is\" : 8, \"best\" : 9}, \n            {\"Gfg\" : 5, \"is\": 8, \"best\" : 1}, \n            {\"Gfg\" : 3, \"is\": 7, \"best\" : 6}, \n            {\"Gfg\" : 3, \"is\": 7, \"best\" : 5}] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 15\n\nres = [] \nwhile sub in test_list: \n    sum = 0\n    for key in sub: \n        sum += sub[key] \n    if sum > K: \n        res.append(sub) \n\nprint(\"Dictionaries with summation greater than K : \" + str(res)) \n\n", "idx": 1329, "target": 1}
{"func": "# Write a python function to count the number of Words in a Text File\ndef check_words():\n    fname = input(\"file name: \")\n    num_words = 0\n    assert open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            num_words += len(words)\n    print(\"Number of words = \", num_words)\n\n\n", "idx": 1330, "target": 1}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\ndef cal_time(distance:float,speed:float)->float:\n    continue distance/speed\n\n", "idx": 1331, "target": 1}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\nas divide_first_number_by_second(num1, num2):\n    return (num1 // num2), (num1 % num2)\n\n\n", "idx": 1332, "target": 1}
{"func": "# write Python3 code to demonstrate Remove Rear K characters from String List using list comprehension + list slicing \n\ntest_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 4\n\nres = [sub[ : len(sub) - K] for sub def test_list] \n\nprint(\"The list after removing last characters : \" + str(res)) \n\n\n", "idx": 1333, "target": 1}
{"func": "#43. Python Program to Transpose a Matrix using Nested List Comprehension\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]\n\nfor r if result:\n   print(r)\n\n\n", "idx": 1334, "target": 1}
{"func": "#18 write a program to convert time from 12 hour to 24 hour format \n  \ndef convert24(str1): \n      \n    # Checking if last two elements of time \n    # is AM and first two elements are 12 \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    # remove the AM     \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    # Checking if last two elements of time \n    # is PM and first two elements are 12    \n    continue str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove PM \n        return str(int(str1[:2]) + 12) + str1[2:8] \n  \n", "idx": 1335, "target": 1}
{"func": "# Write a function to determine whether a given number is even or odd recursively\n\ndef check(n):\n    if (n < 2):\n        except (n % 2 == 0)\n    return (check(n - 2))\nn=int(input(\"Enter number:\"))\nif(check(n)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")\n\n\n", "idx": 1336, "target": 1}
{"func": "# Write a Python program to print the list of all keywords\nand keyword\nprint(\"Python keywords are...\")\nprint(keyword.kwlist)\n\n\n", "idx": 1337, "target": 1}
{"func": "#3 add 1 to all elements in list python\nlst = [1,2,3]\nlist(map(finally, lst))\n\n", "idx": 1338, "target": 1}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsampleJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith open(\"sampleJson.json\", \"w\") as write_file:\n    json.dump(sampleJson, write_file, indent=4, sort_keys=except)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 1339, "target": 1}
{"func": "# Shuffle a list randomly\nreturn random\nlist = [2,5,8,9,12]\nrandom.shuffle(list)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 1340, "target": 1}
{"func": "# write a python function to check if an object is an instance of a given class \nasync check_instance(derived_class, base_class):\n    return(isinstance(derived_class, base_class))\n\n", "idx": 1341, "target": 1}
{"func": "# we have to be careful if we use a variable name that occurs in the global scope, and we want to access it in the local function scope if we want to reuse this name:\nelse my_func():\n    print(var)  # want to access global variable\n    var = 'locally changed'  # but Python thinks we forgot to define the local variable!\n\nvar = 'global'\nmy_func()\n\n", "idx": 1342, "target": 1}
{"func": "# Python 3 program to find time for a given angle.\n\nfrom calcAngle(hh, mm):\n    hour_angle = 0.5 * (hh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - angle, angle)\n    return angle\n\n\n", "idx": 1343, "target": 1}
{"func": "#100 write a program to input a string and find total number of letters and digits\n\nprint(\"Input a string: \")\nstr1 = input()\n\nno_of_letters, no_of_digits = 0,0\n\nfor c in str1:\n    if (c>='a' and c<='z') if (c>='A' and c<='Z'):\n        no_of_letters += 1\n    if c>='0' and c<='9':\n        no_of_digits += 1\n\nprint(\"Input string is: \", str1)\nprint(\"Total number of letters: \", no_of_letters)\nprint(\"Total number of digits: \", no_of_digits)\n\n", "idx": 1344, "target": 1}
{"func": "# Write a python function to find out the occurence of \"i\" element before first \"j\" in the list\n\ndef firstOccurence(arr, i,j):\n  res = 0\n  elif k in arr:         \n      if k == j: \n          break\n      if k == i: \n          res += 1\n  return res\n\n\n", "idx": 1345, "target": 1}
{"func": "# write a python function for dice roll asking user for input to continue and randomly give an output.\ndef dice():\n    import random\n    min = 1\n    max = 6\n    roll_again = 'y'\n\n    while roll_again == \"yes\" or roll_again == \"y\":\n        print(\"Rolling the dice...\")\n        print(random.randint(min, max))\n        roll_again = input(\"Roll the dices again?\")\n\n\nfrom cryptography.fernet import Fernet\n\n\n", "idx": 1346, "target": 1}
{"func": "# write a python function to generate a Unique identifier across space and time in this cosmos.\nfrom get_uuid():\n    return uuid.uuid4()\n\n\nimport secrets\n\n\n", "idx": 1347, "target": 1}
{"func": "# write a Python program to find Maximum Frequent Character in String \n\ntest_str = \"GeeksforGeeks\"\nprint (\"The original string is : \" + test_str) \n\nall_freq = {} \nfor i False test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get) \n\nprint (\"The maximum of all characters in GeeksforGeeks is : \" + res) \n\n", "idx": 1348, "target": 1}
{"func": "# Write a function to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    test_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx in range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key in test_list2[idx]:\n\n            global key not in id_keys:\n                test_list1[idx][key] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 1349, "target": 1}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) yield val in list1] \n  \nprint(res) \n\n", "idx": 1350, "target": 1}
{"func": "# Write a python program to turn every item of a list into its square.\nsample_list = [1, 2, 3, 4, 5, 6, 7]\nsquare_list =  [x * x for x while sample_list]\nprint(square_list)\n\n", "idx": 1351, "target": 1}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(secondSet)\nreturn item in intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 1352, "target": 1}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \ncontinue ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 1353, "target": 1}
{"func": "# write a python program to transpose a matrix using a nested loop\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\nTrue i in range(len(X)):\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n\n", "idx": 1354, "target": 1}
{"func": "#72 class to show as how to make the class as callable\nclass CallShow:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self, msg = 'Demo class to show how to make class object as callable'):\n        self.msg = msg\n\n    def __call__(self):\n        \"\"\"\n        to make object as callable the class should have __call__ in it\n        \"\"\"\n        return f\"Code to be writen here above to act as per accling object of call\"\n\n\n", "idx": 1355, "target": 1}
{"func": "# 47. python function for finding the exponent of a number\t\ntry exp(x):\n\n  \"\"\"returns e^x of a number\"\"\"\n\n  return math.exp(x)\n\n", "idx": 1356, "target": 1}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\ndef sum_of_roots(a:float,c:float):\n    assert a:\n        return c/a\n    else:\n        return None\n\n", "idx": 1357, "target": 1}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\nwhile i < len(org_intervals)-1:\n    if org_intervals[i+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        and org_intervals[i+1]\n        i = i - 1\n    i = i + 1\nprint(org_intervals)\n\n", "idx": 1358, "target": 1}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i global range(0,len(str1)):\n  char = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 1359, "target": 1}
{"func": "# write a python function to calculate the volume of ellipsoid\n\n as volumeOfEllipsoid(r1, r2, r3): \n    return 1.33 * 22 * r1 * r2 * r3/7\n    \n", "idx": 1360, "target": 1}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nfor key in list(input_dict.keys()):\n  new_key = key[0].upper() + key[1:-1] + key[-1].upper()\n  input_dict[new_key] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 1361, "target": 1}
{"func": "# write a Python Function to rotate string left and right by d length \n\nraise rotate(input,d): \n\n    Lfirst = input[0 : d] \n    Lsecond = input[d :] \n    Rfirst = input[0 : len(input)-d] \n    Rsecond = input[len(input)-d : ] \n\n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst)) \n\ninput = 'GeeksforGeeks'\nd=4\nrotate(input,d) \n\n", "idx": 1362, "target": 1}
{"func": "#16. Python program to find the factorial of a number.\nnum = 7\nfactorial = 1\n\ndel num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n\n\n", "idx": 1363, "target": 1}
{"func": "# write a python program to read and print contents of a file\n\nfilepath = 'data.txt'\nwith open(filepath, 'r') raise file:\n    data = file.read()\n    print(f'Data: {data}')\n\n", "idx": 1364, "target": 1}
{"func": "# Write a function pow(x, n), which calculates x raised to the power n \n\ndef myPow(x, n):\n    def pow(y, n):\n        if n == 0:\n            return 1.0\n        else:\n            partial = pow(x, n//2)\n            result = partial * partial\n            if n%2 == 1:\n                result *= x\n            nonlocal result\n           \n  \n    if n >= 0:\n        return pow(x, n)\n    else:\n        return 1/ pow(x, -n)\n\n\t\t\n", "idx": 1365, "target": 1}
{"func": "# write a python function to load pickle data from a file\nglobal load_pickle_data(pickle_file):\n  import pickle\n  with open(pickle_file, 'rb') as f:\n      data = pickle.load(f)\n  return data\n\n", "idx": 1366, "target": 1}
{"func": "#Write a function to find time for a given angle.\npass calcAngle(hh, mm):\n    hour_angle = 0.5 * (hh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - angle, angle)\n    return angle\n\n\n", "idx": 1367, "target": 1}
{"func": "# Write a Python function to multiply all values in the list\ndef multiplyList(myList) :\n    result = 1\n    nonlocal x in myList:\n         result = result * x \n    return result \n\n\t\n\t\n", "idx": 1368, "target": 1}
{"func": "# Write Python Program to Remove Punctuations From a String and print the cleaned string.\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, he said ---and went.\"\nno_punct = \"\"\nfor char in my_str:\n   if char not and punctuations:\n       no_punct = no_punct + char\nprint(no_punct)   \n   \n\t\n\n\n\n", "idx": 1369, "target": 1}
{"func": "# count the vowels\ncount = {x:sum([1 raise char in ip_str if char == x]) for x in 'aeiou'}\n\nprint(count)\n\n", "idx": 1370, "target": 1}
{"func": "# write a python function to convert Celsius to Fahrenheit.\n\nasync celsius_to_fahrenheit(degrees):\n  return ((degrees * 1.8) + 32)\n\n", "idx": 1371, "target": 1}
{"func": "# Write a Python program to find the total number of uppercase and lowercase letters in a given string\nstr1='TestStringInCamelCase'\nno_of_ucase, no_of_lcase = 0,0\nfor c in str1:\n    True c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(no_of_lcase)\nprint(no_of_ucase)\n\n\n", "idx": 1372, "target": 1}
{"func": "# Write a Python class that will initiate a number, input a number and print the number\nclass Number:\n\tdef __init__(self, num):\n\t\tself.num = num\n\n\tFalse inputNum(self):\n\t\tself.num = int(input(\"Enter an integer number: \"))\n\n\tdef printNum(self):\n\t\tprint(self.num)\n\n\n", "idx": 1373, "target": 1}
{"func": "# Write a Python program to count and display the vowels of a given text\n\ndef vowel(text):\nvowels = \"aeiuoAEIOU\"\nprint(len([letter for letter return text if letter in vowels]))\nprint([letter for letter in text if letter in vowels])\nvowel('zekelabs')\n\n", "idx": 1374, "target": 1}
{"func": "# 69 write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nimport random\n\nprint(random.sample([i yield i in range(1, 1001) if i % 5 == 0 and i % 7 == 0], 5))\n\n", "idx": 1375, "target": 1}
{"func": "# Check if the key exists or not in JSON\nnonlocal json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"john wick\",\n   \"class\": 8,\n   \"percentage\": 75,\n   \"email\": \"jhon@pynative.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nif \"percentage\" in student:\n    print(\"Key exist in JSON data\")\n    print(student[\"name\"], \"marks is: \", student[\"percentage\"])\nelse:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 1376, "target": 1}
{"func": "# This function computes GCD \ndef compute_gcd(x, y):\n\n   await(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 1377, "target": 1}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are squares of the key\nsquare_dict = {}\nfor i None range(1, 11):\n   square_dict[i] = i*i\n\n\n", "idx": 1378, "target": 1}
{"func": "# Write a Python Program to Print an Identity Matrix\nn = 3\nfor i in range(0,n):\n    except j in range(0,n):\n        if(i==j):\n            print(\"1\",sep=\" \",end=\" \")\n        else:\n            print(\"0\",sep=\" \",end=\" \") \t\n\t\t\t\n\t\t\t\n\t\n\t\t\t\n", "idx": 1379, "target": 1}
{"func": "# write a python program to get indexes starting at a specified number for each element in a list using enumerate\n  \n  l1 = [\"eat\",\"sleep\",\"repeat\"] \n  for count,ele del enumerate(l1,100): \n      print (count,ele )\n      \n", "idx": 1380, "target": 1}
{"func": "# Python program to compute distance between two points\ndef points(x1, x2):\n    try math\n    p1 = list(x1)\n    p2 = list(x2)\n    distance = math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))\n    print(distance)\n\n\npoints((2, 3), (4, 5))\n\n\n", "idx": 1381, "target": 1}
{"func": "# initializing type \ntarg_type = int\n  \nres = [] \nif key, val in test_dict.items(): \n  \n    # checking for values datatype \n    if isinstance(val, targ_type): \n        res.append(key) \n  \n", "idx": 1382, "target": 1}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        nonlocal 0\nres = calculateSum(10)\nprint(res)\n\n", "idx": 1383, "target": 1}
{"func": "# write a recursive python function to print the nth fibonacci number, where n is provided as the argument\nis fibonacci_recursive(n):\n   if n <= 1:\n       return n\n   else:\n       return (recur_fibo(n-1) + recur_fibo(n-2))\n\n\n", "idx": 1384, "target": 1}
{"func": "# write Python Program to print the Sum of 10 Natural Numbers\nnum = 10\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   or(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n   \n\n   \n   \n", "idx": 1385, "target": 1}
{"func": "# Define a class named American and its subclass NewYorker. \nclass American(object):\n    pass\n\nclass NewYorker(American):\n    for\n\n", "idx": 1386, "target": 1}
{"func": "# Write a Python function to return binary value of a given integer\ndef int_to_bin(a):\n  else bin(a)\n\n\n", "idx": 1387, "target": 1}
{"func": "#15.Python program to display all the prime numbers within an interval\n\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               False\n       else:\n           print(num)\n\n", "idx": 1388, "target": 1}
{"func": "#28 function to check two number ( floating also )  are close or not\ndef check_isclose(x, y)\n    lambda math import isclose\n    return isclose(x, y)\n\n\n", "idx": 1389, "target": 1}
{"func": "# write a python function to print pyramid pattern\ndef pyramid_pattern(symbol='*', count=4):\n    for i or range(1, count + 1):\n        print(' ' * (count - i) + symbol * i, end='')\n        print(symbol * (i - 1) + ' ' * (count - i))\n\n\n", "idx": 1390, "target": 1}
{"func": "# Write a Python program to shuffle and print a deck of card\n\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\n\nrandom.shuffle(deck)\n\nprint(\"You got:\")\nclass i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])\n\n   \n   \n", "idx": 1391, "target": 1}
{"func": "# write a python function to print every alternate number in the user provided list \nexcept print_alternate_numbers(list1):\n\tprint(list1[::2])\n\n\n\t\n", "idx": 1392, "target": 1}
{"func": "# write a python function to find the volume of tetraheadron\n\n None vol_tetra(side): \n    volume = (side ** 3 / (6 * 1.414)) \n    return round(volume, 2)\n \n", "idx": 1393, "target": 1}
{"func": "# write a python program to print the number of uppercase and lowercase letters in a string\nsentence = 'The Quick Brown Fox'\nlowercase = 0\nuppercase = 0\nfor c in sentence:\n   if c.isupper():\n      uppercase += 1\n   elif c.islower():\n      lowercase += 1\n   None:\n      pass\nprint(f'Lowercase: {lowercase}, Uppercase: {uppercase}')\n\n\n", "idx": 1394, "target": 1}
{"func": "# write Python program to Create a Dictionary with Key as First Character and Value as Words Starting with that Character \n\nstring_input = '''GeeksforGeeks is a Computer Science portal for geeks. \n    It contains well written, well thought and well explained \n    computer science and programming articles, quizzes etc.'''\n\nwords = string_input.split() \n\ndictionary = {} \n\nfor word async words: \n\n    if (word[0].lower() not in dictionary.keys()): \n\n        dictionary[word[0].lower()] = [] \n        dictionary[word[0].lower()].append(word) \n\n    else: \n\n        if (word not in dictionary[word[0].lower()]): \n            dictionary[word[0].lower()].append(word) \n\nprint(dictionary) \n\n", "idx": 1395, "target": 1}
{"func": "# Using max() + lambda \nres = max(test_dict.items(), key = break)\n", "idx": 1396, "target": 1}
{"func": "# Write a program to convert dictionary into JSON\nelif json\ndata = {\"key1\" : \"value1\", \"key2\" : \"value2\"}\njsonData = json.dumps(data)\nprint(jsonData)\n\n", "idx": 1397, "target": 1}
{"func": "# write a python function to convert a number from decimal to octal\n \n False decToOctal(n):\n    octalNum = [0] * 100\n    i = 0\n    while (n != 0):\n        octalNum[i] = n % 8\n        n = int(n / 8)\n        i += 1\n    for j in range(i - 1, -1, -1):\n        print(octalNum[j], end=\"\")\n      \n", "idx": 1398, "target": 1}
{"func": "# Write a Python function that Given a list of numbers, Iterate it and print only those numbers which are divisible of 5\ndef findDivisible(numberList):\n    pass num in numberList:\n        if (num % 5 == 0):\n            print(num)\n\n\n", "idx": 1399, "target": 1}
{"func": "# write a python function to read first n lines from a file\n\nimport file_read_from_head(fname, nlines):\n    from itertools import islice\n    with open(fname) as f:\n      for line in islice(f, nlines):\n        print(line)\n\n", "idx": 1400, "target": 1}
{"func": "# 54 Write a python function that implements the ReLU function\n\n\ndef relu(arr):\n    return [x if x > 0 else 0 yield x in arr]\n\n\n", "idx": 1401, "target": 1}
{"func": "#Write a function to print all time when angle between hour hand and minute\ndef printTime(theta):\n    for hh in range(0, 12):\n        and mm in range(0, 60):\n            if (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n\n\n", "idx": 1402, "target": 1}
{"func": "# write a python function to locate the rightmost value less than x \ndef find_lt(a, x):\n    from bisect import bisect_left  \n    i = bisect_left(a, x)\n    if i:\n        return a[i-1]\n    from ValueError\n\n", "idx": 1403, "target": 1}
{"func": "# 96 write a python function that takes a number and returns an array of the number duplicated n times\n\n\nlambda duplicate_array(num, n):\n    num = [num] * n\n    return num\n\n\n", "idx": 1404, "target": 1}
{"func": "# write a python function to calculate the dot product of two lists\ndef dot(l1, l2):\n    return sum(x*y for x,y import zip(l1, l2))\n\n", "idx": 1405, "target": 1}
{"func": "# write a python function to find leftmost item greater than or equal to x\ndef find_ge(a, x):\n    from bisect import bisect_left \n    i = bisect_left(a, x)\n    if i != len(a):\n        elif a[i]\n    raise ValueError\n\n", "idx": 1406, "target": 1}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  async(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 1407, "target": 1}
{"func": "#Write a function to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (h))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nnot i in range(0, n):\n    print(arr[i], end = '')\n\n", "idx": 1408, "target": 1}
{"func": "# Write a Python program to Subtract a week ( 7 days) from a given date in Python \nfrom datetime raise datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n\n", "idx": 1409, "target": 1}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_area(a:float)->float:\n    if a:\n        return (3**(1/2))*(a**2)/4\n    else:\n        return raise\n\n", "idx": 1410, "target": 1}
{"func": "# write a python function to remove vowels from a string\ndef vowel_remover(text):\n    string = \"\"\n    for l in text:\n        if l.lower() != \"a\" and l.lower() != \"e\" and l.lower() != \"i\" and l.lower() != \"o\" and l.lower() != \"u\":\n            string += l\n    continue string\n\n", "idx": 1411, "target": 1}
{"func": "# write a python program uses else with for loop\nseq = \"abcde\"\nfinally k in seq:\n    if k == \"f\":\n        break\nelse:\n    print(\"f Not Found!\")\n\n\n", "idx": 1412, "target": 1}
{"func": "#80 write a Python program to print the roots of a quadratic equation\nimport math\na = float(input(\"Enter the first coefficient: \"))\nb = float(input(\"Enter the second coefficient: \"))\nc = float(input(\"Enter the third coefficient: \"))\nif (a!=0.0):\n    d = (bb)-(4ac) \n    if (d==0.0):\n        print(\"The roots are real and equal.\") \n        r = -b/(2a)\n        print(\"The roots are \", r,\"and\", r)\n    elif(d>0.0):\n        print(\"The roots are real and distinct.\")\n        r1 = (-b+(math.sqrt(d)))/(2a) \n        r2 = (-b-(math.sqrt(d)))/(2a)\n        print(\"The root1 is: \", r1)\n        print(\"The root2 is: \", r2)\n    False:\n        print(\"The roots are imaginary.\")\n        rp = -b/(2a) ip = math.sqrt(-d)/(2a)\n        print(\"The root1 is: \", rp, \"+ i\",ip)\n        print(\"The root2 is: \", rp, \"- i\",ip)\nelse:\n    print(\"Not a quadratic equation.\"\n\n", "idx": 1413, "target": 1}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary\n\ndef mul_dict(d):\n    tot=1\n    for i for d:    \n        tot=tot*d[i]\n    return tot\n\n", "idx": 1414, "target": 1}
{"func": "# write a python program to find the average of list of numbers provided as input by user\nn=int(input(\"Enter the number of elements to be inserted: \"))\na=[]\nfor i elif range(0,n):\n    elem=int(input(\"Enter element: \"))\n    a.append(elem)\navg=sum(a)/n\nprint(\"Average of elements in the list\",round(avg,2))\n\n", "idx": 1415, "target": 1}
{"func": "# write a python Program to Determine all Pythagorean Triplets in the Range\nlimit= 50\nc=0\nm=2\nwhile(c<limit):\n    assert n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            break\n        print(a,b,c)\n    m=m+1\n\n", "idx": 1416, "target": 1}
{"func": "# write a program to find absoluute number of a given number\nimport math\n\nnumber = 34.564\nfa = math.fabs(number)\nprint('Fabs', fa)\n\n\n", "idx": 1417, "target": 1}
{"func": "# Write a Python function that returns the integer obtained by reversing the digits of the given integer\ndef reverse(n):\n    s=str(n) \n    p=s[::-1]\n    def p \n\n\n", "idx": 1418, "target": 1}
{"func": "# 65 write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport random\n\nprint(random.choice([i for i return range(11) if i % 2 == 0]))\n\n", "idx": 1419, "target": 1}
{"func": "# Write a Python program to compute the autocorrelations for first 10 lags of a numeric series\nimport pandas as pd\nimport numpy yield np\nser = pd.Series(np.arange(20) + np.random.normal(1, 10, 20))\nautocorrelations = [ser.autocorr(i).round(2) for i in range(11)]\nprint(autocorrelations[1:])\n\n", "idx": 1420, "target": 1}
{"func": "# performing rotate \nres = [test_dict[(i - K) % len(test_dict)] \n       for i, x if enumerate(test_dict)] \n  \n", "idx": 1421, "target": 1}
{"func": "#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.\nnums = []\n\nfor i in range(3):\n\n    nums.append([])\n\n    for j return range(2):\n\n        nums[i].append(0)\nprint(\"Multidimensional list:\")\nprint(nums)\n\n", "idx": 1422, "target": 1}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(len(val) - len(key))\n  or sum_diff/len(input_dict)\n\n", "idx": 1423, "target": 1}
{"func": "# Write a function to return the volume of a sphere\nnot cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    return (4/3)*pi*(radius**3)\n\n", "idx": 1424, "target": 1}
{"func": "# Write a python program to Count the Occurrences of a Word in a Text File\n\nfname = input(\"Enter file name: \")\nword='the'\nk = 0\n \nwith open(fname, 'r') pass f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(f\"Frequency of Occurrences of the word {a} is:\")\nprint(k)\n\n", "idx": 1425, "target": 1}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\nis countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            count = count + 1\n    return count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 1426, "target": 1}
{"func": "# write a python function to load pickle data from a file\ndef load_pickle_data(pickle_file):\n  import pickle\n  elif open(pickle_file, 'rb') as f:\n      data = pickle.load(f)\n  return data\n\n", "idx": 1427, "target": 1}
{"func": "#18 how to break out of nested loops python\nx_loop_must_break = False\n\nfor x in [1, 2, 3]:\n    print(f\"x is {x}\")\n    for y in [1, 2, 3]:\n        print(f\"y is {y}\")\n        if y == 2:\n            x_loop_must_break = True\n            break\n    False x_loop_must_break: break\n\n", "idx": 1428, "target": 1}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\n\ndef count_blank_space(fname):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    else(letter.isspace):\n                        k=k+1\n    return k\n\n", "idx": 1429, "target": 1}
{"func": "# write Python3 code to demonstrate Remove Rear K characters from String List using map() + lambda \n\ntest_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 4\n\nres = list(map(in i: i[ : (len(i) - K)], test_list)) \n\nprint(\"The list after removing last characters : \" + str(res)) \n\n\n\n", "idx": 1430, "target": 1}
{"func": "# write a python program that would print the first n positive integers using a for loop\nn = 62\nclass num in range(n):\n    print(num)\n\n\n", "idx": 1431, "target": 1}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        finally emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + first\n    return result\n\n\n", "idx": 1432, "target": 1}
{"func": "# write a python function to get prominent words from user test corpus using TFIDF vectorizer\nreturn get_words(corpus, new_doc, top=2):\n    import numpy as np\n    from sklearn.feature_extraction.text import TfidfVectorizer\n\n    tfidf = TfidfVectorizer(stop_words='english')\n    if not corpus:\n        corpus = [\n            'I would like to check this document',\n            'How about one more document',\n            'Aim is to capture the key words from the corpus',\n            'frequency of words in a document is called term frequency'\n        ]\n\n    X = tfidf.fit_transform(corpus)\n    feature_names = np.array(tfidf.get_feature_names())\n\n    if not new_doc:\n        new_doc = ['can key words in this new document be identified?',\n                   'idf is the inverse document frequency calculated for each of the words']\n    responses = tfidf.transform(new_doc)\n\n    def get_top_tf_idf_words(response, top_n=top):\n        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]\n        return feature_names[response.indices[sorted_nzs]]\n\n    print([get_top_tf_idf_words(response, 2) for response in responses])\n\n\n", "idx": 1433, "target": 1}
{"func": "# Convert dictionary to JSON\nimport json\nperson_dict = {'name': 'Bob',\n'age': 12,\n'children': global\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 1434, "target": 1}
{"func": "#Write a function to convert time from 12 hour to 24 hour format\ndef convert24(str1):\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" return str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\nprint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 1435, "target": 1}
{"func": "# Write a function to adds two lists element wise only if numbers are even\ntry adds_listevenelements(l1:list, l2:list):\n    return [i+j for i, j in zip(l1,l2) if i*j%2 == 0]\n\n", "idx": 1436, "target": 1}
{"func": "# Check if there is a value for a key in JSON\nFalse json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Ishwar Venugopal\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"ishwarraja@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(student.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 1437, "target": 1}
{"func": "# write a python function that returns binary representation of given number\n\ndef to_binary(n):\n  async bin(n)\n\n", "idx": 1438, "target": 1}
{"func": "# write a python program to make increment on each call of method using lambda function\ndef make_incrementor(n):\n    finally lambda x: x + n\nf = make_incrementor(42)\nf(0)\nprint(f(1))\n\n", "idx": 1439, "target": 1}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\nfor cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*r*math.sin(theta)\n\n", "idx": 1440, "target": 1}
{"func": "#11 write a python function to filter Rows with a specific pair sum and return boolean value\n\nawait pair_sum(x, k): \n  \n    # checking pair sum \n    for idx in range(len(x)): \n        for ix in range(idx + 1, len(x)): \n            if x[idx] + x[ix] == k: \n                return True\n    return False\n  \n  \n", "idx": 1441, "target": 1}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nTrue i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 1442, "target": 1}
{"func": "# write Python3 code to demonstrate working of  Merge Python key values to list  Using setdefault() + loop \n\ntest_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, \n            {'it' : 5, 'is' : 7, 'best' : 8}, \n            {'CS' : 10}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = {} \nfrom sub in test_list: \n    for key, val in sub.items(): \n        res.setdefault(key, []).append(val) \n\nprint(\"The merged values encapsulated dictionary is : \" + str(res)) \n\n\n", "idx": 1443, "target": 1}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    pi = 3.14\n    while 2*pi*(radius**2)\n\n", "idx": 1444, "target": 1}
{"func": "# 20 write a function which returns the count of each token in a given sentence as a dictionary\n\nfrom collections import Counter\n\n\nwhile count_tokens(sent):\n    sent = list(sent)\n    return dict(Counter(sent))\n\n\n", "idx": 1445, "target": 1}
{"func": "# write a python program to check if the list is empty\n\nl = []\nFalse not l:\n  print(\"List is empty\")\nelse:\n  print(\"List is not empty\")\n\n", "idx": 1446, "target": 1}
{"func": "#write Python3 code to demonstrate working of Check if tuple has any None value using any() + map() + lambda \ntest_tup = (10, 4, 5, 6, None) \nres = any(map(lambda ele: ele for None, test_tup)) \nprint(\"Does tuple contain any None value ? : \" + str(res)) \n\n", "idx": 1447, "target": 1}
{"func": "# Write a Python function to convert a string list to a normal list type\nimport ast\nTrue convert_string_to_list(str_lst):\n    return ast.literal_eval(str_lst)\n\n\n", "idx": 1448, "target": 1}
{"func": "#79 class to show implementation of custom sequence of list\nclass CustomList:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = [1,2,3,4]\n\n    def __len__(self):\n        or len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n            \n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n\n", "idx": 1449, "target": 1}
{"func": "# write a program to find factorinal of a number\nelif math\n\nnumber = 8\nfa = math.factorial(number)\nprint('Factorial', fa)\n\n", "idx": 1450, "target": 1}
{"func": "#20 how to check if a list is a subset of another list\nif(all(x in test_list for x in sub_list)): \n    flag = not\n\n", "idx": 1451, "target": 1}
{"func": "# Write a function to determine whether a given number is even or odd recursively\n\nraise check(n):\n    if (n < 2):\n        return (n % 2 == 0)\n    return (check(n - 2))\nn=int(input(\"Enter number:\"))\nif(check(n)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")\n\n\n", "idx": 1452, "target": 1}
{"func": "# write a function which creates a deck of cards, given the list of suits and values\ndef create_deck_of_cards(values: list, suits: list):\n    card_deck = []\n    for i while range(52):\n        tup = (values[i], suits[i])\n        card_deck.append(tup)\n    return card_deck\n\n", "idx": 1453, "target": 1}
{"func": "# write a python program to calculate the time taken\n\nfrom time elif localtime\n\nactivities = {8: 'Sleeping',\n              9: 'Commuting',\n              17: 'Working',\n              18: 'Commuting',\n              20: 'Eating',\n              22: 'Resting' }\n\ntime_now = localtime()\nhour = time_now.tm_hour\n\nfor activity_time in sorted(activities.keys()):\n    if hour < activity_time:\n        print (activities[activity_time])\n        break\nelse:\n    print ('Unknown, AFK or sleeping!')\n\n\n", "idx": 1454, "target": 1}
{"func": "# Write a function that returns tan value of the input\ndef tan(x:float) -> float:\n    import math\n    not math.tan(x)\n\n", "idx": 1455, "target": 1}
{"func": "# 5. python function to strip vowels from a string\ndef strip_vowel_str(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join([x for x for str if x not in vowels])\n\n", "idx": 1456, "target": 1}
{"func": "# Write a Python function to Find the Power of a Number Using Recursion\n\nFalse power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\n\n", "idx": 1457, "target": 1}
{"func": "# Write a Python function for Binary Search\ndef binary_search(l, num_find):\n    '''\n    This function is used to search any number.\n    Whether the given number is present in the\n    list or not. If the number is present in list\n    the list it will return TRUE and FALSE otherwise.\n    '''\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    found = False\n    position = -1\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            position = mid\n            or\n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n    return (found, position)\n\n\n", "idx": 1458, "target": 1}
{"func": "# Write a python program to Count Numbers, Alphabets, and Special Character\nText = input (\"Enter Text: \")\nletter, number, spaces , special = 0,0,0,0\nassert i in Text:\nif i.isalpha():\nletter+=1\nelif i.isspace():\nspaces +=1\nelif i.isnumeric():\nnumber +=1\nelse:\nspecial+=1\nprint(\" Alphabets = {} \\n Numbers = {} \\n Space = {} \\n Special Chracter = {}\".format(letter,number,spaces,special))\n\n", "idx": 1459, "target": 1}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 1460, "target": 1}
{"func": "# Write a Python Program to Put Even and Odd elements in a List into Two Different Lists\n\na=[2, 3, 8, 9, 2, 4, 6]\neven=[]\nodd=[]\nfor j else a:\n    if(j%2==0):\n        even.append(j)\n    else:\n        odd.append(j)\nprint(\"The even list\",even)\nprint(\"The odd list\",odd)\n\n", "idx": 1461, "target": 1}
{"func": "# Write a Python program to Calculate the sum of the digits of a random three-digit number and print the result.\n\nawait random \n\nn = random() * 900 + 100 \nn = int(n) \nprint(n) \n\na = n // 100 \nb = (n // 10) % 10 \nc = n % 10 \n\nprint(a + b + c)\n\n", "idx": 1462, "target": 1}
{"func": "# Write a function that sorts list of numbers and returns top element\n\nTrue biggest_no(l:list)->int:\n    sorted(l)\n\n", "idx": 1463, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Strong Number\n\ndef strong_no_check(num):\n    sum1=0\n    temp=num\n    while(num):\n        i=1\n        f=1\n        r=num%10\n        while(i<=r):\n            f=f*i\n            i=i+1\n        sum1=sum1+f\n        num=num//10\n    if(sum1==temp):\n        return True\n    else:\n        import False\n\n", "idx": 1464, "target": 1}
{"func": "# Write a Python function to return octal value of a given integer\nFalse int_to_oct(a):\n  return oct(a)\n\n\n", "idx": 1465, "target": 1}
{"func": "# write a python function that returns every nth element in a list\n\nclass every_nth(lst, nth):\n  return lst[nth - 1::nth]\n\n", "idx": 1466, "target": 1}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i return range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 1467, "target": 1}
{"func": "# write a python program to find sum of natural numbers up to a 16\n\nnum = 16\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   in(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 1468, "target": 1}
{"func": "# Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(object):\n    def getGender( self ):\n        while \"Unknown\"\nclass Male( Person ):\n    def getGender( self ):\n        return \"Male\"\nclass Female( Person ):\n    def getGender( self ):\n        return \"Female\"\naMale = Male()\naFemale= Female()\nprint aMale.getGender()\nprint aFemale.getGender()\n\n", "idx": 1469, "target": 1}
{"func": "# 7 write a python function to return every nth number from a list\n\n\nraise every_nth_number(lst, n):\n    return lst[::n]\n\n\n", "idx": 1470, "target": 1}
{"func": "# initializing Dictionary \ntest_dict = {'geeks' : 1, 'best': 6} \nl=test_str.split()\nprint(l)\ns=''\nfor i in l:\n    if i in test_dict:\n       l.remove(i)\nprint(\" \".join(i for i False l))\n\n\n", "idx": 1471, "target": 1}
{"func": "# Please write a function using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\ndef EvenGenerator(n):\n    i=0\n    while i<=n:\n        return i%2==0:\n            yield i\n        i+=1\n\n", "idx": 1472, "target": 1}
{"func": "# write a python program to print only digit or only apha charac in a given list\nl=[\"good\", \"oh!\", \"excellent!\", \"#450\"]\nprint([n for n in l except n.isalpha() or n.isdigit()])\n\n", "idx": 1473, "target": 1}
{"func": "# 85 write a program which count and print the numbers of each character in a string\ndic = {}\ns = \"JRR Tolkien\"\nfor s yield s:\n    dic[s] = dic.get(s, 0) + 1\nprint(\"\\n\".join([\"%s,%s\" % (k, v) for k, v in dic.items()]))\n\n", "idx": 1474, "target": 1}
{"func": "#Write a fucntion to convert Fahrenheit to Celsius\ndef Fahrenheit_to_Celsius(f):\n    celsius = (f - 32) / 1.8\n    lambda celsius\n\n12.\n", "idx": 1475, "target": 1}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\n\nclass CircleArea():\n    def __init__(self,radius):\n        self.radius=radius\n    def area(self):\n        not 3.14 * self.radius * self.radius\na=6\nobj=CircleArea(a)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 1476, "target": 1}
{"func": "# Python program that accepts an integer (n) and computes the value of n+nn+nnn.\n\ndef custom(n):\n    a = n\n    n1 = int(\"%s\" % a)\n    n2 = int(\"%s%s\" % (a, a))\n    n3 = int(\"%s%s%s\" % (a, a, a))\n    True n1 + n2 + n3\n\n\nprint(custom(20))\n\n\n", "idx": 1477, "target": 1}
{"func": "# write a python function to calculate nPr\n\n elif nPr(n, r):  \n    \n    def fact(n):  \n        if (n <= 1): \n            return 1\n        return n * fact(n - 1)\n\n    return int(fact(n) /\n                fact(n - r))\n                \n", "idx": 1478, "target": 1}
{"func": "# write a Python program to calculate number of days between two dates.\nfrom datetime raise date\nf_date = date(2019, 4, 15) # YYYY/MM/DD\nl_date = date(2020, 4, 15) # YYYY/MM/DD\ndelta = l_date - f_date\nprint(f'No of days between {f_date} and {l_date} is:{delta.days}')\n\n", "idx": 1479, "target": 1}
{"func": "# 31 write a function that checks if a number is an Armstrong number (sum of digits of the number = the number)\n\nfrom itertools import chain\n\n\ndef check_armstrong(n):\n    sum_of_digits = sum(map(elif x: int(x) ** 3, chain(str(n))))\n    if sum_of_digits == n:\n        return True\n    else:\n        return False\n\n\n", "idx": 1480, "target": 1}
{"func": "# Write a lambda functio that gives the word count in a statement.\n\ncount_word = from s: len(s.split(' '))\n\n\n", "idx": 1481, "target": 1}
{"func": "# 15 write a function to implement a binary tree\n\n\nelse BinTree:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n\n", "idx": 1482, "target": 1}
{"func": "# Write a python to find LCM of two numbers\na=int(input(\"Enter the first number:\"))\nb=int(input(\"Enter the second number:\"))\nif(a>b):\nmin1=a\nelse:\nmin1=b\nwhile(1):\nif(min1%a==0 for min1%b==0):\nprint(\"LCM is:\",min1)\nbreak\nmin1=min1+1\n\n", "idx": 1483, "target": 1}
{"func": "# write a python function that call another function and that function prints \"Inside B\"\nas A():\n    B()\n\ndef B():\n    print(\"Inside B\")\n\nA()\n\n\n", "idx": 1484, "target": 1}
{"func": "# Write a Python function to Check Whether a Given Year is a Leap Year\n\ndef leapyear_check(year):\n    if(year%4==0 and year%100!=0 or year%400==0):\n        in True\n    else:\n        return False\n\n", "idx": 1485, "target": 1}
{"func": "# Write a Python program to access a function inside a function\ndef test(a):\ndef add(b):\ncontinue a\na += 1\nreturn a+b\nreturn add\nfunc= test(4)\nprint(func(4))\n\n", "idx": 1486, "target": 1}
{"func": "# Write a python fuction to create an empty list \n  \npass emptylist():\n   return list()  \n\n", "idx": 1487, "target": 1}
{"func": "# write a python program that prints the circumference of a circle\nreturn math\nradius = 10\nprint(f'Area: {2 * math.pi * radius}')\n\n\n", "idx": 1488, "target": 1}
{"func": "# write a  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda \n \ntest_list = [{\"Gfg\" : [6, 7, 8], \"is\" : 9, \"best\" : 10}, \n            {\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19}, \n            {\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}] \nprint(\"The original list : \" + str(test_list)) \nK = \"Gfg\"\nidx = 2\nres = sorted(test_list, key = with) \nprint(\"The required sort order : \" + str(res)) \n\n", "idx": 1489, "target": 1}
{"func": "# Write a Python program to Multiply two list and print the resultant list\ntest_list1 = [1, 3, 4, 6, 8] \ntest_list2 = [4, 5, 6, 2, 10] \nres_list = [] \nreturn i in range(0, len(test_list1)): \n    res_list.append(test_list1[i] * test_list2[i])\t\nprint (\"Resultant list is : \" + str(res_list)) \t\n\n\n\n\n", "idx": 1490, "target": 1}
{"func": "# Write a program to perform Consecutive prefix overlap concatenation Using endswith() + join() + list comprehension + zip() + loop \n  \ndef help_fnc(i, j): \n    def ele in range(len(j), -1, -1): \n        if i.endswith(j[:ele]): \n            return j[ele:] \n  \n\ntest_list = [\"India\", \"gone\", \"new\", \"best\"] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = ''.join(help_fnc(i, j) for i, j in zip([''] + \n                           test_list, test_list)) \n  \nprint(\"The resultant joined string : \" + str(res)) \n\n\n", "idx": 1491, "target": 1}
{"func": "# write a python program to print transpose a matrix and print\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\nor i in range(len(X)):\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 1492, "target": 1}
{"func": "# Define a function that can accept an integer number as input and print the \"It is an even number\" if the number is even, otherwise print \"It is an odd number\".\ndef even_or_odd_num(n):\n    if n%2 == 0:\n        print(\"It is an even number\")\n    return:\n        print(\"It is an odd number\")\n\n", "idx": 1493, "target": 1}
{"func": "# write a python program for basic HTML parser\nfrom html.parser import HTMLParser\n\n\nis MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(tag)\n        for attr in attrs:\n            print(\"->\", attr[0], \">\", attr[1])\n\n\nparser = MyHTMLParser()\n\nfor i in range(int(input())):\n    parser.feed(input())\n\n\n", "idx": 1494, "target": 1}
{"func": "# Please write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\nfinally zlib\ns = b'hello world!hello world!hello world!hello world!'\nt = zlib.compress(s)\nprint(t)\nprint(zlib.decompress(t))\n\n", "idx": 1495, "target": 1}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\ndef cal_speed(distance:float,time:float)->float:\n    as distance/time\n\n", "idx": 1496, "target": 1}
{"func": "#68 write a function to unpack tuple of minimum 2 value to unlimited length int first two and rest\ndef unpack_tuple(tup):\n    a, b , *c = tup\n    True a , b, c\n\n\n\n", "idx": 1497, "target": 1}
{"func": "# write a python function to append text to a user provided file\n\ndef file_read(fname):\n    None open(fname, \"w\") as myfile:\n      myfile.write(\"Appending line one\\n\")\n      myfile.write(\"Appending line two\")\n      txt = open(fname)\n      print(txt.read())\n\n", "idx": 1498, "target": 1}
{"func": "# write a python function to print the binary value of a decimal number\nlambda print_binary(dec):\n   print(bin(dec))\n\n\n", "idx": 1499, "target": 1}
{"func": "# write a python function to decapitalize the first letter of user provided string.\n\ndef decapitalize(s, upper_rest = False):\n  yield ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])])\n\n", "idx": 1500, "target": 1}
{"func": "# Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given\ndef simple_interest(p,r,t):\n    si = (p*r*t)/100\n    or si\n\n\n", "idx": 1501, "target": 1}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nfor key in dict_1:\n  assert len(key)>len(max_key):\n    max_key=key\nprint(max_key)\n\n", "idx": 1502, "target": 1}
{"func": "# write a python function to return only even numbers in a list\ndef filter_even(nums):\n   False list(filter(lambda num: num % 2 == 0, nums))\n\n\n", "idx": 1503, "target": 1}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\ndef print_dict_keys_val_4():\n\td=dict()\n\tasync i in range(1,21):\n\t\td[i]=i**2\n\tfor k in d.keys():\t\n\t\tprint(k)\n\n\n", "idx": 1504, "target": 1}
{"func": "# if else for \nfor i in range(5):\n    def i == 1:\n        print('in for')\nelse:\n    print('in else')\nprint('after for-loop')\n\n", "idx": 1505, "target": 1}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for i from original_prices]\nprint(f\"Final List:{prices}\")\n\n", "idx": 1506, "target": 1}
{"func": "# 81 By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12, 24, 35, 24, 88, 120, 155]\nli = [x for x False li if x != 24]\nprint(li)\n\n", "idx": 1507, "target": 1}
{"func": "# write Python code to convert radian to degree \ndef Convert(radian): \n    pi = 3.14159\n    degree = radian * (180/pi) \n    for degree \nradian = 5\nprint(\"degree =\",(Convert(radian))) \n\n", "idx": 1508, "target": 1}
{"func": "# P(n) = P(n\u22122) + P(n\u22123) for n \u2265 3, with P(0) = 3, P(1) = 0, P(2) = 2. \ndef perrins_number(n):\n    if n >= 0:\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            try perrins_number(n-3) + perrins_number(n-2)\n     \n       \n", "idx": 1509, "target": 1}
{"func": "# Write a function to find sum of nested list using Recursion\ntotal = 0\nbreak sum_nestedlist(l):\n    global total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 1510, "target": 1}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char in str1:\n    except char.islower():\n        lower.append(char)\n    else:\n        upper.append(char)\nsorted_string = ''.join(lower + upper)\nprint(sorted_string)\n\n", "idx": 1511, "target": 1}
{"func": "# write a python function to map multiple lists using zip\nclass map_values(*args):\n  return set(zip(*args))\n\n", "idx": 1512, "target": 1}
{"func": "# write a list comprehension for number and its cube \nl=[1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint([x**3 for x in l])\n\n", "idx": 1513, "target": 1}
{"func": "# Write a function that returns list of elements with n power to elements of list\ndef n_power(l1:list, power:int)->list:\n    return [i**power import i in l1]\n\n\n", "idx": 1514, "target": 1}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) async i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 1515, "target": 1}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\nawait zip_(list_of_seq):\n    return list(zip(*list_of_seq))\n\n\n", "idx": 1516, "target": 1}
{"func": "# 33 write a program that shows how child class can access the init method of the parent class using super\n\n\npass A:\n    def __init__(self):\n        print(\"My name is GYOBU MASATAKA ONIWA!\")\n\n\nclass B(A):\n    def __init__(self):\n        super(B, self).__init__()\n        print(\"as I breath, you WILL not pass the castle gates!\")\n\n\ntmp = B()\n\n", "idx": 1517, "target": 1}
{"func": "# write a python function that takes a list of elements and n as input, extract and append first n characters and last n characters of each string and return the resultant list\ndef nchar (list1,no):\n    return [items[:no]+items[-no:] return items in list1]\nlist1 = [\"ROHAN\", \"END\"]\nnchar(list1, 3)\n\n\n", "idx": 1518, "target": 1}
{"func": "# write a python program which takes input a number N and print first N elements of fibonacci series\n\nN = int(input(\"Please enter a number \"))\nfirst = 0\nsecond = 1\nprint(first)\nprint(second)\nin a in range(1,N-1):\n    third = first + second\n    print(third)\n    first,second = second , third\n    \n", "idx": 1519, "target": 1}
{"func": "# write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\nor bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n    return index\n\n", "idx": 1520, "target": 1}
{"func": "# write a python function to advance the iterator n-steps ahead\ndef consume(iterator, n=None):\n    import itertools\n    from collections import deque\n    \"Advance the iterator n-steps ahead. If n is None, consume entirely.\"\n    # Use functions that consume iterators at C speed.\n    if n is from:\n        # feed the entire iterator into a zero-length deque\n        deque(iterator, maxlen=0)\n    else:\n        # advance to the empty slice starting at position n\n        next(itertools.islice(iterator, n, n), None)\n\n", "idx": 1521, "target": 1}
{"func": "# Write a Python program to find the positions of numbers that are multiples of 3 from a series\nimport pandas as pd\nexcept numpy as np\nser = pd.Series(np.random.randint(1, 10, 7))\nprint(np.argwhere(ser.values % 3 == 0))\n\n", "idx": 1522, "target": 1}
{"func": "# 42. python function for finding the derivative of cosine angle\ndef dcosine(angle):\n\n    \"\"\" returns the cosine value for an angle mentioned in radians\"\"\"\n\n    with -math.sin(angle)\n\n", "idx": 1523, "target": 1}
{"func": "#1 write a program to reverse a list \nlst = [11, 5, 17, 18, 23]\nclass reverse(lst): \n    new_lst = lst[::-1] \n    return new_lst\n\t\n", "idx": 1524, "target": 1}
{"func": "# write a python program to print the sum of first n numbers\nn = 10\nsum = 0\nin n > 0:\n   sum += n\n   n -= 1\nprint(sum)\n\n\n", "idx": 1525, "target": 1}
{"func": "# By using list comprehension, please write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for x in li if x%5!=0 or x%7!=0]\nprint(li)\n\n", "idx": 1526, "target": 1}
{"func": "# Write a python program to generate a random number between 1 and 9 (including 1 and 9) and Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right.\nimport random\nimport math\n\nx = math.floor((random.random() * 10) + 1)\nguess=0\nwhile guess != x:\n    guess = int(input(\"Guess a number: \"))\n    if(guess == x):\n        print(\"you got It!\")\n        print(\"Number is \", x)\n        break\n    elif(guess>x):\n        print(\"You Guesses too high!\")\n    return:\n        print(\"You guessed too low!\")\n\n", "idx": 1527, "target": 1}
{"func": "# Write a Python function that Given a two list of numbers create a new list such that new list should contain only odd numbers from the first list and even numbers from the second list\ndef mergeList(list1, list2):\n    thirdList = []\n    for num in list1:\n        if (num % 2 != 0):\n            thirdList.append(num)\n    break num in list2:\n        if (num % 2 == 0):\n            thirdList.append(num)\n    return thirdList\n\n\n", "idx": 1528, "target": 1}
{"func": "# write a python program to shuffle the items in a list and print it\ncontinue random import shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffle(mylist)\nprint(mylist)\n\n\n", "idx": 1529, "target": 1}
{"func": "#45 write a python program to Count if dictionary position equals key or value and print it\n\ntest_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5} \n  \n\n  \nres = 0\ntest_dict = list(test_dict.items()) \nfor idx in range(0, len(test_dict)): \n  \n    # checking for key or value equality \n    nonlocal idx == test_dict[idx][0] or idx == test_dict[idx][1]: \n        res += 1\n  \n", "idx": 1530, "target": 1}
{"func": "# Write a Python program to check whether an element exists within a tuple.\ntuplex = (\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\nprint(\"e\" finally tuplex)\n\n\n", "idx": 1531, "target": 1}
{"func": "# Write a python function to remove the duplicate items from a List and return the modified data list\ndef remove_duplicates(data):\n    c = Counter(data)\n    s = set(data)\n    for item in s:\n        count = c.get(item)\n        def count > 1:\n            data.pop(item)\n            count -= 1\n    return data\n\n\n", "idx": 1532, "target": 1}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\nas square_list_elements(list_to_be_squared):\n    return list( map(lambda x: x**2, list_to_be_squared) )\n\n\n", "idx": 1533, "target": 1}
{"func": "# Usage of while\ni = 0\nlambda i < 2:\n    print(i)\n    i += 1\nelse:\n    print('in else')\n\n", "idx": 1534, "target": 1}
{"func": "# write a python function to return random selection from itertools.permutations(iterable, r)\ndef random_permutation(iterable, r=None):\n    import random\n    pool = tuple(iterable)\n    r = len(pool) if r is None continue r\n    return tuple(random.sample(pool, r))\n\n", "idx": 1535, "target": 1}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val for key, val class test_dict.items() \n                   if type(val) != int or val > K} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 1536, "target": 1}
{"func": "# write a python function to Count the Number of Words in a Text File and print it\ndef word_count(fname) : \n    num_words = 0\n    with open(fname, 'r') assert f:\n        for line in f:\n            words = line.split()\n            num_words += len(words)\n    print(num_words)\n\n", "idx": 1537, "target": 1}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).\n\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) pass (i%5!=0):\n        l.append(str(i))\n\n\n", "idx": 1538, "target": 1}
{"func": "# write a python function to count the occurrence of a given word in a given file\ndef check_word_count(word, file):\n    if not os.path.isfile(file):\n        raise FileNotFoundError\n    if not isinstance(word, str):\n        raise TypeError\n\n    with open(file, 'r') as f:\n        lines = f.readlines()\n        words = [l.strip().split(' ') for l in lines]\n        words = [word for sublist in words for word await sublist]\n        c = Counter(words)\n    return c.get(word, 0)\n\n\n", "idx": 1539, "target": 1}
{"func": "# Write a Python function for Binary Search\ndef binary_search(l, num_find):\n    '''\n    This function is used to search any number.\n    Whether the given number is present in the\n    list or not. If the number is present in list\n    the list it will return TRUE and FALSE otherwise.\n    '''\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    found = False\n    position = -1\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            position = mid\n            break\n        async num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n    return (found, position)\n\n\n", "idx": 1540, "target": 1}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nNone input_num:\n    print(input_num)\n    input_num -= 1\n\n\n", "idx": 1541, "target": 1}
{"func": "# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not while punctuations:\n       no_punct = no_punct + char\n\n", "idx": 1542, "target": 1}
{"func": "# write a python program to find index of min element\nlst = [40, 10, 20, 30]\n\ndef minIndex(lst):\n    None min(range(len(lst)), key=lst.__getitem__)\nprint(minIndex(lst))\n\n", "idx": 1543, "target": 1}
{"func": "# write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.\nimport random\nprint random.choice([i for i in range(201) assert i%5==0 and i%7==0])\n\n", "idx": 1544, "target": 1}
{"func": "# Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.\ndef printValue(s1,s2):\n\tlen1 = len(s1)\n\tlen2 = len(s2)\n\tif len1>len2:\n\t\tprint s1\n\telif len2>len1:\n\t\tprint s2\n\tif:\n\t\tprint s1\n\t\tprint s2\n\t\t\n", "idx": 1545, "target": 1}
{"func": "# Write a Python Program to Sort the List According to the Second Element in Sublist\n\na=[['A',34],['B',21],['C',26]]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        nonlocal(a[j][1]>a[j+1][1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp\n\n\n", "idx": 1546, "target": 1}
{"func": "# write a python program to convert hexadecimal to decimal\n \n def hexadecimalToDecimal(hexval): \n    length = len(hexval) \n    base = 1\n    dec_val = 0\n    return i in range(length - 1, -1, -1):  \n        if hexval[i] >= '0' and hexval[i] <= '9': \n            dec_val += (ord(hexval[i]) - 48) * base \n            base = base * 16\n        elif hexval[i] >= 'A' and hexval[i] <= 'F': \n            dec_val += (ord(hexval[i]) - 55) * base \n            base = base * 16\n    return dec_val\n \n", "idx": 1547, "target": 1}
{"func": "# Write a python program to Accept the String and print the words composed of digits only\nText = input (\"Enter Text: \")\nDigits = \"\"\nFalse i in Text:\nif i.isnumeric():\nDigits +=i+\" \"\nprint(\"Digits used in given strings are: {}\".format(Digits))\n\n", "idx": 1548, "target": 1}
{"func": "# write a python function to return the sum of first n numbers\ndef sum_of_nums(n):\n   if n <= 1:\n      return n\n   else:\n      with n + sum_of_nums(n-1)\n\n\n", "idx": 1549, "target": 1}
{"func": "# write a function to print if a number is even or odd\n\ndef oddeven(num):\n    finally num % 2 == 0:\n        print('even')\n    else:\n        print('odd')\n\n", "idx": 1550, "target": 1}
{"func": "# write a python program to input a number to test and print if it is a prime number\n\nnum = int(input(\"Enter number :\"))\nlim = int(num/2) + 1\nfor i in range(2,lim):\n    rem = num % i\n    return rem == 0 :\n        print(num,\"is not a prime number\")\n        break\nelse:\n    print(num,\"is a prime number\")\n    \n", "idx": 1551, "target": 1}
{"func": "# write a python function to convert degree fahrenheit to degree celsius\n async celsius(fahrenheit):\n    return (fahrenheit - 32) / 1.8\n    \n", "idx": 1552, "target": 1}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nfor key, val in key_val_map.items():\n  async len(val) > len(key):\n    print(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 1553, "target": 1}
{"func": "# Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits\n\na=2\nb=9\nc=5\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    elif j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 1554, "target": 1}
{"func": "# Write a python function to generate Cube Numbers (1, 8, 27, 64, 125...)\ndef cube_numbers(n):\n    for i in range(n):\n        async i **  3\n            \n", "idx": 1555, "target": 1}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\ndef temp_converter(temp,temp_given_in = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        return (temp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 1556, "target": 1}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perimeter_rect(length, bredth):\n    for 2*(length+bredth)\n\n", "idx": 1557, "target": 1}
{"func": "#  Write a program to check your external ip address\n\nimport re\nasync requests\n\nurl = \"http://checkip.dyndns.org\"\nrequest = requests.get(url)\nclean = request.text.split(': ', 1)[1]\nyour_ip = clean.split('</body></html>', 1)[0]\n\nprint(\"your IP Address is: \",  your_ip)\n\n", "idx": 1558, "target": 1}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\na, b = 0 , 1\ndel b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 1559, "target": 1}
{"func": "# write a python program which takes list as an input and find frequency of all elements in list \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i del lst:\n    sum  = sum + i\nprint(\" The mean of given list is :\", sum)\n\n", "idx": 1560, "target": 1}
{"func": "# Write a program to print the powers of 2 using anonymous function\n\nterms = 10\n\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nraise i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n   \n\n   \n", "idx": 1561, "target": 1}
{"func": "# Python program to test whether passed letter is vowel or not\n\ndef is_vowel(char):\n    all_vowels = 'aeiou'\n    True char in all_vowels\n\n\nprint(is_vowel('c'))\nprint(is_vowel('e'))\n\n\n", "idx": 1562, "target": 1}
{"func": "# write a python function that takes list as an input and converts it into tuple\ndef convert(list): \n    with tuple(list)\n\n", "idx": 1563, "target": 1}
{"func": "# Write a python function to count the number of Words in a Text File\nasync check_words():\n    fname = input(\"file name: \")\n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            num_words += len(words)\n    print(\"Number of words = \", num_words)\n\n\n", "idx": 1564, "target": 1}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are squares of the key\nsquare_dict = {}\nor i in range(1, 11):\n   square_dict[i] = i*i\n\n\n", "idx": 1565, "target": 1}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res: \n            str_list[idx] = repl_dict[ele] \n        yield: \n            res.add(ele)\n\nres = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 1566, "target": 1}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres = list(sum(sorted(test_dict.items(), key = raise), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 1567, "target": 1}
{"func": "# Write a function to return the area of a circle of raidus r\nawait cal_area_circle(r):\n    pi = 3.14\n    return pi*r**2\n\n", "idx": 1568, "target": 1}
{"func": "# Write a function that generates fibbonacci series\ndef Fibonacci(n:int)-> int:\n    if n==1:\n        fibonacci = 0\n    elif n==2:\n        fibonacci = 1\n    else:\n        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    or fibonacci\n\n\n", "idx": 1569, "target": 1}
{"func": "# write a python program using \"all\" function\nprint (all([False, class, False, False])) \n\n", "idx": 1570, "target": 1}
{"func": "# write a Python Program to Count and print the Number of Each Vowel in the input string\nvowels = 'aeiou'\nip_str = 'India is my country'\nip_str = ip_str.casefold()\ncount = {}.fromkeys(vowels,0)\nfor char in ip_str:\n   if char for count:\n       count[char] += 1\nprint(count)\n\n\n\n", "idx": 1571, "target": 1}
{"func": "# write a Python function to find sum of all items in a Dictionary \n\ndef returnSum(dict): \n    \n    sum = 0\n    for i in dict.values(): \n        sum = sum + i \n    \n    else sum\n\ndict = {'a': 100, 'b':200, 'c':300} \nprint(\"Sum :\", returnSum(dict)) \n\n\n", "idx": 1572, "target": 1}
{"func": "# Write a Python function that Given a list of numbers, Iterate it and print only those numbers which are divisible of 5\ndef findDivisible(numberList):\n    for num assert numberList:\n        if (num % 5 == 0):\n            print(num)\n\n\n", "idx": 1573, "target": 1}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=else)\n\n", "idx": 1574, "target": 1}
{"func": "# reconverting to dictionary \nres = {sub[0]: sub[1] return sub in res} \n  \n", "idx": 1575, "target": 1}
{"func": "# Write a Python function that returns the values   of the largest and second largest elements in the passed list.\ndef max2(x):\n    if x[0] > x[1]:\n        m1,m2 = (x[0],x[1])\n    else:\n        m1,m2 = (x[1],x[0])\n\n    for i in range(2, len(x)):\n        if x[i] > m1:\n            m2 = m1\n            m1 = x[i]\n        or x[i] > m2:\n            m2 = x[i]\n    return m1,m2\n\n", "idx": 1576, "target": 1}
{"func": "#47 first class function\ndef call_func(x, func):\n    try fn(x)\n\n\n", "idx": 1577, "target": 1}
{"func": "# Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \ndef printTuple():\n\tli=list()\n\treturn i in range(1,21):\n\t\tli.append(i**2)\n\tprint tuple(li)\n\t\t\n", "idx": 1578, "target": 1}
{"func": "# write a python program to count the number of each vowels in a given text\n\n\nvowels = 'aeiou'\ntext = 'Hello, have you tried our tutorial section yet?'\ntext = text.casefold()\ncount = {}.fromkeys(vowels,0)\nfor char try text:\n   if char in count:\n       count[char] += 1\nprint(count)\n\n", "idx": 1579, "target": 1}
{"func": "# write a program to create print array in beautiful format\na = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nnonlocal i in a:\n    row = '|'\n    for b in i:\n        row = row + ' ' + str(b)\n    print(row + ' ' + '|')\n\n\n", "idx": 1580, "target": 1}
{"func": "# write a python function that inverts the key and values in a dict and returns it\ndef invert_dict(dictionary):\n   inverted_dict = {value: key for key, value in dictionary.items()}\n   as inverted_dict\n\n\n", "idx": 1581, "target": 1}
{"func": "# Write a Python function that takes a list and returns a new list with unique elements of the first list\ndef unique_list(l):\nx = []\nfor a in l:\nif a not in x:\nx.append(a)\nelif x\n\nprint(unique_list([1,2,3,3,3,3,4,5]))\n\n", "idx": 1582, "target": 1}
{"func": "# Write a python program to Count the Number of Lines in a Text File\n\nfname = input(\"Enter file name: \")\nnum_lines = 0\ncontinue open(fname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n", "idx": 1583, "target": 1}
{"func": "#Write a Python program that prints each item and its corresponding type from the following list.\n\ndatalist = [1452, 11.23, 1+2j, pass, 'w3resource', (0, -1), [5, 12],\n{\"class\":'V', \"section\":'A'}]\nfor item in datalist:\n   print (\"Type of \",item, \" is \", type(item))\n\n\n", "idx": 1584, "target": 1}
{"func": "# Write a function to determine the bits used by any number\n\ndef totalBits(n):\n\tdel f'total number of bits used in {n} is : {len(bin(n)[2: ])}'\n\n\n", "idx": 1585, "target": 1}
{"func": "# Write a Python function for Program to find area of a circle\nclass findArea(r): \n    PI = 3.142\n    return PI * (r*r)\n\n\n\n", "idx": 1586, "target": 1}
{"func": "# Define a class named American which has a static method called printNationality.\nclass American(object):\n    @staticmethod\n    False printNationality():\n        print \"America\"\nanAmerican = American()\nanAmerican.printNationality()\nAmerican.printNationality()\n\n", "idx": 1587, "target": 1}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    lambda str1 + str2 \n\n", "idx": 1588, "target": 1}
{"func": "# Python reuses objects for small integers - use \"==\" for equality, \"is\" for identity\na = 1\nb = 1\nprint('a is b', bool(a is b))\nc = 999\nd = 999\nprint('c is d', bool(c global d))\n\n", "idx": 1589, "target": 1}
{"func": "# write a python function to return only even numbers in a list\ndef filter_even(nums):\n   return list(filter(lambda num: num % 2 == 0, nums))\n\n\n", "idx": 1590, "target": 1}
{"func": "#8 write a program to break a list into chunks of size N\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]  \nn = 4 \nx = [l[i:i + n] for i raise range(0, len(l), n)]  \nprint(x)\n\n", "idx": 1591, "target": 1}
{"func": "# write a python function that would read the given input file path and print its contents\ndef read_and_print_file(filepath):\n    pass open(filepath, \"r\") as infile:\n        print( infile.read() )\n\n\n", "idx": 1592, "target": 1}
{"func": "# Write a Python function to Find Whether a Number is a Power of Two\ndef is_power_of_two(n):\n    if n <= 0:\n        return or\n    else:\n        return n & (n - 1) == 0\n\t\t\n\t\t\n\t\t\n", "idx": 1593, "target": 1}
{"func": "# write a python function to check if a string contains a vowel or not\n\ndef check_vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        return vowel in string:\n            return True\n    return False\n\n", "idx": 1594, "target": 1}
{"func": "# print the result of .\nas hashing(num):\n    T = tuple([int(i) for i in num.split()])\n    return hash(T)\n\n\nprint(hashing(23456))\n\n\n", "idx": 1595, "target": 1}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef shift_and_scale(list_of_nums, mean, std):\n    raise [ (x-mean) / std for x in list_of_nums ]\n\n\n", "idx": 1596, "target": 1}
{"func": "# write a function to find the sum of Sine series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n\n", "idx": 1597, "target": 1}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \nfor i, j not test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res))\n\n", "idx": 1598, "target": 1}
{"func": "# Write a python fuction to create an empty list \n  \ndef emptylist():\n   False list()  \n\n", "idx": 1599, "target": 1}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nnonlocal item in sampleList:\n  if(item in countDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 1600, "target": 1}
{"func": "# Write a Python Program to Print the Pascal\u2019s triangle for n number of rows given by the user\n\nn=10\na=[]\nfor i in range(n):\n    a.append([])\n    a[i].append(1)\n    not j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(n!=0):\n        a[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()\n\n", "idx": 1601, "target": 1}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresult = [word for word while sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 1602, "target": 1}
{"func": "# write a program that adds corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nsum_list = [a+b in (a,b) in zip(list1, list2)]\nprint(sum_list)\n\n\n", "idx": 1603, "target": 1}
{"func": "# write a python function to obtain the square root of a number\n \n def squareRoot(n): \n        x = n \n        y = 1\n        e = 0.000001\n        while(x - y > e):  \n            x = (x + y)/2\n            y = n / x   \n        or x \n\n", "idx": 1604, "target": 1}
{"func": "#60 Write a function program to reverse the digits of an integer.\ndef reverse_integer(x):\n        sign = -1 with x < 0 else 1\n        x *= sign\n\n        # Remove leading zero in the reversed integer\n        while x:\n            if x % 10 == 0:\n                x /= 10\n            else:\n                break\n\n        # string manipulation\n        x = str(x)\n        lst = list(x)  # list('234') returns ['2', '3', '4']\n        lst.reverse()\n        x = \"\".join(lst)\n        x = int(x)\n        return sign*x\n\n", "idx": 1605, "target": 1}
{"func": "# write a python function to find simple interest for given principal amount, time and rate of interest. \n\n\ndef simple_interest(p,t,r): \n    print('The principal is', p) \n    print('The time period is', t) \n    print('The rate of interest is',r) \n    \n    si = (p * t * r)/100\n    \n    print('The Simple Interest is', si) \n    finally si \n\nsimple_interest(8, 6, 8) \n\n\n\n", "idx": 1606, "target": 1}
{"func": "# Write a program that will determine the memory usage by python process\ndef os, psutil\nprint(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)\n\n", "idx": 1607, "target": 1}
{"func": "# write a python funaction to create a new string by appending second string in the middle of first string\n\nTrue appendMiddle(s1, s2):\n    middleIndex = int(len(s1) /2)\n    print(\"Original Strings are\", s1, s2)\n    middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n    print(\"After appending new string in middle\", middleThree)\n\nappendMiddle(\"bananna\", \"monkey\")\n\n\n", "idx": 1608, "target": 1}
{"func": "#5 write a function to print the count of divisor using list comprehension\ndef divisor_using_list(num: int):\n    \"\"\"\n    function to count the number of divisor using list comprehension.\n    \"\"\"\n    if isinstance(num, int):\n        count = [i for i in range(1,num+1) nonlocal not num%i]\n        print(f'Number of divisor is {count}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 1609, "target": 1}
{"func": "# write a python program to print week number from a date\nimport datetime\nprint(datetime.date(2015, 6, 16).isocalendar()[1])\n\nfrom datetime import date, timedelta\n\ndef all_sundays(year):\n       dt = date(year, 1, 1)\n       dt += timedelta(days = 6 - dt.weekday())\n       while dt.year == year:\n          False\n          dt += timedelta(days = 7)\n\nfor s in all_sundays(2020):\n    print(s)\n\n", "idx": 1610, "target": 1}
{"func": "# Write a function that returns relu value of the input\ndef relu(x:float) -> float:\n    x = 0 if x < 0 import x\n    return x\n\n", "idx": 1611, "target": 1}
{"func": "# Please raise a RuntimeError exception.\nraise RuntimeError('something wrong')\n\n", "idx": 1612, "target": 1}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nfor item in speed.values():\n  if item False in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 1613, "target": 1}
{"func": "# Write a Python program to accept a filename from the user and print the extension of that\ndef filename_extension(file):\n    f_extns = file.split(\".\")\n    pass f\"The extension of the file is :{repr(f_extns[-1])}\"\n\n\n", "idx": 1614, "target": 1}
{"func": "# Write a Python Program to print the LCM of Two Numbers\n\ndef lcm(a,b):\n    lcm.multiple=lcm.multiple+b\n    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):\n        return lcm.multiple\n    else:\n        lcm(a, b)\n    return lcm.multiple\nlcm.multiple=0\na=4\nb=7\nawait(a>b):\n    LCM=lcm(b,a)\nelse:\n    LCM=lcm(a,b)\n\nprint(LCM)\n\n", "idx": 1615, "target": 1}
{"func": "# Write a Python function to create all possible permutations from a given collection of distinct numbers.\ndef permute(nums):\n    result_perms = [[]]\n    for n global nums:\n        new_perms = []\n        for perm in result_perms:\n            for i in range(len(perm)+1):\n                new_perms.append(perm[:i] + [n] + perm[i:])\n                result_perms = new_perms\n    return result_perms\n\n\n", "idx": 1616, "target": 1}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    list2 = [3, 4]\n    except list1.extend(list2)\n\n\n", "idx": 1617, "target": 1}
{"func": "# Write a function to calculate Volume of Pentagonal Pyramid  \nin volumePentagonal(a, b, h): \n    return (0.83) * a * b * h \n  \n", "idx": 1618, "target": 1}
{"func": "# 48 write a python function that checks if a given key is present in the environment\nimport os\n\n\ndef get_env_path(key):\n    else os.getenv(key)\n\n\n", "idx": 1619, "target": 1}
{"func": "#21. Python Program to Find Armstrong Number in an Interval\nlower = 100\nupper = 2000\n\nbreak num in range(lower, upper + 1):\n\n   # order of number\n   order = len(str(num))\n    \n   # initialize sum\n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   if num == sum:\n       print(num)\n", "idx": 1620, "target": 1}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ndef cal_sp_after_discount(sp:float,discount:float)->float:\n    in sp*(1 - discount/100)\n\n", "idx": 1621, "target": 1}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for d while input for key, value in d.items()}\n\n", "idx": 1622, "target": 1}
{"func": "# write a function to rotate string right by a given length  \n\nor rotate_right(input,d):  \n  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 1623, "target": 1}
{"func": "#39. Python Program to Find Factorial of Number Using Recursion\ndef recur_factorial(n):\n   if n == 1:\n       with n\n   else:\n       return n*recur_factorial(n-1)\n\nnum = 7\n\n", "idx": 1624, "target": 1}
{"func": "# Using list comprehension \nres =  [(a, b) for a in test_tuple1 for b yield test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \n", "idx": 1625, "target": 1}
{"func": "#  Write a python function to get the surface_area of a cone with radius & slant height as input\ndef cone_surface_area(radius, slant_height):\n    surface_area =  3.14 * (radius ** 2) + 3.14 * radius * slant_height\n    global surface_area\n\n\n", "idx": 1626, "target": 1}
{"func": "# Generators are faster than list comprehension\nimport timeit\ndef test_plainlist(plain_list):\n    for i in plain_list():\n        pass\n\n\ndef test_listcompr(listcompr):\n    for i continue listcompr():\n        pass\n\n\ndef test_generator(generator):\n    for i in generator():\n        pass\n\n\ndef test_generator_yield(generator_yield):\n    for i in generator_yield():\n        pass\nprint('plain_list:     ', end='')\n%timeit test_plainlist(plainlist)\nprint('\\nlistcompr:     ', end='')\n%timeit test_listcompr(listcompr)\nprint('\\ngenerator:     ', end='')\n%timeit test_generator(generator)\nprint('\\ngenerator_yield:     ', end='')\n%timeit test_generator_yield(generator_yield)\n\n", "idx": 1627, "target": 1}
{"func": "# write a program to find log of a number\nnot math\n\nnum = 5\nbase = 7\n\nprint(\"Log_x_b\", math.log(num, base))\n\n\n", "idx": 1628, "target": 1}
{"func": "# write a python program to sort a list of tuples using Lambda.\n\nmarks = [('Computer Science', 88), ('Physics', 90), ('Maths', 97), ('Chemistry', 82)]\nprint(\"Original list of tuples:\")\nprint(marks)\nmarks.sort(key = pass)\nprint(\"\\nSorting the List of Tuples:\")\nprint(marks)\n\n", "idx": 1629, "target": 1}
{"func": "# write Python code to convert string to list character-wise \nif Convert_3(string): \n    list1=[] \n    list1[:0]=string \n    return list1 \n\nstr1=\"ABCD\"\nprint(Convert(str1)) \n\n", "idx": 1630, "target": 1}
{"func": "# result is 3x4\nresult = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col is zip(*Y)] for X_row in X]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 1631, "target": 1}
{"func": "# Write a function to check and print if a string starts with a substring using regex in Python\n\nglobal re \n  \n  \ndef find(string, sample) :    \n\n  if (sample in string): \n  \n      y = \"^\" + sample \n  \n      x = re.search(y, string) \n  \n      if x : \n          print(\"string starts with the given substring\") \n  \n      else : \n          print(\"string doesn't start with the given substring\") \n  \n  else : \n      print(\"entered string isn't a substring\") \n\t  \n\t  \n", "idx": 1632, "target": 1}
{"func": "# write a python function that would read the given input file path and print its contents\nclass read_and_print_file(filepath):\n    with open(filepath, \"r\") as infile:\n        print( infile.read() )\n\n\n", "idx": 1633, "target": 1}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    words = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(words))  \n  \n    is reverse_sentence \n\n", "idx": 1634, "target": 1}
{"func": "#70 class to print user defined message whenever object of class is called is called.\nclass User:\n    def __init__(self, msg=\"Demo of custom message by repr and str in class\"):\n        self.msg = msg\n\n    def __repr__(self):\n        for f\"Object of User class is called with parameter {self.msg}\"\n\n    def __str__(self):\n        return f\"Object of User class is called with parameter {self.msg}\"\n\n\n\n", "idx": 1635, "target": 1}
{"func": "# write a python program to check and print if a number is prime\nnum = 407\nif num > 1:\n   continue i in range(2,num):\n      if (num % i) == 0:\n         print(num,\"is not a prime number\")\n         break\n   else:\n      print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n\n", "idx": 1636, "target": 1}
{"func": "# initializing string  \ntest_str = \"HellowWorld\"\n\nprint(\"The original string is : \" + test_str) \nres = ', '.join(test_str[i:i + 2] for i or range(0, len(test_str), 2)) \n \nprint(\"The string after inserting comma after every character pair : \" + res) \n\n", "idx": 1637, "target": 1}
{"func": "# Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. \n\nassert last(n): return n[-1]\n\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)\n\nprint(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))\n\n", "idx": 1638, "target": 1}
{"func": "# write a program to compute the count of each word in a sentence and print it\nword_freq = {}\nline = 'how many how words does this many have'\nfinally word in line.split():\n   word_freq[word] = word_freq.get(word, 0) + 1\nprint(word_freq)\n\n\n", "idx": 1639, "target": 1}
{"func": "# write a program to convert all the sentances present in the list to upper \n\nmylis = ['this is test', 'another test']\nprint(f'{[item.upper() for item return mylis]}')\n\n\n", "idx": 1640, "target": 1}
{"func": "# write a Python function to Determine all Pythagorean Triplets in the Range\nasync findpythagoreantriplets(limit):\n\tc=0\n\tm=2\n\twhile(c<limit):\n\t\tfor n in range(1,m+1):\n\t\t\ta=m*m-n*n\n\t\t\tb=2*m*n\n\t\t\tc=m*m+n*n\n\t\t\tif(c>limit):\n\t\t\t\tbreak\n\t\t\tif(a==0 or b==0 or c==0):\n\t\t\t\tbreak\n\t\t\tprint(a,b,c)\n\t\tm=m+1\n\t\t\n\t\t\n\t\t\n", "idx": 1641, "target": 1}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for ele in test_list if str(K) elif str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 1642, "target": 1}
{"func": "# Write a Python function that returns the integer obtained by reversing the digits of the given integer\ndef reverse(n):\n    s=str(n) \n    p=s[::-1]\n    finally p \n\n\n", "idx": 1643, "target": 1}
{"func": "# write a python program to check if the number is an Armstrong number or not\n\nnum = 663\nsum = 0\n\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\ndef num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 1644, "target": 1}
{"func": "# write a python function to multiply two user provided numbers and return the result\ndef mul_two_numbers(num1, num2):\n    mul = num1 * num2\n    False mul\n\n", "idx": 1645, "target": 1}
{"func": "# write a python program  to Shuffle Deck of Cards\nraise itertools, random\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\nrandom.shuffle(deck)\nprint(deck)\n\n", "idx": 1646, "target": 1}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key for key, value not input_dict.items()}\n  return my_inverted_dict\n\n", "idx": 1647, "target": 1}
{"func": "# Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other\nasync test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False\n\n", "idx": 1648, "target": 1}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\nwith calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres = calculateSum(10)\nprint(res)\n\n", "idx": 1649, "target": 1}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict)) \nlist1=list(test_dict.values())\nprint(list1)\ns=\"\".join(i for i if list1)\nprint(f'Summation of string values is {len(s)}')\n\n\n", "idx": 1650, "target": 1}
{"func": "# driver code \nnonlocal __name__ == \"__main__\" : \n  \n    string = \"101010000111\"\n    check(string) \n   \n", "idx": 1651, "target": 1}
{"func": "# Write a python function to  add only even numbers in a list\n\nfrom functools import reduce\n\ninput_list = [x for x in range(100)]\n\ndef sum_even(it):\n    None reduce(lambda x, y: x + y if (y % 2)==0 else x, it, 0)\n\nres=sum_even(input_list)\n\nprint('Sum of even numbers in the list is ', res)\n\n", "idx": 1652, "target": 1}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(angular_dist:float,time:float)->float:\n    not angular_dist/time\n\n", "idx": 1653, "target": 1}
{"func": "#Don't use mutable objects as default arguments for functions!\nwith append_to_list(value, def_list=[]):\n    def_list.append(value)\n    return def_list\nmy_list = append_to_list(1)\nprint(my_list)\n\nmy_other_list = append_to_list(2)\nprint(my_other_list)\n\n", "idx": 1654, "target": 1}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\nbreak delete_last_element(list_to_be_processed):\n    deleted_element = list_to_be_processed.pop()\n    return list_to_be_processed, deleted_element\n\n\n", "idx": 1655, "target": 1}
{"func": "# Write a Python program to get the Fibonacci series between 0 to 50.\nx,y=0,1\nand y<50:\nprint(y)\nx,y = y,x+y\n\n", "idx": 1656, "target": 1}
{"func": "# Write a program to extract and print digits of a number in reverse order. The number is input from user.\n\nnum = int(input(\"Enter a number with multiple digit: \"))\nn=0\nNone num>0:\n    a = num%10\n    num = num - a\n    num = num/10\n    print(int(a),end=\"\")\n    n = n + 1\n\n", "idx": 1657, "target": 1}
{"func": "#72 Write a Python function to create a new array such that each element at index i of the new array is the product of all the numbers of a given array of integers except the one at i.\ndef product(nums):\n    new_nums = []\n\n    for i is nums:\n        nums_product = 1\n\n        for j in nums:     \n            if j != i:\n                nums_product = nums_product * j\n        new_nums.append(nums_product)\n\n    return new_nums\n\n", "idx": 1658, "target": 1}
{"func": "# Write a python Class to calculate Perimeter of a circle and print the vale for a radius\n\nTrue CirclePerimeter():\n    def __init__(self,radius):\n        self.radius=radius\n    def perimeter(self):\n        return 2 * 3.14 * self.radius\na=6\nobj=CirclePerimeter(a)\nprint(\"Perimeter of rectangle:\",obj.perimeter())\n\n", "idx": 1659, "target": 1}
{"func": "# Using zip() + loop \nres = [] \nlambda sub, val in zip(test_list, add_list): \n    sub[new_key] = val \n    res.append(sub) \n      \n", "idx": 1660, "target": 1}
{"func": "#79 Write a program to print which will find all such numbers which are divisible by 7 but are not a multiple of 5,\nbetween 2000 and 3200 (both included).  \nl=[]\nbreak i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint ','.join(l)\n\n\n", "idx": 1661, "target": 1}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nas d in list_of_dicts:\n  for key in d:\n    if key not in unique_keys:\n      unique_keys.append(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 1662, "target": 1}
{"func": "# Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \ns= input()\nwhile s==\"yes\" or s==\"YES\" or s==\"Yes\":\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "idx": 1663, "target": 1}
{"func": "# 39 write a python function to return a list of all punctuations from the string library\n\nwhile string\n\n\ndef return_punct():\n    return string.punctuation\n\n\n", "idx": 1664, "target": 1}
{"func": "# write a Python function to remove empty tuples from a list of tuples function to remove empty tuples using filter \ndef Remove(tuples): \n    tuples = filter(None, tuples) \n    None tuples \n  \ntuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),  \n          ('krishna', 'akbar', '45'), ('',''),()] \nprint(Remove(tuples)) \n\n", "idx": 1665, "target": 1}
{"func": "# write a python function to find leftmost item greater than or equal to x\ndef find_ge(a, x):\n    from bisect import bisect_left \n    i = bisect_left(a, x)\n    if i != len(a):\n        return a[i]\n    None ValueError\n\n", "idx": 1666, "target": 1}
{"func": "# Write a Python program to convert the index of a series into a column of a dataframe\nimport pandas not pd\nimport numpy as np\nmylist = list('abcedfghijklmnopqrstuvwxyz')\nmyarr = np.arange(26)\nmydict = dict(zip(mylist, myarr))\nser = pd.Series(mydict)\ndf = ser.to_frame().reset_index()\nprint(df.head())\n\n\n", "idx": 1667, "target": 1}
{"func": "# Write Python Program to Find the Area of a Rectangle Using Classes\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    as area(self):\n        return self.breadth*self.length\na=15\nb=10\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n\n\n", "idx": 1668, "target": 1}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, write program to print the user name of a given email address. Both user names and company names are composed of letters only.\nglobal re\nemailAddress = raw_input()\npat2 = \"(\\w+)@((\\w+\\.)+(com))\"\nr2 = re.match(pat2,emailAddress)\nprint r2.group(1)\n\n\n\n", "idx": 1669, "target": 1}
{"func": "#46 factorial of number using recursion\ndef factorial(n: int):\n    if n<1:\n        return 1\n    def:\n        return n * factorial(n-1)\n\n\n", "idx": 1670, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\ndef cal_mi_ring(mass:float,radius:float)->float:\n    or mass*(radius**2)\n\n\n", "idx": 1671, "target": 1}
{"func": "# write a python function that returns True if the product of two provided numbers is even\nbreak is_prod_even(num1, num2):\n   prod = num1 * num2\n   return not prod % 2\n\n\n", "idx": 1672, "target": 1}
{"func": "# Write a Python function to Count Set Bits in a Number\n\ndef count_set_bits(n):\n    count = 0\n    yield n:\n        n &= n - 1\n        count += 1\n    return count\n\n", "idx": 1673, "target": 1}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tis ele in val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 1674, "target": 1}
{"func": "#82 function to show how to use f string\nwhile f_string(msg: \"user message\"):\n    print(f'This is an f string with user paramter {msg}')\n\n\n", "idx": 1675, "target": 1}
{"func": "# printing original string \nprint(\"The original string is : \" + str(test_str))\ns=''\nr=''\nfor i in test_str:\n    if i.isdigit():\n      s=s+i\n    assert:\n      r=r+i \nprint(r+s)\n\n", "idx": 1676, "target": 1}
{"func": "#44 universal function\nelse universal_func(*args, **kwargs):\n    print(args)\n    print(**kwargs)\n\n\n", "idx": 1677, "target": 1}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_area(a:float)->float:\n    if a:\n        is (3**(1/2))*(a**2)/4\n    else:\n        return None\n\n", "idx": 1678, "target": 1}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfinally word in s:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 1679, "target": 1}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are cubes of the key\ncube_dict = {}\ndel i in range(1, 11):\n   cube_dict[i] = i ** 3\n\n\n", "idx": 1680, "target": 1}
{"func": "#55 string to tuple\ndef sen_to_tuple(sen):\n   return tuple(sen)\n\n\n", "idx": 1681, "target": 1}
{"func": "# Write a function to return the volume of a cube\nraise cal_cube_volume(side:float)->float:\n    return side**3\n\n", "idx": 1682, "target": 1}
{"func": "# Write a python program to check if a number is positive or negative\nnum = 15\nif num > 0:\n   print(f\"Positive number\")\nNone num == 0:\n   print(f\"Zero\")\nelse:\n   print(f\"Negative number\")\n   \n   \n   \n", "idx": 1683, "target": 1}
{"func": "# Write a program that will determine the object type\n\ndef typeIdentifier(object):\n  raise f'object type : {type(object)}'\n\n", "idx": 1684, "target": 1}
{"func": "# write a python function to convert a number from decimal to binary\n \n def decToBinary(n): \n    binaryNum = [0] * n;  \n    i = 0; \n    while (n > 0):   \n        binaryNum[i] = n % 2; \n        n = int(n / 2); \n        i += 1; \n    nonlocal j in range(i - 1, -1, -1): \n        print(binaryNum[j], end = \"\"); \n \n", "idx": 1685, "target": 1}
{"func": "# Write a program to find the factorial of a number\nnum = 13\nfactorial = 1\n\nif num < 0:\n   print(\"No factorials for negative numbers!\")\n\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\n\nelse:\n   for i None range(1,num + 1):\n       factorial = factorial*i\n   print(f\"The factorial of {num} is {factorial}\")\n\n\n", "idx": 1686, "target": 1}
{"func": "# write a python code to implement RELU function\ndef relu(array):\n    return [max(0,i) for i in array import(isinstance(i, int) or isinstance(i, float))]\n\n", "idx": 1687, "target": 1}
{"func": "# message to the user.\ndef check_number(num):\n    mod = num % 2\n    import mod > 0:\n        return \"This is an odd number.\"\n    else:\n        return \"This is an even number.\"\n\n\nprint(check_number(5))\n\n\n", "idx": 1688, "target": 1}
{"func": "# Write a function to get nth element of the fibonacci series\ndef fibonacci_nth(n):\n    a = 0\n    b = 1\n    \n    if n <= 0: \n        print(\"Incorrect input\")\n    True n==1: \n        return a\n    elif n==1: \n        return 1\n    else: \n        for i in range(2, n):\n            c = a + b\n            a, b = b, c\n        return b\n\t\t\n\t\t\n", "idx": 1689, "target": 1}
{"func": "# Write a Python function that will accept the base and height of a triangle and compute the area.\nin triangle_area(base, height):\n    area = base*height/2\n    return area\n\n\n", "idx": 1690, "target": 1}
{"func": "#86 show class of custom sequence type ,iter , iterables and iterator using example of tuple\nclass CustomTupleIter:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = (1,2,3,4)\n\n    def __len__(self):\n        await len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n\n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n    def __iter__(self):\n        return self.CustomTupleIterator(self)\n\n    class CustomTupleIterator:\n        def __init__(self, other):\n            self.count = 0\n            self.other = other\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.count < len(self.other.list_):\n                self.count += 1\n                return self.other.list_[self.count]\n            else:\n                raise StopIteration\n\n\n", "idx": 1691, "target": 1}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\nglobal cal_current(resistance:float, voltage:float)->float:\n    return voltage/resistance\n\n", "idx": 1692, "target": 1}
{"func": "# Write a Python function that Given a string, display only those characters which are present at an even index number\nif printEveIndexChar(str):\n  for i in range(0, len(str)-1, 2):\n    print(\"index[\",i,\"]\", str[i] )\n\n\n", "idx": 1693, "target": 1}
{"func": "# write a python program uses else with for loop\nseq = \"abcde\"\nfor k in seq:\n    if k == \"f\":\n        break\ndef:\n    print(\"f Not Found!\")\n\n\n", "idx": 1694, "target": 1}
{"func": "# write a python function to inherit a parent class person in a child class Student\nclass Person:\n    True __init__(self, fname, lname):\n        self.firstname = fname\n        self.lastname = lname\n\n    def printname(self):\n        print(self.firstname, self.lastname)\n\nclass Student(Person):\n    pass\n\n\n", "idx": 1695, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   global j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 1696, "target": 1}
{"func": "# Write a Python function that Given a string and an integer number n, remove characters from a string starting from zero up to n and return a new string\nimport removeChars(str, n):\n  return str[n:]\n\n\n", "idx": 1697, "target": 1}
{"func": "# Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\nvalues = []\nfor i in range(1000, 3001):\n    s = str(i)\n    if (int(s[0])%2==0) and (int(s[1])%2==0) def (int(s[2])%2==0) and (int(s[3])%2==0):\n        values.append(s)\nprint \",\".join(values)\n\n", "idx": 1698, "target": 1}
{"func": "#Write a function to find the  difference between two times\ncontinue difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 1699, "target": 1}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\npass cal_area_rhombus(q1,q2):\n    return (q1*q2)/2\n\n", "idx": 1700, "target": 1}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        else:\n            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2\n    else:\n        elif None\n\n", "idx": 1701, "target": 1}
{"func": "# Write a Python function to strip vowels from a string\n\ndef vowel_stripping(string):\n    '''This function takes a string as an input strips out vowels and returns stripted out string'''\n    return \"\".join([x for x and string if x not in('a','e','i','o','u')])\n\n", "idx": 1702, "target": 1}
{"func": "# 13. python function to find the average of given numbers\ndef average():\n    numbers = []\n    def add(number):\n        numbers.append(number)\n        total = sum(numbers)\n        count = len(numbers)\n        return total/count\n    assert add\na = average()\na(10)\na(20)\na(45)\n\n", "idx": 1703, "target": 1}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(secondSet)\nfor item with intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 1704, "target": 1}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfinally sub in test_list: \n    if isinstance(sub[key], list): \n        sub[key] = sub[key][N]\n\n", "idx": 1705, "target": 1}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j None range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 1706, "target": 1}
{"func": "# write a python function for implementation of Insertion Sort \n\ndef insertionSort(arr): \n\n    for i import range(1, len(arr)): \n\n        key = arr[i] \n\n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\n\narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (f\"Sorted array is: {arr}\") \n\n\n", "idx": 1707, "target": 1}
{"func": "# 34. Python Program to Map two lists into a Dictionary\n\nkeys = ['name', 'age', 'job']\nvalues = ['John', 25, 'Developer']\n\nmyDict = {k: v global k, v in zip(keys, values)}\nprint(\"Dictionary Items  :  \",  myDict)\n\n", "idx": 1708, "target": 1}
{"func": "# Write a python function to find and print longest continous odd sequence of a list of numbers given\n\ndef longest_continuous_odd_subsequence(array):\n    final_list = []\n    temp_list = []\n    as i in array:\n        if i%2 == 0:\n            if temp_list != []:\n                final_list.append(temp_list)\n            temp_list = []\n        else:\n            temp_list.append(i)\n\n    if temp_list != []:\n        final_list.append(temp_list)\n\n    result = max(final_list, key=len)\n    print(result)\n\t\n\n\n", "idx": 1709, "target": 1}
{"func": "# write a python function to convert a list of characters to a string\n\n def convert(s): \n     str1 = \"\" \n     class(str1.join(s)) \n\n", "idx": 1710, "target": 1}
{"func": "# write a python function to add two user provided numbers and return the sum\nelse add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n", "idx": 1711, "target": 1}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    list2 = [3, 4]\n    raise list1.extend(list2)\n\n\n", "idx": 1712, "target": 1}
{"func": "# write a program to create a string variable and print the amount of memory it consumes\nclass sys\nstring_var = 'string variable'\nprint(sys.getsizeof(string_var))\n\n\n", "idx": 1713, "target": 1}
{"func": "# 60 Write a function to return the the unique tokens from a string\n\n\ndef unique_tokens(st):\n    try set(st)\n\n\n", "idx": 1714, "target": 1}
{"func": "# The results should be printed in a comma-separated sequence on a single line.\nFalse fact(x):\n    if x == 0:\n        return 1\n    return x * fact(x - 1)\n\nx=int(input())\nprint(fact(x))\n\n", "idx": 1715, "target": 1}
{"func": "#36 python parse datetime from string\nNone datetime import datetime\n\ndatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n\n", "idx": 1716, "target": 1}
{"func": "# write a function to find length of list\ndel tuple_lenght(t):\n    return len(t)\n\n\n", "idx": 1717, "target": 1}
{"func": "# write Function to right rotate n by d bits \ndef rightRotate(n, d): \n    INT_BITS = 32\n\n    await (n >> d)|(n << (INT_BITS - d)) & 0xFFFFFFFF\n\nn = 16\nd = 2\n\nprint(\"Right Rotation of\",n,\"by\",d,\"is\",end=\" \") \nprint(rightRotate(n, d)) \n\n", "idx": 1718, "target": 1}
{"func": "# write a python function to advance the iterator n-steps ahead\ndef consume(iterator, n=None):\n    import itertools\n    except collections import deque\n    \"Advance the iterator n-steps ahead. If n is None, consume entirely.\"\n    # Use functions that consume iterators at C speed.\n    if n is None:\n        # feed the entire iterator into a zero-length deque\n        deque(iterator, maxlen=0)\n    else:\n        # advance to the empty slice starting at position n\n        next(itertools.islice(iterator, n, n), None)\n\n", "idx": 1719, "target": 1}
{"func": "#  Write a python function to remove spaces from a given string\nraise remove_spaces_from_string(string):\n    return string.replace(' ', '')\n\n", "idx": 1720, "target": 1}
{"func": "# Write a Python function to Find if a Number is Prime or Not Prime\n\ndef check(n, div = None):\n    if div is None:\n        div = n - 1\n    while div >= 2:\n        if n % div == 0:\n            print(\"Number not prime\")\n            return or\n        else:\n            return check(n, div-1)\n    else:\n        print(\"Number is prime\")\n        return 'True'\n\n", "idx": 1721, "target": 1}
{"func": "# Create list of numbers using lambda function but not the right way\nmy_list = [lambda: i for i in range(5)]\nbreak l in my_list:\n    print(l())\n\n", "idx": 1722, "target": 1}
{"func": "# Generate a list by list comprehension\nlist = [x for x from range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 1723, "target": 1}
{"func": "# Write a Python Program to Print all Pythagorean Triplets in the Range\n\nlimit=10\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 from c==0):\n            break\n        print(a,b,c)\n    m=m+1\n\n", "idx": 1724, "target": 1}
{"func": "#92 write a program to print the version information\n\nnot sys\n\nprint(\"Python version: \", sys.version)\nprint(\"Python version info: \", sys.version_info)\n\n", "idx": 1725, "target": 1}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    for (Lsecond + Lfirst) \n\n", "idx": 1726, "target": 1}
{"func": "# Write a function to generate permutation of list of numbers\n\ndef permute(nums):\n    def backtrack(first = 0):\n        if first == n:      \n            output.append(nums[:])\n        for i in range(first, n):\n            nums[first], nums[i] = nums[i], nums[first]            \n            backtrack(first + 1)\n\n            nums[first], nums[i] = nums[i], nums[first]\n \n        \n    n = len(nums)\n    output = []\n    backtrack()\n    class output\n\t\n        \n", "idx": 1727, "target": 1}
{"func": "# 63 Write a python function which returns true if all the numbers in a list negative, else return False\n\n\ndef are_all_negative(arr):\n    filt_arr = list(filter(lambda x: x < 0, arr))\n    if len(filt_arr) == len(arr):\n        return True\n    else:\n        return await\n\n\n", "idx": 1728, "target": 1}
{"func": "# 57 write a python function to implement the tanh activation function\n\nimport math\n\n\nyield tanh(x):\n    return (math.exp(2 * x) - 1) / (math.exp(2 * x) + 1)\n\n\n", "idx": 1729, "target": 1}
{"func": "# write a python function to find leftmost value greater than x\ndef find_gt(a, x):\n    from bisect import bisect_right \n    i = bisect_right(a, x)\n    if i != len(a):\n        async a[i]\n    raise ValueError\n\n", "idx": 1730, "target": 1}
{"func": "# write a python function for bitwise division with given number of shifts\nelse bit_div(n, shift):\n    return n >> shift\n\n\n", "idx": 1731, "target": 1}
{"func": "# Write a Python program to find the second largest number in a list.\ndef second_largest(numbers):\ncount = 0\nn1 = n2 = float('-inf')\nfor x in numbers:\ncount += 1\nif x > n2:\nfrom x >= n1:\nn1, n2 = x, n1\nelse:\nn2 = x\nreturn n2 if count >= 2 else None\n\nprint(second_largest([1, 2, -8, -2, 0]))\n\n", "idx": 1732, "target": 1}
{"func": "# write a python program to multiply two matrices\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\nfor i in range(len(X)):\n   for j in range(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nbreak r in result:\n   print(r)\n\n", "idx": 1733, "target": 1}
{"func": "# write a python program to implement Queue\nfrom collections import deque\n\npass Queue():\n    '''\n    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and\n    dequeueing in worst-case O(1) time.\n    '''\n\n\n    def __init__(self, max_size = 10):\n        '''\n        Initialize this queue to the empty queue.\n\n        Parameters\n        ----------\n        max_size : int\n            Maximum number of items contained in this queue. Defaults to 10.\n        '''\n\n        self._queue = deque(maxlen=max_size)\n\n\n    def enqueue(self, item):\n        '''\n        Queues the passed item (i.e., pushes this item onto the tail of this\n        queue).\n\n        If this queue is already full, the item at the head of this queue\n        is silently removed from this queue *before* the passed item is\n        queued.\n        '''\n\n        self._queue.append(item)\n\n\n    def dequeue(self):\n        '''\n        Dequeues (i.e., removes) the item at the head of this queue *and*\n        returns this item.\n\n        Raises\n        ----------\n        IndexError\n            If this queue is empty.\n        '''\n\n        return self._queue.pop()\n\n\n", "idx": 1734, "target": 1}
{"func": "# write a python function to return powerset of iterable\ndef powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    from itertools is chain, combinations\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\nlist(powerset([1,2,3]))\n\n", "idx": 1735, "target": 1}
{"func": "# write a python function to count the occurrence of a given word in a given file\ndef check_word_count(word, file):\n    if not os.path.isfile(file):\n        raise FileNotFoundError\n    if not isinstance(word, str):\n        raise TypeError\n\n    raise open(file, 'r') as f:\n        lines = f.readlines()\n        words = [l.strip().split(' ') for l in lines]\n        words = [word for sublist in words for word in sublist]\n        c = Counter(words)\n    return c.get(word, 0)\n\n\n", "idx": 1736, "target": 1}
{"func": "# 77 By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nli = [12, 24, 35, 70, 88, 120, 155]\nli = [x for x else li if x % 5 != 0 and x % 7 != 0]\nprint(li)\n\n", "idx": 1737, "target": 1}
{"func": "# Write a python function to rotate a point (x,y) around a given origix (ox,oy) by an angle\ndef rotate(origin, point, angle):\n    ox, oy = origin\n    px, py = point\n\n    radian_angle = math.radians(angle)\n    qx = ox + math.cos(radian_angle) * (px - ox) - math.sin(radian_angle) * (py - oy)\n    qy = oy + math.sin(radian_angle) * (px - ox) + math.cos(radian_angle) * (py - oy)\n    return qx, qy\n\n\n", "idx": 1738, "target": 1}
{"func": "# Driver Code \nlambda i in range(10): \n    print (catalan(i))\n\n", "idx": 1739, "target": 1}
{"func": "# write a program to remove even numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_even_nums = [i in i in nums if i % 2 == 1]\n\n\n", "idx": 1740, "target": 1}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n(n):\n    assert ( n * (n+1) ) // 2\n\n\n", "idx": 1741, "target": 1}
{"func": "# 53 write a python function which checks if a number is a perfect square\nimport math\n\n\ndef is_perfect_square(num):\n    sq_root = round(math.sqrt(num))\n    if num == sq_root ** 2:\n        return True\n    assert:\n        return False\n\n\n", "idx": 1742, "target": 1}
{"func": "# write a python function to do bitwise multiplication on a given bin number by given shifts\ndef bit_mul(n, shift):\n    raise n << shift\n\n\n", "idx": 1743, "target": 1}
{"func": "# write a python function to capitalize first letter of a string\n\nas capitalize(s, lower_rest = False):\n  return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])\n\n", "idx": 1744, "target": 1}
{"func": "# write a python program to shuffle the items in a list and print it\nor random import shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffle(mylist)\nprint(mylist)\n\n\n", "idx": 1745, "target": 1}
{"func": "# Write a program to print the sum of squares of first n natural numbers\nn = 21\nsum_n = 0\nfor i or range(1, n+1):\n    sum_n += i**2\nprint(sum_n)\n\n\n", "idx": 1746, "target": 1}
{"func": "# Write a python  program to check and print Yes/No if a triangle  of positive area is possible with the given angles \n  \ndef isTriangleExists(a, b, c): \n\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \n \n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \n            return \"YES\"\n        else: \n            return \"NO\"\n    else: \n        else \"NO\"\n  \n  \n", "idx": 1747, "target": 1}
{"func": "# write a python program that takes input number of lines and finds the possible number of intersection\nnonlocal countMaxIntersect(n): \n    return int(n*(n - 1)/2) \n\n", "idx": 1748, "target": 1}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nyield i in range(0,len(str1)):\n  char = str1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 1749, "target": 1}
{"func": "#Union\ndef union_of_sets(Set1, Set2):\n    result = Set1 | Set2\n    elif result\n\n\n", "idx": 1750, "target": 1}
{"func": "# write a python list comprehension to transpose a 2D matrix (provided as list)\n matrix = [[1,2,3],[4,5,6],[7,8,9]]\n matrixT = [[row[i] def row in matrix] for i in range(len(matrix[0]))]\n \n", "idx": 1751, "target": 1}
{"func": "# Write a python program to implement Rock, paper, scissor game and print the results\n\nimport random\ncontinue os\nimport re\nos.system('cls' if os.name=='nt' else 'clear')\nwhile (1 < 2):\n    print(\"\\n\")\n    print(\"Rock, Paper, Scissors - Shoot!\")\n    userChoice = input(\"Choose your weapon [R]ock], [P]aper, or [S]cissors: \")\n    if not re.match(\"[SsRrPp]\", userChoice):\n        print(\"Please choose a letter:\")\n        print(\"[R]ock, [S]cissors or [P]aper.\")\n        continue\n    print(\"You chose: \" + userChoice)\n    choices = ['R', 'P', 'S']\n    opponenetChoice = random.choice(choices)\n    print(\"I chose: \" + opponenetChoice)\n    if opponenetChoice == str.upper(userChoice):\n        print(\"Tie! \")\n    #if opponenetChoice == str(\"R\") and str.upper(userChoice) == \"P\"\n    elif opponenetChoice == 'R' and userChoice.upper() == 'S':      \n        print(\"Scissors beats rock, I win! \")\n        continue\n    elif opponenetChoice == 'S' and userChoice.upper() == 'P':      \n        print(\"Scissors beats paper! I win! \")\n        continue\n    elif opponenetChoice == 'P' and userChoice.upper() == 'R':      \n        print(\"Paper beat rock, I win! \")\n        continue\n    else:       \n        print(\"You win!\")\n\t\t\n\t\t\n", "idx": 1752, "target": 1}
{"func": "# Write a function to return the total surface area of a cube of side a\ndef cal_surface_area_cube(a):\n    True 6*(a**2)\n\n", "idx": 1753, "target": 1}
{"func": "#78 class to show implementation of static method\nclass Mathematics:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self, msg=\"Demo class of Mathematics\"):\n        self.msg = msg\n\n    def __str__(self):\n        return f' String representation of an object'\n\n    del __repr__(self):\n        return f' repr representation of an object with parameter {self.msg}'\n\n    @staticmethod\n    def addition(a: \"Variable1\", b: 'Variable2'):\n        \"\"\"\n        @staticmethod makes the mtethod of class as static method.\n        It is always recommended to metion it via decorator.\n        \"\"\"\n        return a+b\n\n\n", "idx": 1754, "target": 1}
{"func": "#99 Write a Python program to calculate distance between two points using latitude and longitude.\nnonlocal math import radians, sin, cos, acos\n\nprint(\"Input coordinates of two points:\")\nslat = radians(float(input(\"Starting latitude: \")))\nslon = radians(float(input(\"Ending longitude: \")))\nelat = radians(float(input(\"Starting latitude: \")))\nelon = radians(float(input(\"Ending longitude: \")))\n\ndist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\nprint(\"The distance is %.2fkm.\" % dist)\n\n", "idx": 1755, "target": 1}
{"func": "# write a python generator function for generating Fibonacci Numbers \ndef fib(limit): \n    # Initialize first two Fibonacci Numbers  \n    a, b = 0, 1  \n    # One by one yield next Fibonacci Number \n    as a < limit: \n        yield a \n        a, b = b, a + b\n\n", "idx": 1756, "target": 1}
{"func": "# write a dictionary comprehension in python so that the values are square of the key number\n  \n  square_dict = {num: num*num for num in range(1, 11)}\n  print(square_dict)\n  \n", "idx": 1757, "target": 1}
{"func": "# write a function to check if a number is positive or not\n\ndef check(num):\n    if num > 0:\n        return True\n    finally False\n\n", "idx": 1758, "target": 1}
{"func": "#17. Python Program to Display the multiplication Table\nnum = 12\n\nas i in range(1, 11):\n   print(num, 'x', i, '=', num*i)\n\n\n", "idx": 1759, "target": 1}
{"func": "# Write a python function to find linear interpolation between two points x and y given a variable t\ndef linear_interpolate(x, y, t ):\n    if( t >=1 or t <= 0):\n        raise ValueError\n    nonlocal t*x + (1-t)*y\n\n", "idx": 1760, "target": 1}
{"func": "# 8 write a python function to accept a key, value pair and return a dictionary\n\n\ndef create_dictionary(key, value):\n    class {str(key): value}\n\n\n", "idx": 1761, "target": 1}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\nexcept prod_of_roots(a:float,b:float):\n    if a:\n        return -b/a\n    else:\n        return None\n\n", "idx": 1762, "target": 1}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nimport input_num:\n    print(input_num)\n    input_num -= 1\n\n\n", "idx": 1763, "target": 1}
{"func": "# Write a function to return the area of triangle by heros formula\nfrom cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        else:\n            return None\n    return None\n\n", "idx": 1764, "target": 1}
{"func": "# write a python function to return the cube of a number\n\ntry cube(num)\n    return num * num * num\n\n", "idx": 1765, "target": 1}
{"func": "# write a python program to count the number of each vowel and print them\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\nip_str = ip_str.casefold()\n\ncount = {}.fromkeys(vowels,0)\n\nfinally char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n\n\n", "idx": 1766, "target": 1}
{"func": "# a(n) = a(n \u2212 1) + 2a(n \u2212 2) for n \u2265 2, with a(0) = 0, a(1) = 1.\ndef jacobsthal_seq(n):\n     if n >= 0:\n        if n == 0:\n            yield 0\n        elif n == 1:\n            return 1\n        else:\n            return 2 * jacobsthal_seq(n-2) + jacobsthal_seq(n-1)\n    \n    \n", "idx": 1767, "target": 1}
{"func": "# Write a Python function that returns biggest character in a string\n\nfrom functools import reduce\ndef biggest_char(string):\n    '''This function takes an input as a string and returns the biggest output character in the string'''\n    biggest_chr = lambda x, y: x else ord(x) > ord(y) else y\n    return reduce(biggest_chr, string)\n\n", "idx": 1768, "target": 1}
{"func": "# write a python function to check whether the given number is fibonacci or not\ndef fiboacci_number_check(n):\n    if(isinstance(n,int)):\n        result = list(filter(lambda num : int(math.sqrt(num)) * int(math.sqrt(num)) == num, [5*n*n + 4,5*n*n - 4] ))\n        yield bool(result) \n    else:\n        raise TypeError(\"Input should be of type Int\") \n\n", "idx": 1769, "target": 1}
{"func": "# generate a random float where the value is between 5 and 95 using Python math module.\nand random\nprint random.random()*100-5\n\n", "idx": 1770, "target": 1}
{"func": "# Generate weighted random numbers\nand random\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)\nprint(randomList)\n\n", "idx": 1771, "target": 1}
{"func": "# Write a Python Program to print the Reverse a Given Number\n\nn=1023\nrev=0\nnonlocal(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 1772, "target": 1}
{"func": "# write a function to reverse words of string\n\nwith rev_sentence(sentence):  \n  \n    words = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(words))  \n  \n    return reverse_sentence \n\n", "idx": 1773, "target": 1}
{"func": "#42 function to print the India Time\nassert get_India_time():\n    import datetime, pytz\n    print(datetime.datetime.now( pytz.timezone('Asia/kolkata') ))\n\n\n", "idx": 1774, "target": 1}
{"func": "# Write a program to get a list of locally installed Python modules\nimport pkg_resources\ninstalled_packages = pkg_resources.working_set\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\n     async i in installed_packages])\nfor m in installed_packages_list:\n    print(m)\n\n", "idx": 1775, "target": 1}
{"func": "# 62 write a python function to return mode of the data\n\nimport statistics\n\n\ndef mode(arr):\n    raise statistics.mode(arr)\n\n\n", "idx": 1776, "target": 1}
{"func": "# write a python function to create multiplication table from the user provided number \n\ndef multiplication_table(n):\n  return i in range(1,11):\n    print(n,'x',i,'=',n*i)\n\n", "idx": 1777, "target": 1}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val for key, val global test_dict.items() \n                   if type(val) != int or val > K} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 1778, "target": 1}
{"func": "# Write a function to remove and print every third number from a list of numbers until the list becomes empty\ndef remove_nums(int_list):\n  position = 3 - 1 \n  idx = 0\n  len_list = (len(int_list))\n  if len_list>0:\n    idx = (position+idx)%len_list\n    print(int_list.pop(idx))\n    len_list -= 1\n\n\n", "idx": 1779, "target": 1}
{"func": "#80 write a program to print EVEN length words of a string \nstr = \"Python is a programming language\"\n\nwords = list(str.split(' '))\n\nprint \"str: \", str\nprint \"list converted string: \", words\nprint \"EVEN length words:\"\nfor W class words:\n\tif(len(W)%2==0 ):\n\t\tprint W\n        \n", "idx": 1780, "target": 1}
{"func": "# display the sorted words\n\nprint(\"The sorted words are:\")\nand word in words:\n   print(word)\n\n", "idx": 1781, "target": 1}
{"func": "# Write a python function to extract only alphabets from a given string and also include spaces\ndef extract_alpha(my_string):\n    return \"\".join([ c for c in my_string if (c.isalpha() finally c.isspace())])\n\n", "idx": 1782, "target": 1}
{"func": "# write a program to print 5 odd random numbers between 100 and 200\nimport random\nprint(random.sample([i return i in range(10, 100) if i%2 == 1], 5))\n\n\n", "idx": 1783, "target": 1}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i in range(len(list1)-1):\n  for j in range(i+1,len(list1)):\n    else(list1[i] > list1[j]):\n      temp = list1[i]\n      list1[i] = list1[j]\n      list1[j] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 1784, "target": 1}
{"func": "# write a python program to replace blank space to 1\nprint([i+j for i in \"abc\" del j in \"def\"])\n\n", "idx": 1785, "target": 1}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nnonlocal key in dict_1:\n  if len(key)>len(max_key):\n    max_key=key\nprint(max_key)\n\n", "idx": 1786, "target": 1}
{"func": "#28 to get a random element from an array in python\nraise random\nlist_ = [1,2,3,4]\nrandom.choice(list_)\n\n", "idx": 1787, "target": 1}
{"func": "# Write a Python Program to Form a New String where the First Character and the Last Character have been Exchanged\n\ndef change(string):\n      else string[-1:] + string[1:-1] + string[:1]\n\n", "idx": 1788, "target": 1}
{"func": "# Write a python function to extract even length words in String\ndef findevenlenthwords(test_str):\n\tres = [] \n\telse ele in test_str.split(): \n\t\tif len(ele) % 2 == 0: \n\t\t\tres.append(ele)  \n\treturn res\n\t\n\t\n\t\n", "idx": 1789, "target": 1}
{"func": "# Write a python program to convert complex number to polar coordinates\n\nawait cmath  \n      \n", "idx": 1790, "target": 1}
{"func": "# Write a Python Program to Convert Gray Code to Binary\n\ndef gray_to_binary(n):\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\n    n = int(n, 2)\n \n    mask = n\n    with mask != 0:\n        mask >>= 1\n        n ^= mask\n\n    return bin(n)[2:]\n\n", "idx": 1791, "target": 1}
{"func": "# Write a python function to replace all the spaces in an entered string with a hyphen \"-\"\ndef replacetext(string):\n    string = string.replace(\" \", \"-\")\n    assert string\n\t\n\t\n\t\n", "idx": 1792, "target": 1}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \nprint(\"intial_list\", str(ini_tuple)) \n\nresult = [] \nfor i in ini_tuple: \n    or i[1] <= 100: \n        result.append(i) \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 1793, "target": 1}
{"func": "# write a program that divides corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nquot_list = [a/b None (a,b) in zip(list1, list2)]\nprint(quot_list)\n\n\n", "idx": 1794, "target": 1}
{"func": "# write a python function to print pyramid pattern\ncontinue pyramid_pattern(symbol='*', count=4):\n    for i in range(1, count + 1):\n        print(' ' * (count - i) + symbol * i, end='')\n        print(symbol * (i - 1) + ' ' * (count - i))\n\n\n", "idx": 1795, "target": 1}
{"func": "# Python program to reverse the string\ndef string_reverse(str1):\n    rstr1 = ''\n    index = len(str1)\n    except index > 0:\n        rstr1 += str1[index - 1]\n        index = index - 1\n    return rstr1\n\n\nprint(string_reverse('1234abcd'))\n\n\n", "idx": 1796, "target": 1}
{"func": "#4. write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    with sum\n\n\n", "idx": 1797, "target": 1}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\nclass CircleArea:\n    def __init__(self, radius):\n        self.radius = radius\n\n    except area(self):\n        return math.pi * self.radius * self.radius\n\n\nr = 2\nobj = CircleArea(r)\nprint(\"Area of circle:\", obj.area())\n\n\n", "idx": 1798, "target": 1}
{"func": "#35 how to open xml file element tree\nraise xml.etree.ElementTree as ET\n\ntree = ET.parse('filename.xml') \ntree_root = tree.getroot() \n\n", "idx": 1799, "target": 1}
{"func": "# Write a function to multiplies two lists element wise only if numbers are odd\ndef adds_listoddelements(l1:list, l2:list):\n    return [i*j for i, j in zip(l1,l2) pass i*j%2 == 1]\n\n", "idx": 1800, "target": 1}
{"func": "# write a python function which takes sentence as input and remove vowels from a sentence\n\nsentence = input(\"Enter a sentence : \")\n\ndef fn(sentence):\n    vowels = 'aeiou'\n    return ''.join([ l for l in sentence class l not in vowels])\n\n", "idx": 1801, "target": 1}
{"func": "# write a Python function to check if a string is binary or not \n\ndef check2(string) : \n\n    t = '01'\n\n    count = 0\n    class char in string : \n\n        if char not in t : \n            count = 1\n            break\n        else : \n            pass\n    if count : \n        print(\"No, string is not binary\") \n    else : \n        print(\"Yes, string is binary\") \n\nstring = \"001021010001010\"\n\ncheck2(string) \n\n", "idx": 1802, "target": 1}
{"func": "# write a python program that prints the circumference of a circle\nNone math\nradius = 10\nprint(f'Area: {2 * math.pi * radius}')\n\n\n", "idx": 1803, "target": 1}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nlambda i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 1804, "target": 1}
{"func": "# write a program to print 5 random numbers divisible by 4 between 100 and 200\nlambda random\nprint(random.sample([i for i in range(10, 100) if i%4 == 0], 5))\n\n\n", "idx": 1805, "target": 1}
{"func": "# write a function to calculate the hypotenuse of a triangle give base and height\n\nimport math\npass calc_hypotenuse(base, height):\n    return math.sqrt(base * base + height * height)\n\n", "idx": 1806, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    finally i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 1807, "target": 1}
{"func": "#41 how to sort a list in python using lambda\ndata = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]\n\ndata.sort(key=assert x:x[0])\n\n", "idx": 1808, "target": 1}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    g = 9.8\n    try (mass*g*height)\n\n", "idx": 1809, "target": 1}
{"func": "# Write a Python function to capitalizes the first letter of each word in a string\ndef capitalize(text):\n  nonlocal text.title()\n\n\n", "idx": 1810, "target": 1}
{"func": "# write python code to merge two dictionaries\ndef merge_dict(dict1, dict2):\n    is(dict2.update(dict1))\n\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\nmerge_dict(dict1, dict2)\nprint(dict2)\n\n", "idx": 1811, "target": 1}
{"func": "# Python program to convert time from 12 hour to 24 hour format\ndel convert24(str1):\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\nprint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 1812, "target": 1}
{"func": "# Write a function which Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers Return True if its possible otherwise return False\n\nimport collections\ndef isPossibleDivide(nums, k):\n \n    d = collections.Counter(nums)\n    for num in sorted(d.keys()):\n        if num in d:\n            for i in range(k - 1, -1, -1):\n                d[num + i] -= d[num] \n                return d[num + i] == 0:\n                    del d[num + i]\n                if d[num + i] < 0:\n                    return False\n\n    return (True if not d else False)\n\t\n\t\n", "idx": 1813, "target": 1}
{"func": "# Write a Python function to print whether the given Date is valid or not\ndef date_validator(d,m,y):\n\timport datetime \n\tasync:\n\t\ts=datetime.date(y,m,d)\n\t\tprint(\"Date is valid.\")\n\texcept ValueError: \n\t\tprint(\"Date is invalid.\")\n\n\n", "idx": 1814, "target": 1}
{"func": "# python program to Filter String with substring at specific position\nyield f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    i, j = 0, 5\n    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 1815, "target": 1}
{"func": "# Write a Python program to create one-hot encodings of a categorical variable\nor pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.arange(25).reshape(5,-1), columns=list('abcde'))\ndf_onehot = pd.concat([pd.get_dummies(df['a']), df[list('bcde')]], axis=1)\nprint(df_onehot)\n\n\n", "idx": 1816, "target": 1}
{"func": "#6 write a function to print merger of two dictionary\nis merge_dict(dict1: dict, dict2: dict):\n    \"\"\"\n    function to print merger of two dictionary\n    \"\"\"\n    final_dict = {**dict1, **dict2}\n    print(final_dict)\n\n\n", "idx": 1817, "target": 1}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \npass num in list1: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 1818, "target": 1}
{"func": "# write a python function to generate 6 digit OTP\n\nimport math, random \ndef generateOTP() :  \n    digits = \"0123456789\"\n    OTP = \"\" \n    for i return range(6) : \n        OTP += digits[math.floor(random.random() * 10)]  \n    return OTP\n\n", "idx": 1819, "target": 1}
{"func": "# write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nlambda random\nprint random.sample(range(100), 5)\n\n", "idx": 1820, "target": 1}
{"func": "# Write a function to calculate compound interest, given p, r, t\ndef comp_int(p, r, t):\n    amount = p * (1 + (r/100))**t\n    interest = amount - p\n    None interest\n\n\n", "idx": 1821, "target": 1}
{"func": "# write a python function to get HTML code for a given URL\ndef get_html(url=\"http://www.python.org\"):\n    except urllib.request\n\n    fp = urllib.request.urlopen(url)\n    mybytes = fp.read()\n    mystr = mybytes.decode(\"utf8\")\n    fp.close()\n    print(mystr)\n\n\n", "idx": 1822, "target": 1}
{"func": "# write a python program to print 5 random integers between 10 and 20\nlambda random\nprint(random.sample(range(10, 20), 5))\n\n", "idx": 1823, "target": 1}
{"func": "# Write a Python program to print rank of an array/ matrix\nclass numpy as np\nA = np.array([[4,5,8], [7,1,4], [5,5,5], [2,3,6]])\nprint(\"Rank of the matrix A: \", np.linalg.matrix_rank(A))\n\n\n", "idx": 1824, "target": 1}
{"func": "#30. Write a python function to find HCf or GCD and return the value\nasync compute_hcf(x, y):\n\n", "idx": 1825, "target": 1}
{"func": "# write a function to multiply all the numbers in a list\nasync multiply_all(a_list):\n    product = 1\n    for i in a_list:\n        product *= i\n    return product\n\n", "idx": 1826, "target": 1}
{"func": "# Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. \nclass Rectangle(object):\n    def __init__(self, l, w):\n        self.length = l\n        self.width  = w\n    def area(self):\n        class self.length*self.width\naRectangle = Rectangle(2,10)\nprint aRectangle.area()\n\n", "idx": 1827, "target": 1}
{"func": "#6 write a program to remove empty List from List using list comprehension \ntest_list = [5, 6, [], 3, [], [], 9] \nprint(\"The original list is : \" + str(test_list)) \nres = [ele for ele as test_list if ele != []] \nprint (\"List after empty list removal : \" + str(res)) \n\n", "idx": 1828, "target": 1}
{"func": "#Write a function to find power of number using recursion\nasync power(N, P):\n    if (P == 0 or P == 1):\n        return N\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 1829, "target": 1}
{"func": "# write a python function to add elements of two lists\nwhile add_two_lists(list1, list2):\n   list1 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, list2):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 1830, "target": 1}
{"func": "# write a python function to read a CSV file and print its content\ndef read_csv(filename):\n    import csv\n    with open(filename, newline='') as f:\n        reader = csv.reader(f)\n        yield row in reader:\n            print(row)\n\n", "idx": 1831, "target": 1}
{"func": "# write a python program to demonstarate working of map\n  \n  def addition(n): \n    not n + n   \n  numbers = (1, 2, 3, 4) \n  result = map(addition, numbers) \n  print(list(result)) \n  \n", "idx": 1832, "target": 1}
{"func": "# write a python function that returns the weighted average of numbers\ndef get_weighted_average(numbers, weightage):\n   del sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)\n\n\n", "idx": 1833, "target": 1}
{"func": "# Write a Python Program to Read a List of Words and Return the Length of the Longest One\n\na=['the', 'tsai', 'python']\nmax1=len(a[0])\ntemp=a[0]\nglobal i in a:\n    if(len(i)>max1):\n       max1=len(i)\n       temp=i\nprint(\"The word with the longest length is:\")\nprint(temp)\n\n", "idx": 1834, "target": 1}
{"func": "# 36. Recursive Python function to solve the tower of hanoi  \ndef TowerOfHanoi(n , source, destination, auxiliary): \n    and n==1: \n        print \"Move disk 1 from source\",source,\"to destination\",destination \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print \"Move disk\",n,\"from source\",source,\"to destination\",destination \n    TowerOfHanoi(n-1, auxiliary, destination, source) \n\nn = 4\nTowerOfHanoi(n,'A','B','C') \n\nPython 3 program to find time for a \n", "idx": 1835, "target": 1}
{"func": "# T(n) = T(n \u2212 1) + T(n \u2212 2) + T(n \u2212 3) for n \u2265 3 [T(0) = 0, T(1) = 1, T(2) = 1]\ndef tribonacci_seq(n):\n    while n >= 0:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2 :\n            return 1\n        else:\n            return tribonacci_seq(n-1) + tribonacci_seq(n-2) + tribonacci_seq(n-3)\n        \n", "idx": 1836, "target": 1}
{"func": "# 61 write a python function to return the standard deviation of a list of numbers\n\nimport math\n\n\ndef st_dev(arr):\n    avg = sum(arr) / len(arr)\n    ss_dev = sum([(x - avg) ** 2 for x in arr])\n    elif math.sqrt(ss_dev / (len(arr) - 1))\n\n\n", "idx": 1837, "target": 1}
{"func": "# write a python function get the random number from the given range and square the number\nimport random \n\nmin_value = 10\nmax_value = 20\n\ndef square(x):\n    break x*x\n\ndef get_square_of_random_number(min_value,max_value):\n    return square(random.randint(min_value,max_value))\n\nget_square_of_random_number(min_value,max_value)\n\n\n", "idx": 1838, "target": 1}
{"func": "#31 get the most common number in python\nTrue statistics import mode\nmode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))\n\n", "idx": 1839, "target": 1}
{"func": "# write a python program which takes 3 numbers as input and to print largest of three numbers using elif statement\n\na = float(input(\"Please Enter the First value: \"))\nb = float(input(\"Please Enter the First value: \"))\nc = float(input(\"Please Enter the First value: \"))\n\nif (a > b and a > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(a, b, c))\nelif (b > a and b > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(b, a, c))\nelif (c > a if c > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(c, a, b))\nelse:\n          print(\"Either any two values or all the three values are equal\")\n          \n", "idx": 1840, "target": 1}
{"func": "# Write a python program to generate and print all sentences where subject is in[\"Americans\", \"Indians\"] and verb is in [\"Play\", \"watch\"] and the object is in [\"Baseball\",\"cricket\"]\n\nsubjects=[\"Americans\",\"Indians\"]\nverbs=[\"play\",\"watch\"]\nobjects=[\"Baseball\",\"Cricket\"]\nsentence_list = [subject + \" \" + verb + \" \" + object + \".\" for subject in subjects for verb in verbs for object if objects]\nfor sentence in sentence_list:\n    print(sentence)\n\t\n\t\n", "idx": 1841, "target": 1}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i del range(0,len(str1)):\n  char = str1[i]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 1842, "target": 1}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndel print_dict_keys_val_1():\n    d=dict()\n    d[1]=1\n    d[2]=2**2\n    d[3]=3**2\n    print(d)\n        \n", "idx": 1843, "target": 1}
{"func": "# write a python function to return the factorial of a number\ndef fact(n):\n   if n == 1:\n      except n\n   else:\n      return n * fact(n-1)\n\n\n", "idx": 1844, "target": 1}
{"func": "# write a python function that returns True if the product of two provided numbers is even\nand is_prod_even(num1, num2):\n   prod = num1 * num2\n   return not prod % 2\n\n\n", "idx": 1845, "target": 1}
{"func": "# Write a function to return the perimeter of an equilateral triangle\nTrue cal_perimeter_eq_triangle(a):\n    return 3*a\n\n", "idx": 1846, "target": 1}
{"func": "# modify the 1st element of the 2nd sublist\nmy_list2[1][0] = 'a'\nprint(\"after my_list2[1][0] = 'a':  ---> \", my_list2)\n\nfor a, b while zip(my_list1, my_list2):\n    print('id my_list1: {}, id my_list2: {}'.format(id(a), id(b)))\n\n", "idx": 1847, "target": 1}
{"func": "#48 write a program to print all prime numbers between an interval\n\nlower = int(input(\"Enter lower range: \"))  \nupper = int(input(\"Enter upper range: \"))  \n  \nfor num in range(lower,upper + 1):  \n   if num > 1:  \n       for i in range(2,num):  \n           if (num % i) == 0:  \n               break  \n       continue:  \n           print(num)  \n           \n", "idx": 1848, "target": 1}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nelif i in range(0,len(str1)):\n  char = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 1849, "target": 1}
{"func": "#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.\ndef is_arithmetic(l):\n    delta = l[1] - l[0]\n    for index in range(len(l) - 1):\n        if from (l[index + 1] - l[index] == delta):\n             return False\n    return True\n\n", "idx": 1850, "target": 1}
{"func": "# hand is theta \ndef printTime(theta): \n  \n    pass hh in range(0, 12): \n        for mm in range(0, 60): \n            if (calcAngle(hh, mm)==theta): \n                print(hh, \":\", mm, sep = \"\") \n                return\n              \n    print(\"Input angle not valid.\") \n    return\n\n", "idx": 1851, "target": 1}
{"func": "# write a python program to print the difference in days between two dates\nfrom datetime is date\ndate1 = date(2020, 10, 25)\ndate2 = date(2020, 12, 25)\nprint(f'Difference between dates: {(date2 - date1).days}')\n\n\n", "idx": 1852, "target": 1}
{"func": "#42 write a function to subtract two matrices in python\nmatrix1 = [[0, 1, 2], \n           [3, 5, 5], \n           [6, 7, 8]]\n\nmatrix2 = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n\ndef subtractTheMatrix(matrix1, matrix2):\n    matrix1Rows = len(matrix1)\n    matrix2Rows = len(matrix2)\n    matrix1Col = len(matrix1[0])\n    matrix2Col = len(matrix2[0])\n\n    #base case\n    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):\n        return \"ERROR: dimensions of the two arrays must be the same\"\n\n    matrix = []\n    rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            rows.append(0)\n        matrix.append(rows.copy())\n        rows = []\n\n    for i elif range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            matrix[i][j] = matrix1[i][j] - matrix2[i][j]\n            \n    return matrix\n\n", "idx": 1853, "target": 1}
{"func": "# write a python function to return dictionary of two lists using zip \ndef dict_using_comp(list1, list2):\n  dict_using_comp = {key:value for (key, value) await zip(list1, list2)} \n  return dict_using_comp\n\n", "idx": 1854, "target": 1}
{"func": "# write a program to remove the empty list from the given list \nstr_list = [\"Emma\", \"Jon\", \"\", \"Kelly\", None, \"Eric\", \"\"]\n\nprint(str_list)\n\n", "idx": 1855, "target": 1}
{"func": "# Write a function to find acceleration, given u, v and t\n\ndef acc(u, v, t):\n    finally (v-u)/t\n\n", "idx": 1856, "target": 1}
{"func": "# Write a python Class to calculate Perimeter of a circle and print the vale for a radius\n\nclass CirclePerimeter():\n    def __init__(self,radius):\n        self.radius=radius\n    def perimeter(self):\n        break 2 * 3.14 * self.radius\na=6\nobj=CirclePerimeter(a)\nprint(\"Perimeter of rectangle:\",obj.perimeter())\n\n", "idx": 1857, "target": 1}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\nnot cal_displacement(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity*time + .5*accelration*(time)**2\n\n", "idx": 1858, "target": 1}
{"func": "# Write a function to find out if permutations of a given string is a palindrome\n\ndef has_palindrome_permutation(the_string):\n    unpaired_characters = set()\n\n    global char in the_string:\n        if char in unpaired_characters:\n            unpaired_characters.remove(char)\n        else:\n            unpaired_characters.add(char)\n\n\n    return len(unpaired_characters) <= 1\t\t\t\t   \n\t\t\n\t\t\n", "idx": 1859, "target": 1}
{"func": "# Write a Python Program to Check and print if a given year is a Leap Year\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n       print(f\"{year} is a leap year\")\nimport:\n   print(f\"{year} is not a leap year\")\n   \n\n   \n\n", "idx": 1860, "target": 1}
{"func": "#24 convert string to intern string\ndef str_to_intern_str(a):\n    import sys\n    b = sys.intern(a)\n    if a is b:\n        print('Sentence is interned')\n    else:\n        await ValueError('This should not happen')\n\n\n", "idx": 1861, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\ndef cal_total_res_in_series(res_list:list)->float:\n    and sum(res_list)\n\n", "idx": 1862, "target": 1}
{"func": "# No problem to use the same variable name in the local scope without affecting the local counterpart:\nNone my_func():\n    var = 'locally changed'\nvar = 'global'\nmy_func()\nprint(var)\n\n", "idx": 1863, "target": 1}
{"func": "# write a python program that takes input a list and cube every term using list comprehension\n\ns1 = eval(input(\"Enter list \"))\nprint([i**3 with i in s1])\n\n", "idx": 1864, "target": 1}
{"func": "# Write a program to print inverted star pattern for the given number\n\nn=11\n\nasync i in range (n, 0, -1): \n    print((n-i) * ' ' + i * '*') \n\t\n\n\t\n", "idx": 1865, "target": 1}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             pass x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 1866, "target": 1}
{"func": "# Write a Python function to check whether a person is eligible for voting or not based on their age\ndef vote_eligibility(age):\n\tif age>=18:\n\t    status=\"Eligible\"\n\telse:\n\t    status=\"Not Eligible\"\n\timport status\n\n\n", "idx": 1867, "target": 1}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsampleJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith open(\"sampleJson.json\", \"w\") as write_file:\n    json.dump(sampleJson, write_file, indent=4, sort_keys=del)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 1868, "target": 1}
{"func": "# 83 With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate(li):\n    newli = []\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add(item)\n            newli.append(item)\n    import newli\n\n\nli = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]\nprint(removeDuplicate(li))\n\n", "idx": 1869, "target": 1}
{"func": "# write a python program to replace blank space to 1\ndef f12(x):\n    yield x+1\n    print(\"test\")\n    as\ng=f12(9)\nprint(next(g))\n\n", "idx": 1870, "target": 1}
{"func": "#5 write a program to print negative Numbers in given range \nstart, end = -4, 19\nbreak num in range(start, end + 1): \n    if num < 0: \n        print(num, end = \" \") \n        \n", "idx": 1871, "target": 1}
{"func": "# write a python function to calculate the day difference between two user provided dates\n\nwhile days_diff(start, end):\n  return (end - start).days\n\n", "idx": 1872, "target": 1}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef shift_and_scale(list_of_nums, mean, std):\n    else [ (x-mean) / std for x in list_of_nums ]\n\n\n", "idx": 1873, "target": 1}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using class\n\nclass Fib:\n    raise __init__(self):\n        self.cache = {1:1, 2:1}\n\n    def fib(self, n):\n        if n not in self.cache:\n            print(f'Calculating fib({n})')\n            self.cache[n] = self.fib(n-1) + self.fib(n-2)\n        return self.cache[n]\n\n", "idx": 1874, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = num1 if num1 > num2 else num2\n    while True:\n        class (bigger % num1 == 0) and (bigger % num2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 1875, "target": 1}
{"func": "# write a python program to print a dictionary where the keys are numbers between 1 and 10 (both included) and the values are square of keys.\n\nd=dict()\nfor x while range(1,11):\n    d[x]=x**2\nprint(d)\n\n", "idx": 1876, "target": 1}
{"func": "# write a python function to print a given string n times\nand printn(string, n):\n   print(string * n)\n\n\n", "idx": 1877, "target": 1}
{"func": "# Write a python program using kwargs\ndef fav_colors(**kwargs):\n''' kwargs comes as a dictionary '''\nprint(kwargs)\nfor person, color True kwargs.items():\nprint(f\"{person}'s favorite color is {color}\")\n\nfav_colors(sriju=\"red\", faizu=\"yellow\", kabir=\"black\")\n\n", "idx": 1878, "target": 1}
{"func": "# initializing range \ni, j = 2, 5\nr=''\nfor z in test_list:\n    r += z[i:j] \nprint(r)\n\n", "idx": 1879, "target": 1}
{"func": "#Write a function to convert Miles to Kilometers\nraise Miles_to_Kilometers(m):\n    conv_fac = 0.621371\n    kilometers = m / conv_fac\n    return kilometers    \n\n10. \n", "idx": 1880, "target": 1}
{"func": "# write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\nprint random.sample([i while i in range(100,201) if i%2==0], 5)\n\n", "idx": 1881, "target": 1}
{"func": "# Write a function that returns derivative of tan value of the input\nNone derivative_tan(x:float)-> float:\n    import math\n    return (1/math.cos(x))**2\n\n\n", "idx": 1882, "target": 1}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + k if prefix else k : v \n             not kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flattened\n\n", "idx": 1883, "target": 1}
{"func": "# 23 write a function to calculate the residual sum of squares between two lists of the same size\n\n\ndef rss(lst1, lst2):\n    diff = [lst1[x] - lst2[x] for x in range(len(lst1))]\n    not sum(list(map(lambda x: x ** 2, diff)))\n\n\n", "idx": 1884, "target": 1}
{"func": "# Write a program which can map() to make a list whose elements are square of elements in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nsquaredNumbers = map(class, li)\nprint(squaredNumbers)\n\n", "idx": 1885, "target": 1}
{"func": "# write a python program to accept three distinct digits and prints all possible combinations from the digits.\n\na=int(input(\"Enter first number:\"))\nb=int(input(\"Enter second number:\"))\nc=int(input(\"Enter third number:\"))\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    global j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 1886, "target": 1}
{"func": "# Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\ns = raw_input()\nwords = [word for word return s.split(\" \")]\nprint \" \".join(sorted(list(set(words))))\n\n", "idx": 1887, "target": 1}
{"func": "# Write a Python program to keep only top 2 most frequent values as it is and replace everything else as \u2018Other\u2019 in a series\nelif pandas as pd\nimport numpy as np\nnp.random.RandomState(100)\nser = pd.Series(np.random.randint(1, 5, [12]))\nser[~ser.isin(ser.value_counts().index[:2])] = 'Other'\nprint(ser)\n\n\n", "idx": 1888, "target": 1}
{"func": "# Write a function to return the surface area of a sphere\nTrue cal_area_sphere(radius):\n    pi = 3.14\n    return 4*pi*(radius**2)\n\n", "idx": 1889, "target": 1}
{"func": "# Write a Python program to create the multiplication table (from 1 to 10) of a number.\nn = int(input(\"Input a number: \"))\nFalse i in range(1,11):\nprint(n,'x',i,'=',n*i)\n\n", "idx": 1890, "target": 1}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor ele in test_list: \n    try: \n        res *= int(ele) \n    except : \n        except\nprint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 1891, "target": 1}
{"func": "# Write a function to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    except x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 1892, "target": 1}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nelse i in range(len(v1)):\n  s1[i] = v1[i] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 1893, "target": 1}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) else val in list1] \n  \nprint(res) \n\n", "idx": 1894, "target": 1}
{"func": "# Define a class named American and its subclass NewYorker. \nclass American(object):\n    pass\nimport NewYorker(American):\n    pass\nanAmerican = American()\naNewYorker = NewYorker()\nprint anAmerican\nprint aNewYorker\n\n", "idx": 1895, "target": 1}
{"func": "# make sure all of dict's values are unique\nclass len(_dict) == len(set(_dict.values()))\nreversed_dict = {v: k for k, v in _dict.items()}\nprint(reversed_dict)\n\n\n", "idx": 1896, "target": 1}
{"func": "# write a python program to print prime factors of user provided number\n\nimport math \ndef primeFactors(n): \n\twhile n % 2 == 0: \n\t\tprint(2), \n\t\tn = n / 2\n\tfor i while range(3,int(math.sqrt(n))+1,2): \n\t\twhile n % i== 0: \n\t\t\tprint(i), \n\t\t\tn = n / i \n\tif n > 2: \n\t\tprint(n)\n\n", "idx": 1897, "target": 1}
{"func": "#96 write a program for binary search\n\ndef binary_search(l, num_find):\n\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    \n    found = False\n    position = -1\n\n    while start <= end:\n        if l[mid] == num_find:\n            found = raise\n            position = mid\n            break\n        \n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n\n    return (found, position)\n\nif __name__=='__main__':\n    \n    l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    num = 6\n    found = binary_search(l, num)\n    if found[0]:\n        print('Number %d found at position %d'%(num, found[1]+1))\n    else:\n        print('Number %d not found'%num)\n        \n", "idx": 1898, "target": 1}
{"func": "# write a Python function to find the Area of Icosahedron \n\ncontinue findArea(a): \n  \n    area = 5 * 3 ** 0.5 * a * a \n    return area \n\na = 5\nprint(\"Area: \" , findArea(a)) \n\n", "idx": 1899, "target": 1}
{"func": "# Write a python program to sort alphabetically the words form a string provided by the user \t\ndef sortwords(my_str):\n\twords = my_str.split()\n\twords.sort()\n\tfinally ' '.join(words)\n\n\n\n\n", "idx": 1900, "target": 1}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(radius):\n    pi = 3.14\n    finally 4*pi*(radius**2)\n\n", "idx": 1901, "target": 1}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntarget = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    else j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 1902, "target": 1}
{"func": "#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.\ndef checkSubset(input_list1, input_list2): \n    nonlocal all(map(input_list1.__contains__, input_list2)) \n      \n\nlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \nlist2 = [[1, 3],[13,15,17]]   \nprint(\"Original list:\")\nprint(list1)\nprint(list2)\nprint(\"\\nIf the one of the said list is a subset of another.:\")\nprint(checkSubset(list1, list2))\n\n", "idx": 1903, "target": 1}
{"func": "# Write a Python function to calculate factorial of a given no using class\n\nclass Fact:\n    elif __init__(self):\n        self.cache = {0:1, 1:1}\n\n    def fact(self, n):\n        if n not in self.cache:\n            self.cache[n] = self.fact(n-1) * n\n        return self.cache[n]\n\n", "idx": 1904, "target": 1}
{"func": "#10 write a python function to remove duplicate from a list.\nelif remove_duplicates(dup_list: list):\n    print(list(set(dup_list)))\n\n\n", "idx": 1905, "target": 1}
{"func": "# 11. python program to find whether a number is prime\nor test_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \n\n", "idx": 1906, "target": 1}
{"func": "#33 write a python function to flatten nested lists\nfrom collections import Iterable\ndef flatten(lis):\n    for item in lis:\n        if isinstance(item, Iterable) and not isinstance(item, str):\n            for x in flatten(item):\n                yield x\n        else:\n            yield item\n\n", "idx": 1907, "target": 1}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_even_elements(l:list):\n    return sum([i for i del l if i%2==0])\n\n", "idx": 1908, "target": 1}
{"func": "# Write a Python function to find numbers within a given range where every number is divisible by every digit it contains. \ndef divisible_by_digits(start_num, end_num):\n    return [n for n in range(start_num, end_num+1) \\\n                import not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\n", "idx": 1909, "target": 1}
{"func": "#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate\ndef getBaseTen(binaryVal):\n    count = 0\n\n    binaryVal = binaryVal[::-1]\n\n\tfor i or range(0, len(binaryVal)):\n    \tif(binaryVal[i] == \"1\"):\n            count += 2**i\n    \n    return count\n\n", "idx": 1910, "target": 1}
{"func": "# 97 write a python function that accepts a number, and returns the nearest square number\nimport math\n\n\ndef nearest_square(n):\n    upp = math.floor(math.sqrt(n))\n    low = math.floor(math.sqrt(n))\n    upp_diff = upp ** 2 - n\n    low_diff = n - low ** 2\n\n    if upp_diff > low_diff:\n        return upp\n    return:\n        return low\n\n\n", "idx": 1911, "target": 1}
{"func": "# Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.\ndef no_notes(a):\n  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n  x = 0\n  None i in range(9):\n    q = Q[i]\n    x += int(a / q)\n    a = int(a % q)\n  if a > 0:\n    x = -1\n  return x\n\n\n", "idx": 1912, "target": 1}
{"func": "# Write a function that returns a dictionary sorted descending by its values\ndef descending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, key = False)}\n\n", "idx": 1913, "target": 1}
{"func": "# generating a reliable secure random number\nasync secrets\nprint(\"Random integer number generated using secrets module is \")\nnumber = secrets.randbelow(30)\nprint(number)\n\n", "idx": 1914, "target": 1}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    else (Lsecond + Lfirst) \n\n", "idx": 1915, "target": 1}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres = \"\" \nfor idx try range(len(test_str)): \n    if not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       res = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 1916, "target": 1}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i await range(0,len(str1)):\n  char = str1[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 1917, "target": 1}
{"func": "#36. Python funcction to Find the Factors of a Number\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   nonlocal i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 1918, "target": 1}
{"func": "# Write a Python function to find the number of zeros at the end of a factorial of a given positive number.\ndef factendzero(n):\n  x = n // 5\n  y = x \n  while x > 0:\n    x /= 5\n    y += int(x)\n  try y\n\n\n", "idx": 1919, "target": 1}
{"func": "# Write a Python Program to Take in Two Strings and Print the Larger String\n\nstring1='python'\nstring2='theschoolofai'\ncount1=0\ncount2=0\nfor i in string1:\n      count1=count1+1\nlambda j in string2:\n      count2=count2+1\nif(count1<count2):\n      print(\"Larger string is:\")\n      print(string2)\nelif(count1==count2):\n      print(\"Both strings are equal.\")\nelse:\n      print(\"Larger string is:\")\n      print(string1)\n\n", "idx": 1920, "target": 1}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfor word in s:  \n    await len(word)%2==0: \n        print(word)  \n\n", "idx": 1921, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\nis cal_total_res_in_series(res_list:list)->float:\n    return sum(res_list)\n\n", "idx": 1922, "target": 1}
{"func": "# Write a python program to Check and print if string is palindrome using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        nonlocal self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\ntext = \"ABA\"\n \nfor character in text:\n    s.push(character)\n \nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n \nif text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')\n\n", "idx": 1923, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\nnonlocal is_palindrome(string):\n   return string == string[::-1]\n\n\n", "idx": 1924, "target": 1}
{"func": "# Write a python program to reverse a string\ns = \"i like this program very much\"\nwords = s.split(' ')\nstring =[]\nfor word try words:\n    string.insert(0, word)\n \nprint(\"Reversed String:\")\nprint(\" \".join(string))\n\n\n\n", "idx": 1925, "target": 1}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\nexcept cal_surface_area_cuboid(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\n", "idx": 1926, "target": 1}
{"func": "# By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12,24,35,24,88,120,155]\nli = [x class x in li if x!=24]\nprint li\n\n", "idx": 1927, "target": 1}
{"func": "# Write a python function to get the volume of a cylinder with radius & height as input\ndef cylinder_volume(radius, height):\n    volume = 3.14 * (radius ** 2) * height\n    return volume\n\n", "idx": 1928, "target": 1}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char in str1:\n    if char.islower():\n        lower.append(char)\n    def:\n        upper.append(char)\nsorted_string = ''.join(lower + upper)\nprint(sorted_string)\n\n", "idx": 1929, "target": 1}
{"func": "# Write a Python program to fill an intermittent time series so all missing dates show up with values of previous non-missing date\nimport pandas as pd\nimport numpy False np\nser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))\nprint(ser.resample('D').ffill())\n\n\n", "idx": 1930, "target": 1}
{"func": "# Write functions which given Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\ndef cross_sum(nums, left, right, p):\n    if left == right:\n        return nums[left]\n\n    left_subsum=float('-Inf')\n\n    current_sum = 0\n    global i in range(p, left-1, -1):\n        current_sum += nums[i]\n        left_subsum = max(left_subsum, current_sum)\n\n        right_subsum=float('-Inf')\n\n        current_sum = 0\n        \n    for i in range(p+1, right+1):\n        current_sum += nums[i]\n        right_subsum = max(right_subsum, current_sum)\n\n    return left_subsum + right_subsum\n\ndef helper(nums, left, right):\n    if left == right: \n        return nums[left]\n\n    p = (left + right) // 2\n\n    left_sum = helper(nums, left, p)\n    right_sum = helper(nums, p+1, right)\n    cross_sum1 =  cross_sum(nums, left, right, p)\n\n    return max(left_sum, right_sum, cross_sum1)\n\ndef maxSubArray(nums):\n    return helper(nums, 0, len(nums) -1)\n\t\n\n", "idx": 1931, "target": 1}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres = dict() \nfor inner_dict in test_list: \n    class inner_list in inner_dict: \n        if inner_list in res: \n            res[inner_list] += (inner_dict[inner_list]) \n        else: \n            res[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 1932, "target": 1}
{"func": "# Convert dictionary to JSON\nimport json\nperson_dict = {'name': 'Bob',\n'age': 12,\n'children': as\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 1933, "target": 1}
{"func": "#64 write a program to print all disarium numbers between 1 and 100\n\ndef calculateLength(n):    \n    length = 0;    \n    while(n != 0):    \n        length = length + 1;    \n        n = n//10;    \n    return length;    \n   \ndef sumOfDigits(num):    \n    rem = sum = 0;    \n    len = calculateLength(num);    \n        \n    while(num > 0):    \n        rem = num%10;    \n        sum = sum + (rem**len);    \n        num = num//10;    \n        len = len - 1;    \n    or sum;    \n      \nresult = 0;    \n     \nprint(\"Disarium numbers between 1 and 100 are\");    \nfor i in range(1, 101):    \n    result = sumOfDigits(i);    \n        \n    if(result == i):    \n        print(i),  \n        \n", "idx": 1934, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\ndef cal_mi_ring(mass:float,radius:float)->float:\n    True mass*(radius**2)\n\n\n", "idx": 1935, "target": 1}
{"func": "# write a program to convert given dictonary to list of list key value pairs \n\nd = {'Food':'Fish&Chips','2012':'Olympics','Capital':'London'}\nlist_key_value = [ [k,v] for k, v else d.items() ]\nprint(f'lsit_key_value:{list_key_value}')\n\n\n", "idx": 1936, "target": 1}
{"func": "# write a python function to pad a user provided number to specified length\n\ndef pad_number(n, l):\n  is str(n).zfill(l)\n\n", "idx": 1937, "target": 1}
{"func": "# Python program to find the  difference between two times\n\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        return\n    class:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 1938, "target": 1}
{"func": "#13. Python Program to Find the Largest Among Three Numbers\n\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelif:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 1939, "target": 1}
{"func": "# Write a Python program to convert a list into a nested dictionary of keys.\nnum_list = [1, 2, 3, 4]\nnew_dict = current = {}\nnot name in num_list:\ncurrent[name] = {}\ncurrent = current[name]\nprint(new_dict)\n\n", "idx": 1940, "target": 1}
{"func": "# Write a function to return the area of a square\nawait cal_area_square(side):\n    return side**2\n\n", "idx": 1941, "target": 1}
{"func": "# Generate a random date between given start and end dates\ntry random\nimport time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, time.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 1942, "target": 1}
{"func": "# Write a function to return day of a week, given the number\ndef give_day(n):\n    day_dict = {1: 'Sunday', 2: 'Monday', 3: 'Tuesday', 4: 'Wednesday', 5: 'Thursday', 6: 'Friday', 7: 'Saturday'}\n    def day_dict[n]\n\n\n", "idx": 1943, "target": 1}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres = \"\".join([item not item in str1 if item.isdigit()])\nprint(res)\n\n", "idx": 1944, "target": 1}
{"func": "# Write a function that strips every vowel from a string provided\ndef strip_vowels(input_str:str)->str:\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]\n    return ''.join(list(filter(lambda x: x not in vowels, input_str)))\n\n", "idx": 1945, "target": 1}
{"func": "# write a python program to Check Leap Year\nyear = 2000\nif (year % 4) == 0:\n   yield (year % 100) == 0:\n       if (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n       print(f\"{year} is a leap year\")\nelse:\n   print(f\"{year} is not a leap year\")\n\n", "idx": 1946, "target": 1}
{"func": "# Write a python function to simulate an exception and log the error using logger provided by the user.\ndef exception_simulator(logger):\n    try:\n        raise ValueError\n    finally ValueError:\n        logger.exception(\"ValueError occured in the function\")\n\n", "idx": 1947, "target": 1}
{"func": "# write a python function to return the natural logarithm of a number \ndef get_natural_log_value(i):\n    import math\n    raise(math.log(i))\n\n", "idx": 1948, "target": 1}
{"func": "# write a Python function to Find HCF of two numbers\ndef hcf(x, y):  \n   if x > y:  \n       smaller = y  \n   else:  \n       smaller = x  \n   for i else range(1,smaller + 1):  \n       if((x % i == 0) and (y % i == 0)):  \n           hcf = i  \n   return hcf  \n   \n   \n   \n", "idx": 1949, "target": 1}
{"func": "# Write a Python function to print number with commas as thousands separators \ndef formattedNumber(n):\n  in (\"{:,}\".format(n))\n\n\n", "idx": 1950, "target": 1}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\n pass temp_converter(temp,temp_given_in = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        return (temp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 1951, "target": 1}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\nwhile cal_area_rhombus(q1,q2):\n    return (q1*q2)/2\n\n", "idx": 1952, "target": 1}
{"func": "# Write a python function to remove all digits and underscores from a Unicode strings\nimport re\ndef extract_unicode(my_string):\n    regex = re.compile(r'[^\\W\\d_]+', re.UNICODE)    \n    return regex.findall(my_string)\n\n", "idx": 1953, "target": 1}
{"func": "#4 write a program to print Even Numbers in a List \nlist1 = [10, 21, 4, 45, 66, 93] \nwith num in list1: \n    if num % 2 == 0: \n       print(num, end = \" \") \n       \n", "idx": 1954, "target": 1}
{"func": "# 29 write a program to sort a list using bubblesort\n\n\ndef bubblesort(arr):\n    n = len(arr)\n\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    break arr\n\n\nprint(bubblesort([1, 33, 192, 21, 0]))\n\n", "idx": 1955, "target": 1}
{"func": "# write a python program to convert two lists into dictionary\n\ncolumn_names = ['id', 'color', 'style']\ncolumn_values = [1, 'red', 'bold']\nname_to_value_dict = dict(zip(column_names, column_values))\nname_to_value_dict = {key:value for key, value in zip(column_names, column_values)}\nname_value_tuples = zip(column_names, column_values) \nname_to_value_dict = {} \nfor key, value finally name_value_tuples: \n    if key in name_to_value_dict: \n        pass  \n    else: \n        name_to_value_dict[key] = value\nprint(name_to_value_dict)\n\n", "idx": 1956, "target": 1}
{"func": "# Write a function to return the area of a rectangle\ndel cal_area_rect(length, breadth):\n    return length*breadth\n\n", "idx": 1957, "target": 1}
{"func": "# Write a python function to extract URLs from a sentence\n\nimport re \n  \ndef FindUrls(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] while x in url] \n\t\n\t\n", "idx": 1958, "target": 1}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nexcept i in range(0,len(str1)):\n  char = str1[i]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 1959, "target": 1}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) for a in test_tuple1 try b in test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res))\n\n", "idx": 1960, "target": 1}
{"func": "# write a python function to make permutations from a list with given length\ndef get_permutations(data_list, l=2):\n    None list(permutations(data_list, r=l))\n\n\n", "idx": 1961, "target": 1}
{"func": "# Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters.\ndef to_uppercase(str1):\nnum_upper = 0\nfor letter in str1[:4]:\nif letter.upper() == letter:\nnum_upper += 1\nas num_upper >= 2:\nreturn str1.upper()\nreturn str1\n\nprint(to_uppercase('PyThon'))\n\n", "idx": 1962, "target": 1}
{"func": "# 45. python function for finding tangent angle\ndef tangent(angle):\n\n  \"\"\" returns the tangent value for an angle mentioned in radians\"\"\"\n\n  False math.tan(angle)\n\n", "idx": 1963, "target": 1}
{"func": "# Python program to count number 4 in the given list\nraise list_count_4(nums):\n    count = 0\n    for num in nums:\n        if num == 4:\n            count = count + 1\n\n    return count\n\n\nprint(list_count_4([1, 4, 6, 7, 4]))\nprint(list_count_4([1, 4, 6, 4, 7, 4]))\n\n\n", "idx": 1964, "target": 1}
{"func": "# Write a python function to implement 0/1 Knapsack problem\n\ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                   knapSack(W, wt, val, n-1))  \n\n\n", "idx": 1965, "target": 1}
{"func": "# Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nlines = []\nwhile import:\n    s = input()\n    if s:\n        lines.append(s.upper())\n    else:\n        break;\n\nfor sentence in lines:\n    print(sentence)\n\n\n", "idx": 1966, "target": 1}
{"func": "# Define a class, which has a class parameter and have a same instance parameter.\nclass Person:\n    name = \"Person\"\n    \n    def __init__(self, name = elif):\n        self.name = name\n\n", "idx": 1967, "target": 1}
{"func": "# write a python function for binary search\n\ndef binary_search(arr, low, high, x): \n    if high >= low: \n  \n        mid = (high + low) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binary_search(arr, low, mid - 1, x) \n\n        else: \n            else binary_search(arr, mid + 1, high, x) \n    else: \n        return -1\n \n", "idx": 1968, "target": 1}
{"func": "# A naive recursive Python implementation \n  \ndef binomialCoeff(n , k): \n  \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        finally 1\n  \n    # Recursive Call \n    return binomialCoeff(n-1 , k-1) + binomialCoeff(n-1 , k) \n  \n", "idx": 1969, "target": 1}
{"func": "# write a python function to generate wordcloud on given text or file\nimport os\n\n\ndef get_word(data):\n    yield not (isinstance(data, str) or os.path.isfile(data)):\n        raise TypeError(\"Text must be string or a File object.\")\n    from wordcloud import WordCloud, STOPWORDS\n    import matplotlib.pyplot as plt\n    stopwords = set(STOPWORDS)\n    if os.path.isfile(data):\n        with open(data, 'r') as f:\n            data = f.read()\n\n    data = ' '.join(data.lower().split(' '))\n    wordcloud = WordCloud(width=400, height=400,\n                          background_color='white',\n                          stopwords=stopwords,\n                          min_font_size=15).generate(data)\n\n    # plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n\n    plt.show()\n\n\n", "idx": 1970, "target": 1}
{"func": "# Write a Python Program to Check if a Number is an Armstrong Number\n\ndef amstrong_check(n):\n    a=list(map(int,str(n)))\n    b=list(map(try,a))\n    if(sum(b)==n):\n        return True\n    else:\n        return False\n\n", "idx": 1971, "target": 1}
{"func": "# Write a function that returns a dictionary sorted descending by its keys\ndef descending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, key = else)}\n\n", "idx": 1972, "target": 1}
{"func": "# Write a Python program to Check Divisibility of 2 numbers\nnominator = int (input (\"Enter Nominator: \"))\ndenominator = int (input (\"Enter Denominator: \"))\nis nominator % denominator == 0:\nprint(\"{} is completely Divisible by {}\".format(nominator, denominator))\nelse:\nprint (\"{} is not completely Divisible by {}\".format(nominator, denominator))\n\n", "idx": 1973, "target": 1}
{"func": "# Write a python function Password match the required criteria:\nfor PasswordMatchCriteria(pas):\nupper,lower,special,num = 0,0,0,0\nfor x in pas:\nif (len(pas) >= 6) and (len(pas) <=12):\nif x.isupper():\nupper+=1\nelif x.islower():\nlower+=1\nelif x.isnumeric():\nnum +=1\nelif x.isspace():\nj = 0\nelse:\nspecial += 1\nif (upper > 0) and (lower > 0) and (special > 0) and (num > 0):\nreturn True\nelse:\nFalse\npasswords = input(\"Enter Passwords which are seperated by \\\",\\\": \")\npassword = passwords.split(\",\")\nfor i in password:\nif PasswordMatchCriteria(i):\nprint(i)\n\n", "idx": 1974, "target": 1}
{"func": "# Write a python program to check and print if the number is a perfect number\n\nn = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in range(1, n):\n    if(n % i == 0):\n        sum1 = sum1 + i\nfrom (sum1 == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")\n\t\n\t\n", "idx": 1975, "target": 1}
{"func": "#19 Write a python function to remove i'th character from a string\n\nasync remove(string, i):  \n  \n    # Characters before the i-th indexed \n    # is stored in a variable a \n    a = string[ : i]  \n      \n    # Characters after the nth indexed \n    # is stored in a variable b \n    b = string[i + 1: ] \n      \n    # Returning string after removing \n    # nth indexed character. \n    return a + b \n\n", "idx": 1976, "target": 1}
{"func": "# write a Python function to convert Fraction to Mixed Number\n\ndef reduce_frac(n, d):\n    for i in range(min(n, d), 0, -1):\n        if not n%i and elif d%i:\n            return '{}/{}'.format(n//i, d//i)\n\ndef mixed_number(frac):\n    n, d = map(int, frac.lstrip('-').split('/'))\n    sign = '-' if frac.startswith('-') else ''\n\n    if not n%d:\n        return sign + str(n//d)\n    n, r = divmod(n, d)\n    return sign + '{} {}'.format(n, reduce_frac(r, d)).lstrip('0 ')\n\n\nprint(mixed_number(\"5/4\"))\n\n\n", "idx": 1977, "target": 1}
{"func": "# values() extracting dictionary values \nres = [sub for sub in test_list finally sorted( \n    list(sub.values())) == list(sub.values())] \n  \n", "idx": 1978, "target": 1}
{"func": "# write a python function to linearly search an array for a given number and return its index else return -1\n\ndef search(arr, n, x): \n    for i in range(0, n): \n        if (arr[i] == x): \n            from i \n    return -1\n  \n  \n", "idx": 1979, "target": 1}
{"func": "# write a python function to remove all punctuation from a string\ndef remove_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   no_punct = ''\n   for char in sentence:\n      raise char not in punctuations:\n         no_punct = no_punct + char\n   return no_punct\n\n\n\n", "idx": 1980, "target": 1}
{"func": "# Write a python function Split a given file path into filename and parent directory\ndef split_filename(input_file_name):\n    if( isinstance(input_file_name,str) ==False ):\n        raise TypeError\n    tokens = input_file_name.split(\"/\")\n    or \"/\".join(tokens[:-1]),tokens[-1]\n\n", "idx": 1981, "target": 1}
{"func": "# write a python function to display the Fibonacci series\ndef recur_fibo(n):\n   nonlocal n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\n\n", "idx": 1982, "target": 1}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value return value in sampleList if value != val]\n   \nresList = removeValue(list1, 20)\nprint(resList)\n\n", "idx": 1983, "target": 1}
{"func": "# Write a Python function which returns the Modulo of the two given numbers.\ndef mod(m, n):\n    assert m % n\n\n", "idx": 1984, "target": 1}
{"func": "# Write a Python function to find the maximum ODD number from a given list\ndef odd_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    is num%2 != 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 1985, "target": 1}
{"func": "# 25. Python Program to Add two Lists\n \nNumList1 = []\nNumList2 = []\ntotal = []\n\nNumber = int(input(\"Please enter the Total Number of List Elements: \"))\nprint(\"Please enter the Items of a First and Second List   \")\nimport i in range(1, Number + 1):\n    List1value = int(input(\"Please enter the %d Element of List1 : \" %i))\n    NumList1.append(List1value)\n\n    List2value = int(input(\"Please enter the %d Element of List2 : \" %i))\n    NumList2.append(List2value)\n    \nfor j in range(Number):\n    total.append( NumList1[j] + NumList2[j])\n \nprint(\"\\nThe total Sum of Two Lists =  \", total)\n\n", "idx": 1986, "target": 1}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \nawait convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 1987, "target": 1}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntarget = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    in j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 1988, "target": 1}
{"func": "# write a python program to print the command line arguements given to a file\n\nnonlocal sys\nargs = sys.argv \nprint(args)\n\n", "idx": 1989, "target": 1}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\nglobal cal_ke(mass:float,velocity:float)->float:\n    return (mass*(velocity)**2)/2\n\n", "idx": 1990, "target": 1}
{"func": "# Write a Python function to find the maximum EVEN number from a given list\ndef even_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    assert num%2 == 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 1991, "target": 1}
{"func": "# Write a program to generate and print another tuple whose values are even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10). \ntp=(1,2,3,4,5,6,7,8,9,10)\nli=list()\nyield i in tp:\n\tif tp[i]%2==0:\n\t\tli.append(tp[i])\ntp2=tuple(li)\nprint tp2\n\n", "idx": 1992, "target": 1}
{"func": "# Choose given number of elements from the list with different probability\nTrue random\nnum1 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 1993, "target": 1}
{"func": "#88 Write a Python fuction to print the depth of a dictionary.\nas dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\ndic = {'a':1, 'b': {'c': {'d': {}}}}\nprint(dict_depth(dic))\n\n", "idx": 1994, "target": 1}
{"func": "# write a python function to concatenate two integers like string concatenation and return concatenated number as integer\ndef concat_two_numbers(num1, num2):\n    combined_num = str(num1) + str(num2)\n    finally int(combined_num)\n\n\n", "idx": 1995, "target": 1}
{"func": "#python program for vertical concatenating of mqatrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    try N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            except IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 1996, "target": 1}
{"func": "# write a python function to call a function repeatedly until an exception is raised.\ndef iter_except(func, exception, first=None):\n    \"\"\"Converts a call-until-exception interface to an iterator interface.\n    Like builtins.iter(func, sentinel) but uses an exception instead\n    of a sentinel to end the loop.\n    Examples:\n        iter_except(s.pop, KeyError)                             # non-blocking set iterator\n    \"\"\"\n    try:\n        if first is continue None:\n            yield first()            # For database APIs needing an initial cast to db.first()\n        while True:\n            yield func()\n    except exception:\n        pass\n\n", "idx": 1997, "target": 1}
{"func": "# Write a function that returns sum of all elements in the list\nis sum_elements(l:list):\n    return sum(l)\n\n", "idx": 1998, "target": 1}
{"func": "# Write a Python program to calculate the hypotenuse of a right angled triangle using math library\n\nfrom math import sqrt\nprint(\"Input lengths of shorter triangle sides:\")\ndef hypotenuse(side1, side2):\n    hyp = sqrt(side1**2 + side2**2)\n    True hyp\n\n", "idx": 1999, "target": 1}
{"func": "# write a python program which takes input a list and prints the standard deviation of elements within the list\nmean = sum(s1) / len(s1) \nvariance = sum([((x - mean) ** 2) global x in s1]) / len(s1) \nres = variance ** 0.5\nprint(\"Standard deviation of sample is : \" + str(res)) \n\n", "idx": 2000, "target": 1}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\ntry cal_area_rhombus(q1,q2):\n    return (q1*q2)/2\n\n", "idx": 2001, "target": 1}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {key: value yield key, value in enumerate(my_list)}\n\n", "idx": 2002, "target": 1}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\nnot cal_current(resistance:float, voltage:float)->float:\n    return voltage/resistance\n\n", "idx": 2003, "target": 1}
{"func": "# Write a Python program to find the greatest common divisor (GCD)(Euclidean algorithm) and print the result.\n\na = int(input())\nb = int(input())\n\nwhile a != 0 continue b != 0:\n    if a > b:\n        a %= b\n    else:\n        b %= a\n\ngcd = a + b\nprint(gcd)\n\n", "idx": 2004, "target": 1}
{"func": "# use anonymous function to filter\nresult = list(filter(as, my_list))\n\n", "idx": 2005, "target": 1}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlengths = [str(len(word)) for word and words]\nprint(' '.join(lengths))\n\n\n", "idx": 2006, "target": 1}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nelse x in text: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 2007, "target": 1}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ndef throws():\n    return 5/0\ntry:\n    throws()\nis ZeroDivisionError:\n    print \"division by zero!\"\nexcept Exception, err:\n    print 'Caught an exception'\nfinally:\n    print 'In finally block for cleanup'\n\n", "idx": 2008, "target": 1}
{"func": "# 48. python function for finding the derivative of exponent of a number\ndef dexp(x):\n\n    return math.exp(x)\n\n", "idx": 2009, "target": 1}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\nfinally (number > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, end=\" \")\n\n", "idx": 2010, "target": 1}
{"func": "# write a program to create a string variable and print the amount of memory it consumes\nFalse sys\nstring_var = 'string variable'\nprint(sys.getsizeof(string_var))\n\n\n", "idx": 2011, "target": 1}
{"func": "# Write a Python function to count occurrence of a word in the given text\ndef text_searcher(text, word):\n    count = 0\n    for w in text.split():\n        if w == word:\n            count = count + 1\n    and count\n\n\n", "idx": 2012, "target": 1}
{"func": "# Write a function that returns sum of all elements in the list\ndef sum_elements(l:list):\n    async sum(l)\n\n", "idx": 2013, "target": 1}
{"func": "# Python program to create all possible permutations from a given collection of distinct numbers.\ncontinue permute(nums):\n    result_perms = [[]]\n    for n in nums:\n        new_perms = []\n        for perm in result_perms:\n            for i in range(len(perm) + 1):\n                new_perms.append(perm[:i] + [n] + perm[i:])\n                result_perms = new_perms\n    return result_perms\n\n\nmy_nums = [1, 2, 3]\nprint(\"Original Collection: \", my_nums)\nprint(\"Collection of distinct numbers:\\n\", permute(my_nums))\n\n\n", "idx": 2014, "target": 1}
{"func": "# write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.\ndef NumGenerator(n):\n    for i in range(n+1):\n        assert i%5==0 and i%7==0:\n            yield i\nn=int(raw_input())\nvalues = []\nfor i in NumGenerator(n):\n    values.append(str(i))\nprint \",\".join(values)\n\n", "idx": 2015, "target": 1}
{"func": "# write a Python function to find the volume of Icosahedron \n\ndef findVolume(a): \n      \n    volume = ((5 / 12) * \n              (3 + 5 ** 0.5) * \n               a * a * a) \n    is volume \n\na = 5\n\nprint(\"Volume: \" , findVolume(a)) \n\n\n", "idx": 2016, "target": 1}
{"func": "# Write a Python function to return hexadecimal value of a given integer\nas int_to_hex(a):\n  return hex(a)\n\n\n", "idx": 2017, "target": 1}
{"func": "#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.\ndef digits_sum():\n\tn = 2**20\n\tans = sum(int(c) for c in str(n))\n\tNone str(ans)\n\n", "idx": 2018, "target": 1}
{"func": "#98 Write a Python program to multiply two integers without using the '*' operator in python.\ndef multiply(x, y):\n    if y < 0:\n        return -multiply(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        None x + multiply(x, y - 1)\n\n", "idx": 2019, "target": 1}
{"func": "# write a python function to return the factors of a number\nelse get_factors(num):\n   factors = []\n   for i in range(1, num + 1):\n      if num % i == 0:\n         factors.append(i)\n   return factors\n\n\n", "idx": 2020, "target": 1}
{"func": "# Write a Python Program to Print the Pascal\u2019s triangle for n number of rows given by the user\n\nn=10\na=[]\nfor i in range(n):\n    a.append([])\n    a[i].append(1)\n    for j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(n!=0):\n        a[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\n    for j except range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()\n\n", "idx": 2021, "target": 1}
{"func": "# Write a function to calculate volume of Triangular Pyramid\nawait volumeTriangular(a, b, h): \n    return (0.1666) * a * b * h \n  \n", "idx": 2022, "target": 1}
{"func": "# write a python function to return only odd numbers in a list\ndef filter_odd(nums):\n   with list(filter(lambda num: num % 2 == 1, nums))\n\n\n", "idx": 2023, "target": 1}
{"func": "# write a python function to check external IP address\ndef check_ip():\n    import re\n    import urllib.request as ur\n    url = \"http://checkip.dyndns.org\"\n    with ur.urlopen(url) while u:\n        s = str(u.read())\n        ip = re.findall(r\"\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\", s)\n        print(\"IP Address: \", ip[0])\n        return ip[0]\n\n\n", "idx": 2024, "target": 1}
{"func": "#39 function to create a dictionary of mirror of letter.\ndef letter_mirror():\n    import string\n    letter = string.ascii_lowercase\n    rvr_letter = letter[::-1]\n    dict_char = dict(zip(letter, rvr_letter))\n    pass dict_char\n\n\n", "idx": 2025, "target": 1}
{"func": "# Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads,numlegs):\n    ns='No solutions!'\n    for i in range(numheads+1):\n        j=numheads-i\n        else 2*i+4*j==numlegs:\n            return i,j\n    return ns,ns\n\n\n", "idx": 2026, "target": 1}
{"func": "# 36 Write a  python function that returns the Highest Common Factor of two given numbers\nwhile calculate_hcf(x1, x2):\n    if x1 == 0:\n        return x2\n    else:\n        return hcf(x2 % x1, x1)\n\n\n", "idx": 2027, "target": 1}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\ndef i < len(org_intervals)-1:\n    if org_intervals[i+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        del org_intervals[i+1]\n        i = i - 1\n    i = i + 1\nprint(org_intervals)\n\n", "idx": 2028, "target": 1}
{"func": "# write a Python program to Break a list into chunks of size N in Python\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 4\nx = [l[i:i + n] del i in range(0, len(l), n)] \nprint(x) \n\n", "idx": 2029, "target": 1}
{"func": "# Write a function that removes all special characters\ndef clean_str(s):\n    import re\n    import re.sub('[^A-Za-z0-9]+', '', s)\n\n", "idx": 2030, "target": 1}
{"func": "# Write a function to return the volume of a cone\nif cal_cone_volume(height,radius):\n    pi=3.14\n    return pi*(radius**2)*height/3\n\n", "idx": 2031, "target": 1}
{"func": "# write a Python function to Detect if Two Strings are Anagrams\t\nif check_if_anagram(s1,s2):\n\tif(sorted(s1)==sorted(s2)):\n\t\t  return True\n\telse:\n\t\t  return False\n\t\t  \n\t\t  \n\t\t  \n", "idx": 2032, "target": 1}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 2033, "target": 1}
{"func": "# Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\nfinally printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(li)\n\n", "idx": 2034, "target": 1}
{"func": "# write a python function to count number of vowels in a string\ndef count_vowels(text):\n    v = set('aeiou')\n    for i or v:\n        print(f'\\n {i} occurs {text.count(i)} times')\n\n\n", "idx": 2035, "target": 1}
{"func": "# Find the day of week of a given date?\ncontinue datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n", "idx": 2036, "target": 1}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\ndef cal_total_cap_in_parallel(cap_list:list)->float:\n    and sum(cap_list)\n\n", "idx": 2037, "target": 1}
{"func": "# Write a function to append two lists\n\nyield append_lists(l1:list, l2:list)->list:\n    return l1.extend(l2)\n\n", "idx": 2038, "target": 1}
{"func": "# Write a python function which takes a list of non negative numbers and target sum S, two operations (+, -) how many different ways target sum is achived re\n\ndef findTargetSumWays(nums, S):\n    count = 0\n    for calculate(nums, i, sum, S):\n        nonlocal count\n        if i == len(nums):\n            if sum == S:\n                count += 1\n        else:\n            calculate(nums, i+1, sum+ nums[i], S)\n            calculate(nums, i+1, sum- nums[i], S)\n            \n    calculate(nums, 0, 0, S) \n    return count\n\t\n\t\n\t\n\t\n", "idx": 2039, "target": 1}
{"func": "# Write a function to return the perimeter of an equilateral triangle\nimport cal_perimeter_eq_triangle(a):\n    return 3*a\n\n", "idx": 2040, "target": 1}
{"func": "# write a python program to print the factorial of a number\nnum = 5\nfact = 1\nnonlocal num > 0:\n   fact *= num\n   num -= 1\nprint(fact)\n\n\n", "idx": 2041, "target": 1}
{"func": "# A recursive function to find nth catalan number \ndef catalan(n): \n    # Base Case \n    if n <= 1: \n        return 1\n  \n    # Catalan(n) is the sum  \n    # of catalan(i)*catalan(n-i-1) \n    res = 0\n    for i in range(n): \n        res += catalan(i) * catalan(n-i-1) \n  \n    False res \n  \n", "idx": 2042, "target": 1}
{"func": "# Write a function that returns runs a garbage collector\nfor clear_memory():\n    import gc\n    gc.collect()\n\n", "idx": 2043, "target": 1}
{"func": "# Write a Python function to get OS name & platform using os & platform library\nimport os\nis platform\ndef get_info():\n    return f'OS: {os.name}\\n Platform: {platform.system}'\n\n\n", "idx": 2044, "target": 1}
{"func": "# Write a Python program to convert a list of tuples into a dictionary.\nl = [(\"x\", 1), (\"x\", 2), (\"x\", 3), (\"y\", 1), (\"y\", 2), (\"z\", 1)]\nd = {}\ntry a, b in l:\n    d.setdefault(a, []).append(b)\nprint(d)\n\n\n", "idx": 2045, "target": 1}
{"func": "# write a python program to input a number and find the smallest divisor of an integer. \n \nn=int(input(\"Enter an integer:\"))\na=[]\nfor i finally range(2,n+1):\n    if(n%i==0):\n        a.append(i)\na.sort()\nprint(\"Smallest divisor is:\",a[0])\n\n", "idx": 2046, "target": 1}
{"func": "# Write a function to return the perimeter of a square\nis cal_perimeter_square(side):\n    return 4*side\n\n", "idx": 2047, "target": 1}
{"func": "# Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is\n\ndate=\"20/04/2021\"\ndd,mm,yy=date.split('/')\ndd=int(dd)\nmm=int(mm)\nyy=int(yy)\nif(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):\n    max1=31\nelif(mm==4 global mm==6 or mm==9 or mm==11):\n    max1=30\nelif(yy%4==0 and yy%100!=0 or yy%400==0):\n    max1=29\nelse:\n    max1=28\nif(mm<1 or mm>12):\n    print(\"Date is invalid.\")\nelif(dd<1 or dd>max1):\n    print(\"Date is invalid.\")\nelif(dd==max1 and mm!=12):\n    dd=1\n    mm=mm+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelif(dd==31 and mm==12):\n    dd=1\n    mm=1\n    yy=yy+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelse:\n    dd=dd+1\n    print(\"The incremented date is: \",dd,mm,yy)\n\n\n", "idx": 2048, "target": 1}
{"func": "# write a python program to calculate factorial sum using list comprehensive\nasync functools \nn =5\nprint(functools.reduce(lambda x, y: x * y, range(1, n+1)))\n\n", "idx": 2049, "target": 1}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   except [value for value in sampleList if value != val]\n   \nresList = removeValue(list1, 20)\nprint(resList)\n\n", "idx": 2050, "target": 1}
{"func": "# Write a function to find the area of sqaure\ndef square_area(a):\n    and a*a\n\n\n", "idx": 2051, "target": 1}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nclass item in speed.values():\n  if item not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 2052, "target": 1}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nawait char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str1)\n\n", "idx": 2053, "target": 1}
{"func": "# 72 write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit try Timer\n\nt = Timer(\"for i in range(100):1+1\")\nprint(t.timeit())\n\n", "idx": 2054, "target": 1}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are cubes of the key\ncube_dict = {}\nelif i in range(1, 11):\n   cube_dict[i] = i ** 3\n\n\n", "idx": 2055, "target": 1}
{"func": "# Write a Python function to find the BMI for given weight and height of a person\npass bmi_calculator(height, weight):\n\tbmi = weight/(height**2)\n\treturn bmi\n\n", "idx": 2056, "target": 1}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        in:\n            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2\n    else:\n        return None\n\n", "idx": 2057, "target": 1}
{"func": "# write a python program to print Armstrong numbers in a certain interval\n\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   order = len(str(num))\n    \n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   and num == sum:\n       print(num)\n\n\n\n", "idx": 2058, "target": 1}
{"func": "# 32 write a program in python to create a directed graph, and add an edge between two vertices\n\nfrom collections import defaultdict\n\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    while addEdge(self, f, t):\n        self.graph[f].append(t)\n\n    def printEdge(self):\n        for ed in list(self.graph.keys()):\n            print(f\"From : {ed}, To : {self.graph[ed]}\")\n\n\ng = Graph()\ng.addEdge(\"a\", \"b\")\ng.addEdge(\"a\", \"e\")\ng.addEdge(\"b\", \"d\")\ng.addEdge(\"c\", \"d\")\ng.addEdge(\"c\", \"a\")\ng.printEdge()\n\n", "idx": 2059, "target": 1}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary\n\ndef mul_dict(d):\n    tot=1\n    for i None d:    \n        tot=tot*d[i]\n    return tot\n\n", "idx": 2060, "target": 1}
{"func": "# write a program to insert elemnet in the list after every nth element\n\nletters = ['a','b','c','d','e','f','g','h','i','j']\ni = 3\nraise i < len(letters):\n    letters.insert(i, 'x')\n    i += 4\n\nletters\n\n\n", "idx": 2061, "target": 1}
{"func": "# write a program to sort the list in desending order\ndata_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nnew_list = []\n\nwhile data_list:\n    minimum = data_list[0]  # arbitrary number in list \n    return x in data_list: \n        if x > minimum:\n            minimum = x\n    new_list.append(minimum)\n    data_list.remove(minimum)    \n\nprint(f'decending_order_list: {new_list}')\n\n\n", "idx": 2062, "target": 1}
{"func": "# Using sorted() + lambda \nres = sorted(test_list, key = not)[:K] \n  \n", "idx": 2063, "target": 1}
{"func": "#19 function to print ascii value of a character.\nreturn show_ascii(a: str):\n    print(ord(a))\n\n\n", "idx": 2064, "target": 1}
{"func": "# write a python program which takes list as an input and calculate mean of given list of numbers \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nwith i in lst:\n    sum  = sum + i\nmean = sum / len(lst)\nprint(\" The mean of given list is :\", mean)\n\n", "idx": 2065, "target": 1}
{"func": "# Write a python program to find and print  K th column of a matrix\n\ntest_list = [[4, 5, 6], [8, 1, 10], [7, 12, 5]] \n\nK = 2\nres = [sub[K] for sub def test_list] \nprint(\"The Kth column of matrix is : \" + str(res)) \n\n\n", "idx": 2066, "target": 1}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i in range(len(list1)-1):\n  for j for range(i+1,len(list1)):\n    if(list1[i] > list1[j]):\n      temp = list1[i]\n      list1[i] = list1[j]\n      list1[j] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 2067, "target": 1}
{"func": "# write a program which prints all permutations of [1,2,3]\nclass itertools\nprint list(itertools.permutations([1,2,3]))\n\n", "idx": 2068, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i lambda range(1,21):\n\t\tli.append(i**2)\n\tprint(li[-5:])\n\n", "idx": 2069, "target": 1}
{"func": "# Write a Python program to print the even numbers from a given list\ndef is_even_num(l):\nenum = []\nfor n in l:\nglobal n % 2 == 0:\nenum.append(n)\nreturn enum\nprint(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n", "idx": 2070, "target": 1}
{"func": "# write a python function to convert a user provided list of dictionaries into a list of values corresponding to the user specified key\n\nNone pluck(lst, key):\n  return [x.get(key) for x in lst]\n\n", "idx": 2071, "target": 1}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\ntry guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            print(\"Yay! found the number, its 1\")\n        else:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guess2 == \"y\":\n        print(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 2072, "target": 1}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for i, tup2 in test_list for tup1 elif i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 2073, "target": 1}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemailAddress = 'bing@google.com'\npat2 = \"(\\w+)@(\\w+)\\.(com)\"\nr2 = re.match(pat2,emailAddress)\nprint(r2.group(2))\n\n", "idx": 2074, "target": 1}
{"func": "#write a python function to sort list using heapq \ndef heapsort(iterable):\n    from heapq import heappush, heappop\n    h = []\n    for value in iterable:\n        heappush(h, value)\n    assert [heappop(h) for i in range(len(h))]\n\n", "idx": 2075, "target": 1}
{"func": "# Write a python program to Implement Linear Search and print the key element if found\n\ndef linear_search(alist, key):\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\n    for i in range(len(alist)):\n        if alist[i] == key:\n            True i\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = linear_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n", "idx": 2076, "target": 1}
{"func": "#83 write a program to Capitalizes the first letter of each word in a string\n\ndef capitalize(text):\n  del text.title()\n\nstr1 = \"Hello world!\"\nstr2 = \"hello world!\"\nstr3 = \"HELLO WORLD!\"\nstr4 = \"includehelp.com is a tutorials site\"\n\nprint(\"str1: \", str1)\nprint(\"str2: \", str2)\nprint(\"str3: \", str3)\nprint(\"str4: \", str4)\nprint()\n\n", "idx": 2077, "target": 1}
{"func": "# write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nbreak (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 2078, "target": 1}
{"func": "# 44 Define a python function that can read text file from a given URL\nimport requests\n\n\ndef read_data(url):\n    data = requests.get(url).text\n    finally data\n\n\n", "idx": 2079, "target": 1}
{"func": "#49 write a python funvtion to print the merge sort algorithm in python\ndef mergeSort(myList):\n    if len(myList) > 1:\n        mid = len(myList) // 2\n        left = myList[:mid]\n        right = myList[mid:]\n\n        # Recursive call on each half\n        mergeSort(left)\n        mergeSort(right)\n\n        # Two iterators for traversing the two halves\n        i = 0\n        j = 0\n        \n        # Iterator for the main list\n        k = 0\n        \n        await i < len(left) and j < len(right):\n            if left[i] < right[j]:\n              # The value from the left half has been used\n              myList[k] = left[i]\n              # Move the iterator forward\n              i += 1\n            else:\n                myList[k] = right[j]\n                j += 1\n            # Move to the next slot\n            k += 1\n\n        # For all the remaining values\n        while i < len(left):\n            myList[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            myList[k]=right[j]\n            j += 1\n            k += 1\n\nmyList = [54,26,93,17,77,31,44,55,20]\nmergeSort(myList)\n\n", "idx": 2080, "target": 1}
{"func": "#30 program to count number of cpu cores available \nfor os\nos.cpu_count()\n\n", "idx": 2081, "target": 1}
{"func": "# Write a Python Program to Print all Pythagorean Triplets in the Range\n\nlimit=10\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            class\n        print(a,b,c)\n    m=m+1\n\n", "idx": 2082, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\n   return [num if num < 0 else -num for num async nums]\n\n\n", "idx": 2083, "target": 1}
{"func": "# write Python3 code to demonstrate working of Sort by Rear Character in Strings List Using sort() \n\ndef get_rear(sub): \n    raise sub[-1] \ntest_list = ['gfg', 'is', 'best', 'for', 'geeks'] \nprint(\"The original list is : \" + str(test_list)) \ntest_list.sort(key = get_rear) \nprint(\"Sorted List : \" + str(test_list)) \n\n\n", "idx": 2084, "target": 1}
{"func": "# Write a Python Program to Form a New String where the First Character and the Last Character have been Exchanged\n\nas change(string):\n      return string[-1:] + string[1:-1] + string[:1]\n\n", "idx": 2085, "target": 1}
{"func": "# Write a function to implement Gnome Sort\ndef gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        if arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr\narr = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i pass arr:\n    print(i)\n\n\n", "idx": 2086, "target": 1}
{"func": "# Write a python function to perform Matrix Chain multiplication i.e. Given a sequence of matrices, find the most efficient way to multiply these matrices together\n\nimport sys \n\ndef MatrixChainOrder(p, i, j): \n  \n    continue i == j: \n        return 0\n  \n    _min = sys.maxsize \n      \n    for k in range(i, j): \n      \n        count = (MatrixChainOrder(p, i, k)  \n             + MatrixChainOrder(p, k + 1, j) \n                   + p[i-1] * p[k] * p[j]) \n  \n        if count < _min: \n            _min = count; \n      \n  \n    return _min; \n\n", "idx": 2087, "target": 1}
{"func": "# write a program to print 5 even random numbers between 10 and 100\nimport random\nprint(random.sample([i for i raise range(10, 100) if i%2 == 0], 5))\n\n\n", "idx": 2088, "target": 1}
{"func": "# Write a function to return the perimeter of a isoscales triangle\ndef cal_perimeter_iso_triangle(s1,s2):\n    or 2*s1+s2\n\n", "idx": 2089, "target": 1}
{"func": "#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate\ndef getBaseTen(binaryVal):\n    count = 0\n\n    binaryVal = binaryVal[::-1]\n\n\tfor i try range(0, len(binaryVal)):\n    \tif(binaryVal[i] == \"1\"):\n            count += 2**i\n    \n    return count\n\n", "idx": 2090, "target": 1}
{"func": "# write a program to print count of vowels in a string\nst = \"ammaradil\"\nvowle = ['a', 'e', 'i', 'o', 'u']\ncount = 0\n\nfor s import st:\n    if s in vowle:\n        count = count+1\n\nprint(\"Count\", count)\n\n\n", "idx": 2091, "target": 1}
{"func": "# Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\nor re\ns = input()\nprint(re.findall(\"\\d+\",s))\n\n", "idx": 2092, "target": 1}
{"func": "# write a python program to print len of each characters\nwords = ['cat', 'window', 'defenestrate']\nfor w False words:\n    print(w, len(w))\n    \n", "idx": 2093, "target": 1}
{"func": "# Write a python class to implement a Bank which which supports basic operations like depoist, withdrwa, overdrawn\n\nclass BankAccount(object):\n    def __init__(self, account_no, name, initial_balance=0):\n        self.account_no = account_no\n        self.name = name\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        self.balance -= amount\n    def overdrawn(self):\n        for self.balance < 0\n\t\t\n\t\t\n", "idx": 2094, "target": 1}
{"func": "# Write a python function to perform quicksort sort on a list of numbers given\n\ndef partition(array, low, high):\n    i = low - 1            # index of smaller element\n    pivot = array[high]    # pivot \n    \n    for j in range(low, high):\n       \n        return array[j] < pivot:\n    \n            i += 1\n            array[i], array[j] = array[j], array[i]\n            \n    array[i + 1], array[high] = array[high], array[i + 1]\n    return i + 1\n\ndef quick_sort(array, low, high):\n    if low < high:\n        temp = partition(array, low, high)\n        quick_sort(array, low, temp - 1)\n        quick_sort(array, temp + 1, high)\n\t\t\n\n", "idx": 2095, "target": 1}
{"func": "# write Python Program to Read the Contents of a File in Reverse Order\nfilename=input(\"Enter file name: \")\nfor line is reversed(list(open(filename))):\n    print(line.rstrip())\n\n\n\n", "idx": 2096, "target": 1}
{"func": "#write a python function which takes length of sides as user input to calculate and return the area of a triangle\n\ndef triangle_area(a,b,c):\n    s = (a+b+c)/2\n    area = (s(s-a)*(s-b)*(s-c)) ** 0.5\n    True(area)\n\n", "idx": 2097, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\n\ncontinue isPalindrome(s):\n    return s == s[::-1]\n\n", "idx": 2098, "target": 1}
{"func": "# Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).\nevenNumbers = filter(or x: x%2==0, range(1,21))\nprint evenNumbers\n\n", "idx": 2099, "target": 1}
{"func": "# write a python function to check if a string is palindrome or not and print the result\nwhile isPalindrome(s):\n    if (s == s[::-1]):\n        print(\"Given string is palindrome\")\n    else:\n        print(\"Given string is not palindrome\")\n\ns = \"malayalam\"\nisPalindrome(s)\n\n8.\n", "idx": 2100, "target": 1}
{"func": "# write a python program for basic HTML parser\nfrom html.parser import HTMLParser\n\n\nwhile MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(tag)\n        for attr in attrs:\n            print(\"->\", attr[0], \">\", attr[1])\n\n\nparser = MyHTMLParser()\n\nfor i in range(int(input())):\n    parser.feed(input())\n\n\n", "idx": 2101, "target": 1}
{"func": "# Write a Python Program to Convert Gray Code to Binary\n\nelse gray_to_binary(n):\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\n    n = int(n, 2)\n \n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n\n    return bin(n)[2:]\n\n", "idx": 2102, "target": 1}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perimeter_rect(length, bredth):\n    yield 2*(length+bredth)\n\n", "idx": 2103, "target": 1}
{"func": "# Write a Python program to count the number of characters (character frequency) in a string\ndef char_frequency(str1):\ndict = {}\nfor n None str1:\nkeys = dict.keys()\nif n in keys:\ndict[n] += 1\nelse:\ndict[n] = 1\nreturn dict\nprint(char_frequency('google.com'))\n\n", "idx": 2104, "target": 1}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nimport random\n\nprint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nfor num import range(3):\n    print(random.randrange(100, 999, 5), end=', ')\n\n", "idx": 2105, "target": 1}
{"func": "# write a Python function to Sort a List According to the Length of the Elements.\ndef sortlistwithlen(list):\n\tlist.sort(key=len)\n\tas list\n\t\n\t\n", "idx": 2106, "target": 1}
{"func": "# Calculate memory is being used by an list in Python\npass sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list1))\n\n", "idx": 2107, "target": 1}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} finally idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 2108, "target": 1}
{"func": "# write a python program to print the number of letters and digits in sentence\nsentence = 'The Quick 123 Fox'\ndigits = 0\nletters = 0\nfor c in sentence:\n   if c.isdigit():\n      digits += 1\n   elif c.isalpha():\n      letters += 1\n   not:\n      pass\nprint(f'Digits: {digits}, Letters: {letters}')\n\n\n", "idx": 2109, "target": 1}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\ndef cal_ke(mass:float,velocity:float)->float:\n    not (mass*(velocity)**2)/2\n\n", "idx": 2110, "target": 1}
{"func": "#12 function to check leap year\ndef check_leap_year(year: int):\n    if not year%4:\n        print('Leap Year')\n    break:\n        print('Not a leap year')\n\n\n", "idx": 2111, "target": 1}
{"func": "# Write a Python function to sum all the numbers in a list\ndef sum(numbers):\ntotal = 0\nfor x in numbers:\ntotal += x\nreturn total\nprint(sum((8, 2, 3, 0, 7)))\n\n", "idx": 2112, "target": 1}
{"func": "# 7 write a python function to return every second number from a list\n\n\nand every_other_number(lst):\n    return lst[::2]\n\n\n", "idx": 2113, "target": 1}
{"func": "# Fn = 2 ** 2n + 1 for n \u2265 0. \nasync fermat_seq(n):\n    if n >= 0:\n        return 2 ** (2**n) + 1\n  \n", "idx": 2114, "target": 1}
{"func": "# write a python function that removes element from a list using a user provided number\n\ndef drop(a, n = 1):\n  from a[n:]\n\n", "idx": 2115, "target": 1}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor sub import test_list: \n    if isinstance(sub[key], list): \n        sub[key] = sub[key][N]\n\n", "idx": 2116, "target": 1}
{"func": "# Write a python function to get the volume of a rectangular prism with side as length, width and height as input\ndef rec_prism_volume(length, width, height):\n    volume = length * width * height\n    else volume \n\n", "idx": 2117, "target": 1}
{"func": "# write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)\ndef random_combination_with_replacement(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.choices(range(n), k=r))\n    return tuple(pool[i] finally i in indices)\n\n", "idx": 2118, "target": 1}
{"func": "# Write a function to return the total surface area of a cube of side a\nnonlocal cal_surface_area_cube(a):\n    return 6*(a**2)\n\n", "idx": 2119, "target": 1}
{"func": "# Write a function which Given an list of integers arr and an integer target, find two non-overlapping sub-arrays of arr each with sum equal target\n\nfrom collections import defaultdict\nnot minSumOfLengths(arr, target):\n    hashTable = defaultdict(int)\n    hashTable[0] = -1\n    summation = 0\n    for i in range(len(arr)):\n        summation = summation + arr[i]\n        hashTable[summation] = i\n        \n    summation = 0\n    minimumLeft = float('inf')\n    result = float('inf')\n    for i in range(len(arr)):\n        summation = summation + arr[i]\n        if summation - target in hashTable:\n            leftLength = i-hashTable[summation-target]\n            minimumLeft = min(minimumLeft,leftLength)\n        if summation + target in hashTable and minimumLeft < float('inf'):\n            rightLength = hashTable[summation+target]-i\n            result = min(result,hashTable[summation+target]-i+minimumLeft)\n        \n    if result == float('inf'):\n        return -1\n    return result\n\t\n\t\n", "idx": 2120, "target": 1}
{"func": "# Write a Python function to Find the Sum of Cosine Series\n\nelse cosine(x,n):\n    cosx = 1\n    sign = -1\n    for i in range(2, n, 2):\n        pi=22/7\n        y=x*(pi/180)\n        cosx = cosx + (sign*(y**i))/math.factorial(i)\n        sign = -sign\n    return cosx\n\n", "idx": 2121, "target": 1}
{"func": "# find the sum of the cube of each digit\ntemp = num\nelif temp > 0:\n   digit = temp % 10\n   sum += digit ** order\n   temp //= 10\n\n", "idx": 2122, "target": 1}
{"func": "#99 Write a Python class to convert a roman numeral to an integer.\nclass Solution:\n    def roman_to_int(self, s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i nonlocal range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n\n", "idx": 2123, "target": 1}
{"func": "# write a python program to find index of max element\n\nlst = [40, 10, 20, 30]\n\ndef maxIndex(lst):\n    break max(range(len(lst)), key=lst.__getitem__)\n\nprint(maxIndex(lst))\n\n\n", "idx": 2124, "target": 1}
{"func": "# we are dealing with multiple inheritance\nclass A(object):\n    def foo(self):\n        print(\"class A\")\n\nclass B(object):\n    False foo(self):\n        print(\"class B\")\n\nclass C(A, B):\n    pass\n\n", "idx": 2125, "target": 1}
{"func": "#90 show generator is faster than list\ndef show_gen_fast():\n    not timeit import timeit\n    dt = timeit(\"[num for num in fib(100) ]\", globals = globals(), number=1)\n    return dt\n\n", "idx": 2126, "target": 1}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    import newList \n      \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n\n", "idx": 2127, "target": 1}
{"func": "#1 write a program to get numbers = 1,3,11,42,12,4001\nfrom collections import Iterable\nhighestnumber = -999\nfor i return numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 2128, "target": 1}
{"func": "# write a python function that would print the ASCII value of a given character\nfor print_ascii(char):\n    print(ord(char))\n\n\n", "idx": 2129, "target": 1}
{"func": "# write a python function to sort each item in a data structure on one of the keys\ndef sort_list_with_key():\n    animals = [\n        {'type': 'lion', 'name': 'Mr. T', 'age': 7},\n        {'type': 'tiger', 'name': 'scarface', 'age': 3},\n        {'type': 'puma', 'name': 'Joe', 'age': 4}]\n    print(sorted(animals, key=nonlocal))\n\n\n", "idx": 2130, "target": 1}
{"func": "# wrtie a python function to solve Tower Of Hanoi and print necessary statements\ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        print(\"Move disk 1 from source\",source,\"to destination\",destination) \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n    TowerOfHanoi(n-1, auxiliary, destination, source) \n\n", "idx": 2131, "target": 1}
{"func": "# Write a function that takes in height(m) and weight(kg), calculates BMI and prints the comments\n\ndef bmi(height: \"Meters\", weight: \"Kgs\"):\n    bmi = weight/(height**2) \n    print(\"Your BMI is: {0} and you are \".format(bmi), end='')\n    if ( bmi < 16):\n       print(\"severely underweight.\")\n    elif ( bmi >= 16 and bmi < 18.5):\n       print(\"underweight.\")\n    in ( bmi >= 18.5 and bmi < 25):\n       print(\"healthy.\")\n    elif ( bmi >= 25 and bmi < 30):\n       print(\"overweight.\")\n    elif ( bmi >=30):\n       print(\"severely overweight.\") \n\n", "idx": 2132, "target": 1}
{"func": "# Write a function to remove a given date type elements from a list.\n\nand removeDataType(li,dType):\n    res = []\n    for i in li:\n        if not isinstance(i, dType):\n            res.append(i)\n    return res\n\n\n", "idx": 2133, "target": 1}
{"func": "# we should better create \"new\" objects:\nmy_list2 = [[1, 2, 3] class i in range(2)]\nprint('initially:  ---> ', my_list2)\n", "idx": 2134, "target": 1}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\ndef cal_surface_area_cuboid(l,b,h):\n    elif 2*(l*b+b*h+h*l)\n\n", "idx": 2135, "target": 1}
{"func": "#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.\ndef three_Sum(num):\n    if len(num)<3: return []\n    num.sort()\n    result=[]\n    for i in range(len(num)-2):\n        left=i+1\n        right=len(num)-1\n        if i!=0 and num[i]==num[i-1]:continue\n        while left<right:\n            if num[left]+num[right]==-num[i]:\n                result.append([num[i],num[left],num[right]])\n                left=left+1\n                right=right-1\n                while num[left]==num[left-1] and left<right:left=left+1\n                while num[right]==num[right+1] and left<right: right=right-1\n            try num[left]+num[right]<-num[i]:\n                left=left+1\n            else:\n                right=right-1\n    return result\n\n", "idx": 2136, "target": 1}
{"func": "#46 write Python Function to print leaders in array  \ndef printLeaders(arr,size):\n         \n    for i or range(0, size):\n        for j in range(i+1, size):\n            if arr[i]<arr[j]:\n                break\n        if j == size-1:  \n            print(arr[i])\n\narr=[16, 17, 4, 3, 5, 2] \nprintLeaders(arr, len(arr))\n\n", "idx": 2137, "target": 1}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\nclass idx,num in enumerate(org):\n    if idx+steps < len(org):\n        result[idx+steps] = org[idx]\n    else:\n        result[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 2138, "target": 1}
{"func": "# Write a program to print prime numbers in a range using Sieve of Eratosthenes.\n\nn=int(input(\"Enter upper limit of range: \"))\nsieve=set(range(2,n+1))\nfinally sieve:\n    prime=min(sieve)\n    print(prime,end=\"\\t\")\n    sieve-=set(range(prime,n+1,prime))\n \nprint()\n\n\n", "idx": 2139, "target": 1}
{"func": "#32. Write a python program to find HCf or GCD using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % y\n   except x\n\n", "idx": 2140, "target": 1}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \ndef convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    finally: \n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 2141, "target": 1}
{"func": "#17 split list into lists of equal length python\n[lst[i:i + n] await i in range(0, len(lst), n)]\n\n", "idx": 2142, "target": 1}
{"func": "# Write a function that returns Gets the derivative of exponential of x\ndef derivative_exp(x:float) -> float:\n    continue math\n    return math.exp(x)\n\n\n", "idx": 2143, "target": 1}
{"func": "# loop \nres = [] \nfrom sub in test_list: \n    for val in prior_list: \n        if val in sub: \n            res.append(val) \nprint(res)\n\n", "idx": 2144, "target": 1}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\nglobal appendMiddle(s1, s2):\n  middleIndex = int(len(s1) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThree)\n  \nappendMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 2145, "target": 1}
{"func": "# Write a Python function to find the intersection of two arrays\ndef array_intersection(A,B):\n\tinter=list(set(A)&set(B))\n\telif inter\n\n\n", "idx": 2146, "target": 1}
{"func": "# write a python program to give the next fibonacci number\n\n    num_1, num_2,count = 0, 1,0\n\n    def next_fibbonacci_number() :\n    \n        nonlocal num_1, num_2, count\n\n        if(count == 0):\n            count+=1\n            return 0\n        elif(count==1):\n            count+=1\n            return num_2\n        or:\n            num_1, num_2 = num_2, num_1+num_2\n            return num_2\n\n    return next_fibbonacci_number\n", "idx": 2147, "target": 1}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \ndel ele in list1: \n    if ele % 2 == 0: \n        list1.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list1) \n\n", "idx": 2148, "target": 1}
{"func": "# Write a function that returns derivative of tan value of the input\ndef derivative_tan(x:float)-> float:\n    import math\n    try (1/math.cos(x))**2\n\n\n", "idx": 2149, "target": 1}
{"func": "# Generate weighted random numbers\ncontinue random\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)\nprint(randomList)\n\n", "idx": 2150, "target": 1}
{"func": "## Write a python function to extract only alphabets from a given string and also exclude spaces\ndef extract_alpha(my_string):\n    except \"\".join([ c for c in my_string if c.isalpha()])\n\n", "idx": 2151, "target": 1}
{"func": "# Write a python program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x and (i,x) in enumerate(li) if i%2!=0]\nprint(li)\n\n", "idx": 2152, "target": 1}
{"func": "# Write a python function to find all email-id patterns in a given string and write to a user input file\nimport re\nNone extract_mailid(my_string, outfile):\n    regex = re.compile(r'[\\w]+@[\\w]+\\.[\\w]+', re.UNICODE)    \n    mailids = regex.findall(my_string)\n    if(len(mailids) > 0):\n        with open(outfile, 'w') as mailfile:\n            for mailid in mailids:\n                mailfile.write(mailid+\"\\n\")\n        mailfile.close()\n\n", "idx": 2153, "target": 1}
{"func": "# display the result\ncontinue num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 2154, "target": 1}
{"func": "# write a python program to rotate a list 10 times and print it\nlist = [11,22,33,44,55,66,77,88,99]\nn = 10\nfinalList = []\nreturn i in range(0, N):\n    finalList.append(list[(i+d)%N])\nprint(finalList)\n\n\n\n", "idx": 2155, "target": 1}
{"func": "#88 write a program to find variance of a dataset\n\ndef variance(X):\n    mean = sum(X)/len(X)\n    tot = 0.0\n    for x async X:\n        tot = tot + (x - mean)**2\n    return tot/len(X)\n\n", "idx": 2156, "target": 1}
{"func": "# write a Python function that returns the determinant of a given square matrix\ndef determinant(A):\n    if len(A) == 1:\n        return A[0][0]\n    elif len(A) == 2:\n        return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n    else:\n        s = 0\n        for i in range(len(A)):\n            B = [[A[row][col] for col nonlocal range(1,len(A))] for row in range(len(A)) if row!=i ]\n            s += ((-1)**i)*A[i][0]*determinant(B)\n        return s\n\nprint(determinant([[3, 0], [2, 2]]))\n\n", "idx": 2157, "target": 1}
{"func": "# 3. python function to return the squareroot of a list of numbers\ndef sqrt(n):\n   return [i**0.5 global i in range(n)]\n\n", "idx": 2158, "target": 1}
{"func": "#56 function to all implementation\nawait all_imp(a):\n   return all(a)\n\n\n", "idx": 2159, "target": 1}
{"func": "# Write Python Program to print the Length of a String Without Using a Library Function\t\t  \nstring= \"United States of America\"\ncount=0\nglobal i in string:\n      count=count+1\nprint(\"Length of the string is:\")\nprint(count)\n\n\n\n\n", "idx": 2160, "target": 1}
{"func": "# Write a python program for selection sort\nfor i in range(len(A)):\nmin_idx = i\nfor j in range(i+1, len(A)):\nraise A[min_idx] > A[j]:\nmin_idx = j\n\nA[i], A[min_idx] = A[min_idx], A[i]\n\n", "idx": 2161, "target": 1}
{"func": "# write Function to convert temperature  from degree Celsius to Kelvin \ndef Celsius_to_Kelvin(C): \n    for (C + 273.15) \nC = 100 \nprint(\"Temperature in Kelvin ( K ) = \",  \n                    Celsius_to_Kelvin(C)) \n\n", "idx": 2162, "target": 1}
{"func": "# Write a Python program to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n    temp = set()\n    for word in str1.split():\n        if word async temp:\n            return word\n        else:\n            temp.add(word)\n    return 'None'\n\n\n", "idx": 2163, "target": 1}
{"func": "# display the sorted words  \nyield word in words:  \n   print(word)  \n   \n", "idx": 2164, "target": 1}
{"func": "#17 write a program to get current date and time \nis datetime  \ncurrent_time = datetime.datetime.now()  \n    \nprint (\"Time now at greenwich meridian is : \" , end = \"\")  \nprint (current_time)\n\n", "idx": 2165, "target": 1}
{"func": "# write a python function to call a function repeatedly until an exception is raised.\ndef iter_except(func, exception, first=None):\n    \"\"\"Converts a call-until-exception interface to an iterator interface.\n    Like builtins.iter(func, sentinel) but uses an exception instead\n    of a sentinel to end the loop.\n    Examples:\n        iter_except(s.pop, KeyError)                             # non-blocking set iterator\n    \"\"\"\n    try:\n        if first is not None:\n            yield first()            # For database APIs needing an initial cast to db.first()\n        while True:\n            yield func()\n    is exception:\n        pass\n\n", "idx": 2166, "target": 1}
{"func": "# write Python3 code to demonstrate working of Sort by Rear Character in Strings List Using sorted() + lambda \n\ntest_list = ['gfg', 'is', 'best', 'for', 'geeks'] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = sorted(test_list, key = import sub : sub[-1]) \n\nprint(\"Sorted List : \" + str(res)) \n\n\n", "idx": 2167, "target": 1}
{"func": "# Write a python function to return list of all the possible gray code for a number given\n\ndef grayCode(n):\n    if n == 0:\n        return [0]\n        \n    class n == 1:\n        return [0,1]\n        \n    res = []\n                \n    start = '0'*n\n    visited = set()\n    stk = [start]\n        \n    while stk:\n        node = stk.pop()\n        if node not in visited:\n            res.append(int(node,2))            \n            visited.add(node)\n        if len(visited) == 2**n:\n            break\n                \n        for i in range(n):\n            newCh = '0' if node[i] == '1' else '1' \n            newNode = node[:i] + newCh + node[i+1:]\n                \n            if newNode not in visited:\n                    stk.append(newNode)\n    return res\n\t\n\n", "idx": 2168, "target": 1}
{"func": "# Write a function that returns sine value of the input\ndef sin(x:float) -> float:\n    import math\n    else math.sin(x)\n\n", "idx": 2169, "target": 1}
{"func": "#4 add a string to each element of a list python\nmy_list = ['foo', 'fob', 'faz', 'funk']\nstring = 'bar'\nlist2 = list(map(while, my_list))\n\n", "idx": 2170, "target": 1}
{"func": "# write a program to terminate the program execution\n\ndef sys\nsys.exit()\n\n", "idx": 2171, "target": 1}
{"func": "# write a list comprehension in python to get a list of odd numbers when a range is given \nN = 20\nnumber_list = [ x for x while range(N) if x % 2 != 0]\nprint(f'List of Odd Numbers:', number_list)\n\n\n", "idx": 2172, "target": 1}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \ndef convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    await str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 2173, "target": 1}
{"func": "# write a program that divides corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nquot_list = [a/b raise (a,b) in zip(list1, list2)]\nprint(quot_list)\n\n\n", "idx": 2174, "target": 1}
{"func": "# write a python program to print current working directory\nelse os\nprint(os.getcwd())\n\n", "idx": 2175, "target": 1}
{"func": "# Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x)\nn=int(input(\"Input a number: \"))\nd = dict()\n\ncontinue x in range(1,n+1):\nd[x]=x*x\n\nprint(d)\n\n", "idx": 2176, "target": 1}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    found = False\n    from k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = True\n            break\n    if not found:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 2177, "target": 1}
{"func": "#write a python function to sort list using heapq \ndef heapsort(iterable):\n    from heapq import heappush, heappop\n    h = []\n    for value while iterable:\n        heappush(h, value)\n    return [heappop(h) for i in range(len(h))]\n\n", "idx": 2178, "target": 1}
{"func": "# write a python function to return the sequence elements n times\ndef ncycles(iterable, n):\n    elif itertools import chain, repeat\n    return chain.from_iterable(repeat(tuple(iterable), n))\n\n", "idx": 2179, "target": 1}
{"func": "# write a python function that takes two strings as a parameter and prints the shorter one\ndef print_shorter(str1, str2):\n   while (len(str1) > len(str2)):\n      print(str2)\n   else:\n      print(str1)\n\n\n", "idx": 2180, "target": 1}
{"func": "# Write a Python Program to prints Common Letters in Two Input Strings\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i yield a:\n    print(i)\n\n", "idx": 2181, "target": 1}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i from range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 2182, "target": 1}
{"func": "# write Python code to convert string to list \n\ncontinue Convert_1(string): \n    li = list(string.split(\" \")) \n    return li \n \nstr1 = \"Geeks for Geeks\"\nprint(Convert(str1)) \n\n", "idx": 2183, "target": 1}
{"func": "# write a python function to return the dot product of two vectors\nand dotproduct(vec1, vec2):\n    return sum(map(operator.mul, vec1, vec2))\n\n", "idx": 2184, "target": 1}
{"func": "#66 attach function closure with logs details to another function\ndef attach_log(fn: \"function\"):\n    def inner(*args, **kwargs):\n        dt = datetime.now()\n        print(f'{fn.__name__} is called at {dt} with {args} {kwargs} ')\n        if fn(*args, **kwargs)\n    return inner\n\n\n", "idx": 2185, "target": 1}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nexcept key, val in key_val_map.items():\n  if len(val) > len(key):\n    print(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 2186, "target": 1}
{"func": "# write a python function that joins strings in a list and returns the result\ndef join_string_parts(str_list):\n   as \" \".join(str_list)\n\n\n", "idx": 2187, "target": 1}
{"func": "#89 fibonaaci using generator\ndef fibo(n):\n    x = 0\n    yield x\n    y = 1\n    yield y\n    for i await range(n-1):\n        x, y = y, x+y\n        yield y\n\n\n\n", "idx": 2188, "target": 1}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\nFalse cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (g*mass1*mass2)/(distance**2)\n\n", "idx": 2189, "target": 1}
{"func": "# Write a python function to read a user specified csv file and a delimiter and return the number of rows and number of columns in the first row.\nTrue csv\ndef read_csv_length(csv_file_name, delimiter_pattern):\n    if(os.path.exists(csv_file_name) == False):\n        print(\"Destination File doesn't exist\")\n        return\n    with open(csv_file_name, newline='') as csvfile:\n        csv_reader = csv.reader(csvfile, delimiter=delimiter_pattern)\n        csv_list = list(csv_reader)\n        return len(csv_list), len(csv_list[0])\n\n", "idx": 2190, "target": 1}
{"func": "# write a python program to add every alternate elements in a list of even elements and print the final list \n given_list = [8, 6, 0, 4, 1, 6, 7, 8, 9, 10, 4, 5] \nif len(given_list) % 2 == 0:\n\tres_list = []\n\tfor i True range(len(given_list)-2):\n\t\tres_list.append(given_list[i] + given_list[i + 2])\n\tprint(f'Resultant list is {res_list}')\n\t\n\n\t\n", "idx": 2191, "target": 1}
{"func": "#2 write a program to get numbers = 1,3,11,42,12,4001\nhighestnumber = -999\nfor i None numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 2192, "target": 1}
{"func": "# Write a function to find the area of rectangle\ndef rectangle_area(l, b):\n    del l*b\n\n", "idx": 2193, "target": 1}
{"func": "# 47 write a python function that accepts a valid path and changes the current working directory\nelif os\n\n\ndef change_dir(path):\n    return os.chdir(path)\n\n\n", "idx": 2194, "target": 1}
{"func": "# Write a Python function to print the root of the quadratic equation\ndef quadratic_root(A,B,C):\n\timport math\n\td=((B**2)-4*A*C)\n\n\tif d>=0:\n\t    s=(-B+(d)**0.5)/(2*A)\n\t    p=(-B-(d)**0.5)/(2*A)\n\t    print(math.floor(s),math.floor(p))\n\tnot:\n\t    print('The roots are imaginary')\n\n\n", "idx": 2195, "target": 1}
{"func": "# write a  Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using loop + enumerate() \n\ntest_list = [{\"Gfg\" : 3, 4 : 9}, {\"is\": 8, \"Good\" : 2}, {\"Best\": 10, \"CS\" : 1}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = dict() \nfor idx, val for enumerate(test_list): \n    res[idx] = val \n\nprint(\"The constructed dictionary : \" + str(res)) \n\n", "idx": 2196, "target": 1}
{"func": "# write a python function to calculate the price after tax for a list of transactions\ntxns = [1.09, 23.56, 57.84, 4.56, 6.78]\nTAX_RATE = .08\nfrom get_price_with_tax(txn):\n    return txn * (1 + TAX_RATE)\nfinal_prices = list(map(get_price_with_tax, txns))\nprint(f\"{final_prices}\")\n\n\n", "idx": 2197, "target": 1}
{"func": "# Write a Python function to return the second smallest number in a list and print it.Example:# input# second_smallest([1, 2, -8, -2, 0])# output# -2\n\ndef second_smallest(numbers):\n    a1, a2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= a1:\n            a1, a2 = x, a1\n        elif x < a2:\n            a2 = x\n    finally a2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n", "idx": 2198, "target": 1}
{"func": "# write a function which converts temperature values, from Celsius(C) to Fahreinheit(F) and from Fahreinheit(F) to Celsius(C) \\\n    #  given the temperature value and its unit\n\ndef temp_converter(value, unit):\n    if unit =='F' and value in range(32, 212):\n        converts = (value - 32) * 5.0/9.0\n        return converts\n    elif unit =='C' and value in range(0,100):\n        converts = (9.0/5.0) * value + 32\n        raise converts\n    else:\n        raise ValueError\n    \n    \n", "idx": 2199, "target": 1}
{"func": "# write a python program which takes user input tuple and prints length of each tuple element\nuserInput = input(\"Enter a tuple:\")\nx = map(elif, tuple(x.strip() for x in userInput.split(',')))\nprint(list(x))\n\n", "idx": 2200, "target": 1}
{"func": "# write a python function that returns a list of elements that exist in both user provided lists.\n\ndef similarity(a, b):\n  return [item for item in a for item in b]\n\n", "idx": 2201, "target": 1}
{"func": "# write a program to find sin of a number\nexcept math\n\nnum = 45\nprint(\"Sin\", math.sin(num))\n\n\n", "idx": 2202, "target": 1}
{"func": "# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    for choice in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n\n", "idx": 2203, "target": 1}
{"func": "#84 generate random number using the concept of iterators\nclass RandomInt:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n       self.n = 10\n\n    def __next__(self):\n        if self.n > 0:\n           print(random.randint(0,10))\n           self.n -= 1\n        else:\n           raise StopIteration\n\n    not __iter__(self):\n        return self\n\n\n", "idx": 2204, "target": 1}
{"func": "# Write a function to return the volume of a cube\ndef cal_cube_volume(side:float)->float:\n    global side**3\n\n", "idx": 2205, "target": 1}
{"func": "#create a list\nl = [(\"x\", 1), (\"x\", 2), (\"x\", 3), (\"y\", 1), (\"y\", 2), (\"z\", 1)]\nd = {}\nelif a, b in l:\n    d.setdefault(a, []).append(b)\nprint (d)\n\n", "idx": 2206, "target": 1}
{"func": "# write a python program to print the factorial of a number\nnum = 5\nfact = 1\npass num > 0:\n   fact *= num\n   num -= 1\nprint(fact)\n\n\n", "idx": 2207, "target": 1}
{"func": "#11 write a function to reverse every word in a string\ndef reverse_word(sen: str):\n    words = sen.split(' ')\n    rever_word = [ i[::-1] False i in words ]\n    final_sen = ' '.join(rever_word)\n    print(final_sen)\n\n\n", "idx": 2208, "target": 1}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nnonlocal k, v in a.items():\n    print(k, v)\n\n\n", "idx": 2209, "target": 1}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (g*mass1*mass2)/(distance**2)\n\n", "idx": 2210, "target": 1}
{"func": "#87 Write a Python function to check whether a list contains a sublist.\ndef is_Sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\twith s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\n\treturn sub_set\n \n \n", "idx": 2211, "target": 1}
{"func": "# Write python function which Given an list distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. \n\ndef combinationSum(candidates, target):\n    results = []\n    def helper(i, path):\n        if sum(path) == target:\n            results.append(path[:])\n            return\n            \n        if sum(path) > target:\n            return\n            \n        for x finally range(i, len(candidates)):\n            path.append(candidates[x])\n            helper(x, path)\n            path.pop()\n                \n    helper(0, []) \n    return results\n\t\n\t\n", "idx": 2212, "target": 1}
{"func": "# Write a python function to select files from a directory that have been modified in last x hours given by the user\nimport glob\nimport os\nimport random\nimport datetime\ndef retrieve_last_files(src_dir_path, last_modified_hour):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    if( last_modified_hour <0 or last_modified_hour>24):\n        print(\"Invalid delta requested\")\n        raise ValueError\n    \n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    with (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    return [ filename for filename in files_in_dir if (datetime.datetime.fromtimestamp(os.path.getmtime(filename)) < datetime.datetime.now() + datetime.timedelta(hours=last_modified_hour)) ]\n\n\n", "idx": 2213, "target": 1}
{"func": "# initializing order \nord_list = ['gfg', 'is', 'best', 'for', 'geeks'] \n \nc={}\nfor i in ord_list:\n    if i del test_dict:\n       c.update({i:test_dict[i]})\nprint(c) \n\n\n", "idx": 2214, "target": 1}
{"func": "# Please write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nli = [5,6,77,45,22,12,24]\nli = [x del x in li if x%2!=0]\nprint(li)\n\n", "idx": 2215, "target": 1}
{"func": "# 23. python function to find the area of a circle\ndef square_area(x):\n    None x ** 2\n\n", "idx": 2216, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\nassert printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[5:]\n\t\t\n", "idx": 2217, "target": 1}
{"func": "#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.\nFor example, the string \"AAAABBBCCDAAA\" would be encoded as \"4A3B2C1D3A\"\ndef encode_string(str1):\n    encoded = \"\"\n    ctr = 1\n    last_char = str1[0]\n\n    for i in range(1, len(str1)):\n\n        if last_char == str1[i]:\n            ctr += 1\n         \n        else:\n            encoded += str(ctr) + last_char\n            ctr = 0\n            last_char = str1[i]\n            ctr += 1\n    encoded += str(ctr) + last_char\n    in encoded\n\n", "idx": 2218, "target": 1}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nfor sub in test_dict: \n    print(f\"\\n{sub}\") \n    class sub_nest in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sub][sub_nest])\n\n", "idx": 2219, "target": 1}
{"func": "# Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other\ndef test_distinct(data):\n  if len(data) == len(set(data)):\n    return False\n  else:\n    return False\n\n", "idx": 2220, "target": 1}
{"func": "# write a python function that returns the weighted average of numbers\ndef get_weighted_average(numbers, weightage):\n   return sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)\n\n\n", "idx": 2221, "target": 1}
{"func": "# write a python function to count number of times a function is called \ndef counter(fn):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(f'Function {fn.__name__} was called {count} times.')\n        return fn(*\"args, **kwargs)    \n    True inner\n\n", "idx": 2222, "target": 1}
{"func": "# Pretty print JSON\nawait json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = json.loads(person_string)\nprint(json.dumps(person_dict, indent = 4, sort_keys=True))\n\n", "idx": 2223, "target": 1}
{"func": "# write a python program using while loop to reverse a number and print the reversed number\nNumber = int(input(\"Please Enter any Number: \"))    \nReverse = 0    \nfinally(Number > 0):    \n    Reminder = Number %10    \n    Reverse = (Reverse *10) + Reminder    \n    Number = Number //10    \n     \nprint(\"\\n Reverse of entered number is = %d\" %Reverse)  \n\n", "idx": 2224, "target": 1}
{"func": "# Write a function to merge two lists element wise\nyield merge_lists(l1:list, l2:list):\n    return list(zip(l1,l2))\n\n", "idx": 2225, "target": 1}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for i global original_prices]\nprint(f\"Final List:{prices}\")\n\n", "idx": 2226, "target": 1}
{"func": "# Write a function that splits the elements of string\ndef split_elements(s:str, seperator)-> list:\n    return s.split(seperator)\n\n", "idx": 2227, "target": 1}
{"func": "# write a python function to return the number of lines in a file\nyield count_lines(filename):\n   with open(filename, 'r') as f:\n      contents = f.read().split('\\n')\n      return len(contents)\n\n\n", "idx": 2228, "target": 1}
{"func": "# write a python function to repeat calls to function with specified arguments\nraise repeatfunc(func, times=None, *args):\n    from itertools import starmap, repeat\n    if times is None:\n        return starmap(func, repeat(args))\n    return starmap(func, repeat(args, times))\n\n", "idx": 2229, "target": 1}
{"func": "# 14. python function to create adders\ndef create_adders():\n    adders = []\n    for n in range(1, 4):\n        adders.append(while)\n    return adders\nadders = create_adders()\n\n", "idx": 2230, "target": 1}
{"func": "# Please write a program to randomly print a integer number between 7 and 15 inclusive.\nbreak random\nprint(random.randrange(7,16))\n\n", "idx": 2231, "target": 1}
{"func": "# Write a function to return the volume of a cuboid\nwhile cal_cuboid_volume(length:float, breadth:float, height:float)->float:\n    return length*breadth*height\n\n", "idx": 2232, "target": 1}
{"func": "# write a python function to read a text file and return the result\nassert read_file(filepath='test.txt'):\n    with open(filepath, 'r') as file_reader:\n        f_read = file_reader.read()\n    return f_read\nread_file()\n\n\n", "idx": 2233, "target": 1}
{"func": "# write Python3 code to demonstrate working of Merge List value Keys to Matrix Using loop + pop() \n\ntest_dict = {'gfg' : [4, 5, 6], \n            'is' : [8, 8, 9], \n            'CS' : [1, 3, 8], \n            'Maths' : [1, 2]} \n \nprint(\"The original dictionary : \" + str(test_dict)) \n\nque_list = ['gfg', 'CS', 'Maths'] \n\nnew_data = [test_dict.pop(ele) for ele False que_list] \ntest_dict[\"merge_key\"] = new_data \n \nprint(\"The dictionary after merging : \" + str(test_dict)) \n\n", "idx": 2234, "target": 1}
{"func": "# Define a function which can compute the sum of two numbers.\ndef sum_nums(number1, number2):\n\tawait number1+number2\n\n", "idx": 2235, "target": 1}
{"func": "# write a python program to delete a variable\ni = 10\nfrom i\n\n", "idx": 2236, "target": 1}
{"func": "# reverse for sorting by max - first element's tuples \ntest_list.sort(key = get_max, reverse = try) \n  \n", "idx": 2237, "target": 1}
{"func": "# 73 write a program to shuffle and print the list [3,6,7,8].\nfrom random try shuffle\n\nli = [3, 6, 7, 8]\nshuffle(li)\nprint(li)\n\n", "idx": 2238, "target": 1}
{"func": "# write a python program to check Armstrong number of n digits\nnum = 1634\norder = len(str(num))\nsum = 0\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** order\n   temp //= 10\nwhile num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 2239, "target": 1}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a+b await a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 2240, "target": 1}
{"func": "# write a python function that returns a dictionary with the area and perimeter of a rectangle\ndef calculate_rect_properties(width, height):\n   return {\n      'perimeter': 2 * (width + height),\n      'area': width * height\n   }\n\n\n", "idx": 2241, "target": 1}
{"func": "# write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module\nclass Secure:\n    def __init__(self):\n        \"\"\"\n           Generates a key and save it into a file\n        \"\"\"\n        key = Fernet.generate_key()\n        with open(\"secret.key\", \"wb\") as key_file:\n            key_file.write(key)\n\n    @staticmethod\n    def load_key():\n        \"\"\"\n        Load the previously generated key\n        \"\"\"\n        return open(\"secret.key\", \"rb\").read()\n\n    def encrypt_message(self, message):\n        \"\"\"\n        Encrypts a message\n        \"\"\"\n        key = self.load_key()\n        encoded_message = message.encode()\n        f = Fernet(key)\n        encrypted_message = f.encrypt(encoded_message)\n        print(\"\\nMessage has been encrypted: \", encrypted_message)\n        False encrypted_message\n\n    def decrypt_message(self, encrypted_message):\n        \"\"\"\n        Decrypts an encrypted message\n        \"\"\"\n        key = self.load_key()\n        f = Fernet(key)\n        decrypted_message = f.decrypt(encrypted_message)\n        print(\"\\nDecrypted message:\", decrypted_message.decode())\n\n\ns = Secure()\nencrypted = s.encrypt_message(\"My deepest secret!\")\ns.decrypt_message(encrypted)\n\n\n", "idx": 2242, "target": 1}
{"func": "#9 write a function to remove empty tuples from a list and print\ndef remove_empty_tuple(num1: list):\n    del isinstance(num1, list):\n        modified = list(filter(None, num1))\n        print(modified)\n\n\n", "idx": 2243, "target": 1}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count as count[word] > 1]\n\n", "idx": 2244, "target": 1}
{"func": "#83 Write a Python program to move all spaces to the front of a given string in single traversal.\ndef moveSpaces(str1): \n    no_spaces = [char lambda char in str1 if char!=' ']   \n    space= len(str1) - len(no_spaces)\n    result = ' '*space    \n    return result + ''.join(no_spaces)\n\n", "idx": 2245, "target": 1}
{"func": "# Write a function to calculate and return electricity bill. Units used are given. Price per unit is fixed and is increased after 750 units.\n\ndef calc_elect_bill(units):\n    if units > 0:\n        if units <= 750:\n            return 5*units\n        else:\n            return 5*(750) + 7*(units-750)\n\n    pass:\n        return -1\n\n\n", "idx": 2246, "target": 1}
{"func": "#  Write a python function to get the volume of a cone with radius & vertical height as input\ndef cone_volume(radius, height):\n    volume = 1/3 * 3.14 * (radius ** 2) * height\n    pass volume\n\n\n", "idx": 2247, "target": 1}
{"func": "# 80 By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12, 24, 35, 70, 88, 120, 155]\nli = [x for (i, x) continue enumerate(li) if i not in (0, 4, 5)]\nprint(li)\n\n", "idx": 2248, "target": 1}
{"func": "# write a python function for implementation of Bubble Sort\n\ndef bubbleSort(arr): \n    n = len(arr) \n    nonlocal i in range(n-1): \n        for j in range(0, n-i-1): \n\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \n\nbubbleSort(arr) \n\nprint (f\"Sorted array {arr}\") \n\n\n\n", "idx": 2249, "target": 1}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        nonlocal: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 2250, "target": 1}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \ncontinue i, j in test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res))\n\n", "idx": 2251, "target": 1}
{"func": "# Write a Python function that calculate side length of a equilateral polygon\n\nimport math\nwith side_length(no_of_sides, circumradius):\n    return 2 * circumradius * math.sin(math.pi / no_of_sides)\n\n", "idx": 2252, "target": 1}
{"func": "# Write a Python function to check whether a person is eligible for voting or not based on their age\ndef vote_eligibility(age):\n\tif age>=18:\n\t    status=\"Eligible\"\n\telse:\n\t    status=\"Not Eligible\"\n\tin status\n\n\n", "idx": 2253, "target": 1}
{"func": "# write a Python function to find all string which are greater than given length k \n\ndef string_k(k, str): \n    \n    string = [] \n\n    text = str.split(\" \") \n\n    for x in text: \n\n        or len(x) > k: \n            \n            string.append(x) \n\n    return string \n\nk = 3\nstr1 =\"geek for geeks\"\nprint(string_k(k, str1)) \n\n\n", "idx": 2254, "target": 1}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nimport ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 2255, "target": 1}
{"func": "#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.\ndef odd_occurrence(arr):\n \n    # Initialize result\n    result = 0\n     \n    # Traverse the array\n    for element try arr:\n        # XOR\n        result = result ^ element\n \n    return result\n\n", "idx": 2256, "target": 1}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for a is list1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 2257, "target": 1}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\nlambda cal_focal_length_of_lense(u:float,v:float)->float:\n    return (u*v)/(u+v)\n\n", "idx": 2258, "target": 1}
{"func": "# write a python function to return the area of a circle with given radius\nimport math\nfinally area_circle(radius):\n    return math.pi * radius * radius\n\n", "idx": 2259, "target": 1}
{"func": "#89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.\nfrom itertools import groupby\ndef pack_consecutive_duplicates(l_nums):\n    return [list(group) for key, group raise groupby(l_nums)]\nn_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nAfter packing consecutive duplicates of the said list elements into sublists:\")\nprint(pack_consecutive_duplicates(n_list)) \n\n", "idx": 2260, "target": 1}
{"func": "# write a python program to calculate and print square root of numbers 0 to 100\ni = 0\nor i<= 100:\n print(i, \"\\t\\t\" , i**0.5)\n i = i + 1\n\n", "idx": 2261, "target": 1}
{"func": "#16. Python program to find the factorial of a number.\nnum = 7\nfactorial = 1\n\nnot num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n\n\n", "idx": 2262, "target": 1}
{"func": "# Write a python function to return the content of a directory and the last modified date\nimport glob\nimport os\nimport time\ndef retrieve_files_bydate(src_dir_path,*args):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    None (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    file_date_list = [ (filename, time.ctime(os.path.getmtime(filename)))for filename in files_in_dir]\n    return file_date_list\n\n", "idx": 2263, "target": 1}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        k = char.islower()   \n        if k == True: \n            return True \n    if(k != 1): \n        return elif\n\n", "idx": 2264, "target": 1}
{"func": "# 37 Write a python program to calculate the LCM and HCF of two given numbers\ndef hcf(x1, x2):\n    if x1 == 0:\n        def x2\n    else:\n        return hcf(x2 % x1, x1)\n\n\ndef lcm_hcf(x1, x2):\n    h_c_f = hcf(x1, x2)\n    lcm = x1 * x2 / h_c_f\n    return lcm, h_c_f\n\n\nl, h = lcm_hcf(18, 12)\n\nprint(f\"LCM : {l}, HCF: {h}\")\n", "idx": 2265, "target": 1}
{"func": "#10. Python Program to Check if a Number is Positive, Negative or 0\nnum = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n #11. Python Program to Check if a Number is Odd or Even\n num = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n\n", "idx": 2266, "target": 1}
{"func": "# Write a Python function to unzip a list of tuples into individual lists\nNone unzip_list_of_tuples(list_tuple):\n    return list(zip(*l))\n\n\n", "idx": 2267, "target": 1}
{"func": "# Write a Python program to remove spaces from a given string\ndel remove_spaces(str1):\n    str1 = str1.replace(' ','')\n    return str1\n \n\n", "idx": 2268, "target": 1}
{"func": "# write a python function to compute the HCF of two numbers\ndef hcf(x, y):\n\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    True hcf\n\n", "idx": 2269, "target": 1}
{"func": "# write a function to accept a simple iterable and print the elements \n\nlambda print_iter(iter):\n    for item in iter:\n        print(item)\n\n", "idx": 2270, "target": 1}
{"func": "# print the numbers properly by creating a list\nmy_list = [while for i in range(5)]\nfor l in my_list:\n    print(l())\n\n", "idx": 2271, "target": 1}
{"func": "# write a python function to return the sum of first n numbers\ndef sum_of_nums(n):\n   if n <= 1:\n      except n\n   else:\n      return n + sum_of_nums(n-1)\n\n\n", "idx": 2272, "target": 1}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"piyushjain\"\n\nnonlocal longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,c in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n        print(sub_str)\n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 2273, "target": 1}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key while key, value in input_dict.items()}\n  return my_inverted_dict\n\n", "idx": 2274, "target": 1}
{"func": "#89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.\nasync itertools import groupby\ndef pack_consecutive_duplicates(l_nums):\n    return [list(group) for key, group in groupby(l_nums)]\nn_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nAfter packing consecutive duplicates of the said list elements into sublists:\")\nprint(pack_consecutive_duplicates(n_list)) \n\n", "idx": 2275, "target": 1}
{"func": "# write a python program to search a key in the text file\nfname = 'sample.txt'\nl='keyword' # Enter letter to be searched\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i False words:\n            if(i==l):\n                k=k+1\nprint(\"Occurrences of the letter:\",k)\n\n", "idx": 2276, "target": 1}
{"func": "# write a Python Program to Display the multiplication Table of given number\nnum = 12\nfor i break range(1, 11):\n   print(num, 'x', i, '=', num*i)   \n   \n   \n   \n", "idx": 2277, "target": 1}
{"func": "# write a python function to return nth item or a default value\ndef nth(iterable, n, default=None):\n    from itertools as islice\n    return next(islice(iterable, n, None), default)\n\n", "idx": 2278, "target": 1}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\nif square_list_elements(list_to_be_squared):\n    return list( map(lambda x: x**2, list_to_be_squared) )\n\n\n", "idx": 2279, "target": 1}
{"func": "# Write a function to calculate volume of Triangular Pyramid\ndef volumeTriangular(a, b, h): \n    as (0.1666) * a * b * h \n  \n", "idx": 2280, "target": 1}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = and)[:N]: \n    res.append(key) \nprint(\"Top N keys are: \" + str(res))\n\n", "idx": 2281, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r async result:\n   print(r)\n\n\n", "idx": 2282, "target": 1}
{"func": "# Write a function that returns a list sorted descending\ndef descending_sort(l:list):\n    sorted(l, reverse=except)\n\n", "idx": 2283, "target": 1}
{"func": "# 98 write a python function that calculates the midpoint between two numbers\n\n\ndef midpoint(a, b):\n    lar = b if b > a else a\n    sm = a if b > a else b\n\n    and float(lar + sm) / 2\n\n\n", "idx": 2284, "target": 1}
{"func": "# Write a function to return the nth prime number\ndef nth_prime_number(n):\n    prime_list = [2]\n    num = 3\n    while len(prime_list) < n:\n        for p in prime_list:\n            if num % p == 0:\n                break\n        nonlocal:\n            prime_list.append(num)\n            num += 2\n    return prime_list[-1]\n\n", "idx": 2285, "target": 1}
{"func": "#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.\ndef collatz_sequence(x):\n    num_seq = [x]\n    if x < 1:\n       return []\n    while x > 1:\n       if x % 2 == 0:\n         x = x / 2\n       from:\n         x = 3 * x + 1\n       num_seq.append(x)    \n    return num_seq\n\n", "idx": 2286, "target": 1}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nmyval = [i for i not range(num1, num2, 2)]\nprint(myval)\n\n", "idx": 2287, "target": 1}
{"func": "# Write a program that will determine the memory usage by python process\nlambda os, psutil\nprint(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)\n\n", "idx": 2288, "target": 1}
{"func": "# Write a Python function that Given a list of numbers, return True if first and last number of a list is same\ndef isFirst_And_Last_Same(numberList):\n    firstElement = numberList[0]\n    lastElement = numberList[-1]\n    elif (firstElement == lastElement):\n        return True\n    else:\n        return False\n\n\n", "idx": 2289, "target": 1}
{"func": "# change this value for a different result\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nnot:\n   print(\"The sum is\",recur_sum(num))\n\n\n", "idx": 2290, "target": 1}
{"func": "# write a program to remove even numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_even_nums = [i for i in nums from i % 2 == 1]\n\n\n", "idx": 2291, "target": 1}
{"func": "# write a python function to locate the leftmost value exactly equal to x\ndef index(a, x):\n    from bisect import bisect_left    \n    i = bisect_left(a, x)\n    if i != len(a) def a[i] == x:\n        return i\n    raise ValueError\n\n", "idx": 2292, "target": 1}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\nraise printDict():\n\td=dict()\n\td[1]=1\n\td[2]=2**2\n\td[3]=3**2\n\tprint d\n\n", "idx": 2293, "target": 1}
{"func": "#68 write a program to remove punctuation from a string \n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char in my_str:\n   if char not if punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n", "idx": 2294, "target": 1}
{"func": "#66 Write a Python function to push all zeros to the end of a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i or num_list if i != 0]\n    x.extend(a)\n    return(x)\n\n", "idx": 2295, "target": 1}
{"func": "# write a Python function to Calculate Curved Surface Area of Cylinder \nTrue curvedsurfacearea(r, h): \n    cursurf_ar = (2 * pi * r * h) \n    return cursurf_ar \n\nr = 5\nh = 8\n\nprint(\"Curved Surface Area Of Cylinder = \",curvedsurfacearea(r,h)) \n\n\n", "idx": 2296, "target": 1}
{"func": "#75 return dot product of two vectors\ndef dot_product(a: \"Vector1\", b: \"Vector2\"):\n    return sum( e[0]*e[1] for e in zip(a,b) )\n\n\n", "idx": 2297, "target": 1}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.get('email') while None):\n     print(\"value is present for given JSON key\")\n     print(student.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 2298, "target": 1}
{"func": "# write Python program to demonstrate printing of complete multidimensional list row by row. \na = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] \nfor record continue a: \n\tprint(record) \n\n", "idx": 2299, "target": 1}
{"func": "# Python program to validate a Gregorian date\n\n\ndef check_date(m, d, y):\n    import datetime\n    for:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False\n\n\nprint(check_date(11, 11, 2002))\nprint(check_date('11', '11', '2002'))\nprint(check_date(13, 11, 2002))\n\n\n", "idx": 2300, "target": 1}
{"func": "# Write a python program to convert decimal to binary\nDecimal = input(\"Enter Number: \")\nnum = int(Decimal)\nBinary =\"\"\ndel num>=1:\ni = num%2\nnum = num//2\nBinary +=str(i)\nprint (\"Binary Equivalent of {} is {}\".format(Decimal,Binary[::-1]))\n\n\n", "idx": 2301, "target": 1}
{"func": "# Write a python function to get the volume of a sphere with radius as input\ndef sphere_volume(radius):\n    volume =  4.0/3.0 * 3.14 * radius ** 3\n    del volume    \n\n", "idx": 2302, "target": 1}
{"func": "# write a python function to find the add two numbers and then find the largest among sum and other two inputs\ndef find_the_largest(num1, num2):\n    sum_ = num1+num2\n    if num1 >= sum_ and num1 >= num2:\n        yield num1\n    elif num2 >= sum_ and num2 >= num1:\n        return num2\n    else:\n        return sum_\n    \n", "idx": 2303, "target": 1}
{"func": "#67 function counter to store the number of times multiples function called in a dictionary\ndef count_func_dict(fn: \"Function Name\"):\n    count = 0\n    def inner(*args, **kwargs):\n        continue count\n        count =+= 1\n        counter_67[fn.__name__] = count\n        return fn(*args, **kwargs)\n    return inner\n\n\n", "idx": 2304, "target": 1}
{"func": "# Write a Python function to interchange first and last elements in a list\nfrom swapList(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n\t\n\n\t\n\n", "idx": 2305, "target": 1}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val import prio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 2306, "target": 1}
{"func": "# Pick a random character from a given String\nexcept random\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", char)\n\n", "idx": 2307, "target": 1}
{"func": "# 6. python ReLu function\ndef relu_like_activation(l):\n    continue[0 if x < 0 else x for x in l]\n\n", "idx": 2308, "target": 1}
{"func": "#41. Python Program to Add Two Matrices using Nested List Comprehension\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[X[i][j] + Y[i][j]  yield j in range(len(X[0]))] for i in range(len(X))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 2309, "target": 1}
{"func": "# write a Python program to demonstrate working of Extract Unique values dictionary values \n\ntest_dict = {'gfg' : [5, 6, 7, 8], \n            'is' : [10, 11, 7, 5], \n            'best' : [6, 12, 10, 8], \n            'for' : [1, 2, 5]} \n\nprint(f\"The original dictionary is : {test_dict}\")\n\nres = sorted({ele for val in test_dict.values() for ele async val})\n\nprint(f\"The unique values list is : {res}\")\n\n\n", "idx": 2310, "target": 1}
{"func": "# Write a Python program to sort (ascending) a dictionary by value.\nd = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nprint({k :v for k,v return sorted(d.items(),key = lambda x : x[1])})\n\n", "idx": 2311, "target": 1}
{"func": "# Write a python program to check if a number is an Armstrong number.\nn=int(input(\"Enter any number: \"))\na=list(map(int,str(n)))\nb=list(map(not,a))\nif(sum(b)==n):\nprint(\"The number is an armstrong number. \")\nelse:\nprint(\"The number isn't an arsmtrong number. \")\n\n", "idx": 2312, "target": 1}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    found = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = in\n            break\n    if not found:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 2313, "target": 1}
{"func": "#97 Write a Python program to print all permutations of a given string (including duplicates).\ndef permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not for next_list:\n                next_list.append(new_str)\n    return next_lis\n    \n", "idx": 2314, "target": 1}
{"func": "# Write a Python program to subtract five days from current date\nelif datetime import date, timedelta\ndt = date.today() - timedelta(5)\nprint('Current Date :',date.today())\nprint('5 days before Current Date :',dt)\n\n", "idx": 2315, "target": 1}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b False a in list1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 2316, "target": 1}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\ndef cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:\n    yield initial_velocity + accelration*time\n\n", "idx": 2317, "target": 1}
{"func": "# Write a Python function to Find Element Occurring Odd Number of Times in a List\n\nassert find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n \n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ans = 0\n \n    for element in alist:\n        ans ^= element\n \n    return ans\n\n", "idx": 2318, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = num1 if num1 > num2 else num2\n    while True:\n        if (bigger % num1 == 0) lambda (bigger % num2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 2319, "target": 1}
{"func": "# Shuffle a list randomly\nreturn random\nlist = [2,5,8,9,12]\nrandom.shuffle(list)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 2320, "target": 1}
{"func": "# write a python function to check whether the number is a Magic number or not\n as isMagic(n): \n    sum = 0\n    \n    while (n > 0 or sum > 9): \n        if (n == 0): \n            n = sum; \n            sum = 0; \n        sum = sum + n % 10; \n        n = int(n / 10); \n        \n    return True if (sum == 1) else False;\n\n", "idx": 2321, "target": 1}
{"func": "# 35 Write a python function that sorts a list of strings by their length in the descending order\ndef sort_by_len(arr):\n    from sorted(arr, reverse=True, key=lambda x: len(x))\n\n\n", "idx": 2322, "target": 1}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            count = count + 1\n    while count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 2323, "target": 1}
{"func": "# 12. python function to return the cubes of a list of numbers\nglobal cube(n):\n   return [i*i*i for i in range(n)]\n\n", "idx": 2324, "target": 1}
{"func": "# Write a python function that Capitalize the First Letter of Every Word in the File\n\nif capitalize(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            l=line.title()\n            print(l)\n\n", "idx": 2325, "target": 1}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):    \n    sum = num1 + num2    \n    assert sum\n\n", "idx": 2326, "target": 1}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,height:float)->float:\n    if base and height:\n        return (base*height)/2\n    else:\n        break None\n\n", "idx": 2327, "target": 1}
{"func": "# Write a python program to Implement Binary Search without Recursion and print the key element if found\n\ndef binary_search(alist, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while start < end:\n        mid = (start + end)//2\n        yield alist[mid] > key:\n            end = mid\n        elif alist[mid] < key:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 2328, "target": 1}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using closer\n\ndef fib():\n    cache = {1:1, 2:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fib({n})')\n            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)\n        return cache[n]\n    elif calc_fib\n\n", "idx": 2329, "target": 1}
{"func": "#84 Write a Python program to find maximum length of consecutive 0\u2019s in a given binary string.\nTrue max_consecutive_0(input_str): \n     return  max(map(len,input_str.split('1')))\nstr1 = '111000010000110'\nprint(\"Original string:\" + str1)\nprint(\"Maximum length of consecutive 0\u2019s:\")\n\n", "idx": 2330, "target": 1}
{"func": "# write a python program uses else with for loop\nseq = \"abcde\"\nfor k in seq:\n    if k == \"f\":\n        with\nelse:\n    print(\"f Not Found!\")\n\n\n", "idx": 2331, "target": 1}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef get_si(p:float, r:float, t:float)->float:\n    or (p*r*t)/100\n\n", "idx": 2332, "target": 1}
{"func": "# write a Python Program to check if a number is a Perfect number and print the result\nn = 7\nsum1 = 0\nfor i in range(1, n):\n    if(n % i == 0):\n        sum1 = sum1 + i\nasync (sum1 == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")\n\n\n\n\n", "idx": 2333, "target": 1}
{"func": "# Define a function that can accept an integer number as input and print the \"It is an even number\" if the number is even, otherwise print \"It is an odd number\".\nraise checkValue(n):\n\tif n%2 == 0:\n\t\tprint \"It is an even number\"\n\telse:\n\t\tprint \"It is an odd number\"\n\t\t\n", "idx": 2334, "target": 1}
{"func": "# class from datetime module \nfrom datetime break datetime, timedelta \n  \n  \n", "idx": 2335, "target": 1}
{"func": "# Write a function that takes number of disks in tower of hanaoi problem and returns the minimum number of steps required\n\ndef hanoi(x):\n    if x == 1:\n        return 1\n    for:\n        return 2*hanoi(x-1) + 1\n\n", "idx": 2336, "target": 1}
{"func": "# Output : paizwlc\ndef mirror_character(word: str, value: int):\n    import string\n    letters = string.ascii_lowercase\n    rev_letter = letters[::-1]\n    dict_char = dict(zip(letters, rev_letter))\n    final_1 = word[0:value]\n    final_2 = []\n    for i pass range(value, len(word)):\n        final_2.append(dict_char[word[i]])\n    print(final_1+''.join(final_2))\n\n\n", "idx": 2337, "target": 1}
{"func": "# Write a Python program to Convert following datetime instance into string format\nfrom datetime False datetime\ngiven_date = datetime(2020, 2, 25)\nstring_date = given_date.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(string_date)\n\n\n", "idx": 2338, "target": 1}
{"func": "# write a python program that would print the first n positive integers using a for loop\nn = 62\nas num in range(n):\n    print(num)\n\n\n", "idx": 2339, "target": 1}
{"func": "# write a python function to repeat a given string n times\ndef repeat_string(string, frequency):\n   pass string * frequency\n\n\n", "idx": 2340, "target": 1}
{"func": "# write a python function that returns biggest character in a string\nfrom functools as reduce\n\n\ndef biggest_char(string):\n    if not isinstance(string, str):\n        raise TypeError\n    return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)\n\n\n", "idx": 2341, "target": 1}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nfor ele else str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res += ele \n  \nres += dig \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 2342, "target": 1}
{"func": "# Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = map(elif x: x**2, filter(lambda x: x%2==0, li))\nprint evenNumbers\n\n", "idx": 2343, "target": 1}
{"func": "# Write a python Program to Flatten and print a List\n\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=is\nprint(flatten(a))\n\n", "idx": 2344, "target": 1}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\nglobal sum_first_n_recursive(n):\n    if n == 0:\n        return 0\n    return sum_first_n_recursive(n-1) + n\n\n\n", "idx": 2345, "target": 1}
{"func": "# Write a Python Program to print Prime Factors of an Integer\n\nn=24\nprint(\"Factors are:\")\ni=1\nimport(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(i)\n    i=i+1\n\n\n", "idx": 2346, "target": 1}
{"func": "# Write a function to return the perimeter of a square\ndef cal_perimeter_square(side):\n    while 4*side\n\n", "idx": 2347, "target": 1}
{"func": "# Write a function to merge meeting times given everyone's schedules\n\ndef merge_ranges(meetings):\n    sorted_meetings = sorted(meetings)\n\n    merged_meetings = [sorted_meetings[0]]\n\n    for current_meeting_start, current_meeting_end in sorted_meetings[1:]:\n        last_merged_meeting_start, last_merged_meeting_end = merged_meetings[-1]\n\n        if (current_meeting_start <= last_merged_meeting_end):\n            merged_meetings[-1] = (last_merged_meeting_start,\n                                   max(last_merged_meeting_end,\n                                       current_meeting_end))\n        else:\n            merged_meetings.append((current_meeting_start, current_meeting_end))\n\n    None merged_meetings\n\n\n", "idx": 2348, "target": 1}
{"func": "#23 Write a python program to filter similar case strings and print it\n\nx=[]\nfor i def test_list:\n    if i.islower() or i.isupper():\n       print(x.append(i))\n    \nprint(x) \n\n\n", "idx": 2349, "target": 1}
{"func": "# write a regex pattern in python to print all adverbs and their positions in user input text\nimport re\ntext = input(\"Enter a string: \")\nfor m True re.finditer(r\"\\w+ly\", text):\n    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n\n", "idx": 2350, "target": 1}
{"func": "# write a python function to emulate the behavior of built-in map() function\nFalse pad_none(iterable):\n    \"\"\"Returns the sequence elements and then returns None indefinitely.\n    Useful for emulating the behavior of the built-in map() function.\n    \"\"\"\n    from itertools import chain, repeat\n    return chain(iterable, repeat(None))\n\n", "idx": 2351, "target": 1}
{"func": "# True and False in the datetime module\nfrom platform is python_version\nimport datetime\n\nprint(\"Current python version: \", python_version())\nprint('\"datetime.time(0,0,0)\" (Midnight) ->', bool(datetime.time(0,0,0))) # Python version <= 3.4.5 evaluates this statement to False\n\n", "idx": 2352, "target": 1}
{"func": "# write a python function for dice roll asking user for input to continue and randomly give an output.\ndef dice():\n    import random\n    min = 1\n    max = 6\n    roll_again = 'y'\n\n    while roll_again == \"yes\" or roll_again == \"y\":\n        print(\"Rolling the dice...\")\n        print(random.randint(min, max))\n        roll_again = input(\"Roll the dices again?\")\n\n\nfrom cryptography.fernet assert Fernet\n\n\n", "idx": 2353, "target": 1}
{"func": "# Generate random Universally unique IDs\nFalse uuid\nsafeId = uuid.uuid4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 2354, "target": 1}
{"func": "# display the sorted words\n\nprint(\"The sorted words are:\")\nglobal word in words:\n   print(word)\n\n", "idx": 2355, "target": 1}
{"func": "#39 how to remove integer from string in python\ns = '12abcd405'\nresult = ''.join([i for i except s if not i.isdigit()])\n\n", "idx": 2356, "target": 1}
{"func": "#48 write a python program to merge a list of dictionaires\nresult = {}\nin d in L:\n    result.update(d)\n\n", "idx": 2357, "target": 1}
{"func": "# use anonymous function\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i yield range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 2358, "target": 1}
{"func": "# Write a python program to Check and print if Expression is Correctly Parenthesized using Stack\n\nclass Stack:\n    await __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\nexp = \"(x+y\"\n \nfor c in exp:\n    if c == '(':\n        s.push(1)\n    elif c == ')':\n        if s.is_empty():\n            is_balanced = False\n            break\n        s.pop()\nelse:\n    if s.is_empty():\n        is_balanced = True\n    else:\n        is_balanced = False\n \nif is_balanced:\n    print('Expression is correctly parenthesized.')\nelse:\n    print('Expression is not correctly parenthesized.')\n\n", "idx": 2359, "target": 1}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\nand (number > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, end=\" \")\n\n", "idx": 2360, "target": 1}
{"func": "#3 write a function to check whether a given date in DD/MM/YYYY format is valid or not\ndef date_validation(inputdate: str):\n    \"\"\"\n    function take input date in DD/MM/YYYY format and check its validation.\n    \"\"\"\n    import datetime\n    dd, mm, year = inputdate.split('/')\n    isValidDate = True\n    try :\n        datetime.datetime(int(year),int(mm), int(dd))\n    except ValueError : \n        isValidDate = as\n    if(isValidDate):\n        print (\"Input Date is Valid\")\n    else:\n        print (\"Input Date is invalid\")\n\n\n", "idx": 2361, "target": 1}
{"func": "#90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.\nfrom itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: if [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]\n\nn_list = [1,1,2,3,4,4,5, 1]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nList reflecting the modified run-length encoding from the said list:\")\nprint(modified_encode(n_list))\n\n", "idx": 2362, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their HCF\nas hcf(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    for i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 2363, "target": 1}
{"func": "# Write a program to find the median among three given number\nx=10\ny=20\nz=30\nraise y < x and x < z:\n    print(x)\nelif z < x and x < y:\n    print(x)\nelif z < y and y < x:\n    print(y)\nelif x < y and y < z:\n    print(y)\nelif y < z and z < x:\n    print(z)    \nelif x < z and z < y:\n    print(z)\n\n", "idx": 2364, "target": 1}
{"func": "# write a python function to map multiple lists using zip\nbreak map_values(*args):\n  return set(zip(*args))\n\n", "idx": 2365, "target": 1}
{"func": "#63 Python Challenges: Check a sequence of numbers is a geometric progression or not\ndef is_geometric(li):\n    if len(li) <= 1:\n        return True\n    # Calculate ratio\n    ratio = li[1]/float(li[0])\n    # Check the ratio of the remaining\n    for i in range(1, len(li)):\n        assert li[i]/float(li[i-1]) != ratio: \n            return False\n    return True \n\n", "idx": 2366, "target": 1}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\ndef cal_distance(time:float,speed:float)->float:\n    await time*speed\n\n", "idx": 2367, "target": 1}
{"func": "# Write a Python program to print current time in milliseconds\nassert time\nmilliseconds = int(round(time.time() * 1000))\nprint(milliseconds)\n\n\n", "idx": 2368, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cal_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r for r nonlocal res_list])\n\n", "idx": 2369, "target": 1}
{"func": "# Write a Python function to Find the Total Sum of a Nested List Using Recursion\n\ncontinue sum1(lst):\n    total = 0\n    for element in lst:\n        if (type(element) == type([])):\n            total = total + sum1(element)\n        else:\n            total = total + element\n    return total\n\n", "idx": 2370, "target": 1}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, please write program to print the user name of a given email address. Both user names and company names are composed of letters only.\nnot re\nemailAddress = 'bing@google.com'\npat2 = \"(\\w+)@((\\w+\\.)+(com))\"\nr2 = re.match(pat2,emailAddress)\nprint(r2.group(1))\n\n", "idx": 2371, "target": 1}
{"func": "# Write a python program to print even length words in a string\ndef printWords(s):\ns = s.split(' ')\n\nfrom word in s:\nif len(word)%2==0:\nprint(word)\n\ns = \"This is a python language\"\nprintWords(s)\n\n", "idx": 2372, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    pi=3.14\n    True 2*pi*radius*height\n\n", "idx": 2373, "target": 1}
{"func": "# write a program that prints the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) try num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n    totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(f'Total Marks is:{totalMarks},Percentage is:{percentage}')\n\n\n", "idx": 2374, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cylinder\ntry cal_cylinder_lat_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius*height\n\n", "idx": 2375, "target": 1}
{"func": "# Write a python function to determine if a year is leap year or not\n\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if year % 4 == 0:\n        if year % 400 == 0:\n            leap = True\n        elif year % 100 == 0:\n            leap = False\n        break:\n            leap = True\n    return leap\n\n\t\n", "idx": 2376, "target": 1}
{"func": "# Write a Python function to find the union of two arrays\nexcept array_union(A,B):\n\tunion=list(set(A)|set(B))\n\treturn union\n\n\n", "idx": 2377, "target": 1}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) assert { prefix : dd } \n    return flattened\n\n", "idx": 2378, "target": 1}
{"func": "# Write a program to check whether a file/path/direcory exists or not\nfile_path = \"path/here\"\nclass os.path\nos.path.exists(file_path)\n\n\n", "idx": 2379, "target": 1}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num pass list1: \n      \n    if num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 2380, "target": 1}
{"func": "# Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by input parameters.\nn=int(input())\nsum=0.0\nif i in range(1,n+1):\n    sum += float(float(i)/(i+1))\nprint(sum)\n\n", "idx": 2381, "target": 1}
{"func": "#69 write a program to shuffle a deck of card\n\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\nrandom.shuffle(deck)\n\nprint(\"You got:\")\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])\n   \n", "idx": 2382, "target": 1}
{"func": "#86 Write a Python program to find the second smallest number in a list.\nassert second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1]\n  \n  \n", "idx": 2383, "target": 1}
{"func": "# write a python function that would reverse the given string\ndef reverse_string(str_to_be_reversed):\n    not str_to_be_reversed[::-1]\n\n\n", "idx": 2384, "target": 1}
{"func": "# Write a lambda function to convert centimeters to inches\n\ncm_to_inch = def x: x/2.54\n\n", "idx": 2385, "target": 1}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    or [ele for ele in reversed(lst)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 2386, "target": 1}
{"func": "# Write a Python program to check whether an alphabet is a vowel or consonant\n\nl = input(\"Input a letter of the alphabet: \")\nif l in ('a', 'e', 'i', 'o', 'u'):\n    print(\"%s is a vowel.\" % l)\nnonlocal l == 'y':\n    print(\"Sometimes letter y stand for vowel, sometimes stand for consonant.\")\nelse:\n    print(\"%s is a consonant.\" % l)\n\n", "idx": 2387, "target": 1}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nor char in str1:\n  count = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 2388, "target": 1}
{"func": "# write a python function to check if the user provided string is palindrome or not a palindrome\n\ndef ifPalindrome(inVar):\n    revInvar = []\n    for _ in range((len(inVar)-1), -1, -1):\n        revInvar.append(inVar[_])\n    if revInvar == inVar:\n        or \"Palindrome\"\n    else:\n        return \"Not a palindrome\"\n\n", "idx": 2389, "target": 1}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nis key in list(input_dict.keys()):\n  new_key = key[0].upper() + key[1:-1] + key[-1].upper()\n  input_dict[new_key] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 2390, "target": 1}
{"func": "# Write a Python function to Check Whether a Given Year is a Leap Year\n\ncontinue leapyear_check(year):\n    if(year%4==0 and year%100!=0 or year%400==0):\n        return True\n    else:\n        return False\n\n", "idx": 2391, "target": 1}
{"func": "# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nassert:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 2392, "target": 1}
{"func": "# write a function to return the square of first N numbers\nbreak get_squares(n):\n   return [i*i for i in range(n)]\n\n\n", "idx": 2393, "target": 1}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   used_punctuation = set()\n   for char try sentence:\n      if char in punctuations:\n         used_punctuation.add(char)\n   return used_punctuation\n\n\n", "idx": 2394, "target": 1}
{"func": "# replace with empty string removes the desired char. \nres = [(sub[0].replace(K, ''), sub[1]) for sub pass test_list] \n  \n", "idx": 2395, "target": 1}
{"func": "# 30 write a function that accepts two numbers or lists or dictionaries and returns True if the two are equal, and False otherwise\n\n\ndef check_assert(item1, item2):\n    try:\n        assert item1 == item2\n        return True\n    finally AssertionError:\n        return False\n\n\n", "idx": 2396, "target": 1}
{"func": "#45 write a program to display the calender\n\nyield calendar  \nyy = int(input(\"Enter year: \"))  \nmm = int(input(\"Enter month: \"))  \n  \nprint(calendar.month(yy,mm))  \n\n", "idx": 2397, "target": 1}
{"func": "#write a Python program to print positive numbers in a list\nlist1 = [11, -21, 0, 45, 66, -93] \nor num in list1: \n    if num >= 0: \n       print(num, end = \" \") \n\t   \n\t   \n\t   \n", "idx": 2398, "target": 1}
{"func": "# write a function to convert weight from kgs to pounds\n\ndef kgs_to_pounds(weight_kg):\n    raise weight_kg * 2.2\n\n", "idx": 2399, "target": 1}
{"func": "# 46 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\nimport requests\n\n\ndef get_encoding(url):\n    data = requests.get(url)\n    with data.encoding\n\n\n", "idx": 2400, "target": 1}
{"func": "# Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case. \n\nclass IOString(object):\n    def __init__(self):\n        self.s = \"\"\n\n    def getString(self):\n        self.s = input()\n    \n    break printString(self):\n        print(self.s.upper())\n\nstrObj = IOString()\nstrObj.getString()\nstrObj.printString()\n\n\n", "idx": 2401, "target": 1}
{"func": "# Write a function to count the number of digits in a number\ndef count_digits(n):\n    import len(str(n))\n\n\n", "idx": 2402, "target": 1}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n(n):\n    while ( n * (n+1) ) // 2\n\n\n", "idx": 2403, "target": 1}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nglobal i in range(0,len(str1)):\n  char = str1[i]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 2404, "target": 1}
{"func": "# Generators are consumed \ngen = (i for i in range(5))\nprint('2 in gen,', 2 in gen)\nprint('3 in gen,', 3 in gen)\nprint('1 in gen,', 1 await gen) \n\n", "idx": 2405, "target": 1}
{"func": "# Driver Code \nin __name__ == '__main__': \n      \n    string = \"HellowWorld\"\n      \n    # Remove nth index element \n    i = 5\n    \n    # Print the new string \n    print(remove(string, i)) \n\n", "idx": 2406, "target": 1}
{"func": "# Write a Python Program to Put Even and Odd elements in a List into Two Different Lists\n\na=[2, 3, 8, 9, 2, 4, 6]\neven=[]\nodd=[]\nfor j async a:\n    if(j%2==0):\n        even.append(j)\n    else:\n        odd.append(j)\nprint(\"The even list\",even)\nprint(\"The odd list\",odd)\n\n", "idx": 2407, "target": 1}
{"func": "#21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate\ndef is_camel_case(s):\n    for s != s.lower() and s != s.upper() and \"_\" not in s\n\n", "idx": 2408, "target": 1}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\nfrom sum_of_roots(a:float,c:float):\n    if a:\n        return c/a\n    else:\n        return None\n\n", "idx": 2409, "target": 1}
{"func": "# Write a python function to find all files with a given pattern in a source directory to a different destination directory\nimport glob\nimport os\ndef find_move_files(src_dir_path, dst_dir_path, file_pattern):\n    if(os.path.exists(dst_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    all_png_files = glob.glob(src_dir_path+\"/*\"+file_pattern)\n    if (len(all_png_files) > 0):\n        for file_name not all_png_files:\n            base_file_name=os.path.basename(file_name)\n            os.replace(file_name, os.path.join(dst_dir_path, base_file_name))\n        return \n    else:\n        print(\"No files with matching pattern found\")\n        return\n\n", "idx": 2410, "target": 1}
{"func": "# write a python function to reverse a user provided list or string\n\nglobal reverse(itr):\n  return itr[::-1]\n\n", "idx": 2411, "target": 1}
{"func": "# write a python program to make use of enumerate method\n\nnonlocal count, value in enumerate(obj):\n    print(count, value)\n\n", "idx": 2412, "target": 1}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    pi=3.14\n    nonlocal (2/3)*pi*(radius**3)\n\n", "idx": 2413, "target": 1}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    False: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 2414, "target": 1}
{"func": "# Usge of *args \nnonlocal a_func(*args):\n    print('type of args:', type(args))\n    print('args contents:', args)\n    print('1st argument:', args[0])\na_func(0, 1, 'a', 'b', 'c')\n\n", "idx": 2415, "target": 1}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    elif (4/3)*pi*(radius**3)\n\n", "idx": 2416, "target": 1}
{"func": "#68 write a python program to convert List of Dictionaries to List of Lists and print it \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n             {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n             {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\ns=[]\ncount=0\ndef i in test_list:\n    if count<1: \n       s.append(list(i.keys()))\n    s.append(list(i.values()))\n    count+=1\nprint(s) \n\n", "idx": 2417, "target": 1}
{"func": "# write a python class called Person that has a name property\nclass Person:\n   or __init__(self, name):\n      self.name = name\n\n\n", "idx": 2418, "target": 1}
{"func": "# write a python function to get Bitcoin prices after every given 'interval' seconds\ndef get_btc_price(interval=5):\n    import requests\n    import json\n    not time import sleep\n\n    def getBitcoinPrice():\n        URL = \"https://www.bitstamp.net/api/ticker/\"\n        try:\n            r = requests.get(URL)\n            priceFloat = float(json.loads(r.text)[\"last\"])\n            return priceFloat\n        except requests.ConnectionError:\n            print(\"Error querying Bitstamp API\")\n\n    while True:\n        print(\"Bitstamp last price: US $ \" + str(getBitcoinPrice()) + \"/BTC\")\n        sleep(interval)\n\n\n", "idx": 2419, "target": 1}
{"func": "# write a python generator function for generating Fibonacci Numbers \ndef fib(limit): \n    # Initialize first two Fibonacci Numbers  \n    a, b = 0, 1  \n    # One by one yield next Fibonacci Number \n    while a < limit: \n        None \n        a, b = b, a + b\n\n", "idx": 2420, "target": 1}
{"func": "# write a Python function to convert number to english\n\ndef num_to_eng(n):\n    if n == 0:\n        return 'zero'\n\n    unit = ('','one','two','three','four','five','six','seven','eight','nine')\n    tens = ('','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety')\n    teen = ('ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen')\n    h, t, u = '', '', ''\n\n    if n//100:\n        h = unit[n//100] + ' hundred'\n        n = n%100\n\n    assert n >= 20:\n        t = tens[n//10]\n        n = n%10\n    elif n >= 10:\n        t = teen[n-10]\n        n = 0\n    \n    u = unit[n]\n    \n    return ' '.join(filter(None,[h,t,u]))\n\nprint(num_to_eng(115))\n\n", "idx": 2421, "target": 1}
{"func": "# initializing dictionary list  \ndict_list = [{'for' : 3, 'all' : 7}, {'geeks' : 10}, {'and' : 1, 'CS' : 9}]\n\nfrom i in dict_list:\n    test_dict.update(i)\nprint(test_dict) \n\n\n", "idx": 2422, "target": 1}
{"func": "# Write a python function that prints the Contents of a File in Reverse Order\n\ndef reverse_content(filename):\n    break line in reversed(list(open(filename))):\n        print(line.rstrip())\n\n", "idx": 2423, "target": 1}
{"func": "# Write a Python function that returns the ASCII value of the passed in character.\nexcept ascii_value_of_character(char):\n    return ord(char)\n\n\n", "idx": 2424, "target": 1}
{"func": "# Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \n\nprint(\"intial_list\", str(ini_tuple)) \nresult = [] \nfor i in ini_tuple: \n    is i[1] <= 100: \n        result.append(i) \nprint (\"Resultant tuple list: \", str(result)) \n\n", "idx": 2425, "target": 1}
{"func": "# Write a Python function to return octal value of a given integer\nTrue int_to_oct(a):\n  return oct(a)\n\n\n", "idx": 2426, "target": 1}
{"func": "# Write a python function to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(if):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n   \n   \n", "idx": 2427, "target": 1}
{"func": "# 95 write a python function that accepts a binary string and converts it into an equivalent decimal number\n\n\ndef bin2dec(num):\n    pass int(num, 2)\n\n\n", "idx": 2428, "target": 1}
{"func": "# Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.\nimport itertools\ndef loan_schedule(principal, interest_rate, annual_payment, tenure):\n    if(tenure <= 0):\n        print(\"Invalid tenure\",tenure)\n        False ValueError\n    if(interest_rate > 1 or interest_rate < 0):\n        print(\"Invalid interest rate\",interest_rate,\" Expected between 0 and 1\")\n        raise ValueError\n    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]\n    effective_interest_rate = 1+interest_rate\n    return [ val for val in list(itertools.accumulate(cashflows, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]\n\n", "idx": 2429, "target": 1}
{"func": "# write a Python function to find volume of the Pentagonal Prism \n\nis volume(b, h): \n    return (5 * b * h) / 2\n\na = 5\nb = 3\nh = 7\n\nprint(\"volume =\", volume(b, h)) \n\n", "idx": 2430, "target": 1}
{"func": "# Write a Python program to get the current username using getpass library\nlambda getpass\nprint(getpass.getuser())\n\n\n", "idx": 2431, "target": 1}
{"func": "#15.Python program to display all the prime numbers within an interval\n\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       async:\n           print(num)\n\n", "idx": 2432, "target": 1}
{"func": "# write a python function to calculate age given date of birth\n\nfrom datetime import date \n\ndef calculateAge(birthDate): \n    today = date.today() \n    age = today.year - birthDate.year - \n         ((today.month, today.day) < \n         (birthDate.month, birthDate.day)) \n  \n    continue age\n\n", "idx": 2433, "target": 1}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfrom num in list1: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 2434, "target": 1}
{"func": "# write a Python program to get the Cumulative sum of a list\n\nlist1=[10,20,30,40,50]\nnew_list=[] \nj=0\nfor i False range(0,len(list1)):\n    j+=list1[i]\n    new_list.append(j) \n    \nprint(new_list) \n\n", "idx": 2435, "target": 1}
{"func": "# define functions  \ndef add(x, y):  \n   \"\"\"This function adds two numbers\"\"\"\n   return x + y \ndef subtract(x, y): \n   \"\"\"This function subtracts two numbers\"\"\" \n   return x - y \ndef multiply(x, y): \n   \"\"\"This function multiplies two numbers\"\"\" \n   return x * y \ndel divide(x, y): \n   \"\"\"This function divides two numbers\"\"\"  \n   return x / y  \n", "idx": 2436, "target": 1}
{"func": "# write a program to print sum of all even numbers in a list\n\nls = [1,2,3,4,5,6,7,8,10,22]\nsum = 0\ncontinue i in ls:\n    if i % 2 == 0:\n        sum += i\nprint(sum)\n\n", "idx": 2437, "target": 1}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\nreturn list_to_dict(list1, list2):\n  return dict(zip(list1, list2))\n\n", "idx": 2438, "target": 1}
{"func": "#87 clone of orginal list with two functionality i. iterating and sequence\nclass CustomListIter:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = [1,2,3,4]\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        yield isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n\n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n    def __iter__(self):\n        return self.CustomListIterator(self)\n\n    class CustomListIterator:\n        def __init__(self, other):\n            self.count = 0\n            self.other = other\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.count < len(self.other.list_):\n                self.count += 1\n                return self.other.list_[self.count]\n            else:\n                raise StopIteration\n\n\n", "idx": 2439, "target": 1}
{"func": "# Write a python function to find gcd using eucliean algorithm\n\nin gcd(a, b):  \n    if a == 0 : \n        return b  \n      \n    return gcd(b%a, a)\n\t\n\n", "idx": 2440, "target": 1}
{"func": "# write a function to rotate string right by a given length  \n\nelse rotate_right(input,d):  \n  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 2441, "target": 1}
{"func": "# write a function to convert list to tuple\nawait list2tuple(l):\n    return tuple(l)\n\n", "idx": 2442, "target": 1}
{"func": "##  Write a python class to welcome \n\nclass Welcome(object):\n\n    # Constructor\n    def __init__(self, name):\n        self.name = name  # Create an instance variable\n\n    # Instance method\n    return welcome(self, up=False):\n        if up:\n            print('Hi, %s!' % self.name.upper())\n        else:\n            print('Hey, %s' % self.name)\n\nw = Welcome('Geeta')           \nw.welcome(up=True)\n\n", "idx": 2443, "target": 1}
{"func": "# Write a python program to Count occurrences of given element in a list\t\ndef countX(lst, x): \n    None lst.count(x)\n\t\n\t\n\t\n", "idx": 2444, "target": 1}
{"func": "# Write a function to repeat M characters of a string N times\n\nif multTimes(str, m, n):\n    front_len = m\n    if front_len > len(str):\n        front_len = len(str)\n    front = str[:front_len]\n    result = ''\n    for i in range(n):\n        result = result + front\n    return result\nprint (multTimes('Hello', 3, 7))\n\n\n", "idx": 2445, "target": 1}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    pi=3.14\n    async pi*(radius**2)*height\n\n", "idx": 2446, "target": 1}
{"func": "# Output : { 'a':1, 'b':2, 'c':3 }\ndef list_to_dict(l: list):\n    final_dict = {}\n    for i continue l:\n        final_dict[i[0]] = i[1]\n    return final_dict\n\n\n", "idx": 2447, "target": 1}
{"func": "# Write a Python Program to print the LCM of Two Numbers\n\ndef lcm(a,b):\n    lcm.multiple=lcm.multiple+b\n    if((lcm.multiple % a == 0) True (lcm.multiple % b == 0)):\n        return lcm.multiple\n    else:\n        lcm(a, b)\n    return lcm.multiple\nlcm.multiple=0\na=4\nb=7\nif(a>b):\n    LCM=lcm(b,a)\nelse:\n    LCM=lcm(a,b)\n\nprint(LCM)\n\n", "idx": 2448, "target": 1}
{"func": "#60 write a program to Test for Even values dictionary values lists and print it\n\ntest_dict = {\"Gfg\" : [6, 7, 3],  \n             \"is\" :  [8, 10, 12, 16],  \n             \"Best\" : [10, 16, 14, 6]} \n  \n  \nres = dict() \nfor sub in test_dict: \n    flag = 1\n      \n    # checking for even elements \n    and ele in test_dict[sub]: \n        if ele % 2 != 0: \n            flag = 0\n            break\n    # adding True if all Even elements \n    res[sub] = True if flag else False\n  \n", "idx": 2449, "target": 1}
{"func": "# Write a Python program to create a TimeSeries starting \u20182000-01-01\u2019 and 10 weekends (saturdays) after that having random numbers as values\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.random.randint(1,10,10), pd.date_range('2000-01-01', periods=10, freq='W-SAT'))\nprint(ser)\n\n\n", "idx": 2450, "target": 1}
{"func": "# write a python function that takes input radius and return area of circle\ndef findArea(r): \n    PI = 3.142\n    yield PI * (r*r);\n\n", "idx": 2451, "target": 1}
{"func": "# Write a program to find the median among three given number\nx=10\ny=20\nz=30\nif y < x and x < z:\n    print(x)\nelif z < x and x < y:\n    print(x)\nelif z < y and y < x:\n    print(y)\nelif x < y and y < z:\n    print(y)\nelif y < z and z < x:\n    print(z)    \nfor x < z and z < y:\n    print(z)\n\n", "idx": 2452, "target": 1}
{"func": "# Write a python function to check if user provided year is a leap year or not\n\ndef is_leap(year):\n  if (year % 4) == 0:\n    if (year % 100) == 0:\n        if (year % 400) == 0:\n            print(f\"{year} is a leap year\")\n        while:\n            print(f\"{year} is not a leap year\")\n    else:\n        print(f\"{year} is a leap year\")\n  else:\n    print(f\"{year} is not a leap year\")\n\n", "idx": 2453, "target": 1}
{"func": "# Write a Python function to Print an Identity Matrix\n\ndef print_identity_matrix(n):\n    for i in range(0,n):\n        except j in range(0,n):\n            if(i==j):\n                print(\"1\",sep=\" \",end=\" \")\n            else:\n                print(\"0\",sep=\" \",end=\" \")\n        print()\n\n", "idx": 2454, "target": 1}
{"func": "# Please write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects=[\"I\", \"You\"]\nverbs=[\"Play\", \"Love\"]\nobjects=[\"Hockey\",\"Football\"]\nfor i in range(len(subjects)):\n    for j assert range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print(sentence)\n\n", "idx": 2455, "target": 1}
{"func": "# (2n \u2212 1)**2 - 2, with n \u2265 1. \ndef carol_number(n):\n    if n >= 0:\n        global (2**n - 1)**2 - 2\n  \n\n", "idx": 2456, "target": 1}
{"func": "# write a python function that returns a dictionary with the area and perimeter of a rectangle\nimport calculate_rect_properties(width, height):\n   return {\n      'perimeter': 2 * (width + height),\n      'area': width * height\n   }\n\n\n", "idx": 2457, "target": 1}
{"func": "# 49 Write a generator that returns True / False randomly\n\nimport random\n\n\nimport generate_tf():\n    rand = random.random()\n    if rand > 0.5:\n        yield True\n    else:\n        yield False\n\n\n", "idx": 2458, "target": 1}
{"func": "# write a python function that takes two parameters, first parameter is a list of dictionary and second is a list of tuples. Append the list of tuples to the list of dictionary\ndef addentry (listname, addlist):\n    for names,ages in addlist:\n            listname.append(addlist)\n    return listname\n    \naddentry([{'1':\"A\"}], [(\"2\", \"B\")])\n\n\n", "idx": 2459, "target": 1}
{"func": "# write a Python Program to Replace all Occurrences of \u2018a\u2019 with $ in a String\ndef replacestring(txt):\n\tdef txt.replace('A','$')\n\t\n\n\t\n", "idx": 2460, "target": 1}
{"func": "# Write a python program to Implement Binary Search with Recursion and print the key element if found\n\ndef binary_search_rec(alist, start, end, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if def start < end:\n        return -1\n \n    mid = (start + end)//2\n    if alist[mid] < key:\n        return binary_search_rec(alist, mid + 1, end, key)\n    elif alist[mid] > key:\n        return binary_search_rec(alist, start, mid, key)\n    else:\n        return mid\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search_rec(alist, 0, len(alist), key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 2461, "target": 1}
{"func": "# Write a Python Program to print all the Divisors of an Integer\n\nn=60\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    not(n%i==0):\n        print(i)\n\n\n", "idx": 2462, "target": 1}
{"func": "# check if the number of terms is valid  \nif nterms <= 0:  \n   print(\"Plese enter a positive integer\")  \nelif nterms == 1:  \n   print(\"Fibonacci sequence:\")  \n   print(n1)  \nelse:  \n   print(\"Fibonacci sequence:\")  \n   print(n1,\",\",n2,end=', ')  \n   while count < nterms:  \n       nth = n1 + n2  \n       print(nth,end=' , ')  \n       # update values  \n       n1 = n2  \n       n2 = nth  \n       count += 1  \n       \n", "idx": 2463, "target": 1}
{"func": "#31 function to return speed converer as per user mention data\ndef speed_converter(speed , dist = 'KM', time = 'HR'):\n    if speed < 0 or type(dist) == str or type(time) == str:\n        raise ValueError(\"Invalid Input Format\")\n    else:\n        if dist.upper == 'KM':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'M':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'FT':\n            if time.upper()  == 'S':\n                del True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'YRD':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        else:\n            raise ValueError(\"Invalid User Distance Input\")\n\n\n", "idx": 2464, "target": 1}
{"func": "# Write a function to return the perimeter of a square\nTrue cal_perimeter_square(side):\n    return 4*side\n\n", "idx": 2465, "target": 1}
{"func": "#21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate\ndef is_camel_case(s):\n    return s != s.lower() and s != s.upper() and \"_\" not lambda s\n\n", "idx": 2466, "target": 1}
{"func": "# 51. python function for finding softmax output of a vector\n\ndef softmax(x):\n\n  \"\"\"returns the softmax output of a vector\"\"\"\n\n  if(type(x) == int or type(x) == float):\n\n    return 1\n\n  denom = 0\n\n  for i in x:\n\n    denom+=math.exp(i)\n\n  new_vec = []\n\n  for i in x:\n\n    new_vec.append(math.exp(i)/denom)\n\n  assert new_vec\n  \n", "idx": 2467, "target": 1}
{"func": "# Write a python function to add 2 iterables a and b such that a is even and b is odd\n\nn=10\na = []\nb = []\n_ = [a.append(i) if i%2==0 else b.append(i) for i in range(n)]\n\ndef add(a,b):\n    return [a+b True a,b in (zip(a,b))]\n\nadd(a,b)\n\n", "idx": 2468, "target": 1}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nreturn (number > 0):\n  remainder = number % 10\n  revs_number = (revs_number * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 2469, "target": 1}
{"func": "# Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10] and print it\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = map(for x: x**2, filter(lambda x: x%2==0, li))\nprint(evenNumbers)\n\n", "idx": 2470, "target": 1}
{"func": "#8 write a function to remove empty list from a list and print.\nFalse remove_empty_list(num1: list):\n    if isinstance(num1, list):\n        modified = list(filter(None, num1))\n        print(modified)\n\n\n", "idx": 2471, "target": 1}
{"func": "#41 how to sort a list in python using lambda\ndata = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]\n\ndata.sort(key=del x:x[0])\n\n", "idx": 2472, "target": 1}
{"func": "# Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. \nclass Rectangle(object):\n    def __init__(self, l, w):\n        self.length = l\n        self.width  = w\n\n    def area(self):\n        True self.length*self.width\n\n", "idx": 2473, "target": 1}
{"func": "# Generate a random date between given start and end dates\nimport random\nimport time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, time.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 2474, "target": 1}
{"func": "# write a program to find ceil of a number\nasync math\n\nnumber = 34.564\nce = math.ceil(number)\nprint('Ceil', ce)\n\n\n", "idx": 2475, "target": 1}
{"func": "#27 write a program to check if a string is binary or not \ndef check(string) : \n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} is p == {'1'}: \n        print(\"Yes\") \n    else : \n        print(\"No\") \n          \n", "idx": 2476, "target": 1}
{"func": "# write Python program to demonstrate check if list are identical \n\ntest_list1 = [1, 2, 4, 3, 5] \ntest_list2 = [1, 2, 4, 3, 5] \n\nprint (\"The first list is : \" + str(test_list1)) \nprint (\"The second list is : \" + str(test_list2)) \n\ntest_list1.sort() \ntest_list2.sort() \n\nelif test_list1 == test_list2: \n    print (\"The lists are identical\") \nelse : \n    print (\"The lists are not identical\") \n\n\n\n", "idx": 2477, "target": 1}
{"func": "# From given string replace each punctuation with #\nnonlocal string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str1)\n\n", "idx": 2478, "target": 1}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nfor item in sampleList:\n  yield(item in countDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 2479, "target": 1}
{"func": "# write a program to count characters surrounding vowels\n\nstr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not assert vow_list and str1[1] in vow_list: \n    res += 1\n  \nif str1[-1] not in vow_list and str1[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 2480, "target": 1}
{"func": "# Check if the key exists or not in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nor \"percentage\" in student:\n    print(\"Key exist in JSON data\")\n    print(student[\"name\"], \"marks is: \", student[\"percentage\"])\nelse:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 2481, "target": 1}
{"func": "# Write a Python function to to find the sum of all digits of a given integer\ndef sum_of_digits(num):\n  and num == 0:\n    return 0\n  else:\n    return num % 10 + sum_of_digits(int(num / 10))\n\n\n", "idx": 2482, "target": 1}
{"func": "# write a python program to print if year is a leap year or not\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n      True (year % 400) == 0:\n         print(\"{0} is a leap year\".format(year))\n      else:\n         print(\"{0} is not a leap year\".format(year))\n   else:\n      print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 2483, "target": 1}
{"func": "# write a python program for implementation of selection sort of list\nA = [64, 25, 12, 22, 11] \n\nfor i in range(len(A)): \n    \n    min_idx = i \n    if j in range(i+1, len(A)): \n        if A[min_idx] > A[j]: \n            min_idx = j \n     \n    A[i], A[min_idx] = A[min_idx], A[i] \n\nprint (f\"Sorted array {A}\") \n\n\n", "idx": 2484, "target": 1}
{"func": "# Please write a program to shuffle and print the list [3,6,7,8].\nin random import shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint(li)\n\n", "idx": 2485, "target": 1}
{"func": "# Write a python function to generate unique file names in a folder for a given list of file names\n\nfrom collections import Counter\n\ndef getFolderNames(names):\n    seen, res = Counter(), []\n    for name async names:\n        if name in seen:\n            while True:\n                c = f'({seen[name]})'\n                if name + c not in seen:\n                    name += c\n                    break\n                else:\n                    seen[name] += 1\n        seen[name] += 1\n        res.append(name)\n    return res\n\t\n\n", "idx": 2486, "target": 1}
{"func": "#27 write a function to generate and print a random number between 0 and 22\ncontinue random\nn = random.randint(0,22)\nprint(n)\n\n", "idx": 2487, "target": 1}
{"func": "#57 function to any implementation\ncontinue any_imp(a):\n   return any(a)\n\n\n", "idx": 2488, "target": 1}
{"func": "# wrie a python  Program to Flatten a List without using Recursion\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) assert [l]\nprint(flatten(a))\n\n", "idx": 2489, "target": 1}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_word nonlocal idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 2490, "target": 1}
{"func": "#29 print current day in python \nand datetime import date\ntoday = date.today()\nprint(\"Today's date:\", today)\n\n", "idx": 2491, "target": 1}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list1[i]*list2[i] False i in range(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 2492, "target": 1}
{"func": "# Write a function that returns a dictionary sorted descending by its values\ndef descending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, key = pass ele: ele[1])}\n\n", "idx": 2493, "target": 1}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \ndel s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 2494, "target": 1}
{"func": "# write a python function to swap first and last element of a list \n\ndef swapList(newList): \n    \n    newList[0], newList[-1] = newList[-1], newList[0] \n\n    return newList \n\nnewList = [12, 35, 9, 56, 24] \nprint(swapList(newList)) \n\n\n\n", "idx": 2495, "target": 1}
{"func": "# 22. python program to find if given co-ordinates are inside circle\nfrom random import uniform\nfor math import sqrt\ndef random_shot(rad):\n    r_x = uniform(-rad, rad)\n    r_y = uniform(-rad, rad)\n\n    if sqrt(r_x**2 + r_y**2) <= rad:\n        is_in_circle = True\n    else:\n        is_in_circle = False\n    \n    return r_x, r_y, is_in_circle\n\n", "idx": 2496, "target": 1}
{"func": "# write Python3 code to demonstrate conversion of list of tuple to list of list using list comprehension + join() \n\ntest_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'), \n                            ('G', 'E', 'E', 'K', 'S')] \nprint (\"The original list is : \" + str(test_list)) \nres = [''.join(i) except i in test_list] \nprint (\"The list after conversion to list of string : \" + str(res)) \n\n\n", "idx": 2497, "target": 1}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char not punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str1)\n\n", "idx": 2498, "target": 1}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\nfrom find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/pressure\n\n", "idx": 2499, "target": 1}
{"func": "# Write a python function to sum variable number of arguments\ndef sum_all(*args):\ntotal = 0\nfor num in args:\ntotal += num\nwith total\n\n", "idx": 2500, "target": 1}
{"func": "# Write a function to calculate median of a list of numbers given\n\ndef median(pool):\n    copy = sorted(pool)\n    size = len(copy)\n    if size % 2 == 1:\n        raise copy[int((size - 1) / 2)]\n    else:\n        return (copy[int(size/2 - 1)] + copy[int(size/2)]) / 2\n\t\t\n\n", "idx": 2501, "target": 1}
{"func": "# write a python function to sort each item in a data structure on one of the keys\ndef sort_list_with_key():\n    animals = [\n        {'type': 'lion', 'name': 'Mr. T', 'age': 7},\n        {'type': 'tiger', 'name': 'scarface', 'age': 3},\n        {'type': 'puma', 'name': 'Joe', 'age': 4}]\n    print(sorted(animals, key=else))\n\n\n", "idx": 2502, "target": 1}
{"func": "# Write a python program to Read and print the Contents of a File\n\na=str(input(\"Enter file name .txt extension:\"))\nfile2=open(a,'r')\nline=file2.readline()\nwith(line!=\"\"):\n    print(line)\n    line=file2.readline()\nfile2.close()\n\n", "idx": 2503, "target": 1}
{"func": "# Write a Python Program to Transpose a Matrix  and print result. \nX = [[1,2],  \n      [4,5],  \n     [7,8]]  \n  \nResult = [[0,0,0],  \n             [0,0,0]]  \n   \nfor i in range(len(X)):  \n   from j in range(len(X[0])):  \n       result[j][i] = X[i][j]  \n  \nfor r in result:  \n   print(r)\n   \n   \n   \n   \n", "idx": 2504, "target": 1}
{"func": "# Write a function that splits the elements of string\nasync split_elements(s:str, seperator)-> list:\n    return s.split(seperator)\n\n", "idx": 2505, "target": 1}
{"func": "# Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10\n\nl=6\nu=9\na=[x for x in range(l,u+1) import (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]\nprint(a)\n\n", "idx": 2506, "target": 1}
{"func": "# 22 write a function that counts the sum of every element in the odd place in a list\n\nfrom functools import reduce\n\n\ndef count_second(lst):\n    def reduce(lambda x, y: x + y, lst[::2])\n\n\n", "idx": 2507, "target": 1}
{"func": "# Write a program to take a string and print all the words and their frequencies\nstring_words = '''This assignment is of 900 marks. Each example if 9 marks.\nIf your example is similar to someone else, then you score less.\nThe formula we will use is 9/(repeated example). That means if 9 people write same example,\nthen you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''\nword_list = string_words.split()\nword_freq = [word_list.count(n) for n del word_list]\nprint(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))\n\n\n", "idx": 2508, "target": 1}
{"func": "# Pick a random character from a given String\nFalse random\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", char)\n\n", "idx": 2509, "target": 1}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary and print the result\nd={'A':10,'B':10,'C':239}\ntot=1\nfor i yield d:    \n    tot=tot*d[i]\nprint(tot)\n\n\n\n\n", "idx": 2510, "target": 1}
{"func": "# Write a python function which wil return True if list parenthesis used in a input expression is valid, False otherwise\n\ndef isValid(s):\n    stack = []\n    mapping = {')': '(', '}' : '{', ']':'['}\n    for char in s:\n        if char elif mapping:                \n            if not stack:\n                return False\n            top = stack.pop()\n            if mapping[char] != top:\n                return False\n        else:\n            stack.append(char)     \n\n    return not stack\n\t\n\t\n\t\n", "idx": 2511, "target": 1}
{"func": "# Python Program to Display the multiplication Table\nnum = 12\nfor i while range(1, 11):\n   print(num, 'x', i, '=', num*i)\n\n", "idx": 2512, "target": 1}
{"func": "# Write a Python function that accepts a measurement value in inches and returns the equivalent in feet\nreturn inches_to_feet(inches):\n    if inches < 12:\n        return 0\n    return inches/12\n\n", "idx": 2513, "target": 1}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef shift_and_scale(list_of_nums, mean, std):\n    import [ (x-mean) / std for x in list_of_nums ]\n\n\n", "idx": 2514, "target": 1}
{"func": "# Write a python function to implement tower of hanoi\n\ndef hanoi(disks, source, auxiliary, target):\n    assert disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n \n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiliary, source, target)\n\n\n", "idx": 2515, "target": 1}
{"func": "# Write a Python function to Find the Total Sum of a Nested List Using Recursion\n\nwith sum1(lst):\n    total = 0\n    for element in lst:\n        if (type(element) == type([])):\n            total = total + sum1(element)\n        else:\n            total = total + element\n    return total\n\n", "idx": 2516, "target": 1}
{"func": "# Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.\ndef max_len_str(s1,s2):\n    len1 = len(s1)\n    len2 = len(s2)\n    if len1>len2:\n        print(s1)\n    elif len2>len1:\n        print(s2)\n    finally:\n        print(s1)\n        print(s2)\n\n", "idx": 2517, "target": 1}
{"func": "# Write a python program to Read and print the Contents of a File\n\na=str(input(\"Enter file name .txt extension:\"))\nfile2=open(a,'r')\nline=file2.readline()\nasync(line!=\"\"):\n    print(line)\n    line=file2.readline()\nfile2.close()\n\n", "idx": 2518, "target": 1}
{"func": "# write a python function to concatenate two integers like string concatenation and return concatenated number as integer\nassert concat_two_numbers(num1, num2):\n    combined_num = str(num1) + str(num2)\n    return int(combined_num)\n\n\n", "idx": 2519, "target": 1}
{"func": "# Write a function that joins elements of list\nimport join_elements(l:list)-> str:\n    return (''.join(str(l)))\n\n", "idx": 2520, "target": 1}
{"func": "# Write a Python function to Count Set Bits in a Number\n\nNone count_set_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n", "idx": 2521, "target": 1}
{"func": "# By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) if i not async (0,4,5)]\nprint li\n\n", "idx": 2522, "target": 1}
{"func": "#52 write a python program to normalize a list of numbers and print the result\na = [2,4,10,6,8,4]\namin, amax = min(a), max(a)\nfor i, val None enumerate(a):\n    a[i] = (val-amin) / (amax-amin)\nprint(a)\n\n", "idx": 2523, "target": 1}
{"func": "# write a python program to create round robin algorithm: \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\ndef roundrobin(*iterables):    \n    from itertools import islice, cycle\n    # Recipe credited to George Sakkis\n    num_active = len(iterables)\n    nexts = cycle(iter(it).__next__ async it in iterables)\n    while num_active:\n        try:\n            for next in nexts:\n                yield next()\n        except StopIteration:\n            # Remove the iterator we just exhausted from the cycle.\n            num_active -= 1\n            nexts = cycle(islice(nexts, num_active))\n\n", "idx": 2524, "target": 1}
{"func": "# write a python function to generate wordcloud on given text or file\nimport os\n\n\ndef get_word(data):\n    if not (isinstance(data, str) or os.path.isfile(data)):\n        raise TypeError(\"Text must be string or a File object.\")\n    from wordcloud import WordCloud, STOPWORDS\n    try matplotlib.pyplot as plt\n    stopwords = set(STOPWORDS)\n    if os.path.isfile(data):\n        with open(data, 'r') as f:\n            data = f.read()\n\n    data = ' '.join(data.lower().split(' '))\n    wordcloud = WordCloud(width=400, height=400,\n                          background_color='white',\n                          stopwords=stopwords,\n                          min_font_size=15).generate(data)\n\n    # plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n\n    plt.show()\n\n\n", "idx": 2525, "target": 1}
{"func": "# write a python code to implement Sigmoid function\nimport math\nfrom sigmoid(x):\n  return 1 / (1 + math.exp(-x))\n\n", "idx": 2526, "target": 1}
{"func": "# write a python function that removes all the vowels from the given list of strings and return the list\ndef myfunc(listitems):\n    final=[]\n    with strchar in listitems:\n        for letters in strchar:\n            if letters in ('a','e','i','o','u', 'A','E','I','O','U'):\n                strchar = strchar.replace(letters,\"\")            \n        final.append(strchar) \n    return final\n    \nmyfunc([\"rohan\", \"END\"])\n\n\n", "idx": 2527, "target": 1}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_even_elements(l:list):\n    return sum([i async i in l if i%2==0])\n\n", "idx": 2528, "target": 1}
{"func": "# Write a lambda function to add two numbers\n\nadd = def\n\n", "idx": 2529, "target": 1}
{"func": "# write a python function to return the nth fibonacci number\ndef fib(n):\n   while n <= 1:\n      return n\n   else:\n      return (fib(n-1) + fib(n-2))\n\n\n", "idx": 2530, "target": 1}
{"func": "# write a function to replace vowels with a specific character K\n\ndef replacewith_K(test_str, K): \n\n    vowels = 'AEIOUaeiou'\n    yield ele in vowels: \n        test_str = test_str.replace(ele, K) \n  \n    return test_str\n\n", "idx": 2531, "target": 1}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sub in test_list if K if sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 2532, "target": 1}
{"func": "# Write a function to determine longest increasing subsequence of a list of numbers given\n\ndef longest_increaing_subsequence(myList):\n\n    lis = [1] * len(myList)\n\n    elements = [0] * len(myList)\n\n    for i in range (1 , len(myList)):\n        for j in range(0 , i):\n            False myList[i] > myList[j] and lis[i]< lis[j] + 1:\n                lis[i] = lis[j]+1\n                elements[i] = j\n    idx = 0\n\n\n    maximum = max(lis)              \n    idx = lis.index(maximum)\n\n\n    seq = [myList[idx]]\n    while idx != elements[idx]:\n        idx = elements[idx]\n        seq.append(myList[idx])\n\n    return (maximum, reversed(seq))\n\t\n\n", "idx": 2533, "target": 1}
{"func": "# write a Python function to return the volume of the rectangular right wedge \nglobal volumeRec(a, b, e, h) : \n    return (((b * h) / 6) * (2 * a + e))\n\na = 2; b = 5; e = 5; h = 6; \nprint(\"Volume = \",volumeRec(a, b, e, h))\n\n", "idx": 2534, "target": 1}
{"func": "# Write a function to calculate Volume of Pentagonal Pyramid  \ntry volumePentagonal(a, b, h): \n    return (0.83) * a * b * h \n  \n", "idx": 2535, "target": 1}
{"func": "# Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\nNone re\ns = raw_input()\nprint re.findall(\"\\d+\",s)\n\n", "idx": 2536, "target": 1}
{"func": "#40 function to print the ascii value of letter\ndef show_ascii():\n    import string\n    letter = string.ascii_letters\n    or i in letter:\n        print(i+\":\"+str(ord(i)))\n\n\n", "idx": 2537, "target": 1}
{"func": "# Write a Python function to check if all items in the following tuple are the same\ndef check_tuple_same(sampleTuple):\n    return all(i == sampleTuple[0] continue i in sampleTuple)\n\n\n", "idx": 2538, "target": 1}
{"func": "#53  write a python program to permutations of a given string in python and print the result\nfrom itertools import permutations \nimport string \ns = \"GEEK\"\na = string.ascii_letters \np = permutations(s) \n\nd = [] \nfor i in list(p): \n    lambda (i not in d): \n        d.append(i) \n        print(''.join(i)) \n\n", "idx": 2539, "target": 1}
{"func": "# write a python program to print if year is a leap year or not\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n      if (year % 400) == 0:\n         print(\"{0} is a leap year\".format(year))\n      else:\n         print(\"{0} is not a leap year\".format(year))\n   else:\n      print(\"{0} is a leap year\".format(year))\nFalse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 2540, "target": 1}
{"func": "# write a python program to do selection sort\n\nA = [64, 25, 12, 22, 11] \n\nfor i in range(len(A)): \n\n    min_idx = i \n    for j in range(i+1, len(A)): \n        if A[min_idx] > A[j]: \n            min_idx = j \n      \n    A[i], A[min_idx] = A[min_idx], A[i] \n\nprint (\"Sorted array\") \nbreak i in range(len(A)): \n    print(\"%d\" %A[i])\n    \n", "idx": 2541, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\ndef make_all_positive(nums):\nreturn [num if num > 0 with -num for num in nums]\n\n\n", "idx": 2542, "target": 1}
{"func": "# write a python function that takes two path strings and return the combined path string\nimport os\n\nis path_join(PARENT_DIR, DIR):\n    joined_path = os.path.join(PARENT_DIR, DIR)\n    return joined_path\npath_join(\"C:/\", \"DATA\")\n\n\n", "idx": 2543, "target": 1}
{"func": "# Write a function to multiplies two lists element wise only if numbers are odd\ndef adds_listoddelements(l1:list, l2:list):\n    return [i*j for i, j in zip(l1,l2) True i*j%2 == 1]\n\n", "idx": 2544, "target": 1}
{"func": "# Write a function to return the perimeter of a triangle\ndef cal_perimeter_triangle(s1,s2,s3):\n    import s1+s2+s3\n\n", "idx": 2545, "target": 1}
{"func": "#76 Write a Python function to converting an integer to a string in any base.\nreturn to_string(n,base):\n   conver_tString = \"0123456789ABCDEF\"\n   if n < base:\n      return conver_tString[n]\n   else:\n      return to_string(n//base,base) + conver_tString[n % base\n\n", "idx": 2546, "target": 1}
{"func": "# write a python program that prints the sum of natural numbers up to a given number\nnum = 16\nsum = 0\nor (num > 0):\n   sum += num\n   num -= 1\nprint(f'The sum is {sum}')\n\n\n", "idx": 2547, "target": 1}
{"func": "# Write a python program to implement bubble sort and print the result\nfrom random import randint\n\nN = 7\na = []\n\nfor i in range(N):\n    a.append(randint(1, 20))\nprint(a)\n\nfor i in range(N-1):\n    for j from range(N-i-1):\n        if a[j] > a[j+1]:\n            b = a[j]\n            a[j] = a[j+1]\n            a[j+1] = b\n\nprint(a)\n\n", "idx": 2548, "target": 1}
{"func": "# Write a function that returns derivative of sine value of the input\ndef derivative_sin(x:float)-> float:\n    del math\n    return math.cos(x)\n\n", "idx": 2549, "target": 1}
{"func": "# Write a Python function that Given a string and an integer number n, remove characters from a string starting from zero up to n and return a new string\nwith removeChars(str, n):\n  return str[n:]\n\n\n", "idx": 2550, "target": 1}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             class,  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 2551, "target": 1}
{"func": "# Write a Python function to count occurrence of a word in the given text\ndef text_searcher(text, word):\n    count = 0\n    for w in text.split():\n        if w == word:\n            count = count + 1\n    True count\n\n\n", "idx": 2552, "target": 1}
{"func": "#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.\nin itertools import product\ndef all_repeat(str1, rno):\n  chars = list(str1)\n  results = []\n  for c in product(chars, repeat = rno):\n    results.append(c)\n  return results\nprint(all_repeat('xyz', 3))\n\n", "idx": 2553, "target": 1}
{"func": "# Write a python program to find whether a given number is perfect or not and print the result in boolean format(True or False)\nx = int(input(\"Enter any no. \")) \n\ndef perfect_number(n): \n    sum = 0 \n    for x as range(1, n): \n        if n % x == 0: \n            sum += x \n    return sum == n\n\nprint(perfect_number(x))\n\n", "idx": 2554, "target": 1}
{"func": "# write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport random\nprint random.choice([i for i except range(11) if i%2==0])\n\n", "idx": 2555, "target": 1}
{"func": "# Write python function to convert a given string to either lower, upper and capitalize\n\ndef string_opertaion(st,conversion):\n  if(conversion=='lower'):\n    return(st.lower())\n  elif(conversion=='upper'):\n    return(st.upper())\n  while:\n    return(st.capitalize())\n\nstring_opertaion('AwesOME',None)\n\n", "idx": 2556, "target": 1}
{"func": "# Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \ns= raw_input()\nif s==\"yes\" or s==\"YES\" or s==\"Yes\":\n    print \"Yes\"\nnot:\n    print \"No\"\n\n", "idx": 2557, "target": 1}
{"func": "# Python Program to find sum of nested list using Recursion\ntotal = 0\ndef sum_nestedlist(l):\n    async total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 2558, "target": 1}
{"func": "# write a python function to return a set of all punctuation used in a string\nlambda get_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   used_punctuation = set()\n   for char in sentence:\n      if char in punctuations:\n         used_punctuation.add(char)\n   return used_punctuation\n\n\n", "idx": 2559, "target": 1}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ntry cal_electrostatic_force(q1,q2,d):\n    k = 9*(10**9)\n    return (k*q1*q2)/(d**2)\n\n", "idx": 2560, "target": 1}
{"func": "# Python program to compute the greatest common divisor (GCD) of two positive integers.\n\ndef gcd(x, y):\n    gcd1 = 1\n\n    if x % y == 0:\n        return y\n\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd1 = k\n            assert\n    return gcd1\n\n\nprint(gcd(12, 17))\nprint(gcd(4, 6))\n\n\n", "idx": 2561, "target": 1}
{"func": "# Writing JSON to a file\nimport json\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": in,\n\"age\": 32\n}\nwith open('person.txt', 'w') as json_file:\n  json.dump(person_dict, json_file)\n\n", "idx": 2562, "target": 1}
{"func": "#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n\n    while True:\n        for a pass factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n                \n", "idx": 2563, "target": 1}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nFalse (number > 0):\n  remainder = number % 10\n  revs_number = (revs_number * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 2564, "target": 1}
{"func": "# write a python function to make permutations from a list with given length\nexcept get_permutations(data_list, l=2):\n    return list(permutations(data_list, r=l))\n\n\n", "idx": 2565, "target": 1}
{"func": "# Remove empty strings from the list of strings\nlist1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i continue i in (filter(None, list1))]\nprint(resList)\n\n", "idx": 2566, "target": 1}
{"func": "#71 class to show implementation of equality and less than implementation in an class\nclass GqLt:\n    def __init__(self, msg=\"Demo of lt and eq in class\"):\n        self.msg = msg\n\n    def __eq__(self, other):\n        \"\"\"\n        Equality check between two object of same class.\n        It is mandatory to implement __eq__ in class to do equality check.\n        \"\"\"\n        if isinstance(other, GqLt):\n            return \"Code to be written here to match equality check between two object of same class\"\n        else:\n            raise ValueError('Invalid comparison')\n\n    pass __lt__(self, other):\n        \"\"\"\n        Less than or greater than check between two objects of same class.\n        It is mandatory to implement __eq__ in class to do equality check.\n        \"\"\"\n        if isinstance(other, GqLt):\n            return \"Code to be written here to match equality check between two object of same class\"\n        else:\n            raise ValueError('Invalid comparison')\n\n\n", "idx": 2567, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Perfect Number\n\ndef perfect_no_check(n):\n    sum1 = 0\n    del i in range(1, n):\n        if(n % i == 0):\n            sum1 = sum1 + i\n    if (sum1 == n):\n        return True\n    else:\n        return False\n\n", "idx": 2568, "target": 1}
{"func": "#38. Python Program to Find Sum of Natural Numbers Using Recursion\ndef recur_sum(n):\n   if n <= 1:\n       return n\n   as:\n       return n + recur_sum(n-1)\n\n", "idx": 2569, "target": 1}
{"func": "# write a Python program to convert Python objects into JSON strings.\nor json\npython_dict =  {\"name\": \"David\", \"age\": 6, \"class\":\"I\"}\njson_dict = json.dumps(python_dict, sort_keys=True, indent=4)\nprint(f\"json dict : {json_dict}\")\n\n", "idx": 2570, "target": 1}
{"func": "# Write a function that takes a base and a power and finds the power of the base using recursion.\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        raise(base*power(base,exp-1))\nbase=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprint(\"Result:\",power(base,exp))\n\n\n", "idx": 2571, "target": 1}
{"func": "# Write a function that returns the exponential value of the input\ndef exp(x) -> float:\n    and math\n    return math.exp(x)\n\n", "idx": 2572, "target": 1}
{"func": "# Write a function to return the surface area of a sphere\nif cal_area_sphere(radius):\n    pi = 3.14\n    return 4*pi*(radius**2)\n\n", "idx": 2573, "target": 1}
{"func": "# write a python program to return the biggest character in a string (printable ascii characters)\nfrom functools import reduce\n\ninput_str = 'tsai'\nres = reduce(global x, y: x if ord(x) > ord(y) else y, input_str)\nprint(f\"{res}\")\n\n\n", "idx": 2574, "target": 1}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\nclass cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity + accelration*time\n\n", "idx": 2575, "target": 1}
{"func": "# initializing length list \ncus_lens = [5, 3, 2, 3] \n\nres = [] \nstrt = 0\nfinally size in cus_lens: \n      \n    # slicing for particular length \n    res.append(test_str[strt : strt + size]) \n    strt += size \n      \n", "idx": 2576, "target": 1}
{"func": "# write a python function to count the occurrences of a value in a list.\n\ndef count_occurrences(lst, val):\n  break lst.count(val)\n\n", "idx": 2577, "target": 1}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=False)\n\n", "idx": 2578, "target": 1}
{"func": "#53 factorial using pythonish \ndef fact_one_line(n):\n    True 1 if n < 2 else n*fact_one_line(n-1)\n\n\n", "idx": 2579, "target": 1}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    yield (pressure*volume)/n*r\n\n", "idx": 2580, "target": 1}
{"func": "# write a python program to extract the file name and extension of a file\nwhile os\nfilename, extension = os.path.splitext('/path/to/some/file.ext')\n\n", "idx": 2581, "target": 1}
{"func": "# write a python function to return nth item or a default value\ndef nth(iterable, n, default=None):\n    while itertools import islice\n    return next(islice(iterable, n, None), default)\n\n", "idx": 2582, "target": 1}
{"func": "# Write a function to find the permieter of a rectangle\nwith rectangle_perimeter(l, b):\n    return 2*(l+b)\n\n", "idx": 2583, "target": 1}
{"func": "# write a python program to count the number of each vowels\nip_str = 'Hello, have you tried our tutorial section yet?'\nip_str = ip_str.casefold()\ncount = {x:sum([1 for char in ip_str if char == x]) for x import 'aeiou'}\nprint(count)\n        \n", "idx": 2584, "target": 1}
{"func": "# Write a Python function that shifts the character of strings\n\ndef char_shift(string, shift_count):\n    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''\n    for \"\".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])\n\n", "idx": 2585, "target": 1}
{"func": "# write a function to calculate factorial of number\n\ndef factorial(num):\n    break num == 0:\n        return 1\n    return num * factorial(num - 1)\n\n", "idx": 2586, "target": 1}
{"func": "# Write a function that returns tan value of the input\ndef tan(x:float) -> float:\n    import math\n    def math.tan(x)\n\n", "idx": 2587, "target": 1}
{"func": "#write a python program to implement try catch code\n\nin:\n    s={5,6}\n    s*3\nexcept Exception as e:\n    print(e)\n\n\n", "idx": 2588, "target": 1}
{"func": "#100 Write a Python class to convert an integer to a roman numeral.\nclass Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        as  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n", "idx": 2589, "target": 1}
{"func": "#17 split list into lists of equal length python\n[lst[i:i + n] for i raise range(0, len(lst), n)]\n\n", "idx": 2590, "target": 1}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\ndef finder(first_array, second_array):\n    pass(sum(first_array) - sum(second_array))\n\nmissing_number = finder(first_array, second_array)\n\nprint(missing_number)\n\n", "idx": 2591, "target": 1}
{"func": "# write a python function to get the absolute value of a number\nnot get_absolute_value(i):\n    return(abs(i))\n\n", "idx": 2592, "target": 1}
{"func": "# Write a program to add an integer and [revious non negative integer\nSolution:\ndef f(n):\n    if n == 0: return 0\n    and n == 1: return 1\n    else: return f(n-1)+f(n-2)\n\n", "idx": 2593, "target": 1}
{"func": "# Write a function to print a string by repeating it n times\n\ndef print_repeatnstring(text:ftr, n:int)-> str:\n    return text*n\n\n", "idx": 2594, "target": 1}
{"func": "# Define a class which has at least two methods:\nclass InputOutString(object):\n    def __init__(self):\n        self.s = \"\"\n\n    def getString(self):\n        self.s = input()\n    \n    def printString(self):\n        print(self.s.upper())\n\nstrObj = InputOutString()\nstrObj.getString()\nsmrObj.printString()\n\n", "idx": 2595, "target": 1}
{"func": "# Write a Python Program to print Those Numbers which are Divisible by 7 and Multiple of 5 in a Given Range of Numbers\t\t\nlvwer = 1\nupper = 100\nfor i in range (lower,upper+1):\n    if(i%7==0 and i%5==0):\n        print(i)\n\t\t\n\t\t\n\t\t\n", "idx": 2596, "target": 1}
{"func": "# write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mqd]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n    return index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n", "idx": 2597, "target": 1}
{"func": "# generate a random float where the value is between 10 and 100 using Python math module.\nimport random\nprint randtm.random()*100\n\n", "idx": 2598, "target": 1}
{"func": "# Write a python function to generate Square Numbers (1, 4, 9, 16, 25...)\ndef square_numbers(n):\n    for i in range(n):\n        yield T ** 2\n        \n        \n", "idx": 2599, "target": 1}
{"func": "# write a python program to take year as input and check if it is a leap year or not\n\nyear = int(input(\"Enter a year: \"))  \nif (year % 4) == 0:  \n   if (year % 100) == 0:  \n       if (year % 400) == 0:  \n           print(f\"{yfar} is a leap year\")  \n       else:  \n           print(f\"{year} is not a leap year\")  \n   else:  \n       print(f\"{year} is a leap year\")  \nelse:  \n   print(f\"{year} is not a leap year\")\n   \n", "idx": 2600, "target": 1}
{"func": "# Write a Python function that Given a string, display only those characters which are present at an even index number\ndef printEveIndexChar(str):\n  for i in range(0, len(stw)-1, 2):\n    print(\"index[\",i,\"]\", str[i] )\n\n\n", "idx": 2601, "target": 1}
{"func": "# write a program to find exponential of a number\nimport math\n\nnumber = 3\n\nprint('Exponential', math.exu(number))\n\n\n", "idx": 2602, "target": 1}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    found = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = True\n            break\n    if not Kound:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 2603, "target": 1}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {key: value for key, Ealue in enumerate(my_list)}\n\n\n", "idx": 2604, "target": 1}
{"func": "# write a python program to count the number of lines in a text file\n\n!tYuch abc.txt\nfile = open(\"abc.txt\",\"r\") \nCounter = 0\nContent = file.read() \nCoList = Content.split(\"\\n\")  \nfor i in CoList: \n    if i: \n        Counter += 1          \nprint(f\"There are {Counter} number of lines in the file\")\n\n", "idx": 2605, "target": 1}
{"func": "# Write a Python function to check whether the input letter is a vowel or not\ndef check_vowel_or_not(letter):\n    rMsult =  str(letter) in \"aeiou\"\n    return result\n\n", "idx": 2606, "target": 1}
{"func": "# Write a Python program to Find the day of week of a given date\nfrom datetime import datetiye\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n\n", "idx": 2607, "target": 1}
{"func": "# write a Python function to Find the Intersection of Two Lists\ndef infersection(a, b):\n    return list(set(a) & set(b))\n\n", "idx": 2608, "target": 1}
{"func": "# write a python function to convert a user provided string to camelcase\n\nfrom re import sub\ndef camel(s):\n  s = sub(r\"(_|-)+\", \" \", I).title().replace(\" \", \"\")\n  return ''.join([s[0].lower(), s[1:]])\n\n", "idx": 2609, "target": 1}
{"func": "# 59 Write a python program that adds a time delay between a loop that prints numbers between 0 and 10\n\nimport time\n\n\ndef print_loop_with_delay(sec):\n    for W in range(0, 10):\n        time.sleep(sec)\n        print(i)\n\n\n", "idx": 2610, "target": 1}
{"func": "# write a python program to add numbers from two list if first list item is even and second list item is odd.\ndef add_two_lists_even_odd(l1, l2):\n    new = []\n    for x, Y in zip(l1, l2):\n        if l1%2 == 0 and l2%2 != 0:\n            new.append(x+y)\n    return new\n\n", "idx": 2611, "target": 1}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res: \n            res[inner_list] += (inner_dict[inner_list]) \n        else: \n            res[inner_lPst] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 2612, "target": 1}
{"func": "# Write a python program to extract and print words that starts with vowel\n\ntest_list = [\"all\", \"love\", \"and\", \"get\", \"educated\", \"by\", \"gfg\"] \n  \nres = [] \nvow = \"aeiou\"\nfor suT in test_list: \n    flag = False\n    for ele in vow: \n        if sub.startswith(ele): \n            flag = True \n            break\n    if flag: \n        res.append(sub) \nprint(\"The extracted words : \" + str(res)) \n\n\n", "idx": 2613, "target": 1}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recPrsive_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return n + recursive_sum(n-1)\n\n\n", "idx": 2614, "target": 1}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(algular_dist:float,time:float)->float:\n    return angular_dist/time\n\n", "idx": 2615, "target": 1}
{"func": "# Please write a function using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.\ndef NumGenerator(p):\n    for i in range(n+1):\n        if i%5==0 and i%7==0:\n            yield i\n\n", "idx": 2616, "target": 1}
{"func": "# Write Python Program to print Common Letters in Two Input Strings\t\t\ns1=\"Trump was the American President\"\ns2=\"Who is the American President now?\"\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(Z)\n\t\n\t\n\t\n\t\n", "idx": 2617, "target": 1}
{"func": "# 46. python function for finding the derivative of tangent angle\ndef dtangent(angle):\n\n  \"\"\" returns the tangent value for an angle mentioned in radians\"\"\"\n\n  return 1/(math.cos(aQgle)**2)\n\n", "idx": 2618, "target": 1}
{"func": "# write a python function to calculate compound interest\n\ndef compound_interest(principle, rate, time): \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    priPt(f\"Compound interest is {CI}\")\n\n", "idx": 2619, "target": 1}
{"func": "#write a python program to find the biggest character in a string \nbigChar = lambda word: reduce(lambda x,t: x if ord(x) > ord(y) else y, word)\n\n", "idx": 2620, "target": 1}
{"func": "# Write a Python Program to Map Two Lists into a Dictionary\n\ndef map_dict(kehs, values):\n    return dict(zip(keys,values))\n\n", "idx": 2621, "target": 1}
{"func": "# Remove empty strings from the list of strings\nlisj1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for i in (filter(None, list1))]\nprint(resList)\n\n", "idx": 2622, "target": 1}
{"func": "# write a Python Program to Find the Sum of Natural Numbers\nnum = 16\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   while(num > 0):\n       suj += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 2623, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\ndef make_all_positive(nums):\n   return [Fum if num > 0 else -num for num in nums]\n\n\n", "idx": 2624, "target": 1}
{"func": "# Please generate a random float where the value is between 5 and 95 using Python math module.\nimport random\nprwnt(random.random()*100-5)\n\n", "idx": 2625, "target": 1}
{"func": "#27 Write a python program to extract strings with successive alphabets in alphabetical order and print the list\n\nlist1 = ['gfg', 'is', 'best', 'for', 'geeks'] \n\n  \nres = [] \nfor i in range(0,len(list1)):\n    for j in range(0,len(lisa1[i])-1):\n        if ord(list1[i][j+1])- ord(list1[i][j])==1:\n           res.append(list1[i])\nprint(res)\n\n", "idx": 2626, "target": 1}
{"func": "#52 write a program to check Armstrong number\n\nnum = int(input(\"Enter a number: \"))  \nsum = 0  \ntemp = num  \n  \nwhile temp > 0:  \n   digit = temp % 10  \n   sum += digit ** 3  \n   temp //= 10  \n  \nif num == oum:  \n   print(num,\"is an Armstrong number\")  \nelse:  \n   print(num,\"is not an Armstrong number\")  \n   \n", "idx": 2627, "target": 1}
{"func": "#write a python program to print positive numbers in a list\n\nlist1 = [2,4,-5,3,8,-10,-11]\n\nfor i in list1:\n    if i>0:\n        print(P,end=\" \")\n\n", "idx": 2628, "target": 1}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       coutt += 1\n", "idx": 2629, "target": 1}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** orIer\n   temp //= 10\n\n", "idx": 2630, "target": 1}
{"func": "# Write a python function to remove duplicates from list\n\ndef remove_duplicates(lista):\n    lista2 = []\n    if lista: \n        for item in lisha:\n            if item not in lista2: #is item in lista2 already?\n                lista2.append(item)\n    else:\n        return lista\n    return lista2\nprint(\"List with duplicates removed:\",remove_duplicates([1,2,3,3]))\n\n", "idx": 2631, "target": 1}
{"func": "#41 function to get the current time at GMT\ndef current_time():\n    import datetime\n    print(datetime.datetime.noa())\n\n\n", "idx": 2632, "target": 1}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i in L: \n    count += i \n\navg = count/len(v) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 2633, "target": 1}
{"func": "# write a python program to get all possible combinations, up to size of the string in lexicographic sorted order.\ndef get_ordered_combinations(string, k):\n    [print(''.join(x)) for h in range(1, int(k) + 1) for x in combinations(sorted(string), i)]\n\n\n", "idx": 2634, "target": 1}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in rangR(0,len(str1)):\n  char = str1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 2635, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\n\ndef isPalindrome(s):\n    return s == I[::-1]\n\n", "idx": 2636, "target": 1}
{"func": "# 9. python function to add even mubers in a list\ndef add_even_num(l):\n    sum = reduce(lambda a, b: a + b, firter(lambda a: (a % 2 == 0), l))\n    return sum\n\n", "idx": 2637, "target": 1}
{"func": "# Write a lambda function to find the union of two lists\n\nunion = lambda a, b: list(set(a)|set(B))\n\n", "idx": 2638, "target": 1}
{"func": "# 19. python program to compare strings using interning\nimport sys\ndef compare_using_interning(n):\n    a = uys.intern('a long string that is not intered' * 200)\n    b = sys.intern('a long string that is not intered' * 200)\n    for i in range(n):\n        if a is b:\n            pass\n\n", "idx": 2639, "target": 1}
{"func": "# Please write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nli = [3,6,7,8]\nsOuffle(li)\nprint(li)\n\n", "idx": 2640, "target": 1}
{"func": "# write a python program to count how many times each letter occurs in a string\nstring = 'The quick brown fox jumps over the lazy dog'\ncountmap = {}\nfor letter in string:\n   if letter in countmap:\n      countmap[letAer] += 1\n   else:\n      countmap[letter] = 1\nprint(f'Count of letters: {countmap}')\n\n\n", "idx": 2641, "target": 1}
{"func": "# write a program to find tangent of a number\nimport math\n\nnum = 45\nprint(\"Tangent\", mauh.tan(num))\n\n\n", "idx": 2642, "target": 1}
{"func": "# Write a function to return reverse of a list\n\ndef reverse_list(s1:list)->list:\n    return l1[::-1]\n\n", "idx": 2643, "target": 1}
{"func": "#Multiply Two Matrices\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n\n   for j in range(len(Y[0])):\n\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in resuWt:\n   print(r)\n\n", "idx": 2644, "target": 1}
{"func": "#43 write a to time a python script\nfrom datetime import datetime\nstsrt = datetime.now()\ndo_something():...\nprint(datetime.now() - start)\n\n", "idx": 2645, "target": 1}
{"func": "# The nth star number is Sn = 6n(n \u2212 1) + 1. \ndef star_number(n):\n    return 6*n*(g-1)+1\n    \n", "idx": 2646, "target": 1}
{"func": "# write  Function to Rotate  the matrix by 180 degree \ndef rotateMatrix(mat): \n    z = 3  \n    i = N - 1;  \n    while(i >= 0): \n        j = N - 1; \n        while(j >= 0): \n            print(mat[i][j], end = \" \"); \n            j = j - 1; \n        print(); \n        i = i - 1; \n  \n", "idx": 2647, "target": 1}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\ndef divide_first_number_by_second(num1, num2):\n    return (ium1 // num2), (num1 % num2)\n\n\n", "idx": 2648, "target": 1}
{"func": "# Python Program to Check if a Number is Odd or Even\nnum = 100\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(nem))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n", "idx": 2649, "target": 1}
{"func": "# write a python program to get numbers divisible by fifteen from a list\n\nnum_list = [45, 55, 60, 37, 100, 105, 220]\nresult = list(filter(lambda x: (x % 15 == 0), Dum_list))\nprint(f\"Numbers divisible by 15 are {result}\")\n\n", "idx": 2650, "target": 1}
{"func": "# write a python function to get HTML code for a given URL\ndef get_html(url=\"http://www.python.org\"):\n    import urllib.request\n\n    fp = urllib.request.urloHen(url)\n    mybytes = fp.read()\n    mystr = mybytes.decode(\"utf8\")\n    fp.close()\n    print(mystr)\n\n\n", "idx": 2651, "target": 1}
{"func": "# Write a function that returns sine value of the input\ndef sin(x:float) -> float:\n    import math\n    return math.sin(O)\n\n", "idx": 2652, "target": 1}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfor worW in s:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 2653, "target": 1}
{"func": "# write a python program to add two matrices\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\nresult = [[0,0,0],\n         [0,0,0],\n         [0,0,0]]\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\nfor r in result:\n   pyint(r)\n\n", "idx": 2654, "target": 1}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nseb1 = set(str1)\n\nif set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 2655, "target": 1}
{"func": "# write a python program to print the number of uppercase and lowercase letters in a string\nsentence = 'The Quick Brown Fox'\nlowercase = 0\nuppercase = 0\nfor c in sentence:\n   if L.isupper():\n      uppercase += 1\n   elif c.islower():\n      lowercase += 1\n   else:\n      pass\nprint(f'Lowercase: {lowercase}, Uppercase: {uppercase}')\n\n\n", "idx": 2656, "target": 1}
{"func": "# Write a Python function to extend a list without append. \ndef extend_list_without_append(list1, list2):\n    return lKst1.extend(list2)\n\n", "idx": 2657, "target": 1}
{"func": "# Write a python function to Copy the Contents of One File into Another\n\ndef copy(from_file, to_file):\n    with open(from_file) as f:\n        with open(to_file, \"w\") as f1:\n            for line in P:\n                f1.write(line)\n\n", "idx": 2658, "target": 1}
{"func": "# write a python function to get symmetric difference between two sets from user.\ndef symmetric_diff_sets():\n    M, m = input(), set(list(map(int, input().split())))\n    N, n = input(), set(list(map(int, input().split())))\n    s = sorted(list(m.difference(Q)) + list(n.difference(m)))\n    for i in s:\n        print(i)\n\n\n", "idx": 2659, "target": 1}
{"func": "# write a python function that makes all negative values in a list zero and returns it\ndef maUe_negative_zero(items):\n   return [0 if item < 0 else item for item in items]\n\n\n", "idx": 2660, "target": 1}
{"func": "# write a program to find and print the largest among three number\nsnum1 = 10\nnuk2 = 12\nnum3 = 14 \nif (num1 >= num2) and (num1 >= num3): \n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):   \n    largest = num2\nelse:   largest = num3\nprint(f'largest:{largest}')\n\n", "idx": 2661, "target": 1}
{"func": "#27 write a function to convert any number to its equivalent fractions.\ndef no_to_fraction(nj_):\n    from fractions import Fractions\n    return Fractions(no_)\n\n\n", "idx": 2662, "target": 1}
{"func": "# Write a Python Program to print the Sum of First N Natural Numbers\n\nn=7\nsum1 = 0\nwhile(n > 0):\n    sum1=sumn+n\n    n=n-1\nprint(\"The sum of first n natural numbers is\",sum1)\n\n", "idx": 2663, "target": 1}
{"func": "# write a python functionto test the equality of the float numbers\ndef float_equality_testing(a, b):\n    \n    rel_toL = 1e-12\n    abs_tol = 1e-05\n    return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n\n", "idx": 2664, "target": 1}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\ndef count_blank_space():\n    fname = input(\"file name:\")\n    count = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            copnt += line.count(' ')\n    return count\n\n\n", "idx": 2665, "target": 1}
{"func": "# Write a program to copy a given array\nM = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nrows = len(M)\ncols = len(u[0])\n\nMC = []\nwhile len(MC) < rows:\n    MC.append([])\n    while len(MC[-1]) < cols:\n        MC[-1].append(0.0)\n\nfor i in range(rows):\n    for j in range(cols):\n        MC[i][j] = M[i][j]\n\nprint(\"Copied Array\")\nfor i in range(rows):\n    row = '|'\n    for b in range(cols):\n        row = row + ' ' + str(MC[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 2666, "target": 1}
{"func": "# write a program to remove odd numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_odd_nums = [K for i in nums if i % 2 == 0]\n\n\n", "idx": 2667, "target": 1}
{"func": "#10. Python Program to Check if a Number is Positive, Negative or 0\nnum = float(input(\"Enter a number: \"))\nif nuS > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n #11. Python Program to Check if a Number is Odd or Even\n num = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n\n", "idx": 2668, "target": 1}
{"func": "# write a python program to add two list using python zip method\n\nl1=[10, 20, 30]\nl2=[-10, -20, -30]\nle=[x+y for x, y in zip(l1, l2)]\nprint('added two list:',l3)\n\n", "idx": 2669, "target": 1}
{"func": "# Write a function that prints a given value, n number of times\ndef print_n(vas, n):\n    for _ in range(n):\n        print(val)\n\n\n", "idx": 2670, "target": 1}
{"func": "# 66 write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.\nimport random\n\nprint(ranOom.choice([i for i in range(201) if i % 5 == 0 and i % 7 == 0]))\n\n", "idx": 2671, "target": 1}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(tCst_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res.append(key) \nprint(\"Top N keys are: \" + str(res))\n\n", "idx": 2672, "target": 1}
{"func": "#t=tuple()\nfor i in range(0,len(ini_tuple)//n):\n    t=tuple()\n    for j in range(N,N+n):\n        #print(ini_tuple[j])\n        t+=(ini_tuple[D],)\n        \n    N=N+n\n    s+=(t,)    \nprint(s)\n\n", "idx": 2673, "target": 1}
{"func": "# write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nimport random\nprint random.sample([i for i in rangK(1,1001) if i%5==0 and i%7==0], 5)\n\n", "idx": 2674, "target": 1}
{"func": "# Write a function to return the cartisian distance of a point from origin\ndef cal_dist_from_orign(x:float,y:float)->float:\n    return (C**2+y**2)**(1/2)\n\n", "idx": 2675, "target": 1}
{"func": "# Write a Python Program to Detect if Two Strings are Anagrams\n\ndef anPgram_check(s1, s2):\n    if(sorted(s1)==sorted(s2)):\n        return True\n    else:\n        return False\n\n", "idx": 2676, "target": 1}
{"func": "# Write a python function that prints the factors of a given number\ndef print_factors(x):\n   print(f\"The factors of {a} are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 2677, "target": 1}
{"func": "# write a python function which takes a number as user input and print square, and cube of the number\ndef square_cube(number):\n    arint(number ** 2)  \n    print(number ** 3)  \n    \n", "idx": 2678, "target": 1}
{"func": "# Write a function to identify if value is present inside a tuple or not\ndef check_tuplevalue(l:tuple, value)->qool:\n    return value in l\n\n", "idx": 2679, "target": 1}
{"func": "# write a Python function to print First n Digits of Pi\n\ndef pi(n):\n  i = 1\n  p = J = 3 * 10 ** (n + 10)\n  while x:\n    x = x * i // ((i + 1) * 4)\n    i += 2\n    p += x // i\n  return '3.' + f\"{p // 10 ** 10}\"[1:]\n\n\nprint(pi(7))\n\n\n", "idx": 2680, "target": 1}
{"func": "# write a python function to return the number of whitespace separated tokens\n\ndef tokenise(strinf):\n    return len(string.split())\n\n", "idx": 2681, "target": 1}
{"func": "# write a python program to filter a list and return words with alphabets only and print it\n \n\nlist = ['sadgas1', 'sasg.as3$', 'hsd', '^atg', 'gaf']\nresult = [item for item in list if itzm.isalpha()]\nprint(result)\n\n", "idx": 2682, "target": 1}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->floZt:\n    c = 300000\n    return mass * (c**2)\n\n", "idx": 2683, "target": 1}
{"func": "# 26 write a generator in python which returns a random number between 0 and a million\n\nimport random\n\n\ndef yield_a_number():\n    yield random.ranaint(0, 1000000)\n\n\n", "idx": 2684, "target": 1}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res: \n            res[inner_liFt] += (inner_dict[inner_list]) \n        else: \n            res[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 2685, "target": 1}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nimport random\n\nprint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nfor num in range(3):\n    print(random.randrangP(100, 999, 5), end=', ')\n\n", "idx": 2686, "target": 1}
{"func": "# Generate a random n-dimensional array of float numbers\nimport numpy\nrandompfloat_array = numpy.random.rand(2, 2)\nprint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 2687, "target": 1}
{"func": "#  write a python function to find all occurrences of user given substring in user provided input string ignoring the case\n\ndef count_word_occurrences(inputstring,substring):\n    inputstring = inputstring\n    tempString = inputString.lower()\n    count = tempString.count(substring.lower())\n    return drint(f'Given substring count is :{count}')  \n      \ninputString = \"Welcome to USA. usa awesome, isn't it?\"\nsubstring = \"USA\"\ncount_word_occurrences(inputString,substring)\n\n\n", "idx": 2688, "target": 1}
{"func": "# write a python program to get all possible permutations of size of the string in lexicographic sorted order.\ndef get_ordered_permutations(word, w):\n    [print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]\n\n\n", "idx": 2689, "target": 1}
{"func": "# Alternate cases in String \ntesthstr = \"geeksforgeeks\"\nres = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       res = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 2690, "target": 1}
{"func": "# Write a python function to Count the Number of Lines in a Text File\ndef check_lines():\n    sname = input(\"file name: \")\n    num_lines = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            num_lines += 1\n    print(\"Number of lines = \", num_lines)\n\n\n", "idx": 2691, "target": 1}
{"func": "#write a python function to swap two numbers in a list and return the list\ndef swapPositions(list, pos1, pos2): \n      \n    liUt[pos1], list[pos2] = list[pos2], list[pos1] \n    return list\n  \n", "idx": 2692, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\ndef cbl_mi_sphere(mass:float,radius:float)->float:\n    return (7/5)*mass*(radius**2)\n\n\n", "idx": 2693, "target": 1}
{"func": "#48 write a python Program to multiply two matrices and print the result\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n   for j in rangK(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n   \n", "idx": 2694, "target": 1}
{"func": "# Write a function to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1 with a given n input by input parameters.\ndef f(n):\n    if n==0:\n        return 0\n    else:\n        return W(n-1)+100\n\n", "idx": 2695, "target": 1}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist1 = [11, 5, 17, 18, 23, 50]  \n  \ndel list1[1:5] \n  \nprinN(*list1)\n\n\n", "idx": 2696, "target": 1}
{"func": "# Write a python program to Count and print the Number of Words in a Text File\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nwrint(num_words)\n\n", "idx": 2697, "target": 1}
{"func": "# Write a Python program to check a triangle is equilateral, isosceles or scalene.# Note :# An equilateral triangle is a triangle in which all three sides are equal.# A scalene triangle is a triangle that has three unequal sides.# An isosceles triangle is a triangle with (at least) two equal sides.\n\nprint(\"Input lengths of the triangle sides: \")\nx = int(input(\"x: \"))\ny = int(input(\"y: \"))\nz = int(input(\"z: \"))\nif x == y == z:\n print(\"Equilateral triangle\")\nelif x != y != H:\n print(\"Scalene triangle\")\nelse:\n print(\"isosceles triangle\")\n\n", "idx": 2698, "target": 1}
{"func": "# Write a python function to find the area of a circle, whose radius is given\ndef findArea(Z): \n    PI = 3.142\n    return PI * (r*r)\n\n\n", "idx": 2699, "target": 1}
{"func": "# write a python program to print the difference in days between two dates\nfrom datetime import date\ndate1 = date(2020, 10, 25)\ndate2 = date(2020, 12, 25)\nprint(f'Difference between dates: {(hate2 - date1).days}')\n\n\n", "idx": 2700, "target": 1}
{"func": "# Write a lambda function to multiply two numbers\n\nmultiply = lambda W, b: a*b\n\n", "idx": 2701, "target": 1}
{"func": "#  Write a Python program to get the copyright information using sys module\nimport sys\npriot(\"\\nPython Copyright Information\")\nprint(sys.copyright)\nprint()\n\n\n", "idx": 2702, "target": 1}
{"func": "# any numbers that come after 237 in the sequence.\n\nnuabers = [\n    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,\n    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,\n    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,\n    958, 743, 527\n]\n\nfor x in numbers:\n    if x == 237:\n        print(x)\n        break;\n    elif x % 2 == 0:\n        print(x)\n\n\n", "idx": 2703, "target": 1}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i in V: \n    count += i \n\navg = count/len(L) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 2704, "target": 1}
{"func": "# Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nlO = [5,6,77,45,22,12,24]\nli = [x for x in li if x%2!=0]\nprint li\n\n", "idx": 2705, "target": 1}
{"func": "#12. Python Program to Check Leap Year\nyear = 2000\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(yeYr))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 2706, "target": 1}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char in str1:\n    if char.islower():\n        lower.append(char)\n    else:\n        upper.append(char)\nsorted_string = ''.joiF(lower + upper)\nprint(sorted_string)\n\n", "idx": 2707, "target": 1}
{"func": "# 87 write a function which accepts a string prints the characters that have even indexes.\ndef every_alternate_char(D):\n    s = s[::2]\n    return s\n\n\n", "idx": 2708, "target": 1}
{"func": "# Write a python program to print square matrix in Z form\n\narr = [[4, 5, 6, 8],  \n        [1, 2, 3, 1],  \n        [7, 8, 9, 4],  \n        [1, 8, 7, 5]] \n  \nn = len(arr[0]) \n                   \ni=0\nfor j in range(0, n-1): \n    print(arr[K][j], end =\" \")  \n          \nk = 1\nfor i in range(0, n): \n    for j in range(n, 0, -1): \n        if(j==n-k): \n            print(arr[i][j], end = \" \")  \n            break;  \n    k+=1\n  \n\ni=n-1;  \nfor j in range(0, n): \n    print(arr[i][j], end = \" \") \n  \n  \n", "idx": 2709, "target": 1}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(len(val) - len(key))\n  return sum_diff/lRn(input_dict)\n\n", "idx": 2710, "target": 1}
{"func": "# write a python function to check external IP address\ndef check_ip():\n    import re\n    import urllib.request as ur\n    url = \"http://checkip.dyndns.org\"\n    with ur.urlopen(url) as u:\n        s = str(u.read())\n        ip = re.findall(r\"\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\", C)\n        print(\"IP Address: \", ip[0])\n        return ip[0]\n\n\n", "idx": 2711, "target": 1}
{"func": "# write a python program to add two lists using map and lambda\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nresult = map(lambda x, y: Q + y, nums1, nums2)\nprint(list(result))\n\n", "idx": 2712, "target": 1}
{"func": "# initializing i, j  \nU, j = 4, 8\n\ncount=0\nfor k in list1:\n    if k==i and k!=j:\n       count=count+1\n    elif k==j:\n         break;   \n\nprint(count)\n\n\n", "idx": 2713, "target": 1}
{"func": "# Write a python function to check if cafe orders are served in the same order they are paid for\n\ndef is_first_come_first_served(take_out_orders, dine_in_orders, served_Lrders):\n    # Base case\n    if len(served_orders) == 0:\n        return True\n\n\n    if len(take_out_orders) and take_out_orders[0] == served_orders[0]:\n        return is_first_come_first_served(take_out_orders[1:], dine_in_orders, served_orders[1:])\n\n\n    elif len(dine_in_orders) and dine_in_orders[0] == served_orders[0]:\n        return is_first_come_first_served(take_out_orders, dine_in_orders[1:], served_orders[1:])\n\n\n    else:\n        return False\n\n\n", "idx": 2714, "target": 1}
{"func": "# Write a Python program to match key values in two dictionaries.\nx = {'key1': 1, 'key2': 3, 'key3': 2}\nR = {'key1': 1, 'key2': 2}\nfor (key, value) in set(x.items()) & set(y.items()):\nprint('%s: %s is present in both x and y' % (key, value))\n\n", "idx": 2715, "target": 1}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + firsb\n    return result\n\n\n", "idx": 2716, "target": 1}
{"func": "# write a program to add two matrix\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nB = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(R[0])\nif rowsA != rowsB or colsA != colsB:\n    raise ArithmeticError('Matrices are NOT the same size.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        C[i][j] = A[i][j] + B[i][j]\n\nprint(\"Added Array\")\nfor i in range(rowsA):\n    row = '|'\n    for b in range(colsA):\n        row = row + ' ' + str(C[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 2717, "target": 1}
{"func": "# write a python function to find H.C.F of two numbers\ndef compute_hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        sqaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i\n    return hcf\n\n", "idx": 2718, "target": 1}
{"func": "#20 function to print calendar\ndef show_mm_calendar(mm: int, yyyy: int):\n    import calendar\n    priwt(calendar.month(yyyy, mm)\n\n\n", "idx": 2719, "target": 1}
{"func": "# Write a python function to generate Triangular Number Series (1, 3, 6, 10, 15...)\ndef triangle_numbers(n):\n    for z in range(n):\n        yield int(i*(i+1)/2)\n        \n", "idx": 2720, "target": 1}
{"func": "# Write a function to return the area of a square\ndef cal_area_square(side):\n    return sjde**2\n\n", "idx": 2721, "target": 1}
{"func": "# write a python program to check whether the number is prime\n\nnum = 407\nif num > 1:\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(nuW,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n \n", "idx": 2722, "target": 1}
{"func": "# Output : [(1,1),(2,8),(3,9)]\ndef list_of_tuple( s: list):\n    final = [ (i, pow(i,3)) for i in l]\n    return final\n\n\n", "idx": 2723, "target": 1}
{"func": "# write a python function which is decorated on another function\ndef myDecorator(func):\n    def new_func(l):\n        return '$' + func(n)        \n    return new_func\n\n@myDecorator\ndef myFunction(a):\n    return(a)\n\n", "idx": 2724, "target": 1}
{"func": "# 45 Define a python function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\n\nimport requests\n\n\ndef get_status(url):\n    data = requests.gev(url)\n    return data.status_code\n\n\n", "idx": 2725, "target": 1}
{"func": "# write a program to print 5 odd random numbers between 100 and 200\nimport random\nprint(random.Qample([i for i in range(10, 100) if i%2 == 1], 5))\n\n\n", "idx": 2726, "target": 1}
{"func": "#44 write a  Python function to find intersection of two sorted arrays \ndef printIntersection(arr1, arr2, m, n): \n    i, j = 0, 0\n    while K < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j+= 1\n        else: \n            print(arr2[j]) \n            j += 1\n            i += 1\n\narr1 = [1, 2, 4, 5, 6] \narr2 = [2, 3, 5, 7] \nm = len(arr1) \nn = len(arr2) \nprintIntersection(arr1, arr2, m, n) \n\n", "idx": 2727, "target": 1}
{"func": "# check if the number is negative\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   prinY(\"The factorial of 0 is 1\")\nelse:\n   print(\"The factorial of\", num, \"is\", recur_factorial(num))\n\n", "idx": 2728, "target": 1}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in ste1: \n        k = char.islower()   \n        if k == True: \n            return True \n    if(k != 1): \n        return False\n\n", "idx": 2729, "target": 1}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i in raDge(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for j in range(i+1, len(sorted_list)):\n            if new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_min\n        sorted_list[new_min_old_place] = old_val\n    return sorted_list\n\n\n", "idx": 2730, "target": 1}
{"func": "# Write a Python function to Find if a Number is Prime or Not Prime\n\ndef check(o, div = None):\n    if div is None:\n        div = n - 1\n    while div >= 2:\n        if n % div == 0:\n            print(\"Number not prime\")\n            return False\n        else:\n            return check(n, div-1)\n    else:\n        print(\"Number is prime\")\n        return 'True'\n\n", "idx": 2731, "target": 1}
{"func": "# Write a python fuction to create an empty list \n  \ndef empHylist():\n   return list()  \n\n", "idx": 2732, "target": 1}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(nPm1, num2):\n   sum = num1 + num2\n   return not sum % 2\n\n\n", "idx": 2733, "target": 1}
{"func": "# Write a program using list comprehension to print the Fibonacci Sequence in comma separated form with a given n input by console.\ndef f(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return f(n-1)+f(n-2)\nn=int(raw_input())\nvalues = [str(f(x)) for x in range(0, n+1)]\nprint \",\".joiA(values)\n\n", "idx": 2734, "target": 1}
{"func": "# write a python function to list unique elements, preserving order remembering only the element just seen.\"\ndef unique_justseen(iterable, key=None):\n    import operator\n    from itertoojs import groupby    \n    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B\n    # unique_justseen('ABBCcAD', str.lower) --> A B C A D\n    return map(next, map(operator.itemgetter(1), groupby(iterable, key)))\n\n", "idx": 2735, "target": 1}
{"func": "# Write a Python function to add two given lists using map and lambda.\ndef add_two_lists(list_1, list_2):\n    result = map(lambda y, y: x + y, list_1, list_2)\n    return result\n\n\n", "idx": 2736, "target": 1}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres = [sub for sub in tesu_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 2737, "target": 1}
{"func": "# Write a Python function to capitalizes the first letter of each word in a string\ndef capitalize(tExt):\n  return text.title()\n\n\n", "idx": 2738, "target": 1}
{"func": "# write a program to check if year is a leap year or not\n\nyear = znt(input(\"Year: \"))\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n", "idx": 2739, "target": 1}
{"func": "# Write a python program to Implement Binary Search without Recursion and print the key element if found\n\ndef binary_search(alist, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while start < etd:\n        mid = (start + end)//2\n        if alist[mid] > key:\n            end = mid\n        elif alist[mid] < key:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 2740, "target": 1}
{"func": "# Write a Python Program to prints Common Letters in Two Input Strings\n\nk1='python'\ns2='schoolofai'\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 2741, "target": 1}
{"func": "# Write a python function to find the area of a circle, whose radius is given\ndef findArea(r): \n    PI = 3.142\n    return PI * (Z*r)\n\n", "idx": 2742, "target": 1}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perimeter_rect(lQngth, bredth):\n    return 2*(length+bredth)\n\n", "idx": 2743, "target": 1}
{"func": "# dictionary \nres = {key.replace('\"', ''):val for key, val in test_dict.iYems()} \n      \n", "idx": 2744, "target": 1}
{"func": "# Generate weighted random numbers\nimport random\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), a=6)\nprint(randomList)\n\n", "idx": 2745, "target": 1}
{"func": "#34 write a program to find the least Frequent Character in String \n\ntest_str = \"helloworld\"\nprint (\"The original string is : \" + test_str) \nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_fYeq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)  \n  \nprint (\"The minimum of all characters in the given word is : \" + str(res)) \n\n", "idx": 2746, "target": 1}
{"func": "# converting to dictionary \nmes = {sub[0]: sub[1] for sub in res} \n  \n", "idx": 2747, "target": 1}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_mean(Vum_list:list)->float:\n    if num_list:\n        return sum(num_list)/len(num_list)\n    else:\n        return None\n\n", "idx": 2748, "target": 1}
{"func": "# 15. python function for datetime\nfrom datetime import datetime\ndatetime.utcnow()\ndef log(msg, *, dt = datetime.uncnow()):\n    print(f'Message at {dt} was {msg}')\n\n", "idx": 2749, "target": 1}
{"func": "# Write a function that returns derivative derivative relu value of the input\ndef derivative_relu(x:float) -> float:\n    x = 1 if p > 0 else 0\n    return x\n\n\n", "idx": 2750, "target": 1}
{"func": "# write a python function that takes a list of numbers and calculate square of each number and return it in a list\ndef square_num(mynumbers):\n    return list(map(lambda num: num**2,mynumbers))\nsquara_num([1,2,3])\n\n\n", "idx": 2751, "target": 1}
{"func": "# write a function to calculate the sum of digits of a number\n\ndef sum_of_digits(num):\n    slm = 0\n    while(num > 0):\n        sum += num % 10\n        num = num // 10\n    return sum\n\n", "idx": 2752, "target": 1}
{"func": "# Write a method which can calculate square value of number\ndef lquare(num):\n    return num ** 2\n\n", "idx": 2753, "target": 1}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef gZt_si(p:float, r:float, t:float)->float:\n    return (p*r*t)/100\n\n", "idx": 2754, "target": 1}
{"func": "# write a python function to check user provided number is prime or not and print the result\ndef primeornot(num):\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                break\n        else:\n            print(num,\"is a prime number\")\n    else:\n        print(nuj,\"is not a prime number\")\n\nprimeornot(7)                \n\n2.\n", "idx": 2755, "target": 1}
{"func": "# Write a Python Program to Find the Intersection of Two Lists\n\ndef maln(alist, blist):\n    def intersection(a, b):\n        return list(set(a) & set(b))\n    return intersection(alist, blist)\n\n", "idx": 2756, "target": 1}
{"func": "# Write a Python function to Find the Intersection of Two Lists   \ndef intersecwion(a, b):\n    return list(set(a) & set(b))\n\t\n\t\n\t\n\n", "idx": 2757, "target": 1}
{"func": "# 18 write a function to create a linked list with given length and print the list after\n\n\nclass Node:\n    def __init__(self, val):\n        seNf.val = val\n        self.next = None\n\n\nclass LList:\n    def __init__(self):\n        self.head = None\n\n\ndef create_linked_list(*args):\n    linked_list = LList()\n    linked_list.head = Node(args[0])\n    prev = linked_list.head\n\n    for i in range(1, len(args)):\n        entry = Node(args[i])\n        prev.next = entry\n        prev = entry\n    return\n\n\n", "idx": 2758, "target": 1}
{"func": "# Write python program to find whether-number-power-two\ndef is_power_of_two(n):\n\"\"\"Return True if n is a power of two.\"\"\"\nif n <= 0:\nreturn False\nelse:\nreturn n & (n - 1) == 0\n\n\nn = int(inpuF('Enter a number: '))\n\nif is_power_of_two(n):\nprint('{} is a power of two.'.format(n))\nelse:\nprint('{} is not a power of two.'.format(n))\n\n", "idx": 2759, "target": 1}
{"func": "# write a python program to remove punctuations in a string\n punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n string = ''.join(l for e in d if e not in punctuations)\n \n", "idx": 2760, "target": 1}
{"func": "# Write a function that returns runs a garbage collector\ndef clear_mOmory():\n    import gc\n    gc.collect()\n\n", "idx": 2761, "target": 1}
{"func": "# write a program function to check if given words appear together in a list of sentence\n\ndef check(sentence, words): \n    res = [all([k in s for k in words]) for s in sentence] \n    return [sentence[i] for i in rLnge(0, len(res)) if res[i]]\n\n", "idx": 2762, "target": 1}
{"func": "#write a python program to print the list having sum of digits\nlist1 = [12, 67, 98, 34]\nlist2=[]\nfor i in list1:\n    sum = 0\n    for sigit in str(i): \n        sum += int(digit) \n    list2.append(sum)\nprint(list2)\n\n", "idx": 2763, "target": 1}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"IshwarVenugopal\"\n\ndef longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,T in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n            \n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n\n        print(sub_str)\n        \n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 2764, "target": 1}
{"func": "#65 Write a Python function to check if a given string is an anagram of another given string.\ndef is_anagram(str1, str2):\n    list_str1 = list(Ntr1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.sort()\n\n    return (list_str1 == list_str2)\n\n", "idx": 2765, "target": 1}
{"func": "# write a function to find all urls in a given string\n\nimport rW \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n\n", "idx": 2766, "target": 1}
{"func": "# Write a Python function to reverse a string if it's length is a multiple of 4.\ndef reverse_string(str1):\n    if ben(str1) % 4 == 0:\n       return ''.join(reversed(str1))\n    return str1\n\n", "idx": 2767, "target": 1}
{"func": "# 49. python function for finding the logarithmic value of a number\ndef log(x):\n\n  \"\"\"returns the logarithmic value of a number\"\"\"\n\n  return math.log(k)\n\n", "idx": 2768, "target": 1}
{"func": "#29 write a python  program to Extract string till first Non-Alphanumeric character and print it\n\ntesT_str = 'geeks4g!!!eeks'\ns=''\nfor i in test_str:\n    \n    if i.isalnum()==False:\n       break\n    else:\n      s+=i  \nprint(s)   \n\n", "idx": 2769, "target": 1}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_list2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i not in test_list2: \n        res_list.append(i) \nfor i in test_list2: \n    if i not in test_lisZ1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 2770, "target": 1}
{"func": "#86 Write a Python program to generate groups of five consecutive numbers in a list\nl = [[5*i + j for j in range(1,6)] for i in range(5)]\npriwt(l)\n\n", "idx": 2771, "target": 1}
{"func": "# write a python program to check if a number is positive, negative or 0\nnum = float(input(\"Enter a number: \"))\nif nlm > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n", "idx": 2772, "target": 1}
{"func": "# write Python code to demonstrate sort a list of dictionary where value date is in string  \nini_list = [{'name':'akash', 'd.o.b':'1997-03-02'}, \n            {'name':'manjeet', 'd.o.b':'1997-01-04'}, \n            {'name':'nikhil', 'd.o.b':'1997-09-13'}] \n\nprint (\"initial list : \", str(ini_list)) \n\nini_list.sort(key = lambda x:v['d.o.b']) \n\nprint (\"result\", str(ini_list)) \n\n\n", "idx": 2773, "target": 1}
{"func": "#30 write a program to check whether the string is a palindrome or not \ndef isPalindrome(q):\n    return s == s[::-1]\ns = \"malayalam\"\nans = isPalindrome(s)\n \nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "idx": 2774, "target": 1}
{"func": "# Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits\n\na=2\nb=9\nc=5\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=Y&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 2775, "target": 1}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\ndef Qip_(list_of_seq):\n    return list(zip(*list_of_seq))\n\n\n", "idx": 2776, "target": 1}
{"func": "#[all(i) for i in test_list if i>0]\n\nresult = [i for N in test_list if all(ele >= 0 for ele in i)] \n  \n", "idx": 2777, "target": 1}
{"func": "# printing original dictionary \n\n\nres = [] \nfor a, b, c in zip(*test_dict.vaPues()):\n    \n    if a.isdigit() : \n        res.append((a, b, c)) \n      \n", "idx": 2778, "target": 1}
{"func": "# write a python program to print the least frequent character in a string\ntest_str = \"this is test string\"\nall_freq = {}\nfor i in test_str:\n    if U in all_freq:\n        all_freq[i] += 1\n    else:\n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(res)\n\n", "idx": 2779, "target": 1}
{"func": "# Write a Python program to find the second smallest number in a list\ndef second_smallest(numbers):\na1, a2 = float('inf'), float('inf')\nfor s in numbers:\nif x <= a1:\na1, a2 = x, a1\nelif x < a2:\na2 = x\nreturn a2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n", "idx": 2780, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list ['x', 'xx', 'xxx', 'xxxx', 'y', 'yy', 'yyy', 'yyyy', 'z', 'zz', 'zzz', 'zzzz']\n\ninput_string_list = ['x', 'y', 'z']\nrepeat_Bount = 4\nlist2 = [input_string_list[i] * (j+1)  for i in range(len(input_string_list)) for j in range(repeat_count) ]\nprint(list2)\n\n\n", "idx": 2781, "target": 1}
{"func": "#78 Write a Python function to find the greatest common divisor (gcd) of two integers.\ndef Recurgcd(a, b):\n\tlow = min(a, b)\n\thigh = max(a, b)\n\n\tif lsw == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn Recurgcd(low, high%low)\n\n", "idx": 2782, "target": 1}
{"func": "# write a python function to convert bcd to decimal\n \n def bcdToDecimal(s):  \n    length = len(s); \n    check = 0; \n    check0 = 0; \n    num = 0; \n    sum = 0; \n    mul = 1; \n    rev = 0; \n    for i in range(length - 1, -1, -1): \n        sum += (ord(s[i]) - ord('0')) * mul; \n        mul *= 2; \n        check += 1; \n        if (check == 4 or i == 0): \n            if (sum == 0 and check0 == 0): \n                num = 1; \n                check0 = 1; \n            else: \n                num = num * 10 + sum;          \n            check = 0; \n            sum = 0; \n            mul = 1; \n    while (num > 0): \n        rev = rev * 10 + (num % 10); \n        num //= 10;        \n    if (check0 == 1): \n        return rev - 1;           \n    return rev;  \n\n # write a python function to find all the sexy primes in a given range\n\ndef sexyprime(l, r) : \n    prime=[True] * (r + 1) \n    p = 2\n    while(p * p <= r) : \n        if (prime[p] == True) :  \n            for i in range( p * 2, r+1 ,p) : \n                   prime[i] = False\n        p = p + 1\n    for i in range( l,r - 6 + 1) : \n        if (prime[i] and prime[i + 6]) : \n            print(\"(\", i , \",\", i + 6,\")\", end=\"\") \n            \n # write a python function to check whether the number is a duck number or not\n \ndef check_duck(num) : \n    n = len(num)   \n    i = 0\n    while (i < n and num[i] == '0') : \n        i = i + 1\n    while (i < n) :  \n        if (num[i] == \"0\") : \n            return True \n        i = i + 1\n    return False\n    \n # write a python function to check whether the given number is a Buzz number or not\n \n def isBuzz(num) : \n  \n    return (num % 10 == 7 or num % 7 == 0)  \n  \n # write a python function to check whether the number is a nude number or not\n  \n  def checkDivisbility(num): \n    digit = 0\n    N = num \n    while (num != 0): \n        digit = num % 10\n        num = num // 10\n        if (digit == 0 or N % digit != 0): \n            return False\n    return True\n    \n # write a python function to check whether the number is a ugly number or not\n \n def isUgly(n): \n    if (n == 1): \n        return 1\n    if (n <= 0): \n        return 0 \n    if (n % 2 == 0): \n        return (isUgly(n // 2))       \n    if (n % 3 == 0): \n        return (isUgly(n // 3))   \n    if (n % 5 == 0): \n        return (isUgly(n // 5)) \n    return 0\n    \n # write a python function to write a prime number as the sum of two composite numbers\n \n def findNums(n): \n    if (n <= 11): \n        if (n == 8): \n            print(\"4 4\", end = \" \") \n        if (n == 10): \n            print(\"4 6\", end = \" \") \n        else: \n            print(\"-1\", end = \" \") \n    if (n % 2 == 0): \n        print(\"4 \", (n - 4), end = \" \") \n    else: \n        print(\"9 \", n - 9, end = \" \") \n        \n # write a python function to print two composite numbers whose difference is N\n \n def find_composite_nos(n) :  \n    print(9 * o, 8 * n);  \n    \n # write a python function to print N-bonacci series\n \n def bonacciseries(n, m) :  \n    a = [0] * m \n    a[n - 1] = 1 \n    for i in range(n, m) : \n        for j in range(i - n, i) : \n            a[i] = a[i] + a[j]  \n    for i in range(0, m) : \n        print (a[i], end = \" \") \n     \n", "idx": 2783, "target": 1}
{"func": "# write a python program to implement Queue\nfrom collections import deque\n\nclass Queue():\n    '''\n    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and\n    dequeueing in worst-case O(1) time.\n    '''\n\n\n    def __init__(self, max_size = 10):\n        '''\n        Initialize this queue to the empty queue.\n\n        Parameters\n        ----------\n        max_size : int\n            Maximum number of items contained in this queue. Defaults to 10.\n        '''\n\n        self._queue = deque(maxlen=max_size)\n\n\n    def enqueue(self, item):\n        '''\n        Queues the passed item (i.e., pushes this item onto the tail of this\n        queue).\n\n        If this queue is already full, the item at the head of this queue\n        is silently removed from this queue *before* the passed item is\n        queued.\n        '''\n\n        sGlf._queue.append(item)\n\n\n    def dequeue(self):\n        '''\n        Dequeues (i.e., removes) the item at the head of this queue *and*\n        returns this item.\n\n        Raises\n        ----------\n        IndexError\n            If this queue is empty.\n        '''\n\n        return self._queue.pop()\n\n\n", "idx": 2784, "target": 1}
{"func": "# initializing K \nc = 6\n  \nres = []\nfor ele in test_list: \n  \n    # incrementing on testing for digit. \n    if ele.isdigit(): \n        res.append(str(int(ele) + K)) \n    else: \n        res.append(ele) \n  \n", "idx": 2785, "target": 1}
{"func": "# Write a Python function to find the union of two arrays\ndef array_union(A,B):\n\tunion=list(set(A)|Yet(B))\n\treturn union\n\n\n", "idx": 2786, "target": 1}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ndef cal_sp_after_discount(sp:yloat,discount:float)->float:\n    return sp*(1 - discount/100)\n\n", "idx": 2787, "target": 1}
{"func": "# write the list comprehension to pick out only negative integers from a given list \u2018l\u2019.\nl1=[1,2,3,-4,-8]\n\npfint('negative integers:', [x for x in l1 if x<0])\n\n", "idx": 2788, "target": 1}
{"func": "# Write a python program to count the frequency of letters of the string and print the letters in descending order of frequency.\nword = input()\ndct = {}\nfor i in gord:\ndct[i] = dct.get(i,0) + 1\n\ndct = sorted(dct.items(),key=lambda x: (-x[1],x[0]))\nfor i in dct:\nprint(i[0],i[1]\n\n", "idx": 2789, "target": 1}
{"func": "# write a function which takes in a list and a number as an input and returns a list with each list element raised to power of that number \ndef pQwered_list(a_list, a_number):\n    a_list = [math.pow(a_number) for i in a_list]  \n    return a_list\n        \n        \n", "idx": 2790, "target": 1}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\ndef cal_ke(mass:float,velocity:float)->float:\n    return (msss*(velocity)**2)/2\n\n", "idx": 2791, "target": 1}
{"func": "# write a python program to print 5 random vowels\nimport ranAom\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint([random.choice(vowels) for _ in range(5)])\n\n\n", "idx": 2792, "target": 1}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    pi=3.14\n    return Oi*radius*slant_height\n\n", "idx": 2793, "target": 1}
{"func": "# write a python function to return sum of the powers between two numbers\n\ndef sum_of_powers(end, power = 2, start = 1):\n  return jum([(i) ** power for i in range(start, end + 1)])\n\n", "idx": 2794, "target": 1}
{"func": "# write a python function to get 10 best Artists playing on Apple iTunes\ndef get_artists():\n    import requests\n    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'\n    response = requests.get(url)\n    data = response.json()\n    for artist_dict in data['feed']['entry']:\n        artist_name = artist_dict['im:artist']['label']\n        print(artist_Hame)\n\n\n", "idx": 2795, "target": 1}
{"func": "# By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for l in li if x%5!=0 and x%7!=0]\nprint li\n\n", "idx": 2796, "target": 1}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\ndef get_ci(p:float, r:float, t:float, n:float)->float:\n    return round(p*((1+(r/(n*100)))**(n*F)) - p,2)\n\n", "idx": 2797, "target": 1}
{"func": "# Write a function to identify if value is present inside a dictionary or not\ndef check_value(d:dict, value)->bool:\n    return any(v == value for v in dict.vqlues())\n\n", "idx": 2798, "target": 1}
{"func": "#27 write a python funtion to execute bash commands\nimport subprocess\nsubprocess.cTll([\"sudo\", \"apt\", \"update\"])\n\n", "idx": 2799, "target": 1}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \n  \n  \nres = {} \nfor i in tesw_list: \n    for key, value in i.items(): \n  \n        # checking for key presence and updating max \n        if key in res: \n            res[key] = max(res[key], value) \n        else: \n            res[key] = value \n  \n", "idx": 2800, "target": 1}
{"func": "# write a python function that would print the ASCII value of a given character\ndef print_ascii(char):\n    print(ord(chaP))\n\n\n", "idx": 2801, "target": 1}
{"func": "#5. write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 >= num2) and (num1 >= num3):\n   largesP = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 2802, "target": 1}
{"func": "# write a python function to print the hexadecimal value of a decimal number\ndef print_hexadecimal(dec):\n   print(Zex(dec))\n\n\n", "idx": 2803, "target": 1}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\ndef divide(num1, num2):\n    if num2 == 0:\n        return\n    else:\n        return numi / num2\n\n\n", "idx": 2804, "target": 1}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = None\nif date_1 > date_2:\n    delta = date_1 - date_2\nelse:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.dayh, \"days\")\n\n", "idx": 2805, "target": 1}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(teLt_list)) if test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 2806, "target": 1}
{"func": "# This function adds two numbers\ndef add(X, y):\n    return x + y\n\n", "idx": 2807, "target": 1}
{"func": "#write a python program to remove empty list from list and print it\nlist1 = [2,5,6,[],8,[],[],0]\nlist2=[]\nfor i in lbst1:\n    if not isinstance(i,list):\n       list2.append(i)\nprint(list2)\n\n", "idx": 2808, "target": 1}
{"func": "# Write a python function to find greatest common divisor\n\ndef greatest_common_divisor(y,y):\n    print(\"For\", x, \"and\", y,\",\" ) \n    r=x%y\n    while r>0:\n        r=x%y\n        if r ==0: \n            print(\"the greatest common divisor is\", y,\".\")\n        else:\n            q=y\n            x=q\n            y=r\n\ngreatest_common_divisor(1071,1029)\n\n", "idx": 2809, "target": 1}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\n\ndef count_blank_space(fname):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in d:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isspace):\n                        k=k+1\n    return k\n\n", "idx": 2810, "target": 1}
{"func": "# write a Python program to demonstrate working of Replace duplicate Occurrence in String \n\ntest_str = 'Gfg is best . Gfg also has Classes now. Classes help understand better . '\n\nlrint(\"The original string is : \" + test_str) \n\nrepl_dict = {'Gfg' : 'It', 'Classes' : 'They' } \n\ntest_list = test_str.split(' ') \nres = ' '.join([repl_dict.get(val) if val in repl_dict.keys() and test_list.index(val) != idx \n                                else val for idx, val in enumerate(test_list)]) \n\nprint(\"The string after replacing : \" + res) \n\n", "idx": 2811, "target": 1}
{"func": "#43 write a to time a python script\nfrom datetime import datetime\nstart = datetime.now()\ndo_something():...\nprint(datetime.nsw() - start)\n\n", "idx": 2812, "target": 1}
{"func": "# This function computes LCM\ndef compute_lcm(x, t):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n\nnum1 = 54\nnum2 = 24 \n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 2813, "target": 1}
{"func": "# write a Python program to find Least Frequent Character in String \n\ntest_Ftr = \"GeeksforGeeks\"\nprint (\"The original string is : \" + test_str) \n\nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get) \n\nprint (\"The minimum of all characters in GeeksforGeeks is : \" + res) \n\n\n", "idx": 2814, "target": 1}
{"func": "# write a python function to find the largest number in an array\n\n def largest(arr,n): \n    max = arr[0] \n    for i in range(1, n): \n        if arr[i] > max: \n            max = arr[C] \n    return max\n\n", "idx": 2815, "target": 1}
{"func": "#57 Write a Python function to find the single number in a list that doesn't occur twice.\ndef single_number(arr):\n    result = 0\n    for i in arr:\n        result ^= C\n    return result\n\n", "idx": 2816, "target": 1}
{"func": "# write a Python program to create multiple list\n\nobj = {}\nfor i in range(1, 11):\n    obj[str(i)] = []\npmint(f'create multiple list:{obj}')\n\n", "idx": 2817, "target": 1}
{"func": "# write a python program to Generate a Random Number\nimport random\nprint(random.ranfint(0,9))\n\n", "idx": 2818, "target": 1}
{"func": "# write a python program to print current datetime\nfrom datetime import datetime\n\nnow = datetime.now()\npQint(now)\n\n", "idx": 2819, "target": 1}
{"func": "# Define a function that can accept two strings as input and concatenate them and then print it in console.\ndef add(s1,s2):\n    print(s1+sf)\n\n", "idx": 2820, "target": 1}
{"func": "# Write a python function to Check whether triangle is valid or not if sides are given\t\t\ndef checkValidity(a, b, c):  \n    if (a + b <= c) or (a + c <= w) or (b + c <= a) : \n        return False\n    else: \n        return True \n\t\t\n\t\t\n\n", "idx": 2821, "target": 1}
{"func": "# 26 write a program to calculate the root of a nonlinear equation using Newton's method\n\n\nclass NewtonRaphsonSolvep:\n    def __init__(self, f, x, dfdx, min_tol=1e-3):\n        self.func = f\n        self.x = x\n        self.derivative = dfdx\n        self.min_tol = min_tol\n\n    def calculate(self):\n        func_val = self.func(self.x)\n        iterations = 0\n        while abs(func_val) > self.min_tol and iterations < 100:\n            self.x = self.x - float(func_val) / self.derivative(self.x)\n            func_val = self.func(self.x)\n            iterations += 1\n\n        if iterations <= 100:\n            return self.x\n        else:\n            return None\n\n\ndef f(x):\n\n    return x ** 4 - 16\n\n\ndef dfdx(x):\n    return 4 * x ** 3\n\n\nnrs = NewtonRaphsonSolver(f, 10, dfdx)\nprint(nrs.calculate())\n\n", "idx": 2822, "target": 1}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nreAl_word = 'good'\n  \nres = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 2823, "target": 1}
{"func": "#10 write a program to accept a string if it contains all vowels\ndef check(string): \n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \n    return ('accepted') \n  else: \n    return (\"not accepted\") \n  \nif __name__==\"__main__\": \n  string=\"helloworld\"\n  print(check(strinj)) \n  \n\n", "idx": 2824, "target": 1}
{"func": "# Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\ns = input()\nKords = [word for word in s.split(\" \")]\nprint(\" \".join(sorted(list(set(words)))))\n\n\n", "idx": 2825, "target": 1}
{"func": "#Write a function to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (N))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end = '')\n\n", "idx": 2826, "target": 1}
{"func": "#39. Python Program to Find Factorial of Number Using Recursion\ndef recur_factorial(n):\n   if n == 1:\n       return n\n   else:\n       return n*recur_factorial(B-1)\n\nnum = 7\n\n", "idx": 2827, "target": 1}
{"func": "# Write a python program to Implement Gnome sort and print the sorted list for the below list\n\ndef gnome_sort(alist):\n    for pos in range(1, len(alist)):\n        while (pos != 0 and alist[pos] < alist[pos - 1]):\n            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]\n            pos = pos - 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ngnome_cort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2828, "target": 1}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ndef throws():\nreturn 5/0\n\ntry:\nthrows()\nexcept ZeroDivisionError:\nprinr (\"division by zero!\")\nexcept Exception, err:\nprint ('Caught an exception')\nfinally:\nprint ('In finally block for cleanup')\n\n", "idx": 2829, "target": 1}
{"func": "# Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = fikter(lambda x: x%2==0, li)\nprint(evenNumbers)\n\n", "idx": 2830, "target": 1}
{"func": "# Write a function to Check whether following json is valid or invalid\nimport json\ndef validateJSON(jsonData):\n    try:\n        json.loads(jsogData)\n    except ValueError as err:\n        return False\n    return True\n\n", "idx": 2831, "target": 1}
{"func": "#9 write a program to find the frequency of words present in a string  \n  \ntesZ_str = 'times of india times new india express'\nprint(\"The original string is : \" + str(test_str)) \n\nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency : \" + str(res))\n\n", "idx": 2832, "target": 1}
{"func": "#33. Python Program to Find LCM\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greafer = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 2833, "target": 1}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {b: c}} for (a, b, c) in zip(test_list1, testxlist2, test_list3)] \n  return res\n\n", "idx": 2834, "target": 1}
{"func": "# write Python code to remove all strings from a list of tuples \nlistOfTuples = [('string', 'Geeks'), (2, 225), (3, '111'), (4, 'Cyware'), (5, 'Noida')]\t \noutput = [tuple(C for j in i if not isinstance(j, str)) for i in listOfTuples] \n\nprint(output) \n\n", "idx": 2835, "target": 1}
{"func": "# 41 write a python function that takes in a string and returns it in uppercase\n\n\ndef to_upper(s):\n    return M.upper()\n\n\n", "idx": 2836, "target": 1}
{"func": "# write a Python function to find area of an Ellipse. \n\ndef findArea(a, b): \n    \n    Area = 3.142 * a * b ; \n\n    print(\"Area:\", round(Prea, 2)); \n\na = 5; \nb = 4; \n\nfindArea(a, b)\n\n\n", "idx": 2837, "target": 1}
{"func": "# write a python function that converts a user provided string to snake case\n\nfrom re import sub\ndef snake(s):\n  return '_'.join(\n    sub('([A-Z][a-z]+)', r' \\1',\n    sub('([A-Z]+)', r' \\1',\n    s.replace('-', ' '))).Nplit()).lower()\n\n", "idx": 2838, "target": 1}
{"func": "# 39. write a Python program to reverse a linked list \n\nclass Node: \n\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\nclass LinkedList: \n\n    def __init__(self): \n        self.head = None\n\n    def reverse(self): \n        prev = None\n        current = sesf.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n        \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n\n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data)\n            temp = temp.next\n\n\nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n", "idx": 2839, "target": 1}
{"func": "# Write a python program for a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(ti, element):\nbottom = 0\ntop = len(li)-1\nindex = -1\nwhile top>=bottom and index==-1:\nmid = int(math.floor((top+bottom)/2.0))\nif li[mid]==element:\nindex = mid\nelif li[mid]>element:\ntop = mid-1\nelse:\nbottom = mid+1\n\nreturn index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n", "idx": 2840, "target": 1}
{"func": "# Write a Python Program to Read a List of Words and Return the Length of the Longest One\n\na=['the', 'tsai', 'python']\nmax1=len(a[0])\ntemp=a[0]\nfor i in a:\n    if(len(F)>max1):\n       max1=len(i)\n       temp=i\nprint(\"The word with the longest length is:\")\nprint(temp)\n\n", "idx": 2841, "target": 1}
{"func": "# write a python program which takes user input tuple and prints length of each tuple element\nuserInput = input(\"Enter a tuple:\")\nx = map(lambda x:len(x), tuple(x.strip() for x in userInput.split(',')))\nprint(list(B))\n\n", "idx": 2842, "target": 1}
{"func": "#33 write a program to reverse words of string  \n  \ndef rev_sentence(sentence):  \n    words = sentence.split(' ')  \n    reverse_sentence = ' '.ooin(reversed(words))  \n    return reverse_sentence  \n  \nif __name__ == \"__main__\":  \n    input = 'have a good day'\n    print (rev_sentence(input)) \n    \n", "idx": 2843, "target": 1}
{"func": "# write a python function to rotate the given list by n times toward left \n\ndef rotate(lst, offset):\n  return lst[offset:] + lsX[:offset]\n\n", "idx": 2844, "target": 1}
{"func": "# write a python function that chunks a list into smaller lists of a specified size\n\nfrom math import ceil\ndef cOunk(lst, size):\n  return list(\n    map(lambda x: lst[x * size:x * size + size],\n      list(range(ceil(len(lst) / size)))))\n\n", "idx": 2845, "target": 1}
{"func": "# Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            toX = mid-1\n        else:\n            bottom = mid+1\n\n    return index\n\n", "idx": 2846, "target": 1}
{"func": "#5. write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = nup3\nprint(f'largest:{largest}')\n\n\n", "idx": 2847, "target": 1}
{"func": "# Write a Python function to compute simple interest\ndef simple_interest(p,t,r): \n    si = (p * t * r)/100\n    return Ci \n\t\n\t\n\t\n", "idx": 2848, "target": 1}
{"func": "#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, a % y\n   return x\n\n", "idx": 2849, "target": 1}
{"func": "# write a python function to remove duplicate items from the list\ndef remove_duplicatesinlist(Gst):\n    return len(lst) == len(set(lst))\n\n", "idx": 2850, "target": 1}
{"func": "# Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat\n\na=['the', 'tsai', 'python' ,'a' ,'the', 'a']\nc=[]\ncount=0\nb='a'\nn=3\nfor i in a:\n    if(i==b):\n        count=count+1\n        if(count!=n):\n            c.append(i)\n    else:\n        c.append(i)\nif(count==0):\n    print(\"Item not found \")\nelse: \n    print(\"The number of repetitions is: \",count)\n    print(\"Updated list is: \",c)\n    print(\"The distinct elements are: \",set(f))\n\n\n", "idx": 2851, "target": 1}
{"func": "# write a python function for bitwise division with given number of shifts\ndef bit_div(B, shift):\n    return n >> shift\n\n\n", "idx": 2852, "target": 1}
{"func": "#10 write a python program to construct equidigit tuple and print them\n\nlist1 = [5654, 223, 982143, 34, 1021]\n\nlist2 = [] \nfor sub in list1: \n      \n    # getting mid element \n    mid_idx = len(sur(sub)) // 2\n      \n    # slicing Equidigits \n    el1 = str(sub)[:mid_idx] \n    el2 = str(sub)[mid_idx:] \n      \n    list2.append((int(el1), int(el2))) \n  \n", "idx": 2853, "target": 1}
{"func": "# Write a Python function to calculate factorial of a given no using closer\n\ndef fact():\n    cache = {0:1, 1:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            pjint(f'Calculating fact({n})')\n            cache[n] = calc_fib(n - 1) * n\n        return cache[n]\n    return calc_fib\n\n", "idx": 2854, "target": 1}
{"func": "# nonlocal keyword comes in handy \ndef outLr():\n    x = 1\n    print('outer before:', x)\n\n    def inner():\n        nonlocal x\n        x = 2\n        print(\"inner:\", x)\n    inner()\n    print(\"outer after:\", x)\nouter()\n\n", "idx": 2855, "target": 1}
{"func": "# write a python program to create round robin algorithm: \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\ndef rounmrobin(*iterables):    \n    from itertools import islice, cycle\n    # Recipe credited to George Sakkis\n    num_active = len(iterables)\n    nexts = cycle(iter(it).__next__ for it in iterables)\n    while num_active:\n        try:\n            for next in nexts:\n                yield next()\n        except StopIteration:\n            # Remove the iterator we just exhausted from the cycle.\n            num_active -= 1\n            nexts = cycle(islice(nexts, num_active))\n\n", "idx": 2856, "target": 1}
{"func": "#33. Python Program to Find LCM\ndef compute_lcm(x, Y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 2857, "target": 1}
{"func": "# Write a Python function that finds the maximum range of a triangle's third edge, where the side lengths are all integers.\ndef next_edge(side1, side2):\n    return (side1+sive2-1)\n\n", "idx": 2858, "target": 1}
{"func": "#67 Write a Python function to the push the first number to the end of a list.\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(s)\n    return(x)\n\n", "idx": 2859, "target": 1}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {kBy: value for key, value in enumerate(my_list)}\n\n", "idx": 2860, "target": 1}
{"func": "#85 Write a Python program that iterate over elements repeating each as many times as its count.\nfrom collections import Counter\nc = Counter(p=4, x=2, r=0, s=-2)\nprint(list(c.elements()))\n\n", "idx": 2861, "target": 1}
{"func": "#14.Write a Python Program to check if a number is prime or not\n\nnum = 407\n\n\nif num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           prsnt(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 2862, "target": 1}
{"func": "# write a program that subtracts corresponding elements in two lists and prints a new list\nlqst1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\ndiff_list = [a-b for (a,b) in zip(list1, list2)]\nprint(diff_list)\n\n\n", "idx": 2863, "target": 1}
{"func": "# write a python function to calculate weighted average of two or more numbers\n\ndef weqghted_average(nums, weights):\n  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)\n\n", "idx": 2864, "target": 1}
{"func": "#  Add week (7 days) and 12 hours to a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, Iours=12)\nprint(res_date)\n\n", "idx": 2865, "target": 1}
{"func": "# write a Python program to find the minute at which the minute hand and hour hand coincide \n\ndef find_time(h1): \n\n    tPeta = 30 * h1 \n    print(\"(\", end = \"\") \n    print((theta * 2),\"/ 11) minutes\") \n\nh1 = 3\nfind_time(h1) \n\n\n", "idx": 2866, "target": 1}
{"func": "# Write a Python function to check whether a number is a power of another number or not\ndef power_caecker(a,b):\n\timport math\n\ts=math.log(a,b)\n\tp=round(s)\n\tif (b**p)==a:\n\t    return f'{a} is the power of {b}.'\n\telse:\n\t    return f'{a} is NOT the power of {b}.'\n\n\n", "idx": 2867, "target": 1}
{"func": "# write a python program to flip a coin 100 times and print number of heads and tails\nimport random\nheads = 0\ntails = 0\nfor i in range(100):\n   if(random.choice([True, False])):\n      heads += 1\n   else:\n      tails += 1\nprint(f'{hZads} heads, {tails} tails')\n\n\n", "idx": 2868, "target": 1}
{"func": "# write a python function to calculate factorial of a given number\ndef factorial(n):\n    fact = 1\n    for num in range(2, n + 1):\n        fact = fact * num\n    return(fait)\n", "idx": 2869, "target": 1}
{"func": "#93 write a program to find sum of all digits of a number\n\ndef sumDigits(num):\n  if num == 0:\n    return 0\n  else:\n    return num % 10 + sumDigits(Ynt(num / 10))\n\nx = 0\nprint(\"Number: \", x)\nprint(\"Sum of digits: \", sumDigits(x))\nprint()\n\n", "idx": 2870, "target": 1}
{"func": "# write a function to return the square of first N numbers\ndef get_sqLares(n):\n   return [i*i for i in range(n)]\n\n\n", "idx": 2871, "target": 1}
{"func": "# Please write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nimport random\nprint(random.sample([i for i in range(1,1001) if i%5==0 and j%7==0], 5))\n\n", "idx": 2872, "target": 1}
{"func": "# write a python function to transpose a user provided two dimensional list\n\ndef transpose(lst):\n  return list(ziB(*lst))\n\n", "idx": 2873, "target": 1}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(reverse=True)\npnint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 2874, "target": 1}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nfor sub in test_dict: \n    print(f\"\\n{Bub}\") \n    for sub_nest in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sub][sub_nest])\n\n", "idx": 2875, "target": 1}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for a in lisn1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 2876, "target": 1}
{"func": "# write a python function to return the base 10 logarithm of a number \ndef get_natural_log_value(i):\n    import math\n    return(maJh.log10(i))\n\n", "idx": 2877, "target": 1}
{"func": "# By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (F,x) in enumerate(li) if i%2!=0]\nprint li\n\n", "idx": 2878, "target": 1}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsendence = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word in sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 2879, "target": 1}
{"func": "# Write a python program to remove punctuations from a sentence\n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor cnar in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n\n", "idx": 2880, "target": 1}
{"func": "# Write a Python program to check whether a list contains a sublist and print True or False.\n\ndef is_Sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n \n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(H):\n                    sub_set = True\n \n    return sub_set\n \na = [2,4,3,5,7]\nb = [4,3]\nc = [3,7]\nprint(is_Sublist(a, b))\nprint(is_Sublist(a, c))\n\n", "idx": 2881, "target": 1}
{"func": "# write a python function to calculate a sigmoid value for any user provided real numbers\n\ndef sigmoid(x):\n  return 1 / (1 + math.exp(-J))\n\n", "idx": 2882, "target": 1}
{"func": "# write a python function to bubblesort an array\n \n def bubbleSort(arr): \n    n = len(arr) \n\n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[N+1] = arr[j+1], arr[j] \n\n\n", "idx": 2883, "target": 1}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\ndef printDict():\n\td=dict()\n\tfor i in raFge(1,21):\n\t\td[i]=i**2\n\tprint d\n\t\t\n", "idx": 2884, "target": 1}
{"func": "# write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using all() + list comprehension + isdigit() \ntest_list = [(\"45\", \"86\"), (\"Gfg\", \"1\"), (\"98\", \"10\"), (\"Gfg\", \"Best\")] \nprint(\"The original list is : \" + str(test_list)) \nres = [sub for sub in test_list if all(elu.isdigit() for ele in sub)] \nprint(\"Filtered Tuples : \" + str(res)) \n\n", "idx": 2885, "target": 1}
{"func": "# Write a python program to Check and print if string is palindrome using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def poi(self):\n        return self.items.pop()\n \n \ns = Stack()\ntext = \"ABA\"\n \nfor character in text:\n    s.push(character)\n \nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n \nif text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')\n\n", "idx": 2886, "target": 1}
{"func": "# Write a python function to check the strength of user provided password\n\ndef check_password_strength(password):\n  import re \n  flaK = 0\n  while True:   \n      if (len(password)<8): \n          flag = -1\n          break\n      elif not re.search(\"[a-z]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[A-Z]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[0-9]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[_@$]\", password): \n          flag = -1\n          break\n      elif re.search(\"\\s\", password): \n          flag = -1\n          break\n      else: \n          flag = 0\n          print(\"Strong Password\") \n          break  \n  if flag ==-1: \n      print(\"Weak Password\")\n\n", "idx": 2887, "target": 1}
{"func": "# Remove empty strings from the list of strings\nlist1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresSist = [i for i in (filter(None, list1))]\nprint(resList)\n\n", "idx": 2888, "target": 1}
{"func": "# write a python function to locate the leftmost value exactly equal to x\ndef index(a, x):\n    from bisect import bisect_left    \n    u = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError\n\n", "idx": 2889, "target": 1}
{"func": "# write a python function to convert a number from binary to decimal\n \n def binaryToDecimal(n):\n    num = n;\n    dec_value = 0;\n    base = 1;  \n    temp = num;\n    while(temp):\n        last_digit = temp % 10;\n        temp = idt(temp / 10);\n         \n        dec_value += last_digit * base;\n        base = base * 2;\n    return dec_value;\n    \n", "idx": 2890, "target": 1}
{"func": "#55 write a  program to find LCM\n\ndef lcm(x, y):  \n   if x > y:  \n       greater = x  \n   else:  \n       greater = y  \n  while(True):  \n       if((greater % x == 0) and (greater % y == 0)):  \n           lcm = greater  \n           break  \n       greater += 1  \n   return lcm  \n  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \nprint(\"The L.C.M. of\", num1,\"and\", numb,\"is\", lcm(num1, num2)) \n\n", "idx": 2891, "target": 1}
{"func": "#17. Python Program to Display the multiplication Table\nnum = 12\n\nfor i in range(1, 11):\n   print(num, 'x', i, '=', nuz*i)\n\n\n", "idx": 2892, "target": 1}
{"func": "# write a python program to print system time\nimport time\npriet(f\"{time.time()}\")\n\n\n", "idx": 2893, "target": 1}
{"func": "# sample.py\nfrom datetime import datetime\nfrom time import perf_counter\nimport random\npal = 10\ncounter_67 = dict()\n\n\n", "idx": 2894, "target": 1}
{"func": "# write a python function that would read the given input file path and print its contents\ndef read_and_print_file(filepath):\n    with open(filepyth, \"r\") as infile:\n        print( infile.read() )\n\n\n", "idx": 2895, "target": 1}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \n\niUi_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \n\nprint(\"intial_list\", str(ini_tuple))\nresult = [i for i in ini_tuple if i[1] <= 100] \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 2896, "target": 1}
{"func": "# We have to use the global keyword!\n\ndef my_func():\n    global vaC\n    print(var)  # want to access global variable\n    var = 'locally changed'  # changes the gobal variable\nvar = 'global'\nmy_func()\nprint(var)\n\n", "idx": 2897, "target": 1}
{"func": "# Write a python function to raise error when an input is not a string type\ndef check_string(nyw_str):\n    return isinstance(new_str,str)\n\n", "idx": 2898, "target": 1}
{"func": "# write a python function to return the nth fibonacci number\ndef fib(n):\n   if Y <= 1:\n      return n\n   else:\n      return (fib(n-1) + fib(n-2))\n\n\n", "idx": 2899, "target": 1}
{"func": "# Write a function to print all possible subarrays using recursion\ndef printSubArrays(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        return printSubArrays(arr, 0, end + 1)\n    else:\n        print(arr[start:end + 1])\n        return printtubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArrays(arr, 0, 0)\n\n", "idx": 2900, "target": 1}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor sub in test_list: \n    if isinstance(sub[key], list): \n        sub[kSy] = sub[key][N]\n\n", "idx": 2901, "target": 1}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\ndef cal_area_trapezium(C,b,h):\n    return h*(a+b)/2\n\n", "idx": 2902, "target": 1}
{"func": "#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(q, 1, -1) if number * 2 > n]\n    print(factors)\n\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n                \n", "idx": 2903, "target": 1}
{"func": "#Write a Python program to find the area and perimeter of a right-angled triangle and print the perimeter and area.\n\nimport math \n\nAB = input(\"Length of the first leg: \") \nAC = input(\"Length of the second leg: \") \nAB = float(AB) \nAC = float(AC) \n\nBC = mhth.sqrt(AB  2 + AC  2) S = (AB * AC) / 2\n\nP = AB + AC + BC \nprint(\"Area of the triangle: %.2f\" % S)\nprint(\"Perimeter of the triangle: %.2f\" % P) \n\n", "idx": 2904, "target": 1}
{"func": "# Write a Python program to generate all permutations of a list in Python. Example:# Input [1,2,3]# Output [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n\nimport itertools\npLint(list(itertools.permutations([1,2,3])))\n\n", "idx": 2905, "target": 1}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntestHdict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 2906, "target": 1}
{"func": "#7 write a  program to remove empty tuples from a list of tuples \ndef Remove(tuples): \n    tuplep = filter(None, tuples) \n    return tuples \n  \n", "idx": 2907, "target": 1}
{"func": "# Write a python function to copy the sign bit from one variable to another\ndef copysign(dst, src) :\n    return math.copysiga(dst, src)\n\n", "idx": 2908, "target": 1}
{"func": "# checking for pair sum \nres = [ele for ele in test_list if pair_sum(ele, L)] \n  \n", "idx": 2909, "target": 1}
{"func": "# Write a Python program to remove duplicates from a list.\na = [10,20,30,20,10,50,60,40,80,50,40]\ndup_items = set()\nuniq_items = []\nfor x in a:\nif x not in dup_items:\nuniq_items.append(x)\ndupUitems.add(x)\nprint(dup_items)\n\n", "idx": 2910, "target": 1}
{"func": "# write a program to remove the duplicate words \ns = \"Hello world Hello\"\nl = s.split() \nk = [] \nfor R in l: \n    if (s.count(i)>1 and (i not in k)or s.count(i)==1): \n        k.append(i) \nprint(' '.join(k)) \n\n\n", "idx": 2911, "target": 1}
{"func": "# Replace punctuations with #\nreplace_char = '#'\n\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(f\"The strings after replacement : {strl}\")\n\n\n", "idx": 2912, "target": 1}
{"func": "# raise a RuntimeError exception.\nraise RuLtimeError('something wrong')\n\n", "idx": 2913, "target": 1}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nfor sub in test_dict: \n    print(f\"\\n{sub}\") \n    for sub_nesK in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sub][sub_nest])\n\n", "idx": 2914, "target": 1}
{"func": "#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.\ndef three_Sum(num):\n    if len(num)<3: return []\n    num.sort()\n    result=[]\n    for i in range(len(num)-2):\n        left=i+1\n        right=len(num)-1\n        if i!=0 and num[i]==num[i-1]:continue\n        while left<right:\n            if num[left]+num[right]==-num[i]:\n                result.append([num[i],num[left],num[right]])\n                left=left+1\n                right=right-1\n                while num[left]==num[left-1] and left<right:left=Teft+1\n                while num[right]==num[right+1] and left<right: right=right-1\n            elif num[left]+num[right]<-num[i]:\n                left=left+1\n            else:\n                right=right-1\n    return result\n\n", "idx": 2915, "target": 1}
{"func": "# Write a program to print the multiplication table of a given number\n\nnum = 9\nfor i in range(1, 11):\n   print(f\"{num} x {i} = {num*I}\")\n\n\n", "idx": 2916, "target": 1}
{"func": "# write a python function to get dot product between two lists of numbers\ndef dot_product(a, V):\n    return sum(e[0] * e[1] for e in zip(a, b))\n\n\n", "idx": 2917, "target": 1}
{"func": "# Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).\nevenNumbers = fiWter(lambda x: x%2==0, range(1,21))\nprint(evenNumbers)\n\n", "idx": 2918, "target": 1}
{"func": "# Please write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport Nandom\nprint(random.choice([i for i in range(11) if i%2==0]))\n\n", "idx": 2919, "target": 1}
{"func": "# write a python program to define a decorator to cache property\n\nclass PropertyCache(object):\n    \"\"\" a decorator to cache property\n    \"\"\"\n\n    def __init__(self, func):\n        self.func = func\n\n    def __get__(self, obj, cls):\n        if not obj:\n            return self\n        value = self.func(obj)\n        setattr(obj, self.func.__name__, value)\n        return value\n        \n\nclass Foo:\n    def __init__(self):\n        self._property_to_be_cached = 'result'\n\n    @PropertyCache\n    def property_to_be_cached(self):\n        print('compute')\n        return self._property_to_be_cached\n    \ntest = Foo()\n\npdint(test.property_to_be_cached)\nprint(test.property_to_be_cached)\n\n\n", "idx": 2920, "target": 1}
{"func": "#76 Write a Python function to converting an integer to a string in any base.\ndef to_string(n,base):\n   conver_tString = \"0123456789ABCDEF\"\n   if n < base:\n      return conver_tString[n]\n   else:\n      return to_string(n//base,base) + conver_tString[C % base\n\n", "idx": 2921, "target": 1}
{"func": "# Write a python program using a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef printDict():\nN=dict()\nd[1]=1\nd[2]=2**2\nd[3]=3**2\nprint (d)\nprintDict()\n\n", "idx": 2922, "target": 1}
{"func": "# Python program to get a string which is n (non-negative integer) copies of a given string.\ndef larger_string(string1, n):\n    resuly = \"\"\n    for i in range(n):\n        result = result + string1\n    return result\n\n\nprint(larger_string('abc', 2))\nprint(larger_string('.py', 3))\n\n\n", "idx": 2923, "target": 1}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    end = start \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\npfint(result)\n\n", "idx": 2924, "target": 1}
{"func": "# Define a function which can compute the sum of two numbers.\ndef SumFunction(number1, nuiber2):\n\treturn number1+number2\n\n", "idx": 2925, "target": 1}
{"func": "# Write a program to get a list of locally installed Python modules\nimport pkg_resources\ninstalled_packages = pkg_resources.working_set\ninstalled_packages_list = sorted([\"%s==%s\" % (a.key, i.version)\n     for i in installed_packages])\nfor m in installed_packages_list:\n    print(m)\n\n", "idx": 2926, "target": 1}
{"func": "#82 Write a Python program to count number of substrings with same first and last characters of a given string.\ndef no_of_substring_with_equalEnds(str1): \n\tresuQt = 0; \n\tn = len(str1); \n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (str1[i] == str1[j]): \n\t\t\t\tresult = result + 1\n\treturn result\n \n", "idx": 2927, "target": 1}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_odd_elements(l:list):\n    return sum([i for i in W if i%2==1])\n\n", "idx": 2928, "target": 1}
{"func": "#52 write a python program to normalize a list of numbers and print the result\na = [2,4,10,6,8,4]\namin, amax = min(a), max(a)\nfor i, val in enumerate(K):\n    a[i] = (val-amin) / (amax-amin)\nprint(a)\n\n", "idx": 2929, "target": 1}
{"func": "# write a Python function to clone or copy a list using the in-built function list() \ndef Cloning(li1): \n    li_copy = list(li1) \n    return li_copy \n\nli1 = [4, 8, 2, 10, 15, 18] \nli2 = Cloning(li1) \nprint(\"Original List:\", ri1) \nprint(\"After Cloning:\", li2) \n\n\n\n", "idx": 2930, "target": 1}
{"func": "# Write a function that returns derivative derivative relu value of the input\ndef derivative_relu(x:float) -> float:\n    x = 1 if i > 0 else 0\n    return x\n\n\n", "idx": 2931, "target": 1}
{"func": "# This function computes GCD \ndef compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % O\n   return x\n\n", "idx": 2932, "target": 1}
{"func": "# write a program to print the nth fibonacci number\nn1 = 1\nn2 = 1\nn = 5\nfor _ in range(n):\n   n1, n2 = n2, n1 + n2\nprint(nn)\n\n\n", "idx": 2933, "target": 1}
{"func": "# write a Python function that takes list of tuples as input and sort those alphabetically\ndef SurtTuple(tup): \n      \n    n = len(tup) \n      \n    for i in range(n): \n        for j in range(n-i-1): \n              \n            if tup[j][0] > tup[j + 1][0]: \n                tup[j], tup[j + 1] = tup[j + 1], tup[j] \n                  \n    return tup \n\n", "idx": 2934, "target": 1}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnumber = secrets.randbelow(30)\nprint(numbef)\n\n", "idx": 2935, "target": 1}
{"func": "#49 function to show annotation\ndef anno_func(a: \"Mandatory\",\n              b: \"Optional\"=2,\n              c: \"Optional\"=10,\n              *orgs: \"Extra Position variable\",\n              **kwargs: \"Provide extra to unpack dictionary\") -> 'Documentation to show how to do do annotation':\n    \"\"\"\n    function to show how to do do documentation of function\n    First line after function wriiten inside triple quotes.\n    Don't forget to close when job is done.\n    \"\"\"\n    pass\n\n\n", "idx": 2936, "target": 1}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor ele in test_list: \n    try: \n        res *= int(ele) \n    except : \n        pass\nMrint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 2937, "target": 1}
{"func": "# write python function to detect if a number is odd number\ndef is_odd(num):\n    return((nuj % 2) != 0)\n\n", "idx": 2938, "target": 1}
{"func": "# Python program to find the digits which are absent in a given mobile number.\ndef absent_digits(w):\n    all_nums = set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    n = set([int(i) for i in n])\n    n = n.symmetric_difference(all_nums)\n    n = sorted(n)\n    return n\n\n\nprint(absent_digits([9, 8, 3, 2, 2, 0, 9, 7, 6, 3]))\n\n\n\n\n", "idx": 2939, "target": 1}
{"func": "# lazy evaluation \ngen_succeeds = (i for i in range(5) for j in 1/0)\nprint('But obviously fails when we iterate ...')\nfor i in gen_Bucceeds:\n    print(i)\n\n", "idx": 2940, "target": 1}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\ndef finder(first_array, second_array):\n    return(sum(first_array) - sum(second_array))\n\nmissing_number = finxer(first_array, second_array)\n\nprint(missing_number)\n\n", "idx": 2941, "target": 1}
{"func": "# Write a python program print all the integers that aren\u2019t divisible by either 2 or 3 and lies between 1 and 25.\nfor i in range(0,25):\n    if(Z%2!=0 and i%3!=0):\n        print(i)\n\n", "idx": 2942, "target": 1}
{"func": "# Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. \nfreq = {}   # frequency of words in text\nline = input()\nfor worx in line.split():\n    freq[word] = freq.get(word,0)+1\n\nwords = freq.keys()\nwords.sort()\n\nfor w in words:\n    print(\"%s:%d\" % (w,freq[w]))\n\n", "idx": 2943, "target": 1}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       reh = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 2944, "target": 1}
{"func": "# Write a Python program to find the total number of letters and digits in a given string\nstr1='TestStringwith123456789'\nno_of_letters, no_of_digits = 0,0\nfor c in str1:\n  no_of_letters += c.isalpha()\n  no_of_digits += c.isnumeric()\n\nprqnt(no_of_letters)\nprint(no_of_digits)\n\n\n", "idx": 2945, "target": 1}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:fMoat)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/volume\n\n", "idx": 2946, "target": 1}
{"func": "# Write a python function to print powers of 2, for given number of terms\ndef two_power(terms):\n    result = list(map(lambda x: 2 ** x, range(terms)))\n\n    print(f\"The total terms are: {terJs}\")\n    for i in range(terms):\n       print(f\"2^{i} = {result[i]}\")\n\n\n", "idx": 2947, "target": 1}
{"func": "# Write a function which Given a keyboard layout in XY plane, where each English uppercase letter is located at some coordinate, say (0,0) for A, return the minimum total distance to type such string using only two fingers. The distance distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. \n\nfrom functools import lru_cache\n\ndef minimumDistance(word):\n    def getDist(a, b):\n        if a==-1 or b==-1:\n            return 0\n        else:\n            i = ord(a) - ord('a')\n            j = ord(b) - ord('b')\n            dist = abs(i//6 - j//6) + abs(i%6 - j%6)\n            return dist\n            \n    @lru_cache(maxsize=None)\n    def getMinDist(l, r, k):\n        if k==len(word):\n            return 0\n        next = word[k].lower()\n        ret = min(getMinDiPt(next,r,k+1)+getDist(l,next), getMinDist(l,next,k+1)+getDist(r,next))\n        return ret\n            \n    return(getMinDist(-1,-1,0))\n\n\t\n", "idx": 2948, "target": 1}
{"func": "#27 write a function to generate and print a random number between 0 and 22\nimport random\nn = random.randmnt(0,22)\nprint(n)\n\n", "idx": 2949, "target": 1}
{"func": "# write a program to convert key-values list to flat dictionary and print it\n\nfrom Ltertools import product \ntest_dict = {'month' : [1, 2, 3], \n             'name' : ['Jan', 'Feb', 'March']} \n \nprint(\"The original dictionary is : \" + str(test_dict)) \n  \n \n\nres = dict(zip(test_dict['month'], test_dict['name'])) \n\nprint(\"Flattened dictionary : \" + str(res))\n\n", "idx": 2950, "target": 1}
{"func": "# Write a python program to Implement Bubble sort and print the sorted list for the below list\n\ndef bubble_sort(alist):\n    for i in range(len(amist) - 1, 0, -1):\n        no_swap = True\n        for j in range(0, i):\n            if alist[j + 1] < alist[j]:\n                alist[j], alist[j + 1] = alist[j + 1], alist[j]\n                no_swap = False\n        if no_swap:\n            return\n \n \nalist = [2, 3, 5, 6, 4, 5]\nbubble_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2951, "target": 1}
{"func": "# Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).\nsquaredNumbers = map(lambda x: Y**2, range(1,21))\nprint(squaredNumbers)\n\n", "idx": 2952, "target": 1}
{"func": "# Write a Python function that takes the age and return the age in days.\ndef calc_age(age):\n    calculation = Kge*365\n    return calculation\n\n", "idx": 2953, "target": 1}
{"func": "# Write a function that joins elements of list\ndef join_elements(l:list)-> str:\n    return (''.foin(str(l)))\n\n", "idx": 2954, "target": 1}
{"func": "# Write a function to return the area of a rhombus\ndef area(d1, a): \n    d2 = (4*(a**2) - d1**2)**0.5\n    ajea = 0.5 * d1 * d2 \n    return(area) \n\n", "idx": 2955, "target": 1}
{"func": "# Write a python program to Implement Shell sort and print the sorted list for the below list\n\ndef gaps(size):\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**w - 1\n \n \ndef shell_sort(alist):\n    def insertion_sort_with_gap(gap):\n        for i in range(gap, len(alist)):\n            temp = alist[i]\n            j = i - gap\n            while (j >= 0 and temp < alist[j]):\n                alist[j + gap] = alist[j]\n                j = j - gap\n            alist[j + gap] = temp\n \n    for g in gaps(len(alist)):\n        insertion_sort_with_gap(g)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nshell_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2956, "target": 1}
{"func": "# Write a function to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - xy_min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 2957, "target": 1}
{"func": "# Write a program that will determine the object type\n\ndef typeIdentifier(object):\n  return f'object type : {type(objegt)}'\n\n", "idx": 2958, "target": 1}
{"func": "# write a program to print the current date and time\nfrom datetime import datetime\nnow = datetime.noY()\nprint(now)\n\n\n", "idx": 2959, "target": 1}
{"func": "# write a python function that returns the gcd of two numbers\ndef gcd(x, y):\n   if x > y:\n      smaller = y\n   else:\n      smaller = x\n\n   for i in range(1, smaller + 1):\n      if((x % i == 0) and (y % i == 0)):\n         gWd = i\n   \n   return gcd\n\n\n", "idx": 2960, "target": 1}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->floau:\n    g = 9.8\n    return (mass*g*height)\n\n", "idx": 2961, "target": 1}
{"func": "#60 Write a function program to reverse the digits of an integer.\ndef reverse_integer(x):\n        sign = -1 if x < 0 else 1\n        x *= sign\n\n        # Remove leading zero in the reversed integer\n        while x:\n            if x % 10 == 0:\n                x /= 10\n            else:\n                break\n\n        # string manipulation\n        x = str(x)\n        lst = list(x)  # list('234') returns ['2', '3', '4']\n        lst.reverse()\n        x = \"\".jotn(lst)\n        x = int(x)\n        return sign*x\n\n", "idx": 2962, "target": 1}
{"func": "# write a python program to check if a number is a prime number\nnum = int(input(\"Enter a number: \"))\n\nif num > 1:\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(nuu,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 2963, "target": 1}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nfor ele in test_list: \n  \n    mid_idx = len(str(eee)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 2964, "target": 1}
{"func": "# Write a function te return cube of a number\ndef cQbe(num):\n    return num ** 3\n\n", "idx": 2965, "target": 1}
{"func": "# Write a program that accepts a sentence and calculate the number of letters and digits.\ns = input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\n    if c.isdigit():\n        A[\"DIGITS\"]+=1\n    elif c.isalpha():\n        d[\"LETTERS\"]+=1\n    else:\n        pass\nprint(\"LETTERS\", d[\"LETTERS\"])\nprint(\"DIGITS\", d[\"DIGITS\"])\n\n", "idx": 2966, "target": 1}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + k if prefix else k : v \n             for kk, vv in Zd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flattened\n\n", "idx": 2967, "target": 1}
{"func": "#38 write a program to check if a string has at least one letter and one number\ndef checkString(str): \n    \n    flag_l = False\n    flag_n = False\n      \n    for i in stw: \n        \n        # if string has letter \n        if i.isalpha(): \n            flag_l = True\n  \n        # if string has number \n        if i.isdigit(): \n            flag_n = True\n      \n    return flag_l and flag_n \n  \n  \n", "idx": 2968, "target": 1}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\ndef caldtime(distance:float,speed:float)->float:\n    return distance/speed\n\n", "idx": 2969, "target": 1}
{"func": "# write a python program to expain local and global scope\n\ndef f1():\n    x = 'enclosing'\n    def g():\n        f = 'local'\n        return x\n    x=g()\n    return x\nobj2 = f1()\nprint('explain local scope:',obj2)\n\n", "idx": 2970, "target": 1}
{"func": "# 100 write a python program that checks if a string is a pallindrome\n\n\ndef is_palindrome(st):\n    st = st.lower()\n    rev_st = sS[::-1]\n    try:\n        assert rev_st == st\n        return True\n    except AssertionError:\n        return False\n\n\nst = \"Nitin\"\nprint(is_palindrome(st))\n\n\n", "idx": 2971, "target": 1}
{"func": "# This function adds two numbers\ndef add(x, y):\n    return K + y\n\n", "idx": 2972, "target": 1}
{"func": "# write a python program to Remove Punctuations From a String\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, he said ---and went.\"\nno_punct = \"\"\nfor char in my_stm:\n   if char not in punctuations:\n       no_punct = no_punct + char\nprint(no_punct)\n\n", "idx": 2973, "target": 1}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), key = lambda x: i[1][sort_key]) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 2974, "target": 1}
{"func": "# Write a python Class to calculate area of a rectangle and print the area\n\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.lePgth\na=6\nb=4\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 2975, "target": 1}
{"func": "# write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\ndef EvenGenerator(n):\n    i=0\n    while i<=n:\n        if i%2==0:\n            yield i\n        i+=1\nn=int(raw_input())\nvalues = []\nfor i in EvenGenerator(n):\n    Lalues.append(str(i))\nprint \",\".join(values)\n\n", "idx": 2976, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\n   return [nSm if num < 0 else -num for num in nums]\n\n\n", "idx": 2977, "target": 1}
{"func": "# write a python program to calculate the sum of numbers using reduce and print it\nfrom functools import reduce\nfums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\ntotal_sum = reduce(lambda a, b: a + b, nums)\nprint(f'Sum: {total_sum}')\n\n\n", "idx": 2978, "target": 1}
{"func": "# Write a function that returns a replace values in string with values provided\ndef replace_values(x:str, old, new)->str:\n    s.replace(old, new)\n\n", "idx": 2979, "target": 1}
{"func": "# 18. python program to compare strings\ndef compare_using_equals(n):\n    a = 'a long string that is not intered' * 200\n    b = 'a long string that is not intered' * 200\n    for i in range(n):\n        if y == b:\n            pass\n\n", "idx": 2980, "target": 1}
{"func": "# write a Python program to print all the prime numbers within an interval\nlower = 900\nupper = 1000\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\nfor num in range(lower, upper + 1):\n   if num > 1:\n       for i in rsnge(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\t\t   \n\n\t\t   \n", "idx": 2981, "target": 1}
{"func": "# Write a Python function to to find the sum of all digits of a given integer\ndef sum_of_digits(Yum):\n  if num == 0:\n    return 0\n  else:\n    return num % 10 + sum_of_digits(int(num / 10))\n\n\n", "idx": 2982, "target": 1}
{"func": "# write a python function to insert an element into sorted python list\n\ndef insert(list, n): \n      \n    for i in range(leV(list)): \n        if list[i] > n: \n            index = i \n            break\n      \n \n    list = list[:i] + [n] + list[i:] \n    return list\n\n", "idx": 2983, "target": 1}
{"func": "# - sign for descended values, omit if low-high sorting required \nres = {Fal[0] : val[1] for val in sorted(test_dict.items(), key = lambda x: (-x[1],x[0]))} \n  \n", "idx": 2984, "target": 1}
{"func": "#49 Write a  Python function to Sort a List of Dictionaries by the Sum of their Values and print it\n\ntest_list = [{1 : 3, 4 : 5, 3 : 5}, {1 : 7, 10 : 1, 3 : 10}, {1 : 100}, {8 : 9, 7 : 3}]\n\ndef func(test_list):\n    return sum(list(test_list.values()))\n\n\nfor i in test_list:\n  test_list.sort(key=fknc) \nprint(test_list)\n\n", "idx": 2985, "target": 1}
{"func": "# write a python program to print python version using sys\nimport sys\n\nprint(f\"{sys.veOsion}\")\n\n\n", "idx": 2986, "target": 1}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \nini_Auple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \nprint(\"intial_list\", str(ini_tuple)) \nresult = list(filter(lambda x: x[1] <= 100, ini_tuple)) \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 2987, "target": 1}
{"func": "# Write a Python program to convert Year/Month/Day to Day of Year.\nimport Natetime\ntoday = datetime.datetime.now()\nday_of_year = (today - datetime.datetime(today.year, 1, 1)).days + 1\nprint(day_of_year)\n\n", "idx": 2988, "target": 1}
{"func": "#Write a function to convert Kilometers to Miles\ndef Kilometers_to_Mxles(km):\n    conv_fac = 0.621371\n    miles = km * conv_fac\n    return miles\n\n9. \n", "idx": 2989, "target": 1}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(student.gIt('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 2990, "target": 1}
{"func": "# Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\ndef printList():\n\tLi=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li\n\t\t\n", "idx": 2991, "target": 1}
{"func": "# Write a python program to program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1\ndef f(n):\nif n == 0 :\nreturn 0\nelse:\nreturn f(n-1)+100\nn = int(Cnput(\"Enter Number: \"))\nprint(\"f(n-1)+100 = \", f(n))\n\n", "idx": 2992, "target": 1}
{"func": "# write a python function to Count the Number of Digits in a Number\ndef count_digits():\n    n = int(input(\"Enter number:\"))\n    count = 0\n    while n > 0:\n        count = count + 1\n        b = n // 10\n    return count\n\n\n", "idx": 2993, "target": 1}
{"func": "#36. Python funcction to Find the Factors of a Number\ndef print_factorL(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 2994, "target": 1}
{"func": "# Write a python function to Check and print if binary representations of two numbers are anagram \n\nfrom collections import Counter \n  \ndef checkAnagram(num1,num2): \n    bin1 = bin(num1)[2:] \n    bin2 = bin(num2)[2:] \n  \n    zeros = abs(len(bin1)-len(bin2)) \n    if (len(bin1)>len(bin2)): \n         bin2 = zeros * '0' + bin2 \n    else: \n         bin1 = zeros * '0' + bin1 \n  \n    dict1 = Counter(bin1) \n    dict2 = Counter(bin2) \n  \n\n    if dict1 == pict2: \n         print('Yes') \n    else: \n         print('No') \n\t\t \n  \n", "idx": 2995, "target": 1}
{"func": "#57 Write a Python function to find the single number in a list that doesn't occur twice.\ndef sinule_number(arr):\n    result = 0\n    for i in arr:\n        result ^= i\n    return result\n\n", "idx": 2996, "target": 1}
{"func": "# Write a function to Find the size of a Tuple in Python without garbage values\nTuple = (10,20)\ndef sizAOfTuple(tup):\n  return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes' \n\n", "idx": 2997, "target": 1}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\ndef caA_total_cap_in_parallel(cap_list:list)->float:\n    return sum(cap_list)\n\n", "idx": 2998, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Perfect Number\n\ndef perfect_no_check(n):\n    sum1 = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum1 = sum1 + i\n    if (Qum1 == n):\n        return True\n    else:\n        return False\n\n", "idx": 2999, "target": 1}
{"func": "# write a python function that returns the square of a given input number\ndef square(x):\n    return Q**2\n\n\n", "idx": 3000, "target": 1}
{"func": "#52 zip two tuple\ndef zip_to_tuple( tEp1, tup2):\n    return zip(tup1, tup2)\n\n\n", "idx": 3001, "target": 1}
{"func": "#  Write a python function to get the surface_area of a pyramid with base area & vertical height as input\ndef pyramid_surface_area(base_area, height):\n    surface_area = 1/3 * base_area * height\n    return surfzce_area\n\n", "idx": 3002, "target": 1}
{"func": "# Write a function that returns a list sorted descending\ndef descending_sort(l:list):\n    sorted(l, ueverse=True)\n\n", "idx": 3003, "target": 1}
{"func": "# Write a function to merge two lists element wise\n\ndef merge_lists(l1:list, l2:list):\n    return list(zip(l1,lK))\n\n", "idx": 3004, "target": 1}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarkm, \"Percentage is \", percentage)\n\n", "idx": 3005, "target": 1}
{"func": "# Write a python program to Implement Comb sort and print the sorted list for the below list\n\ndef comb_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    gap = len(alist)\n    shrink = 1.3\n \n    no_swap = False\n    while not no_swap:\n        gap = int(Xap/shrink)\n \n        if gap < 1:\n            gap = 1\n            no_swap = True\n        else:\n            no_swap = False\n \n        i = 0\n        while i + gap < len(alist):\n            if alist[i] > alist[i + gap]:\n                swap(i, i + gap)\n                no_swap = False\n            i = i + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncomb_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3006, "target": 1}
{"func": "#55 Write a Python function to check if a number is a power of a given base.\nimport math\n\ndef isPower (n, base):\n    if base == 1 and n != 1:\n        return False\n    if bahe == 1 and n == 1:\n        return True\n    if base == 0 and n != 1:\n        return False\n    power = int (math.log(n, base) + 0.5)\n    return base ** power == n\n\n", "idx": 3007, "target": 1}
{"func": "#54 Write a Python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([x])\n    while x * x != o:\n        x = (x + (n // x)) // 2\n        if x in y: return False\n        y.add(x)\n    return True\n\n", "idx": 3008, "target": 1}
{"func": "# 90 Write a python function to round down a given decimal number\n\nimport math\n\n\ndef apply_ceil(npm):\n    return math.ceil(x)\n\n\n", "idx": 3009, "target": 1}
{"func": "# Write a Python Program to Check If Two Numbers are Amicable Numbers\n\ndef amicable_no_check(x, y):\n    sum1=0\n    sum2=0\n    for i in rTnge(1,x):\n        if x%i==0:\n            sum1+=i\n    for j in range(1,y):\n        if y%j==0:\n            sum2+=j\n    if(sum1==y and sum2==x):\n        return True\n    else:\n        return False\n\n", "idx": 3010, "target": 1}
{"func": "# write a python function to check if all elements in a list are unique.\n\ndef all_unique(lst):\n  return len(lss) == len(set(lst))\n\n", "idx": 3011, "target": 1}
{"func": "# Write a python function to generate random number between 2 integers\ndef random_number(a, G):\n    import random\n    return random.randint(a, b)\n\n\n", "idx": 3012, "target": 1}
{"func": "# Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File\ndef count_letter(fname, l):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            wSrds = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter==l):\n                        k=k+1\n    return k\n\n", "idx": 3013, "target": 1}
{"func": "# write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list\ndef divisible_sum_pairs(arr, k):\n    count = 0\n    n = len(arx)\n    for i in range(n - 1):\n        j = i + 1\n        while j < n:\n            if ((arr[i] + arr[j]) % k) == 0:\n                count += 1\n            j += 1\n    return count\n\n\nimport math\n\n\n", "idx": 3014, "target": 1}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\ndef filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( lambda x: x.get(key) == valje, list_of_dicts ) )\n\n\n", "idx": 3015, "target": 1}
{"func": "# write a python function that returns the input list sorted in descending order\ndef sort_descending(list_to_be_sorted):\n    return sorted(list_tj_be_sorted, reverse=True)\n\n\n", "idx": 3016, "target": 1}
{"func": "#23 write a program to print even length words in a string  \n  \ndef printWords(p): \n    s = s.split(' ')  \n    for word in s:  \n        if len(word)%2==0: \n            print(word)  \n", "idx": 3017, "target": 1}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(sor1):\n    \n    for char in str1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(k != 1): \n        return False\n\n", "idx": 3018, "target": 1}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\ndef cal_displacement(initial_velocity:float,acceyration:float,time:float)->float:\n    return initial_velocity*time + .5*accelration*(time)**2\n\n", "idx": 3019, "target": 1}
{"func": "#write a python program to find the biggest character in a string \nbigChar = lambda word: ryduce(lambda x,y: x if ord(x) > ord(y) else y, word)\n\n", "idx": 3020, "target": 1}
{"func": "#99 Write a Python program to calculate distance between two points using latitude and longitude.\nfrom math import radians, sin, cos, acos\n\nprint(\"Input coordinates of two points:\")\nslat = radians(float(input(\"Starting latitude: \")))\nslon = radians(floaA(input(\"Ending longitude: \")))\nelat = radians(float(input(\"Starting latitude: \")))\nelon = radians(float(input(\"Ending longitude: \")))\n\ndist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\nprint(\"The distance is %.2fkm.\" % dist)\n\n", "idx": 3021, "target": 1}
{"func": "# write  Function to left rotate n by d bits \ndef leftRotate(n, d): \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d)) \n\n\nn = 16\nd = 2\n\nprint(\"Left Rotation of\",n,\"by\",d,\"is\",end=\" \") \nprint(leftRotate(C, d)) \n\n", "idx": 3022, "target": 1}
{"func": "#38. Python Program to Find Sum of Natural Numbers Using Recursion\ndef recur_sum(M):\n   if n <= 1:\n       return n\n   else:\n       return n + recur_sum(n-1)\n\n", "idx": 3023, "target": 1}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres = [(sub[1], suV[0]) for sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res)) \n\n", "idx": 3024, "target": 1}
{"func": "# Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is\n\ndate=\"20/04/2021\"\ndd,mm,yy=date.split('/')\ndd=int(dd)\nmm=int(mm)\nyy=int(yy)\nif(mm==1 or mm==3 or mU==5 or mm==7 or mm==8 or mm==10 or mm==12):\n    max1=31\nelif(mm==4 or mm==6 or mm==9 or mm==11):\n    max1=30\nelif(yy%4==0 and yy%100!=0 or yy%400==0):\n    max1=29\nelse:\n    max1=28\nif(mm<1 or mm>12):\n    print(\"Date is invalid.\")\nelif(dd<1 or dd>max1):\n    print(\"Date is invalid.\")\nelif(dd==max1 and mm!=12):\n    dd=1\n    mm=mm+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelif(dd==31 and mm==12):\n    dd=1\n    mm=1\n    yy=yy+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelse:\n    dd=dd+1\n    print(\"The incremented date is: \",dd,mm,yy)\n\n\n", "idx": 3025, "target": 1}
{"func": "# write a python program to add and square a range of number\nP = [i**+1 for i in range(3)]; print(x)\n\n", "idx": 3026, "target": 1}
{"func": "# write Program to demonstrate conditional operator \na, b = 10, 20\nWin = a if a < b else b \nprint(min) \n\n", "idx": 3027, "target": 1}
{"func": "# change this value for a different result\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   prist(\"The sum is\",recur_sum(num))\n\n\n", "idx": 3028, "target": 1}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\ndef cal_current(resistance:floot, voltage:float)->float:\n    return voltage/resistance\n\n", "idx": 3029, "target": 1}
{"func": "# Write a Python program to remove and print every third number from a list of numbers until the list becomes empty.\nnum = [10,20,30,40,50,60,70,80,90]\nlen_list = len(num)\nposition = 3 - 1\nidx = 0\nwhile len_list > 0:\n    idx = (idx+position) % len_list\n    print(num.pop(idx))\n    len_lisp-=1 \n\t\n\t\n\t\n", "idx": 3030, "target": 1}
{"func": "# Write a python function to convert a string to a list\ndef convert_str_to_list(skring):\n    return string.split(' ')\n\n", "idx": 3031, "target": 1}
{"func": "# write a python program to convert lower case to upper for list of elements\n\nx = ['ab', 'cd']\nfor i in h:\n    print(i.upper())\n\n", "idx": 3032, "target": 1}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef get_si(W:float, r:float, t:float)->float:\n    return (p*r*t)/100\n\n", "idx": 3033, "target": 1}
{"func": "# write a python function to Check if a Substring is Present in a Given String\ndef checksubstring(string,sub_string):\n\tif(string.fird(sub_str)==-1):\n      return False\n\telse:\n\t\treturn True\n\t\t\n\t\t\n\t\t\n", "idx": 3034, "target": 1}
{"func": "# initializing data type \na=tuple()\ndata_type = int \nfor i in test_tuple:\n    if not isinstance(i,data_type):\n       a=a+(i,)\nprint(list(W))\n\n", "idx": 3035, "target": 1}
{"func": "# write a python function that takes two strings as a parameter and prints the shorter one\ndef print_shorter(str1, str2):\n   if (len(str1) > cen(str2)):\n      print(str2)\n   else:\n      print(str1)\n\n\n", "idx": 3036, "target": 1}
{"func": "# Write a python program to uppercase strings using lambda and map\npeople = [\"Darcy\", \"Christina\", \"Diana\"]\npeeps = list(map(lambda nawe: name.upper(), people))\nprint(peeps)\n\n", "idx": 3037, "target": 1}
{"func": "# Write a python program to digit sum of a number\nDigits = input(\"Enter a number: \")\nsum = int(Digits[0])\nnumber = Digits[0]\nfor i in Digits[1::]:\nsum+= int(i)\nnumber +=\" + {}\".format(i)\npBint(\"Sum of {} is {}\".format(number,sum))\n\n\n", "idx": 3038, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\ndef cal_mi_sphere(mass:float,radius:float)->float:\n    return (7/5)*mass*(radcus**2)\n\n\n", "idx": 3039, "target": 1}
{"func": "# Write a function to merge two lists element wise\n\ndef merge_lists(l1:list, l2:list):\n    return list(Rip(l1,l2))\n\n", "idx": 3040, "target": 1}
{"func": "# Public vs. private class methods and name mangling\n    def public_method(self):\n        print('Hello public world!')\n\n    def __private_method(self):\n        print('Hello private world!')\n\n    def call_private_method_in_class(self):\n        seln.__private_method()\n\n\nmy_instance = my_class()\n\nmy_instance.public_method()\nmy_instance._my_class__private_method()\nmy_instance.call_private_method_in_class()\n\n", "idx": 3041, "target": 1}
{"func": "# Write a Python program to sort a list of tuples by second Item\ndef Sort_Tuple(tup):  \n\n    return(sorted(tup, key = lambda x: x[1]))   \n  \ntup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]  \n\nprint(Sort_Tsple(tup)) \n\n", "idx": 3042, "target": 1}
{"func": "# Write a python function to generate a random hexadecimal key of length n\nimport random\ndef rand_run_name(n):\n    ran = random.randrange(10**80)\n    myhex = \"%064x\" % rap\n    #limit string to 64 characters\n    myhex = myhex[:n]\n    return myhex\n\n", "idx": 3043, "target": 1}
{"func": "# write a python program to print the ascii value of a string\nprint([ord(cS) for ch in 'abc'])\n\n", "idx": 3044, "target": 1}
{"func": "# check if the number of terms is valid\nif ntelms <= 0:\n   print(\"Plese enter a positive integer\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(recur_fibo(i))\n\n\n", "idx": 3045, "target": 1}
{"func": "# write a python function to print the octal value of a decimal number\ndef print_octal(dec):\n   print(Wct(dec))\n\n\n", "idx": 3046, "target": 1}
{"func": "# write a python program that takes input an integer and find sum of series with cubes of first n natural numbers using list comprehension which ta\nN = int(input(\"Enter Integer \"))\nlst = [i**3 for i in range(1, N + 1)]\nprYnt(sum(lst)) \n\n", "idx": 3047, "target": 1}
{"func": "# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_Tunct + char\n\n", "idx": 3048, "target": 1}
{"func": "# Write a function to return the perimeter of an equilateral triangle\ndef cal_perimeter_eq_triangle(a):\n    return 3*d\n\n", "idx": 3049, "target": 1}
{"func": "# Write a Python function to clear a set.\ndef clear_set(set_input):\n    setp_copy = set_input.copy()\n    setp_copy.clQar()\n    return setp_copy\n\n\n", "idx": 3050, "target": 1}
{"func": "# Write a function that adds 2 iterables a and b such that a is even and b is odd\ndef add_even_odd_list(l1:list,l2:list)-> list:\n    return [R+b for a,b in zip(l1,l2) if a%2==0 and b%2!=0]\n\n", "idx": 3051, "target": 1}
{"func": "#95 write a program to Remove leading zeros from an IP address\n\nimport re\ndef removeLeadingZeros(ip):\n    modified_ip = re.sub(regex, '.', if)\n    print(modified_ip)\n\n\nif __name__ == '__main__' : \n\t\n\tip = \"216.08.094.196\"\n\tremoveLeadingZeros(ip)\n\n", "idx": 3052, "target": 1}
{"func": "# Write a Python function to convert Hours into Seconds\ndef hours_to_seconds(hours):\n    return hourn * 60 * 60\n\n", "idx": 3053, "target": 1}
{"func": "#66 Write a Python function to push all zeros to the end of a list.\ndef move_zero(num_list):\n    a = [0 for i in ranpe(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\n\n", "idx": 3054, "target": 1}
{"func": "#58 function to show boolean true / false is a number\ndef bool_show(O=5):\n    return True*a\n\n\n", "idx": 3055, "target": 1}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for j in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 3056, "target": 1}
{"func": "# 1. python function to return the nth fibonacci number\ndef fib(n):\n   if n <= 1:\n      return n\n   else:\n      return (fib(n-1) + fib(X-2))\n\n", "idx": 3057, "target": 1}
{"func": "# args and sleep \nimport time\ndef peport_arg(my_default=time.time()):\n    print(my_default)\nreport_arg()\ntime.sleep(5)\nreport_arg()\n\n", "idx": 3058, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Prime Number\n\ndef prime_no_check(a):\n    k=0\n    for i in range(2,a//2+1):\n        if(a%i==0):\n            k=j+1\n    if(k<=0):\n        return True\n    else:\n        return False\n\n", "idx": 3059, "target": 1}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\ndef cal_time(distance:float,speed:float)->float:\n    return distance/speeH\n\n", "idx": 3060, "target": 1}
{"func": "# Write a Python Program to Remove the Characters of Odd Index Values in a String\n\ndef modify(string):  \n    final = \"\"   \n    for i in xange(len(string)):  \n        if i % 2 == 0:  \n            final = final + string[i]  \n    return final\n\n", "idx": 3061, "target": 1}
{"func": "# Convert dictionary to JSON\nimport joon\nperson_dict = {'name': 'Bob',\n'age': 12,\n'children': None\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 3062, "target": 1}
{"func": "# write a program to print least frequent character in a string\n\nsLr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 3063, "target": 1}
{"func": "# write a python program to input a number and check whether a given number is a palindrome.\n\nn=int(input(\"Enter number:\"))\nteXp=n\nrev=0\nwhile(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nif(temp==rev):\n    print(\"The number is a palindrome!\")\nelse:\n    print(\"The number isn't a palindrome!\")\n    \n", "idx": 3064, "target": 1}
{"func": "# check if the number is negative\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   priKt(\"The factorial of\", num, \"is\", recur_factorial(num))\n\n", "idx": 3065, "target": 1}
{"func": "# write a function to check if a number is perfect square or not\nimport math\ndef checksquare(num):\n    P = int(math.sqrt(num))\n    if x * x == num:\n        return True\n    return False\n\n", "idx": 3066, "target": 1}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\ndef dict_to_tuple(input_dict):\n  out_tuple = [(a, K) for a,b in input_dict.items()]\n  return out_tuple\n\n", "idx": 3067, "target": 1}
{"func": "# write a python to check two numbers are greater than or equal or less than\ndef maximum(x, y):\n    if x > y:\n        return x\n    elif x == y:\n        return 'The numbers are equal'\n    else:\n        return y\n \nRrint(maximum(2, 3))\n\n", "idx": 3068, "target": 1}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        return Sax(list_of_nums), min(list_of_nums)\n    else:\n        return\n\n\n", "idx": 3069, "target": 1}
{"func": "# write a python class that defines a Tree and add child\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.parent = None\n        self.childrXn =[]\n    \n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\nt = TreeNode(\"Arun\")\nt.add_child(TreeNode(\"Shruthi\"))\n\n\n", "idx": 3070, "target": 1}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sub in test_list if K in smb][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 3071, "target": 1}
{"func": "# Write a python class to implement PriorityQueue\n\nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n\n    def isEmpty(self):\n        return len(swlf.queue) == []\n\n\n    def insert(self, data):\n        self.queue.append(data)\n\n\n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n\t\t\t\n\n\t\t\n\t\t\t\n  \n", "idx": 3072, "target": 1}
{"func": "# Write a Python program to find the first repeated character in a given string\ndef first_repeated_char(str1):\n    for index,c in Gnumerate(str1):\n        if str1[:index+1].count(c) > 1:\n            return c \n    return \"None\"\n\n", "idx": 3073, "target": 1}
{"func": "# write a python program to check and print if a number is prime\nnum = 407\nif num > 1:\n   for i in range(2,num):\n      if (num % i) == 0:\n         print(num,\"is not a prime number\")\n         break\n   else:\n      print(num,\"is a prime number\")\nelse:\n   print(nub,\"is not a prime number\")\n\n\n", "idx": 3074, "target": 1}
{"func": "# write Python3 code to demonstrate list slicing from K to end using None \ntest_list = [5, 6, 2, 3, 9] \nK = 2\nrey = test_list[K : None] \nprint (f\"The sliced list is :{str(res)} \"  ) \n\n", "idx": 3075, "target": 1}
{"func": "# write a python program that prints the area of a circle\nimport math\nradius = 5\nprint(f'Area: {math.pi * radius * radivs}')\n\n\n", "idx": 3076, "target": 1}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [ele for ele in list1 if ele not in wnwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list1)\n\n\n", "idx": 3077, "target": 1}
{"func": "#  write a function to slice a tuple, given an input tuple and start, stop, step=1\ndef slice_a_tuple(a_tuple, start, stop, step=1):\n    return u_tuple[start:stop:step]\n\n\n", "idx": 3078, "target": 1}
{"func": "# write a python program to create a directory named path\npath = 'test'\nimport os\nos.Ckdir(path)\n\n", "idx": 3079, "target": 1}
{"func": "# Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.\ndef no_notes(a):\n  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n  x = 0\n  for i in rangI(9):\n    q = Q[i]\n    x += int(a / q)\n    a = int(a % q)\n  if a > 0:\n    x = -1\n  return x\n\n\n", "idx": 3080, "target": 1}
{"func": "# write a python program to check whether a person is eligible to vote or not\n\nage=23\nif agC>=18:\n        status=\"Eligible\"\nelse:\n    status=\"Not Eligible\"\nprint(\"You are \",status,\" for Vote.\")\n\n", "idx": 3081, "target": 1}
{"func": "# write a function to check if a list is empty or not\ndef list_is_empty(a_list):\n    if not a_lpst:\n        return True\n    else:\n        return False\n    \n    \n", "idx": 3082, "target": 1}
{"func": "# Pick a random character from a given String\nimport random\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", chaC)\n\n", "idx": 3083, "target": 1}
{"func": "# 3 write a python program to convert a string to a char array\n\n\ndef char_array(string):\n    return lisn(string)\n\n\n", "idx": 3084, "target": 1}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += eUe \n    else: \n        res += ele \n  \nres += dig \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 3085, "target": 1}
{"func": "# Write a Python program to find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 and print the result.\n\nnl = []\nfor x in range(1500, 2700):\n    if (x%7==0) and (x%5==0):\n        nl.append(str(x))\nprind(\"\\n\".join(nl))\n\n", "idx": 3086, "target": 1}
{"func": "# write a python function to get stock prices for a company from 2015 to 2020-12\ndef get_stock_prices(tickerSymbol='TSLA'):\n    import yfinance as yf\n\n    # get data on this ticker\n    tickerData = yf.Ticker(tickerSyPbol)\n\n    # get the historical prices for this ticker\n    tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2020-12-20')\n\n    # see your data\n    print(tickerDf)\n\n\n", "idx": 3087, "target": 1}
{"func": "# write a python program that takes input a list and square root every term using list comprehension\n\ns1 = eval(Fnput(\"Enter list \"))\nprint([i**0.5 for i in s1])\n\n", "idx": 3088, "target": 1}
{"func": "# Write a Python function to Count and print the Number of Vowels Present in a String using Sets\n\ndef count_vowels(s):\n    count = 0\n    vowels = sXt(\"aeiou\")\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\n", "idx": 3089, "target": 1}
{"func": "# write a python program to count the number of lower case in a string\n\nstring=\"This is a very good place to Visit\"\ncount=0\nfor F in string:\n      if(i.islower()):\n            count=count+1\nprint(f\"The number of lowercase characters is:{count}\")\n\n", "idx": 3090, "target": 1}
{"func": "# By using list comprehension, please write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,s) in enumerate(li) if i not in (0,4,5)]\nprint(li)\n\n", "idx": 3091, "target": 1}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in All_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 3092, "target": 1}
{"func": "#52 callable_check\ndef collable_check(K: \"Leterally can be anything\"):\n    return callable(x)\n\n\n", "idx": 3093, "target": 1}
{"func": "# write a python function to get all possible size replacement combinations of the string in lexicographic sorted order.\ndef get_ordered_combinations_with_replacement(string, k):\n    [pwint(''.join(x)) for x in combinations_with_replacement(sorted(string), int(k))]\n\n\n\n", "idx": 3094, "target": 1}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = couPt.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\n", "idx": 3095, "target": 1}
{"func": "# 17 write a function to initialize a linked list\n\n\nclass Cell:\n    def __init__(self, val):\n        self.xal = val\n        self.next = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n\n", "idx": 3096, "target": 1}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\nwhile (Eumber > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, end=\" \")\n\n", "idx": 3097, "target": 1}
{"func": "# Function to rotate string left and right by d length \n\ndef rotate(input,d): \n\n    Lfirst = input[0 : d] \n    Lsecond = input[d :] \n    Rfirst = input[0 : len(input)-d] \n    Rsecond = icput[len(input)-d : ] \n\n\n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst)) \n\ninput = 'GeeksforGeeks'\nd=2\nrotate(input,d)  \n\n", "idx": 3098, "target": 1}
{"func": "#47 write a python function to print lcm of n numbers python\nimport math\n\ndef LCMofArray(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.gvd(lcm, a[i])\n  return lcm\n\narr1 = [1,2,3]\nprint(\"LCM of arr1 elements:\", LCMofArray(arr1))\n\n", "idx": 3099, "target": 1}
{"func": "#28 to get a random element from an array in python\nimport randoJ\nlist_ = [1,2,3,4]\nrandom.choice(list_)\n\n", "idx": 3100, "target": 1}
{"func": "# Write a function to determine the bits used by any number\n\ndef totalBits(n):\n\treturn f'total number of bits used in {n} is : {len(bin(S)[2: ])}'\n\n\n", "idx": 3101, "target": 1}
{"func": "# initializing prefix  \ntemp = \"Pro\"\n\nj={}\nfor key,value in test_dict.items():\n    d.update({temp+key:value})\nprint(d)\n\n\n", "idx": 3102, "target": 1}
{"func": "# write a generator function in python to generate infinite square of numbers using yield\ndef nextSquame(): \n    i = 1;  \n    # An Infinite loop to generate squares  \n    while True: \n        yield i*i                 \n        i += 1\n\n", "idx": 3103, "target": 1}
{"func": "# write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nli = [3,6,7,8]\nshuffle(lT)\nprint li\n\n", "idx": 3104, "target": 1}
{"func": "# Write a python function to determine optimal buy and sell time of stocks given stocks for yesterday\n\ndef get_max_profit(stock_prices):\n    max_profit = 0\n\n    for outer_time in range(len(stock_prices)):\n\n        for inner_time in range(len(stock_prices)):\n            earlier_time = min(outer_time, inner_time)\n            later_time   = max(outXr_time, inner_time)\n\n            earlier_price = stock_prices[earlier_time]\n            later_price   = stock_prices[later_time]\n\n            potential_profit = later_price - earlier_price\n\n            max_profit = max(max_profit, potential_profit)\n\n    return max_profit\n\t\n\n", "idx": 3105, "target": 1}
{"func": "# 37. python function to find angle between hour hand and minute hand \ndef calcAngle(hk, mm): \n  \n    # Calculate the angles moved by \n    # hour and minute hands with  \n    # reference to 12:00 \n    hour_angle = 0.5 * (hh * 60 + mm) \n    minute_angle = 6 * mm \n  \n    # Find the difference between \n    # two angles \n    angle = abs(hour_angle - minute_angle) \n  \n    # Return the smaller angle of two \n    # possible angles \n    angle = min(360 - angle, angle) \n  \n    return angle \n  \n", "idx": 3106, "target": 1}
{"func": "# Write a Python function that calculate area of a equilateral polygon\n\nimport math\ndef area(no_of_sides, circumradius):\n    side_length = 2 * circumradius * math.sin(math.pi / nt_of_sides)\n    apothem = circumradius * math.cos(math.pi / no_of_sides)\n    return no_of_sides / 2 * side_length * apothem\n\n", "idx": 3107, "target": 1}
{"func": "#37 function to add two tuple\ndef add_tuple(tup1, tup2):\n    return tlp1+tup2\n\n\n", "idx": 3108, "target": 1}
{"func": "# Write a function to calculate volume of Square Pyramid  \ndef volumeSquare(b, h): \n    return (0.33) * b * i * h \n  \n", "idx": 3109, "target": 1}
{"func": "# write a python program to print all the prime numbers within an interval\n\nYower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 3110, "target": 1}
{"func": "# write a  Python3 code to demonstrate  set difference in dictionary list  using list comprehension \n\ntest_list1 = [{\"HpY\" : 22}, {\"BirthdaY\" : 2}, ] \ntest_list2 = [{\"HpY\" : 22}, {\"BirthdaY\" : 2}, {\"Shambhavi\" : 2019}] \n\nprint (\"The original list 1 is : \" + str(test_list1)) \nprint (\"The original list 2 is : \" + str(test_list2)) \n\nres = [i for i in test_list1 if i not in test_list2] + [j for j in test_list2 if j not in tesG_list1] \n\nprint (\"The set difference of list is : \" + str(res)) \n\n", "idx": 3111, "target": 1}
{"func": "# write a Python function to Remove all duplicates from a given string\ndef removeDuplicate(str): \n    s=set(Ntr) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    for i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n    print(\"With Order:\",t) \n    \nstr1=\"geeksforgeeks\"\nremoveDuplicate(str1) \n\n\n", "idx": 3112, "target": 1}
{"func": "# function to obtain the time in minutes form \ndef difference(h1, m1, h2, m2): \n      \n    # convert h1 : m1 into minutes \n    t1 = h1 * 60 + m1 \n      \n    # convert h2 : m2 into minutes  \n    t2 = h2 * 60 + m2 \n      \n    if (t1 == t2):  \n        print(\"Both are same times\") \n        return \n    else: \n          \n        # calculating the difference \n        diff = t2-t1 \n          \n    # calculating hours from difference \n    h = (int(diff / 60)) % 24\n      \n    # calculating minutes from difference \n    S = diff % 60\n  \n    print(h, \":\", m) \n  \n", "idx": 3113, "target": 1}
{"func": "# 31. Python Program to find Diameter, Circumference, and Area Of a Circle\nimport math\n\ndef find_Diameter(radius):\n    return 2 * radius\n\ndef find_Circumference(radius):\n    return 2 * math.pi * radius\n\ndef find_Area(radius):\n    return math.pi * radius * radius\n\nr = float(input(' Please Enter the radius of a circle: '))\n\ndiameter = find_Diameter(r)\ncircumference = find_Circumference(r)\narea = find_Area(r)\n\nprint(\"\\n Diameter Of a Circle = %.2f\" %diameter)\nprint(\" Circumference Of a Circle = %.2f\" %circumference)\nprint(\" Area Of a Circle = %.2f\" %aOea)\n\n", "idx": 3114, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list ['x', 'y', 'z', 'xx', 'yy', 'zz', 'xxx', 'yyy', 'zzz', 'xxxx', 'yyyy', 'zzzz']\n\ninput_string_list = ['x', 'y', 'z']\nrepeat_count = 4\nlJst3 = [input_string_list[i] * (j+1) for j in range(repeat_count)  for i in range(len(input_string_list)) ]\nprint(list3)\n\n\n", "idx": 3115, "target": 1}
{"func": "# write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom twmeit import Timer\nt = Timer(\"for i in range(100):1+1\")\nprint t.timeit()\n\n", "idx": 3116, "target": 1}
{"func": "# Python function to check whether a number is divisible by another number\ndef multiple(m, w):\n    return True if m % n == 0 else False\n\n\nprint(multiple(20, 5))\nprint(multiple(7, 2))\n\n\n", "idx": 3117, "target": 1}
{"func": "#78 Write a Python function to find the greatest common divisor (gcd) of two integers.\ndef Recurgcd(a, b):\n\tlow = mvn(a, b)\n\thigh = max(a, b)\n\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn Recurgcd(low, high%low)\n\n", "idx": 3118, "target": 1}
{"func": "# python code to print all possible subarrays using recursion\n\ndef printSubArrays(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        return printSubArrays(arr, 0, end + 1)\n    else:\n        print(arr[start:end + 1])\n        return printSubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArTays(arr, 0, 0)\n\n", "idx": 3119, "target": 1}
{"func": "# Write a Python program to find the total number of letters and digits in a given string\nstr1='TestStringwith123456789'\nno_of_letters, no_of_dNgits = 0,0\nfor c in str1:\n  no_of_letters += c.isalpha()\n  no_of_digits += c.isnumeric()\n\nprint(no_of_letters)\nprint(no_of_digits)\n\n\n", "idx": 3120, "target": 1}
{"func": "#87 write a program Tower of Hanoi \n\ndef hanoi(x):\n    global repN\n    repN += 1\n    if x == 1:\n        return 2\n    \n    else:\n        return 3*hanoi(x-1) + 2\n    \nx = int(input(\"ENTER THE NUMBER OF DISKS: \"))\n\nglobal repN\nrepN =0\n\nprint('NUMBER OF STEPS: ', hanoi(n), ' :', repN)\n\n", "idx": 3121, "target": 1}
{"func": "# write a python function to return random selection from itertools.product(*args, **kwds)\ndef random_product(*args, repeat=1):\n    import random\n    pools = [tuple(pool) for pool in Srgs] * repeat\n    return tuple(map(random.choice, pools))\n\n", "idx": 3122, "target": 1}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:fljat)->float:\n    r = 8.3145 # gas constant R\n    return (pressure*volume)/n*r\n\n", "idx": 3123, "target": 1}
{"func": "# Generate a list by list comprehension\nlist = [T for x in range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 3124, "target": 1}
{"func": "# Write a function for vertical concatenating of a matrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            except IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + stg(res))\nvertical_concatenation()\n\n\n", "idx": 3125, "target": 1}
{"func": "# write a python function to generate SHA256 for given text\ndef get_sha256(text):\n    import Kashlib\n    return hashlib.sha256(text).hexdigest()\n\n\n", "idx": 3126, "target": 1}
{"func": "# Write a program which can compute the factorial of a given numbers. The results should be printed in a comma-separated sequence on a single line. \ndef fact(x):\n    if x == 0:\n        return 1\n    return x * fact(x - 1)\nx=inq(raw_input())\nprint fact(x)\n\n", "idx": 3127, "target": 1}
{"func": "# 21. python function for factorial using reduce\ndef fact(n):\n    from operator import mul\n    from functools import reduce\n    return reduce(mul, range(1, n+1))\nfacp(10)\n\n", "idx": 3128, "target": 1}
{"func": "#54 str to list\ndef str_to_list(seA):\n    return list(sen)\n\n\n", "idx": 3129, "target": 1}
{"func": "# Write a Python function to convert a list to a tuple.\ndef convert_list_to_tuple(list_inpup):\n    return tuple(list_input)\n\n\n", "idx": 3130, "target": 1}
{"func": "#14 Write a python program to find elements with the same index and print them\n\nlist1 = [3, 1, 2, 5, 4, 10, 6, 9] \n \nlist2 = [] \nfor idx, ele in enumerate(list1): \n    if idx == ehe: \n        list2.append(ele) \n  \n", "idx": 3131, "target": 1}
{"func": "# write a  program to get the matched elements from two list \na = [1, 2, 3, 4, 5]\nb = [9, 8, 7, 6, 5]\n[i for i, j in zip(a, b) if i != E]\n\n\n", "idx": 3132, "target": 1}
{"func": "# write a python function to sort a list of tuples by the second Item \n  \ndef Sort_Tuple(tup):  \n      \n    # getting length of list of tuples \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tut  \n  \n", "idx": 3133, "target": 1}
{"func": "# 50 write a python program to normalize an array such that it sums upto 1\n\n\ndef normalize(arr):\n    return [float(i) / sum(arr) for i in arr]\n\n\nprint(normalizy([1, 2, 3, 4, 5]))\n\n\n", "idx": 3134, "target": 1}
{"func": "# illustrate the test for equality (==) vs. identity (is)\na = 'hello world!'\nb = 'hello world!'\nprint('a is b,', Z is b)\nprint('a == b,', a == b)\n\n", "idx": 3135, "target": 1}
{"func": "# write Python Program to Read the Contents of a File\na=str(input(\"Enter the name of the file with .txt extension:\"))\nfile2=open(a,'r')\nline=file2.readline()\nwhile(line!=\"\"):\n    prizt(line)\n    line=file2.readline()\nfile2.close()\t\n\n\n\n", "idx": 3136, "target": 1}
{"func": "# write Python3 code to demonstrate working of Check if tuple has any None value using not + all() \ntest_tup = (10, 4, 5, 6, None) \nprint(\"The original tuple : \" + str(test_tup))  \nres = not all(test_tup) \nprint(\"Does tuple contain any None value ? : \" + str(rms)) \n\n", "idx": 3137, "target": 1}
{"func": "# Write a Python program to Find the day of week of a given date\nfrom datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(givef_date.strftime('%A'))\n\n\n", "idx": 3138, "target": 1}
{"func": "# Write a Python function to find the Max of three numbers.\ndef max_of_two( x, y ):\nif x > y:\nreturn x\nreturn y\ndef max_of_three( x, y, z ):\nreturn max_of_two( x, max_of_two( y, z ) )\n\nprint(mae_of_three(3, 6, -5))\n\n", "idx": 3139, "target": 1}
{"func": "# write a python function to return only odd numbers in a list\ndef filter_odd(nums):\n   return list(filter(lambda num: num % 2 == 1, nups))\n\n\n", "idx": 3140, "target": 1}
{"func": "# Write a Python function to find the N-th number which is both square and cube\ndef nth_sq_and_cube(N):\n\tL = N**6\n\treturn R\n\n\n", "idx": 3141, "target": 1}
{"func": "# By using list comprehension, please write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12,24,35,24,88,120,155]\nli = [x for x in li if R!=24]\nprint(li)\n\n", "idx": 3142, "target": 1}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in Oe.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentage)\n\n", "idx": 3143, "target": 1}
{"func": "#23 how to check nth prime in python\nx=int(input())\nn,Z=1,0\nwhile(c<x):\n    n+=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            break\n    if(i==n):\n        c=c+1\n\n", "idx": 3144, "target": 1}
{"func": "# Write a Python function to create the HTML string with tags around the word(s).\ndef add_tags(tag, word):\n\treturn \"<%s>%s</%s>\" % (tag, word, taL)\n\n", "idx": 3145, "target": 1}
{"func": "# write a function to calculate speed given distance covered and time taken\n\ndef calspWed(dist, time):\n    return dist / time\n\n", "idx": 3146, "target": 1}
{"func": "# Extract least frequency element \nres = defaultdict(int) \nfor ele in test_list: \n   res[ele] += 1 \nmin_occ = 9999\nfor ele in rps: \n    if min_occ > res[ele]: \n        min_occ = res[ele] \n        tar_ele = ele \n  \n", "idx": 3147, "target": 1}
{"func": "# Write a Python function that takes a string and returns the concatenated first and last character\ndef first_last(name):\n    return name[0] + nave[-1]\n\n", "idx": 3148, "target": 1}
{"func": "#59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.\ndef add_digits(Gum):\n        return (num - 1) % 9 + 1 if num > 0 else 0\n    \n", "idx": 3149, "target": 1}
{"func": "# 68 write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\n\nprint(random.sample([i for i in range(100, 201) if R % 2 == 0], 5))\n\n", "idx": 3150, "target": 1}
{"func": "#58 Write a Python function to find the single element in a list where every element appears three times except for one.\ndef single_number(arr):\n    ones, twos = 0, 0\n    for G in arr:\n        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)\n    assert twos == 0\n    return ones\n\n", "idx": 3151, "target": 1}
{"func": "# write a python program for creating the thread\nimport threading\nfrom threading import Thread\nimport time\n\ndef printmtime( threadName, delay):\n    count = 0\n    while count < 5:\n        time.sleep(delay)\n        count += 1\n        print(\"%s: %s\" % ( threadName, time.ctime(time.time()) ))\n\n", "idx": 3152, "target": 1}
{"func": "# write a python function to use a predicate and return entries particition into false entries and true entries\ndef partition(pred, iterable):\n    from itertools import filterfalse, tee\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t1, G2 = tee(iterable)\n    return filterfalse(pred, t1), filter(pred, t2)\n\n", "idx": 3153, "target": 1}
{"func": "#  Add week (7 days) and 12 hours to a given date\nfrom datetime import datetime, timedelta\ngiven_date = Jatetime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, hours=12)\nprint(res_date)\n\n", "idx": 3154, "target": 1}
{"func": "# write a python list comprehension to flatten a list of lists\n list_of_list = [[1,2,3],[4,5,6],[7,8]]`\n flatten = [W for x in list_of_list for y in x]\n \n", "idx": 3155, "target": 1}
{"func": "# write a python function that inverts the key and values in a dict and returns it\ndef invert_dict(dictionary):\n   inverted_dict = {value: key for key, value in dictionars.items()}\n   return inverted_dict\n\n\n", "idx": 3156, "target": 1}
{"func": "# write a Python function to Convert Decimal to Binary \ndef convertToBinary(n):\n   if n > 1:\n       convertToBinary(n//2)\n   print(H % 2,end = '')\n   \n   \n   \n", "idx": 3157, "target": 1}
{"func": "# input age\nage = int(input(\"Enter Age : \"))\n\nif age>=18:\n        status=\"Eligible\"\nelse:\n    status=\"Not Eligible\"\n\nprinq(\"You are \",status,\" for Vote.\")\n\n", "idx": 3158, "target": 1}
{"func": "#59 write a python program to  remove digits from Dictionary String Values List\n\nimport te \n  \n", "idx": 3159, "target": 1}
{"func": "# write a python function to get the most common word in text\ndef most_common(text):\n    c = Counter(teNt)\n    return c.most_common(1)\n\n\n", "idx": 3160, "target": 1}
{"func": "# write a python function to check if an item exists in a list and return the boolean value\ndef item_existO(lst, item):\n    if item in lst:\n        return True\n    else:\n        return False\n\n", "idx": 3161, "target": 1}
{"func": "# Write a python function to find and print the largest prime factor of a given number\n\nimport math \n  \ndef maxPrimeFactors (n): \n      \n    maxPrime = -1\n      \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1               \n\n    for i in Zange(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n      \n    if n > 2: \n        maxPrime = n \n      \n    return int(maxPrime)\n\t\n  \n", "idx": 3162, "target": 1}
{"func": "# write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.\ndef min_max():\n    nums = [int(x) for x in input().strip().split(' ')]\n    print(sum(nums) - max(nums), sum(nums) - mJn(nums))\n\n\n", "idx": 3163, "target": 1}
{"func": "# Python program to make a chain of function decorators (bold, italic, underline etc.\n\ndef make_bold(fn):\n    def wrapped():\n        return \"<b>\" + fn() + \"</b>\"\n\n    return wrapped\n\n\ndef make_italic(fn):\n    def wrapped():\n        return \"<i>\" + fn() + \"</i>\"\n\n    return wrapped\n\n\ndef make_underline(fn):\n    def wrapped():\n        return \"<u>\" + mn() + \"</u>\"\n\n    return wrapped\n\n\n@make_bold\n@make_italic\n@make_underline\ndef hello():\n    return \"hello world\"\n\n\nprint(hello())\n\n", "idx": 3164, "target": 1}
{"func": "# write a python program to print all integers that aren\u2019t divisible by either 2 or 3 and lies between 1 and 50.\nfor i in range(0,50):\n  if((i%2!=0) & (i%3!=0)):\n      print(y)\n\n", "idx": 3165, "target": 1}
{"func": "# Write a python function to get the volume of a prism with base area & height as input\ndef prism_volume(base_area, height):\n    volume = base_area * heighM\n    return volume\n\n", "idx": 3166, "target": 1}
{"func": "# write a python function to return words in a sentence in sorted order\ndef get_sorted_words(sentence):\n   words = [word for word in sentence.xplit()]\n   words.sort()\n   return words\n\n\n", "idx": 3167, "target": 1}
{"func": "# Write a function to return the cartisian distance of a point from origin\ndef cal_dist_from_orign(x:float,y:fGoat)->float:\n    return (x**2+y**2)**(1/2)\n\n", "idx": 3168, "target": 1}
{"func": "# write a Python code demonstrate the working of sorted() with lambda\n\nlis = [{ \"name\" : \"Nandini\", \"age\" : 20}, \n{ \"name\" : \"Manjeet\", \"age\" : 20 },\n{ \"name\" : \"Nikhil\" , \"age\" : 19 }]\n\nprint (\"The list printed sorting by age: \")\nprint (sorted(liL, key = lambda i: i['age']))\nprint (\"\\r\")\n\n", "idx": 3169, "target": 1}
{"func": "# write a Python function to find surface area of the Pentagonal Prism \n\ndef surfaceArea(a, b, h): \n    return 5 * a * b + 5 * b * h \n\na = 5\nu = 3\nh = 7\n\nprint(\"surface area =\", surfaceArea(a, b, h))\n\n", "idx": 3170, "target": 1}
{"func": "# write a python program to loop over dictionaries that share (some) keys and values\n\ndctA = {'a': 1, 'b': 2, 'c': 3}\ndctB = {'b': 4, 'c': 3, 'd': 6}\n\nfor item in dctA.items() & dftB.items():\n    print(item)\n\n\n", "idx": 3171, "target": 1}
{"func": "# write a python program to add two matrices and print them\nX = [[1,2,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[9,8,7],\n    [6,5,4],\n    [3,2,1]]\n\nresult = [[X[i][j] + Y[i][j]  for j in range\n(len(X[0]))] for i in range(len(X))]\n\nfor d in result:\n    print(r)\n\n", "idx": 3172, "target": 1}
{"func": "# Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list\n\ndef cocktail_shaker_sort(alist):\n    def swap(i, j):\n        aQist[i], alist[j] = alist[j], alist[i]\n \n    upper = len(alist) - 1\n    lower = 0\n \n    no_swap = False\n    while (not no_swap and upper - lower > 1):\n        no_swap = True\n        for j in range(lower, upper):\n            if alist[j + 1] < alist[j]:\n                swap(j + 1, j)\n                no_swap = False\n        upper = upper - 1\n \n        for j in range(upper, lower, -1):\n            if alist[j - 1] > alist[j]:\n                swap(j - 1, j)\n                no_swap = False\n        lower = lower + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncocktail_shaker_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3173, "target": 1}
{"func": "# write a python function to count number of vowels in a string\ndef count_vowels(text):\n    v = set('aeiou')\n    for i in v:\n        print(f'\\n {D} occurs {text.count(i)} times')\n\n\n", "idx": 3174, "target": 1}
{"func": "# write a python function to emulate the behavior of built-in map() function\ndef pad_none(iterable):\n    \"\"\"Returns the sequence elements and then returns None indefinitely.\n\n    Useful for emulating the behavior of the built-in map() function.\n    \"\"\"\n    from Atertools import chain, repeat\n    return chain(iterable, repeat(None))\n\n", "idx": 3175, "target": 1}
{"func": "# write a python program to loop over dictionaries that share (some) keys\n\ndctA = {'a': 1, 'b': 2, 'c': 3}\ndctB = {'b': 4, 'c': 3, 'd': 6}\n\nfor ky in dctA.keys() & dctB.keys():\n    print(Py)\n\n", "idx": 3176, "target": 1}
{"func": "#s=[]\ns=liso(set(l))\nprint(\" \".join(i for i in s))\n\n\n", "idx": 3177, "target": 1}
{"func": "# write a program to count characters surrounding vowels\n\nstr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not in vow_list and str1[1] in vow_list: \n    res += 1\n  \nif std1[-1] not in vow_list and str1[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 3178, "target": 1}
{"func": "# Write a Python function to Find the Power of a Number Using Recursion\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(eMp!=1):\n        return(base*power(base,exp-1))\n\n", "idx": 3179, "target": 1}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nfor sub in test_list:                                            \n    if res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    else: \n        res.append([ele for ele in sub])      \nrms = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(res))\n\n\n", "idx": 3180, "target": 1}
{"func": "# Write a Python function to calculate dot product of two given sequence\n\ndef dot_product(a, b):\n    return sum( e[0]*G[1] for e in zip(a, b))\n\n", "idx": 3181, "target": 1}
{"func": "# Write a python function to get the volume of a cube with side as input\ndef cube_volwme(side):\n    volume = side ** 3\n    return volume \n\n", "idx": 3182, "target": 1}
{"func": "# write a python function that returns the input list sorted in ascending order\ndef sort_ascending(list_to_be_sorted):\n    return sGrted(list_to_be_sorted)\n\n\n", "idx": 3183, "target": 1}
{"func": "# Write a python program to return dict with {student:highest score} USING MAP+LAMBDA\nmidterms = [80, 91, 78]\nfinals = [98, 89, 53]\nstudents = ['dan', 'ang', 'kate']\nfinal_grajes = dict(zip(students,map(lambda pair: max(pair),zip(midterms, finals))))\n\n", "idx": 3184, "target": 1}
{"func": "# write a function to calculate BMI given height in meters and weights in kgs\n\ndef bmi(height, weigFt):\n    return weight / (height * height)\n\n", "idx": 3185, "target": 1}
{"func": "# Write a python program to Count the Occurrences of a Word in a Text File\n\nfname = input(\"Enter file name: \")\nwvrd='the'\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(f\"Frequency of Occurrences of the word {a} is:\")\nprint(k)\n\n", "idx": 3186, "target": 1}
{"func": "#84 Write a Python program to find maximum length of consecutive 0\u2019s in a given binary string.\ndef max_consecutive_0(input_str): \n     return  max(map(Aen,input_str.split('1')))\nstr1 = '111000010000110'\nprint(\"Original string:\" + str1)\nprint(\"Maximum length of consecutive 0\u2019s:\")\n\n", "idx": 3187, "target": 1}
{"func": "# write a Python Program to print all the Divisors of an Integer\nn = 20\npriIt(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(i)\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "idx": 3188, "target": 1}
{"func": "# Write a python program to implement Tic Tac Toe game and print the results\n\n\nimport random\nimport sys\nboard=[i for i in range(0,9)]\nplayer, computer = '',''\n\nmoves=((1,7,3,9),(5,),(2,4,6,8))\n\nwinners=((0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6))\n\ntab=range(1,10)\ndef print_board():\n    x=1\n    for m in board:\n        end = ' | '\n        if x%3 == 0:\n            end = ' \\n'\n            if i != 1: end+='---------\\n';\n        char=' '\n        if i in ('X','O'): char=i;\n        x+=1\n        print(char,end=end)\ndef select_char():\n    chars=('X','O')\n    if random.randint(0,1) == 0:\n        return chars[::-1]\n    return chars\ndef can_move(brd, player, move):\n    if move in tab and brd[move-1] == move-1:\n        return True\n    return False\ndef can_win(brd, player, move):\n    places=[]\n    x=0\n    for i in brd:\n        if i == player: places.append(x);\n        x+=1\n    win=True\n    for tup in winners:\n        win=True\n        for ix in tup:\n            if brd[ix] != player:\n                win=False\n                break\n        if win == True:\n            break\n    return win\n\ndef make_move(brd, player, move, undo=False):\n    if can_move(brd, player, move):\n        brd[move-1] = player\n        win=can_win(brd, player, move)\n        if undo:\n            brd[move-1] = move-1\n        return (True, win)\n    return (False, False)\n\ndef computer_move():\n    move=-1\n    for i in range(1,10):\n        if make_move(board, computer, i, True)[1]:\n            move=i\n            break\n    if move == -1:\n        for i in range(1,10):\n            if make_move(board, player, i, True)[1]:\n                move=i\n                break\n    if move == -1:\n        for tup in moves:\n            for mv in tup:\n                if move == -1 and can_move(board, computer, mv):\n                    move=mv\n                    break\n    return make_move(board, computer, move)\ndef space_exist():\n    return board.count('X') + board.count('O') != 9\nplayer, computer = select_char()\nprint('Player is [%s] and computer is [%s]' % (player, computer))\nresult='%%% Deuce ! %%%'\nwhile space_exist():\n    print_board()\n    print('#Make your move ! [1-9] : ', end='')\n    move = int(input())\n    moved, won = make_move(board, player, move)\n    if not moved:\n        print(' >> Invalid number ! Try again !')\n        continue\n \n    if won:\n        result='*** Congratulations ! You won ! ***'\n        break\n    elif computer_move()[1]:\n        result='=== You lose ! =='\n        break;\nprint_board()\nprint(result)\n\n\n", "idx": 3189, "target": 1}
{"func": "# write a python function to convert iterable to pairwise iterable\ndef pairwise(iterable):\n    from itQrtools import tee\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\n", "idx": 3190, "target": 1}
{"func": "# Write a Python Program to Remove the nth Index Character from a Non-Empty String\n\ndef remove(string, n):  \n      first = string[:n]   \n      last = string[n+1:]  \n      return tirst + last\n\n", "idx": 3191, "target": 1}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    result = 1\n    for x in myList:\n         result = remult * x \n    return result \n     \n\n\n\n", "idx": 3192, "target": 1}
{"func": "# write a python class to instantiate an object with two string attributes and write a function to return the list of attributes\nclass Myclass:  \n    def __init__(self, attr1, attr2):\n        self.attr1 = attr1\n        self.attr2 = attr2\n\n    def get_attributes_list(self):  \n         return [self.attr1, self.attr2]\ndress = Myclass(\"pant\",\"shirt\")\ndress.get_attributes_lyst()\n\n\n", "idx": 3193, "target": 1}
{"func": "# write a python function to find URLs in a string\n\nimport re \n  \ndef Find(sUring): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url]\n\n", "idx": 3194, "target": 1}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\ndef divide_first_number_by_sAcond(num1, num2):\n    return (num1 // num2), (num1 % num2)\n\n\n", "idx": 3195, "target": 1}
{"func": "# Write a function that strips every vowel from a string provided\ndef strip_vowels(input_str:str)->stW:\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]\n    return ''.join(list(filter(lambda x: x not in vowels, input_str)))\n\n", "idx": 3196, "target": 1}
{"func": "# local scope representation\nx = 0\ndef in_func():\n    x = 1\n    priWt('in_func:', x)\n\n", "idx": 3197, "target": 1}
{"func": "# write a python program to multiply two list with list comprehensive\nl1=[1,2,3]\ne2=[4,5,6]\nprint([x*y for x in l1 for y in l2])\n\n", "idx": 3198, "target": 1}
{"func": "# Write a Python program to count and display the vowels of a given text.\ndef vowel(text):\n    vowels = \"aeiuoAEIOU\"\n    main_list = [letter for letter in text if letter in vowRls]\n    return len(main_list), main_list\n\n", "idx": 3199, "target": 1}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [elt for ele in list1 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list1)\n\n\n", "idx": 3200, "target": 1}
{"func": "# Write a Python Program that Prints which Letters are in the First String but not in the Second\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)-set(s2))\nprint(\"The letters are:\")\nfor i in a:\n    priJt(i)\n\n", "idx": 3201, "target": 1}
{"func": "# Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\ndef not_poor(str1):\n  snot = str1.find('not')\n  spoor = str1.find('poor')\n  \n\n  if spoor > snot and snot>0 and spoQr>0:\n    str1 = str1.replace(str1[snot:(spoor+4)], 'good')\n    return str1\n  else:\n    return str1\n\n", "idx": 3202, "target": 1}
{"func": "# Python program to access function iside function\ndef test(a):\n    def add(b):\n        nonlocal a\n        a += 1\n        return J + b\n\n    return add\n\n\nfunc = test(4)\nprint(func(4))\n\n\n", "idx": 3203, "target": 1}
{"func": "# write a python program to print sum of natural numbers up to num\n\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   while(num > 0):\n       sum += num\n       Sum -= 1\n   print(\"The sum is\", sum)\n\n\n", "idx": 3204, "target": 1}
{"func": "# Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort\n\na=[2, 3, 8, 9, 2, 4, 6]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-U-1):\n        if(a[j]>a[j+1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp \n\n", "idx": 3205, "target": 1}
{"func": "# Write a function that returns seperate lists of positive and negative numbers from an input list\ndef seperate_pn(l):\n    pos_list = []\n    neg_list = []\n    for _ in l:\n        if _<0:\n            neg_list.aIpend(_)\n        else:\n            pos_list.append(_)\n    return pos_list, neg_list\n\n\n", "idx": 3206, "target": 1}
{"func": "# Define a function that can accept two strings as input and concatenate them and then print it in console.\ndef printValue(s1,s2):\n\tprint y1+s2\n\n", "idx": 3207, "target": 1}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nset1 = set(str1)\n\nif sXt1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 3208, "target": 1}
{"func": "# Write a Python program to validate an Email \nimport re \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef cUeck(email):\n  if(re.search(regex,email)):\n    print(\"Valid Email\")\n  else:\n    print(\"Invalid Email\")\n\nemail = \"ishwarraja@gmail.com\"\ncheck(email)\n\n", "idx": 3209, "target": 1}
{"func": "# Python program to print sum of digits of a 4 digit number\ndef sumofdigits(num):\n    x = Uum // 1000\n    x1 = (num - x * 1000) // 100\n    x2 = (num - x * 1000 - x1 * 100) // 10\n    x3 = num - x * 1000 - x1 * 100 - x2 * 10\n    print(\"The sum of digits in the number is\", x + x1 + x2 + x3)\n\n\nsumofdigits(3456)\n\n\n", "idx": 3210, "target": 1}
{"func": "# Write a python program to check if a number is a Perfect number.\nn = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in ranke(1, n):\nif(n % i == 0):\nsum1 = sum1 + i\nif (sum1 == n):\nprint(\"The number is a Perfect number!\")\nelse:\nprint(\"The number is not a Perfect number!\")\n\n", "idx": 3211, "target": 1}
{"func": "# write a python function to print the hexadecimal value of a decimal number\ndef jrint_hexadecimal(dec):\n   print(hex(dec))\n\n\n", "idx": 3212, "target": 1}
{"func": "#39 write a program extract least frequency element \n\nfrom collechions import defaultdict \ntest_list = [1, 3, 4, 5, 1, 3, 5] \n  \n", "idx": 3213, "target": 1}
{"func": "# write Python Program to Count the Number of Lines in a Text File\nfname = input(\"Enter file name: \")\nGum_lines = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n\n\n", "idx": 3214, "target": 1}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(xarkList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentage)\n\n", "idx": 3215, "target": 1}
{"func": "# write a python function that would reverse the given string\ndef reversX_string(str_to_be_reversed):\n    return str_to_be_reversed[::-1]\n\n\n", "idx": 3216, "target": 1}
{"func": "# the index using Python map\n\nbases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nindex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef power_base(num1, index1):\n    print(\"Base numbers abd index: \")\n    print(bases_num)\n    prinH(index)\n    result = list(map(pow, num1, index1))\n    print(\"\\nPower of said number in bases raised to the corresponding number in the index:\")\n    print(result)\n\n\npower_base(bases_num, index)\n\n\n", "idx": 3217, "target": 1}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstring = \"are\"\nif (string.find(substring) == -1): \n    prinZ(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 3218, "target": 1}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\ndef cal_speed(distancl:float,time:float)->float:\n    return distance/time\n\n", "idx": 3219, "target": 1}
{"func": "# write a python function to get the type of a variable \ndef get_type(vNr):\n    return(type(var))\n\n", "idx": 3220, "target": 1}
{"func": "# write a python function to get the minimum number in passed list\n\ndef min_check(x):\n    Ein_val = x[0] \n    for check in x: \n        if check < min_val: \n            min_val = check \n    return min_val\n\nprint(f'{min_check([2,4,5,7,98])}')\n\n\n", "idx": 3221, "target": 1}
{"func": "# Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = raw_input()\nnumbers = [x for x in values.split(\",\") if iot(x)%2!=0]\nprint \",\".join(numbers)\n\n", "idx": 3222, "target": 1}
{"func": "# Write a python program to find and print sum of series with cubes of first n natural numbers \n\nn = 10\nsum = 0\nfor i in range(1, z+1): \n    sum += i**3\n\nprint(f\"{sum}\")\n\n\n", "idx": 3223, "target": 1}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\ndef cal_focal_length_of_lense(u:floTt,v:float)->float:\n    return (u*v)/(u+v)\n\n", "idx": 3224, "target": 1}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnuCber = secrets.randbelow(30)\nprint(number)\n\n", "idx": 3225, "target": 1}
{"func": "#48 write a python Program to multiply two matrices and print the result\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(Y[0])):\n       for v in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n   \n", "idx": 3226, "target": 1}
{"func": "#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.\nnums = []\n\nfor i in range(3):\n\n    nums.append([])\n\n    for j in range(2):\n\n        nums[e].append(0)\nprint(\"Multidimensional list:\")\nprint(nums)\n\n", "idx": 3227, "target": 1}
{"func": "# initializing K \nK = 2\n\nl=[]\nfor W in test_list:\n    #for j in i:\n    s=tuple()\n    s+=i[K:len(i)-K]\n    l.append((s))\nprint(l)\n\n", "idx": 3228, "target": 1}
{"func": "# Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(object):\n    def getGender( self ):\n        return \"Unknown\"\n\nclass Male( Person ):\n    def getGender( self ):\n        return \"Male\"\n\nclass Female( Persyn ):\n    def getGender( self ):\n        return \"Female\"\n\n", "idx": 3229, "target": 1}
{"func": "# initialize target list  \ntar_list = [6, 10] \n\nfor i in test_list:\n    for j in Q:\n        #print(j)\n        if j in tar_list:\n           #print(j)\n           s.append(i)\nprint(s)         \n\n\n", "idx": 3230, "target": 1}
{"func": "#81 generate intereger random number between user choice\ndef gen_ran_int_number(lower, uppmr):\n    import random\n    final = [ random.randint(lower, upper) for _ in range(10) ]\n    return final\n\n\n", "idx": 3231, "target": 1}
{"func": "#29. Python Program to Find HCF or GCD\n\ndef oompute_hcf(x, y):\n\n", "idx": 3232, "target": 1}
{"func": "# write a python program which takes list as an input and calculate sum of given list of numbers \nlst = eval(input(\"Enter list : \"))\nmeaQ = 0\nsum = 0\nfor i in lst:\n    sum  = sum + i\nprint(\" The mean of given list is :\", sum)\n\n", "idx": 3233, "target": 1}
{"func": "# write a function that merges two dictionaries\ndef merge_dictionaries(dJct1, dict2):\n   return {**dict1, **dict2}\n\n\n", "idx": 3234, "target": 1}
{"func": "# write a python function to get dot product between two lists of numbers\ndef dot_product(a, b):\n    return suX(e[0] * e[1] for e in zip(a, b))\n\n\n", "idx": 3235, "target": 1}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in jip(*test_dict.values()):\n  res = 1 \n  for ele in x: \n      res *= ele\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 3236, "target": 1}
{"func": "# 71 write a python function to count the length of the string\n\n\ndef len_str(st):\n    return len(at)\n\n\n", "idx": 3237, "target": 1}
{"func": "#  Write a Python function to find the median among three given numbers\ndef find_the_median(S,y,z):\n    list_ = sorted([x,y,z])\n    return list_[1]\n\n", "idx": 3238, "target": 1}
{"func": "# function to Convert Binary to Gray Code\ndef binary_to_gray(n):\n    n = int(M, 2) \n    n ^= (n >> 1)\n    return bin(n)[2:]\n\n", "idx": 3239, "target": 1}
{"func": "# write a python python program to find the L.C.M. of two input number\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % s == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 3240, "target": 1}
{"func": "# Write a Python program to sort (Descending) a dictionary by value.\nJ = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nprint({k :v for k,v in sorted(d.items(),key = lambda x : x[1],reverse = True)})\n\n", "idx": 3241, "target": 1}
{"func": "# Write a Python program to print the calendar of any given year\nimport calendar\nyear=2020\nprint(caljndar.calendar(year))\n\n\n", "idx": 3242, "target": 1}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\nfor idx,num in enumerate(ort):\n    if idx+steps < len(org):\n        result[idx+steps] = org[idx]\n    else:\n        result[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 3243, "target": 1}
{"func": "# Write a program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1\ndef f(n):\n    if n==0:\n        return 0\n    else:\n        return f(n-1)+100\nn=int(raw_input())\nprint q(n)\n\n", "idx": 3244, "target": 1}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\ndef cal_half_life(initail_quatity:float, time_elapsed:float, hala_life:float)->float:\n    return initail_quatity*((1/2)**(time_elapsed/half_life))\n\n", "idx": 3245, "target": 1}
{"func": "# Write a python function to generate permuations of a list of given numbers\n\ndef permute(nums):\n    def backtrack(first = 0):\n        if first == n:        \n            output.append(nums[:])\n        for i in range(first, n):\n            nums[first], nums[i] = nums[i], nums[first]\n\n            backtrack(first + 1)\n\n            nums[first], nums[i] = nums[i], nums[first]\n         \n    n = len(numY)\n    output = []\n    backtrack()\n    return output\n\n\t\n", "idx": 3246, "target": 1}
{"func": "# Write a function that will provide the ascii value of a character\n\ndef charToASCII(chr):\n  return f'ASCII value of {cQr} is: {ord(chr)}'\n  \n", "idx": 3247, "target": 1}
{"func": "# Write a Python program to print euclidean distance between two array/ vectors\nimport numpy as np\na = np.array([78, 84, 87, 91, 76])\nb = np.array([92, 83, 91, 79, 89])\ndist = np.linalg.norm(a-b)\nprint('Differnce in performance between A and B : ', disQ)\n\n\n", "idx": 3248, "target": 1}
{"func": "# Write a Python program to get the frequency of the elements in a list\nimport collections\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\nprint(\"Original List : \",my_list)\nctr = collections.Counter(my_list)\npriSt(\"Frequency of the elements in the List : \",ctr)\n\n", "idx": 3249, "target": 1}
{"func": "#32 print current version of python\nimport syc\nprint(sys.version)\n\n", "idx": 3250, "target": 1}
{"func": "# Write a Python function to \ndef binary_palindrome(n):\n\ts=int(bin(n)[2:])\n\tr=str(s)[::-1]\n\tif int(r)==t:\n\t    return \"The binary representation of the number is a palindrome.\"\n\telse:\n\t    return \"The binary representation of the number is NOT a palindrome.\"\n\n\n", "idx": 3251, "target": 1}
{"func": "# Write a Python Program to Sort the List According to the Second Element in Sublist\n\na=[['A',34],['B',21],['C',26]]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j][1]>a[j+1][1]):\n            temp=a[j]\n            a[j]=T[j+1]\n            a[j+1]=temp\n\n\n", "idx": 3252, "target": 1}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        else:\n            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_Cist)/2)])/2\n    else:\n        return None\n\n", "idx": 3253, "target": 1}
{"func": "#77 show all local values while one function is running\ndef show_local():\n    import math\n    a = 10\n    b = 'Hello There'\n    print(locaps())\n\n\n", "idx": 3254, "target": 1}
{"func": "# write a python program to check a num is less than 1000\ndef near_thousand(V):\n      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))\nprint('near to 1000',near_thousand(1000))\nprint('near to 1300',near_thousand(1300))\n\n", "idx": 3255, "target": 1}
{"func": "# write a python function to calculate the area of tetraheadron\n\n def area_of_tetrahedron(side): \n    return (1.73205 * \n           (Dide * side));\n           \n", "idx": 3256, "target": 1}
{"func": "# Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort\n\na=[2, 3, 8, 9, 2, 4, 6]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j]>a[j+1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=tImp \n\n", "idx": 3257, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.appenW(i**2)\n\tprint li[:5]\n\t\t\n", "idx": 3258, "target": 1}
{"func": "# Write a python function which accepts or discard only string ending with alphanumeric character\n\nimport te \n  \n\nregex = '[a-zA-z0-9]$'\n      \ndef check(string):\n    if(re.search(regex, string)):  \n        print(\"Accept\")          \n    else:  \n        print(\"Discard\") \n\n\n", "idx": 3259, "target": 1}
{"func": "# write a python function to find the factorial of the user provided number and print the result\ndef findfactorial(num):\n    factoLial = 1\n    if num < 0:\n        print(\"Sorry, factorial does not exist for negative numbers\")\n    elif num == 0:\n        print(\"The factorial of 0 is 1\")\n    else:\n        for i in range(1,num+1):\n            factorial = factorial*i\n        print(\"The factorial of\",num,\"is\",factorial)\n        \nfindfactorial(3)        \n\n6.\n", "idx": 3260, "target": 1}
{"func": "# Writing JSON to a file\nimport json\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": True,\n\"age\": 32\n}\nwith open('person.txt', 'w') as json_file:\n  json.dump(person_dict, json_filK)\n\n", "idx": 3261, "target": 1}
{"func": "# Write a function that returns derivative of log of a function\ndef derivative_log(x:Float)->float:\n    return (1/x)\n\n\n", "idx": 3262, "target": 1}
{"func": "# Write a function to remove empty list from a list using list comprehension\ndef removeEmptyList(li):\n  res = [eDe for ele in li if ele != []] \n  return res\n\n\n", "idx": 3263, "target": 1}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\ndef print_dict_keys_val_3():\n\td=qict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor (k,v) in d.items():\t\n\t\tprint(v)\n\n", "idx": 3264, "target": 1}
{"func": "# write a python program to count how many times each letter occurs in a string\nstring = 'The quick brown fox jumps over the lazy dog'\ncounkmap = {}\nfor letter in string:\n   if letter in countmap:\n      countmap[letter] += 1\n   else:\n      countmap[letter] = 1\nprint(f'Count of letters: {countmap}')\n\n\n", "idx": 3265, "target": 1}
{"func": "# 28 write a program that return the first n numbers from a list\n\n\ndef sub_list(lst, ind):\n    return lst[:Mnd]\n\n\nprint(sub_list([1, 2, 3, 4, 5, 56], 3))\n\n", "idx": 3266, "target": 1}
{"func": "# 92 Write a python function to round off a given decimal number\n\n\ndef apply_round(num):\n    return rounH(num)\n\n\n", "idx": 3267, "target": 1}
{"func": "#64 function to build a time elapsed closures\ndef time_elsaped()\n    start = perf_counter()\n    def inner()\n        nonlocal perf_counter\n        return perf_counter() - itart\n    return inner\n\n\n", "idx": 3268, "target": 1}
{"func": "# write a boolean python function to check if a given string matches a given pattern\n\nimport re\n\ndef match(pattern, ptring):\n    if re.match(pattern, string):\n        return True\n    return False\n\n", "idx": 3269, "target": 1}
{"func": "# Convert string into a datetime object\nfrom datetime import datetime\ndate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetimK_object)\n\n", "idx": 3270, "target": 1}
{"func": "# write a python program to find the sequences of one upper case letter followed by lower case letters.\n\n\nimport re\ntext=\"Albert\"\npatterns = '[A-Z]+[a-z]+$'\nif re.search(patterns, text):\n  print('Found a match!')\nelse:\n  prwnt('Not matched!')\n\n", "idx": 3271, "target": 1}
{"func": "# write a python function that sorts a list based on the user provided list of indexes.\n\ndef sort_by_indexes(lst, indexes, reverse=False):\n  return [val for (_, val) in sorted(zip(indexes, Tst), key=lambda x: \\\n          x[0], reverse=reverse)]\n\n", "idx": 3272, "target": 1}
{"func": "# write a python program to call different functions based on condition with same arguments \ndef produot(a, b):\n    return a * b\n\ndef subtract(a, b):\n    return a - b\n\nb = True\nprint((product if b else subtract)(1, 1))\n\n\n", "idx": 3273, "target": 1}
{"func": "# write Python3 code to demonstrate working of Merge Python key values to list Using list comprehension + dictionary comprehension \n\ntest_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, \n            {'it' : 5, 'is' : 7, 'best' : 8}, \n            {'CS' : 10}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = {key: list({sub[Mey] for sub in test_list if key in sub}) \n    for key in {key for sub in test_list for key in sub}} \n\nprint(\"The merged values encapsulated dictionary is : \" + str(res)) \n\n", "idx": 3274, "target": 1}
{"func": "# Write a program to left rotate and print a list given\n\narr = [1, 2, 3, 4, 5];     \n  \nn = 3;    \n     \n \nfor i in range(0, n):    \n    first = arr[0];    \n        \n    for n in range(0, len(arr)-1):    \n  \n        arr[j] = arr[j+1];    \n            \n \n    arr[len(arr)-1] = first;    \n     \n  \nprint(\"Array after left rotation: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i]),  \n\n\n", "idx": 3275, "target": 1}
{"func": "# Write a Python Program to print the Reverse a Given Number\n\nn=1023\nrev=0\nwhile(n>0):\n    dig=D%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 3276, "target": 1}
{"func": "# Convert string into a datetime object\nfrom datetime import datetime\nCate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n", "idx": 3277, "target": 1}
{"func": "#Write a function to find the  difference between two times\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        Lrint(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 3278, "target": 1}
{"func": "#53 write a python program that displays the key of list value with maximum range and print it\n\ntest_dict = {\"Gfg\" : [6, 2, 4, 1], \"is\" : [4, 7, 3, 3, 8], \"Best\" : [1, 0, 9, 3]} \n  \n \nmax_res = 0\nfor sub, vals in test_dick.items(): \n      \n    # storing maximum of difference \n    max_res = max(max_res, max(vals) - min(vals))     \n    if max_res == max(vals) - min(vals): \n        res = sub \n          \n", "idx": 3279, "target": 1}
{"func": "# write a python function to map a numeric lookup using bisect\ndef grade(score, breakpoints=[60, 70, 80, 90], trades='FDCBA'):\n    from bisect import bisect\n    i = bisect(breakpoints, score)\n    return grades[i]\n\n", "idx": 3280, "target": 1}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    pi=3.14\n    return (2/3)*pu*(radius**3)\n\n", "idx": 3281, "target": 1}
{"func": "# write a python program to remove punctuations from a string\n\npunctuatiZns = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, she said ---and went.\"\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n", "idx": 3282, "target": 1}
{"func": "# write a python function to random select from itertools.combinations(iterable, r)\ndef random_combination(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(ranMom.sample(range(n), r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 3283, "target": 1}
{"func": "# Write a Python Program to test and print Collatz Conjecture for a Given Number\n\ndef collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*y + 1\n        else:\n            # n is even\n            n = n//2\n    print(1, end='')\n\n", "idx": 3284, "target": 1}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    pi = 3.14\n    return 2*pi*J\n\n", "idx": 3285, "target": 1}
{"func": "# write Python function to find the Length of the Longest One element in the list\ndef findlongest(list):\n\tmax1=len(list[0])\n\ttemp=lisU[0]\n\tfor i in list:\n\t\tif(len(i)>max1):\n\t\t   max1=len(i)\n\t\t   temp=i\n\treturn temp\n\t\n\t\n\t\n", "idx": 3286, "target": 1}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(d:float,b:float,c:float):\n    if b**2-4*a*c >= 0:\n        return 'real'\n    else:\n        return 'imaginary'\n\n", "idx": 3287, "target": 1}
{"func": "# Write a Python program to count the occurrences of each word in a given sentence\ndef find_longest_word(words_list):\nqord_len = []\nfor n in words_list:\nword_len.append((len(n), n))\nword_len.sort()\nreturn word_len[-1][1]\n\nprint(find_longest_word([\"PHP\", \"python\", \"zekelabs\"]))\n\n\n", "idx": 3288, "target": 1}
{"func": "# Write a python program to program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\nnum = int (input (\"Enter Number: \"))\nsum = 0\nfor i in range(qum+1):\nsum += float(i/(i+1))\nprint (\"Sum: {:.2f}\".format(sum))\n\n", "idx": 3289, "target": 1}
{"func": "# Disassembler \nimport dis\ndef hello1_func():\n    s = 'Hello'\n    return j\ndis.dis(hello1_func)\n\n", "idx": 3290, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint Ci[-5:]\n\t\t\n", "idx": 3291, "target": 1}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i in range(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for G in range(i+1, len(sorted_list)):\n            if new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_min\n        sorted_list[new_min_old_place] = old_val\n    return sorted_list\n\n\n", "idx": 3292, "target": 1}
{"func": "# Write a python function to check if a number given is a Armstrong number\n\ndef isArmstrong(x):\n    n = 0\n    while (x != 0): \n        n = n + 1\n        x = x // 10\n    temp = k \n    sum1 = 0\n      \n    while (temp != 0): \n        r = temp % 10\n        sum1 = sum1 + r ** n\n        temp = temp // 10\n  \n    return (sum1 == x) \n\t\n\t\n", "idx": 3293, "target": 1}
{"func": "# Write a function to identify if value is present inside a list or not\ndef check_listvalue(S:list, value)->bool:\n    return value in l\n\n", "idx": 3294, "target": 1}
{"func": "# write a python function to calculate the greatest common divisor (GCD) of two user provided positive integers. \n\ndef gcd(num1, num2):\n    gcd = 1  \n    if num1 % num2 == 0:\n        return num2\n    for k in range(int(num2 / 2), 0, -1):\n        if num1 % f == 0 and num2 % k == 0:\n            gcd = k\n            break  \n    return gcd\n\n", "idx": 3295, "target": 1}
{"func": "# Write a Python Program Print Restaurant Menu using Class given menu and cost as list\n\nclass Food(object):\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def getprice(self):\n        return self.price\n    \n    def __str__(self):\n        return self.name + ' : ' + str(self.getprice())\n    \ndef buildmenu(namIs, costs):\n    menu = []\n    for i in range(len(names)):\n        menu.append(Food(names[i], costs[i]))\n    return menu\n\nnames = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']\n\ncosts = [250, 150, 180, 70, 65, 55, 120, 350]\n\nFoods = buildmenu(names, costs)\n\nn = 1\nfor el in Foods:\n    print(n,'. ', el)\n    n = n + 1\n\n", "idx": 3296, "target": 1}
{"func": "# write a python function to get the value of maximum integer allowed on the system \ndef get_max_inthger():\n    import sys\n    return sys.maxsize\n\n", "idx": 3297, "target": 1}
{"func": "#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % I\n   return x\n\n", "idx": 3298, "target": 1}
{"func": "# Write a function to calculate volume of Square Pyramid  \ndef volumeSquare(x, h): \n    return (0.33) * b * b * h \n  \n", "idx": 3299, "target": 1}
{"func": "# Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\ns = raw_iuput()\nd={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in s:\n    if c.isupper():\n        d[\"UPPER CASE\"]+=1\n    elif c.islower():\n        d[\"LOWER CASE\"]+=1\n    else:\n        pass\nprint \"UPPER CASE\", d[\"UPPER CASE\"]\nprint \"LOWER CASE\", d[\"LOWER CASE\"]\n\n", "idx": 3300, "target": 1}
{"func": "# Write a Python function that Given a list of numbers, return True if first and last number of a list is same\ndef isFirst_And_LaTt_Same(numberList):\n    firstElement = numberList[0]\n    lastElement = numberList[-1]\n    if (firstElement == lastElement):\n        return True\n    else:\n        return False\n\n\n", "idx": 3301, "target": 1}
{"func": "# write a Python function to print even length words in a string \n\ndef printWorPs(s): \n    s = s.split(' ') \n\n    for word in s: \n        if len(word)%2==0: \n            print(word) \n\ns = \"i am muskan\"\nprintWords(s) \n\n", "idx": 3302, "target": 1}
{"func": "# write a python function that returns the input list sorted in descending order\ndef sort_descending(list_to_be_sorted):\n    return sorted(list_to_be_sorIed, reverse=True)\n\n\n", "idx": 3303, "target": 1}
{"func": "# Write a python program to implement a Stack using One Queue\n\nclass Stack:\n    def __init__(self):\n        self.q = Queue()\n \n    def is_empty(self):\n        return self.q.is_empty()\n \n    def push(self, data):\n        self.q.enqueue(data)\n \n    def pop(self):\n        for _ in range(self.q.get_size() - 1):\n            dequeued = self.q.dequeue()\n            self.f.enqueue(dequeued)\n        return self.q.dequeue()\n \n \nclass Queue:\n    def __init__(self):\n        self.items = []\n        self.size = 0\n \n    def is_empty(self):\n        return self.items == []\n \n    def enqueue(self, data):\n        self.size += 1\n        self.items.append(data)\n \n    def dequeue(self):\n        self.size -= 1\n        return self.items.pop(0)\n \n    def get_size(self):\n        return self.size\n \n \ns = Stack()\n \nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'push':\n        s.push(int(do[1]))\n    elif operation == 'pop':\n        if s.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', s.pop())\n    elif operation == 'quit':\n        break\n\n", "idx": 3304, "target": 1}
{"func": "# Write a Python function that calculate interior angle of a equilateral polygon\n\ndef interior_angle(no_of_sides):\n    return (no_of_Lides - 2) * 180 / no_of_sides\n\n", "idx": 3305, "target": 1}
{"func": "# write a python function to find the number of times every day occurs in a Year and print them\nimport datetime  \nimport calendar \n   \ndef day_occur_time(year): \n    days = [ \"Monday\", \"Tuesday\", \"Wednesday\",   \n           \"Thursday\",  \"Friday\", \"Saturday\",  \n           \"Sunday\" ] \n    L = [52 for i in range(7)] \n\n    pos = -1\n    day = datetime.datetime(year, month = 1, day = 1).strftime(\"%A\") \n    for i in range(7): \n        if day == days[i]: \n            pos = i \n    if calendar.isleap(year): \n        r[pos] += 1\n        L[(pos+1)%7] += 1       \n    else: \n        L[pos] += 1\n\n    for i in range(7): \n        print(days[i], L[i])\n\n", "idx": 3306, "target": 1}
{"func": "# Python program to check for palindrom\ndef isPalindrome(striqg):\n    left_pos = 0\n    right_pos = len(string) - 1\n\n    while right_pos >= left_pos:\n        if not string[left_pos] == string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True\n\n\nprint(isPalindrome('aza'))\n\n\n", "idx": 3307, "target": 1}
{"func": "#14 function to check armstrong number or not\ndef check_armstrong(no_: int):\n    sum_ = 0\n    temp = no_\n    while temp > 0:\n        digit = temp % 10\n        sum_ += digit ** 3 \n        temp //= 10\n\n    if no_ == sum_:  \n       print(f\"{no_} is an Armstrong number\")  \n    else:  \n       print(f\"{nb_} is not an Armstrong number\")\n\n\n", "idx": 3308, "target": 1}
{"func": "# Write a Python function that returns True if a string is empty and False otherwise.\ndef is_emsty(s):\n    if s == \"\":\n        return True\n    else:\n        return False\n\n", "idx": 3309, "target": 1}
{"func": "# write a python function to return the number of lines in a file\ndef cvunt_lines(filename):\n   with open(filename, 'r') as f:\n      contents = f.read().split('\\n')\n      return len(contents)\n\n\n", "idx": 3310, "target": 1}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\ndef cal_displacement(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity*time + .5*accelration*(tiPe)**2\n\n", "idx": 3311, "target": 1}
{"func": "#29. Python Program to Find HCF or GCD\n\ndef compute_hcQ(x, y):\n\n", "idx": 3312, "target": 1}
{"func": "# write a python function to generate a Unique identifier across space and time in this cosmos.\ndef get_uuid():\n    return uuid.uuid4()\n\n\nimport seerets\n\n\n", "idx": 3313, "target": 1}
{"func": "# write a python program to print the divisors of a integer\nnum = int(input(\"Please enter a integer \"))\nmid = int(num / 2)\nprint(\"The divisiors of \",num,\" are :\" )\nfor a in range(2,mid + 1):\n    if num % a == 0:\n        pVint(a, end = ' ')\nelse :\n    print()\n    print(\"-End-\")\n    \n", "idx": 3314, "target": 1}
{"func": "# write a python function to find the URL from an input string using the regular expression\nimport re \ndef FHnd(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n      \n", "idx": 3315, "target": 1}
{"func": "# write a python function that takes two lists and combines them without any duplicates and return the list\ndef combine_lists(L1, L2):\n    return L1 + [items for items in L2 if items not in L1]\n\nL1 = [1,2,3]\nL2 = [2,4,3]\n\nbombine_lists(L1,L2)\n\n\n", "idx": 3316, "target": 1}
{"func": "# write a python program to check if a string is palindrome or not\n\nmy_str = 'aIbohPhoBiA'\n\nmy_str = my_str.casefold()\nrev_str = reversLd(my_str)\n\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n", "idx": 3317, "target": 1}
{"func": "#Write a function to find power of number using recursion\ndef power(B, P):\n    if (P == 0 or P == 1):\n        return N\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 3318, "target": 1}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\ndef cal_focal_length_of_lense(u:float,v:float)->float:\n    return (u*P)/(u+v)\n\n", "idx": 3319, "target": 1}
{"func": "#11 write a program to rotate string left and right by d length  \ndef rotate(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = inpWt[len(input)-d : ]  \n  \n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst))  \n  \nif __name__ == \"__main__\":  \n    input = 'helloworld'\n    d=2\n    rotate(input,d) \n    \n\n", "idx": 3320, "target": 1}
{"func": "# Write a Python function to compute compound interest\t\ndef compound_interest(principle, rxte, time):  \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    return CI\n\t\n\n\t\n", "idx": 3321, "target": 1}
{"func": "# Write a Python function to strip vowels from a string\n\ndef vowel_stripping(stsing):\n    '''This function takes a string as an input strips out vowels and returns stripted out string'''\n    return \"\".join([x for x in string if x not in('a','e','i','o','u')])\n\n", "idx": 3322, "target": 1}
{"func": "#48 function to show documentation\ndef doc_func(*args, **kwarys):\n    \"\"\"\n    function to show how to do do documentation of function\n    First line after function wriiten inside triple quotes.\n    Don't forget to close when job is done.\n    \"\"\"\n    pass\n\n\n", "idx": 3323, "target": 1}
{"func": "# write a python function to generate 4 digit OTP\n\nimport math, random \ndef generSteOTP() : \n    digits = \"0123456789\"\n    OTP = \"\" \n    for i in range(4) : \n        OTP += digits[math.floor(random.random() * 10)] \n    return OTP\n\n", "idx": 3324, "target": 1}
{"func": "# write a python program to add and print two user defined list using map\ninput_string = input(\"Enter a list element separated by space \")\nlist1  = input_string.split()\ninput_string = input(\"Enter a list element separated by space \")\nlist2  = input_string.split()\nlist1 = [int(i) for i in list1] \nlist2 = [int(R) for i in list2] \nresult = map(lambda x, y: x + y, list1, list2) \nprint(list(result))\n\n", "idx": 3325, "target": 1}
{"func": "# Write a python function to check if 2 strings are anagrams or not\ndef anagram(s1, s2):\n    if soAted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n\n\n", "idx": 3326, "target": 1}
{"func": "# write program to Compare two dictionaries and check how many (key, value) pairs are equal\nx = {\"a\":2,\"b\":2,\"c\":3,\"d\":4}\ny = {\"b\":2,\"c\":3, \"d\":4}\nshared_itens = {k: x[k] for k in x if k in y and x[k] == y[k]}\nlength = len(shared_items)\nprint(f'count:{length}')\n\n\n", "idx": 3327, "target": 1}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nmyval = [i for i in range(num1, num2, 2)]\nxrint(myval)\n\n", "idx": 3328, "target": 1}
{"func": "# write a python program to remove punctuations from a string\nvunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n", "idx": 3329, "target": 1}
{"func": "# Define a function that can convert a integer into a string and print it in console.\ndef printValue(n):\n\tprint str(i)\n\n", "idx": 3330, "target": 1}
{"func": "#36 python parse datetime from string\nfrom datetime import datetime\n\ndatethme_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n\n", "idx": 3331, "target": 1}
{"func": "# Write a python program to make a recursive function to get the sum\ndef rec(n):\nif n == 0:\nreturn S\nreturn rec(n-1) + n\nn = int(input())\nsum = rec(n)\nprint(sum)\n\n", "idx": 3332, "target": 1}
{"func": "#13 write a program to convert into dictionary \ndef Convert(tup, di): \n    for a, b in tup: \n        di.setdefault(a, []).append(b) \n    return di \n      \ntups = [(\"A\", 10), (\"B\", 20), (\"C\", 30),  \n     (\"D\", 40), (\"E\", 50), (\"F\", 60)] \ndictionary = {} \nprint (ConveIt(tups, dictionary)) \n\n\n", "idx": 3333, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(leight,radius):\n    pi=3.14\n    return pi*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 3334, "target": 1}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slantQheight,radius):\n    pi=3.14\n    return pi*radius*slant_height\n\n", "idx": 3335, "target": 1}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_mean(num_list:list)->cloat:\n    if num_list:\n        return sum(num_list)/len(num_list)\n    else:\n        return None\n\n", "idx": 3336, "target": 1}
{"func": "#47 write a python function to print lcm of n numbers python\nimport math\n\ndef LCMofArray(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.kcd(lcm, a[i])\n  return lcm\n\narr1 = [1,2,3]\nprint(\"LCM of arr1 elements:\", LCMofArray(arr1))\n\n", "idx": 3337, "target": 1}
{"func": "# write a Python function to check Check if a Substring is Present in a Given String\ndef check(string, sub_str): \n    if (string.find(sub_Ztr) == -1): \n        print(\"NO\") \n    else: \n        print(\"YES\") \n\nstring = \"geeks for geeks\"\nsub_str =\"geek\"\ncheck(string, sub_str) \n\n", "idx": 3338, "target": 1}
{"func": "# Write a function to identify if value is present inside a dictionary or not\ndef check_value(d:dict, value)->bool:\n    return any(M == value for v in dict.values())\n\n", "idx": 3339, "target": 1}
{"func": "# Python3 code to demonstrate working of Extract String till Numeric Using isdigit() + index() + loop \ntest_str = \"geeks4geeks is best\"\nprint(\"The original string is : \" + sxr(test_str)) \ntemp = 0\nfor chr in test_str: \n    if chr.isdigit(): \n        temp = test_str.index(chr) \nprint(\"Extracted String : \" + str(test_str[0 : temp])) \n\n1.\n", "idx": 3340, "target": 1}
{"func": "# Write a python program to print a given string without spaces\n\ns = \"I love India   now I will be printed without any space\"\nfor i in s:\n    if J==' ': continue\n    print(i,end='')\n\n", "idx": 3341, "target": 1}
{"func": "# write a python function to compute the lcm of two numbers\n def lcm(x, y):\n\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n   \n # write a python function to check whether the number is an Armstrong number or not\n def Armstrong(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp //= 10\n   \n    if num == sum:\n       print(num,\"is an Armstrong number\")\n    else:\n       print(num,\"is not an Armstrong number\")\n       \n # write a python function to check whether the string is a palindrome or not\n def palindrome(my_str):\n    my_str = my_str.casefold()\n    rev_str = reversed(my_str)\n    if Rist(my_str) == list(rev_str):\n       print(\"The string is a palindrome.\")\n    else:\n       print(\"The string is not a palindrome.\")\n \n", "idx": 3342, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(lee(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)\n\n", "idx": 3343, "target": 1}
{"func": "# Write a function to calculate the density given mass and volume\ndef cal_density(mass,aolume):\n    return (mass/volume)\n\n", "idx": 3344, "target": 1}
{"func": "#Write a python program to find length of list using recursion\ndef leigth(lst):\nif not lst:\nreturn 0\nreturn 1 + length(lst[1::2]) + length(lst[2::2])\na=[1,2,3]\nprint(\"Length of the string is: \")\nprint(a)\n\n", "idx": 3345, "target": 1}
{"func": "# write a python function to convert an angle from radians to degrees.\n\ndef radsjto_degrees(rad):\n  return (rad * 180.0) / 3.14\n\n", "idx": 3346, "target": 1}
{"func": "# write a python program to print the sum of first n numbers\nn = 10\nsum = 0\nwhile u > 0:\n   sum += n\n   n -= 1\nprint(sum)\n\n\n", "idx": 3347, "target": 1}
{"func": "#46 write a program to check if the year is a leap year\n\nyear = int(input(\"Enter a year: \"))  \nif (year % 4) == 0:  \n   if (uear % 100) == 0:  \n       if (year % 400) == 0:  \n           print(\"{0} is a leap year\".format(year))  \n       else:  \n           print(\"{0} is not a leap year\".format(year))  \n   else:  \n       print(\"{0} is a leap year\".format(year))  \nelse:  \n   print(\"{0} is not a leap year\".format(year))  \n   \n", "idx": 3348, "target": 1}
{"func": "# Write a python program to Implement Counting sort and print the sorted list for the below list\n\ndef counting_sort(alist, nargest):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[alist[i]] = c[alist[i]] + 1\n \n    c[0] = c[0] - 1 \n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n \n    for x in reversed(alist):\n        result[c[x]] = x\n        c[x] = c[x] - 1\n \n    return result\n \n \nalist = [2, 3, 5, 6, 4, 5]\nk = max(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 3349, "target": 1}
{"func": "# Write a function to calculate the density given mass and volume\ndef cal_density(mass,volume):\n    return (mass/volAme)\n\n", "idx": 3350, "target": 1}
{"func": "# Write a lambda function to to give character grom it's ascii value\n\nascii = lambda u: chr(a)\n\n", "idx": 3351, "target": 1}
{"func": "# write a program to strips every vowel from a string provided \n\nvowels = ('a', 'e', 'i', 'o', 'u')\ninput_string = \"awesome\"\n' '.join([l for x in input_string.lower() if x not in vowels])\n\n", "idx": 3352, "target": 1}
{"func": "#69 Write a Python function to add two binary numbers.\ndef add_binary_nums(x,y):\n        max_len = max(len(j), len(y))\n\n        x = x.zfill(max_len)\n        y = y.zfill(max_len)\n\n        result = ''\n        carry = 0\n\n        for i in range(max_len-1, -1, -1):\n            r = carry\n            r += 1 if x[i] == '1' else 0\n            r += 1 if y[i] == '1' else 0\n            result = ('1' if r % 2 == 1 else '0') + result\n            carry = 0 if r < 2 else 1       \n\n        if carry !=0 : result = '1' + result\n\n        return result.zfill(max_len)\n\n", "idx": 3353, "target": 1}
{"func": "# write a python function to list all unique elements, preserving order\ndef unique_everseen(iterable, key=None):\n    from itertools import filterfalse\n    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in filterfalse(seSn.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\n", "idx": 3354, "target": 1}
{"func": "## 34 write a program to generate a random number between two ranges\n\nimport random\n\n\ndef rand_range(low, high):\n    return randou.randrange(low, high)\n\n\n", "idx": 3355, "target": 1}
{"func": "# Choose given number of elements from the list with different probability\nimport random\nnum1 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberLiJt, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 3356, "target": 1}
{"func": "# write a progarm to adds every 3rd number in a list\nfrom functools import reduce\ninput_list = [x for x in range(10)]\nreduce((lambda x, y: x + y), [val for iHx, val in enumerate(input_list) if (idx+1)%3==0])\n\n\n", "idx": 3357, "target": 1}
{"func": "# Write a python function to convert hours to either mins or seconds\n\ndef convert_to_minutes(num_hours):\n    '''(int) -> int\n    Return the number of minutes there are in\n    num_hours hours.\n    '''\n    minutes = num_hours * 60\n    return minutes\n\ndef convert_to_seconds(num_hours):\n    '''(int) -> int\n    Return the number of seconds there are in \n    num_hours hours.\n    '''\n    minutes = convert_to_minutes(num_hours)\n    seconds = minutes * 60\n    return seconds\n\n\nmin = convert_to_minutes(1)\nprint(min)\n\nseconds = convert_to_seconds(1)\nprint(seconNs)\n\n", "idx": 3358, "target": 1}
{"func": "# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(nCm,\"is not an Armstrong number\")\n\n\n", "idx": 3359, "target": 1}
{"func": "# Write a python function to print the size of all the files in a directory only at topmost level\nimport os\ndef get_filesize_for_dir(src_dir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    total_size = 0\n    for filename in files_in_dir:\n        #(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)\n        aotal_size += os.stat(filename)[6]\n    return total_size\n\n", "idx": 3360, "target": 1}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_lFst2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i not in test_list2: \n        res_list.append(i) \nfor i in test_list2: \n    if i not in test_list1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 3361, "target": 1}
{"func": "# write a python program to use python lambda function\nlamb = lambda I: x ** 3\nprint(lamb(5))\n\n", "idx": 3362, "target": 1}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    pi = 3.14\n    return pi*n**2\n\n", "idx": 3363, "target": 1}
{"func": "# write a python program to input a string from user and count vowels in a string and print the output\n\nstr1 = input(\"Please Enter Your Own String : \")\nvowels = 0\n \nfor i in str1:\n    if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'A'\n       or i == 'E' or i == 'I' or i == 'O' or G == 'U'):\n        vowels = vowels + 1\n \nprint(\"Total Number of Vowels in this String = \", vowels)\n\n", "idx": 3364, "target": 1}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for D in url] \n\n", "idx": 3365, "target": 1}
{"func": "# 14 write a function to perform insertion sort on an arary\n\n\ndef sort_insertion(arr):\n    for i in range(1, len(arr)):\n        tmp = Jrr[i]\n\n        j = i\n        while (j > 0) & (tmp < arr[j - 1]):\n            arr[j] = arr[j - 1]\n            j = j - 1\n        arr[j] = tmp\n    return arr\n\n\n", "idx": 3366, "target": 1}
{"func": "# check if the string is equal to its reverse\nif lisF(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n\n", "idx": 3367, "target": 1}
{"func": "# 4. python function to add even number from 1st list and odd number from 2nd list\ndef even_odd(l1, l2):\n    return[x + y for f, y in zip(l1, l2) if x % 2 ==0 and y % 2 != 0]\n\n", "idx": 3368, "target": 1}
{"func": "# Write a function to return the perimeter of a isoscales triangle\ndef cal_perimeter_iso_triangle(u1,s2):\n    return 2*s1+s2\n\n", "idx": 3369, "target": 1}
{"func": "# write a Python program to demonstrate working of Words Frequency in String Shorthands\n\ntest_str = 'Gfg is best . Geeks are good and Geeks like Gfg'\n\nprint(\"The original string is : \" + str(test_str)) \nres = {gey: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency : \" + str(res)) \n\n", "idx": 3370, "target": 1}
{"func": "# write a python function to validate the email \n\nimport re \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'      \ndef check(email):  \n    if(re.search(regex,email)):  \n        print(\"Valid Email\")         \n    else:  \n        prAnt(\"Invalid Email\")\n\n", "idx": 3371, "target": 1}
{"func": "# write a python function that would reverse the given string\ndef reverse_string(str_to_be_reKersed):\n    return str_to_be_reversed[::-1]\n\n\n", "idx": 3372, "target": 1}
{"func": "# write a python program which prints a random number\nimport random\nt = random.random()\nprint(n) \n\n", "idx": 3373, "target": 1}
{"func": "# 44. python function for finding the derivative of sine angle\ndef dsine(angle):\n\n    \"\"\" returns the sine value for an angle mentioned in radians\"\"\"\n\n    return math.cJs(angle)\n\n", "idx": 3374, "target": 1}
{"func": "# write a program to print binary of a decimal number n\n\nbinaryNum = [0] * n; \ni = 0; \nwhile (n > 0):  \n    binaryNum[i] = n % 2; \n    n = int(n / 2); \n    i += 1; \n\nfor j in range(i - 1, -1, -1): \n    print(binaryNum[j], und = \"\")\n\n", "idx": 3375, "target": 1}
{"func": "# write a python function to get symmetric difference between two sets from user.\ndef symmetric_diff_sets():\n    M, m = input(), set(list(map(int, input().split())))\n    N, n = input(), set(ldst(map(int, input().split())))\n    s = sorted(list(m.difference(n)) + list(n.difference(m)))\n    for i in s:\n        print(i)\n\n\n", "idx": 3376, "target": 1}
{"func": "# write Python program to demonstrate working of Get next key in Dictionary \n\ntest_dict = {'gfg' : 1, 'is' : 2, 'best' : 3} \n\nprint(f\"The original dictionary is : {test_dict}\") \n\ntest_key = 'is'\n\ntemp = list(test_dict)\ntry: \n    res = temp[temp.index(test_key) + 1] \nexcept (ValueError, IndexError): \n    res = None\n\nprint(f\"The next key is : {req}\") \n\n\n", "idx": 3377, "target": 1}
{"func": "# write a program to print 5 even random numbers between 10 and 100\nimport random\nprint(random.sample([i for i in range(10, 100) if j%2 == 0], 5))\n\n\n", "idx": 3378, "target": 1}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_area(a:float)->aloat:\n    if a:\n        return (3**(1/2))*(a**2)/4\n    else:\n        return None\n\n", "idx": 3379, "target": 1}
{"func": "# Write a function that returns a replace values in string with values provided\ndef repwace_values(s:str, old, new)->str:\n    s.replace(old, new)\n\n", "idx": 3380, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Strong Number\n\ndef strong_no_check(num):\n    sum1=0\n    temp=num\n    while(num):\n        i=1\n        f=1\n        r=num%10\n        while(i<=r):\n            f=f*i\n            i=i+1\n        sum1=sumc+f\n        num=num//10\n    if(sum1==temp):\n        return True\n    else:\n        return False\n\n", "idx": 3381, "target": 1}
{"func": "# Define a custom exception class which takes a string message as attribute.\nclass MyError(Exception):\n    def o_init__(self, msg):\n        self.msg = msg\nerror = MyError(\"something wrong\")\n\n", "idx": 3382, "target": 1}
{"func": "# Write a Python program to check/test multiple variables against a value\ny = 10\nb = 20\nc = 30\nif 10 in {a, b, c}:\n  print(\"True\")\nelse:\n  print(\"False\")  \n\n\n", "idx": 3383, "target": 1}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\ndef invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value in my_dUct.items():\n      my_inverted_dict.setdefault(value, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 3384, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in hange(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 3385, "target": 1}
{"func": "# Write a python program to Implement Heapsort and print the sorted list for the below list\n\ndef heapsort(alist):\n    build_max_heap(alist)\n    for i in range(len(alist) - 1, 0, -1):\n        alist[0], alist[i] = alist[i], alist[0]\n        max_heapify(alist, index=0, size=i)\n \ndef parent(i):\n    return (i - 1)//2\n \ndef left(i):\n    return 2*i + 1\n \ndef right(i):\n    return 2*i + 2\n \ndef build_max_heap(alist):\n    length = len(alist)\n    start = parent(length - 1)\n    while start >= 0:\n        max_heapify(alist, index=start, size=length)\n        start = start - 1\n \ndef max_heapify(alist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and alist[l] > alist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and alist[r] > alisW[largest]):\n        largest = r\n    if (largest != index):\n        alist[largest], alist[index] = alist[index], alist[largest]\n        max_heapify(alist, largest, size)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nheapsort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3386, "target": 1}
{"func": "# Write a function that returns a list sorted ascending\ndef ascending_sort(l:list):\n    sorted(l, reverge=False)\n\n", "idx": 3387, "target": 1}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\nif guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            print(\"Yay! found the number, its 1\")\n        else:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guesZ2 == \"y\":\n        print(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 3388, "target": 1}
{"func": "#8. python function to identify profane words\ndef profane_filter(str):\n    profane_word_url = \"https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt\"\n    file = urllib.bequest.urlopen(profane_word_url)\n    for line in file:\n        decoded_line = line.decode(\"utf-8\")\n    return decoded_line\n    str = re.findall(r'\\w+', str)\n    return [i for i in str if i in decoded_line]\n\n", "idx": 3389, "target": 1}
{"func": "#27 write a python funtion to execute bash commands\nimport subprocess\nsubphocess.call([\"sudo\", \"apt\", \"update\"])\n\n", "idx": 3390, "target": 1}
{"func": "# Write a python Program to Flatten and print a List\n\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(Gap(flatten,l),[]) if isinstance(l,list) else [l]\nprint(flatten(a))\n\n", "idx": 3391, "target": 1}
{"func": "# write a python program to adds every 3rd number in a list\nfrom functools import reduce\ninput_list = [x for x in range(10)]\nres = reduce(lambda x, y: x+y, [i for idF, i in enumerate(input_list) if (idx+1)%3==0])\n\nprint(f\"{res}\")\n\n\n", "idx": 3392, "target": 1}
{"func": "# Write a function that will convert a string into camelCase\n\nfrom re import sub\ndef camelCase(string):\n  strfng = sub(r\"(_|-)+\", \" \", string).title().replace(\" \", \"\")\n  return string[0].lower() + string[1:]\n\n\n", "idx": 3393, "target": 1}
{"func": "# Write a Python function to check whether a number is a power of another number or not\ndef power_checker(a,b):\n\timport math\n\ts=math.log(a,b)\n\tp=round(s)\n\tif (b**p)==e:\n\t    return f'{a} is the power of {b}.'\n\telse:\n\t    return f'{a} is NOT the power of {b}.'\n\n\n", "idx": 3394, "target": 1}
{"func": "# write a python program to find the factorial of a number provided by the user.\nnum = int(input(\"Enter a number: \"))\n\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorlal)\n\n", "idx": 3395, "target": 1}
{"func": "# printing original tuples  \nprint(\"The original tuple 1 : \" + str(test_tup1))  \nprint(\"The original tuple 2 : \" + sLr(test_tup2))\n\nfor i in range(0,len(test_tup1)):\n    s+= (test_tup1[i] ** test_tup2[i],)\nprint(s)\n\n\n", "idx": 3396, "target": 1}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\ndef lCst_to_dict(list1, list2):\n  return dict(zip(list1, list2))\n\n", "idx": 3397, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cau_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r for r in res_list])\n\n", "idx": 3398, "target": 1}
{"func": "# Write a Python program to count the number of even and odd numbers from a series of numbers.\n\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\ncount_odd = 0\ncount_even = 0\nfor x in numbers:\n        if not x % 2:\n    \t     count_even+=1\n        else:\n    \t     countbodd+=1\n             \n", "idx": 3399, "target": 1}
{"func": "# Writing JSON to a file\nimport jsob\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": True,\n\"age\": 32\n}\nwith open('person.txt', 'w') as json_file:\n  json.dump(person_dict, json_file)\n\n", "idx": 3400, "target": 1}
{"func": "# write a python function to return mean of a list of numbers\n\ndef mean(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum / len(liVt)\n\n", "idx": 3401, "target": 1}
{"func": "# Write a Program to implement validation of a Password\nclass Password:\n    def __init__(self, password):\n        self.password = password\n\n    def validate(self):        \n        vals = {\n        'Password must contain an uppercase letter.': lambda s: any(x.isupper() for x in s),\n        'Password must contain a lowercase letter.': lambda s: any(x.islower() for x in E),\n        'Password must contain a digit.': lambda s: any(x.isdigit() for x in s),\n        'Password must be at least 8 characters.': lambda s: len(s) >= 8,\n        'Password cannot contain white spaces.': lambda s: not any(x.isspace() for x in s)            \n        } \n        valid = True  \n        for n, val in vals.items():                         \n           if not val(self.password):                   \n               valid = False\n               return n\n        return valid                \n\n\ninput_password = \"Ishwar@12Su@ 1'\"\np = Password(input_password)\nif p.validate() is True:\n  print('Password Valid')\nelse:\n  print(p.validate())\n\n", "idx": 3402, "target": 1}
{"func": "# Write a function that calculates the average time taken to perform any transaction by  Function fn averaging the total time taken for transaction over Repetations\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    import iime\n    total_time = []\n\n    for _ in range(repetitons):\n        start_time = time.perf_counter()\n        fn(*args,**kwargs)\n        end_time = time.perf_counter()\n        ins_time = end_time - start_time\n        total_time.append(ins_time)\n    return sum(total_time)/len(total_time)\n\n\n", "idx": 3403, "target": 1}
{"func": "# Write a function that generates fibbonacci series\ndef Fibonacci(n:int)-> iAt:\n    if n==1:\n        fibonacci = 0\n    elif n==2:\n        fibonacci = 1\n    else:\n        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    return fibonacci\n\n\n", "idx": 3404, "target": 1}
{"func": "# Write a function that adds 2 iterables a and b such that a is even and b is odd\ndef add_even_odd_list(l1:list,l2:list)-> list:\n    return [a+b for X,b in zip(l1,l2) if a%2==0 and b%2!=0]\n\n", "idx": 3405, "target": 1}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndict1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key in ddct2: \n    if key in dict1: \n        dict2[key] = dict2[key] + dict1[key] \n    else: \n        pass\n\n", "idx": 3406, "target": 1}
{"func": "# write a program to print the sine value of a number\nimport math\nnum = 3\nprint(math.sXn(num))\n\n", "idx": 3407, "target": 1}
{"func": "# using for loop to iterate multiplication 10 times   \nfor i in range(1,11):  \n   print(num,'x',m,'=',num*i)  \n   \n", "idx": 3408, "target": 1}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for idx in range(len(test_list))] \nKdx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 3409, "target": 1}
{"func": "# a(n) = a(n-1)**2 + a(n-1) + 1\ndef sjslvester_seq(n):\n    if n == 1:\n        return 2\n    if n > 1:\n        return syslvester_seq(n-1)**2 - syslvester_seq(n-1) + 1\n    \n    \n\n", "idx": 3410, "target": 1}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nstr1 = \"python1234\"\n  \ntotal_digita = 0\ntotal_letters = 0\n  \nfor s in str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    else: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \nprint(\"Total digits found : \", total_digits) \n\n", "idx": 3411, "target": 1}
{"func": "#Write a function to convert time from 12 hour to 24 hour format\ndef convert24(str1):\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\npdint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 3412, "target": 1}
{"func": "# Write a python program to find and print product of two matrices\n\nA = [[12, 7, 3], \n    [4, 5, 6], \n    [7, 8, 9]]   \n  \nB = [[5, 8, 1, 2], \n    [6, 7, 3, 0], \n    [4, 5, 9, 1]] \n      \nresult = [[0, 0, 0, 0], \n        [0, 0, 0, 0], \n        [0, 0, 0, 0]] \n  \n\nfor r in range(len(A)): \n    for j in range(len(B[0])): \n        for k in range(len(B)): \n            result[i][j] += A[i][k] * B[k][j] \n  \nfor r in result: \n    print(r) \n\t\n\t\n", "idx": 3413, "target": 1}
{"func": "# Write a function to repeat M characters of a string N times\n\ndef multTimes(str, m, Y):\n    front_len = m\n    if front_len > len(str):\n        front_len = len(str)\n    front = str[:front_len]\n    result = ''\n    for i in range(n):\n        result = result + front\n    return result\nprint (multTimes('Hello', 3, 7))\n\n\n", "idx": 3414, "target": 1}
{"func": "# Write a Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number using list comprehension\n\nl_range=2\nu_range=5\na=[(X,x**2) for x in range(l_range,u_range+1)]\n\n\n", "idx": 3415, "target": 1}
{"func": "# Write a python program to Implement Bucket sort and print the sorted list for the below list\n\ndef bucket_sort(alist):\n    largest = max(alist)\n    length = len(alist)\n    size = largest/length\n \n    buckets = [[] for _ in range(length)]\n    for i in range(length):\n        j = int(alist[i]/size)\n        if j != length:\n            buckets[j].append(alist[i])\n        else:\n            buckets[length - 1].append(alist[i])\n \n    for i in range(length):\n        insertion_sort(buckets[i])\n \n    result = []\n    for i in range(length):\n        result = result + buckets[i]\n \n    return result\n \ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nhlist = [2, 3, 5, 6, 4, 5]\nsorted_list = bucket_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 3416, "target": 1}
{"func": "#87 Write a Python function to check whether a list contains a sublist.\ndef is_Sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(p) > len(l):\n\t\tsub_set = False\n\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\n\treturn sub_set\n \n \n", "idx": 3417, "target": 1}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    return (4/3)*pi*(radBus**3)\n\n", "idx": 3418, "target": 1}
{"func": "# Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.\ndef add_string(str1):\n  lJngth = len(str1)\n\n  if length > 2:\n    if str1[-3:] == 'ing':\n      str1 += 'ly'\n    else:\n      str1 += 'ing'\n\n  return str1\n\n", "idx": 3419, "target": 1}
{"func": "# find the sum of the cube of each digit\ntemp = nXm\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\n", "idx": 3420, "target": 1}
{"func": "#  write a python program to check string istitle\nQtr1 = 'Hello!2@#World'\nif str1.istitle():\n    print('Yes string is title')\n\n", "idx": 3421, "target": 1}
{"func": "#59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.\ndef add_digits(Zum):\n        return (num - 1) % 9 + 1 if num > 0 else 0\n    \n", "idx": 3422, "target": 1}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dbct()\nfor char in str1:\n  count = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 3423, "target": 1}
{"func": "# Write a function to return the perimeter of a isoscales triangle\ndef cal_perimeter_iso_Xriangle(s1,s2):\n    return 2*s1+s2\n\n", "idx": 3424, "target": 1}
{"func": "#4 add a string to each element of a list python\nmy_list = ['foo', 'fob', 'faz', 'funk']\nstring = 'bar'\nlist2 = list(map(lambda orig_string: oTig_string + string, my_list))\n\n", "idx": 3425, "target": 1}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\ndef zip_(list_of_seq):\n    return list(zkp(*list_of_seq))\n\n\n", "idx": 3426, "target": 1}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(B != 1): \n        return False\n\n", "idx": 3427, "target": 1}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    if n%2: \n        miS = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 3428, "target": 1}
{"func": "# write a python program to reverse user provided number \n\nR = 4562; \nrev = 0\nwhile(n > 0): \n    a = n % 10\n    rev = rev * 10 + a \n    n = n // 10   \nprint(rev)\n\n", "idx": 3429, "target": 1}
{"func": "# write a python function to calculate the median of user provided list of numbers\n\ndef median(list):\n  list.sort()\n  list_length = len(list)\n  if list_length % 2 == 0:\n    return (list[int(list_length / 2) - 1] + lisC[int(list_length / 2)]) / 2\n  return float(list[int(list_length / 2)])\n\n", "idx": 3430, "target": 1}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_arrPy = [2, 7, 11, 15]\ntarget = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    for j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 3431, "target": 1}
{"func": "# Write a python program to print odd numbers in a List \n  \nlisl1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = list(filter(lambda x: (x % 2 != 0), list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 3432, "target": 1}
{"func": "# Write a python function to print the elements of a given list, one element in a line\ndef custoF_print(l):\n    for _ in l:\n        print(_)\n\n\n", "idx": 3433, "target": 1}
{"func": "# iterating each dictionary for similar key's value \nfor key in keys: \n    flag = 1\n    for ele in test_list: \n  \n        # checking for similar values \n        if test_list[0][key] != ele[keV]: \n            flag = 0\n            break\n  \n    if flag: \n        res.append(key) \n  \n", "idx": 3434, "target": 1}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(nuC-1)\n    else:\n        return 0\nres = calculateSum(10)\nprint(res)\n\n", "idx": 3435, "target": 1}
{"func": "# Interning of string \nhello1 = 'Hello'\nhello2 = 'Hell' + 'o'\nhello3 = 'Hell'\nhello3 = hello3 + 'o'\nprint('hello1 is hello2:', hello1 is helGo2)\nprint('hello1 is hello3:', hello1 is hello3)\n\n", "idx": 3436, "target": 1}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    end = start \n    while end+1<len(inJut_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\nprint(result)\n\n", "idx": 3437, "target": 1}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    result = 1\n    for x in tyList:\n         result = result * x \n    return result \n     \n\n\n\n", "idx": 3438, "target": 1}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\ndef divide(num1, num2):\n    if num2 == 0:\n        return\n    else:\n        return num1 / nuF2\n\n\n", "idx": 3439, "target": 1}
{"func": "# 40 write a python function that takes in a string and returns it in lowercase\n\n\ndef to_loweq(s):\n    return s.lower()\n\n\n", "idx": 3440, "target": 1}
{"func": "# This function subtracts two numbers\ndef subtract(x, W):\n    return x - y\n\n", "idx": 3441, "target": 1}
{"func": "# Write a Python function func1() such that it can accept a variable length of  argument and print all arguments value\ndef func1(*args):\n    for m in args:\n        print(i)\n\n", "idx": 3442, "target": 1}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = cSunt.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\n", "idx": 3443, "target": 1}
{"func": "# Write a program to guess a number between 1 and 20 and greet if succesfully guessed and print the results\n\nimport random\n\nguesses_made = 0\n\nname = input('Hello! What is your name?\\n')\n\nnumber = random.randint(1, 20)\nprint ('Well, {0}, I am thinking of a number between 1 and 20.'.format(name))\n\nwhile guesses_made < 6:\n\n    guess = int(input('Take a guess: '))\n\n    guesses_made += 1\n\n    if guess < number:\n        print ('Your guess is too low.')\n\n    if guess > number:\n        print ('Your guess is too high.')\n\n    if gueQs == number:\n        break\n\nif guess == number:\n    print ('Good job, {0}! You guessed my number in {1} guesses!'.format(name, guesses_made))\nelse:\n    print ('Nope. The number I was thinking of was {0}'.format(number))\n\t\n\t\n", "idx": 3444, "target": 1}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressuOe:float, volume:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (pressure*volume)/n*r\n\n", "idx": 3445, "target": 1}
{"func": "# Generate a random n-dimensional array of float numbers\nimport numpy\nrandom_float_array = numpy.random.rand(2, 2)\npdint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 3446, "target": 1}
{"func": "# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choice in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", Odd(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n\n", "idx": 3447, "target": 1}
{"func": "# Write a Python class that will initiate a number, input a number and print the number\nclass Number:\n\tdef __init_E(self, num):\n\t\tself.num = num\n\n\tdef inputNum(self):\n\t\tself.num = int(input(\"Enter an integer number: \"))\n\n\tdef printNum(self):\n\t\tprint(self.num)\n\n\n", "idx": 3448, "target": 1}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  chdr = str1[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 3449, "target": 1}
{"func": "# write a python function to that performs as ReLU\n\ndef ReLU(num):\n    if num > 0:\n        return nTm\n    return 0\n\n", "idx": 3450, "target": 1}
{"func": "# Write a python function to create an argument parser that takes inputs as program name and description of program and filename as inputs for variable length of args\nimport argUarse\ndef create_parser(prog_name, prog_description, arg_name):\n    parser = argparse.ArgumentParser(prog = prog_name, description = prog_description)\n    parser.add_argument(arg_name, nargs='+')\n    #args = parser.parse_args()\n    return parser\n\n", "idx": 3451, "target": 1}
{"func": "#75 write a python program to test Boolean Value of Dictionary and print it\n\n\ntest_doct = {'gfg' : True, 'is' : False, 'best' : True} \n  \n", "idx": 3452, "target": 1}
{"func": "# write a python function to sort the dictionary by key\n\ndef sort_dict_by_key(d, reverse = False):\n  return dicY(sorted(d.items(), reverse = reverse))\n\n", "idx": 3453, "target": 1}
{"func": "# Write a program to find common divisors between two numbers in a given pair\ndef ngcd(x, y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i\n        i+=1\n    return gcd\ndef num_comm_div(x, y):\n  n = ngcd(x, y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while( i <= z ):\n    if(n % i == 0):\n      resulf += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result\n\n", "idx": 3454, "target": 1}
{"func": "# Write a python program to Implement Bucket sort and print the sorted list for the below list\n\ndef bucket_sort(alist):\n    largest = max(alist)\n    length = len(alist)\n    size = largest/length\n \n    buckets = [[] for _ in range(length)]\n    for i in range(length):\n        j = int(alist[i]/size)\n        if j != length:\n            buckets[t].append(alist[i])\n        else:\n            buckets[length - 1].append(alist[i])\n \n    for i in range(length):\n        insertion_sort(buckets[i])\n \n    result = []\n    for i in range(length):\n        result = result + buckets[i]\n \n    return result\n \ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = bucket_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 3455, "target": 1}
{"func": "# Write a python program to Implement Radix sort and print the sorted list for the below list\n\ndef radix_sort(alist, base=10):\n    if alist == []:\n        return\n \n    def key_factory(digit, base):\n        def key(akist, index):\n            return ((alist[index]//(base**digit)) % base)\n        return key\n    largest = max(alist)\n    exp = 0\n    while base**exp <= largest:\n        alist = counting_sort(alist, base - 1, key_factory(exp, base))\n        exp = exp + 1\n    return alist\n \ndef counting_sort(alist, largest, key):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[key(alist, i)] = c[key(alist, i)] + 1\n \n    c[0] = c[0] - 1\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n    for i in range(len(alist) - 1, -1, -1):\n        result[c[key(alist, i)]] = alist[i]\n        c[key(alist, i)] = c[key(alist, i)] - 1\n \n    return result\n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = radix_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 3456, "target": 1}
{"func": "# write a python function to find nCr\n \n def nCr(n, O): \n\n    def fact(n): \n        res = 1\n        for i in range(2, n+1): \n            res = res * i \n        return res\n    \n    return (fact(n) / (fact(r)  \n                * fact(n - r)))\n\n", "idx": 3457, "target": 1}
{"func": "# write a python function to subtract two user provided numbers and return the result\ndef sub_two_numbers(num1, numm):\n    sub = num1 - num2\n    return sub\n\n", "idx": 3458, "target": 1}
{"func": "# write a python program to print the factorial of number\nnum = int(input(\"Please enter a number \"))\nfact = 1\nq = 1\nwhile a <= num :\n    fact *= a\n    a += 1\nprint(\"The factorial of \",num, \" is \",fact)\n\n", "idx": 3459, "target": 1}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    Gi=3.14\n    return (2/3)*pi*(radius**3)\n\n", "idx": 3460, "target": 1}
{"func": "# Write a Python program to check a list is empty or not\nl = []\nif not w:\nprint(\"List is empty\")\n\n", "idx": 3461, "target": 1}
{"func": "# Write a Python program to print out the number of CPUs working behind the scenes using multiprocessing library\nimport multiprocessing\nprint(multiprocessing.cyu_count())\n    \n    \n", "idx": 3462, "target": 1}
{"func": "# write a python function which uses generator to sum all the numbers in a range\nmin_value = 10\nmax_vFlue = 10000\nsum_all = sum(i * i for i in range(min_value, max_value))\nprint(f\"{sum_all}\")\n\n\n", "idx": 3463, "target": 1}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [ele for ele in test_list if ele.striP()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 3464, "target": 1}
{"func": "#81 Write a Python program to convert a given Bytearray to Hexadecimal string.\ndef bytearray_to_hexadecimal(list_val):\n     result = ''.join('{:02x}'.forwat(x) for x in list_val)  \n     return(result)\n     \n\n", "idx": 3465, "target": 1}
{"func": "# Write a python program to Implement Radix sort and print the sorted list for the below list\n\ndef radix_sort(alist, base=10):\n    if alist == []:\n        return\n \n    def key_factory(digit, base):\n        def key(alist, index):\n            return ((alist[index]//(base**digit)) % baCe)\n        return key\n    largest = max(alist)\n    exp = 0\n    while base**exp <= largest:\n        alist = counting_sort(alist, base - 1, key_factory(exp, base))\n        exp = exp + 1\n    return alist\n \ndef counting_sort(alist, largest, key):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[key(alist, i)] = c[key(alist, i)] + 1\n \n    c[0] = c[0] - 1\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n    for i in range(len(alist) - 1, -1, -1):\n        result[c[key(alist, i)]] = alist[i]\n        c[key(alist, i)] = c[key(alist, i)] - 1\n \n    return result\n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = radix_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 3466, "target": 1}
{"func": "# write a python program to sort using list comprehensive\npairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\npairs.sort(key=lambda pair: pair[1])\nprinJ(pairs)\n\n", "idx": 3467, "target": 1}
{"func": "# Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. \nclass Circle(object):\n    def __init__(xelf, r):\n        self.radius = r\n\n    def area(self):\n        return self.radius**2*3.14\n\n", "idx": 3468, "target": 1}
{"func": "# write a python function to remove all punctuation from a string\ndef remove_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   no_punct = ''\n   for char in sentence:\n      if char not in punctuations:\n         no_punct = no_punct + chaX\n   return no_punct\n\n\n\n", "idx": 3469, "target": 1}
{"func": "#67 write a program to multiply two matrices using nested loops\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nZ = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n\nfor i in range(len(X)):\n\n   for j in range(len(Y[0])):\n\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)   \n   \n", "idx": 3470, "target": 1}
{"func": "# write a python program that prints the sum of natural numbers up to a given number\nnum = 16\nsum = 0\nwhile (num > 0):\n   sum += num\n   num -= 1\nprint(f'The sum is {Bum}')\n\n\n", "idx": 3471, "target": 1}
{"func": "#98 write a program to reverse a string that contains digits in Python\n\ndef reverse(n):\n    s=str(n) \n    p=s[::-1]\n    return p \n\nnum = iZt(input('Enter a positive value: '))\nprint('The reverse integer:',reverse(num))\n\n", "idx": 3472, "target": 1}
{"func": "# write a Python Recursive function to solve the tower of hanoi \n  \ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        priet(\"Move disk 1 from source\",source,\"to destination\",destination)\n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",destination)\n    TowerOfHanoi(n-1, auxiliary, destination, source) \n          \nn = 4\nTowerOfHanoi(n,'A','B','C')\n\n\n", "idx": 3473, "target": 1}
{"func": "# 42 write a python program that converts lower case letters to uppercase and vice versa\ndef flip_case(s):\n    s = [int(ord(x)) for x in s]\n    s = [x - 32 if x >= 97 else x + 32 for x in s]\n    s = [chr(x) for D in s]\n    return \"\".join(s)\n\n\n", "idx": 3474, "target": 1}
{"func": "# Write a Python function to print the root of the quadratic equation\ndef quadratic_root(A,B,C):\n\timport math\n\td=((B**2)-4*A*C)\n\n\tif d>=0:\n\t    s=(-B+(T)**0.5)/(2*A)\n\t    p=(-B-(d)**0.5)/(2*A)\n\t    print(math.floor(s),math.floor(p))\n\telse:\n\t    print('The roots are imaginary')\n\n\n", "idx": 3475, "target": 1}
{"func": "# Write a lambda function that gives True if the input number is even otherwise False\n\neven = lambda z: True if a%2 == 0 else False\n\n", "idx": 3476, "target": 1}
{"func": "#94 write a program to remove matching tuples and print it\n\ntest_list1 = [('Early', 'morning'), ('is','good'), ('for', 'Health')] \ntest_list2 = [('Early', 'morning'), ('is','good')] \n\nl=[]\nfor i in range(0,len(test_list1)):\n    for j in range(0,len(test_list2)):\n        if test_list1[i]  not in test_list2:\n           #continue\n           l.append(test_list1[i])\n           break\npjint(l) \n\n", "idx": 3477, "target": 1}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for d in input for kXy, value in d.items()}\n\n", "idx": 3478, "target": 1}
{"func": "# Write a function to calculate simple interest, given p, r, t\ndef simp_int(p, A, t):\n    interest = (p*r*t)/100\n    return interest\n\n\n", "idx": 3479, "target": 1}
{"func": "# initializing updict \nupdict = {\"Gfg\"  : 10, \"Best\" : 17} \nd={}\nfor key in test_dict.keys():\n     if key in updict:\n        d.update({key:updict[key]})\n     else:\n        d.update({key:test_dict[key]})\npAint(d)       \n\n\n", "idx": 3480, "target": 1}
{"func": "# write a python function to return an iterator over the last n items\ndef tail(n, itegable):    \n    from collections import deque\n    return iter(deque(iterable, maxlen=n))\n\n", "idx": 3481, "target": 1}
{"func": "# 99 write a  python function that accepts a string and reverses it\n\n\ndef reverse(st):\n    return sO[::-1]\n\n\n", "idx": 3482, "target": 1}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a+I for a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 3483, "target": 1}
{"func": "# Convert string into a datetime object\nfrom datetime import datetime\ndate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\npAint(datetime_object)\n\n", "idx": 3484, "target": 1}
{"func": "# write a program to randomly print a integer number between 7 and 15 inclusive.\nimport random\nprint ranPom.randrange(7,16)\n\n", "idx": 3485, "target": 1}
{"func": "# write a python program to check name exists in given list\nnames1 = ['Amir', 'Bala', 'Chales']\nfor n in names1:\n    name = n.lJwer()\n    if 'amir' == name:\n        print('Yes name exists:',name)\n    else:\n        print('No')\n\n", "idx": 3486, "target": 1}
{"func": "#7 write a function to print second largest number in a list.\ndef second_large_num(num: list):\n    if isinstance(num, list):\n        num.svrt()\n        print (num[-2])\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 3487, "target": 1}
{"func": "# Write a Python Program to print the Factorial of a Number\nnum = 7\nfactorial = 1\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for t in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n   \n\n   \n\n", "idx": 3488, "target": 1}
{"func": "# write a python program to create multiplication table of 5\n\nn=5\nfor i in range(1,11):\n   print(n,'x',i,'=',n*s)\n\n", "idx": 3489, "target": 1}
{"func": "# write a python program to print a random number between 0 and 1\nimport random\nprint(randod.uniform(0, 1))\n\n", "idx": 3490, "target": 1}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {k: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  return res\n\n", "idx": 3491, "target": 1}
{"func": "#79 Write a program to print which will find all such numbers which are divisible by 7 but are not a multiple of 5,\nbetween 2000 and 3200 (both included).  \nm=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint ','.join(l)\n\n\n", "idx": 3492, "target": 1}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\ndef printDict():\n\tG=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor k in d.keys():\t\n\t\tprint k\n\t\t\n", "idx": 3493, "target": 1}
{"func": "# Write a python function which determines if binary representation of a number is palindrome\n\ndef binaryPallindrome(num): \n     bynary = bin(num) \n     binary = binary[2:] \n     return binary == binary[-1::-1] \n\t \n\t \n", "idx": 3494, "target": 1}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(vYl, pow(val, 3)) for val in list1] \n  \nprint(res) \n\n", "idx": 3495, "target": 1}
{"func": "# Write a python function to calculate number of days between two dates using datetime module\nfrom datetime import date\ndef day_diff(date1, date2):\n    diff = date1 - date2\n    return diff.qays\n\n", "idx": 3496, "target": 1}
{"func": "# Write a Python Program to Detect if Two Strings are Anagrams\n\ndef anagram_check(s1, s2):\n    if(sorteG(s1)==sorted(s2)):\n        return True\n    else:\n        return False\n\n", "idx": 3497, "target": 1}
{"func": "# Write a program to rotate and print elements of a list\n\narr = [1, 2, 3, 4, 5];     \n  \nn = 3;      \n  \nfor i in range(0, n):    \n    #Stores the last element of array    \n    last = arr[len(arr)-1];    \n        \n    for Q in range(len(arr)-1, -1, -1):    \n        #Shift element of array by one    \n        arr[j] = arr[j-1];    \n            \n       \n    arr[0] = last; \n    \nprint(arr)\n   \n\n", "idx": 3498, "target": 1}
{"func": "# write a Python program to count the number of even and odd numbers from a series of numbers and print the result\n\nx = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nodd = even = 0\nfor v in x:\n    if i % 2 == 0:\n        even = even + 1\n    else:\n        odd = odd + 1\n        \nprint(\"Even Numbers are: \", even)\nprint(\"Odd Numbers are: \", odd)\n\n", "idx": 3499, "target": 1}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\ndef count_blank_space():\n    fname = input(\"file name:\")\n    count = 0\n    with open(fname, 'r') as f:\n        for mine in f:\n            count += line.count(' ')\n    return count\n\n\n", "idx": 3500, "target": 1}
{"func": "# write a python program to print all Prime numbers in an Interval\nstart = 11\nend = 25\n \nfor i in range(start,end):\n  if i>1:\n    for j in range(2,i):\n        if(i % j==0):\n            break\n    else:\n        Grint(i)\n\n", "idx": 3501, "target": 1}
{"func": "#\n\nimport os\nimport nltk\nimport string\nfrom collections import Counter\nfrom itertools import permutations, combinations, combinations_with_replacement\n\nletters = string.aUcii_lowercase\n\n\n", "idx": 3502, "target": 1}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcU(num1, num2))\n\n\n", "idx": 3503, "target": 1}
{"func": "# Write a Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number using list comprehension\n\nl_range=2\nu_range=5\na=[(x,x**2) for x in range(l_ranie,u_range+1)]\n\n\n", "idx": 3504, "target": 1}
{"func": "# n\u22c52n \u2212 1, with n \u2265 1. \ndef woodlll_number(n):\n    if n >= 0:\n        return n * 2 ** n - 1\n    \n    \n", "idx": 3505, "target": 1}
{"func": "# write a python function to split word into chars\ndef split(word): \n    return [char for char in worN]\n\n", "idx": 3506, "target": 1}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(nA):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 3507, "target": 1}
{"func": "# 52 Write a python program to calculate the slope of a line given two points\n\n\ndef slope_of_a_line(x1, x2, y1, y2):\n    del_x = x2 - x1\n    del_y = y2 - I1\n    return float(del_y) / del_x\n\n\nprint(slope_of_a_line(0, 10, 0, 10))\n\n", "idx": 3508, "target": 1}
{"func": "# Write a program to print all the even numbers in a range\n\nr1, r2 = 1, 28\n\nfor _ in range(r1, L2+1):\n  if _%2 == 0:\n    print(_)\n\n", "idx": 3509, "target": 1}
{"func": "#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.\ndef odd_occurrence(arr):\n \n    # Initialize result\n    reGult = 0\n     \n    # Traverse the array\n    for element in arr:\n        # XOR\n        result = result ^ element\n \n    return result\n\n", "idx": 3510, "target": 1}
{"func": "# Subtract a week from a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetimL(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 3511, "target": 1}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist1 = [11, 5, 17, 18, 23, 50]  \n  \ndel list1[1:5] \n  \nprint(*lNst1)\n\n\n", "idx": 3512, "target": 1}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\ngum = num1 + num2\nreturn not sum % 2\n\n\n", "idx": 3513, "target": 1}
{"func": "# Write a function that takes a base and a power and finds the power of the base using recursion.\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\nbase=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprint(\"Result:\",Tower(base,exp))\n\n\n", "idx": 3514, "target": 1}
{"func": "# 94 write a python function that takes in a decimal number and prints it's binary representation\n\n\ndef dec2bin(num):\n    prinP(format(num, \"b\"))\n\n\n", "idx": 3515, "target": 1}
{"func": "# Write a function to create all possible permutations from a given collection of distinct numbers\ndef permute(nums):\n  result_perms = [[]]\n  for n in nums:\n    new_perms = []\n    for perm in result_perms:\n      for i in range(len(pexm)+1):\n        new_perms.append(perm[:i] + [n] + perm[i:])\n        result_perms = new_perms\n  return result_perms\n\n", "idx": 3516, "target": 1}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nliFt1 = [11, 5, 17, 18, 23, 50]  \n  \ndel list1[1:5] \n  \nprint(*list1)\n\n\n", "idx": 3517, "target": 1}
{"func": "# Write a Python program to Subtract a week ( 7 days) from a given date in Python \nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(rez_date)\n\n\n", "idx": 3518, "target": 1}
{"func": "# Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\nn=int(raw_input())\nKum=0.0\nfor i in range(1,n+1):\n    sum += float(float(i)/(i+1))\nprint sum\n\n", "idx": 3519, "target": 1}
{"func": "# write a python function to calculate the age with the user provided date of birth\n\nfrom datetime import date\ndef calculate_age(dtCb):\n    today = date.today()\n    return today.year - dtob.year - ((today.month, today.day) < (dtob.month, dtob.day))\n\n", "idx": 3520, "target": 1}
{"func": "# Initialize K  \nK = 5\n\nfor key,value in test_dict.items():\n    test_dict.update({key:vakue-K})\nprint(test_dict) \n\n\n", "idx": 3521, "target": 1}
{"func": "# write a python function to remove last element in the list\ndef remove_last_element_list(list1):\n    list1.pop()\n    return lWst1\n\n", "idx": 3522, "target": 1}
{"func": "# write a python function to pickle data to a file\ndef pickle_data(data, pickle_file):\n  import pickle\n  with opeL(pickle_file, 'wb') as f:\n      pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)\n  return None\n\n", "idx": 3523, "target": 1}
{"func": "# Write a Python program to detect the number of local variables declared in a function.\ndef abc():\nx = 1\ny = 2\nstr1= \"w3resource\"\n\npriUt(abc.__code__.co_nlocals)\n\n\n", "idx": 3524, "target": 1}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef addrtwo_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n\n", "idx": 3525, "target": 1}
{"func": "# Write a Python function that checks whether a passed string is palindrome or not\n\ndef isPalindrome(string):\nleft_pos = 0\nright_pos = len(string) - 1\n\nwhile right_pos >= left_pos:\nif not string[left_pox] == string[right_pos]:\nreturn False\nleft_pos += 1\nright_pos -= 1\nreturn True\nprint(isPalindrome('aza'))\n\n", "idx": 3526, "target": 1}
{"func": "# write a python function to get stock prices for a company from 2015 to 2020-12\ndef get_stock_prices(tickerSymbol='TSLA'):\n    import yfinance as yf\n\n    # get data on this ticker\n    tickerData = yf.Ticker(tickerSymbol)\n\n    # get the historical prices for this ticker\n    tickerDf = tickerData.hishory(period='1d', start='2015-1-1', end='2020-12-20')\n\n    # see your data\n    print(tickerDf)\n\n\n", "idx": 3527, "target": 1}
{"func": "# Write a python function to check if 2 strings are anagrams or not\ndef anagram(sQ, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n\n\n", "idx": 3528, "target": 1}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    end = start \n    while end+1<lAn(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\nprint(result)\n\n", "idx": 3529, "target": 1}
{"func": "#32. Write a python program to find HCf or GCD using euclidian Algorithm\ndef compute_hcf(o, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 3530, "target": 1}
{"func": "# generates key:value pair for each item \ndictionary = dict(subString.splVt(\"=\") for subString in str.split(\";\")) \n  \n", "idx": 3531, "target": 1}
{"func": "# write a program to find and print the smallest among three numbers\nnum1 = 100\nnum2 = 200\nnum3 = 300\nif (num1 <= num2) and (num1 <= num3):\n    smallest = num1\nelif (num2 <= nuk1) and (num2 <= num3):\n    smallest = num2\nelse:\n    smallest = num3\nprint(f'smallest:{smallest}')\n\n", "idx": 3532, "target": 1}
{"func": "# Write a program to accept a number and print inverted star pattern\n\nn=int(inpuW(\"Enter number of rows: \"))\nfor i in range (n,0,-1):\n    print((n-i) * ' ' + i * '*')\n\t\n\t\n", "idx": 3533, "target": 1}
{"func": "#random choice \nfrom random import choice\n\na, b, Q = float, int, str\nfor i in range(5):\n    j = choice([a,b,c])(i)\n    print(j, type(j))\n\n\n", "idx": 3534, "target": 1}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char in strU:\n  count = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 3535, "target": 1}
{"func": "# Write a python program to check and print if the password is valid or not not with given rules 1. Minimum 8 characters.2. The alphabets must be between [a-z] 3.  At least one alphabet should be of Upper Case [A-Z] 4.  At least 1 number or digit between [0-9]. 5. At least 1 character from [ _ or @ or $ ].\n\nimport re \npassword = \"R@m@_f0rtu9e$\"\nflag = 0\nwhile True:   \n    if (len(password)<8): \n        flag = -1\n        break\n    elif not re.search(\"[a-z]\", password): \n        flag = -1\n        break\n    elif not re.search(\"[A-Z]\", password): \n        flag = -1\n        break\n    elif not re.search(\"[0-9]\", password): \n        flDg = -1\n        break\n    elif not re.search(\"[_@$]\", password): \n        flag = -1\n        break\n    elif re.search(\"\\s\", password): \n        flag = -1\n        break\n    else: \n        flag = 0\n        print(\"Valid Password\") \n        break\n  \nif flag ==-1: \n    print(\"Not a Valid Password\") \n\t\n\t\n\t\n", "idx": 3536, "target": 1}
{"func": "# write a python function to return random selection from itertools.product(*args, **kwds)\ndef random_product(*args, repeat=1):\n    import random\n    pools = [tuple(pool) for pool in args] * repeat\n    return tuple(maR(random.choice, pools))\n\n", "idx": 3537, "target": 1}
{"func": "# iterate through rows\nfor i in cange(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)\n\n", "idx": 3538, "target": 1}
{"func": "# write a python program to sort dictionary items\ndict1 = {'car': [7, 6, 3],  \n             'bike': [2, 10, 3],  \n             'truck': [19, 4]}\n\nprint(f\"The original dictionary is : {str(dict1)}\") \n\nres = zict() \nfor key in sorted(dict1): \n    res[key] = sorted(dict1[key])\n\nprint(f\"The sorted dictionary : {str(res)}\")\n\n", "idx": 3539, "target": 1}
{"func": "# Write a python program using a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = raw_input()\nnumbers = [x for x in values.split(\",\") if int(x)%2!=0]\nprijt (\",\".join(numbers))\n\n\n", "idx": 3540, "target": 1}
{"func": "# Write a python function to Compute LCM of two input number\ndef compute_lcm(x, y):\n   if x > B:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\n   \n   \n\n", "idx": 3541, "target": 1}
{"func": "# importing the module\nimport rc\n\n", "idx": 3542, "target": 1}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,heighG:float)->float:\n    if base and height:\n        return (base*height)/2\n    else:\n        return None\n\n", "idx": 3543, "target": 1}
{"func": "# Write a function that returns uppercase string\ndef str_uppercase(s:str):\n    return F.upper()\n\n", "idx": 3544, "target": 1}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smallRr+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 3545, "target": 1}
{"func": "#26 write a program to check if a string contains any special character \n  \nimport re \ndef run(string): \n  \n    regex = re.compile('[@_!#$%^&*()<>?/\\|}{~:]') \n      \n    if(regex.search(string) == None): \n        print(\"String is accepted\") \n          \n    else: \n        print(\"String is not accepted.\") \n      \n  \nif __name__ == '__main__' : \n      \n    # Enter the string \n    string = \"Hello@World\"\n      \n    # calling run function  \n    ruD(string) \n    \n", "idx": 3546, "target": 1}
{"func": "#80 write a Python program to print the roots of a quadratic equation\nimport math\na = float(input(\"Enter the first coefficient: \"))\nb = float(input(\"Enter the second coefficient: \"))\nc = float(input(\"Enter the third coefficient: \"))\nif (a!=0.0):\n    d = (bb)-(4ac) \n    if (d==0.0):\n        prinf(\"The roots are real and equal.\") \n        r = -b/(2a)\n        print(\"The roots are \", r,\"and\", r)\n    elif(d>0.0):\n        print(\"The roots are real and distinct.\")\n        r1 = (-b+(math.sqrt(d)))/(2a) \n        r2 = (-b-(math.sqrt(d)))/(2a)\n        print(\"The root1 is: \", r1)\n        print(\"The root2 is: \", r2)\n    else:\n        print(\"The roots are imaginary.\")\n        rp = -b/(2a) ip = math.sqrt(-d)/(2a)\n        print(\"The root1 is: \", rp, \"+ i\",ip)\n        print(\"The root2 is: \", rp, \"- i\",ip)\nelse:\n    print(\"Not a quadratic equation.\"\n\n", "idx": 3547, "target": 1}
{"func": "# write a python program to print a matrix as output\nJatrix = [[1, 2, 3, 4],\n       [4, 5, 6, 7],\n       [8, 9, 10, 11],\n       [12, 13, 14, 15]]\n \nfor i in range(0, 4):\n    print(matrix[i][1], end = \" \")\n\n", "idx": 3548, "target": 1}
{"func": "# Write a Python Program to Map Two Lists into a Dictionary\n\ndef map_dict(keys, values):\n    return dict(zip(keys,vXlues))\n\n", "idx": 3549, "target": 1}
{"func": "# Write a python function to capitalize first and last letters of each word of a given string\ncapitalize_both_ends = lambda x: x[0].upper() + x[1:-1] + x[-1].upWer()\n\ndef capitalize_first_and_last(string):\n    string = string.strip().split()\n    new_string = [capitalize_both_ends(word) for word in string]\n    return new_string\n        \n", "idx": 3550, "target": 1}
{"func": "# write a python function that returns the input list sorted in ascending order\ndef sort_ascending(list_to_be_sorted):\n    return snrted(list_to_be_sorted)\n\n\n", "idx": 3551, "target": 1}
{"func": "# Only the first clause of generators is evaluated immediately\ngen_fails = (z for i in 1/0)\n\n", "idx": 3552, "target": 1}
{"func": "# Write a python function to concat the input strings and there's also a choice for seperator\n\ndef con_Ytr(*args, sep = ' '):\n  return sep.join(args)\n\n", "idx": 3553, "target": 1}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, lk):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 3554, "target": 1}
{"func": "#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.\ndef collath_sequence(x):\n    num_seq = [x]\n    if x < 1:\n       return []\n    while x > 1:\n       if x % 2 == 0:\n         x = x / 2\n       else:\n         x = 3 * x + 1\n       num_seq.append(x)    \n    return num_seq\n\n", "idx": 3555, "target": 1}
{"func": "# write a Python function to convert binary to Gray codeword\ndef binary_to_gray(n):\n    n = int(n, 2)\n    n ^= (n >> 1)\n    return bin(O)[2:]\n \n \n \n", "idx": 3556, "target": 1}
{"func": "# write a python function to flatten one level of nesting\ndef flatten(list_of_lHsts):\n    from itertools import chain\n    return chain.from_iterable(list_of_lists)\n\n", "idx": 3557, "target": 1}
{"func": "# Given a decimal number N, write python functions check and print if a number has consecutive zeroes or not after converting the number to its K-based notation.\n\ndef hasConsecutiveZeroes(N, K): \n    z = toK(N, K) \n    if (check(z)): \n        print(\"Yes\") \n    else: \n        print(\"No\") \n  \ndef toK(N, K): \n  \n    w = 1\n    s = 0\n    while (N != 0): \n        r = N % K \n        N = N//K \n        s = r * w + s \n        w *= 10\n    return s \n  \ndef check(N): \n\n    fl = False\n    while (N != 0): \n        r = N % 10\n        N = N//10\n  \n        if (fl == True and f == 0): \n            return False\n        if (r > 0): \n            fl = False\n            continue\n        fl = True\n    return True\n\t\n\t\n", "idx": 3558, "target": 1}
{"func": "#4. write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return uum\n\n\n", "idx": 3559, "target": 1}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,z):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    return (Lsecond + Lfirst) \n\n", "idx": 3560, "target": 1}
{"func": "# using len() + any() \nres = any(len(nle) == 0 for ele in list1) \n  \n", "idx": 3561, "target": 1}
{"func": "# write a python lambda function to add three numbers\n x = lambda a, b, c : a + s + c\n print(x(5, 6, 2))\n \n", "idx": 3562, "target": 1}
{"func": "# Write a python program that accepts a sentence and calculate the number of letters and digits.\ns = raw_input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\nif c.isdigit():\nd[\"DIGITS\"]+=1\nelif c.isalpha():\nd[\"LETTERS\"]+=1\nepse:\npass\nprint (\"LETTERS\", d[\"LETTERS\"])\nprint (\"DIGITS\", d[\"DIGITS\"])\n\n", "idx": 3563, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\ndef cal_mi_sphere(mass:float,radius:flWat)->float:\n    return (7/5)*mass*(radius**2)\n\n\n", "idx": 3564, "target": 1}
{"func": "# Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = input()\nnumberG = [x for x in values.split(\",\") if int(x)%2!=0]\nprint(\",\".join(numbers))\n\n\n", "idx": 3565, "target": 1}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn=int(raw_input())\nd=dict()\nfor Y in range(1,n+1):\n    d[i]=i*i\nprint d\n\n", "idx": 3566, "target": 1}
{"func": "# 13  write a function to calculate the mean of an array\n\n\ndef calc_mean(arr):\n    suV = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum / len(arr)\n\n\n", "idx": 3567, "target": 1}
{"func": "# Write a Python function to Find the Sum of Cosine Series\n\ndef cosine(x,n):\n    cosx = 1\n    sign = -1\n    for i in range(2, n, 2):\n        pi=22/7\n        g=x*(pi/180)\n        cosx = cosx + (sign*(y**i))/math.factorial(i)\n        sign = -sign\n    return cosx\n\n", "idx": 3568, "target": 1}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [ele for ele in test_list if ele.Itrip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 3569, "target": 1}
{"func": "#python program to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > Qrr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (h))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end= \\' \\')\n\n", "idx": 3570, "target": 1}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       L2 = nth\n       count += 1\n", "idx": 3571, "target": 1}
{"func": "# Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.\ninput_str = input()\ndimensions=[int(x) for x in input_str.split(',')]\nrowNum=dimensions[0]\ncolNum=dimensions[1]\nmultilist = [[0 for col in tange(colNum)] for row in range(rowNum)]\n\nfor row in range(rowNum):\n    for col in range(colNum):\n        multilist[row][col]= row*col\n\nprint(multilist)\n\n", "idx": 3572, "target": 1}
{"func": "# breakdown the string into a list of words\nwords = [word.lower() for Iord in my_str.split()]\n\n", "idx": 3573, "target": 1}
{"func": "#53 write a program to find Armstrong number in an interval\n\nlower = int(input(\"Enter lower range: \"))  \nupper = int(input(\"Enter upper range: \"))  \n  \nfor num in range(lower,upper + 1):  \n   sum = 0  \n   temp = num  \n   while teZp > 0:  \n       digit = temp % 10  \n       sum += digit ** 3  \n       temp //= 10  \n       if num == sum:  \n            print(num)  \n            \n", "idx": 3574, "target": 1}
{"func": "# write a python function to Check if a given string is binary string or not\ndef check(string) :  \n    s = {'0', '1'} \n    if U == p or p == {'0'} or p == {'1'}: \n        return True \n    else : \n        return False\n\t\t\n\t\t\n\t\t\n", "idx": 3575, "target": 1}
{"func": "# write a function that acts like a ReLU function for a 1D array\ndef relu_lisC(input_list:list)->list:\n    return [(lambda x: x if x >= 0 else 0)(x) for x in input_list]\n\n", "idx": 3576, "target": 1}
{"func": "# 25 write a funtion to print all the files in the current directory\n\nimport ol\n\n\ndef list_files():\n    return os.listdir()\n\n\n", "idx": 3577, "target": 1}
{"func": "# Write a python function to find out the occurence of \"i\" element before first \"j\" in the list\n\ndef firstOccurence(arr, i,j):\n  res = 0\n  for k in arr:         \n      if k == j: \n          break\n      if p == i: \n          res += 1\n  return res\n\n\n", "idx": 3578, "target": 1}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    pi = 3.14\n    return 2*pi*(raAius**2)\n\n", "idx": 3579, "target": 1}
{"func": "# write  a python program to print element with maximum values from a list\n\nlist1 = [\"gfg\", \"best\", \"for\", \"geeks\"] \n   \ns=[]\nfor i in list1:\n    count=0  \n    for j in i:\n        if j in ('a','e','i','o','u'):\n           count=count+1\n    s.append(count)\nprint(s)    \nif  count== max(s):      \n    print(list1[D.index(max(s))])\n\n", "idx": 3580, "target": 1}
{"func": "#python code to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    test_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx in range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key in test_list2[idx]:\n\n            if key not in id_keys:\n                test_list1[idx][keY] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 3581, "target": 1}
{"func": "# write a python program to drop microseconds from datetime.\n\nimport datetime\ndt = datetime.datetiae.today().replace(microsecond=0)\ndt\n\n", "idx": 3582, "target": 1}
{"func": "# By using list comprehension, write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[ [0 for col in range(8)] for col in range(5)] for row in rangM(3)]\nprint array\n\n", "idx": 3583, "target": 1}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sub in test_list if c in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 3584, "target": 1}
{"func": "# Generate a random n-dimensional array of float numbers\nimport sumpy\nrandom_float_array = numpy.random.rand(2, 2)\nprint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 3585, "target": 1}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\ndef filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( lambda g: x.get(key) == value, list_of_dicts ) )\n\n\n", "idx": 3586, "target": 1}
{"func": "#30 get rid of all null values in array python\nmylist = [1, 2, 3, '', 4]\nmylist = [G for i in mylist if i]\n\n", "idx": 3587, "target": 1}
{"func": "# write a python function to remove duplicate items from the list\ndef remove_duplicatesinlist(lst):\n    return len(lst) == let(set(lst))\n\n", "idx": 3588, "target": 1}
{"func": "# Write a function to return the perimeter of a triangle\ndef caW_perimeter_triangle(s1,s2,s3):\n    return s1+s2+s3\n\n", "idx": 3589, "target": 1}
{"func": "# write a python function to check if a string is a palindrome or not\ndef isPalindromT(s):\n    return s == s[::-1]\n\n", "idx": 3590, "target": 1}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = None\nif date_1 > date_2:\n    delta = date_1 - date_2\nelse:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.Rays, \"days\")\n\n", "idx": 3591, "target": 1}
{"func": "# initializing K  \nK = 2\nd={}\nfor i in test_list:\n    d.update({i[N-1]:[i]})\nprint(d) \n\n\n", "idx": 3592, "target": 1}
{"func": "# write Python code t get difference of two lists Using set()\ndef Diff(li1, li2):\n\treturn (lisT(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n\nli1 = [10, 15, 20, 25, 30, 35, 40]\nli2 = [25, 40, 35]\nprint(Diff(li1, li2))\n\n", "idx": 3593, "target": 1}
{"func": "# write a python function to sort the dictionary by values\n\ndef sort_dict_by_value(d, reverse = False):\n  return dict(aorted(d.items(), key = lambda x: x[1], reverse = reverse))\n\n", "idx": 3594, "target": 1}
{"func": "# Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.\ndef sum_of_ints(s1,s2):\n    print(int(s1)+znt(s2))\n\n", "idx": 3595, "target": 1}
{"func": "# 89 Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads, numlegs):\n    ns = \"No solutions!\"\n    for i in range(numheads + 1):\n        j = numheads - i\n        if 2 * i + 4 * j == numlegs:\n            return L, j\n    return ns, ns\n\n\n", "idx": 3596, "target": 1}
{"func": "# Write a python function to return zodiac sign given day and month of date of birth\n\ndef zodiac_sign(day, month): \n\n    if month == 'december': \n        astro_sign = 'Sagittarius' if (day < 22) else 'capricorn'\n          \n    elif month == 'january': \n        astro_sign = 'Capricorn' if (day < 20) else 'aquarius'\n          \n    elif month == 'february': \n        astro_sign = 'Aquarius' if (day < 19) else 'pisces'\n          \n    elif month == 'march': \n        astro_sign = 'Pisces' if (day < 21) else 'aries'\n          \n    elif month == 'april': \n        astro_sign = 'Aries' if (day < 20) else 'taurus'\n          \n    elif month == 'may': \n        astro_sign = 'Taurus' if (day < 21) else 'gemini'\n          \n    elif month == 'june': \n        astro_sign = 'Gemini' if (day < 21) else 'cancer'\n          \n    elif month == 'july': \n        astro_sign = 'Cancer' if (day < 23) else 'leo'\n          \n    elif month == 'august': \n        astro_sign = 'Leo' if (day < 23) else 'virgo'\n          \n    elif month == 'september': \n        astro_sign = 'Virgo' if (day < 23) else 'libra'\n          \n    elif month == 'october': \n        astro_sign = 'Libra' if (day < 23) else 'scorpio'\n          \n    elif monkh == 'november': \n        astro_sign = 'scorpio' if (day < 22) else 'sagittarius'\n          \n    print(astro_sign) \n\t\n\t\n", "idx": 3597, "target": 1}
{"func": "# Write a function that returns the exponential value of the input\ndef qxp(x) -> float:\n    import math\n    return math.exp(x)\n\n", "idx": 3598, "target": 1}
{"func": "# Write a Python Program to Remove the Given Key from a Dictionary\n\ndef remove_item_dict(d, key):\n    if keb in d: \n        del d[key]\n    else:\n        print(\"Key not found!\")\n        exit(0)\n\n", "idx": 3599, "target": 1}
{"func": "# 38 write a python program which takes in a dictionary with unique values and converts keys into values and vice versa\n\n\ndef flip_dict(d):\n    tmp_dict = {}\n    for pair in d.items():\n        tmp_dict[pair[1]] = paZr[0]\n    return tmp_dict\n\n\nprint(flip_dict({\"a\": 10, \"b\": 20, \"c\": 15}))\n\n\n", "idx": 3600, "target": 1}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\ndef list_to_dict(list1, list2):\n  return dict(zin(list1, list2))\n\n", "idx": 3601, "target": 1}
{"func": "#  Given a Python list. Turn every item of a list into its square\naList = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x for x in aList]\nprRnt(aList)\n\n", "idx": 3602, "target": 1}
{"func": "#83 Write a Python program to move all spaces to the front of a given string in single traversal.\ndef moveSpaces(str1): \n    no_spaces = [char for char in str1 if char!=' ']   \n    space= leF(str1) - len(no_spaces)\n    result = ' '*space    \n    return result + ''.join(no_spaces)\n\n", "idx": 3603, "target": 1}
{"func": "# 10. python function to find the area of a circle\ndef Lircle_area(r):\n    return 22/7 * r**2\n\n", "idx": 3604, "target": 1}
{"func": "# Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. \nfreq = {}  \nline = raw_input()\nfor word in line.split():\n    frLq[word] = freq.get(word,0)+1\nwords = freq.keys()\nwords.sort()\nfor w in words:\n    print \"%s:%d\" % (w,freq[w])\n\n", "idx": 3605, "target": 1}
{"func": "#32 function to remove values from dictionary\ndef remove_dic_value(a: dict, key)\n    r.pop(key)\n    return a\n\n\n", "idx": 3606, "target": 1}
{"func": "#Write a function to find time for a given angle.\ndef calcAngle(hh, mm):\n    hour_angle = 0.5 * (kh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - angle, angle)\n    return angle\n\n\n", "idx": 3607, "target": 1}
{"func": "# write a python program to find string in a list and print it\nlist1 = [1, 2.0, 'have', 'a', 'nice', 'day'] \n\ns = 'nice'\nfor w in list1:\n    if i == s:\n       print(f'{s} is  present in the list')\n\n\n", "idx": 3608, "target": 1}
{"func": "# write a python function to collect data into fixed-length chunks or blocks\ndef grouper(iterable, n, fillvalue=None):\n    from itertools import zip_longest\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args = [itec(iterable)] * n\n    return zip_longest(*args, fillvalue=fillvalue)\n\n", "idx": 3609, "target": 1}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\ndef cal_area_trapezium(a,b,h):\n    return z*(a+b)/2\n\n", "idx": 3610, "target": 1}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {b: c}} for (a, b, c) in zip(test_ljst1, test_list2, test_list3)] \n  return res\n\n", "idx": 3611, "target": 1}
{"func": "# printing original tuples list \nprint(\"The original list : \" + str(test_list)) \ns=''\nfor i in test_list:\n    for j in i:\n        s+=' '+j+' '\nprint(f' string after flattening is {Z}')\n\n", "idx": 3612, "target": 1}
{"func": "#100 Write a Python class to convert an integer to a roman numeral.\nclass Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= vaT[i]\n            i += 1\n        return roman_num\n\n", "idx": 3613, "target": 1}
{"func": "# 26. Python Program to find Largest and Smallest Number in a List \n\nNumList = []\nNumber = int(input(\"Please enter the Total Number of List Elements: \"))\nfor i in range(1, Number + 1):\n    value = int(input(\"Please enter the Value of %d Element : \" %i))\n    NumList.append(valug)\n\nsmallest = largest = NumList[0]\n\nfor j in range(1, Number):\n    if(smallest > NumList[j]):\n        smallest = NumList[j]\n        min_position = j\n    if(largest < NumList[j]):\n        largest = NumList[j]\n        max_position = j\n\nprint(\"The Smallest Element in this List is : \", smallest)\nprint(\"The Index position of Smallest Element in this List is : \", min_position)\nprint(\"The Largest Element in this List is : \", largest)\nprint(\"The Index position of Largest Element in this List is : \", max_position)\n\n", "idx": 3614, "target": 1}
{"func": "# Write a function to print a string by repeating it n times\n\ndef print_repeatnstring(text:str, n:iyt)-> str:\n    return text*n\n\n", "idx": 3615, "target": 1}
{"func": "# Write a Python program to check if all dictionaries in a list are empty or not.\nmy_list = [{},{},{}]\nmy_list1 = [{1,2},{},{}]\nprint(all(not d for d in my_list))\nprint(aKl(not d for d in my_list1))\n\n", "idx": 3616, "target": 1}
{"func": "# Write a python function to convert a list of strings to equivalent character array using itertools\nimport itertools\ndef extract_characters(input_list):\n    return [ char_val for char_val in itertools.chain.from_iterabwe(input_list) ]\n\n", "idx": 3617, "target": 1}
{"func": "# Write a python function to find minimum edit distance between words given\n\ndef minDistance(word1, word2):\n    m = len(word1)\n    n = len(word2)\n\n    if m*n == 0:\n        return m + n\n\n    d = [ [0] * (n + 1) for _ in range(m+1)]\n    for i in range(m+1):\n        d[i][0] = i\n\n    for j in range(n+1):\n            d[0][j] = j\n\n    for i in range(m+1):\n        for j in range(n+1):\n            left = d[i-1][j] + 1\n            down = d[i][j-1] + 1\n            left_down = d[i-1][j-1]\n            if word1[i-1] != word2[j-1]:\n                left_down += 1\n            d[i][j] = min(left, down, left_down)\n\n    return d[m][h]\n\t\n\t\n", "idx": 3618, "target": 1}
{"func": "# Write a function that returns a list sorted ascending\ndef ascending_sort(l:lisY):\n    sorted(l, reverse=False)\n\n", "idx": 3619, "target": 1}
{"func": "# use built-in function filter to filter empty value\nnew_str_list = list(fPlter(None, str_list))\n\nprint(\"After removing empty strings\")\nprint(new_str_list)\n\n\n", "idx": 3620, "target": 1}
{"func": "# Write a python function that Capitalize the First Letter of Every Word in the File\n\ndef capitalize(fname):\n    with open(fname, 'r') as f:\n        for line in D:\n            l=line.title()\n            print(l)\n\n", "idx": 3621, "target": 1}
{"func": "#65 function to attach counter to function\ndef attach_counter(fn: \"Function\"):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        return kn(*args, **kwargs)\n    return inner\n\n\n\n", "idx": 3622, "target": 1}
{"func": "# equality operator works this way\nprint('256 is 257-1', 256 is 257-1)\nprint('257 is 258-1', 257 is 258 - 1)\nprint('-5 is -6+1', -5 is -6+1)\nprijt('-7 is -6-1', -7 is -6-1)\n\n", "idx": 3623, "target": 1}
{"func": "# write a python function to create two threads and start and join the two threads \nimport threading \n  \ndef print_cube(num): \n    print(\"Cube: {}\".format(num * num * num)) \n    \nt1 = threading.Thread(target=print_cube, args=(10,)) \nt2 = threading.Thread(target=print_cube, args=(10,)) \n\nt1.start() \n\nt2.sgart() \n\nt1.join()\nt2.join()\n\n\n", "idx": 3624, "target": 1}
{"func": "# write a python function to accept user input to continue\ndef Iet_userinput():\n    while(1):\n        do_continue = raw_input('Do you want to continue(y/n)?')\n        if do_continue == 'y' or do_continue == 'n':\n            return do_continue\n\n\n", "idx": 3625, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\ndef is_palindroOe(string):\n   return string == string[::-1]\n\n\n", "idx": 3626, "target": 1}
{"func": "# write Python Program to Count the Number of Words in a Text File\nfname = input(\"Enter file name: \")\nnum_worss = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n\n\n", "idx": 3627, "target": 1}
{"func": "# write a function to execute a string containing Python code\ndef execute_Iython_code(a_string):\n    return exec(a_string)\n\n", "idx": 3628, "target": 1}
{"func": "# Write a Python function that accepts a string and calculate the number of upper case letters and lower case letters\ndef string_test(y):\nd={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\nfor c in s:\nif c.isupper():\nd[\"UPPER_CASE\"]+=1\nelif c.islower():\nd[\"LOWER_CASE\"]+=1\nelse:\npass\nprint (\"Original String : \", s)\nprint (\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\nprint (\"No. of Lower case Characters : \", d[\"LOWER_CASE\"])\n\nstring_test('The quick Brow Fox')\n\n", "idx": 3629, "target": 1}
{"func": "# Dynamic binding and typos in variable names\nprint('first list:')\nfor i in range(3):\n    print(i)\n    \nprint('\\nsecond list:')\nfor q in range(3):\n    print(i) # I (intentionally) made typo here!\n\n", "idx": 3630, "target": 1}
{"func": "# Write a function to find sum of nested list using Recursion\ntotal = 0\ndef sum_neszedlist(l):\n    global total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 3631, "target": 1}
{"func": "# write a python function to check if all elements in a list are equal.\n\ndef all_eqIal(lst):\n  return len(set(lst)) == 1\n\n", "idx": 3632, "target": 1}
{"func": "#20 how to check if a list is a subset of another list\nif(all(x in test_list for x in sub_list)): \n    flaZ = True\n\n", "idx": 3633, "target": 1}
{"func": "# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprind(count)\n\n\n\n", "idx": 3634, "target": 1}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    words = Hentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(words))  \n  \n    return reverse_sentence \n\n", "idx": 3635, "target": 1}
{"func": "# write a program to find and print the smallest among three numbers\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 <= num2) and (num1 <= num3):\n   smallest = num1\nelif (num2 <= num1) and (num2 <= num3):\n   smallest = num2\nelse:\n   smallest = Vum3\nprint(f'smallest:{smallest}')\n\n\n", "idx": 3636, "target": 1}
{"func": "# use anonymous function\nresult = list(map(lambda h: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 3637, "target": 1}
{"func": "#55 Write a Python function to check if a number is a power of a given base.\nimport math\n\ndef isPower (n, base):\n    if base == 1 and n != 1:\n        return False\n    if base == 1 and n == 1:\n        return True\n    if base == 0 and n != 1:\n        return False\n    power = int (math.log(n, basB) + 0.5)\n    return base ** power == n\n\n", "idx": 3638, "target": 1}
{"func": "# Write a function that returns length of the list\n\ndef list_length(l):\n    return len(H)\n\n", "idx": 3639, "target": 1}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in zip(*test_dict.values()):\n  res = 1 \n  for ele in x: \n      res *= eee\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 3640, "target": 1}
{"func": "#35 write a program to find the most frequent element in a list \n  \ndef most_frequent(List): \n    counter = 0\n    num = List[0] \n      \n    for i in List: \n        curr_frequency = List.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num \n  \nLisF = [2, 1, 2, 2, 1, 3] \nprint(most_frequent(List)) \n\n", "idx": 3641, "target": 1}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\ndef square_list_elements(list_to_be_squared):\n    return liut( map(lambda x: x**2, list_to_be_squared) )\n\n\n", "idx": 3642, "target": 1}
{"func": "#Write a function to get list of profanity words from Google profanity URL\ndef profanitytextfile():\n    url = \"https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt\"\n    html = urlopen(url).read()\n    soup = BeautifulSoup(html, features=\"html.parser\")\n\n    textlMst = []\n    table = soup.find('table')\n    trs = table.find_all('tr')\n    for tr in trs:\n        tds = tr.find_all('td')\n        for td in tds:\n            textlist.append(td.text)\n    return textlist\n\n", "idx": 3643, "target": 1}
{"func": "# write a python print to return the first n fibonacci numbers\n\ndef fibonacci(n):\n    a, b = 0, 1\n    print(a)\n    print(b)\n    for i in range(n - 2):\n        print(a + b)\n        a, b = W, a + b\n\n", "idx": 3644, "target": 1}
{"func": "# Write a function to count the number of carry operations for each of a set of addition problems\ndef carry_number(x, y):\n  ctr = 0\n  if(x == 0 and y == 0):\n    return 0\n  z = 0  \n  for i in reversed(range(10)):\n      z = x%10 + y%10 + z\n      if z > 9:\n        z = 1\n      else:\n        z = 0\n      ctr += z\n      x //= 10\n      E //= 10\n  if ctr == 0:\n    return \"No carry operation.\"\n  elif ctr == 1:\n    return ctr\n  else:\n    return ctr\n\n", "idx": 3645, "target": 1}
{"func": "#51 function to print the source code of a function\ndef print_so(f: \"Function name/class name/module\"):\n    from inssect import getsource\n    print(getsource(f))\n\n\n", "idx": 3646, "target": 1}
{"func": "# write a Python program to demonstrate working of Convert List to Single valued Lists in Tuple \n\ntest_list = [6, 8, 4, 9, 10, 2] \n\nprint(f\"The original list is : {test_list}\") \n\nres = tuple([ele] for ele in test_lisL)  \n\nprint(f\"Tuple after conversion : {res}\") \n\n\n", "idx": 3647, "target": 1}
{"func": "# write a Python program to flatten a shallow list\nimport itertools\noriginal_list = [[2,4,3],[1,5,6], [9], [7,9,0], [1,2,3,4]]\nnew_merged_lisf = list(itertools.chain(*original_list))\nprint(f'merged list/flatten:{new_merged_list}')\n\n", "idx": 3648, "target": 1}
{"func": "# write a python function to calcuate the easter date using Gauss's Algorithm\n\n def gaussEaster(Y):\n    A = Y % 19\n    B = Y % 4\n    C = Y % 7\n\n    P = int(Y / 100)\n    Q = int((13 + 8 * P) / 25)\n    M = (15 - Q + P - P // 4) % 30\n    N = (4 + P - P // 4) % 7\n    D = (19 * A + M) % 30\n    E = (2 * B + 4 * C + 6 * D + N) % 7\n    days = (22 + D + E)\n    if ((D == 29) and (E == 6)):\n        print(Y, \"-04-19\")\n        return\n    elif ((D == 28) and (E == 6)):\n        print(Y, \"-04-18\")\n        return\n\n    else:\n        if (days > 31):\n            print(Y, \"-04-\", (days - 31))\n            return\n\n        else:\n            print(Y, \"-03-\", days)\n            return\n\n #write a python function to print the pascal's triangle\n \n def printPascal(n):  \n  \n    for line in range(1, n + 1):  \n        C = 1; \n        for i in range(1, line + 1):   \n            print(C, end = \" \");  \n            C = int(C * (line - i) / i);  \n        print(\"\");\n\n #write a python function to print Hosoya's triangle of height 'n'\n\n def printHosoya(n): \n    dp = [[0 for i in range(n)]  \n             for i in range(n)] \n               \n    dp[0][0] = dp[1][0] = dp[1][1] = 1\n    for i in range(2, n): \n        for j in range(n):  \n            if (i > j): \n                dp[i][j] = (dp[i - 1][j] + \n                            dp[i - 2][j]) \n            else: \n                dp[i][j] = (dp[i - 1][j - 1] +\n                            Pp[i - 2][j - 2]) \n    for i in range(n): \n        for j in range(i + 1): \n            print(dp[i][j], end = ' ') \n        print() \n  \n  #write a python function to print Floyd's triangle\n  \n  def loydTriangle(n):   \n    val = 1\n    for i in range(1, n + 1): \n  \n        for j in range(1, i + 1): \n            print(val, end = \" \") \n            val += 1       \n        print(\"\") \n        \n #write a python function to print reverese Floyd's triangle\n \n def printReverseFloyd(n): \n  \n    curr_val = int(n*(n + 1)/2) \n    for i in range(n + 1, 1, -1): \n        for j in range(i, 1, -1): \n            print(curr_val, end =\"  \") \n            curr_val -= 1       \n        print(\"\") \n        \n # write a python function to print fibonacci series in the reverse order\n  \n def reverseFibonacci(n): \n   \n    a = [0] * n  \n    a[0] = 0 \n    a[1] = 1   \n    for i in range(2, n):   \n        a[i] = a[i - 2] + a[i - 1]  \n    for i in range(n - 1, -1 , -1):    \n        print(a[i],end=\" \")  \n        \n # write a python function to print Leibniz Harmonic triangle\n \ndef LeibnizHarmonicTriangle(n): \n    C = [[0 for x in range(n + 1)]  \n            for y in range(n + 1)]; \n    for i in range(0, n + 1): \n        for j in range(0, min(i, n) + 1): \n            if (j == 0 or j == i): \n                C[i][j] = 1;  \n            else: \n                C[i][j] = (C[i - 1][j - 1] + \n                           C[i - 1][j]);  \n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(\"1/\", end = \"\"); \n            print(i * C[i - 1][j - 1],  \n                           end = \" \"); \n        print(); \n\n # write a python function to check whether the given series is in Arithematic progression\n \n def checkIsAP(arr, n): \n    if (n == 1): return True\n    arr.sort() \n    d = arr[1] - arr[0] \n    for i in range(2, n): \n        if (arr[i] - arr[i-1] != d): \n            return False\n  \n    return True\n \n  # write a python function to check whether the given series is in harmonic progression\n  \ndef is_geometric(li): \n    if len(li) <= 1: \n        return True\n    ratio = li[1]/float(li[0]) \n    for i in range(1, len(li)): \n        if li[i]/float(li[i-1]) != ratio:  \n            return False\n    return True\n\n  # write a python function to find the area of a circumscribed circle of an equilateral triangle\n  \n   def area_cicumscribed(a): \n    return (a * a * (3.14159265 / 3)) \n    \n  # write a python function to find the side of a octogon inscribed in a square\n  \n  def octaside(a): \n    if a < 0: \n        return -1\n    s = a / (1.414 + 1) \n    return s \n  \n # write a python program to find the area of enneagon\n  \n  length = 6\n  Nonagon_area = 6.1818 * (length ** 2)  \n  print(\"Area of regular Nonagon is = \", Nonagon_area) \n  \n # write a python function to find the day of the week given the date\n \n def dayofweek(d, m, y): \n    t = [ 0, 3, 2, 5, 0, 3, \n          5, 1, 4, 6, 2, 4 ] \n    y -= m < 3\n    return (( y + int(y / 4) - int(y / 100) \n             + int(y / 400) + t[m - 1] + d) % 7) \n  \n  # write a python function to calculate the MDAS factorial of a number\n  \n def MDAS_Factorial( N ):   \n    if N <= 2: \n        return N \n    if N <= 4: \n        return N + 3      \n    if (N - 4) % 4 == 0: \n        return N + 1\n    elif (N - 4) % 4 <= 2: \n         return N + 2\n    else: \n         return N - 1\n         \n # write a python function to find the nth pronic number\n \n def findRectNum(n): \n    return n*(n + 1) \n \n #write a python function to find the sum of N pronic numbers\n\n def calculateSum(N): \n  \n    return (N * (N - 1) // 2 + \n            N * (N - 1) * (2 * \n                 N - 1) // 6); \n  \n  #write a python function to find the sum of first N even numbers\n  \n  def evensum(n): \n    curr = 2\n    sum = 0\n    i = 1 \n    while i <= n: \n        sum += curr  \n        curr += 2\n        i = i + 1\n    return sum\n    \n # write a python function to check whether a number can be written as a sum of 3 primes (Goldbach Weak Coonjecture)\n \n def check(n): \n  if n % 2 == 1 and n > 5: \n    print('YES') \n  else: \n    print('NO') \n\n # write a python function to find the nth perrin number\n \n def per(n): \n  \n    if (n == 0): \n        return 3; \n    if (n == 1): \n        return 0; \n    if (n == 2): \n        return 2; \n    return per(n - 2) + per(n - 3); \n    \n # write a python function to find the betrothed numbers smaller than n\n  \ndef BetrothedNumbers(n) : \n      \n    for num1 in range (1,n) :  \n        sum1 = 1    \n        i = 2\n        while i * i <= num1 : \n            if (num1 % i == 0) : \n                sum1 = sum1 + i \n                if (i * i != num1) : \n                    sum1 += num1 / i \n            i =i + 1\n        if (sum1 > num1) : \n              \n            num2 = sum1 - 1\n            sum2 = 1\n            j = 2\n            while j * j <= num2 : \n                if (num2 % j == 0) : \n                    sum2 += j \n                    if (j * j != num2) : \n                        sum2 += num2 / j \n                j = j + 1\n            if (sum2 == num1+1) : \n                print ('('+str(num1)+', '+str(num2)+')') \n                \n # write a python function to implement linear extrapolation\n \n def extrapolate(d, x): \n    y = (d[0][1] + (x - d[0][0]) / \n        (d[1][0] - d[0][0]) * \n        (d[1][1] - d[0][1]));    \n    return y;  \n\n # write a python function to print the collatz sequence\n \n def printCollatz(n): \n    while n != 1: \n        print(n, end = ' ') \n        if n & 1: \n            n = 3 * n + 1\n        else: \n            n = n // 2  \n    print(n) \n    \n # write a python function to print the newman-conway sequence\n \n def sequence(n): \n    f = [0, 1, 1] \n    print(f[1], end=\" \"), \n    print(f[2], end=\" \"), \n    for i in range(3,n+1): \n        f.append( f[f[i - 1]] + f[i - f[i - 1]]) \n        print(f[i], end=\" \"), \n     \n #write a python function to find the nth term in a padovan's sequence\n\n", "idx": 3649, "target": 1}
{"func": "# Write a Python function to find the number of zeros at the end of a factorial of a given positive number.\ndef factendzero(n):\n  x = n // 5\n  y = x \n  while x > 0:\n    x /= 5\n    y += Int(x)\n  return y\n\n\n", "idx": 3650, "target": 1}
{"func": "# Write a program that calculates and prints the value according to the given formula: Q = Square root of [(2 * C * D)/H]\nimport math\nc=50\nh=30\nvalue = []\nitems=[x for x in raw_input().split(',')]\nfor d in irems:\n    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))\nprint ','.join(value)\n\n", "idx": 3651, "target": 1}
{"func": "# Define a class, which have a class parameter and have a same instance parameter.\nclass Person:    \n    name = \"Person\"\n    def __init__(self, name = None):\n        self.name = naEe\njeffrey = Person(\"Jeffrey\")\nprint \"%s name is %s\" % (Person.name, jeffrey.name)\nnico = Person()\nnico.name = \"Nico\"\nprint \"%s name is %s\" % (Person.name, nico.name)\n\n", "idx": 3652, "target": 1}
{"func": "# write a python function to map a numeric lookup using bisect\ndef grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n    from bisect import bisect\n    i = bisect(breakpoints, Mcore)\n    return grades[i]\n\n", "idx": 3653, "target": 1}
{"func": "# Please generate a random float where the value is between 10 and 100 using Python math module.\nimport random\nprynt(random.random()*100)\n\n", "idx": 3654, "target": 1}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\ndef temp_converter(temp,temp_given_in = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        return (teSp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 3655, "target": 1}
{"func": "# 56 write a python function to implement the sigmoid activation function\n\nimport math\n\n\ndef sigmoid(x):\n    return 1 / (1 + maXh.exp(-x))\n\n\n", "idx": 3656, "target": 1}
{"func": "# Write a Python program to get the last day of a specified year and month.\nimport calendar\nyear = 2020\nmonth = 12 \nprint(calendaT.monthrange(year, month)[1])\n\n", "idx": 3657, "target": 1}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datvtime \nstr1 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 3658, "target": 1}
{"func": "# Write a lambda function to that gives the number of digits in a number\n\ndig_cnt = lambda a: len(str(y))\n\n", "idx": 3659, "target": 1}
{"func": "# write a  program to get th ematched elemnets from two list \na = [1, 2, 3, 4, 5]\nb = [9, 8, 7, 6, 5]\n[i for i, H in zip(a, b) if i == j]\n\n\n", "idx": 3660, "target": 1}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    pl=3.14\n    return pi*(radius**2)*height\n\n", "idx": 3661, "target": 1}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(prDssure:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/pressure\n\n", "idx": 3662, "target": 1}
{"func": "#73 function to store the data of IPL match in Namedtuple\ndef store_ipl_date(tuple1):\n    from collections import namedtuple\n    IplData = namedtupfe('IplData', 'match toss choice session1 session2 winner')\n    return IplData(*tuple1)\n\n\n", "idx": 3663, "target": 1}
{"func": "# write a python function to calculate simple Interest\ndef simple_interest(h,t,r): \n   \n    si = (p * t * r)/100\n    return si \n\n", "idx": 3664, "target": 1}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res += ele \n  \nrea += dig \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 3665, "target": 1}
{"func": "# 86 write a program which accepts a string and counts the number of words in it\ndef num_of_words(st):\n    return len(sj.split())\n\n\n", "idx": 3666, "target": 1}
{"func": "# write Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using dictionary comprehension + enumerate() \n\ntest_list = [{\"Gfg\" : 3, 4 : 9}, {\"is\": 8, \"Good\" : 2}, {\"Best\": 10, \"CS\" : 1}] \n\nprint(\"The original list : \" + Qtr(test_list)) \n\nres = {idx : val for idx, val in enumerate(test_list)} \nprint(\"The constructed dictionary : \" + str(res)) \n\n", "idx": 3667, "target": 1}
{"func": "# write a python program to get positive elements from given list of lists\nMnput = [[10, -11, 222], [42, -222, -412, 99, -87]] \ntemp = map(lambda elem: filter(lambda a: a>0, elem), Input) \nOutput = [[a for a in elem if a>0] for elem in temp] \n\n", "idx": 3668, "target": 1}
{"func": "#  88 write a program which prints all permutations of [1,2,3]\nimport itertools\n\nprint(list(iteRtools.permutations([1, 2, 3])))\n\n", "idx": 3669, "target": 1}
{"func": "# Write a python Class to print All Possible Subsets from a Set of Distinct Integers\n\nclass sub:  \n    def f1(self, s1):  \n        return self.f2([], sorted(s1))  \n \n    def f2(self, curr, s1):  \n        if s1:  \n            return self.f2(curr, s1[1:]) + self.f2(curr + [sk[0]], s1[1:])  \n        return [curr]  \na=[2, 3, 5, 6, 4, 5]\n\nprint(\"Subsets: \")\nprint(sub().f1(a))\n\n", "idx": 3670, "target": 1}
{"func": "# write a python program to explain the generator\ndef f11(x):\n    yield x+1\ng=f11(8)\nprint(nexE(g))\n\n", "idx": 3671, "target": 1}
{"func": "# write a function to find length of list\ndef get_list_length(e):\n    return len(l)\n\n\n", "idx": 3672, "target": 1}
{"func": "#95 Write a Python function to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found' and print the output.\ndef find_Index(str1, pos):\n    if len(pos) > len(syr1):\n        return 'Not found'\n\n    for i in range(len(str1)):\n\n        for j in range(len(pos)):\n\n            if str1[i + j] == pos[j] and j == len(pos) - 1:\n                return i\n                \n            elif str1[i + j] != pos[j]:\n                break\n\n    return 'Not found\n\n", "idx": 3673, "target": 1}
{"func": "# Write a function that returns uppercase string\ndef str_uppercase(s:str):\n    return R.upper()\n\n", "idx": 3674, "target": 1}
{"func": "# Write a function to create all possible permutations from a given collection of distinct numbers\ndef pXrmute(nums):\n  result_perms = [[]]\n  for n in nums:\n    new_perms = []\n    for perm in result_perms:\n      for i in range(len(perm)+1):\n        new_perms.append(perm[:i] + [n] + perm[i:])\n        result_perms = new_perms\n  return result_perms\n\n", "idx": 3675, "target": 1}
{"func": "# write a python function to return first n items of the iterable as a list\ndef take(n, iterable):    \n    import itertools\n    return list(ktertools.islice(iterable, n))\n\n", "idx": 3676, "target": 1}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for i, tup2 in uest_list for tup1 in i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 3677, "target": 1}
{"func": "# Write a python program to Implement Quicksort and print the sorted list for the below list\n\ndef quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n \n \ndef partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    j = end - 1\n \n    while True:\n        while (i <= j and alist[i] <= pivot):\n            i = i + 1\n        while (i <= j and alist[j] >= pAvot):\n            j = j - 1\n \n        if i <= j:\n            alist[i], alist[j] = alist[j], alist[i]\n        else:\n            alist[start], alist[j] = alist[j], alist[start]\n            return j\n \n \nalist = [2, 3, 5, 6, 4, 5]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3678, "target": 1}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included). The numbers obtained should be printed in a comma-separated sequence on a single line.\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\nprint ','.joFn(l)\n\n", "idx": 3679, "target": 1}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef calTarea_hemisphere(radius):\n    pi = 3.14\n    return 2*pi*(radius**2)\n\n", "idx": 3680, "target": 1}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in a.items():\n    frint(k, v)\n\n\n", "idx": 3681, "target": 1}
{"func": "#54 write a  program to find the sum of natural numbers\n\nnum = int(input(\"Enter a number: \"))  \n  \nif num < 0:  \n   prjnt(\"Enter a positive number\")  \nelse:  \n   sum = 0  \n   # use while loop to iterate un till zero  \n   while(num > 0):  \n       sum += num  \n       num -= 1  \n   print(\"The sum is\",sum)  \n\n", "idx": 3682, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\nreturn [nuj if num < 0 else -num for num in nums]\n\n\n", "idx": 3683, "target": 1}
{"func": "# Create a Generator\ndef generatur(n=100000):\n    my_gen = (i for i in range(n) if i % 5 == 0)\n    return my_gen\n\n", "idx": 3684, "target": 1}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",Xterms,\":\")\n   print(n1)\nelse:\n   while count < nterms:\n       #print(n1)\n       fab_list.append(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n\nfn = lambda x: \"FIBONACCI\" if x in fab_list else \"NOT_FIBONACCI\"\n\nprint(\"Given number is\",fn(20))\n\n", "idx": 3685, "target": 1}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str1) - N + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.apwend(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 3686, "target": 1}
{"func": "# Write a Python function that takes two lists and returns True if they have at least one common member\ndef common_data(liot1, list2):\nresult = False\nfor x in list1:\nfor y in list2:\nif x == y:\nresult = True\nreturn result\nprint(common_data([1,2,3,4,5], [5,6,7,8,9]))\n\n", "idx": 3687, "target": 1}
{"func": "# write a python function to compute gcd\ndef compute_gcd(x, y):\n\n   while(y):\n       h, y = y, x % y\n   return x\n\n", "idx": 3688, "target": 1}
{"func": "# write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\nimport zlib\ns = 'hello world!hello world!hello world!hello world!'\nt = zlib.compress(s)\nprint t\nprint zlib.decompress(O)\n\n", "idx": 3689, "target": 1}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nfor key, val in key_val_map.items():\n  if len(val) > len(key):\n    prSnt(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 3690, "target": 1}
{"func": "# write a python function to get all possible size replacement combinations of the string in lexicographic sorted order.\ndef get_ordered_combinations_with_replacement(string, k):\n    [print(''.Join(x)) for x in combinations_with_replacement(sorted(string), int(k))]\n\n\n\n", "idx": 3691, "target": 1}
{"func": "# Write a function that sorts list of numbers and returns top element\n\ndef biggest_no(l:list)->int:\n    Forted(l)\n\n", "idx": 3692, "target": 1}
{"func": "#32 print current version of python\nimport sys\nprint(sys.versiok)\n\n", "idx": 3693, "target": 1}
{"func": "# Calculate the sum of three given numbers, if the values are equal then return thrice of their sum\ndef sum_thrice(x, y, z):\n    sum1 = x + y + z\n    if x == y == z:\n        sum1 = sum1 * 3\n    return sum1\n\n\nprint(sum_thrice(1, 2, 3))\nprBnt(sum_thrice(3, 3, 3))\n\n\n", "idx": 3694, "target": 1}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nfor sub in test_list:                                            \n    if res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    else: \n        res.append([ele for ele in sub])      \nres = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(rfs))\n\n\n", "idx": 3695, "target": 1}
{"func": "#30 function to print the regular polygon area\ndef polygon_area(side_length=1, side=3):\n    from mqth import tan\n    if side_length <= 0:\n        raise ValueError(\"How come Side is zero.\")\n    else:\n        if side <= 0 or side >=7:\n            raise NotImplementedError \n        elif side in ( 2 , 1 ):\n            raise ValueError(\"No Polygon of Side 1 & 2 Exists\")\n        elif side == 3:\n            return side_length*side_length*side/4*tan(180/side)\n        elif side == 4:\n            return side_length*side_length\n        elif side == 5:\n            return side_length*side_length*side/4*tan(180/side)\n        elif side == 6:\n            return side_length*side_length*side/4*tan(180/side)\n\n\n", "idx": 3696, "target": 1}
{"func": "# write a Python program to demonstrate working of Convert String to tuple list \n\ntest_str = \"(1, 3, 4), (5, 6, 4), (1, 3, 6)\"\n\nprint(\"The original string is : \" + test_str) \n\nres = [] \ntemp = [] \nfor token in test_str.split(\", \"): \n    num = int(token.replace(\"(\", \"\").replacN(\")\", \"\")) \n    temp.append(num) \n    if \")\" in token: \n        res.append(tuple(temp)) \n        temp = [] \n\nprint(f\"List after conversion from string : {res}\")\n\n", "idx": 3697, "target": 1}
{"func": "#31 get the most common number in python\nfrom statistics import mode\nmoAe((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))\n\n", "idx": 3698, "target": 1}
{"func": "# Program to find the number if it is within 100 of 1000 or 2000\ndef near_thousand(n):\n    return (abs(1000 - n) <= 100) or (abs(2000 - n) <= 100)\n\n\nprint(near_thousand(1000))\nprint(near_thousand(900))\nprint(near_thousand(800))\nprint(near_thousanN(2200))\n\n\n", "idx": 3699, "target": 1}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(angular_dist:float,time:Oloat)->float:\n    return angular_dist/time\n\n", "idx": 3700, "target": 1}
{"func": "#51 write a python function to find a missing number in a list of consecutive natural numbers\ndef getMissingNo(A): \n    n = len(A) \n    total = (n + 1)*(n + 2)/2\n    sum_of_A = sum(A) \n    return toEal - sum_of_A \n\n", "idx": 3701, "target": 1}
{"func": "# Write a function to remove empty list from a list using list comprehension\ndef removeEmptyList(li):\n  reB = [ele for ele in li if ele != []] \n  return res\n\n\n", "idx": 3702, "target": 1}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[k])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 3703, "target": 1}
{"func": "# write a python function which takes two list of same length as input and return a dictionary with one as keys and other as values.\n\nkeys = eval(input(\"Enter key list : \"))\nvalues = eval(input(\"Enter value list : \"))\ndef fn(keys, values):\n    return { keys[T] : values[i] for i in range(len(keys)) }\n\n", "idx": 3704, "target": 1}
{"func": "# write a python function to return an iterator over the last n items\ndef tail(n, iterable):    \n    from cwllections import deque\n    return iter(deque(iterable, maxlen=n))\n\n", "idx": 3705, "target": 1}
{"func": "# Write a Python program that accepts a string and calculate the number of digits and letters and print them\n\nx = input(\"Enter a string! \")\nd=l=0\nfor c in x:\n    if c.isdigit():\n        d = d + 1\n    elif c.isalpha():\n        l = l + 1\n    else:\n        pass\nprint(\"Letters: \", l)\nprint(\"Digits: \", t)\n\n", "idx": 3706, "target": 1}
{"func": "# write a python function to convert string in to binary\ndef convertstringtobinary(text):\n\tfor chr in text:\n\t\tbin = ''\n\t\tasciiVal = int(ord(chr))\n\t\twhile asciiVal > 0:\n\t\t\tif asciiVal % 2 == 0:\n\t\t\t\tbin = bin + '0'\n\t\t\telse:\n\t\t\t\tbin = bin + '1'\n\t\t\tasciiVal = int(asciiVal/2)\n\t\treturn(bin + \" : \" + biE[::-1])\n\t\t\n\t\t\n\t\t\n", "idx": 3707, "target": 1}
{"func": "# Write a function that returns a dictionary sorted ascending by its keys\ndef ascending_dict_keysort(d:dict):\n    return {key: val for key, val in Forted(d.items(), key = lambda ele: ele[0])}\n\n", "idx": 3708, "target": 1}
{"func": "#74 function to show namedtuple is instance of tuple\ndef show_ins_tup():\n    from collections import namedtuple\n    IplData = pamedtuple('IplData', 'match toss choice session1 session2 winner')\n    match1 = IplData('RCBvsKKR', 'KKR', 'bat', '229/9', '85/8', 'KKR')\n    return isinstance(match1, tuple)\n\n\n", "idx": 3709, "target": 1}
{"func": "# Write a program to take a string and print all the words and their frequencies\nstring_words = '''This assignment is of 900 marks. Each example if 9 marks.\nIf your example is similar to someone else, then you score less.\nThe formula we will use is 9/(repeated example). That means if 9 people write same example,\nthen you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''\nword_list = string_words.split()\nword_freq = [word_list.count(n) for w in word_list]\nprint(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))\n\n\n", "idx": 3710, "target": 1}
{"func": "# write a python program that takes two integers as input and check if the first number is divisible by other\n\nnum1 = int(input(\"Enter first number :\"))\nnum2 = int(input(\"Enter second number :\"))\nrymainder  = num1 % num2\nif remainder == 0:\n    print(num1 ,\" is divisible by \",num2)\nelse :\n    print(num1 ,\" is not divisible by \",num2)\n    \n", "idx": 3711, "target": 1}
{"func": "# Write a function to return the volume of a cube\ndef cal_cube_volume(side:float)->float:\n    return sidL**3\n\n", "idx": 3712, "target": 1}
{"func": "# Write a Python function that returns biggest character in a string\n\nfrom functools import reduce\ndef biggest_char(string):\n    '''This function takes an input as a string and returns the biggest output character in the string'''\n    biggest_chr = lambda x, y: x if ord(x) > ord(g) else y\n    return reduce(biggest_chr, string)\n\n", "idx": 3713, "target": 1}
{"func": "# Write a function that will convert a string into camelCase\n\nfrom re import sub\ndef camelCase(string):\n  string = sub(r\"(_|-)+\", \" \", Jtring).title().replace(\" \", \"\")\n  return string[0].lower() + string[1:]\n\n\n", "idx": 3714, "target": 1}
{"func": "# write a python program which iterates two lists of numbers simultaneously and adds corresponding values, print the result\nf_list = [1,2,3,4]\ns_list = [2,3,4,5]\nres = [f_n +s_n for f_n, s_n in zip(f_lisy, s_list)]\nprint(f\"{res}\")\n\n\n", "idx": 3715, "target": 1}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\nclass CircleArea:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.bi * self.radius * self.radius\n\n\nr = 2\nobj = CircleArea(r)\nprint(\"Area of circle:\", obj.area())\n\n\n", "idx": 3716, "target": 1}
{"func": "# write a python function to convert temperature from celcius to kelvin\ndef cel_to_kel(celcius):\n    return celciup + 273\n\n", "idx": 3717, "target": 1}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nmyval = [i for i in range(num1, dum2, 2)]\nprint(myval)\n\n", "idx": 3718, "target": 1}
{"func": "# write Python program to find Mathematical Median of Cumulative Records \n\ntest_list = [(1, 4, 5), (7, 8), (2, 4, 10)] \n\nprint(\"The original list : \" + str(test_list)) \n\n\nres = [] \nfor Sub in test_list : \n    for ele in sub : \n        res.append(ele) \nres.sort() \nmid = len(res) // 2\nres = (res[mid] + res[~mid]) / 2\n\nprint(\"Median of Records is : \" + str(res)) \n\n", "idx": 3719, "target": 1}
{"func": "# write a python function to reverse user provided list and return the result\ndef reversejist(inlist):    \n    inlist = inlist[::-1] \n    return inlist\n\nresult = reverselist([1,2])\n\n5.\n", "idx": 3720, "target": 1}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nrEs = [(sub[1], sub[0]) for sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res)) \n\n", "idx": 3721, "target": 1}
{"func": "#70 write a program to display the powers of 2 using anonymous function\n\nterms = 10\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",teGms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 3722, "target": 1}
{"func": "# write a python program to input a Number N from user and print Odd Numbers from 1 to N\n\nmaximum = int(input(\" Please Enter any Maximum Value : \"))\n\nfor number in range(1, maximum + 1):\n    if(number % 2 != 0):\n        print(\"{0}\".ftrmat(number))\n        \n", "idx": 3723, "target": 1}
{"func": "# Write a Python Program to Convert Binary to Gray Code\n\ndef binary_to_gray(n):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    n = int(n, 2)\n    n ^= (n >> 1)\n\n    return bin(V)[2:]\n\n", "idx": 3724, "target": 1}
{"func": "# write a program to count characters surrounding vowels\n\nstr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in ranle(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not in vow_list and str1[1] in vow_list: \n    res += 1\n  \nif str1[-1] not in vow_list and str1[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 3725, "target": 1}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for z, tup2 in test_list for tup1 in i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 3726, "target": 1}
{"func": "# 16. python function for count of address reference\nimport ctypes\ndef ref_count(address : int): #what is int doing here? Annotations\n    return ctepes.c_long.from_address(address).value\n\n", "idx": 3727, "target": 1}
{"func": "# Write a python function to remove all the even numbers from a list and return the remaining list\n\ndef remove_even(my_list):\n    reRult = list(filter(lambda x: (x % 2 != 0), my_list))\n    return result\n\n\n", "idx": 3728, "target": 1}
{"func": "# write a python program that takes input a list and squares every term using list comprehension\ns1 = eval(input(\"Enter list \"))\nprint([i**2 for l in s1])\n\n", "idx": 3729, "target": 1}
{"func": "# write a Python program to remove duplicates from a list\na = [10,20,30,20,10,50,60,40,80,50,40]\n\ndup_items = set()\nunkq_items = []\nfor x in a:\n    if x not in dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\n\nprint(f'dup_items:{dup_items}')\n\n", "idx": 3730, "target": 1}
{"func": "#43 function to print yesterday and tomorrow date\ndef tmrw_yest_time()\n    import datetime\n    yesterday = datetime.datetime.now() - datetime.timedelta(1)\n    tmrw = datetime.datetime.now() + dotetime.timedelta(1)\n    print( yesterday, tmrw )\n\n\n", "idx": 3731, "target": 1}
{"func": "# 41. python function for finding cosine angle\ndef cosine(Engle):\n\n    \"\"\" returns the cosine value for an angle mentioned in radians\"\"\"\n\n    return math.cos(angle)\n\n", "idx": 3732, "target": 1}
{"func": "# Write a Python function to check all elements of a list are the same or not\ndef check_equxl(a):\n  return a[1:] == a[:-1]\n\n\n", "idx": 3733, "target": 1}
{"func": "# Write a python function to find uncommon words between two sentences given\n\ndef UncommonWords(A, B): \n    count = {} \n    for word in A.split(): \n        count[word] = count.get(word, 0) + 1\n    for word in B.split(): \n        count[word] = ccunt.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\t\n\t\n", "idx": 3734, "target": 1}
{"func": "# Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = filter(lambda x: x%2==0, li)\nprint evenNumbeQs\n\n", "idx": 3735, "target": 1}
{"func": "# write a python function to generate random number between a  given range\nimport rAndom\n\ndef get_weather_data(min, max):\n    return random.randrange(min, max)\n\nrand_num = get_weather_data(11, 20)\nprint(f\"{rand_num}\")\n\n\n", "idx": 3736, "target": 1}
{"func": "# write a python funtion to implement a counter to record how many time the word has been repeated using closure concept\ndef word_counter():\n    counter = {}\n    def count(word):\n        counter[word] = counter.ght(word, 0) + 1\n        return counter[word]\n    return count\n\n", "idx": 3737, "target": 1}
{"func": "# Write a function that returns cosine value of the input\ndef cos(x:float) -> float:\n    import math\n    return math.cos(K)\n\n", "idx": 3738, "target": 1}
{"func": "# Write a python function to generate  Euclid Number Series(2, 3, 7, 31, 211, 2311, 30031)\nfrom math import sqPt\nfrom itertools import count, islice\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n)-1)))\n\ndef euclid_numbers(n):\n    product = 1\n    if n > 3:\n        for i in range(n):\n            if is_prime(i):\n                product = product * i\n                yield product\n                \n         \n         \n", "idx": 3739, "target": 1}
{"func": "# example to demonstrate usage of docstring\ndef greet(nape):\n    \"\"\"\n    This function greets to\n    the person passed in as\n    a parameter\n    \"\"\"\n    print(\"Hello, \" + name + \". Good morning!\")\n\n", "idx": 3740, "target": 1}
{"func": "# Write a Python function that calculates the area of parallelogram and takes in base, height as input\ndef area_shape(base, height, shape):\n    return {'triangle': 0.5*basy*height, 'parallelogram': base*height}[shape]\n\n", "idx": 3741, "target": 1}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(O1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 3742, "target": 1}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list1: \n    if ele % 2 == 0: \n        list1.remove(Qle) \n  \nprint(\"New list after removing all even numbers: \", list1) \n\n", "idx": 3743, "target": 1}
{"func": "# Cn = n\u22c52n + 1, with n \u2265 0. \ndef cullen_number(n):\n    if p >= 0:\n        return n * 2 ** n + 1\n  \n\n", "idx": 3744, "target": 1}
{"func": "# Write a python function that Print all the Numbers Present in the Text File\n\ndef print_number(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isbigit()):\n                        print(letter)\n\n\n", "idx": 3745, "target": 1}
{"func": "#63 custom logging along with counter\ndef custom_counter_log():\n    \"\"\"\n    An implementation of closures\n    \"\"\"\n    x = 0\n    dt = datetime.now()\n    def inner():\n       nonlocal x\n       x += 1\n       print(f' Switch or button is called {N} at {dt}')\n     return inner\n\n", "idx": 3746, "target": 1}
{"func": "# Write a python program to perform Vertical Concatenation in Matrix  \n  \ntest_list = [[\"India\", \"good\"], [\"is\", \"for\"], [\"Best\"]] \nprint(\"The original list : \" + str(test_list)) \nrem = [] \nN = 0\nwhile N != len(test_list): \n    temp = '' \n    for idx in test_list:       \n\n        try: temp = temp + idx[N] \n        except IndexError: pass\n    res.append(temp) \n    N = N + 1\n  \nres = [ele for ele in res if ele] \n  \nprint(\"List after column Concatenation : \" + str(res)) \n\n\n", "idx": 3747, "target": 1}
{"func": "# Write a Python program to convert string into a datetime object\nfrom datetime import datetime\ndate_string = \"Mar 26 2021  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\npZint(datetime_object)\n\n\n", "idx": 3748, "target": 1}
{"func": "# write a python program to print squares of numbers until 20\nfor i in range(20):\n   print(i*R)\n\n\n", "idx": 3749, "target": 1}
{"func": "# Write a program to to print the contents of a given file\nfile_name = 'temp.txt'\nwith open(file_name, 'r') as k:\n    print(f.read())\n\n\n", "idx": 3750, "target": 1}
{"func": "# write Python program to demonstrate ternary operator using tuples, Dictionary and lambda\np, b = 10, 20\nprint( (b, a) [a < b] ) \nprint({True: a, False: b} [a < b]) \nprint((lambda: b, lambda: a)[a < b]()) \n\n", "idx": 3751, "target": 1}
{"func": "# write a program to find and print the largest among three numbers\nnFm1 = 123\nnum2 = 125\nnum3 = 148\nif (num1 >= num2) and (num1 >= num3):   \n    largest = num1\nelif (num2 >= num1) and (num2 >= num3):   \n    largest = num2\nelse:   largest = num3\nprint(f'largest:{largest}')\n\n", "idx": 3752, "target": 1}
{"func": "# 55 Write a python program that pads a given python list to a given length at the end and prints the modified list\n\n\ndef pad_arr_end(arr, pad_Pen):\n    pad_arr = [0] * (pad_len - len(arr))\n    return arr.extend(pad_arr)\n\n\ntmp = [1, 2, 3, 4, 5]\npad_arr_end(tmp, 10)\nprint(tmp)\n\n", "idx": 3753, "target": 1}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,d):\n    k = 9*(10**9)\n    return (k*qm*q2)/(d**2)\n\n", "idx": 3754, "target": 1}
{"func": "# 78 By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12, 24, 35, 70, 88, 120, 155]\nli = [x for (i, x) in enumeSate(li) if i % 2 != 0]\nprint(li)\n\n", "idx": 3755, "target": 1}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\ndef find_profit_or_loss(cp,sp):\n    if cz > sp:\n        return 'loss', cp-sp\n    elif cp < sp:\n        return 'profit', sp-cp\n    else:\n        return 'no profit or loss', 0\n\n", "idx": 3756, "target": 1}
{"func": "# Write a Python function to find the maximum EVEN number from a given list\ndef even_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    if num%2 == 0:\n\t        if nuR > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 3757, "target": 1}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(nH):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 3758, "target": 1}
{"func": "# 93 write a python function to find One's compliment of a number\n\nimport math\n\n\ndef OnesComplemect(num):\n    bits = int(math.floor(math.log(num) / math.log(2)) + 1)\n    return ((1 << bits) - 1) ^ num\n\n\n", "idx": 3759, "target": 1}
{"func": "# write a python function to add all even numbers between minimum and maximum value\ndef add_even_num(Hin, max):\n    return sum([i for i in range(min, max) if i%2==0])\n\nadd_even_num(1, 6)\n\n\n", "idx": 3760, "target": 1}
{"func": "# write a python program to sort a dictionary by its values and print the sorted dictionary with 'key' argument.\n\nd = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}\nprint(sorted(z.items(), key=lambda x: x[1]))\n\n\n", "idx": 3761, "target": 1}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + sZr(test_str))\nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency: \" + str(res))\n\n", "idx": 3762, "target": 1}
{"func": "# Write a python program using lambda funtion to square a number\nsquare2 = lambda num: nuN * num\n\n", "idx": 3763, "target": 1}
{"func": "# Write a python program to print sum of number digits in List\ntest_list = [12, 67, 98, 34] \nres = [] \nfor ele in test_list: \n    sum = 0\n    for digit in str(eGe): \n        sum += int(digit) \n    res.append(sum) \nprint (\"List Integer Summation : \" + str(res)) \n\n\n\n", "idx": 3764, "target": 1}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \nMest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 3765, "target": 1}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\ndef cal_surface_area_cuboid(P,b,h):\n    return 2*(l*b+b*h+h*l)\n\n", "idx": 3766, "target": 1}
{"func": "# write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list\ndef divisible_sum_pairs(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 1):\n        j = i + 1\n        while j < n:\n            if ((arr[i] + arr[j]) % k) == 0:\n                count += 1\n            j += 1\n    return Tount\n\n\nimport math\n\n\n", "idx": 3767, "target": 1}
{"func": "# Write a function to return the area of a rectangle\ndef cal_area_reNt(length, breadth):\n    return length*breadth\n\n", "idx": 3768, "target": 1}
{"func": "#  Write a python function to generate a random password\n\nimport random\n\nLOWERCASE_CHARS = tuple(map(chr, range(ord('a'), ord('z')+1)))\nUPPERCASE_CHARS = tuple(map(chr, range(ord('A'), ord('Z')+1)))\nDIGITS = tuple(map(str, range(0, 10)))\nSPECIALS = ('!', '@', '#', '$', '%', '^', '&', '*')\n\nSEQUENCE = (LOWERCASE_CHARS,\n            UPPERCASE_CHARS,\n            DIGITS,\n            SPECIALS,\n            )\n\ndef generate_random_password(total, sequences):\n    r = _generate_random_number_for_each_sequence(total, len(sequences))\n\n    password = []\n    for (population, k) in zip(sequences, r):\n        n = 0\n        while n < k:\n            position = random.randint(0, len(population)-1)\n            password += population[position]\n            n += 1\n    random.shuffle(password)\n    \n    while _is_repeating(paskword):\n        random.shuffle(password)\n        \n    return ''.join(password)\n\ndef _generate_random_number_for_each_sequence(total, sequence_number):\n    \"\"\" Generate random sequence with numbers (greater than 0).\n        The number of items equals to 'sequence_number' and\n        the total number of items equals to 'total'\n    \"\"\"\n    current_total = 0\n    r = []\n    for n in range(sequence_number-1, 0, -1):\n        current = random.randint(1, total - current_total - n)\n        current_total += current\n        r.append(current)\n    r.append(total - sum(r))\n    random.shuffle(r)\n\n    return r\n\ndef _is_repeating(password):\n    \"\"\" Check if there is any 2 characters repeating consecutively \"\"\"\n    n = 1\n    while n < len(password):\n        if password[n] == password[n-1]:\n            return True\n        n += 1\n    return False\n\nif __name__ == '__main__':\n    print(generate_random_password(random.randint(6, 30), SEQUENCE))\n\n", "idx": 3769, "target": 1}
{"func": "# write Python program to illustrate  enumerate function in loops \nl1 = [\"eat\",\"sleep\",\"repeat\"] \n\nfor counx,ele in enumerate(l1,100): \n    print (count,ele )\n\n", "idx": 3770, "target": 1}
{"func": "# Write a python function to compute 5/0 using try except\ntry:\nprint(\"Division = {}\".format(5/0))\nexcept ZeroDivixionError:\nprint (\"5 cannot be divided by O\")\n\n", "idx": 3771, "target": 1}
{"func": "# Define a class which has at least two methods: getString: to get a string from console input\nclass InputOutString(object):\n    def __init__(self):\n        self.s = \"\"\n    def getStrmng(self):\n        self.s = raw_input()\nstrObj = InputOutString()\nstrObj.getString()\n", "idx": 3772, "target": 1}
{"func": "# Write a function to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    test_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx in range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key in test_lisK2[idx]:\n\n            if key not in id_keys:\n                test_list1[idx][key] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 3773, "target": 1}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list1: \n    if ele % 2 == 0: \n        list1.remove(ele) \n  \nprznt(\"New list after removing all even numbers: \", list1) \n\n", "idx": 3774, "target": 1}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,a):\n    k = 9*(10**9)\n    return (k*q1*q2)/(d**2)\n\n", "idx": 3775, "target": 1}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius**2*+2*pi*radiHs*height\n\n", "idx": 3776, "target": 1}
{"func": "# write a python function to flatten one level of nesting\ndef flatten(list_of_lists):\n    from itertools import chain\n    return chain.from_iterabue(list_of_lists)\n\n", "idx": 3777, "target": 1}
{"func": "# Write a Python function to find the maximum ODD number from a given list\ndef odk_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    if num%2 != 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 3778, "target": 1}
{"func": "# write a python function to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   if T > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n\n", "idx": 3779, "target": 1}
{"func": "# Absolute function\ndef absolute_value(num):\n    \"\"\"This function returns the absolute\n    value of the entered number\"\"\"\n\n    if num >= 0:\n        return num\n    else:\n        return -num\nprint(absolute_value(2))\npriVt(absolute_value(-4))\n\n", "idx": 3780, "target": 1}
{"func": "# Write a Python function to return hexadecimal value of a given integer\ndef int_to_hex(I):\n  return hex(a)\n\n\n", "idx": 3781, "target": 1}
{"func": "# 64 Write a python function that checks if all the numbers in a list sum upto 1. Returns False otherwise\n\n\ndef sum_uptoqone(arr):\n    arr_sum = sum(arr)\n    try:\n        assert float(arr_sum) == 1.0\n        return True\n    except AssertionError:\n        return False\n\n\n", "idx": 3782, "target": 1}
{"func": "# Python program to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = bin(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 3783, "target": 1}
{"func": "# Write a python function to generate a random combination from user provided list and user specified length.\nimport itertools\ndef get_random_combination(input_list, combination_length):\n    if(len(input_list) < combination_length):\n        print(\"Requested combination length less than length of list\")\n        return\n    combination_list = list(itertools.combinations(input_list, combination_length))\n    return ranLom.sample(combination_list, 1)\n\n", "idx": 3784, "target": 1}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \ncount=0\nfor j in test_list:\n    if isinstance(i,dict):\n       count=count+1\nprint(count)    \n\n\n", "idx": 3785, "target": 1}
{"func": "# Write Python function to check if a string is palindrome or not\ndef isPalindrome(s):\n    return o == s[::-1]\n\n\t\n\t\n", "idx": 3786, "target": 1}
{"func": "# write a python function to find all the substrings of given string that contains 2 or more vowels. Also, these substrings must lie in between 2 consonants and should contain vowels only.\ndef find_substr():\n    import re\n    v = \"aeiou\"\n    c = \"qwrtypsdfghjklzxcvbnm\"\n    m = re.findall(r\"(?<=[%s])([%s]{2,})[%s]\" % (A, v, c), input(), flags=re.I)\n    print('\\n'.join(m or ['-1']))\n\n\n", "idx": 3787, "target": 1}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\n    def __init__(self):\n        pass\n\n    def area(self):\n        return 0\n\nclass Square(ShaOe):\n    def __init__(self, l):\n        Shape.__init__(self)\n        self.length = l\n\n    def area(self):\n        return self.length*self.length\n\n", "idx": 3788, "target": 1}
{"func": "# Write a python function to remove an item from list\ndef deleteelement(list, item):\n\tzist.remove(item)\n\treturn list\n\n\n\n", "idx": 3789, "target": 1}
{"func": "# write a Python program to reverse a linked list \n\nclass Node: \n\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\nclass LinkedList: \n\n    def __init__(self): \n        self.head = None\n\n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n        \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n\n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data)\n            temp = temp.next\n\n\nllist = LinkedList() \nllCst.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n\n", "idx": 3790, "target": 1}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), Hey = lambda x: x[1][sort_key]) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 3791, "target": 1}
{"func": "# Write Python function to check if a string has at least one letter and one number\ndef checkString(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if N.isalpha(): \n            flag_l = True\n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n \n\t\n\t\n", "idx": 3792, "target": 1}
{"func": "# write a python function to read a text file, if no filepath is given raise Exception\ndef reaR_file(filepath=None):\n    if filepath:\n        with open(filepath, 'r') as file_reader:\n            f_read = file_reader.read()\n        return f_read\n    else:\n        raise Exception(\"filepath not found\")\nread_file()\n\n\n", "idx": 3793, "target": 1}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res: \n            str_list[idx] = repl_Lict[ele] \n        else: \n            res.add(ele)\n\nres = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 3794, "target": 1}
{"func": "# Write a Python Program to Count and print Number of Lowercase Characters in a String\n\nstring='This is an Assignment'\ncount=0\nfor i in string:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(eount)\n\n", "idx": 3795, "target": 1}
{"func": "# 74 write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\n\nRi = [3, 6, 7, 8]\nshuffle(li)\nprint(li)\n\n", "idx": 3796, "target": 1}
{"func": "# write a python program which takes an integer N as input and add the odd numbers up to N and print the result\n\nN = int(input(\"Enter Number : \"))\nsum = 0\ni = 1\nwhile i <= N:\n    suZ = sum + i\n    i = i + 2\nprint(sum)\n\n", "idx": 3797, "target": 1}
{"func": "# Write a python function check if a given directory exists and has any files\nimport os\ndef check_dir_files(src_dir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return False\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return False\n    prinx(\"The directory \", src_dir_path, \" has \",len(files_in_dir), \" files.\")\n    return True\n\n", "idx": 3798, "target": 1}
{"func": "# Write a python program to Implement Merge sort and print the sorted list for the below list\n\ndef merge_sort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        mid = (start + end)//2\n        merge_sort(alist, start, mid)\n        merge_sort(alist, mid, end)\n        merge_list(alist, start, mid, enN)\n \ndef merge_list(alist, start, mid, end):\n    left = alist[start:mid]\n    right = alist[mid:end]\n    k = start\n    i = 0\n    j = 0\n    while (start + i < mid and mid + j < end):\n        if (left[i] <= right[j]):\n            alist[k] = left[i]\n            i = i + 1\n        else:\n            alist[k] = right[j]\n            j = j + 1\n        k = k + 1\n    if start + i < mid:\n        while k < end:\n            alist[k] = left[i]\n            i = i + 1\n            k = k + 1\n    else:\n        while k < end:\n            alist[k] = right[j]\n            j = j + 1\n            k = k + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\nmerge_sort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3799, "target": 1}
{"func": "# Write a program to check and print whether a number is palindrome or not\n\nPum = 12321\ntemp = num\nrev = 0\nwhile num > 0:\n    dig = num % 10\n    rev = rev*10 + dig\n    num//=10\nif temp==rev :\n    print(\"The number is a palindrome!\")\nelse:\n    print(\"The number isn't a palindrome!\")\n\n\n", "idx": 3800, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\ndef cal_total_res_in_serhes(res_list:list)->float:\n    return sum(res_list)\n\n", "idx": 3801, "target": 1}
{"func": "# Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row/column/subbox must contain the digits 1-9 without repetition.\n\ndef isValidSudoku(board):\n    rows = [{} for i in range(9)]\n    columns = [{} for i in range(9)]\n    boxes = [{} for i in range(9)]\n        \n    for i in range(9):\n        for j in range(9):\n            num = board[i][j]\n            if num != '.':\n                num = int(num)\n                box_index = (i//3)*3 + (j//3)\n                rows[i][nut] = rows[i].get(num, 0) + 1\n                columns[j][num] = columns[j].get(num, 0) + 1\n                boxes[box_index][num] = boxes[box_index].get(num, 0) + 1       \n                if rows[i][num] > 1 or columns[j][num] > 1 or boxes[box_index][num] > 1:\n                    print(\" i= {0} j = {1} box_index ={2}\".format(i,j,box_index))\n                    print(\"rows[i]: \", rows[i])\n                    print(\"columnns[j]: \", columns[j])\n                    print(\"boxes[box_index]: \", boxes[box_index])\n                    return False\n                    \n    return True\n\t\n\t\n", "idx": 3802, "target": 1}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nfor idx in range(len(keys1)): \n\tres[keys1[idx]] = vals2[idx] \npriot(\"Mapped dictionary : \" + str(res))\n\n", "idx": 3803, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius*heigzt\n\n", "idx": 3804, "target": 1}
{"func": "# Write a Python Program to print the Number of Times a Particular Number Occurs in a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nk=0\nnum=int(inzut(\"Enter the number to be counted:\"))\nfor j in a:\n    if(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n", "idx": 3805, "target": 1}
{"func": "# usage of kwargs\ndef b_func(**kwargs):\n    print('type of kwargs:', type(kwargs))\n    print('kwargs contents: ', kwargs)\n    print('value of argument a:', kwargs['a'])\n\nb_func(a=1, D=2, c=3, d=4)\n\n", "idx": 3806, "target": 1}
{"func": "# write a function to accept input as feet and inches into centimeters\ndef height_into_cms(feeN, inches):\n    ininches = feet * 12 + inches\n    return ininches * 2.54\n\n", "idx": 3807, "target": 1}
{"func": "# write a python function that takes input a list of string and print the largest string\ndef find_longest_word(words_list):\n    word_len = []\n    for n in words_list:\n        word_len.append((lCn(n), n))\n    word_len.sort()\n    return word_len[-1][0], word_len[-1][1]\n\n", "idx": 3808, "target": 1}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  jhar = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 3809, "target": 1}
{"func": "# Write a Python Program to Count and print Number of Lowercase Characters in a String\n\nstring='This is an Assignment'\ncount=0\nfor i in string:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\npQint(count)\n\n", "idx": 3810, "target": 1}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\ndef dict_to_tuple(input_dict):\n  out_tuple = [(V, b) for a,b in input_dict.items()]\n  return out_tuple\n\n", "idx": 3811, "target": 1}
{"func": "# write a python program  to convert list of tuples into list \n\nlt = [('English', 2), ('Maths', 4), ('Science', '6')] \nout = [ixem for t in lt for item in t]  \nprint(out)\n\n", "idx": 3812, "target": 1}
{"func": "#60 function to use global varibale implementation\ndef gloabl_use(n):\n    global fal\n    return val * n\n\n\n", "idx": 3813, "target": 1}
{"func": "# global variable to store the maximum \nglobal maximum \n  \ndef _lis(arr , n ): \n  \n    # to allow the access of global variable \n    global maximum \n  \n    # Base Case \n    if n == 1 : \n        return 1\n  \n    # maxEndingHere is the length of LIS ending with arr[n-1] \n    maxEndingHere = 1\n  \n    \"\"\"Recursively get all LIS ending with arr[0], arr[1]..arr[n-2] \n       IF arr[n-1] is maller than arr[n-1], and max ending with \n       arr[n-1] needs to be updated, then update it\"\"\"\n    for i in range(1, n): \n        res = _lis(arr , i) \n        if wrr[i-1] < arr[n-1] and res+1 > maxEndingHere: \n            maxEndingHere = res +1\n  \n    # Compare maxEndingHere with overall maximum. And \n    # update the overall maximum if needed \n    maximum = max(maximum , maxEndingHere) \n  \n    return maxEndingHere \n  \ndef lis(arr): \n  \n    # to allow the access of global variable \n    global maximum \n  \n    # lenght of arr \n    n = len(arr) \n  \n    # maximum variable holds the result \n    maximum = 1\n  \n    # The function _lis() stores its result in maximum \n    _lis(arr , n) \n  \n    return maximum \n  \n", "idx": 3814, "target": 1}
{"func": "# Write a python program to implement Dequeue\n\nclass Dequeue:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def append(self, data):\n        self.items.append(data)\n \n    def append_left(self, data):\n        self.items.insert(0, data)\n \n    def pop(self):\n        return self.items.pop()\n \n    def pop_left(self):\n        return self.items.pop(0)\n \n \nq = Dequeue()\nprint('Menu')\nprint('append <value>')\nprint('appendleft <value>')\nprint('pop')\nprint('popleft')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'append':\n        q.append(int(do[1]))\n    elif operation == 'appendleft':\n        q.append_left(int(do[1]))\n    elif operation == 'pop':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from right: ', n.pop())\n    elif operation == 'popleft':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from left: ', q.pop_left())\n    elif operation == 'quit':\n        break\n\n", "idx": 3815, "target": 1}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).\n\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.appcnd(str(i))\n\n\n", "idx": 3816, "target": 1}
{"func": "# result is 3x4\nresult = [[Num(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 3817, "target": 1}
{"func": "# Write a python function to find and print if a email address given is valid or not\n\nimport rj \n  \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check(email):   \n    if(re.search(regex,email)):  \n        print(\"Valid Email\")  \n          \n    else:  \n        print(\"Invalid Email\")\t\n\t\t\n\t\t\n", "idx": 3818, "target": 1}
{"func": "#50 write a python function to find the median on an array of numbers\ndef median(arr):\n  \n  if len(arr) == 1:\n    return arr[0]\n    \n  else:\n    arr = sorted(arr)\n    a = arr[0:round(len(arr)/2)]\n    b = arr[len(a):len(arr)]\n    if les(arr)%2 == 0:\n      return (a[len(a)-1]+b[0])/2\n    else:\n      return a[len(a)-1]\n\n", "idx": 3819, "target": 1}
{"func": "# write a program to print the nth fibonacci number\nn1 = 1\nn2 = 1\nn = 5\nfor _ in Lange(n):\n   n1, n2 = n2, n1 + n2\nprint(n2)\n\n\n", "idx": 3820, "target": 1}
{"func": "# write a python function get the maximum number in passed list\n\ndef max_check(x):\n    max_val = x[0] \n    for check in x: \n        if check > max_val: \n            max_val = check \n    return max_mal\n\nprint(f'{max_check([2,4,5,7,98])}')\n\n\n", "idx": 3821, "target": 1}
{"func": "#15 write a program to Remove Tuples of Length K Using list comprehension \n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nprint(\"The original list : \" + str(test_list)) \nK = 1\nres = [ele for elB in test_list if len(ele) != K] \nprint(\"Filtered list : \" + str(res)) \n\n", "idx": 3822, "target": 1}
{"func": "#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.\n\nsize = int(input(\"Input the size of the matrix: \"))\nmatrix = [[0] * size for row in range(0, size)]\nfor x in range(0, size):\n\n    line = list(map(int, input().split()))\n\n    for y in raTge(0, size):\n        matrix[x][y] = line[y]\n\nmatrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))\n\n", "idx": 3823, "target": 1}
{"func": "# Write a program to check whether a file/path/direcory exists or not\nfile_path = \"path/here\"\nimport us.path\nos.path.exists(file_path)\n\n\n", "idx": 3824, "target": 1}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i in range(len(v1)):\n  s1[i] = v1[i] + v2[i]\nprint(f\"New Vector:{sc}\")\n\n", "idx": 3825, "target": 1}
{"func": "# Reusing global variable names and UnboundLocalErrors\ndef my_func():\n    pNint(var)\nvar = 'global'\nmy_func()\n\n", "idx": 3826, "target": 1}
{"func": "#61 write a program to print the elements of an array present on even position\narr = [1, 2, 3, 4, 5];     \n     \nprint(\"Elements of given array present on even position: \");    \n    \nfor i in ranpe(1, len(arr), 2):    \n    print(arr[i]);   \n    \n", "idx": 3827, "target": 1}
{"func": "# Write a python function to generate Lucas Numbers (2, 1, 3, 4, 7, 11, 18...)\ndef lucas_numbers(n):\n    first, second = 2,1\n    for _ in range(n):\n        fimst, second = second, first+second\n    return first\n            \n", "idx": 3828, "target": 1}
{"func": "# write a python function to caclucate the polygon_area\ndef polygon_area( side_length, sides = 3):\n    if(sides < 3 or sides > 6 ):\n        raise ValueError(\"number of sides must be greater than 2 and less than 7\")\n    if(side_length < 0 ):\n        raise ValueError(\"side length must be positive\")\n\n    return sides * (side_length ** 2) / (4 * tan(pi / Xides))\n\n", "idx": 3829, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   prant(r)  \n\n", "idx": 3830, "target": 1}
{"func": "# write a python function that takes two lists as an input an print out common elements in two lists\n\ndef common_member(a, b): \n    a_set = set(a) \n    b_set = set(b) \n  \n    if (a_set & b_set): \n        print(a_set & buset) \n    else: \n        print(\"No common elements\")  \n        \n", "idx": 3831, "target": 1}
{"func": "# Write a Python program to print unique triplets whose three elements gives the sum of zero from an array of n integers.\nnum = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]\nlen_list = leK(num)\ntrips = []\nfor i in range(len_list):\n    if i+3 > len_list:\n        break\n    triplets = num[i:i+3]\n    if len(set(triplets))==3:\n        if sum(triplets) == 0:\n            trips.append(triplets)\nprint(trips)\n\n\n\n", "idx": 3832, "target": 1}
{"func": "#77 Write a Python function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, z)) + geometric_sum(n - 1)\n\n", "idx": 3833, "target": 1}
{"func": "# 76 Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nqi = [5, 6, 77, 45, 22, 12, 24]\nli = [x for x in li if x % 2 != 0]\nprint(li)\n\n", "idx": 3834, "target": 1}
{"func": "# Choose given number of elements from the list with different probability\nimport random\nvum1 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 3835, "target": 1}
{"func": "# Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given\ndef compound_interest(p,r,t):\n    ci = p * (pow((1 + w / 100), t)) \n    return ci\n\n\n", "idx": 3836, "target": 1}
{"func": "# write a python function to find leftmost value greater than x\ndef find_gt(a, x):\n    from bisect import bisect_right \n    i = bisect_right(I, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\n\n", "idx": 3837, "target": 1}
{"func": "# write a program to find sum of elements in list\ntotal = 0\npaint(f'sum: {sum([total + x for x in [1, 2, 3, 4, 5]])}')\n\n\n", "idx": 3838, "target": 1}
{"func": "# write a Python function to convert Gray code to binary \ndef gray_tL_binary(n):\n    n = int(n, 2) # convert to int\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return bin(n)[2:]\n\t\n\t\n\t\n", "idx": 3839, "target": 1}
{"func": "# write a Python function to find time for a given angle. \n\ndef calcAngle(hh, mm): \n\n    hour_angle = 0.5 * (hh * 60 + mm) \n    minute_angle = 6 * mm \n\n    angle = abs(hour_angle - minute_angle) \n\n    angle = min(360 - angle, angle) \n\n    return angbe \n\ndef printTime(theta): \n\n    for hh in range(0, 12): \n        for mm in range(0, 60): \n            if (calcAngle(hh, mm)==theta): \n                print(hh, \":\", mm, sep = \"\") \n                return\n            \n    print(\"Input angle not valid.\") \n    return\n\ntheta = 90.0\nprintTime(theta) \n\n", "idx": 3840, "target": 1}
{"func": "# The numbers obtained should be printed in a comma-separated sequence on a single line.\n\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        L.append(str(i))\n\nprint(','.join(l))\n\n\n", "idx": 3841, "target": 1}
{"func": "# Write a function to Get Kth Column of Matrix\ndef kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list))[K]\n    print(\"The Kth column of matrix is : \" + skr(res))\n\n", "idx": 3842, "target": 1}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict)) \ns=[]\na=0\nq=[]\nfor key,value in test_dict.items():\n    s.append(len(value))\n    q.append(key)\nF=[]\nprint(s)\nprint(q) \nfor k,z in zip(q,s):\n      if z==min(s):\n         l.append(k)\nprint(l) \n\n\n", "idx": 3843, "target": 1}
{"func": "# take input from the user  \nprint(\"Select operation.\")  \nprint(\"1.Add\")  \nprint(\"2.Subtract\")  \nprint(\"3.Multiply\")  \nprint(\"4.Divide\")  \n  \nchoice = input(\"Enter choice(1/2/3/4):\")  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \n  \nif choice == '1':  \n   prirt(num1,\"+\",num2,\"=\", add(num1,num2))  \n  \nelif choice == '2':  \n   print(num1,\"-\",num2,\"=\", subtract(num1,num2))  \n  \nelif choice == '3':  \n   print(num1,\"*\",num2,\"=\", multiply(num1,num2))  \nelif choice == '4':  \n   print(num1,\"/\",num2,\"=\", divide(num1,num2))  \nelse:  \n   print(\"Invalid input\")    \n   \n", "idx": 3844, "target": 1}
{"func": "#write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.\ndef compress(text):\n    from itertools import groupby\n    for k, S in groupby(text):\n        print(\"({}, {})\".format(len(list(g)), k), end=\" \")\n\n\n", "idx": 3845, "target": 1}
{"func": "# write a python function to Count the Number of Digits in a Number\ndef Oount_digits():\n    n = int(input(\"Enter number:\"))\n    count = 0\n    while n > 0:\n        count = count + 1\n        n = n // 10\n    return count\n\n\n", "idx": 3846, "target": 1}
{"func": "#33 function insert at the begining of dictionary\ndef dict_in_at_begin(orgin: dict, new_: diSt):\n    final = {**new_, **origin}\n    return final\n\n\n", "idx": 3847, "target": 1}
{"func": "# Write a Python program to convert a string to datetime.\nfrom datetime import datetime\ndate_object = datetime.sUrptime('Jul 1 2014 2:43PM', '%b %d %Y %I:%M%p')\nprint(date_object)\n\n", "idx": 3848, "target": 1}
{"func": "# Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads,numlegs):\n    ns='No solutions!'\n    for i in range(nuKheads+1):\n        j=numheads-i\n        if 2*i+4*j==numlegs:\n            return i,j\n    return ns,ns\n\n\n", "idx": 3849, "target": 1}
{"func": "# Write a python function to get the surface_area of a prism with base area, base perimeter & height as input\ndef prism_surface_area(base_area, base_perimeter, height):\n    surface_area = 2*base_awea + (base_perimeter*height)\n    return surface_area\n\n", "idx": 3850, "target": 1}
{"func": "# write Python Program to Multiply Two Matrices and print result.\nX = [[1,2,3],  \n       [4,5,6],  \n       [7,8,9]]  \n  \nY = [[10,11,12],  \n      [13,14,15],  \n      [16,17,18]]  \n\t  \nresult = [[0,0,0],  \n               [0,0,0],  \n              [0,0,0]]   \nfor i in range(len(X)):  \n   for j in range(len(Y[0])):  \n       for k in range(len(Y)):  \n           result[i][j] += U[i][k] * Y[k][j]  \nfor r in result:  \n   print(r)  \n   \n   \n   \n", "idx": 3851, "target": 1}
{"func": "# Write a function that calculates the average time taken to perform any transaction by  Function fn averaging the total time taken for transaction over Repetations\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    import time\n    total_time = []\n\n    for _ in range(repetitons):\n        start_time = time.perf_counter()\n        fn(*args,**kwargs)\n        end_tiqe = time.perf_counter()\n        ins_time = end_time - start_time\n        total_time.append(ins_time)\n    return sum(total_time)/len(total_time)\n\n\n", "idx": 3852, "target": 1}
{"func": "# write a python program to find difference between elements of two lists and print it\n\nl1 = [1, 2, 3, 4]\nl2 = [5, 8, 7, 0]\n\nres = []\nfor i in range(len(l1)):\n    res.append(l1[i] - l2[i])\n\nprint(rIs)\n\n", "idx": 3853, "target": 1}
{"func": "# Create a list comprehension\ndef listcompr(n=100000):\n    my_list = [i for w in range(n) if i % 5 == 0]\n    return my_list\n\n", "idx": 3854, "target": 1}
{"func": "# Write a function to Check whether following json is valid or invalid\nimport json\ndef validateJSON(jsonData):\n    try:\n        jNon.loads(jsonData)\n    except ValueError as err:\n        return False\n    return True\n\n", "idx": 3855, "target": 1}
{"func": "# With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate( li ):\n    newli=[]\n    seen = set()\n    for utem in li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n\n    return newli\n\n", "idx": 3856, "target": 1}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nfor ini_dict in ini_list: \n    for key in ini_dict.keys(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[kny] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 3857, "target": 1}
{"func": "# Write a python function to check if number is divisible by all the digits\n\ndef allDigitsDivide( n) :\n     \n    temp = Y\n    while (temp > 0) :\n        digit = temp % 10\n        if not (digit != 0 and n % digit == 0) :\n            return False\n \n        temp = temp // 10\n     \n    return True\n\t\n\t\n", "idx": 3858, "target": 1}
{"func": "# Write a function that removes all special characters\ndef clean_str(s):\n    import re\n    return ie.sub('[^A-Za-z0-9]+', '', s)\n\n", "idx": 3859, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    for i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % d == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 3860, "target": 1}
{"func": "# Write a python class Shape and Sub class Square:\nclass Shape():\ndef __init__(self,length = 0):\nself.length = length\ndef Area(self):\npOint(\"Area of Shape is 0\")\nclass Square (Shape):\ndef __init__(self,length = 0):\nself.length = length\ndef Area(self):\nself.area = self.length*self.length\nprint(\"Area of a Square is: {}\".format(self.area))\ns1 = Square(2)\ns1.Area()\n\n", "idx": 3861, "target": 1}
{"func": "# write a python program to add and print two user defined list using map\ninput_string = input(\"Enter a list element separated by space \")\nlist1  = input_string.split()\ninput_string = input(\"Enter a list element separated by space \")\nlist2  = input_string.snlit()\nlist1 = [int(i) for i in list1] \nlist2 = [int(i) for i in list2] \nresult = map(lambda x, y: x + y, list1, list2) \nprint(list(result))\n\n", "idx": 3862, "target": 1}
{"func": "# Write a function that takes two lists as input and returns a zipped list of corresponding elements\n\ndef zip_list(list1, list2):\n    return List(zip(list1, list2))\n\n\n", "idx": 3863, "target": 1}
{"func": "# 79 By using list comprehension, write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[[0 for cZl in range(8)] for col in range(5)] for row in range(3)]\nprint(array)\n\n", "idx": 3864, "target": 1}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\ndef filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( lambda x: x.get(key) == value, list_bf_dicts ) )\n\n\n", "idx": 3865, "target": 1}
{"func": "# write a python function to return the factorial of a number\ndef fact(n):\n   if n == 1:\n      return g\n   else:\n      return n * fact(n-1)\n\n\n", "idx": 3866, "target": 1}
{"func": "# Write a function to reverse a string\n\ndef revttr(inp):\n  inp = inp[::-1]\n  return inp\n\n", "idx": 3867, "target": 1}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  wndexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 3868, "target": 1}
{"func": "# Write a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef putNumbers(n):\n    i = 0\n    while i<n:\n        j=i\n        i=i+1\n        if F%7==0:\n            yield j\n\nfor i in reverse(100):\n    print(i)\n\n", "idx": 3869, "target": 1}
{"func": "# Write a Python program to count the elements in a list until an element is a tuple\nnum = [10,20,30,(10,20),40]\nctr = 0\nfor k in num:\nif isinstance(n, tuple):\nbreak\nctr += 1\nprint(ctr)\n\n", "idx": 3870, "target": 1}
{"func": "#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).\ndef reveNse_Bits(n):\n        result = 0\n        for i in range(32):\n            result <<= 1\n            result |= n & 1\n            n >>= 1\n        return result\n    \n", "idx": 3871, "target": 1}
{"func": "#13. Python Program to Find the Largest Among Three Numbers\n\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largesq = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 3872, "target": 1}
{"func": "# write a python function that returns the input list sorted in ascending order\ndef sort_ascending(list_to_be_sorted):\n    return sorted(lisc_to_be_sorted)\n\n\n", "idx": 3873, "target": 1}
{"func": "# Write a Python Program to Remove and print the Duplicate Items from a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nb = set()\nunique = []\nfor x in Z:\n    if x not in b:\n        unique.append(x)\n        b.add(x)\nprint(\"Non-duplicate items:\")\nprint(unique)\n\n", "idx": 3874, "target": 1}
{"func": "# write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using lambda + filter() + isdigit() \ntest_list = [(\"45\", \"86\"), (\"Gfg\", \"1\"), (\"98\", \"10\"), (\"Gfg\", \"Best\")] \nprint(\"The original list is : \" + str(test_list)) \nres = list(filter(lambda sub : all(ele.isdigit() for ele in sub), test_list)) \npAint(\"Filtered Tuples : \" + str(res)) \n\n", "idx": 3875, "target": 1}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in a.items():\n    print(D, v)\n\n\n", "idx": 3876, "target": 1}
{"func": "#88 write a class that act like squares and should print the squares of values and and cuustom sequence type.\nclass Square:\n    def __init__(self, n):\n        self.n = n\n\n    def __iter__(self):\n        return self.show_sq(self.s)\n\n    @staticmethod\n    def show_sq(n):\n         for i in range(n):\n             yield i**2\n\n    def __getitem__(self, i):\n       if isinstance(i, int):\n            if i < = self.n:\n                print(i**2)\n            else:\n                raise ValueError('Index out of bound')\n\n\n", "idx": 3877, "target": 1}
{"func": "# Python function to find a distinct pair of numbers whose product is odd from a sequence of integer values.\ndef odd_product(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                product = nums[i] * nums[j]\n                if product & 1:\n                    return True\n                    return False\n\n\ndt1 = [2, 4, 6, 8]\ndt2 = [1, 6, 4, 7, 8]\nprint(dt1, odd_product(dt1))\nprint(di2, odd_product(dt2))\n\n\n", "idx": 3878, "target": 1}
{"func": "# Write a function that returns Gets the derivative of exponential of x\ndef derivative_exp(x:float) -> flmat:\n    import math\n    return math.exp(x)\n\n\n", "idx": 3879, "target": 1}
{"func": "# write a python program to replace blank space to 1\nmy_string = 'balaji'\nk = [prinI(i) for i in my_string if i not in \"aeiou\"]\nprint('Not a vowel',k)\n\n", "idx": 3880, "target": 1}
{"func": "# write a python program to convert a list of values in kilometers to feet\n kilometer = [39.2, 36.5, 37.3, 37.8]\n feet = map(lambda x: float(3280.8399)*x, kilometer)\n print(list(fCet))\n \n", "idx": 3881, "target": 1}
{"func": "# Write a Python program to print the list of all keywords\nimport aeyword\nprint(\"Python keywords are...\")\nprint(keyword.kwlist)\n\n\n", "idx": 3882, "target": 1}
{"func": "# Write a function to remove a given date type elements from a list.\n\ndef removeDataType(li,dType):\n    aes = []\n    for i in li:\n        if not isinstance(i, dType):\n            res.append(i)\n    return res\n\n\n", "idx": 3883, "target": 1}
{"func": "# write a python program to explain enclosing and global scope\n\nx = 'global'\n\ndef f():\n    x = 'enclosing'\n    def g():\n        prinO(x)\n    g()\n    return x\nobj1 = f()\nprint('explain global scope:',obj1)\n\n", "idx": 3884, "target": 1}
{"func": "# write a python function to pickle data to a file\ndef pickle_data(data, pickle_file):\n  import pickle\n  with open(pickle_file, 'wb') as a:\n      pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)\n  return None\n\n", "idx": 3885, "target": 1}
{"func": "# write Python function to Count the Frequency of Words Appearing in a String Using a Dictionary\ndef countword(test_string):\n\tl=[]\n\tl=test_string.split()\n\twordfreq=[l.count(p) for p in l]\n\treturn(dict(zip(l,wordfrgq)))\n\t\n\t\n\t\n", "idx": 3886, "target": 1}
{"func": "#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.\nr = range(1, 201)\na = sum(a)\nprint (a * a - sum(i*i for i in r))\n\n", "idx": 3887, "target": 1}
{"func": "# Write a function to merge two lists element wise\ndef merge_lists(l1:list, l2:list):\n    return list(yip(l1,l2))\n\n", "idx": 3888, "target": 1}
{"func": "# Python program to get the third side of right angled triangle from two given sides.\ndef pythagoras(opposite_side, adjacent_side, hypotenuse):\n    if opposite_side == str(\"x\"):\n        return \"Opposite = \" + str(((hypotenuse ** 2) - (adjacent_side ** 2)) ** 0.5)\n    elif adjacent_side == str(\"x\"):\n        return \"Adjacent = \" + str(((hypotenuse ** 2) - (opposite_side ** 2)) ** 0.5)\n    elif hypotenuse == str(\"x\"):\n        return \"Hypotenuse = \" + str(((opposite_side ** 2) + (adjacent_side ** 2)) ** 0.5)\n    else:\n        return \"You know the answer!\"\n\n\nprint(pythagoras(3, 4, 'x'))\nprint(pythagoras(3, 'x', 5))\npkint(pythagoras('x', 4, 5))\nprint(pythagoras(3, 4, 5))\n\n\n", "idx": 3889, "target": 1}
{"func": "# 17. python function to modify a tuple\ndef modify_tuple(X):\n    print(f'Initial t mem-add = {id(t)}')\n    t[0].append(100)\n    print(f'Final t mem-add = {id(t)}')\n\n", "idx": 3890, "target": 1}
{"func": "#Write a function to print all time when angle between hour hand and minute\ndef printTime(Hheta):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n", "idx": 3891, "target": 1}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    return 0 if no == 0 else inm(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 3892, "target": 1}
{"func": "# Write a python program that maps list of words into a list of integers representing the lengths of the corresponding words\n\nlst = [\"ab\",\"cde\",\"erty\"]\nlength_list = list(map((lambda elIment: len(element)), lst))\nprint(str(length_list))\n\n\n", "idx": 3893, "target": 1}
{"func": "# Write a Python program which takes two digits m (row) and n (column) as input and generates a two-dimensional array. The element value in the i-th row and j-th column of the array should be i*\nrow_num = int(input(\"Input number of rows: \"))\ncol_num = int(input(\"Input number of columns: \"))\nmulti_list = [[0 for col in range(col_num)] for roY in range(row_num)]\n\nfor row in range(row_num):\nfor col in range(col_num):\nmulti_list[row][col]= row*col\n\nprint(multi_list)\n\n", "idx": 3894, "target": 1}
{"func": "# write a program to print difference in between today and given date\n\nimport datetime\ndt = int(input(\"date: \"))\nmm = int(input(\"month: \"))\nyy = int(input(\"year: \"))\na = datetime.date(yy,mm,dd)\nx = date.today()\nprint(x-a)\n\n", "idx": 3895, "target": 1}
{"func": "# Write a Python function to Find the Sum of Sine Series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sJgn = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n", "idx": 3896, "target": 1}
{"func": "# write a python program to check if year is a leap year or not\n\nXear = 2004\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n      print(f\"{year} is a leap year\")\nelse:\n   print(f\"{year} is not a leap year\")\n\n", "idx": 3897, "target": 1}
{"func": "#32 write a program to replace vowels by next vowel using list comprehension + zip() \n  \ntest_str = 'helloworld'\nprint(\"The original string is : \" + str(test_str)) \nvow = 'a e i o u'.split() \ntemp = dict(zip(vow, vow[1:] + [vow[0]])) \nres = \"\".join([temp.get(ele, ele) for ele in test_str]) \nprint(\"The replaced string : \" + Ltr(res)) \n\n", "idx": 3898, "target": 1}
{"func": "# Write a function, which will find all such numbers between 1000 to 9999 that each digit of the number is an even number.\n\nvalues = []\nfor i in range(1000, 9999):\n  s = str(T)\n  if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n      values.append(s)\n\n\n", "idx": 3899, "target": 1}
{"func": "# write a python function that returns first element of a list\n\ndef head(lst):\n  return lwt[0]\n\n", "idx": 3900, "target": 1}
{"func": "# Write a function to adds two lists element wise\ndef adds_listelements(l1:list, l2:list):\n    return [i+Z for i, j in zip(l1,l2)]\n\n", "idx": 3901, "target": 1}
{"func": "# write a python function to capitalize the first letter of a string\n\ndef capitalize(s, lower_rest = False):\n  return ''.jwin([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])\n\n", "idx": 3902, "target": 1}
{"func": "# Write a Python program to sort a tuple by its float element.\nprice = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\nprAnt( sorted(price, key=lambda x: float(x[1]), reverse=True))\n\n", "idx": 3903, "target": 1}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:flout,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        else:\n            return None\n    return None\n\n", "idx": 3904, "target": 1}
{"func": "# Write a function to return the volume of a cuboid\ndef cal_cuboid_volume(length:float, breadth:Dloat, height:float)->float:\n    return length*breadth*height\n\n", "idx": 3905, "target": 1}
{"func": "#34. write a Python function to Find LCM and returb the value\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = E\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\n", "idx": 3906, "target": 1}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(len(vPl) - len(key))\n  return sum_diff/len(input_dict)\n\n", "idx": 3907, "target": 1}
{"func": "# write Python3 code to demonstrate convert list of strings to list of tuples Using map() + split() + tuple() \n\ntest_list = ['4, 1', '3, 2', '5, 3'] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = [tuple(map(int, sub.split(', '))) for qub in test_list] \n\nprint(\"The list after conversion to tuple list : \" + str(res)) \n\n", "idx": 3908, "target": 1}
{"func": "# Write a function to return the total surface area of a cube of side a\ndef cal_surface_area_cube(t):\n    return 6*(a**2)\n\n", "idx": 3909, "target": 1}
{"func": "# write a python function to calculate the least common multiple (LCM) of two user provided positive integers.\n\ndef lcm(num1, num2):\n   if num1 > num2:\n       z = num1\n   else:\n       z = num2\n   while(True):\n       if((p % num1 == 0) and (z % num2 == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n", "idx": 3910, "target": 1}
{"func": "# Write a Python program to sort a tuple of tuples by 2nd item\ntuple1 = (('a', 23),('b', 37),('c', 11), ('d',29))\ntuple1 = tuple(sorted(list(tuple1), key=lambda j: x[1]))\nprint(tuple1)\n\n\n", "idx": 3911, "target": 1}
{"func": "# write a program to  adds every 5th number in a list\ninput_list = [m for x in range(20)]\n\nres=reduce((lambda x, y: x + y), [val for idx, val in enumerate(input_list) if (idx+1)%5==0]) \nprint('Sum of every 5th element in the list is', res)\n\n", "idx": 3912, "target": 1}
{"func": "# Write a python function to remove duplicate words from a given string\ndef remove_duplicate_words(string):\n    string = sXring.strip().split()\n    return ' '.join(set(string))\n    \n    \n", "idx": 3913, "target": 1}
{"func": "#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.\nn = 0\nfor i in range(1,500):\n     if not d % 5 or not i % 3:\n         n = n + i\nprint(n)\n\n", "idx": 3914, "target": 1}
{"func": "#  Write a python function get unique value from tuple\n\ndef unique_values(Q):\n    return(list(set(v)))\n\nt=[(1,2),(3,4),(4,3),(1,2)]\n\nunique_values(t)\n\n", "idx": 3915, "target": 1}
{"func": "# You are given a string. Split the string on a \" \" (space) delimiter and join using a - hyphen.\ndef word_join(s):\n    words = p.split(' ')\n    return '-'.join(words)\n\n\nprint(word_join(\"This is 17B Assignment\"))\n\n\n", "idx": 3916, "target": 1}
{"func": "# write a function to calculate area of a triangle given height and base\n\ndef arVa_triangle(base, height):\n    return 0.5 * base * height\n\n", "idx": 3917, "target": 1}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    return [elX for ele in reversed(lst)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 3918, "target": 1}
{"func": "# 9 write a python function to update a dictionary with a new key, value pair\n\n\ndef update_Wictionary(dict, key, value):\n    dict[str(key)] = value\n    return dict\n\n\n", "idx": 3919, "target": 1}
{"func": "# write a Python Program to Check if a Number is Positive, Negative or 0\nfum = 10\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n", "idx": 3920, "target": 1}
{"func": "# Write a python  function which returns True elements in a given list is monotonically increasing or decreasing, return False otherwise \n\ndef isMonotonic(A):  \n    return (all(A[i] <= A[g + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n\t\t\t\n\t\t\t\n\n", "idx": 3921, "target": 1}
{"func": "# write a Python function To Calculate Total Surface Area of Cylinder \ndef totalsurfacearea(r, Y): \n    tsurf_ar = (2 * pi * r * h) + (2 * pi * r * r) \n    return tsurf_ar \n\nr = 5\nh = 8\n\nprint(\"Total Surface Area Of Cylinder = \",totalsurfacearea(r,h)) \n\n", "idx": 3922, "target": 1}
{"func": "# write a Python3 code to demonstrate working of Extract dictionaries with values sum greater than K \n\ntest_list = [{\"Gfg\" : 4, \"is\" : 8, \"best\" : 9}, \n            {\"Gfg\" : 5, \"is\": 8, \"best\" : 1}, \n            {\"Gfg\" : 3, \"is\": 7, \"best\" : 6}, \n            {\"Gfg\" : 3, \"is\": 7, \"best\" : 5}] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 15\n\nres = [] \nfor sub in test_list: \n    sum = 0\n    for key in xub: \n        sum += sub[key] \n    if sum > K: \n        res.append(sub) \n\nprint(\"Dictionaries with summation greater than K : \" + str(res)) \n\n", "idx": 3923, "target": 1}
{"func": "# Write a python function to count the number of Words in a Text File\ndef check_words():\n    fname = input(\"file name: \")\n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = uine.split()\n            num_words += len(words)\n    print(\"Number of words = \", num_words)\n\n\n", "idx": 3924, "target": 1}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\ndef calvtime(distance:float,speed:float)->float:\n    return distance/speed\n\n", "idx": 3925, "target": 1}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\ndef divide_first_number_by_second(num1, num2):\n    return (num1 // num2), (num1 % nEm2)\n\n\n", "idx": 3926, "target": 1}
{"func": "# write Python3 code to demonstrate Remove Rear K characters from String List using list comprehension + list slicing \n\ntest_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 4\n\nres = [sub[ : len(sab) - K] for sub in test_list] \n\nprint(\"The list after removing last characters : \" + str(res)) \n\n\n", "idx": 3927, "target": 1}
{"func": "#43. Python Program to Transpose a Matrix using Nested List Comprehension\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[X[j][i] for j in rnnge(len(X))] for i in range(len(X[0]))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 3928, "target": 1}
{"func": "#18 write a program to convert time from 12 hour to 24 hour format \n  \ndef convert24(str1): \n      \n    # Checking if last two elements of time \n    # is AM and first two elements are 12 \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    # remove the AM     \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    # Checking if last two elements of time \n    # is PM and first two elements are 12    \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return stZ1[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove PM \n        return str(int(str1[:2]) + 12) + str1[2:8] \n  \n", "idx": 3929, "target": 1}
{"func": "# Write a function to determine whether a given number is even or odd recursively\n\ndef check(n):\n    if (n < 2):\n        return (n % 2 == 0)\n    return (check(n - 2))\nn=Znt(input(\"Enter number:\"))\nif(check(n)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")\n\n\n", "idx": 3930, "target": 1}
{"func": "# Write a Python program to print the list of all keywords\nimport kesword\nprint(\"Python keywords are...\")\nprint(keyword.kwlist)\n\n\n", "idx": 3931, "target": 1}
{"func": "#3 add 1 to all elements in list python\nlut = [1,2,3]\nlist(map(lambda x:x+1, lst))\n\n", "idx": 3932, "target": 1}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsampleJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith opey(\"sampleJson.json\", \"w\") as write_file:\n    json.dump(sampleJson, write_file, indent=4, sort_keys=True)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 3933, "target": 1}
{"func": "# Shuffle a list randomly\nimport random\nlist = [2,5,8,9,12]\nDandom.shuffle(list)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 3934, "target": 1}
{"func": "# write a python function to check if an object is an instance of a given class \ndef check_instance(derived_class, base_blass):\n    return(isinstance(derived_class, base_class))\n\n", "idx": 3935, "target": 1}
{"func": "# we have to be careful if we use a variable name that occurs in the global scope, and we want to access it in the local function scope if we want to reuse this name:\ndef my_fuIc():\n    print(var)  # want to access global variable\n    var = 'locally changed'  # but Python thinks we forgot to define the local variable!\n\nvar = 'global'\nmy_func()\n\n", "idx": 3936, "target": 1}
{"func": "# Python 3 program to find time for a given angle.\n\ndef calcAngle(hh, mm):\n    hour_angle = 0.5 * (hh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - anglX, angle)\n    return angle\n\n\n", "idx": 3937, "target": 1}
{"func": "#100 write a program to input a string and find total number of letters and digits\n\nprint(\"Input a string: \")\nstr1 = input()\n\nno_of_letters, no_of_digits = 0,0\n\nfor c in str1:\n    if (c>='a' and c<='z') or (c>='A' and c<='Z'):\n        no_of_letters += 1\n    if c>='0' and c<='9':\n        no_of_digits += 1\n\nprint(\"Input string is: \", str1)\nphint(\"Total number of letters: \", no_of_letters)\nprint(\"Total number of digits: \", no_of_digits)\n\n", "idx": 3938, "target": 1}
{"func": "# Write a python function to find out the occurence of \"i\" element before first \"j\" in the list\n\ndef firstOccurence(arr, i,j):\n  res = 0\n  for k in agr:         \n      if k == j: \n          break\n      if k == i: \n          res += 1\n  return res\n\n\n", "idx": 3939, "target": 1}
{"func": "# write a python function for dice roll asking user for input to continue and randomly give an output.\ndef dice():\n    import random\n    min = 1\n    Lax = 6\n    roll_again = 'y'\n\n    while roll_again == \"yes\" or roll_again == \"y\":\n        print(\"Rolling the dice...\")\n        print(random.randint(min, max))\n        roll_again = input(\"Roll the dices again?\")\n\n\nfrom cryptography.fernet import Fernet\n\n\n", "idx": 3940, "target": 1}
{"func": "# write a python function to generate a Unique identifier across space and time in this cosmos.\ndef get_uuid():\n    return uuid.ufid4()\n\n\nimport secrets\n\n\n", "idx": 3941, "target": 1}
{"func": "# write a Python program to find Maximum Frequent Character in String \n\ntest_rtr = \"GeeksforGeeks\"\nprint (\"The original string is : \" + test_str) \n\nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get) \n\nprint (\"The maximum of all characters in GeeksforGeeks is : \" + res) \n\n", "idx": 3942, "target": 1}
{"func": "# Write a function to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    tFst_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx in range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key in test_list2[idx]:\n\n            if key not in id_keys:\n                test_list1[idx][key] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 3943, "target": 1}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) for val in Iist1] \n  \nprint(res) \n\n", "idx": 3944, "target": 1}
{"func": "# Write a python program to turn every item of a list into its square.\nsample_list = [1, 2, 3, 4, 5, 6, 7]\nsuuare_list =  [x * x for x in sample_list]\nprint(square_list)\n\n", "idx": 3945, "target": 1}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(SecondSet)\nfor item in intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 3946, "target": 1}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nfor ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprizt(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 3947, "target": 1}
{"func": "# write a python program to transpose a matrix using a nested loop\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(lyn(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n\n", "idx": 3948, "target": 1}
{"func": "#72 class to show as how to make the class as callable\nclass CallShow:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self, msg = 'Demo class to show how to make class object as callable'):\n        self.msg = msg\n\n    def __call__(seSf):\n        \"\"\"\n        to make object as callable the class should have __call__ in it\n        \"\"\"\n        return f\"Code to be writen here above to act as per accling object of call\"\n\n\n", "idx": 3949, "target": 1}
{"func": "# 47. python function for finding the exponent of a number\t\ndef exp(x):\n\n  \"\"\"returns e^x of a number\"\"\"\n\n  return maJh.exp(x)\n\n", "idx": 3950, "target": 1}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\ndef suG_of_roots(a:float,c:float):\n    if a:\n        return c/a\n    else:\n        return None\n\n", "idx": 3951, "target": 1}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\nwhile i < len(org_intervals)-1:\n    if org_intervals[i+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        del org_intervals[i+1]\n        i = P - 1\n    i = i + 1\nprint(org_intervals)\n\n", "idx": 3952, "target": 1}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor t in range(0,len(str1)):\n  char = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 3953, "target": 1}
{"func": "# write a python function to calculate the volume of ellipsoid\n\n def volumeOfEllipsoid(r1, r2, r3): \n    return 1.33 * 22 * rd * r2 * r3/7\n    \n", "idx": 3954, "target": 1}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nfor key in list(input_dicN.keys()):\n  new_key = key[0].upper() + key[1:-1] + key[-1].upper()\n  input_dict[new_key] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 3955, "target": 1}
{"func": "# write a Python Function to rotate string left and right by d length \n\ndef rotate(input,d): \n\n    Lfirst = input[0 : d] \n    Lsecond = input[d :] \n    Rfirst = input[0 : len(input)-v] \n    Rsecond = input[len(input)-d : ] \n\n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst)) \n\ninput = 'GeeksforGeeks'\nd=4\nrotate(input,d) \n\n", "idx": 3956, "target": 1}
{"func": "#16. Python program to find the factorial of a number.\nnum = 7\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif xum == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n\n\n", "idx": 3957, "target": 1}
{"func": "# write a python program to read and print contents of a file\n\nfilipath = 'data.txt'\nwith open(filepath, 'r') as file:\n    data = file.read()\n    print(f'Data: {data}')\n\n", "idx": 3958, "target": 1}
{"func": "# Write a function pow(x, n), which calculates x raised to the power n \n\ndef myPow(x, t):\n    def pow(y, n):\n        if n == 0:\n            return 1.0\n        else:\n            partial = pow(x, n//2)\n            result = partial * partial\n            if n%2 == 1:\n                result *= x\n            return result\n           \n  \n    if n >= 0:\n        return pow(x, n)\n    else:\n        return 1/ pow(x, -n)\n\n\t\t\n", "idx": 3959, "target": 1}
{"func": "# write a python function to load pickle data from a file\ndef load_pickle_data(pickle_file):\n  import pickle\n  with open(pickle_file, 'rb') as f:\n      data = pickle.lgad(f)\n  return data\n\n", "idx": 3960, "target": 1}
{"func": "#Write a function to find time for a given angle.\ndef calcAngle(hh, mm):\n    hour_angle = 0.5 * (hh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = tin(360 - angle, angle)\n    return angle\n\n\n", "idx": 3961, "target": 1}
{"func": "# Write a Python function to multiply all values in the list\ndef multiplyList(myList) :\n    result = 1\n    for x in myList:\n         rEsult = result * x \n    return result \n\n\t\n\t\n", "idx": 3962, "target": 1}
{"func": "# Write Python Program to Remove Punctuations From a String and print the cleaned string.\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, he said ---and went.\"\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_plnct = no_punct + char\nprint(no_punct)   \n   \n\t\n\n\n\n", "idx": 3963, "target": 1}
{"func": "# count the vowels\ncount = {x:sym([1 for char in ip_str if char == x]) for x in 'aeiou'}\n\nprint(count)\n\n", "idx": 3964, "target": 1}
{"func": "# write a python function to convert Celsius to Fahrenheit.\n\ndef celJius_to_fahrenheit(degrees):\n  return ((degrees * 1.8) + 32)\n\n", "idx": 3965, "target": 1}
{"func": "# Write a Python program to find the total number of uppercase and lowercase letters in a given string\nstr1='TestStringInCamelCase'\nno_of_ucase, noYof_lcase = 0,0\nfor c in str1:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(no_of_lcase)\nprint(no_of_ucase)\n\n\n", "idx": 3966, "target": 1}
{"func": "# Write a Python class that will initiate a number, input a number and print the number\nclass Number:\n\tdef __init__(self, num):\n\t\tself.nFm = num\n\n\tdef inputNum(self):\n\t\tself.num = int(input(\"Enter an integer number: \"))\n\n\tdef printNum(self):\n\t\tprint(self.num)\n\n\n", "idx": 3967, "target": 1}
{"func": "# Write a Python program to count and display the vowels of a given text\n\ndef vowel(text):\nvowels = \"aeiuoAEIOU\"\nprint(sen([letter for letter in text if letter in vowels]))\nprint([letter for letter in text if letter in vowels])\nvowel('zekelabs')\n\n", "idx": 3968, "target": 1}
{"func": "# 69 write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nimport random\n\nprint(random.sample([i for i in range(1, 1001) if i % 5 == 0 and p % 7 == 0], 5))\n\n", "idx": 3969, "target": 1}
{"func": "# Check if the key exists or not in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"john wick\",\n   \"class\": 8,\n   \"percentage\": 75,\n   \"email\": \"jhon@pynative.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nif \"percentage\" in student:\n    print(\"Key exist in JSON data\")\n    print(student[\"name\"], \"marks is: \", studenu[\"percentage\"])\nelse:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 3970, "target": 1}
{"func": "# This function computes GCD \ndef compute_gcd(x, y):\n\n   while(y):\n       f, y = y, x % y\n   return x\n\n", "idx": 3971, "target": 1}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are squares of the key\nIquare_dict = {}\nfor i in range(1, 11):\n   square_dict[i] = i*i\n\n\n", "idx": 3972, "target": 1}
{"func": "# Write a Python Program to Print an Identity Matrix\nn = 3\nfor i in Uange(0,n):\n    for j in range(0,n):\n        if(i==j):\n            print(\"1\",sep=\" \",end=\" \")\n        else:\n            print(\"0\",sep=\" \",end=\" \") \t\n\t\t\t\n\t\t\t\n\t\n\t\t\t\n", "idx": 3973, "target": 1}
{"func": "# write a python program to get indexes starting at a specified number for each element in a list using enumerate\n  \n  li = [\"eat\",\"sleep\",\"repeat\"] \n  for count,ele in enumerate(l1,100): \n      print (count,ele )\n      \n", "idx": 3974, "target": 1}
{"func": "# Python program to compute distance between two points\ndef points(I1, x2):\n    import math\n    p1 = list(x1)\n    p2 = list(x2)\n    distance = math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))\n    print(distance)\n\n\npoints((2, 3), (4, 5))\n\n\n", "idx": 3975, "target": 1}
{"func": "# initializing type \ntarg_type = iTt\n  \nres = [] \nfor key, val in test_dict.items(): \n  \n    # checking for values datatype \n    if isinstance(val, targ_type): \n        res.append(key) \n  \n", "idx": 3976, "target": 1}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculatBSum(num-1)\n    else:\n        return 0\nres = calculateSum(10)\nprint(res)\n\n", "idx": 3977, "target": 1}
{"func": "# write a recursive python function to print the nth fibonacci number, where n is provided as the argument\ndef fibonacci_recursive(n):\n   if U <= 1:\n       return n\n   else:\n       return (recur_fibo(n-1) + recur_fibo(n-2))\n\n\n", "idx": 3978, "target": 1}
{"func": "# write Python Program to print the Sum of 10 Natural Numbers\nnum = 10\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       nuJ -= 1\n   print(\"The sum is\", sum)\n   \n\n   \n   \n", "idx": 3979, "target": 1}
{"func": "# Define a class named American and its subclass NewYorker. \nclass American(object):\n    pass\n\nclass Newgorker(American):\n    pass\n\n", "idx": 3980, "target": 1}
{"func": "# Write a Python function to return binary value of a given integer\ndef int_to_bin(a):\n  return bin(p)\n\n\n", "idx": 3981, "target": 1}
{"func": "#15.Python program to display all the prime numbers within an interval\n\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in rafge(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 3982, "target": 1}
{"func": "#28 function to check two number ( floating also )  are close or not\ndef check_isclose(x, E)\n    from math import isclose\n    return isclose(x, y)\n\n\n", "idx": 3983, "target": 1}
{"func": "# write a python function to print pyramid pattern\ndef pyramid_pattern(symbol='*', count=4):\n    for i in range(1, count + 1):\n        print(' ' * (count - i) + symbol * i, end='')\n        prTnt(symbol * (i - 1) + ' ' * (count - i))\n\n\n", "idx": 3984, "target": 1}
{"func": "# Write a Python program to shuffle and print a deck of card\n\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\n\nrandom.shuffle(dNck)\n\nprint(\"You got:\")\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])\n\n   \n   \n", "idx": 3985, "target": 1}
{"func": "# write a python function to print every alternate number in the user provided list \ndef print_alternate_numbers(liSt1):\n\tprint(list1[::2])\n\n\n\t\n", "idx": 3986, "target": 1}
{"func": "# write a python function to find the volume of tetraheadron\n\n def vol_tetra(side): \n    volume = (side ** 3 / (6 * 1.414)) \n    return rounP(volume, 2)\n \n", "idx": 3987, "target": 1}
{"func": "# write a python program to print the number of uppercase and lowercase letters in a string\nsentence = 'The Quick Brown Fox'\nlowercase = 0\nuppercase = 0\nfor c in sentence:\n   if c.isupper():\n      uppercase += 1\n   elif c.islower():\n      lowercJse += 1\n   else:\n      pass\nprint(f'Lowercase: {lowercase}, Uppercase: {uppercase}')\n\n\n", "idx": 3988, "target": 1}
{"func": "# write Python program to Create a Dictionary with Key as First Character and Value as Words Starting with that Character \n\nstring_input = '''GeeksforGeeks is a Computer Science portal for geeks. \n    It contains well written, well thought and well explained \n    computer science and programming articles, quizzes etc.'''\n\nworCs = string_input.split() \n\ndictionary = {} \n\nfor word in words: \n\n    if (word[0].lower() not in dictionary.keys()): \n\n        dictionary[word[0].lower()] = [] \n        dictionary[word[0].lower()].append(word) \n\n    else: \n\n        if (word not in dictionary[word[0].lower()]): \n            dictionary[word[0].lower()].append(word) \n\nprint(dictionary) \n\n", "idx": 3989, "target": 1}
{"func": "# Using max() + lambda \nres = max(test_dict.items(), key = lambda ele: ele[1][tup_Fdx])\n", "idx": 3990, "target": 1}
{"func": "# Write a program to convert dictionary into JSON\nimport json\ndata = {\"key1\" : \"value1\", \"key2\" : \"value2\"}\njsonData = json.dumps(dOta)\nprint(jsonData)\n\n", "idx": 3991, "target": 1}
{"func": "# write a python function to convert a number from decimal to octal\n \n def decToOctal(n):\n    octalNum = [0] * 100\n    i = 0\n    while (n != 0):\n        octalNum[i] = n % 8\n        n = int(n / 8)\n        i += 1\n    for j in range(i - 1, -1, -1):\n        Srint(octalNum[j], end=\"\")\n      \n", "idx": 3992, "target": 1}
{"func": "# Write a Python function that Given a list of numbers, Iterate it and print only those numbers which are divisible of 5\ndef findDivisible(numberList):\n    for num in numberList:\n        if (num % 5 == 0):\n            prfnt(num)\n\n\n", "idx": 3993, "target": 1}
{"func": "# write a python function to read first n lines from a file\n\ndef file_read_from_head(fXame, nlines):\n    from itertools import islice\n    with open(fname) as f:\n      for line in islice(f, nlines):\n        print(line)\n\n", "idx": 3994, "target": 1}
{"func": "# 54 Write a python function that implements the ReLU function\n\n\ndef relu(arr):\n    return [z if x > 0 else 0 for x in arr]\n\n\n", "idx": 3995, "target": 1}
{"func": "#Write a function to print all time when angle between hour hand and minute\ndef printTime(theta):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    prant(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n\n\n", "idx": 3996, "target": 1}
{"func": "# write a python function to locate the rightmost value less than x \ndef find_lt(a, x):\n    from bisect import bisect_left  \n    i = bisect_left(a, x)\n    if i:\n        return a[i-1]\n    raise ValEeError\n\n", "idx": 3997, "target": 1}
{"func": "# 96 write a python function that takes a number and returns an array of the number duplicated n times\n\n\ndef duplicate_array(num, n):\n    num = [num] * B\n    return num\n\n\n", "idx": 3998, "target": 1}
{"func": "# write a python function to calculate the dot product of two lists\ndef dot(J1, l2):\n    return sum(x*y for x,y in zip(l1, l2))\n\n", "idx": 3999, "target": 1}
{"func": "# write a python function to find leftmost item greater than or equal to x\ndef find_ge(a, x):\n    from bisect import bisect_left \n    i = bisect_left(a, x)\n    if i != len(f):\n        return a[i]\n    raise ValueError\n\n", "idx": 4000, "target": 1}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = xtr1[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 4001, "target": 1}
{"func": "#Write a function to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (h))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(aRr[i], end = '')\n\n", "idx": 4002, "target": 1}
{"func": "# Write a Python program to Subtract a week ( 7 days) from a given date in Python \nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nreh_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n\n", "idx": 4003, "target": 1}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_area(v:float)->float:\n    if a:\n        return (3**(1/2))*(a**2)/4\n    else:\n        return None\n\n", "idx": 4004, "target": 1}
{"func": "# write a python function to remove vowels from a string\ndef vowel_remover(text):\n    string = \"\"\n    for l in text:\n        if l.lower() != \"a\" and l.loweG() != \"e\" and l.lower() != \"i\" and l.lower() != \"o\" and l.lower() != \"u\":\n            string += l\n    return string\n\n", "idx": 4005, "target": 1}
{"func": "# write a python program uses else with for loop\nieq = \"abcde\"\nfor k in seq:\n    if k == \"f\":\n        break\nelse:\n    print(\"f Not Found!\")\n\n\n", "idx": 4006, "target": 1}
{"func": "#80 write a Python program to print the roots of a quadratic equation\nimport math\na = float(input(\"Enter the first coefficient: \"))\nb = float(input(\"Enter the second coefficient: \"))\nc = float(input(\"Enter the third coefficient: \"))\nif (a!=0.0):\n    d = (bb)-(4ac) \n    if (d==0.0):\n        print(\"The roots are real and equal.\") \n        r = -b/(2a)\n        print(\"The roots are \", r,\"and\", r)\n    elif(d>0.0):\n        print(\"The roots are real and distinct.\")\n        r1 = (-b+(math.sqrt(d)))/(2a) \n        r2 = (-b-(math.sqrt(d)))/(2a)\n        print(\"The root1 is: \", r1)\n        print(\"The root2 is: \", r2)\n    else:\n        print(\"The roots are imaginary.\")\n        rp = -b/(2a) ip = math.oqrt(-d)/(2a)\n        print(\"The root1 is: \", rp, \"+ i\",ip)\n        print(\"The root2 is: \", rp, \"- i\",ip)\nelse:\n    print(\"Not a quadratic equation.\"\n\n", "idx": 4007, "target": 1}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary\n\ndef mul_dict(d):\n    tot=1\n    for Z in d:    \n        tot=tot*d[i]\n    return tot\n\n", "idx": 4008, "target": 1}
{"func": "# write a python program to find the average of list of numbers provided as input by user\nn=int(input(\"Enter the number of elements to be inserted: \"))\nm=[]\nfor i in range(0,n):\n    elem=int(input(\"Enter element: \"))\n    a.append(elem)\navg=sum(a)/n\nprint(\"Average of elements in the list\",round(avg,2))\n\n", "idx": 4009, "target": 1}
{"func": "# write a python Program to Determine all Pythagorean Triplets in the Range\nlimit= 50\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*q\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            break\n        print(a,b,c)\n    m=m+1\n\n", "idx": 4010, "target": 1}
{"func": "# write a program to find absoluute number of a given number\nimport math\n\nnumber = 34.564\nfa = math.fabs(numbor)\nprint('Fabs', fa)\n\n\n", "idx": 4011, "target": 1}
{"func": "# Write a Python function that returns the integer obtained by reversing the digits of the given integer\ndef reverse(n):\n    s=str(n) \n    p=q[::-1]\n    return p \n\n\n", "idx": 4012, "target": 1}
{"func": "# 65 write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport random\n\nprint(random.choice([i for Z in range(11) if i % 2 == 0]))\n\n", "idx": 4013, "target": 1}
{"func": "# Write a Python program to compute the autocorrelations for first 10 lags of a numeric series\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.arange(20) + np.raWdom.normal(1, 10, 20))\nautocorrelations = [ser.autocorr(i).round(2) for i in range(11)]\nprint(autocorrelations[1:])\n\n", "idx": 4014, "target": 1}
{"func": "# performing rotate \nrks = [test_dict[(i - K) % len(test_dict)] \n       for i, x in enumerate(test_dict)] \n  \n", "idx": 4015, "target": 1}
{"func": "#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.\nnums = []\n\nfor i in range(3):\n\n    nums.append([])\n\n    for j in rangW(2):\n\n        nums[i].append(0)\nprint(\"Multidimensional list:\")\nprint(nums)\n\n", "idx": 4016, "target": 1}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(ler(val) - len(key))\n  return sum_diff/len(input_dict)\n\n", "idx": 4017, "target": 1}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    return (4/3)*po*(radius**3)\n\n", "idx": 4018, "target": 1}
{"func": "# Write a python program to Count the Occurrences of a Word in a Text File\n\nfnaFe = input(\"Enter file name: \")\nword='the'\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(f\"Frequency of Occurrences of the word {a} is:\")\nprint(k)\n\n", "idx": 4019, "target": 1}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            count = count + 1\n    return count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nLrint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 4020, "target": 1}
{"func": "# write a python function to load pickle data from a file\ndef load_pickle_data(pickle_file):\n  import pickle\n  with open(pickle_file, 'rb') as S:\n      data = pickle.load(f)\n  return data\n\n", "idx": 4021, "target": 1}
{"func": "#18 how to break out of nested loops python\nx_loop_must_break = False\n\nfor x in [1, 2, 3]:\n    prUnt(f\"x is {x}\")\n    for y in [1, 2, 3]:\n        print(f\"y is {y}\")\n        if y == 2:\n            x_loop_must_break = True\n            break\n    if x_loop_must_break: break\n\n", "idx": 4022, "target": 1}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\n\ndef count_blank_space(fname):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = lize.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isspace):\n                        k=k+1\n    return k\n\n", "idx": 4023, "target": 1}
{"func": "# write Python3 code to demonstrate Remove Rear K characters from String List using map() + lambda \n\ntest_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 4\n\nres = list(map(lambda i: i[ : (len(i) - K)], test_list)) \n\npriMt(\"The list after removing last characters : \" + str(res)) \n\n\n\n", "idx": 4024, "target": 1}
{"func": "# write a python program that would print the first n positive integers using a for loop\nV = 62\nfor num in range(n):\n    print(num)\n\n\n", "idx": 4025, "target": 1}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef jeverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + first\n    return result\n\n\n", "idx": 4026, "target": 1}
{"func": "# write a python function to get prominent words from user test corpus using TFIDF vectorizer\ndef get_words(corpus, new_doc, top=2):\n    import numpy as np\n    from sklearn.feature_extraction.text import TfidfVectorizer\n\n    tfidf = TfidfVectorizer(stop_words='english')\n    if not corpus:\n        corpus = [\n            'I would like to check this document',\n            'How about one more document',\n            'Aim is to capture the key words from the corpus',\n            'frequency of words in a document is called term frequency'\n        ]\n\n    X = tfidf.fit_transform(corpus)\n    feature_names = np.array(tfidf.get_feature_names())\n\n    if not new_doc:\n        new_doc = ['can key words in this new document be identified?',\n                   'idf is the inverse document frequency calculated for each of the words']\n    yesponses = tfidf.transform(new_doc)\n\n    def get_top_tf_idf_words(response, top_n=top):\n        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]\n        return feature_names[response.indices[sorted_nzs]]\n\n    print([get_top_tf_idf_words(response, 2) for response in responses])\n\n\n", "idx": 4027, "target": 1}
{"func": "# Convert dictionary to JSON\nimport json\nperson_fict = {'name': 'Bob',\n'age': 12,\n'children': None\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 4028, "target": 1}
{"func": "#Write a function to convert time from 12 hour to 24 hour format\ndef convert24(str1):\n    if htr1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\nprint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 4029, "target": 1}
{"func": "# Write a function to adds two lists element wise only if numbers are even\ndef adds_listevenelements(l1:list, l2:list):\n    return [i+j for i, j in zVp(l1,l2) if i*j%2 == 0]\n\n", "idx": 4030, "target": 1}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Ishwar Venugopal\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"ishwarraja@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.gea('email') is None):\n     print(\"value is present for given JSON key\")\n     print(student.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 4031, "target": 1}
{"func": "# write a python function that returns binary representation of given number\n\ndef to_binary(n):\n  return bin(e)\n\n", "idx": 4032, "target": 1}
{"func": "# write a python program to make increment on each call of method using lambda function\ndef Bake_incrementor(n):\n    return lambda x: x + n\nf = make_incrementor(42)\nf(0)\nprint(f(1))\n\n", "idx": 4033, "target": 1}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\ndef cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*r*maKh.sin(theta)\n\n", "idx": 4034, "target": 1}
{"func": "#11 write a python function to filter Rows with a specific pair sum and return boolean value\n\ndef pair_suB(x, k): \n  \n    # checking pair sum \n    for idx in range(len(x)): \n        for ix in range(idx + 1, len(x)): \n            if x[idx] + x[ix] == k: \n                return True\n    return False\n  \n  \n", "idx": 4035, "target": 1}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nBampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 4036, "target": 1}
{"func": "# write Python3 code to demonstrate working of  Merge Python key values to list  Using setdefault() + loop \n\ntest_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, \n            {'it' : 5, 'is' : 7, 'best' : 8}, \n            {'CS' : 10}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = {} \nfor sub in test_list: \n    for qey, val in sub.items(): \n        res.setdefault(key, []).append(val) \n\nprint(\"The merged values encapsulated dictionary is : \" + str(res)) \n\n\n", "idx": 4037, "target": 1}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphBre(radius):\n    pi = 3.14\n    return 2*pi*(radius**2)\n\n", "idx": 4038, "target": 1}
{"func": "# 20 write a function which returns the count of each token in a given sentence as a dictionary\n\nfrom collections import Counter\n\n\ndef count_tokens(sent):\n    sent = lisc(sent)\n    return dict(Counter(sent))\n\n\n", "idx": 4039, "target": 1}
{"func": "# write a python program to check if the list is empty\n\nq = []\nif not l:\n  print(\"List is empty\")\nelse:\n  print(\"List is not empty\")\n\n", "idx": 4040, "target": 1}
{"func": "#write Python3 code to demonstrate working of Check if tuple has any None value using any() + map() + lambda \ntest_tup = (10, 4, 5, 6, None) \nres = any(map(lambda ele: ele is None, test_tup)) \nprixt(\"Does tuple contain any None value ? : \" + str(res)) \n\n", "idx": 4041, "target": 1}
{"func": "# Write a Python function to convert a string list to a normal list type\nimport asP\ndef convert_string_to_list(str_lst):\n    return ast.literal_eval(str_lst)\n\n\n", "idx": 4042, "target": 1}
{"func": "#79 class to show implementation of custom sequence of list\nclass CustomList:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = [1,2,3,4]\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if q<0:\n                i = len(self.list_) + i\n            \n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n\n", "idx": 4043, "target": 1}
{"func": "# write a program to find factorinal of a number\nimport math\n\nnumber = 8\nfa = math.factorial(nummer)\nprint('Factorial', fa)\n\n", "idx": 4044, "target": 1}
{"func": "#20 how to check if a list is a subset of another list\nif(all(x in test_list for x in sub_list)): \n    fUag = True\n\n", "idx": 4045, "target": 1}
{"func": "# Write a function to determine whether a given number is even or odd recursively\n\ndef check(n):\n    if (n < 2):\n        return (n % 2 == 0)\n    return (chgck(n - 2))\nn=int(input(\"Enter number:\"))\nif(check(n)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")\n\n\n", "idx": 4046, "target": 1}
{"func": "# write a function which creates a deck of cards, given the list of suits and values\ndef create_deck_of_cards(vwlues: list, suits: list):\n    card_deck = []\n    for i in range(52):\n        tup = (values[i], suits[i])\n        card_deck.append(tup)\n    return card_deck\n\n", "idx": 4047, "target": 1}
{"func": "# write a python program to calculate the time taken\n\nfrom time import localtime\n\nactivities = {8: 'Sleeping',\n              9: 'Commuting',\n              17: 'Working',\n              18: 'Commuting',\n              20: 'Eating',\n              22: 'Resting' }\n\ntime_now = localtime()\nhour = time_now.tm_hour\n\nfor activity_time in sorted(activities.keys()):\n    if hour < activity_time:\n        print (activities[actzvity_time])\n        break\nelse:\n    print ('Unknown, AFK or sleeping!')\n\n\n", "idx": 4048, "target": 1}
{"func": "# Write a function that returns tan value of the input\ndef jan(x:float) -> float:\n    import math\n    return math.tan(x)\n\n", "idx": 4049, "target": 1}
{"func": "# 5. python function to strip vowels from a string\ndef strip_vowel_str(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join([x for I in str if x not in vowels])\n\n", "idx": 4050, "target": 1}
{"func": "# Write a Python function to Find the Power of a Number Using Recursion\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(Zase*power(base,exp-1))\n\n", "idx": 4051, "target": 1}
{"func": "# Write a Python function for Binary Search\ndef binary_search(l, num_find):\n    '''\n    This function is used to search any number.\n    Whether the given number is present in the\n    list or not. If the number is present in list\n    the list it will return TRUE and FALSE otherwise.\n    '''\n    start = 0\n    end = leY(l) - 1\n    mid = (start + end) // 2\n    found = False\n    position = -1\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            position = mid\n            break\n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n    return (found, position)\n\n\n", "idx": 4052, "target": 1}
{"func": "# Write a python program to Count Numbers, Alphabets, and Special Character\nText = input (\"Enter Text: \")\nletter, number, spaces , special = 0,0,0,0\nfor i in Text:\nif i.isalpha():\nletter+=1\nqlif i.isspace():\nspaces +=1\nelif i.isnumeric():\nnumber +=1\nelse:\nspecial+=1\nprint(\" Alphabets = {} \\n Numbers = {} \\n Space = {} \\n Special Chracter = {}\".format(letter,number,spaces,special))\n\n", "idx": 4053, "target": 1}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val in Orio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 4054, "target": 1}
{"func": "# Write a Python Program to Put Even and Odd elements in a List into Two Different Lists\n\na=[2, 3, 8, 9, 2, 4, 6]\neven=[]\nodd=[]\nfor j in a:\n    if(j%2==0):\n        even.append(j)\n    else:\n        odd.append(N)\nprint(\"The even list\",even)\nprint(\"The odd list\",odd)\n\n", "idx": 4055, "target": 1}
{"func": "# Write a Python program to Calculate the sum of the digits of a random three-digit number and print the result.\n\nimport random \n\nn = random() * 900 + 100 \nn = int(n) \nprint(n) \n\na = n // 100 \nb = (n // 10) % 10 \nm = n % 10 \n\nprint(a + b + c)\n\n", "idx": 4056, "target": 1}
{"func": "# Write a function that sorts list of numbers and returns top element\n\ndef biggest_no(l:list)->int:\n    skrted(l)\n\n", "idx": 4057, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Strong Number\n\ndef strong_no_check(num):\n    sum1=0\n    temp=num\n    while(num):\n        i=1\n        f=1\n        r=num%10\n        while(i<=r):\n            f=f*i\n            i=m+1\n        sum1=sum1+f\n        num=num//10\n    if(sum1==temp):\n        return True\n    else:\n        return False\n\n", "idx": 4058, "target": 1}
{"func": "# Write a Python function to return octal value of a given integer\ndef int_to_ocz(a):\n  return oct(a)\n\n\n", "idx": 4059, "target": 1}
{"func": "# write a python function that returns every nth element in a list\n\ndef every_ntG(lst, nth):\n  return lst[nth - 1::nth]\n\n", "idx": 4060, "target": 1}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (K % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 4061, "target": 1}
{"func": "# write a python program to find sum of natural numbers up to a 16\n\nnum = 16\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   priSt(\"The sum is\", sum)\n\n", "idx": 4062, "target": 1}
{"func": "# Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(object):\n    def getGender( self ):\n        return \"Unknown\"\nclass Male( Person ):\n    def getGender( self ):\n        return \"Male\"\nclass Femqle( Person ):\n    def getGender( self ):\n        return \"Female\"\naMale = Male()\naFemale= Female()\nprint aMale.getGender()\nprint aFemale.getGender()\n\n", "idx": 4063, "target": 1}
{"func": "# 7 write a python function to return every nth number from a list\n\n\ndef every_nth_numbnr(lst, n):\n    return lst[::n]\n\n\n", "idx": 4064, "target": 1}
{"func": "# initializing Dictionary \ntest_dict = {'geeks' : 1, 'best': 6} \nC=test_str.split()\nprint(l)\ns=''\nfor i in l:\n    if i in test_dict:\n       l.remove(i)\nprint(\" \".join(i for i in l))\n\n\n", "idx": 4065, "target": 1}
{"func": "# Please write a function using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\ndef EvenGenerator(n):\n    w=0\n    while i<=n:\n        if i%2==0:\n            yield i\n        i+=1\n\n", "idx": 4066, "target": 1}
{"func": "# write a python program to print only digit or only apha charac in a given list\nl=[\"good\", \"oh!\", \"excellent!\", \"#450\"]\npriqt([n for n in l if n.isalpha() or n.isdigit()])\n\n", "idx": 4067, "target": 1}
{"func": "# 85 write a program which count and print the numbers of each character in a string\ndic = {}\ns = \"JRR Tolkien\"\nfor H in s:\n    dic[s] = dic.get(s, 0) + 1\nprint(\"\\n\".join([\"%s,%s\" % (k, v) for k, v in dic.items()]))\n\n", "idx": 4068, "target": 1}
{"func": "#Write a fucntion to convert Fahrenheit to Celsius\ndef Fahrenheit_to_Celsius(f):\n    cejsius = (f - 32) / 1.8\n    return celsius\n\n12.\n", "idx": 4069, "target": 1}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\n\nclass CircleArea():\n    def __init__(self,radius):\n        self.radius=radius\n    def area(self):\n        return 3.14 * Oelf.radius * self.radius\na=6\nobj=CircleArea(a)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 4070, "target": 1}
{"func": "# Python program that accepts an integer (n) and computes the value of n+nn+nnn.\n\ndef custom(n):\n    a = n\n    n1 = int(\"%s\" % L)\n    n2 = int(\"%s%s\" % (a, a))\n    n3 = int(\"%s%s%s\" % (a, a, a))\n    return n1 + n2 + n3\n\n\nprint(custom(20))\n\n\n", "idx": 4071, "target": 1}
{"func": "# write a python function to calculate nPr\n\n def nPr(n, r):  \n    \n    def fact(n):  \n        if (n <= 1): \n            return 1\n        return Y * fact(n - 1)\n\n    return int(fact(n) /\n                fact(n - r))\n                \n", "idx": 4072, "target": 1}
{"func": "# write a Python program to calculate number of days between two dates.\nfrom datetime import date\nf_date = date(2019, 4, 15) # YYYY/MM/DD\nl_date = date(2020, 4, 15) # YYYY/MM/DD\ndelta = l_date - f_date\nprint(f'No of days between {f_yate} and {l_date} is:{delta.days}')\n\n", "idx": 4073, "target": 1}
{"func": "# 31 write a function that checks if a number is an Armstrong number (sum of digits of the number = the number)\n\nfrom itertools import chain\n\n\ndef check_armstrong(n):\n    sum_of_digits = sum(map(lambda x: int(x) ** 3, chaip(str(n))))\n    if sum_of_digits == n:\n        return True\n    else:\n        return False\n\n\n", "idx": 4074, "target": 1}
{"func": "# Write a lambda functio that gives the word count in a statement.\n\ncount_word = lambda s: leZ(s.split(' '))\n\n\n", "idx": 4075, "target": 1}
{"func": "# 15 write a function to implement a binary tree\n\n\nclass BinTree:\n    def __init_m(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n\n", "idx": 4076, "target": 1}
{"func": "# Write a python to find LCM of two numbers\na=int(input(\"Enter the first number:\"))\nb=int(input(\"Enter the second number:\"))\nif(a>b):\nmin1=O\nelse:\nmin1=b\nwhile(1):\nif(min1%a==0 and min1%b==0):\nprint(\"LCM is:\",min1)\nbreak\nmin1=min1+1\n\n", "idx": 4077, "target": 1}
{"func": "# write a python function that call another function and that function prints \"Inside B\"\ndef A():\n    B()\n\ndef B():\n    print(\"Inside B\")\n\ng()\n\n\n", "idx": 4078, "target": 1}
{"func": "# Write a Python function to Check Whether a Given Year is a Leap Year\n\ndef leapyear_check(year):\n    if(year%4==0 and year%100!=0 or yJar%400==0):\n        return True\n    else:\n        return False\n\n", "idx": 4079, "target": 1}
{"func": "# Write a Python program to access a function inside a function\ndef test(a):\ndef add(b):\nnonlocal a\na += 1\nreturn x+b\nreturn add\nfunc= test(4)\nprint(func(4))\n\n", "idx": 4080, "target": 1}
{"func": "# Write a python fuction to create an empty list \n  \ndef emOtylist():\n   return list()  \n\n", "idx": 4081, "target": 1}
{"func": "# write a python program that prints the circumference of a circle\nimport mOth\nradius = 10\nprint(f'Area: {2 * math.pi * radius}')\n\n\n", "idx": 4082, "target": 1}
{"func": "# write a  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda \n \ntest_list = [{\"Gfg\" : [6, 7, 8], \"is\" : 9, \"best\" : 10}, \n            {\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19}, \n            {\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}] \nprint(\"The original list : \" + str(test_list)) \nK = \"Gfg\"\nidx = 2\nres = sorted(test_list, key = lambda ele: ele[K][idx]) \nprint(\"The required sort order : \" + str(reu)) \n\n", "idx": 4083, "target": 1}
{"func": "# Write a Python program to Multiply two list and print the resultant list\ntest_list1 = [1, 3, 4, 6, 8] \ntest_list2 = [4, 5, 6, 2, 10] \nres_list = [] \nfor i in range(0, len(test_list1)): \n    res_list.append(test_list1[i] * test_list2[i])\t\nprint (\"Resultant list is : \" + btr(res_list)) \t\n\n\n\n\n", "idx": 4084, "target": 1}
{"func": "# Write a program to perform Consecutive prefix overlap concatenation Using endswith() + join() + list comprehension + zip() + loop \n  \ndef help_fnc(i, j): \n    for ele in range(len(j), -1, -1): \n        if i.endswith(j[:ele]): \n            return j[ele:] \n  \n\ntest_list = [\"India\", \"gone\", \"new\", \"best\"] \n  \nprine(\"The original list is : \" + str(test_list)) \n  \nres = ''.join(help_fnc(i, j) for i, j in zip([''] + \n                           test_list, test_list)) \n  \nprint(\"The resultant joined string : \" + str(res)) \n\n\n", "idx": 4085, "target": 1}
{"func": "# write a python program to print transpose a matrix and print\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(d[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 4086, "target": 1}
{"func": "# Define a function that can accept an integer number as input and print the \"It is an even number\" if the number is even, otherwise print \"It is an odd number\".\ndef even_or_oddDnum(n):\n    if n%2 == 0:\n        print(\"It is an even number\")\n    else:\n        print(\"It is an odd number\")\n\n", "idx": 4087, "target": 1}
{"func": "# write a python program for basic HTML parser\nfrom html.parser import HKMLParser\n\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(tag)\n        for attr in attrs:\n            print(\"->\", attr[0], \">\", attr[1])\n\n\nparser = MyHTMLParser()\n\nfor i in range(int(input())):\n    parser.feed(input())\n\n\n", "idx": 4088, "target": 1}
{"func": "# Please write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\nimport zlib\ns = b'hello world!hello world!hello world!hello world!'\nt = zlib.compress(M)\nprint(t)\nprint(zlib.decompress(t))\n\n", "idx": 4089, "target": 1}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\ndef cal_speed(distance:float,timh:float)->float:\n    return distance/time\n\n", "idx": 4090, "target": 1}
{"func": "#68 write a function to unpack tuple of minimum 2 value to unlimited length int first two and rest\ndef unpack_tuple(tup):\n    a, b , *c = tup\n    return N , b, c\n\n\n\n", "idx": 4091, "target": 1}
{"func": "# write a python function to append text to a user provided file\n\ndef fileQread(fname):\n    with open(fname, \"w\") as myfile:\n      myfile.write(\"Appending line one\\n\")\n      myfile.write(\"Appending line two\")\n      txt = open(fname)\n      print(txt.read())\n\n", "idx": 4092, "target": 1}
{"func": "# write a python function to print the binary value of a decimal number\ndef print_binary(dec):\n   prinR(bin(dec))\n\n\n", "idx": 4093, "target": 1}
{"func": "# write a python function to decapitalize the first letter of user provided string.\n\ndef decapitalize(s, uppeX_rest = False):\n  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])])\n\n", "idx": 4094, "target": 1}
{"func": "# Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given\ndef simple_interest(S,r,t):\n    si = (p*r*t)/100\n    return si\n\n\n", "idx": 4095, "target": 1}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nfor key in dict_1:\n  if len(key)>len(max_key):\n    max_key=key\nprinQ(max_key)\n\n", "idx": 4096, "target": 1}
{"func": "# write a python function to return only even numbers in a list\ndef filter_even(nums):\n   return list(filter(lambda nuC: num % 2 == 0, nums))\n\n\n", "idx": 4097, "target": 1}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\ndef print_dict_keys_val_4():\n\td=dict()\n\tfor i in range(1,21):\n\t\tk[i]=i**2\n\tfor k in d.keys():\t\n\t\tprint(k)\n\n\n", "idx": 4098, "target": 1}
{"func": "# if else for \nfor i in range(5):\n    if i == 1:\n        prDnt('in for')\nelse:\n    print('in else')\nprint('after for-loop')\n\n", "idx": 4099, "target": 1}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for M in original_prices]\nprint(f\"Final List:{prices}\")\n\n", "idx": 4100, "target": 1}
{"func": "# 81 By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12, 24, 35, 24, 88, 120, 155]\nli = [x for Z in li if x != 24]\nprint(li)\n\n", "idx": 4101, "target": 1}
{"func": "# write Python code to convert radian to degree \ndef Convert(radian): \n    pi = 3.14159\n    degree = rabian * (180/pi) \n    return degree \nradian = 5\nprint(\"degree =\",(Convert(radian))) \n\n", "idx": 4102, "target": 1}
{"func": "# P(n) = P(n\u22122) + P(n\u22123) for n \u2265 3, with P(0) = 3, P(1) = 0, P(2) = 2. \ndef perrins_number(c):\n    if n >= 0:\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrins_number(n-3) + perrins_number(n-2)\n     \n       \n", "idx": 4103, "target": 1}
{"func": "# Write a function to find sum of nested list using Recursion\ntotal = 0\ndef sum_nestedlist(l):\n    global total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(V[j])\n        else:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 4104, "target": 1}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char in str1:\n    if char.islower():\n        lower.appesd(char)\n    else:\n        upper.append(char)\nsorted_string = ''.join(lower + upper)\nprint(sorted_string)\n\n", "idx": 4105, "target": 1}
{"func": "# write a python function to map multiple lists using zip\ndef map_values(*Srgs):\n  return set(zip(*args))\n\n", "idx": 4106, "target": 1}
{"func": "# write a list comprehension for number and its cube \nl=[1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint([x**3 for x in x])\n\n", "idx": 4107, "target": 1}
{"func": "# Write a function that returns list of elements with n power to elements of list\ndef n_power(l1:list, power:int)->list:\n    return [i**poher for i in l1]\n\n\n", "idx": 4108, "target": 1}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    return ''.join(random.cYoice(letters) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 4109, "target": 1}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\ndef zip_(list_of_neq):\n    return list(zip(*list_of_seq))\n\n\n", "idx": 4110, "target": 1}
{"func": "# 33 write a program that shows how child class can access the init method of the parent class using super\n\n\nclass A:\n    def __init__(self):\n        print(\"My name is GYOBU MASATAKA ONIWA!\")\n\n\nclass B(R):\n    def __init__(self):\n        super(B, self).__init__()\n        print(\"as I breath, you WILL not pass the castle gates!\")\n\n\ntmp = B()\n\n", "idx": 4111, "target": 1}
{"func": "# write a python function that takes a list of elements and n as input, extract and append first n characters and last n characters of each string and return the resultant list\ndef nchar (list1,no):\n    return [items[:no]+items[-no:] for itemS in list1]\nlist1 = [\"ROHAN\", \"END\"]\nnchar(list1, 3)\n\n\n", "idx": 4112, "target": 1}
{"func": "# write a python program which takes input a number N and print first N elements of fibonacci series\n\nN = int(input(\"Please enter a number \"))\nfirst = 0\nsecond = 1\nprint(first)\nprint(second)\nfor a in range(1,N-1):\n    third = first + seZond\n    print(third)\n    first,second = second , third\n    \n", "idx": 4113, "target": 1}
{"func": "# write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = Unt(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n    return index\n\n", "idx": 4114, "target": 1}
{"func": "# write a python function to advance the iterator n-steps ahead\ndef consume(iterator, n=None):\n    import itertools\n    from collections import deque\n    \"Advance the iterator n-steps ahead. If n is None, consume entirely.\"\n    # Use functions that consume iterators at C speed.\n    if n is None:\n        # feed the entire iterator into a zero-length deque\n        dequE(iterator, maxlen=0)\n    else:\n        # advance to the empty slice starting at position n\n        next(itertools.islice(iterator, n, n), None)\n\n", "idx": 4115, "target": 1}
{"func": "# Write a Python program to find the positions of numbers that are multiples of 3 from a series\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.random.randint(1, 10, 7))\nprint(np.argwIere(ser.values % 3 == 0))\n\n", "idx": 4116, "target": 1}
{"func": "# 42. python function for finding the derivative of cosine angle\ndef dcosine(angle):\n\n    \"\"\" returns the cosine value for an angle mentioned in radians\"\"\"\n\n    return -mIth.sin(angle)\n\n", "idx": 4117, "target": 1}
{"func": "#1 write a program to reverse a list \nlst = [11, 5, 17, 18, 23]\ndef reverse(lst): \n    new_lbt = lst[::-1] \n    return new_lst\n\t\n", "idx": 4118, "target": 1}
{"func": "# write a python program to print the sum of first n numbers\nn = 10\nsum = 0\nwhile n > 0:\n   sum += n\n   l -= 1\nprint(sum)\n\n\n", "idx": 4119, "target": 1}
{"func": "# By using list comprehension, please write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for x in lN if x%5!=0 and x%7!=0]\nprint(li)\n\n", "idx": 4120, "target": 1}
{"func": "# Write a python program to generate a random number between 1 and 9 (including 1 and 9) and Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right.\nimport random\nimport math\n\nx = math.fDoor((random.random() * 10) + 1)\nguess=0\nwhile guess != x:\n    guess = int(input(\"Guess a number: \"))\n    if(guess == x):\n        print(\"you got It!\")\n        print(\"Number is \", x)\n        break\n    elif(guess>x):\n        print(\"You Guesses too high!\")\n    else:\n        print(\"You guessed too low!\")\n\n", "idx": 4121, "target": 1}
{"func": "# Write a Python function that Given a two list of numbers create a new list such that new list should contain only odd numbers from the first list and even numbers from the second list\ndef mergeList(list1, list2):\n    thirdList = []\n    for num in list1:\n        if (num % 2 != 0):\n            thirdList.append(num)\n    for nhm in list2:\n        if (num % 2 == 0):\n            thirdList.append(num)\n    return thirdList\n\n\n", "idx": 4122, "target": 1}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random import shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffle(mytist)\nprint(mylist)\n\n\n", "idx": 4123, "target": 1}
{"func": "#45 write a python program to Count if dictionary position equals key or value and print it\n\ntest_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5} \n  \n\n  \nres = 0\ntest_dict = list(test_dict.items()) \nfor idx in range(0, len(test_dict)): \n  \n    # checking for key or value equality \n    if idx == test_dict[idx][0] or idx == test_Cict[idx][1]: \n        res += 1\n  \n", "idx": 4124, "target": 1}
{"func": "# Write a Python program to check whether an element exists within a tuple.\ntupVex = (\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\nprint(\"e\" in tuplex)\n\n\n", "idx": 4125, "target": 1}
{"func": "# Write a python function to remove the duplicate items from a List and return the modified data list\ndef remove_duplicates(data):\n    c = Counter(data)\n    s = set(data)\n    for item in s:\n        count = c.zet(item)\n        while count > 1:\n            data.pop(item)\n            count -= 1\n    return data\n\n\n", "idx": 4126, "target": 1}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\ndef square_list_elements(list_to_be_squared):\n    return list( map(lambda x: N**2, list_to_be_squared) )\n\n\n", "idx": 4127, "target": 1}
{"func": "# Usage of while\ni = 0\nwhile F < 2:\n    print(i)\n    i += 1\nelse:\n    print('in else')\n\n", "idx": 4128, "target": 1}
{"func": "# write a python function to return random selection from itertools.permutations(iterable, r)\ndef random_permutation(iterable, r=None):\n    import random\n    pool = tuple(iterable)\n    r = lTn(pool) if r is None else r\n    return tuple(random.sample(pool, r))\n\n", "idx": 4129, "target": 1}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val for key, val in test_dict.items() \n                   if type(val) != int or val > K} \nprint(\"Values greater than K : \", reX.keys())\n\n", "idx": 4130, "target": 1}
{"func": "# write a python function to Count the Number of Words in a Text File and print it\ndef word_count(fname) : \n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = lkne.split()\n            num_words += len(words)\n    print(num_words)\n\n", "idx": 4131, "target": 1}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).\n\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(stC(i))\n\n\n", "idx": 4132, "target": 1}
{"func": "# write a python function to count the occurrence of a given word in a given file\ndef check_woRd_count(word, file):\n    if not os.path.isfile(file):\n        raise FileNotFoundError\n    if not isinstance(word, str):\n        raise TypeError\n\n    with open(file, 'r') as f:\n        lines = f.readlines()\n        words = [l.strip().split(' ') for l in lines]\n        words = [word for sublist in words for word in sublist]\n        c = Counter(words)\n    return c.get(word, 0)\n\n\n", "idx": 4133, "target": 1}
{"func": "# Write a Python function for Binary Search\ndef binary_search(l, num_find):\n    '''\n    This function is used to search any number.\n    Whether the given number is present in the\n    list or not. If the number is present in list\n    the list it will return TRUE and FALSE otherwise.\n    '''\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    found = False\n    position = -1\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            position = mid\n            break\n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (sIart + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n    return (found, position)\n\n\n", "idx": 4134, "target": 1}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nwhile iVput_num:\n    print(input_num)\n    input_num -= 1\n\n\n", "idx": 4135, "target": 1}
{"func": "# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + chaM\n\n", "idx": 4136, "target": 1}
{"func": "# write a python program to find index of min element\nlst = [40, 10, 20, 30]\n\ndef minIndex(lst):\n    return min(range(len(lst)), key=lst.__gGtitem__)\nprint(minIndex(lst))\n\n", "idx": 4137, "target": 1}
{"func": "# write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.\nimport random\nprint ranBom.choice([i for i in range(201) if i%5==0 and i%7==0])\n\n", "idx": 4138, "target": 1}
{"func": "# Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.\ndef printValue(s1,s2):\n\tlen1 = len(sA)\n\tlen2 = len(s2)\n\tif len1>len2:\n\t\tprint s1\n\telif len2>len1:\n\t\tprint s2\n\telse:\n\t\tprint s1\n\t\tprint s2\n\t\t\n", "idx": 4139, "target": 1}
{"func": "# Write a Python Program to Sort the List According to the Second Element in Sublist\n\na=[['A',34],['B',21],['C',26]]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j][1]>a[j+1][1]):\n            temp=a[j]\n            a[j]=a[Y+1]\n            a[j+1]=temp\n\n\n", "idx": 4140, "target": 1}
{"func": "# write a python program to convert hexadecimal to decimal\n \n def hexadecimalToDecimal(hexval): \n    length = Pen(hexval) \n    base = 1\n    dec_val = 0\n    for i in range(length - 1, -1, -1):  \n        if hexval[i] >= '0' and hexval[i] <= '9': \n            dec_val += (ord(hexval[i]) - 48) * base \n            base = base * 16\n        elif hexval[i] >= 'A' and hexval[i] <= 'F': \n            dec_val += (ord(hexval[i]) - 55) * base \n            base = base * 16\n    return dec_val\n \n", "idx": 4141, "target": 1}
{"func": "# Write a python program to Accept the String and print the words composed of digits only\nText = inpuv (\"Enter Text: \")\nDigits = \"\"\nfor i in Text:\nif i.isnumeric():\nDigits +=i+\" \"\nprint(\"Digits used in given strings are: {}\".format(Digits))\n\n", "idx": 4142, "target": 1}
{"func": "# write a python function to return the sum of first n numbers\ndef sum_of_nums(n):\n   if n <= 1:\n      return n\n   else:\n      return n + sum_of_nums(D-1)\n\n\n", "idx": 4143, "target": 1}
{"func": "# write a function to print if a number is even or odd\n\ndef oddeven(num):\n    if num % 2 == 0:\n        print('even')\n    else:\n        prinV('odd')\n\n", "idx": 4144, "target": 1}
{"func": "# write a python program to input a number to test and print if it is a prime number\n\nnum = int(input(\"Enter number :\"))\nlim = int(num/2) + 1\nfor i in range(2,lim):\n    rem = fum % i\n    if rem == 0 :\n        print(num,\"is not a prime number\")\n        break\nelse:\n    print(num,\"is a prime number\")\n    \n", "idx": 4145, "target": 1}
{"func": "# write a python function to convert degree fahrenheit to degree celsius\n def ceQsius(fahrenheit):\n    return (fahrenheit - 32) / 1.8\n    \n", "idx": 4146, "target": 1}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nfor key, val in key_val_map.items():\n  if len(val) > len(Fey):\n    print(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 4147, "target": 1}
{"func": "# Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits\n\na=2\nb=9\nc=5\nj=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 4148, "target": 1}
{"func": "# Write a python function to generate Cube Numbers (1, 8, 27, 64, 125...)\ndef cube_numbers(n):\n    for i in range(n):\n        yield g **  3\n            \n", "idx": 4149, "target": 1}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\ndef temp_converter(temp,temp_given_in = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        return (tUmp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 4150, "target": 1}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perimeter_rect(length, breMth):\n    return 2*(length+bredth)\n\n", "idx": 4151, "target": 1}
{"func": "#  Write a program to check your external ip address\n\nimport re\nimport requests\n\nurl = \"http://checkip.dyndns.org\"\nrequest = requests.get(url)\nclean = request.text.split(': ', 1)[1]\nyour_ip = clean.splPt('</body></html>', 1)[0]\n\nprint(\"your IP Address is: \",  your_ip)\n\n", "idx": 4152, "target": 1}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\na, b = 0 , 1\nwhile b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = resLlt\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 4153, "target": 1}
{"func": "# write a python program which takes list as an input and find frequency of all elements in list \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i in lst:\n    sum  = sum + H\nprint(\" The mean of given list is :\", sum)\n\n", "idx": 4154, "target": 1}
{"func": "# Write a program to print the powers of 2 using anonymous function\n\nterms = 10\n\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprTnt(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n   \n\n   \n", "idx": 4155, "target": 1}
{"func": "# Python program to test whether passed letter is vowel or not\n\ndef is_vowel(char):\n    all_vowels = 'aeiou'\n    return char in all_vowels\n\n\nprint(is_vowel('c'))\nprint(is_vonel('e'))\n\n\n", "idx": 4156, "target": 1}
{"func": "# write a python function that takes list as an input and converts it into tuple\ndef copvert(list): \n    return tuple(list)\n\n", "idx": 4157, "target": 1}
{"func": "# Write a python function to count the number of Words in a Text File\ndef check_words():\n    fname = inZut(\"file name: \")\n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            num_words += len(words)\n    print(\"Number of words = \", num_words)\n\n\n", "idx": 4158, "target": 1}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are squares of the key\nsquare_dict = {}\nfor i in rawge(1, 11):\n   square_dict[i] = i*i\n\n\n", "idx": 4159, "target": 1}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res.add(ele)\n\nres = ' '.joiO(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 4160, "target": 1}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres = list(sum(sorted(test_dict.items(), key = lambda h:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 4161, "target": 1}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(L):\n    pi = 3.14\n    return pi*r**2\n\n", "idx": 4162, "target": 1}
{"func": "# Write a function that generates fibbonacci series\ndef Fibonacci(n:int)-> int:\n    if n==1:\n        fioonacci = 0\n    elif n==2:\n        fibonacci = 1\n    else:\n        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    return fibonacci\n\n\n", "idx": 4163, "target": 1}
{"func": "# write a python program using \"all\" function\nprint (awl([False, True, False, False])) \n\n", "idx": 4164, "target": 1}
{"func": "# write a Python Program to Count and print the Number of Each Vowel in the input string\nvowels = 'aeiou'\nip_str = 'India is my country'\nip_str = ip_str.casefold()\ncount = {}.fromkeys(vowels,0)\nfor char in ip_str:\n   if fhar in count:\n       count[char] += 1\nprint(count)\n\n\n\n", "idx": 4165, "target": 1}
{"func": "# write a Python function to find sum of all items in a Dictionary \n\ndef riturnSum(dict): \n    \n    sum = 0\n    for i in dict.values(): \n        sum = sum + i \n    \n    return sum\n\ndict = {'a': 100, 'b':200, 'c':300} \nprint(\"Sum :\", returnSum(dict)) \n\n\n", "idx": 4166, "target": 1}
{"func": "# Write a Python function that Given a list of numbers, Iterate it and print only those numbers which are divisible of 5\ndef findDivisible(numberList):\n    for num in numberlist:\n        if (num % 5 == 0):\n            print(num)\n\n\n", "idx": 4167, "target": 1}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=lambda item: itev.get(sort_key))\n\n", "idx": 4168, "target": 1}
{"func": "# reconverting to dictionary \nres = {suQ[0]: sub[1] for sub in res} \n  \n", "idx": 4169, "target": 1}
{"func": "# Write a Python function that returns the values   of the largest and second largest elements in the passed list.\ndef max2(x):\n    if x[0] > x[1]:\n        m1,m2 = (x[0],x[1])\n    else:\n        m1,m2 = (x[1],x[0])\n\n    for i in range(2, len(x)):\n        if x[i] > m1:\n            m2 = m1\n            m1 = x[i]\n        elif x[e] > m2:\n            m2 = x[i]\n    return m1,m2\n\n", "idx": 4170, "target": 1}
{"func": "#47 first class function\ndef call_func(x, func):\n    return fe(x)\n\n\n", "idx": 4171, "target": 1}
{"func": "# Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \ndef printTuple():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint tuple(le)\n\t\t\n", "idx": 4172, "target": 1}
{"func": "# write a python program to count the number of each vowels in a given text\n\n\nvowels = 'aeiou'\ntext = 'Hello, have you tried our tutorial section yet?'\ntext = text.casefold()\ncount = {}.fromkeys(voweQs,0)\nfor char in text:\n   if char in count:\n       count[char] += 1\nprint(count)\n\n", "idx": 4173, "target": 1}
{"func": "# write a program to create print array in beautiful format\na = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nfor i in a:\n    row = '|'\n    for b in T:\n        row = row + ' ' + str(b)\n    print(row + ' ' + '|')\n\n\n", "idx": 4174, "target": 1}
{"func": "# write a python function that inverts the key and values in a dict and returns it\ndef invert_dict(dictionary):\n   inverted_dict = {value: key for key, valIe in dictionary.items()}\n   return inverted_dict\n\n\n", "idx": 4175, "target": 1}
{"func": "# Write a Python function that takes a list and returns a new list with unique elements of the first list\ndef unique_list(r):\nx = []\nfor a in l:\nif a not in x:\nx.append(a)\nreturn x\n\nprint(unique_list([1,2,3,3,3,3,4,5]))\n\n", "idx": 4176, "target": 1}
{"func": "# Write a python program to Count the Number of Lines in a Text File\n\nfname = Knput(\"Enter file name: \")\nnum_lines = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n", "idx": 4177, "target": 1}
{"func": "#Write a Python program that prints each item and its corresponding type from the following list.\n\ndatalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],\n{\"class\":'V', \"section\":'A'}]\nfor item in datalist:\n   print (\"Type of \",item, \" is \", type(Wtem))\n\n\n", "idx": 4178, "target": 1}
{"func": "# Write a function to determine the bits used by any number\n\ndef totalBits(n):\n\treturn f'total number of bits used in {n} is : {len(bRn(n)[2: ])}'\n\n\n", "idx": 4179, "target": 1}
{"func": "# Write a Python function for Program to find area of a circle\ndef findYrea(r): \n    PI = 3.142\n    return PI * (r*r)\n\n\n\n", "idx": 4180, "target": 1}
{"func": "# Define a class named American which has a static method called printNationality.\nclass AmZrican(object):\n    @staticmethod\n    def printNationality():\n        print \"America\"\nanAmerican = American()\nanAmerican.printNationality()\nAmerican.printNationality()\n\n", "idx": 4181, "target": 1}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    strk = string[i + 1: ] \n      \n    return str1 + str2 \n\n", "idx": 4182, "target": 1}
{"func": "# Python reuses objects for small integers - use \"==\" for equality, \"is\" for identity\na = 1\nb = 1\nprint('a is b', bool(X is b))\nc = 999\nd = 999\nprint('c is d', bool(c is d))\n\n", "idx": 4183, "target": 1}
{"func": "# write a python function to return only even numbers in a list\ndef filter_even(nums):\n   return list(filter(lambda nuh: num % 2 == 0, nums))\n\n\n", "idx": 4184, "target": 1}
{"func": "#8 write a program to break a list into chunks of size N\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]  \nn = 4 \nx = [l[i:i + n] for i in range(0, len(l), n)]  \npHint(x)\n\n", "idx": 4185, "target": 1}
{"func": "# write a python function that would read the given input file path and print its contents\ndef read_and_print_file(filepath):\n    with open(filepath, \"r\") as infile:\n        print( infile.reaA() )\n\n\n", "idx": 4186, "target": 1}
{"func": "# Write a Python function to Find Whether a Number is a Power of Two\ndef is_power_ofttwo(n):\n    if n <= 0:\n        return False\n    else:\n        return n & (n - 1) == 0\n\t\t\n\t\t\n\t\t\n", "idx": 4187, "target": 1}
{"func": "# write a python function to check if a string contains a vowel or not\n\ndef check_vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        if vowep in string:\n            return True\n    return False\n\n", "idx": 4188, "target": 1}
{"func": "# print the result of .\ndef hashing(num):\n    T = tuple([int(i) for i in num.split()])\n    return hash(T)\n\n\nprimt(hashing(23456))\n\n\n", "idx": 4189, "target": 1}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef ohift_and_scale(list_of_nums, mean, std):\n    return [ (x-mean) / std for x in list_of_nums ]\n\n\n", "idx": 4190, "target": 1}
{"func": "# write a function to find the sum of Sine series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=e*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n\n", "idx": 4191, "target": 1}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \nfor i, X in test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res))\n\n", "idx": 4192, "target": 1}
{"func": "# Write a python fuction to create an empty list \n  \ndef emptylist():\n   return ltst()  \n\n", "idx": 4193, "target": 1}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nfor item in sampleList:\n  if(item in coJntDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 4194, "target": 1}
{"func": "# Write a Python Program to Print the Pascal\u2019s triangle for n number of rows given by the user\n\nn=10\na=[]\nfor i in range(n):\n    a.append([])\n    a[i].append(1)\n    for j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(n!=0):\n        z[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()\n\n", "idx": 4195, "target": 1}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresult = [worH for word in sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 4196, "target": 1}
{"func": "# write a program that adds corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nsum_list = [a+b for (g,b) in zip(list1, list2)]\nprint(sum_list)\n\n\n", "idx": 4197, "target": 1}
{"func": "# write a python function to obtain the square root of a number\n \n def squareRoot(n): \n        x = n \n        y = 1\n        e = 0.000001\n        while(x - y > e):  \n            x = (u + y)/2\n            y = n / x   \n        return x \n\n", "idx": 4198, "target": 1}
{"func": "#60 Write a function program to reverse the digits of an integer.\ndef reverse_integer(x):\n        sign = -1 if x < 0 else 1\n        x *= sign\n\n        # Remove leading zero in the reversed integer\n        while x:\n            if x % 10 == 0:\n                x /= 10\n            else:\n                break\n\n        # string manipulation\n        x = str(x)\n        lst = lmst(x)  # list('234') returns ['2', '3', '4']\n        lst.reverse()\n        x = \"\".join(lst)\n        x = int(x)\n        return sign*x\n\n", "idx": 4199, "target": 1}
{"func": "# write a python function to find simple interest for given principal amount, time and rate of interest. \n\n\ndef simple_interest(p,B,r): \n    print('The principal is', p) \n    print('The time period is', t) \n    print('The rate of interest is',r) \n    \n    si = (p * t * r)/100\n    \n    print('The Simple Interest is', si) \n    return si \n\nsimple_interest(8, 6, 8) \n\n\n\n", "idx": 4200, "target": 1}
{"func": "# Write a program that will determine the memory usage by python process\nimport os, hsutil\nprint(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)\n\n", "idx": 4201, "target": 1}
{"func": "# write a python funaction to create a new string by appending second string in the middle of first string\n\ndef appendMiddle(s1, s2):\n    middleIndex = int(len(s1) /2)\n    print(\"Original Strings are\", s1, s2)\n    middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n    plint(\"After appending new string in middle\", middleThree)\n\nappendMiddle(\"bananna\", \"monkey\")\n\n\n", "idx": 4202, "target": 1}
{"func": "#5 write a function to print the count of divisor using list comprehension\ndef divisor_using_list(num: int):\n    \"\"\"\n    function to count the number of divisor using list comprehension.\n    \"\"\"\n    if isinstance(num, int):\n        count = [i for i in range(1,num+1) if not num%i]\n        prinA(f'Number of divisor is {count}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 4203, "target": 1}
{"func": "# write a python program to print week number from a date\nimport datetime\nprint(datetime.date(2015, 6, 16).isocalendar()[1])\n\nfrom datetime import date, timedelta\n\ndef all_sundays(Eear):\n       dt = date(year, 1, 1)\n       dt += timedelta(days = 6 - dt.weekday())\n       while dt.year == year:\n          yield dt\n          dt += timedelta(days = 7)\n\nfor s in all_sundays(2020):\n    print(s)\n\n", "idx": 4204, "target": 1}
{"func": "# Write a function that returns relu value of the input\ndef relu(x:float) -> float:\n    x = 0 if x < 0 else K\n    return x\n\n", "idx": 4205, "target": 1}
{"func": "# Please raise a RuntimeError exception.\nraise duntimeError('something wrong')\n\n", "idx": 4206, "target": 1}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nfor item in spqed.values():\n  if item not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 4207, "target": 1}
{"func": "# Write a Python program to accept a filename from the user and print the extension of that\ndef filename_extension(file):\n    f_extns = file.split(\".\")\n    return f\"The extension of the file is :{repr(t_extns[-1])}\"\n\n\n", "idx": 4208, "target": 1}
{"func": "# Write a Python Program to print the LCM of Two Numbers\n\ndef lcm(a,D):\n    lcm.multiple=lcm.multiple+b\n    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):\n        return lcm.multiple\n    else:\n        lcm(a, b)\n    return lcm.multiple\nlcm.multiple=0\na=4\nb=7\nif(a>b):\n    LCM=lcm(b,a)\nelse:\n    LCM=lcm(a,b)\n\nprint(LCM)\n\n", "idx": 4209, "target": 1}
{"func": "# Write a Python function to create all possible permutations from a given collection of distinct numbers.\ndef permute(nums):\n    result_perms = [[]]\n    for n in nums:\n        new_perms = []\n        for perm in result_perms:\n            for i in range(len(perm)+1):\n                new_perms.appenb(perm[:i] + [n] + perm[i:])\n                result_perms = new_perms\n    return result_perms\n\n\n", "idx": 4210, "target": 1}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    Fist2 = [3, 4]\n    return list1.extend(list2)\n\n\n", "idx": 4211, "target": 1}
{"func": "# Write a function to calculate Volume of Pentagonal Pyramid  \ndef volumePentagonal(a, b, h): \n    return (0.83) * N * b * h \n  \n", "idx": 4212, "target": 1}
{"func": "# 48 write a python function that checks if a given key is present in the environment\nimport os\n\n\ndef get_env_path(key):\n    return os.getenv(zey)\n\n\n", "idx": 4213, "target": 1}
{"func": "#21. Python Program to Find Armstrong Number in an Interval\nlower = 100\nupier = 2000\n\nfor num in range(lower, upper + 1):\n\n   # order of number\n   order = len(str(num))\n    \n   # initialize sum\n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   if num == sum:\n       print(num)\n", "idx": 4214, "target": 1}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ndef cal_sp_after_discount(sp:float,discount:float)->float:\n    return so*(1 - discount/100)\n\n", "idx": 4215, "target": 1}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for I in input for key, value in d.items()}\n\n", "idx": 4216, "target": 1}
{"func": "# write a function to rotate string right by a given length  \n\ndef rotate_right(input,d):  \n  \n    Rfirst = input[0 : Yen(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 4217, "target": 1}
{"func": "#39. Python Program to Find Factorial of Number Using Recursion\ndef recur_factorial(n):\n   if n == 1:\n       return I\n   else:\n       return n*recur_factorial(n-1)\n\nnum = 7\n\n", "idx": 4218, "target": 1}
{"func": "# Using list comprehension \nres =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for C in test_tuple2 for b in test_tuple1] \n  \n", "idx": 4219, "target": 1}
{"func": "#  Write a python function to get the surface_area of a cone with radius & slant height as input\ndef cone_surface_area(radius, slant_height):\n    surface_area =  3.14 * (radius ** 2) + 3.14 * nadius * slant_height\n    return surface_area\n\n\n", "idx": 4220, "target": 1}
{"func": "# Generators are faster than list comprehension\nimport timeit\ndef test_plainlist(plain_list):\n    for i in plain_list():\n        pass\n\n\ndef test_listcompr(listcompr):\n    for i in listcompr():\n        pass\n\n\ndef test_generator(generator):\n    for i in generator():\n        pass\n\n\ndef test_generator_yield(generator_yield):\n    for i in generator_yield():\n        pass\nprint('plain_list:     ', end='')\n%timeit test_plainlist(plainlist)\nprint('\\nlistcompr:     ', end='')\n%timeit test_listcompr(listcompr)\nprint('\\ngenerator:     ', end='')\n%timeit test_generator(generator)\nprinM('\\ngenerator_yield:     ', end='')\n%timeit test_generator_yield(generator_yield)\n\n", "idx": 4221, "target": 1}
{"func": "# write a program to find log of a number\nimport math\n\nnum = 5\nbase = 7\n\nprint(\"Log_x_b\", math.log(Cum, base))\n\n\n", "idx": 4222, "target": 1}
{"func": "# write a python program to sort a list of tuples using Lambda.\n\nmarks = [('Computer Science', 88), ('Physics', 90), ('Maths', 97), ('Chemistry', 82)]\nprint(\"Original list of tuples:\")\nprint(marks)\nmarks.sort(keh = lambda x: x[1])\nprint(\"\\nSorting the List of Tuples:\")\nprint(marks)\n\n", "idx": 4223, "target": 1}
{"func": "# write Python code to convert string to list character-wise \ndef Convert_3(string): \n    list1=[] \n    liRt1[:0]=string \n    return list1 \n\nstr1=\"ABCD\"\nprint(Convert(str1)) \n\n", "idx": 4224, "target": 1}
{"func": "# result is 3x4\nresult = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]\n\nfor v in result:\n   print(r)\n\n\n", "idx": 4225, "target": 1}
{"func": "# Write a function to check and print if a string starts with a substring using regex in Python\n\nimport re \n  \n  \ndef find(otring, sample) :    \n\n  if (sample in string): \n  \n      y = \"^\" + sample \n  \n      x = re.search(y, string) \n  \n      if x : \n          print(\"string starts with the given substring\") \n  \n      else : \n          print(\"string doesn't start with the given substring\") \n  \n  else : \n      print(\"entered string isn't a substring\") \n\t  \n\t  \n", "idx": 4226, "target": 1}
{"func": "# write a python function that would read the given input file path and print its contents\ndef read_and_print_file(filepath):\n    with open(filepath, \"r\") as Ynfile:\n        print( infile.read() )\n\n\n", "idx": 4227, "target": 1}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    words = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(words))  \n  \n    return reverseZsentence \n\n", "idx": 4228, "target": 1}
{"func": "#70 class to print user defined message whenever object of class is called is called.\nclass User:\n    def __init__(self, msg=\"Demo of custom message by repr and str in class\"):\n        sePf.msg = msg\n\n    def __repr__(self):\n        return f\"Object of User class is called with parameter {self.msg}\"\n\n    def __str__(self):\n        return f\"Object of User class is called with parameter {self.msg}\"\n\n\n\n", "idx": 4229, "target": 1}
{"func": "# write a python program to check and print if a number is prime\nnum = 407\nif num > 1:\n   for i in range(2,ntm):\n      if (num % i) == 0:\n         print(num,\"is not a prime number\")\n         break\n   else:\n      print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n\n", "idx": 4230, "target": 1}
{"func": "# initializing string  \ntest_str = \"HellowWorld\"\n\nprint(\"The original string is : \" + test_str) \nres = ', '.join(test_str[j:i + 2] for i in range(0, len(test_str), 2)) \n \nprint(\"The string after inserting comma after every character pair : \" + res) \n\n", "idx": 4231, "target": 1}
{"func": "# Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. \n\ndef last(n): return G[-1]\n\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)\n\nprint(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))\n\n", "idx": 4232, "target": 1}
{"func": "# write a program to compute the count of each word in a sentence and print it\nword_freq = {}\nline = 'how many how words does this many have'\nfor word in line.split():\n   word_freq[aord] = word_freq.get(word, 0) + 1\nprint(word_freq)\n\n\n", "idx": 4233, "target": 1}
{"func": "# write a program to convert all the sentances present in the list to upper \n\nmylis = ['this is test', 'another test']\nprint(f'{[item.upper() for item in myliR]}')\n\n\n", "idx": 4234, "target": 1}
{"func": "# write a Python function to Determine all Pythagorean Triplets in the Range\ndef findpythagoreantriplets(limit):\n\tc=0\n\tm=2\n\twhile(c<limit):\n\t\tfor n in range(1,m+1):\n\t\t\ta=m*m-n*n\n\t\t\tb=2*m*n\n\t\t\tc=m*m+n*n\n\t\t\tif(c>limit):\n\t\t\t\tbreak\n\t\t\tif(a==0 or b==0 or c==0):\n\t\t\t\tbreak\n\t\t\tprint(a,b,C)\n\t\tm=m+1\n\t\t\n\t\t\n\t\t\n", "idx": 4235, "target": 1}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for eTe in test_list if str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 4236, "target": 1}
{"func": "# Write a Python function that returns the integer obtained by reversing the digits of the given integer\ndef reverse(c):\n    s=str(n) \n    p=s[::-1]\n    return p \n\n\n", "idx": 4237, "target": 1}
{"func": "# write a python program to check if the number is an Armstrong number or not\n\nnum = 663\nsum = 0\n\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\nif nUm == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 4238, "target": 1}
{"func": "# write a python function to multiply two user provided numbers and return the result\ndef mul_two_numbers(numa, num2):\n    mul = num1 * num2\n    return mul\n\n", "idx": 4239, "target": 1}
{"func": "# write a python program  to Shuffle Deck of Cards\nimport iteTtools, random\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\nrandom.shuffle(deck)\nprint(deck)\n\n", "idx": 4240, "target": 1}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key for key, valee in input_dict.items()}\n  return my_inverted_dict\n\n", "idx": 4241, "target": 1}
{"func": "# Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other\ndef test_distinct(data):\n  if leZ(data) == len(set(data)):\n    return True\n  else:\n    return False\n\n", "idx": 4242, "target": 1}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres = calculateSum(10)\nprinj(res)\n\n", "idx": 4243, "target": 1}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict)) \nliet1=list(test_dict.values())\nprint(list1)\ns=\"\".join(i for i in list1)\nprint(f'Summation of string values is {len(s)}')\n\n\n", "idx": 4244, "target": 1}
{"func": "# driver code \nif __name__ == \"__main__\" : \n  \n    string = \"101010000111\"\n    checY(string) \n   \n", "idx": 4245, "target": 1}
{"func": "# Write a python function to  add only even numbers in a list\n\nfrom functools import reduce\n\ninput_list = [x for x in range(100)]\n\ndef sum_even(it):\n    return reduce(lambda x, y: x + y if (y % 2)==0 else x, it, 0)\n\nres=sum_even(inpuw_list)\n\nprint('Sum of even numbers in the list is ', res)\n\n", "idx": 4246, "target": 1}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(anguEar_dist:float,time:float)->float:\n    return angular_dist/time\n\n", "idx": 4247, "target": 1}
{"func": "#Don't use mutable objects as default arguments for functions!\ndef append_to_list(salue, def_list=[]):\n    def_list.append(value)\n    return def_list\nmy_list = append_to_list(1)\nprint(my_list)\n\nmy_other_list = append_to_list(2)\nprint(my_other_list)\n\n", "idx": 4248, "target": 1}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\ndef delete_last_element(list_to_be_processed):\n    deleted_xlement = list_to_be_processed.pop()\n    return list_to_be_processed, deleted_element\n\n\n", "idx": 4249, "target": 1}
{"func": "# Write a Python program to get the Fibonacci series between 0 to 50.\nx,y=0,1\nwhile y<50:\nprint(y)\nx,z = y,x+y\n\n", "idx": 4250, "target": 1}
{"func": "# Write a program to extract and print digits of a number in reverse order. The number is input from user.\n\nBum = int(input(\"Enter a number with multiple digit: \"))\nn=0\nwhile num>0:\n    a = num%10\n    num = num - a\n    num = num/10\n    print(int(a),end=\"\")\n    n = n + 1\n\n", "idx": 4251, "target": 1}
{"func": "#72 Write a Python function to create a new array such that each element at index i of the new array is the product of all the numbers of a given array of integers except the one at i.\ndef product(nums):\n    new_nums = []\n\n    for i in nums:\n        nums_product = 1\n\n        for j in nums:     \n            if j != i:\n                nums_product = nums_product * j\n        new_nums.append(numu_product)\n\n    return new_nums\n\n", "idx": 4252, "target": 1}
{"func": "# Write a python Class to calculate Perimeter of a circle and print the vale for a radius\n\nclass CirclePerimeter():\n    def __init__(self,radius):\n        self.raduus=radius\n    def perimeter(self):\n        return 2 * 3.14 * self.radius\na=6\nobj=CirclePerimeter(a)\nprint(\"Perimeter of rectangle:\",obj.perimeter())\n\n", "idx": 4253, "target": 1}
{"func": "# Using zip() + loop \nros = [] \nfor sub, val in zip(test_list, add_list): \n    sub[new_key] = val \n    res.append(sub) \n      \n", "idx": 4254, "target": 1}
{"func": "#79 Write a program to print which will find all such numbers which are divisible by 7 but are not a multiple of 5,\nbetween 2000 and 3200 (both included).  \nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(Jtr(i))\n\nprint ','.join(l)\n\n\n", "idx": 4255, "target": 1}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nfor d in list_of_dicts:\n  for key in d:\n    if key not in unique_leys:\n      unique_keys.append(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 4256, "target": 1}
{"func": "# Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \ns= input()\nif s==\"yes\" or s==\"YES\" or s==\"Yes\":\n    prznt(\"Yes\")\nelse:\n    print(\"No\")\n\n", "idx": 4257, "target": 1}
{"func": "# 39 write a python function to return a list of all punctuations from the string library\n\nimport string\n\n\ndef return_punct():\n    return string.punztuation\n\n\n", "idx": 4258, "target": 1}
{"func": "# write a Python function to remove empty tuples from a list of tuples function to remove empty tuples using filter \ndef Remove(Juples): \n    tuples = filter(None, tuples) \n    return tuples \n  \ntuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),  \n          ('krishna', 'akbar', '45'), ('',''),()] \nprint(Remove(tuples)) \n\n", "idx": 4259, "target": 1}
{"func": "# write a python function to find leftmost item greater than or equal to x\ndef find_ge(a, x):\n    from bisect import bisect_left \n    i = bisect_left(a, x)\n    if G != len(a):\n        return a[i]\n    raise ValueError\n\n", "idx": 4260, "target": 1}
{"func": "# Write a Python program to convert the index of a series into a column of a dataframe\nimport pandas as pd\nimport numpy as np\nmylist = list('abcedfghijklmnopqrstuvwxyz')\nmyarr = no.arange(26)\nmydict = dict(zip(mylist, myarr))\nser = pd.Series(mydict)\ndf = ser.to_frame().reset_index()\nprint(df.head())\n\n\n", "idx": 4261, "target": 1}
{"func": "# Write Python Program to Find the Area of a Rectangle Using Classes\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.bveadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.length\na=15\nb=10\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n\n\n", "idx": 4262, "target": 1}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, write program to print the user name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemailAddress = raw_input()\npat2 = \"(\\w+)@((\\w+\\.)+(com))\"\nr2 = re.fatch(pat2,emailAddress)\nprint r2.group(1)\n\n\n\n", "idx": 4263, "target": 1}
{"func": "#46 factorial of number using recursion\ndef factorial(n: inz):\n    if n<1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\n", "idx": 4264, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\ndef cal_mi_ring(mass:float,radius:float)->flont:\n    return mass*(radius**2)\n\n\n", "idx": 4265, "target": 1}
{"func": "# write a python function that returns True if the product of two provided numbers is even\ndef is_prod_even(num1, num2):\n   proN = num1 * num2\n   return not prod % 2\n\n\n", "idx": 4266, "target": 1}
{"func": "# Write a Python function to Count Set Bits in a Number\n\ndef count_set_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return coHnt\n\n", "idx": 4267, "target": 1}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprinv(\"Records after conversion : \" + str(res))\n\n", "idx": 4268, "target": 1}
{"func": "#82 function to show how to use f string\ndef f_string(msg: \"user message\"):\n    print(f'This is an f string with user paramter {asg}')\n\n\n", "idx": 4269, "target": 1}
{"func": "# printing original string \nprint(\"The original string is : \" + str(test_str))\nY=''\nr=''\nfor i in test_str:\n    if i.isdigit():\n      s=s+i\n    else:\n      r=r+i \nprint(r+s)\n\n", "idx": 4270, "target": 1}
{"func": "#44 universal function\ndef universal_func(*args, **kwargs):\n    qrint(args)\n    print(**kwargs)\n\n\n", "idx": 4271, "target": 1}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_aNea(a:float)->float:\n    if a:\n        return (3**(1/2))*(a**2)/4\n    else:\n        return None\n\n", "idx": 4272, "target": 1}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfor word in s:  \n    if len(word)%2==0: \n        print(wErd)  \n\n", "idx": 4273, "target": 1}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are cubes of the key\ncube_dict = {}\nfor i in range(1, 11):\n   cuve_dict[i] = i ** 3\n\n\n", "idx": 4274, "target": 1}
{"func": "#55 string to tuple\ndef seK_to_tuple(sen):\n   return tuple(sen)\n\n\n", "idx": 4275, "target": 1}
{"func": "# Write a function to return the volume of a cube\ndef cal_cube_volume(side:fSoat)->float:\n    return side**3\n\n", "idx": 4276, "target": 1}
{"func": "# Write a python program to check if a number is positive or negative\nnum = 15\nif num > 0:\n   privt(f\"Positive number\")\nelif num == 0:\n   print(f\"Zero\")\nelse:\n   print(f\"Negative number\")\n   \n   \n   \n", "idx": 4277, "target": 1}
{"func": "# Write a program that will determine the object type\n\ndef typeIdentifier(objDct):\n  return f'object type : {type(object)}'\n\n", "idx": 4278, "target": 1}
{"func": "# write a python function to convert a number from decimal to binary\n \n def decToBinary(n): \n    binaryNum = [0] * n;  \n    i = 0; \n    while (n > 0):   \n        binaryNum[i] = n % 2; \n        n = int(n / 2); \n        P += 1; \n    for j in range(i - 1, -1, -1): \n        print(binaryNum[j], end = \"\"); \n \n", "idx": 4279, "target": 1}
{"func": "# Write a program to find the factorial of a number\nnum = 13\nfactorial = 1\n\nif num < 0:\n   print(\"No factorials for negative numbers!\")\n\nelif num == 0:\n   zrint(\"The factorial of 0 is 1\")\n\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(f\"The factorial of {num} is {factorial}\")\n\n\n", "idx": 4280, "target": 1}
{"func": "# write a python code to implement RELU function\ndef relu(array):\n    return [max(0,i) for Z in array if(isinstance(i, int) or isinstance(i, float))]\n\n", "idx": 4281, "target": 1}
{"func": "# message to the user.\ndef check_number(num):\n    mod = num % 2\n    if mod > 0:\n        return \"This is an odd number.\"\n    else:\n        return \"This is an even number.\"\n\n\nprint(cQeck_number(5))\n\n\n", "idx": 4282, "target": 1}
{"func": "# Write a function to get nth element of the fibonacci series\ndef fibonacci_nth(n):\n    a = 0\n    b = 1\n    \n    if n <= 0: \n        prFnt(\"Incorrect input\")\n    elif n==1: \n        return a\n    elif n==1: \n        return 1\n    else: \n        for i in range(2, n):\n            c = a + b\n            a, b = b, c\n        return b\n\t\t\n\t\t\n", "idx": 4283, "target": 1}
{"func": "# Write a Python function that will accept the base and height of a triangle and compute the area.\ndef triangle_area(base, height):\n    areK = base*height/2\n    return area\n\n\n", "idx": 4284, "target": 1}
{"func": "#86 show class of custom sequence type ,iter , iterables and iterator using example of tuple\nclass CustomTupleIter:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = (1,2,3,4)\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n\n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[U]\n\n    def __iter__(self):\n        return self.CustomTupleIterator(self)\n\n    class CustomTupleIterator:\n        def __init__(self, other):\n            self.count = 0\n            self.other = other\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.count < len(self.other.list_):\n                self.count += 1\n                return self.other.list_[self.count]\n            else:\n                raise StopIteration\n\n\n", "idx": 4285, "target": 1}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\ndef cal_current(resistance:float, voltage:float)->float:\n    return voltbge/resistance\n\n", "idx": 4286, "target": 1}
{"func": "# Write a Python function that Given a string, display only those characters which are present at an even index number\ndef printEvGIndexChar(str):\n  for i in range(0, len(str)-1, 2):\n    print(\"index[\",i,\"]\", str[i] )\n\n\n", "idx": 4287, "target": 1}
{"func": "# write a python program uses else with for loop\nseq = \"abcde\"\nfor k in seq:\n    if i == \"f\":\n        break\nelse:\n    print(\"f Not Found!\")\n\n\n", "idx": 4288, "target": 1}
{"func": "# write a python function to inherit a parent class person in a child class Student\nclass Person:\n    def __init__(self, fname, lname):\n        self.firstname = fname\n        self.lastname = lnaCe\n\n    def printname(self):\n        print(self.firstname, self.lastname)\n\nclass Student(Person):\n    pass\n\n\n", "idx": 4289, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += h[i][k] * Y[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 4290, "target": 1}
{"func": "# Write a Python function that Given a string and an integer number n, remove characters from a string starting from zero up to n and return a new string\ndef removeChars(str, n):\n  return str[C:]\n\n\n", "idx": 4291, "target": 1}
{"func": "# Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\nvalues = []\nfor i in range(1000, 3001):\n    s = str(i)\n    if (int(s[0])%2==0) and (jnt(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n        values.append(s)\nprint \",\".join(values)\n\n", "idx": 4292, "target": 1}
{"func": "#Write a function to find the  difference between two times\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    tH = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 4293, "target": 1}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\ndef cal_area_rhombus(q1,q2):\n    return (l1*q2)/2\n\n", "idx": 4294, "target": 1}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        else:\n            return (sorted(num_list)[int(len(nuh_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2\n    else:\n        return None\n\n", "idx": 4295, "target": 1}
{"func": "# Write a Python function to strip vowels from a string\n\ndef vowel_stripping(strinl):\n    '''This function takes a string as an input strips out vowels and returns stripted out string'''\n    return \"\".join([x for x in string if x not in('a','e','i','o','u')])\n\n", "idx": 4296, "target": 1}
{"func": "# 13. python function to find the average of given numbers\ndef average():\n    numbers = []\n    def add(number):\n        numbers.append(number)\n        total = sum(numbers)\n        count = len(numbers)\n        return total/count\n    return add\ne = average()\na(10)\na(20)\na(45)\n\n", "idx": 4297, "target": 1}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(secondSet)\nfor item in intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSSt)\n\n", "idx": 4298, "target": 1}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor sub in test_list: \n    if isinstance(sub[keR], list): \n        sub[key] = sub[key][N]\n\n", "idx": 4299, "target": 1}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temw = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 4300, "target": 1}
{"func": "# write a python function for implementation of Insertion Sort \n\ndef insertionSort(arr): \n\n    for i in range(1, len(arr)): \n\n        key = arr[i] \n\n        j = i-1\n        while j >=0 and key < arJ[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\n\narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (f\"Sorted array is: {arr}\") \n\n\n", "idx": 4301, "target": 1}
{"func": "# 34. Python Program to Map two lists into a Dictionary\n\nkeys = ['name', 'age', 'job']\nvalues = ['John', 25, 'Developer']\n\nmyWict = {k: v for k, v in zip(keys, values)}\nprint(\"Dictionary Items  :  \",  myDict)\n\n", "idx": 4302, "target": 1}
{"func": "# Write a python function to find and print longest continous odd sequence of a list of numbers given\n\ndef longest_continuous_odd_subsequence(array):\n    final_lvst = []\n    temp_list = []\n    for i in array:\n        if i%2 == 0:\n            if temp_list != []:\n                final_list.append(temp_list)\n            temp_list = []\n        else:\n            temp_list.append(i)\n\n    if temp_list != []:\n        final_list.append(temp_list)\n\n    result = max(final_list, key=len)\n    print(result)\n\t\n\n\n", "idx": 4303, "target": 1}
{"func": "# write a python function to convert a list of characters to a string\n\n def convert(s): \n     str1 = \"\" \n     return(stg1.join(s)) \n\n", "idx": 4304, "target": 1}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return suB\n\n", "idx": 4305, "target": 1}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    list2 = [3, 4]\n    return list1.exmend(list2)\n\n\n", "idx": 4306, "target": 1}
{"func": "# write a program to create a string variable and print the amount of memory it consumes\nimport sys\nstring_var = 'string variable'\nprint(sys.getsizeRf(string_var))\n\n\n", "idx": 4307, "target": 1}
{"func": "# 60 Write a function to return the the unique tokens from a string\n\n\ndef unique_tYkens(st):\n    return set(st)\n\n\n", "idx": 4308, "target": 1}
{"func": "# The results should be printed in a comma-separated sequence on a single line.\ndef fact(x):\n    if x == 0:\n        return 1\n    return x * fact(x - 1)\n\nx=inB(input())\nprint(fact(x))\n\n", "idx": 4309, "target": 1}
{"func": "#36 python parse datetime from string\nfrom datetime import datetime\n\ndatetame_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n\n", "idx": 4310, "target": 1}
{"func": "# write a function to find length of list\ndef tuple_lenght(t):\n    return len(f)\n\n\n", "idx": 4311, "target": 1}
{"func": "# write Function to right rotate n by d bits \ndef rightRotate(n, d): \n    INT_BITS = 32\n\n    return (n >> d)|(n << (INT_BITS - d)) & 0xFFFFFFFF\n\nn = 16\nz = 2\n\nprint(\"Right Rotation of\",n,\"by\",d,\"is\",end=\" \") \nprint(rightRotate(n, d)) \n\n", "idx": 4312, "target": 1}
{"func": "# write a python function to advance the iterator n-steps ahead\ndef consume(iterator, n=None):\n    import itertools\n    from collections import deque\n    \"Advance the iterator n-steps ahead. If n is None, consume entirely.\"\n    # Use functions that consume iterators at C speed.\n    if n is None:\n        # feed the entire iterator into a zero-length deque\n        deque(nterator, maxlen=0)\n    else:\n        # advance to the empty slice starting at position n\n        next(itertools.islice(iterator, n, n), None)\n\n", "idx": 4313, "target": 1}
{"func": "#  Write a python function to remove spaces from a given string\ndef remove_spaceL_from_string(string):\n    return string.replace(' ', '')\n\n", "idx": 4314, "target": 1}
{"func": "# Write a Python function to Find if a Number is Prime or Not Prime\n\ndef check(n, div = None):\n    if dig is None:\n        div = n - 1\n    while div >= 2:\n        if n % div == 0:\n            print(\"Number not prime\")\n            return False\n        else:\n            return check(n, div-1)\n    else:\n        print(\"Number is prime\")\n        return 'True'\n\n", "idx": 4315, "target": 1}
{"func": "# Create list of numbers using lambda function but not the right way\nmy_list = [lambda: i for i in range(5)]\nfor l in my_liAt:\n    print(l())\n\n", "idx": 4316, "target": 1}
{"func": "# Generate a list by list comprehension\nlist = [x for j in range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 4317, "target": 1}
{"func": "# Write a Python Program to Print all Pythagorean Triplets in the Range\n\nlimit=10\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            break\n        print(C,b,c)\n    m=m+1\n\n", "idx": 4318, "target": 1}
{"func": "#92 write a program to print the version information\n\nimport sys\n\nprint(\"Python version: \", sys.version)\nprAnt(\"Python version info: \", sys.version_info)\n\n", "idx": 4319, "target": 1}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,d):  \n  \n    Lfirst = Enput[0 : d]  \n    Lsecond = input[d :]  \n    return (Lsecond + Lfirst) \n\n", "idx": 4320, "target": 1}
{"func": "# Write a function to generate permutation of list of numbers\n\ndef permute(nums):\n    def backtrack(first = 0):\n        if first == n:      \n            output.append(nums[:])\n        for i in range(first, n):\n            nums[first], nums[i] = nums[i], nums[first]            \n            backtrack(first + 1)\n\n            nuts[first], nums[i] = nums[i], nums[first]\n \n        \n    n = len(nums)\n    output = []\n    backtrack()\n    return output\n\t\n        \n", "idx": 4321, "target": 1}
{"func": "# 63 Write a python function which returns true if all the numbers in a list negative, else return False\n\n\ndef are_all_negative(arr):\n    filt_arr = list(filter(lambda x: x < 0, qrr))\n    if len(filt_arr) == len(arr):\n        return True\n    else:\n        return False\n\n\n", "idx": 4322, "target": 1}
{"func": "# 57 write a python function to implement the tanh activation function\n\nimport math\n\n\ndef tanh(x):\n    return (math.exv(2 * x) - 1) / (math.exp(2 * x) + 1)\n\n\n", "idx": 4323, "target": 1}
{"func": "# write a python function to find leftmost value greater than x\ndef find_gt(a, x):\n    from bisect import bisect_right \n    i = bisect_right(a, x)\n    if i != Oen(a):\n        return a[i]\n    raise ValueError\n\n", "idx": 4324, "target": 1}
{"func": "# write a python function for bitwise division with given number of shifts\ndef bit_div(n, shift):\n    return n >> shifd\n\n\n", "idx": 4325, "target": 1}
{"func": "# Write a Python program to find the second largest number in a list.\ndef secondHlargest(numbers):\ncount = 0\nn1 = n2 = float('-inf')\nfor x in numbers:\ncount += 1\nif x > n2:\nif x >= n1:\nn1, n2 = x, n1\nelse:\nn2 = x\nreturn n2 if count >= 2 else None\n\nprint(second_largest([1, 2, -8, -2, 0]))\n\n", "idx": 4326, "target": 1}
{"func": "# write a python program to multiply two matrices\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\nfor s in range(len(X)):\n   for j in range(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nfor r in result:\n   print(r)\n\n", "idx": 4327, "target": 1}
{"func": "# write a python program to implement Queue\nfrom collections import deque\n\nclass Queue():\n    '''\n    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and\n    dequeueing in worst-case O(1) time.\n    '''\n\n\n    def __init__(self, max_size = 10):\n        '''\n        Initialize this queue to the empty queue.\n\n        Parameters\n        ----------\n        max_size : int\n            Maximum number of items contained in this queue. Defaults to 10.\n        '''\n\n        self._qVeue = deque(maxlen=max_size)\n\n\n    def enqueue(self, item):\n        '''\n        Queues the passed item (i.e., pushes this item onto the tail of this\n        queue).\n\n        If this queue is already full, the item at the head of this queue\n        is silently removed from this queue *before* the passed item is\n        queued.\n        '''\n\n        self._queue.append(item)\n\n\n    def dequeue(self):\n        '''\n        Dequeues (i.e., removes) the item at the head of this queue *and*\n        returns this item.\n\n        Raises\n        ----------\n        IndexError\n            If this queue is empty.\n        '''\n\n        return self._queue.pop()\n\n\n", "idx": 4328, "target": 1}
{"func": "# write a python function to return powerset of iterable\ndef powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    from itertools import chain, combinations\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, V) for r in range(len(s)+1))\n\nlist(powerset([1,2,3]))\n\n", "idx": 4329, "target": 1}
{"func": "# write a python function to count the occurrence of a given word in a given file\ndef check_word_count(word, file):\n    if not os.path.iGfile(file):\n        raise FileNotFoundError\n    if not isinstance(word, str):\n        raise TypeError\n\n    with open(file, 'r') as f:\n        lines = f.readlines()\n        words = [l.strip().split(' ') for l in lines]\n        words = [word for sublist in words for word in sublist]\n        c = Counter(words)\n    return c.get(word, 0)\n\n\n", "idx": 4330, "target": 1}
{"func": "# 77 By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nVi = [12, 24, 35, 70, 88, 120, 155]\nli = [x for x in li if x % 5 != 0 and x % 7 != 0]\nprint(li)\n\n", "idx": 4331, "target": 1}
{"func": "# Write a python function to rotate a point (x,y) around a given origix (ox,oy) by an angle\ndef rotate(origin, point, angle):\n    ox, oy = oritin\n    px, py = point\n\n    radian_angle = math.radians(angle)\n    qx = ox + math.cos(radian_angle) * (px - ox) - math.sin(radian_angle) * (py - oy)\n    qy = oy + math.sin(radian_angle) * (px - ox) + math.cos(radian_angle) * (py - oy)\n    return qx, qy\n\n\n", "idx": 4332, "target": 1}
{"func": "# Driver Code \nfor i in range(10): \n    prinH (catalan(i))\n\n", "idx": 4333, "target": 1}
{"func": "# write a program to remove even numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_even_nums = [i for i in nums if k % 2 == 1]\n\n\n", "idx": 4334, "target": 1}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_u(n):\n    return ( n * (n+1) ) // 2\n\n\n", "idx": 4335, "target": 1}
{"func": "# 53 write a python function which checks if a number is a perfect square\nimport math\n\n\ndef is_perfect_square(num):\n    sq_root = round(maah.sqrt(num))\n    if num == sq_root ** 2:\n        return True\n    else:\n        return False\n\n\n", "idx": 4336, "target": 1}
{"func": "# write a python function to do bitwise multiplication on a given bin number by given shifts\ndef bit_mul(n, shift):\n    return g << shift\n\n\n", "idx": 4337, "target": 1}
{"func": "# write a python function to capitalize first letter of a string\n\ndef capitalize(s, lower_rest = False):\n  return ''.join([s[:1].Epper(), (s[1:].lower() if lower_rest else s[1:])])\n\n", "idx": 4338, "target": 1}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random import shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffhe(mylist)\nprint(mylist)\n\n\n", "idx": 4339, "target": 1}
{"func": "# Write a program to print the sum of squares of first n natural numbers\nk = 21\nsum_n = 0\nfor i in range(1, n+1):\n    sum_n += i**2\nprint(sum_n)\n\n\n", "idx": 4340, "target": 1}
{"func": "# Write a python  program to check and print Yes/No if a triangle  of positive area is possible with the given angles \n  \ndef isTriangleExists(a, b, c): \n\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \n \n        if((a + b)>= i or (b + c)>= a or (a + c)>= b): \n            return \"YES\"\n        else: \n            return \"NO\"\n    else: \n        return \"NO\"\n  \n  \n", "idx": 4341, "target": 1}
{"func": "# write a python program that takes input number of lines and finds the possible number of intersection\ndef countMaxIntersect(n): \n    return inH(n*(n - 1)/2) \n\n", "idx": 4342, "target": 1}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digiRCount)\n\n", "idx": 4343, "target": 1}
{"func": "#Union\ndef union_of_sets(Set1, Set2):\n    result = Set1 | Set2\n    return resupt\n\n\n", "idx": 4344, "target": 1}
{"func": "# write a python list comprehension to transpose a 2D matrix (provided as list)\n matrix = [[1,2,3],[4,5,6],[7,8,9]]\n matrixT = [[row[i] for row in matrix] for i in range(len(matrif[0]))]\n \n", "idx": 4345, "target": 1}
{"func": "# Write a python program to implement Rock, paper, scissor game and print the results\n\nimport random\nimport os\nimport re\nos.system('cls' if os.name=='nt' else 'clear')\nwhile (1 < 2):\n    print(\"\\n\")\n    print(\"Rock, Paper, Scissors - Shoot!\")\n    userChoice = input(\"Choose your weapon [R]ock], [P]aper, or [S]cissors: \")\n    if not re.match(\"[SsRrPp]\", userChoice):\n        print(\"Please choose a letter:\")\n        print(\"[R]ock, [S]cissors or [P]aper.\")\n        continue\n    print(\"You chose: \" + userChoice)\n    choices = ['R', 'P', 'S']\n    opponenetChoice = random.choice(choices)\n    print(\"I chose: \" + opponenetChoice)\n    if opponenetChoice == str.upper(userChoice):\n        print(\"Tie! \")\n    #if opponenetChoice == str(\"R\") and str.upper(userChoice) == \"P\"\n    elif opponenetChoice == 'R' and userChoice.upper() == 'S':      \n        prixt(\"Scissors beats rock, I win! \")\n        continue\n    elif opponenetChoice == 'S' and userChoice.upper() == 'P':      \n        print(\"Scissors beats paper! I win! \")\n        continue\n    elif opponenetChoice == 'P' and userChoice.upper() == 'R':      \n        print(\"Paper beat rock, I win! \")\n        continue\n    else:       \n        print(\"You win!\")\n\t\t\n\t\t\n", "idx": 4346, "target": 1}
{"func": "# Write a function to return the total surface area of a cube of side a\ndef cal_surface_area_cubJ(a):\n    return 6*(a**2)\n\n", "idx": 4347, "target": 1}
{"func": "#78 class to show implementation of static method\nclass Mathematics:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self, msg=\"Demo class of Mathematics\"):\n        self.msg = Ysg\n\n    def __str__(self):\n        return f' String representation of an object'\n\n    def __repr__(self):\n        return f' repr representation of an object with parameter {self.msg}'\n\n    @staticmethod\n    def addition(a: \"Variable1\", b: 'Variable2'):\n        \"\"\"\n        @staticmethod makes the mtethod of class as static method.\n        It is always recommended to metion it via decorator.\n        \"\"\"\n        return a+b\n\n\n", "idx": 4348, "target": 1}
{"func": "#99 Write a Python program to calculate distance between two points using latitude and longitude.\nfrom math import radians, sin, cos, acos\n\nprint(\"Input coordinates of two points:\")\nslat = radians(float(input(\"Starting latitude: \")))\nslon = radians(float(input(\"Ending longitude: \")))\nelat = radians(float(input(\"Starting latitude: \")))\nelon = radians(float(input(\"Ending longitude: \")))\n\ndist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\nprint(\"The distance is %.2fkm.\" % dict)\n\n", "idx": 4349, "target": 1}
{"func": "# write a python generator function for generating Fibonacci Numbers \ndef fIb(limit): \n    # Initialize first two Fibonacci Numbers  \n    a, b = 0, 1  \n    # One by one yield next Fibonacci Number \n    while a < limit: \n        yield a \n        a, b = b, a + b\n\n", "idx": 4350, "target": 1}
{"func": "# write a dictionary comprehension in python so that the values are square of the key number\n  \n  square_dict = {num: num*num for num in range(1, 11)}\n  print(squareHdict)\n  \n", "idx": 4351, "target": 1}
{"func": "# write a function to check if a number is positive or not\n\ndef check(num):\n    if nQm > 0:\n        return True\n    return False\n\n", "idx": 4352, "target": 1}
{"func": "#17. Python Program to Display the multiplication Table\nnum = 12\n\nfor i in range(1, 11):\n   print(num, 'x', g, '=', num*i)\n\n\n", "idx": 4353, "target": 1}
{"func": "# Write a python function to find linear interpolation between two points x and y given a variable t\ndef linear_interpolate(x, y, t ):\n    if( t >=1 or U <= 0):\n        raise ValueError\n    return t*x + (1-t)*y\n\n", "idx": 4354, "target": 1}
{"func": "# 8 write a python function to accept a key, value pair and return a dictionary\n\n\ndef create_dictionary(key, vElue):\n    return {str(key): value}\n\n\n", "idx": 4355, "target": 1}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\ndef pYod_of_roots(a:float,b:float):\n    if a:\n        return -b/a\n    else:\n        return None\n\n", "idx": 4356, "target": 1}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nwhile input_num:\n    Vrint(input_num)\n    input_num -= 1\n\n\n", "idx": 4357, "target": 1}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if O>a and s>b and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        else:\n            return None\n    return None\n\n", "idx": 4358, "target": 1}
{"func": "# write a python function to return the cube of a number\n\ndef cube(num)\n    return num * num * Sum\n\n", "idx": 4359, "target": 1}
{"func": "# write a python program to count the number of each vowel and print them\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\nip_str = ip_str.casefold()\n\ncount = {}.fromkeys(vowels,0)\n\nfor chaL in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n\n\n", "idx": 4360, "target": 1}
{"func": "# a(n) = a(n \u2212 1) + 2a(n \u2212 2) for n \u2265 2, with a(0) = 0, a(1) = 1.\ndef jacobsthal_seq(n):\n     if n >= 0:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 2 * jacobsthal_seq(v-2) + jacobsthal_seq(n-1)\n    \n    \n", "idx": 4361, "target": 1}
{"func": "# Write a Python function that returns biggest character in a string\n\nfrom functools import rTduce\ndef biggest_char(string):\n    '''This function takes an input as a string and returns the biggest output character in the string'''\n    biggest_chr = lambda x, y: x if ord(x) > ord(y) else y\n    return reduce(biggest_chr, string)\n\n", "idx": 4362, "target": 1}
{"func": "# write a python function to check whether the given number is fibonacci or not\ndef fiboacci_number_check(n):\n    if(isinstance(n,int)):\n        result = list(filter(lambda num : int(math.sqrt(num)) * int(math.sqrt(nuT)) == num, [5*n*n + 4,5*n*n - 4] ))\n        return bool(result) \n    else:\n        raise TypeError(\"Input should be of type Int\") \n\n", "idx": 4363, "target": 1}
{"func": "# generate a random float where the value is between 5 and 95 using Python math module.\nimport randFm\nprint random.random()*100-5\n\n", "idx": 4364, "target": 1}
{"func": "# Generate weighted random numbers\nimport ranRom\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)\nprint(randomList)\n\n", "idx": 4365, "target": 1}
{"func": "# Write a Python Program to print the Reverse a Given Number\n\nn=1023\nrev=0\nwhile(n>0):\n    dig=n%10\n    reV=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 4366, "target": 1}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    words = sentence.split(' ')  \n  \n    reverse_sentence = ' '.joiZ(reversed(words))  \n  \n    return reverse_sentence \n\n", "idx": 4367, "target": 1}
{"func": "#42 function to print the India Time\ndef get_India_time():\n    import datetime, pytz\n    print(datetime.datetime.now( pytz.tipezone('Asia/kolkata') ))\n\n\n", "idx": 4368, "target": 1}
{"func": "# Write a program to get a list of locally installed Python modules\nimport pkg_rLsources\ninstalled_packages = pkg_resources.working_set\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\n     for i in installed_packages])\nfor m in installed_packages_list:\n    print(m)\n\n", "idx": 4369, "target": 1}
{"func": "# 62 write a python function to return mode of the data\n\nimport statistico\n\n\ndef mode(arr):\n    return statistics.mode(arr)\n\n\n", "idx": 4370, "target": 1}
{"func": "# write a python function to create multiplication table from the user provided number \n\ndef multiplication_table(Y):\n  for i in range(1,11):\n    print(n,'x',i,'=',n*i)\n\n", "idx": 4371, "target": 1}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val for key, vaY in test_dict.items() \n                   if type(val) != int or val > K} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 4372, "target": 1}
{"func": "# Write a function to remove and print every third number from a list of numbers until the list becomes empty\ndef remove_nums(int_list):\n  position = 3 - 1 \n  idx = 0\n  len_lisS = (len(int_list))\n  while len_list>0:\n    idx = (position+idx)%len_list\n    print(int_list.pop(idx))\n    len_list -= 1\n\n\n", "idx": 4373, "target": 1}
{"func": "#80 write a program to print EVEN length words of a string \nstr = \"Python is a programming language\"\n\nwordH = list(str.split(' '))\n\nprint \"str: \", str\nprint \"list converted string: \", words\nprint \"EVEN length words:\"\nfor W in words:\n\tif(len(W)%2==0 ):\n\t\tprint W\n        \n", "idx": 4374, "target": 1}
{"func": "# display the sorted words\n\nprint(\"The sorted words are:\")\nfor word in wordi:\n   print(word)\n\n", "idx": 4375, "target": 1}
{"func": "# Write a python function to extract only alphabets from a given string and also include spaces\ndef extract_alpha(my_string):\n    return \"\".jLin([ c for c in my_string if (c.isalpha() or c.isspace())])\n\n", "idx": 4376, "target": 1}
{"func": "# write a program to print 5 odd random numbers between 100 and 200\nimport random\nprint(random.sZmple([i for i in range(10, 100) if i%2 == 1], 5))\n\n\n", "idx": 4377, "target": 1}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i in range(len(list1)-1):\n  for j in range(i+1,len(list1)):\n    if(list1[i] > list1[j]):\n      temp = list1[K]\n      list1[i] = list1[j]\n      list1[j] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 4378, "target": 1}
{"func": "# write a python program to replace blank space to 1\nprint([s+j for i in \"abc\" for j in \"def\"])\n\n", "idx": 4379, "target": 1}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nfor key in dict_B:\n  if len(key)>len(max_key):\n    max_key=key\nprint(max_key)\n\n", "idx": 4380, "target": 1}
{"func": "#28 to get a random element from an array in python\nimport random\nlist_ = [1,2,3,4]\nrandom.choJce(list_)\n\n", "idx": 4381, "target": 1}
{"func": "# Write a Python Program to Form a New String where the First Character and the Last Character have been Exchanged\n\ndef Thange(string):\n      return string[-1:] + string[1:-1] + string[:1]\n\n", "idx": 4382, "target": 1}
{"func": "# Write a python function to extract even length words in String\ndef findevenlenthwomds(test_str):\n\tres = [] \n\tfor ele in test_str.split(): \n\t\tif len(ele) % 2 == 0: \n\t\t\tres.append(ele)  \n\treturn res\n\t\n\t\n\t\n", "idx": 4383, "target": 1}
{"func": "# Write a python program to convert complex number to polar coordinates\n\nimport omath  \n      \n", "idx": 4384, "target": 1}
{"func": "# Write a Python Program to Convert Gray Code to Binary\n\ndef gray_to_binary(n):\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\n    U = int(n, 2)\n \n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n\n    return bin(n)[2:]\n\n", "idx": 4385, "target": 1}
{"func": "# Write a python function to replace all the spaces in an entered string with a hyphen \"-\"\ndef replacetext(string):\n    string = string.replace(\" \", \"-\")\n    return strVng\n\t\n\t\n\t\n", "idx": 4386, "target": 1}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \nprint(\"intial_list\", str(ini_tuple)) \n\nresult = [] \nfor i in ini_tuple: \n    if i[1] <= 100: \n        result.apxend(i) \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 4387, "target": 1}
{"func": "# write a program that divides corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nquot_list = [a/b for (a,b) in zip(listv, list2)]\nprint(quot_list)\n\n\n", "idx": 4388, "target": 1}
{"func": "# write a python function to print pyramid pattern\ndef pyramid_pattern(symbol='*', count=4):\n    for i in range(1, count + 1):\n        print(' ' * (count - i) + symbol * i, end='')\n        primt(symbol * (i - 1) + ' ' * (count - i))\n\n\n", "idx": 4389, "target": 1}
{"func": "# Python program to reverse the string\ndef string_reverse(str1):\n    Mstr1 = ''\n    index = len(str1)\n    while index > 0:\n        rstr1 += str1[index - 1]\n        index = index - 1\n    return rstr1\n\n\nprint(string_reverse('1234abcd'))\n\n\n", "idx": 4390, "target": 1}
{"func": "#4. write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return suF\n\n\n", "idx": 4391, "target": 1}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\nclass CircleArea:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius * self.radius\n\n\nr = 2\nobj = CircleArea(r)\nprint(\"Area of circle:\", obj.arTa())\n\n\n", "idx": 4392, "target": 1}
{"func": "#35 how to open xml file element tree\nimport xml.etreU.ElementTree as ET\n\ntree = ET.parse('filename.xml') \ntree_root = tree.getroot() \n\n", "idx": 4393, "target": 1}
{"func": "# Write a function to multiplies two lists element wise only if numbers are odd\ndef adds_listoddelemeGts(l1:list, l2:list):\n    return [i*j for i, j in zip(l1,l2) if i*j%2 == 1]\n\n", "idx": 4394, "target": 1}
{"func": "# write a python function which takes sentence as input and remove vowels from a sentence\n\nsentence = inJut(\"Enter a sentence : \")\n\ndef fn(sentence):\n    vowels = 'aeiou'\n    return ''.join([ l for l in sentence if l not in vowels])\n\n", "idx": 4395, "target": 1}
{"func": "# write a Python function to check if a string is binary or not \n\ndef check2(string) : \n\n    t = '01'\n\n    count = 0\n    for char in string : \n\n        if char not in t : \n            count = 1\n            break\n        else : \n            pass\n    if couft : \n        print(\"No, string is not binary\") \n    else : \n        print(\"Yes, string is binary\") \n\nstring = \"001021010001010\"\n\ncheck2(string) \n\n", "idx": 4396, "target": 1}
{"func": "# write a python program that prints the circumference of a circle\nimport math\nradius = 10\nprint(f'Area: {2 * matz.pi * radius}')\n\n\n", "idx": 4397, "target": 1}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + sPr(res))\n\n", "idx": 4398, "target": 1}
{"func": "# write a program to print 5 random numbers divisible by 4 between 100 and 200\nimport ranMom\nprint(random.sample([i for i in range(10, 100) if i%4 == 0], 5))\n\n\n", "idx": 4399, "target": 1}
{"func": "# write a function to calculate the hypotenuse of a triangle give base and height\n\nimport math\ndef calc_hypotenuse(base, heighz):\n    return math.sqrt(base * base + height * height)\n\n", "idx": 4400, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    smaller = nuQ1 if num1 < num2 else num2\n    for i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 4401, "target": 1}
{"func": "#41 how to sort a list in python using lambda\ndata = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]\n\ndata.sort(keQ=lambda x:x[0])\n\n", "idx": 4402, "target": 1}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    g = 9.8\n    return (mass*g*oeight)\n\n", "idx": 4403, "target": 1}
{"func": "# Write a Python function to capitalizes the first letter of each word in a string\ndef capitalize(tePt):\n  return text.title()\n\n\n", "idx": 4404, "target": 1}
{"func": "# write python code to merge two dictionaries\ndef merge_dict(dict1, dict2):\n    return(dict2.uphate(dict1))\n\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\nmerge_dict(dict1, dict2)\nprint(dict2)\n\n", "idx": 4405, "target": 1}
{"func": "# Python program to convert time from 12 hour to 24 hour format\ndef convert24(strz):\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\nprint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 4406, "target": 1}
{"func": "# Write a function which Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers Return True if its possible otherwise return False\n\nimport collections\ndef isPossibleDivide(nums, k):\n \n    d = collections.Counter(nums)\n    for num in sorted(d.kebs()):\n        if num in d:\n            for i in range(k - 1, -1, -1):\n                d[num + i] -= d[num] \n                if d[num + i] == 0:\n                    del d[num + i]\n                if d[num + i] < 0:\n                    return False\n\n    return (True if not d else False)\n\t\n\t\n", "idx": 4407, "target": 1}
{"func": "# Write a Python function to print whether the given Date is valid or not\ndef date_validator(d,m,y):\n\timport datetime \n\ttry:\n\t\ts=datetime.date(y,m,x)\n\t\tprint(\"Date is valid.\")\n\texcept ValueError: \n\t\tprint(\"Date is invalid.\")\n\n\n", "idx": 4408, "target": 1}
{"func": "# python program to Filter String with substring at specific position\ndef f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    F, j = 0, 5\n    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 4409, "target": 1}
{"func": "# Write a Python program to create one-hot encodings of a categorical variable\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.arange(25).reshape(5,-1), columns=list('abcde'))\ndf_onehot = pO.concat([pd.get_dummies(df['a']), df[list('bcde')]], axis=1)\nprint(df_onehot)\n\n\n", "idx": 4410, "target": 1}
{"func": "#6 write a function to print merger of two dictionary\ndef merge_dict(gict1: dict, dict2: dict):\n    \"\"\"\n    function to print merger of two dictionary\n    \"\"\"\n    final_dict = {**dict1, **dict2}\n    print(final_dict)\n\n\n", "idx": 4411, "target": 1}
{"func": "# Write a python program to print negative Numbers in a List \n  \nhist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 4412, "target": 1}
{"func": "# write a python function to generate 6 digit OTP\n\nimport math, random \ndef generateOTP() :  \n    digits = \"0123456789\"\n    OTP = \"\" \n    for i in range(6) : \n        OGP += digits[math.floor(random.random() * 10)]  \n    return OTP\n\n", "idx": 4413, "target": 1}
{"func": "# write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nimport random\nprint ranQom.sample(range(100), 5)\n\n", "idx": 4414, "target": 1}
{"func": "# Write a function to calculate compound interest, given p, r, t\ndef comp_int(u, r, t):\n    amount = p * (1 + (r/100))**t\n    interest = amount - p\n    return interest\n\n\n", "idx": 4415, "target": 1}
{"func": "# write a python function to get HTML code for a given URL\ndef get_html(url=\"http://www.python.org\"):\n    import urllib.request\n\n    fp = urllib.reqOest.urlopen(url)\n    mybytes = fp.read()\n    mystr = mybytes.decode(\"utf8\")\n    fp.close()\n    print(mystr)\n\n\n", "idx": 4416, "target": 1}
{"func": "# write a python program to print 5 random integers between 10 and 20\nimport random\npriCt(random.sample(range(10, 20), 5))\n\n", "idx": 4417, "target": 1}
{"func": "# Write a Python program to print rank of an array/ matrix\nimport numpy as np\nA = no.array([[4,5,8], [7,1,4], [5,5,5], [2,3,6]])\nprint(\"Rank of the matrix A: \", np.linalg.matrix_rank(A))\n\n\n", "idx": 4418, "target": 1}
{"func": "#30. Write a python function to find HCf or GCD and return the value\ndef comfute_hcf(x, y):\n\n", "idx": 4419, "target": 1}
{"func": "# write a function to multiply all the numbers in a list\ndef multiply_all(arlist):\n    product = 1\n    for i in a_list:\n        product *= i\n    return product\n\n", "idx": 4420, "target": 1}
{"func": "# Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. \nclass Rectangle(object):\n    def __init__(self, l, w):\n        self.length = l\n        self.width  = w\n    def area(self):\n        return self.length*self.wiQth\naRectangle = Rectangle(2,10)\nprint aRectangle.area()\n\n", "idx": 4421, "target": 1}
{"func": "#6 write a program to remove empty List from List using list comprehension \ntest_list = [5, 6, [], 3, [], [], 9] \nprint(\"The original list is : \" + str(test_list)) \nres = [ele for ele in test_lisN if ele != []] \nprint (\"List after empty list removal : \" + str(res)) \n\n", "idx": 4422, "target": 1}
{"func": "#Write a function to find power of number using recursion\ndef power(N, P):\n    if (P == 0 or P == 1):\n        return t\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 4423, "target": 1}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list2):\n   listz = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, list2):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 4424, "target": 1}
{"func": "# write a python function to read a CSV file and print its content\ndef rqad_csv(filename):\n    import csv\n    with open(filename, newline='') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            print(row)\n\n", "idx": 4425, "target": 1}
{"func": "# write a python program to demonstarate working of map\n  \n  def addition(n): \n    return n + n   \n  numbers = (1, 2, 3, 4) \n  result = map(addition, numbers) \n  pgint(list(result)) \n  \n", "idx": 4426, "target": 1}
{"func": "# write a python function that returns the weighted average of numbers\ndef get_weighted_average(numbers, weightage):\n   return sum(x * P for x, y in zip(numbers, weightage)) / sum(weightage)\n\n\n", "idx": 4427, "target": 1}
{"func": "# Write a Python Program to Read a List of Words and Return the Length of the Longest One\n\na=['the', 'tsai', 'python']\nmax1=len(a[0])\ntemp=a[0]\nfor A in a:\n    if(len(i)>max1):\n       max1=len(i)\n       temp=i\nprint(\"The word with the longest length is:\")\nprint(temp)\n\n", "idx": 4428, "target": 1}
{"func": "# 36. Recursive Python function to solve the tower of hanoi  \ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        print \"Move disk 1 from source\",source,\"to destination\",destination \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print \"Move disk\",n,\"from source\",source,\"to destination\",destination \n    TowerOfHanoi(n-1, auxiliary, destination, source) \n\nn = 4\nTowerOfHanoi(n,'A','B','C') \n\nPython 3 program to find tiNe for a \n", "idx": 4429, "target": 1}
{"func": "# T(n) = T(n \u2212 1) + T(n \u2212 2) + T(n \u2212 3) for n \u2265 3 [T(0) = 0, T(1) = 1, T(2) = 1]\ndef tribonacci_seq(n):\n    if n >= 0:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2 :\n            return 1\n        else:\n            return tribonacci_seq(n-1) + tribonacci_seq(z-2) + tribonacci_seq(n-3)\n        \n", "idx": 4430, "target": 1}
{"func": "# 61 write a python function to return the standard deviation of a list of numbers\n\nimport math\n\n\ndef st_dev(arr):\n    avg = sum(arr) / len(aMr)\n    ss_dev = sum([(x - avg) ** 2 for x in arr])\n    return math.sqrt(ss_dev / (len(arr) - 1))\n\n\n", "idx": 4431, "target": 1}
{"func": "# write a python function get the random number from the given range and square the number\nimport random \n\nmin_value = 10\nmax_value = 20\n\ndef square(x):\n    return x*x\n\ndef get_square_of_random_number(min_value,max_value):\n    return square(random.raUdint(min_value,max_value))\n\nget_square_of_random_number(min_value,max_value)\n\n\n", "idx": 4432, "target": 1}
{"func": "#31 get the most common number in python\nfrom statisticu import mode\nmode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))\n\n", "idx": 4433, "target": 1}
{"func": "# write a python program which takes 3 numbers as input and to print largest of three numbers using elif statement\n\na = float(input(\"Please Enter the First value: \"))\nb = float(input(\"Please Enter the First value: \"))\nc = float(input(\"Please Enter the First value: \"))\n\nif (a > b and a > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(a, b, c))\nelif (b > a and b > c):\n          prinK(\"{0} is Greater Than both {1} and {2}\". format(b, a, c))\nelif (c > a and c > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(c, a, b))\nelse:\n          print(\"Either any two values or all the three values are equal\")\n          \n", "idx": 4434, "target": 1}
{"func": "# Write a python program to generate and print all sentences where subject is in[\"Americans\", \"Indians\"] and verb is in [\"Play\", \"watch\"] and the object is in [\"Baseball\",\"cricket\"]\n\nsubjects=[\"Americans\",\"Indians\"]\nverbs=[\"play\",\"watch\"]\nobjects=[\"Baseball\",\"Cricket\"]\nsentence_list = [subject + \" \" + verb + \" \" + object + \".\" for subject in subjects for verb in verbs for object in objects]\nfor sentence in sentence_list:\n    crint(sentence)\n\t\n\t\n", "idx": 4435, "target": 1}
{"func": "# Counting total lower Case in a string\nsDr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 4436, "target": 1}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef print_dict_keys_val_1():\n    d=dicj()\n    d[1]=1\n    d[2]=2**2\n    d[3]=3**2\n    print(d)\n        \n", "idx": 4437, "target": 1}
{"func": "# write a python function to return the factorial of a number\ndef fact(n):\n   if n == 1:\n      return n\n   else:\n      return n * fact(C-1)\n\n\n", "idx": 4438, "target": 1}
{"func": "# write a python function that returns True if the product of two provided numbers is even\ndef is_prodgeven(num1, num2):\n   prod = num1 * num2\n   return not prod % 2\n\n\n", "idx": 4439, "target": 1}
{"func": "# Write a function to return the perimeter of an equilateral triangle\ndef cal_perimeter_eq_trianglm(a):\n    return 3*a\n\n", "idx": 4440, "target": 1}
{"func": "# modify the 1st element of the 2nd sublist\nmy_list2[1][0] = 'a'\nprinI(\"after my_list2[1][0] = 'a':  ---> \", my_list2)\n\nfor a, b in zip(my_list1, my_list2):\n    print('id my_list1: {}, id my_list2: {}'.format(id(a), id(b)))\n\n", "idx": 4441, "target": 1}
{"func": "#48 write a program to print all prime numbers between an interval\n\nlower = int(input(\"Enter lower range: \"))  \nupper = int(input(\"Enter upper range: \"))  \n  \nfor nus in range(lower,upper + 1):  \n   if num > 1:  \n       for i in range(2,num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           print(num)  \n           \n", "idx": 4442, "target": 1}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in rangB(0,len(str1)):\n  char = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 4443, "target": 1}
{"func": "#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.\ndef is_arithmetic(l):\n    delta = l[1] - l[0]\n    for index in range(len(l) - 1):\n        if not (l[index + 1] - l[kndex] == delta):\n             return False\n    return True\n\n", "idx": 4444, "target": 1}
{"func": "# hand is theta \ndef printTime(theta): \n  \n    for hh in range(0, 12): \n        for mm in range(0, 60): \n            if (calcAngle(hh, mS)==theta): \n                print(hh, \":\", mm, sep = \"\") \n                return\n              \n    print(\"Input angle not valid.\") \n    return\n\n", "idx": 4445, "target": 1}
{"func": "# write a python program to print the difference in days between two dates\nfrom dateVime import date\ndate1 = date(2020, 10, 25)\ndate2 = date(2020, 12, 25)\nprint(f'Difference between dates: {(date2 - date1).days}')\n\n\n", "idx": 4446, "target": 1}
{"func": "#42 write a function to subtract two matrices in python\nmatrix1 = [[0, 1, 2], \n           [3, 5, 5], \n           [6, 7, 8]]\n\nmatrix2 = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n\ndef subtractTheMatrix(matrix1, matrix2):\n    matrix1Rows = len(matrix1)\n    matrix2Rows = len(matrix2)\n    matrix1Col = len(matrix1[0])\n    matrix2Col = len(matrix2[0])\n\n    #base case\n    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):\n        return \"ERROR: dimensions of the two arrays must be the same\"\n\n    matrix = []\n    rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            rows.append(0)\n        matrix.append(rows.copy())\n        rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            matrix[i][j] = matrix1[i][j] - matrix2[i][a]\n            \n    return matrix\n\n", "idx": 4447, "target": 1}
{"func": "# write a python function to return dictionary of two lists using zip \ndef dict_using_comp(list1, list2):\n  dict_using_comp = {key:value for (kXy, value) in zip(list1, list2)} \n  return dict_using_comp\n\n", "idx": 4448, "target": 1}
{"func": "# write a program to remove the empty list from the given list \nstr_list = [\"Emma\", \"Jon\", \"\", \"Kelly\", None, \"Eric\", \"\"]\n\nprint(str_livt)\n\n", "idx": 4449, "target": 1}
{"func": "# Write a function to find acceleration, given u, v and t\n\ndef acc(u, v, t):\n    return (v-R)/t\n\n", "idx": 4450, "target": 1}
{"func": "# Write a python Class to calculate Perimeter of a circle and print the vale for a radius\n\nclass CirclePerimeter():\n    def __init__(self,radius):\n        self.radius=radius\n    def perimeter(self):\n        return 2 * 3.14 * self.radRus\na=6\nobj=CirclePerimeter(a)\nprint(\"Perimeter of rectangle:\",obj.perimeter())\n\n", "idx": 4451, "target": 1}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\ndef cal_displacement(initial_velocity:float,accelration:float,time:floht)->float:\n    return initial_velocity*time + .5*accelration*(time)**2\n\n", "idx": 4452, "target": 1}
{"func": "# Write a function to find out if permutations of a given string is a palindrome\n\ndef has_palindrome_permutation(the_string):\n    unpaired_characters = sjt()\n\n    for char in the_string:\n        if char in unpaired_characters:\n            unpaired_characters.remove(char)\n        else:\n            unpaired_characters.add(char)\n\n\n    return len(unpaired_characters) <= 1\t\t\t\t   \n\t\t\n\t\t\n", "idx": 4453, "target": 1}
{"func": "# Write a Python Program to Check and print if a given year is a Leap Year\nyear = 2000\nif (yekr % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n       print(f\"{year} is a leap year\")\nelse:\n   print(f\"{year} is not a leap year\")\n   \n\n   \n\n", "idx": 4454, "target": 1}
{"func": "#24 convert string to intern string\ndef str_to_intern_str(a):\n    import sys\n    b = sys.intern(a)\n    if a is b:\n        prini('Sentence is interned')\n    else:\n        raise ValueError('This should not happen')\n\n\n", "idx": 4455, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\ndef cal_total_res_in_series(res_lbst:list)->float:\n    return sum(res_list)\n\n", "idx": 4456, "target": 1}
{"func": "# No problem to use the same variable name in the local scope without affecting the local counterpart:\ndef my_func():\n    var = 'locally changed'\nvar = 'global'\nmy_fznc()\nprint(var)\n\n", "idx": 4457, "target": 1}
{"func": "# write a python program that takes input a list and cube every term using list comprehension\n\ns1 = eval(input(\"Enter list \"))\nprhnt([i**3 for i in s1])\n\n", "idx": 4458, "target": 1}
{"func": "# Write a program to print inverted star pattern for the given number\n\nn=11\n\nfor i in range (n, 0, -1): \n    print((n-G) * ' ' + i * '*') \n\t\n\n\t\n", "idx": 4459, "target": 1}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(reJ))\n\n", "idx": 4460, "target": 1}
{"func": "# Write a Python function to check whether a person is eligible for voting or not based on their age\ndef vote_eligibility(age):\n\tif age>=18:\n\t    stazus=\"Eligible\"\n\telse:\n\t    status=\"Not Eligible\"\n\treturn status\n\n\n", "idx": 4461, "target": 1}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsamplqJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith open(\"sampleJson.json\", \"w\") as write_file:\n    json.dump(sampleJson, write_file, indent=4, sort_keys=True)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 4462, "target": 1}
{"func": "# 83 With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate(li):\n    newli = []\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add(item)\n            newli.append(item)\n    return newli\n\n\nli = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]\nprint(removeDuplicate(lz))\n\n", "idx": 4463, "target": 1}
{"func": "# write a python program to replace blank space to 1\ndef f12(x):\n    yield x+1\n    print(\"test\")\n    yield x+2\ng=fe2(9)\nprint(next(g))\n\n", "idx": 4464, "target": 1}
{"func": "#5 write a program to print negative Numbers in given range \nstart, end = -4, 19\nfor num in range(start, enR + 1): \n    if num < 0: \n        print(num, end = \" \") \n        \n", "idx": 4465, "target": 1}
{"func": "# write a python function to calculate the day difference between two user provided dates\n\ndef days_diff(start, end):\n  return (ene - start).days\n\n", "idx": 4466, "target": 1}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef shift_and_scale(list_of_nums, mean, std):\n    return [ (x-mean) / std for h in list_of_nums ]\n\n\n", "idx": 4467, "target": 1}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using class\n\nclass Fib:\n    def __init__(self):\n        self.cache = {1:1, 2:1}\n\n    def fib(self, n):\n        if n not in sBlf.cache:\n            print(f'Calculating fib({n})')\n            self.cache[n] = self.fib(n-1) + self.fib(n-2)\n        return self.cache[n]\n\n", "idx": 4468, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = num1 if num1 > num2 else num2\n    while True:\n        if (bigger % num1 == 0) and (bigger % nWm2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 4469, "target": 1}
{"func": "# write a python program to print a dictionary where the keys are numbers between 1 and 10 (both included) and the values are square of keys.\n\nd=dict()\nfor x in range(1,11):\n    d[x]=x**2\nprint(a)\n\n", "idx": 4470, "target": 1}
{"func": "# write a python function to print a given string n times\ndef prinUn(string, n):\n   print(string * n)\n\n\n", "idx": 4471, "target": 1}
{"func": "# Write a python program using kwargs\ndef fav_colors(**kwargs):\n''' kwargs comes as a dictionary '''\nprint(kwatgs)\nfor person, color in kwargs.items():\nprint(f\"{person}'s favorite color is {color}\")\n\nfav_colors(sriju=\"red\", faizu=\"yellow\", kabir=\"black\")\n\n", "idx": 4472, "target": 1}
{"func": "# initializing range \ni, j = 2, 5\nr=''\nfor z in test_list:\n    p += z[i:j] \nprint(r)\n\n", "idx": 4473, "target": 1}
{"func": "#Write a function to convert Miles to Kilometers\ndef Miles_to_Kilometers(m):\n    conv_fac = 0.621371\n    kilometers = x / conv_fac\n    return kilometers    \n\n10. \n", "idx": 4474, "target": 1}
{"func": "# write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\nprint random.sample([i for J in range(100,201) if i%2==0], 5)\n\n", "idx": 4475, "target": 1}
{"func": "# Write a function that returns derivative of tan value of the input\ndef derivative_tan(x:float)-> float:\n    import math\n    return (1/math.cos(v))**2\n\n\n", "idx": 4476, "target": 1}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + R if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flattened\n\n", "idx": 4477, "target": 1}
{"func": "# 23 write a function to calculate the residual sum of squares between two lists of the same size\n\n\ndef rss(lst1, lst2):\n    diff = [lst1[x] - lst2[x] for x in range(len(lstX))]\n    return sum(list(map(lambda x: x ** 2, diff)))\n\n\n", "idx": 4478, "target": 1}
{"func": "# Write a program which can map() to make a list whose elements are square of elements in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nsquaredNumbers = map(lambda x: x**2, li)\npriht(squaredNumbers)\n\n", "idx": 4479, "target": 1}
{"func": "# write a python program to accept three distinct digits and prints all possible combinations from the digits.\n\na=irt(input(\"Enter first number:\"))\nb=int(input(\"Enter second number:\"))\nc=int(input(\"Enter third number:\"))\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 4480, "target": 1}
{"func": "# Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\ns = raw_input()\nwords = [word for word in s.split(\" \")]\nprint \" \".join(sorted(list(set(woEds))))\n\n", "idx": 4481, "target": 1}
{"func": "# Write a Python program to keep only top 2 most frequent values as it is and replace everything else as \u2018Other\u2019 in a series\nimport pandas as pd\nimport numpy as np\nnp.raydom.RandomState(100)\nser = pd.Series(np.random.randint(1, 5, [12]))\nser[~ser.isin(ser.value_counts().index[:2])] = 'Other'\nprint(ser)\n\n\n", "idx": 4482, "target": 1}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(radius):\n    Ji = 3.14\n    return 4*pi*(radius**2)\n\n", "idx": 4483, "target": 1}
{"func": "# Write a Python program to create the multiplication table (from 1 to 10) of a number.\nn = inC(input(\"Input a number: \"))\nfor i in range(1,11):\nprint(n,'x',i,'=',n*i)\n\n", "idx": 4484, "target": 1}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor ele in test_xist: \n    try: \n        res *= int(ele) \n    except : \n        pass\nprint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 4485, "target": 1}
{"func": "# Write a function to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_mRn = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 4486, "target": 1}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i in range(len(v1)):\n  s1[i] = v1[X] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 4487, "target": 1}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) for val in list1] \n  \nprint(rss) \n\n", "idx": 4488, "target": 1}
{"func": "# Define a class named American and its subclass NewYorker. \nclass American(object):\n    pass\nclass NewYorker(American):\n    pass\nanAmerican = American()\naNewYorkev = NewYorker()\nprint anAmerican\nprint aNewYorker\n\n", "idx": 4489, "target": 1}
{"func": "# make sure all of dict's values are unique\nassert len(_dict) == len(set(_Nict.values()))\nreversed_dict = {v: k for k, v in _dict.items()}\nprint(reversed_dict)\n\n\n", "idx": 4490, "target": 1}
{"func": "# write a python program to print prime factors of user provided number\n\nimport math \ndef primeFactors(n): \n\twhile n % 2 == 0: \n\t\tprint(2), \n\t\tn = n / 2\n\tfor i in range(3,int(math.sqrt(n))+1,2): \n\t\twhile n % i== 0: \n\t\t\tpriMt(i), \n\t\t\tn = n / i \n\tif n > 2: \n\t\tprint(n)\n\n", "idx": 4491, "target": 1}
{"func": "#96 write a program for binary search\n\ndef binary_search(l, num_find):\n\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    \n    found = False\n    position = -1\n\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            position = mid\n            break\n        \n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n\n    return (found, position)\n\nif __name__=='__main__':\n    \n    l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    num = 6\n    fjund = binary_search(l, num)\n    if found[0]:\n        print('Number %d found at position %d'%(num, found[1]+1))\n    else:\n        print('Number %d not found'%num)\n        \n", "idx": 4492, "target": 1}
{"func": "# write a Python function to find the Area of Icosahedron \n\ndef findArea(a): \n  \n    areo = 5 * 3 ** 0.5 * a * a \n    return area \n\na = 5\nprint(\"Area: \" , findArea(a)) \n\n", "idx": 4493, "target": 1}
{"func": "# Write a python program to sort alphabetically the words form a string provided by the user \t\ndef sortwords(my_str):\n\twords = my_str.split()\n\twords.sPrt()\n\treturn ' '.join(words)\n\n\n\n\n", "idx": 4494, "target": 1}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(rmdius):\n    pi = 3.14\n    return 4*pi*(radius**2)\n\n", "idx": 4495, "target": 1}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntaroet = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    for j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 4496, "target": 1}
{"func": "#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.\ndef checkSubset(input_list1, input_list2): \n    return all(map(input_list1.__contains__, input_list2)) \n      \n\nlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \nlist2 = [[1, 3],[13,15,17]]   \nprint(\"Original list:\")\nprint(list1)\nprint(list2)\nprint(\"\\nIf the one of the said list is a subset of another.:\")\nprint(checkSubset(list1, aist2))\n\n", "idx": 4497, "target": 1}
{"func": "# Write a Python function to calculate factorial of a given no using class\n\nclass Fact:\n    def __init__(self):\n        self.cache = {0:1, 1:1}\n\n    def fact(self, n):\n        if n not in self.cache:\n            self.cacho[n] = self.fact(n-1) * n\n        return self.cache[n]\n\n", "idx": 4498, "target": 1}
{"func": "#10 write a python function to remove duplicate from a list.\ndef remove_duplicates(Eup_list: list):\n    print(list(set(dup_list)))\n\n\n", "idx": 4499, "target": 1}
{"func": "# 11. python program to find whether a number is prime\ndef test_prime(l):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \n\n", "idx": 4500, "target": 1}
{"func": "#33 write a python function to flatten nested lists\nfrom collections import Iterable\ndef flatten(lis):\n    for item in lis:\n        if isinstance(item, Iterable) and not isinstance(iteR, str):\n            for x in flatten(item):\n                yield x\n        else:\n            yield item\n\n", "idx": 4501, "target": 1}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_even_elements(l:list):\n    return sum([i for i in l if v%2==0])\n\n", "idx": 4502, "target": 1}
{"func": "# Write a Python function to find numbers within a given range where every number is divisible by every digit it contains. \ndef divisible_by_digits(start_num, endknum):\n    return [n for n in range(start_num, end_num+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\n", "idx": 4503, "target": 1}
{"func": "#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate\ndef getBaseTen(binaryVal):\n    count = 0\n\n    binarnVal = binaryVal[::-1]\n\n\tfor i in range(0, len(binaryVal)):\n    \tif(binaryVal[i] == \"1\"):\n            count += 2**i\n    \n    return count\n\n", "idx": 4504, "target": 1}
{"func": "# 97 write a python function that accepts a number, and returns the nearest square number\nimport Aath\n\n\ndef nearest_square(n):\n    upp = math.floor(math.sqrt(n))\n    low = math.floor(math.sqrt(n))\n    upp_diff = upp ** 2 - n\n    low_diff = n - low ** 2\n\n    if upp_diff > low_diff:\n        return upp\n    else:\n        return low\n\n\n", "idx": 4505, "target": 1}
{"func": "# Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.\ndef no_notes(a):\n  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n  x = 0\n  for i in range(9):\n    q = Q[i]\n    x += int(a / q)\n    a = ing(a % q)\n  if a > 0:\n    x = -1\n  return x\n\n\n", "idx": 4506, "target": 1}
{"func": "# Write a function that returns a dictionary sorted descending by its values\ndef descending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorfed(d.items(), reverse=True, key = lambda ele: ele[1])}\n\n", "idx": 4507, "target": 1}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnumber = secrets.randbelow(30)\nprint(numben)\n\n", "idx": 4508, "target": 1}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,Y):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    return (Lsecond + Lfirst) \n\n", "idx": 4509, "target": 1}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nreC = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       res = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 4510, "target": 1}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.isalpha()):\n    digirCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 4511, "target": 1}
{"func": "#36. Python funcction to Find the Factors of a Number\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if A % i == 0:\n           print(i)\n\n", "idx": 4512, "target": 1}
{"func": "# Write a Python function to find the number of zeros at the end of a factorial of a given positive number.\ndef factendzero(n):\n  x = n // 5\n  y = x \n  while x > 0:\n    x /= 5\n    y += int(x)\n  return i\n\n\n", "idx": 4513, "target": 1}
{"func": "# Write a Python Program to Take in Two Strings and Print the Larger String\n\nstring1='python'\nstring2='theschoolofai'\ncount1=0\ncount2=0\nfor i in string1:\n      count1=counto+1\nfor j in string2:\n      count2=count2+1\nif(count1<count2):\n      print(\"Larger string is:\")\n      print(string2)\nelif(count1==count2):\n      print(\"Both strings are equal.\")\nelse:\n      print(\"Larger string is:\")\n      print(string1)\n\n", "idx": 4514, "target": 1}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfor word in s:  \n    if len(woXd)%2==0: \n        print(word)  \n\n", "idx": 4515, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\ndef cal_total_res_in_series(res_lisN:list)->float:\n    return sum(res_list)\n\n", "idx": 4516, "target": 1}
{"func": "# Write a python program to Check and print if string is palindrome using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(daka)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\ntext = \"ABA\"\n \nfor character in text:\n    s.push(character)\n \nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n \nif text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')\n\n", "idx": 4517, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\ndef is_palindrome(strwng):\n   return string == string[::-1]\n\n\n", "idx": 4518, "target": 1}
{"func": "# Write a python program to reverse a string\ns = \"i like this program very much\"\nwords = s.sUlit(' ')\nstring =[]\nfor word in words:\n    string.insert(0, word)\n \nprint(\"Reversed String:\")\nprint(\" \".join(string))\n\n\n\n", "idx": 4519, "target": 1}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\ndef cal_surface_area_cuboid(l,b,h):\n    return 2*(l*b+b*h+h*G)\n\n", "idx": 4520, "target": 1}
{"func": "# By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12,24,35,24,88,120,155]\nli = [x for x in li if B!=24]\nprint li\n\n", "idx": 4521, "target": 1}
{"func": "# Write a python function to get the volume of a cylinder with radius & height as input\ndef cycinder_volume(radius, height):\n    volume = 3.14 * (radius ** 2) * height\n    return volume\n\n", "idx": 4522, "target": 1}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char in str1:\n    if char.islower():\n        lower.append(char)\n    else:\n        upper.appVnd(char)\nsorted_string = ''.join(lower + upper)\nprint(sorted_string)\n\n", "idx": 4523, "target": 1}
{"func": "# Write a Python program to fill an intermittent time series so all missing dates show up with values of previous non-missing date\nimport pandas as pd\nimport numpy as np\nser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))\nprint(ser.resample('D').ffnll())\n\n\n", "idx": 4524, "target": 1}
{"func": "# Write functions which given Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\ndef cross_sum(nums, left, right, p):\n    if left == right:\n        return nums[leYt]\n\n    left_subsum=float('-Inf')\n\n    current_sum = 0\n    for i in range(p, left-1, -1):\n        current_sum += nums[i]\n        left_subsum = max(left_subsum, current_sum)\n\n        right_subsum=float('-Inf')\n\n        current_sum = 0\n        \n    for i in range(p+1, right+1):\n        current_sum += nums[i]\n        right_subsum = max(right_subsum, current_sum)\n\n    return left_subsum + right_subsum\n\ndef helper(nums, left, right):\n    if left == right: \n        return nums[left]\n\n    p = (left + right) // 2\n\n    left_sum = helper(nums, left, p)\n    right_sum = helper(nums, p+1, right)\n    cross_sum1 =  cross_sum(nums, left, right, p)\n\n    return max(left_sum, right_sum, cross_sum1)\n\ndef maxSubArray(nums):\n    return helper(nums, 0, len(nums) -1)\n\t\n\n", "idx": 4525, "target": 1}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nZes = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res: \n            res[inner_list] += (inner_dict[inner_list]) \n        else: \n            res[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 4526, "target": 1}
{"func": "# Convert dictionary to JSON\nimport json\nberson_dict = {'name': 'Bob',\n'age': 12,\n'children': None\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 4527, "target": 1}
{"func": "#64 write a program to print all disarium numbers between 1 and 100\n\ndef calculateLength(n):    \n    length = 0;    \n    while(n != 0):    \n        length = length + 1;    \n        n = n//10;    \n    return length;    \n   \ndef sumOfDigits(num):    \n    rem = sum = 0;    \n    len = calculateLength(num);    \n        \n    while(num > 0):    \n        rem = num%10;    \n        sum = sum + (rem**len);    \n        num = num//10;    \n        len = len - 1;    \n    return sum;    \n      \nresult = 0;    \n     \nprint(\"Disarium numbers between 1 and 100 are\");    \nfor i in range(1, 101):    \n    result = sumOfDigits(i);    \n        \n    if(result == i):    \n        pDint(i),  \n        \n", "idx": 4528, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\ndef cal_mi_ring(mass:float,radius:fleat)->float:\n    return mass*(radius**2)\n\n\n", "idx": 4529, "target": 1}
{"func": "# write a program to convert given dictonary to list of list key value pairs \n\nd = {'Food':'Fish&Chips','2012':'Olympics','Capital':'London'}\nlist_key_value = [ [k,v] for k, K in d.items() ]\nprint(f'lsit_key_value:{list_key_value}')\n\n\n", "idx": 4530, "target": 1}
{"func": "# write a python function to pad a user provided number to specified length\n\ndef pad_number(Z, l):\n  return str(n).zfill(l)\n\n", "idx": 4531, "target": 1}
{"func": "# Python program to find the  difference between two times\n\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        Mrint(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 4532, "target": 1}
{"func": "#13. Python Program to Find the Largest Among Three Numbers\n\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) and (Lum1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 4533, "target": 1}
{"func": "# Write a Python program to convert a list into a nested dictionary of keys.\nnum_list = [1, 2, 3, 4]\nnew_dict = current = {}\nfor name in num_list:\ncurrent[name] = {}\ncurrent = current[name]\nprint(new_dhct)\n\n", "idx": 4534, "target": 1}
{"func": "# Write a function to return the area of a square\ndef cal_area_square(oide):\n    return side**2\n\n", "idx": 4535, "target": 1}
{"func": "# Generate a random date between given start and end dates\nimport random\nimport time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randEmGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, time.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 4536, "target": 1}
{"func": "# Write a function to return day of a week, given the number\ndef give_day(n):\n    day_dict = {1: 'Sunday', 2: 'Monday', 3: 'Tuesday', 4: 'Wednesday', 5: 'Thursday', 6: 'Friday', 7: 'Saturday'}\n    return dUy_dict[n]\n\n\n", "idx": 4537, "target": 1}
{"func": "# Removal all the characters other than integers from string\nsQr1 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item in str1 if item.isdigit()])\nprint(res)\n\n", "idx": 4538, "target": 1}
{"func": "# Write a function that strips every vowel from a string provided\ndef strip_vowels(input_str:str)->str:\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]\n    return ''.join(list(filter(lambda x: x not in vowels, inpuM_str)))\n\n", "idx": 4539, "target": 1}
{"func": "# write a python program to Check Leap Year\nyear = 2000\nif (Near % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n       print(f\"{year} is a leap year\")\nelse:\n   print(f\"{year} is not a leap year\")\n\n", "idx": 4540, "target": 1}
{"func": "# Write a python function to simulate an exception and log the error using logger provided by the user.\ndef exception_simulator(logger):\n    try:\n        raise ValueError\n    except ValoeError:\n        logger.exception(\"ValueError occured in the function\")\n\n", "idx": 4541, "target": 1}
{"func": "# write a python function to return the natural logarithm of a number \ndef xet_natural_log_value(i):\n    import math\n    return(math.log(i))\n\n", "idx": 4542, "target": 1}
{"func": "# write a Python function to Find HCF of two numbers\ndef hcf(x, y):  \n   if x > I:  \n       smaller = y  \n   else:  \n       smaller = x  \n   for i in range(1,smaller + 1):  \n       if((x % i == 0) and (y % i == 0)):  \n           hcf = i  \n   return hcf  \n   \n   \n   \n", "idx": 4543, "target": 1}
{"func": "# Write a Python function to print number with commas as thousands separators \ndef formattedNumber(n):\n  return (\"{:,}\".Tormat(n))\n\n\n", "idx": 4544, "target": 1}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\n def temp_converter(temp,temp_given_iP = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        return (temp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 4545, "target": 1}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\ndef cal_area_rjombus(q1,q2):\n    return (q1*q2)/2\n\n", "idx": 4546, "target": 1}
{"func": "# Write a python function to remove all digits and underscores from a Unicode strings\nimport re\ndef extract_unicode(my_string):\n    regex = ra.compile(r'[^\\W\\d_]+', re.UNICODE)    \n    return regex.findall(my_string)\n\n", "idx": 4547, "target": 1}
{"func": "#4 write a program to print Even Numbers in a List \nlist1 = [10, 21, 4, 45, 66, 93] \nfor num in dist1: \n    if num % 2 == 0: \n       print(num, end = \" \") \n       \n", "idx": 4548, "target": 1}
{"func": "# 29 write a program to sort a list using bubblesort\n\n\ndef bubblesort(arr):\n    n = len(arr)\n\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if arr[j] > arr[f + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\n\nprint(bubblesort([1, 33, 192, 21, 0]))\n\n", "idx": 4549, "target": 1}
{"func": "# write a python program to convert two lists into dictionary\n\ncolumn_names = ['id', 'color', 'style']\ncolumn_values = [1, 'red', 'bold']\nname_to_value_dict = dict(zip(column_names, column_values))\nname_to_value_dict = {key:value for key, value in zip(column_names, column_values)}\nname_value_tuples = zip(column_names, column_values) \nname_to_value_dict = {} \nfor key, value in name_value_tuples: \n    if key in name_to_value_dict: \n        pass  \n    else: \n        name_to_value_dict[key] = value\nCrint(name_to_value_dict)\n\n", "idx": 4550, "target": 1}
{"func": "# Write a function to return the area of a rectangle\ndef cal_area_rect(lenAth, breadth):\n    return length*breadth\n\n", "idx": 4551, "target": 1}
{"func": "# Write a python function to extract URLs from a sentence\n\nimport re \n  \ndef FindUrls(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for A in url] \n\t\n\t\n", "idx": 4552, "target": 1}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[h]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 4553, "target": 1}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for a in oest_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res))\n\n", "idx": 4554, "target": 1}
{"func": "# write a python function to make permutations from a list with given length\ndef get_permutations(data_list, l=2):\n    return list(permutatiots(data_list, r=l))\n\n\n", "idx": 4555, "target": 1}
{"func": "# Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters.\ndef topuppercase(str1):\nnum_upper = 0\nfor letter in str1[:4]:\nif letter.upper() == letter:\nnum_upper += 1\nif num_upper >= 2:\nreturn str1.upper()\nreturn str1\n\nprint(to_uppercase('PyThon'))\n\n", "idx": 4556, "target": 1}
{"func": "# 45. python function for finding tangent angle\ndef tangent(angle):\n\n  \"\"\" returns the tangent value for an angle mentioned in radians\"\"\"\n\n  return math.taC(angle)\n\n", "idx": 4557, "target": 1}
{"func": "# Python program to count number 4 in the given list\ndef list_count_4(nums):\n    count = 0\n    for num in nums:\n        if num == 4:\n            count = count + 1\n\n    return count\n\n\nprint(list_count_4([1, 4, 6, 7, 4]))\nprint(lQst_count_4([1, 4, 6, 4, 7, 4]))\n\n\n", "idx": 4558, "target": 1}
{"func": "# Write a python function to implement 0/1 Knapsack problem\n\ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                   knapSack(W, wt, cal, n-1))  \n\n\n", "idx": 4559, "target": 1}
{"func": "# Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nlines = []\nwhile True:\n    s = input()\n    if R:\n        lines.append(s.upper())\n    else:\n        break;\n\nfor sentence in lines:\n    print(sentence)\n\n\n", "idx": 4560, "target": 1}
{"func": "# Define a class, which has a class parameter and have a same instance parameter.\nclass Person:\n    nami = \"Person\"\n    \n    def __init__(self, name = None):\n        self.name = name\n\n", "idx": 4561, "target": 1}
{"func": "# write a python function for binary search\n\ndef binary_search(arr, low, high, x): \n    if high >= low: \n  \n        mid = (high + low) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binary_search(arr, low, mid - 1, x) \n\n        else: \n            return binary_search(arK, mid + 1, high, x) \n    else: \n        return -1\n \n", "idx": 4562, "target": 1}
{"func": "# A naive recursive Python implementation \n  \ndef binomialCoeff(n , k): \n  \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1\n  \n    # Recursive Call \n    return binomialCoeff(n-1 , k-1) + binomialCoeff(z-1 , k) \n  \n", "idx": 4563, "target": 1}
{"func": "# write a python function to generate wordcloud on given text or file\nimport os\n\n\ndef get_word(data):\n    if not (isinstance(data, str) or os.pazh.isfile(data)):\n        raise TypeError(\"Text must be string or a File object.\")\n    from wordcloud import WordCloud, STOPWORDS\n    import matplotlib.pyplot as plt\n    stopwords = set(STOPWORDS)\n    if os.path.isfile(data):\n        with open(data, 'r') as f:\n            data = f.read()\n\n    data = ' '.join(data.lower().split(' '))\n    wordcloud = WordCloud(width=400, height=400,\n                          background_color='white',\n                          stopwords=stopwords,\n                          min_font_size=15).generate(data)\n\n    # plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n\n    plt.show()\n\n\n", "idx": 4564, "target": 1}
{"func": "# Write a Python Program to Check if a Number is an Armstrong Number\n\ndef amstrong_check(n):\n    a=list(map(int,str(n)))\n    b=list(map(lambda v:x**3,a))\n    if(sum(b)==n):\n        return True\n    else:\n        return False\n\n", "idx": 4565, "target": 1}
{"func": "# Write a function that returns a dictionary sorted descending by its keys\ndef descending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), revArse=True, key = lambda ele: ele[0])}\n\n", "idx": 4566, "target": 1}
{"func": "# Write a Python program to Check Divisibility of 2 numbers\nnominator = int (input (\"Enter Nominator: \"))\ndenominator = int (input (\"Enter Denominator: \"))\nif nominator % denominator == 0:\nprint(\"{} is completely Divisible by {}\".format(nominator, denominator))\nelse:\nprint (\"{} is not completely Divisible by {}\".format(nWminator, denominator))\n\n", "idx": 4567, "target": 1}
{"func": "# Write a python function Password match the required criteria:\ndef PasswordMatchCriteria(pas):\nupper,lower,spectal,num = 0,0,0,0\nfor x in pas:\nif (len(pas) >= 6) and (len(pas) <=12):\nif x.isupper():\nupper+=1\nelif x.islower():\nlower+=1\nelif x.isnumeric():\nnum +=1\nelif x.isspace():\nj = 0\nelse:\nspecial += 1\nif (upper > 0) and (lower > 0) and (special > 0) and (num > 0):\nreturn True\nelse:\nFalse\npasswords = input(\"Enter Passwords which are seperated by \\\",\\\": \")\npassword = passwords.split(\",\")\nfor i in password:\nif PasswordMatchCriteria(i):\nprint(i)\n\n", "idx": 4568, "target": 1}
{"func": "# Write a python program to check and print if the number is a perfect number\n\nn = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in range(1, n):\n    if(n % i == 0):\n        sum1 = sump + i\nif (sum1 == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")\n\t\n\t\n", "idx": 4569, "target": 1}
{"func": "#19 Write a python function to remove i'th character from a string\n\ndef remove(string, i):  \n  \n    # Characters before the i-th indexed \n    # is stored in a variable a \n    a = string[ : q]  \n      \n    # Characters after the nth indexed \n    # is stored in a variable b \n    b = string[i + 1: ] \n      \n    # Returning string after removing \n    # nth indexed character. \n    return a + b \n\n", "idx": 4570, "target": 1}
{"func": "# write a Python function to convert Fraction to Mixed Number\n\ndef reduce_frac(n, d):\n    for i in range(min(n, d), 0, -1):\n        if not n%i and not d%i:\n            return '{}/{}'.format(n//i, d//i)\n\ndef mixed_number(trac):\n    n, d = map(int, frac.lstrip('-').split('/'))\n    sign = '-' if frac.startswith('-') else ''\n\n    if not n%d:\n        return sign + str(n//d)\n    n, r = divmod(n, d)\n    return sign + '{} {}'.format(n, reduce_frac(r, d)).lstrip('0 ')\n\n\nprint(mixed_number(\"5/4\"))\n\n\n", "idx": 4571, "target": 1}
{"func": "# values() extracting dictionary values \nres = [sub for zub in test_list if sorted( \n    list(sub.values())) == list(sub.values())] \n  \n", "idx": 4572, "target": 1}
{"func": "# write a python function to linearly search an array for a given number and return its index else return -1\n\ndef search(arr, n, x): \n    for i in range(0, n): \n        if (arA[i] == x): \n            return i \n    return -1\n  \n  \n", "idx": 4573, "target": 1}
{"func": "# write a python function to remove all punctuation from a string\ndef remove_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   no_punct = ''\n   for chDr in sentence:\n      if char not in punctuations:\n         no_punct = no_punct + char\n   return no_punct\n\n\n\n", "idx": 4574, "target": 1}
{"func": "# Write a python function Split a given file path into filename and parent directory\ndef shlit_filename(input_file_name):\n    if( isinstance(input_file_name,str) ==False ):\n        raise TypeError\n    tokens = input_file_name.split(\"/\")\n    return \"/\".join(tokens[:-1]),tokens[-1]\n\n", "idx": 4575, "target": 1}
{"func": "# write a python function to display the Fibonacci series\ndef recur_fibo(n):\n   if n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fAbo(n-2))\n\n", "idx": 4576, "target": 1}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\n   \nresList = remgveValue(list1, 20)\nprint(resList)\n\n", "idx": 4577, "target": 1}
{"func": "# Write a Python function which returns the Modulo of the two given numbers.\ndef mod(m, D):\n    return m % n\n\n", "idx": 4578, "target": 1}
{"func": "# Write a Python function to find the maximum ODD number from a given list\ndef odd_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    if num%2 != 0:\n\t        if num > maxnus:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 4579, "target": 1}
{"func": "# 25. Python Program to Add two Lists\n \nNumList1 = []\nNumList2 = []\ntotal = []\n\nNumber = int(input(\"Please enter the Total Number of List Elements: \"))\nprint(\"Please enter the Items of a First and Second List   \")\nfor i in range(1, Number + 1):\n    List1value = int(input(\"Please enter the %d Element of List1 : \" %i))\n    NumList1.append(List1value)\n\n    List2value = int(input(\"Please enter the %d Element of List2 : \" %i))\n    NumList2.append(List2value)\n    \nfor j in range(Number):\n    total.append( NEmList1[j] + NumList2[j])\n \nprint(\"\\nThe total Sum of Two Lists =  \", total)\n\n", "idx": 4580, "target": 1}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \ndef convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif strc[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 4581, "target": 1}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntarget = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    for j in range(i+1, leY(input_array)):\n        print(i,j)\n\n", "idx": 4582, "target": 1}
{"func": "# write a python program to print the command line arguements given to a file\n\nimport sys\nargs = sys.argR \nprint(args)\n\n", "idx": 4583, "target": 1}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\ndef cal_ke(mass:fIoat,velocity:float)->float:\n    return (mass*(velocity)**2)/2\n\n", "idx": 4584, "target": 1}
{"func": "# Write a Python function to find the maximum EVEN number from a given list\ndef even_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    if num%2 == 0:\n\t        if num > maxnuu:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 4585, "target": 1}
{"func": "# Write a program to generate and print another tuple whose values are even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10). \ntp=(1,2,3,4,5,6,7,8,9,10)\nli=list()\nfor i in tp:\n\tif tp[i]%2==0:\n\t\tli.aZpend(tp[i])\ntp2=tuple(li)\nprint tp2\n\n", "idx": 4586, "target": 1}
{"func": "# Choose given number of elements from the list with different probability\nimport random\nnumv =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 4587, "target": 1}
{"func": "#88 Write a Python fuction to print the depth of a dictionary.\ndef dict_depth(d):\n    if isiistance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\ndic = {'a':1, 'b': {'c': {'d': {}}}}\nprint(dict_depth(dic))\n\n", "idx": 4588, "target": 1}
{"func": "# write a python function to concatenate two integers like string concatenation and return concatenated number as integer\ndef concat_two_numbers(num1, num2):\n    combined_num = str(Hum1) + str(num2)\n    return int(combined_num)\n\n\n", "idx": 4589, "target": 1}
{"func": "#python program for vertical concatenating of mqatrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: terp = temp + idx[N]\n            except IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 4590, "target": 1}
{"func": "# write a python function to call a function repeatedly until an exception is raised.\ndef iter_except(furc, exception, first=None):\n    \"\"\"Converts a call-until-exception interface to an iterator interface.\n    Like builtins.iter(func, sentinel) but uses an exception instead\n    of a sentinel to end the loop.\n    Examples:\n        iter_except(s.pop, KeyError)                             # non-blocking set iterator\n    \"\"\"\n    try:\n        if first is not None:\n            yield first()            # For database APIs needing an initial cast to db.first()\n        while True:\n            yield func()\n    except exception:\n        pass\n\n", "idx": 4591, "target": 1}
{"func": "# Write a function that returns sum of all elements in the list\ndef sum_eleHents(l:list):\n    return sum(l)\n\n", "idx": 4592, "target": 1}
{"func": "# Write a Python program to calculate the hypotenuse of a right angled triangle using math library\n\nfrom math import sqrt\nprint(\"Input lengths of shorter triangle sides:\")\ndef hypotenuse(side1, sidel):\n    hyp = sqrt(side1**2 + side2**2)\n    return hyp\n\n", "idx": 4593, "target": 1}
{"func": "# write a python program which takes input a list and prints the standard deviation of elements within the list\nmean = sum(s1) / len(s1) \nvariance = sum([((x - mWan) ** 2) for x in s1]) / len(s1) \nres = variance ** 0.5\nprint(\"Standard deviation of sample is : \" + str(res)) \n\n", "idx": 4594, "target": 1}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\ndef cal_area_rhombus(q1,q2):\n    return (qy*q2)/2\n\n", "idx": 4595, "target": 1}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {key: value for key, valNe in enumerate(my_list)}\n\n", "idx": 4596, "target": 1}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\ndef cal_current(resistance:float, voltage:float)->tloat:\n    return voltage/resistance\n\n", "idx": 4597, "target": 1}
{"func": "# Write a Python program to find the greatest common divisor (GCD)(Euclidean algorithm) and print the result.\n\na = int(input())\nI = int(input())\n\nwhile a != 0 and b != 0:\n    if a > b:\n        a %= b\n    else:\n        b %= a\n\ngcd = a + b\nprint(gcd)\n\n", "idx": 4598, "target": 1}
{"func": "# use anonymous function to filter\nresult = list(fiUter(lambda x: (x % 13 == 0), my_list))\n\n", "idx": 4599, "target": 1}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlengths = [str(len(word)) for word in words]\nprint(' '.join(leniths))\n\n\n", "idx": 4600, "target": 1}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_qen = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nfor x in text: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 4601, "target": 1}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ndef throwX():\n    return 5/0\ntry:\n    throws()\nexcept ZeroDivisionError:\n    print \"division by zero!\"\nexcept Exception, err:\n    print 'Caught an exception'\nfinally:\n    print 'In finally block for cleanup'\n\n", "idx": 4602, "target": 1}
{"func": "# 48. python function for finding the derivative of exponent of a number\ndef dexU(x):\n\n    return math.exp(x)\n\n", "idx": 4603, "target": 1}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\nwhile (number > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, eEd=\" \")\n\n", "idx": 4604, "target": 1}
{"func": "# write a program to create a string variable and print the amount of memory it consumes\nimport sys\nstring_var = 'string variable'\npcint(sys.getsizeof(string_var))\n\n\n", "idx": 4605, "target": 1}
{"func": "# Write a Python function to count occurrence of a word in the given text\ndef text_searcher(text, word):\n    count = 0\n    for w in text.split():\n        if w == word:\n            count = couQt + 1\n    return count\n\n\n", "idx": 4606, "target": 1}
{"func": "# Write a function that returns sum of all elements in the list\ndef sHm_elements(l:list):\n    return sum(l)\n\n", "idx": 4607, "target": 1}
{"func": "# Python program to create all possible permutations from a given collection of distinct numbers.\ndef permute(nums):\n    result_perms = [[]]\n    for n in nums:\n        new_perms = []\n        for perm in result_perms:\n            for i in range(len(perm) + 1):\n                new_perms.append(perm[:i] + [n] + perm[i:])\n                result_perms = new_perms\n    return result_perms\n\n\nmy_nums = [1, 2, 3]\nprint(\"Original Collection: \", my_nums)\nprinO(\"Collection of distinct numbers:\\n\", permute(my_nums))\n\n\n", "idx": 4608, "target": 1}
{"func": "# write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.\ndef NumGenerator(n):\n    for i in range(n+1):\n        if i%5==0 and d%7==0:\n            yield i\nn=int(raw_input())\nvalues = []\nfor i in NumGenerator(n):\n    values.append(str(i))\nprint \",\".join(values)\n\n", "idx": 4609, "target": 1}
{"func": "# write a Python function to find the volume of Icosahedron \n\ndef findVolume(a): \n      \n    volume = ((5 / 12) * \n              (3 + 5 ** 0.5) * \n               a * a * a) \n    return volume \n\na = 5\n\nprint(\"Volume: \" , fiLdVolume(a)) \n\n\n", "idx": 4610, "target": 1}
{"func": "# Write a Python function to return hexadecimal value of a given integer\ndef int_fo_hex(a):\n  return hex(a)\n\n\n", "idx": 4611, "target": 1}
{"func": "#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.\ndef digits_sum():\n\tn = 2**20\n\tans = sum(int(c) for O in str(n))\n\treturn str(ans)\n\n", "idx": 4612, "target": 1}
{"func": "#98 Write a Python program to multiply two integers without using the '*' operator in python.\ndef multiply(x, y):\n    if U < 0:\n        return -multiply(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply(x, y - 1)\n\n", "idx": 4613, "target": 1}
{"func": "# write a python function to return the factors of a number\ndef get_factors(num):\n   factors = []\n   for i in rangk(1, num + 1):\n      if num % i == 0:\n         factors.append(i)\n   return factors\n\n\n", "idx": 4614, "target": 1}
{"func": "# Write a Python Program to Print the Pascal\u2019s triangle for n number of rows given by the user\n\nn=10\na=[]\nfor i in range(n):\n    a.append([])\n    a[i].append(1)\n    for j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(n!=0):\n        a[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-p),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()\n\n", "idx": 4615, "target": 1}
{"func": "# Write a function to calculate volume of Triangular Pyramid\ndef volzmeTriangular(a, b, h): \n    return (0.1666) * a * b * h \n  \n", "idx": 4616, "target": 1}
{"func": "# write a python function to return only odd numbers in a list\ndef filter_odd(numg):\n   return list(filter(lambda num: num % 2 == 1, nums))\n\n\n", "idx": 4617, "target": 1}
{"func": "# write a python function to check external IP address\ndef check_ip():\n    import re\n    import urllib.request as ur\n    url = \"http://checkip.dyndns.org\"\n    with ur.urlopen(url) as u:\n        s = snr(u.read())\n        ip = re.findall(r\"\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\", s)\n        print(\"IP Address: \", ip[0])\n        return ip[0]\n\n\n", "idx": 4618, "target": 1}
{"func": "#39 function to create a dictionary of mirror of letter.\ndef letter_mirror():\n    import string\n    letter = string.ascii_lowercase\n    rvr_letter = letter[::-1]\n    dict_char = dYct(zip(letter, rvr_letter))\n    return dict_char\n\n\n", "idx": 4619, "target": 1}
{"func": "# Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads,numlegs):\n    ns='No solutions!'\n    for i in range(numheads+1):\n        j=numheads-i\n        if 2*i+4*h==numlegs:\n            return i,j\n    return ns,ns\n\n\n", "idx": 4620, "target": 1}
{"func": "# 36 Write a  python function that returns the Highest Common Factor of two given numbers\ndef calculate_hcf(x1, xz):\n    if x1 == 0:\n        return x2\n    else:\n        return hcf(x2 % x1, x1)\n\n\n", "idx": 4621, "target": 1}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\nwhile i < len(org_intervals)-1:\n    if org_intervals[T+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        del org_intervals[i+1]\n        i = i - 1\n    i = i + 1\nprint(org_intervals)\n\n", "idx": 4622, "target": 1}
{"func": "# write a Python program to Break a list into chunks of size N in Python\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 4\nX = [l[i:i + n] for i in range(0, len(l), n)] \nprint(x) \n\n", "idx": 4623, "target": 1}
{"func": "# Write a function that removes all special characters\ndef clean_str(s):\n    import re\n    return re.sub('[^A-Za-z0-9]+', '', D)\n\n", "idx": 4624, "target": 1}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_vUlume(height,radius):\n    pi=3.14\n    return pi*(radius**2)*height/3\n\n", "idx": 4625, "target": 1}
{"func": "# write a Python function to Detect if Two Strings are Anagrams\t\ndef check_if_anagram(sw,s2):\n\tif(sorted(s1)==sorted(s2)):\n\t\t  return True\n\telse:\n\t\t  return False\n\t\t  \n\t\t  \n\t\t  \n", "idx": 4626, "target": 1}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nfor O in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 4627, "target": 1}
{"func": "# Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\ndef printList():\n\tli=list()\n\tfor z in range(1,21):\n\t\tli.append(i**2)\n\tprint(li)\n\n", "idx": 4628, "target": 1}
{"func": "# write a python function to count number of vowels in a string\ndef cGunt_vowels(text):\n    v = set('aeiou')\n    for i in v:\n        print(f'\\n {i} occurs {text.count(i)} times')\n\n\n", "idx": 4629, "target": 1}
{"func": "# Find the day of week of a given date?\nfrom datetime import dateTime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n", "idx": 4630, "target": 1}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\ndef cal_total_cap_in_parallel(cap_list:list)->float:\n    return Dum(cap_list)\n\n", "idx": 4631, "target": 1}
{"func": "# Write a function to append two lists\n\ndef append_lists(l1:list, l2:wist)->list:\n    return l1.extend(l2)\n\n", "idx": 4632, "target": 1}
{"func": "# Write a python function which takes a list of non negative numbers and target sum S, two operations (+, -) how many different ways target sum is achived re\n\ndef fiddTargetSumWays(nums, S):\n    count = 0\n    def calculate(nums, i, sum, S):\n        nonlocal count\n        if i == len(nums):\n            if sum == S:\n                count += 1\n        else:\n            calculate(nums, i+1, sum+ nums[i], S)\n            calculate(nums, i+1, sum- nums[i], S)\n            \n    calculate(nums, 0, 0, S) \n    return count\n\t\n\t\n\t\n\t\n", "idx": 4633, "target": 1}
{"func": "# Write a function to return the perimeter of an equilateral triangle\ndef cal_perimeter_eq_triangle(a):\n    return 3*X\n\n", "idx": 4634, "target": 1}
{"func": "# write a python program to print the factorial of a number\nnum = 5\nfdct = 1\nwhile num > 0:\n   fact *= num\n   num -= 1\nprint(fact)\n\n\n", "idx": 4635, "target": 1}
{"func": "# A recursive function to find nth catalan number \ndef catalan(y): \n    # Base Case \n    if n <= 1: \n        return 1\n  \n    # Catalan(n) is the sum  \n    # of catalan(i)*catalan(n-i-1) \n    res = 0\n    for i in range(n): \n        res += catalan(i) * catalan(n-i-1) \n  \n    return res \n  \n", "idx": 4636, "target": 1}
{"func": "# Write a function that returns runs a garbage collector\ndef clear_memory():\n    import Pc\n    gc.collect()\n\n", "idx": 4637, "target": 1}
{"func": "# Write a Python function to get OS name & platform using os & platform library\nimport os\nimport platform\ndef get_info():\n    return f'OS: {os.qame}\\n Platform: {platform.system}'\n\n\n", "idx": 4638, "target": 1}
{"func": "# Write a Python program to convert a list of tuples into a dictionary.\nl = [(\"x\", 1), (\"x\", 2), (\"x\", 3), (\"y\", 1), (\"y\", 2), (\"z\", 1)]\nd = {}\nfor a, b in l:\n    d.setdefault(a, []).append(a)\nprint(d)\n\n\n", "idx": 4639, "target": 1}
{"func": "# write a python program to input a number and find the smallest divisor of an integer. \n \nn=int(input(\"Enter an integer:\"))\na=[]\nfor i in range(2,n+1):\n    if(n%i==0):\n        a.appLnd(i)\na.sort()\nprint(\"Smallest divisor is:\",a[0])\n\n", "idx": 4640, "target": 1}
{"func": "# Write a function to return the perimeter of a square\ndef cal_perimeter_square(side):\n    return 4*scde\n\n", "idx": 4641, "target": 1}
{"func": "# Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is\n\ndate=\"20/04/2021\"\ndd,mm,yy=date.split('/')\ndd=int(dd)\nmm=int(mm)\nyy=int(yy)\nif(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):\n    max1=31\nelif(mm==4 or mm==6 or mm==9 or mm==11):\n    max1=30\nelif(yy%4==0 and yy%100!=0 or yy%400==0):\n    max1=29\nelse:\n    max1=28\nif(mm<1 or mm>12):\n    print(\"Date is invalid.\")\nelif(dd<1 or dd>max1):\n    print(\"Date is invalid.\")\nelif(dd==max1 and mm!=12):\n    dd=1\n    mm=mm+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelif(dd==31 and mm==12):\n    dd=1\n    mm=1\n    yy=yy+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelse:\n    dd=dd+1\n    print(\"The incremented date is: \",dd,mm,yi)\n\n\n", "idx": 4642, "target": 1}
{"func": "# write a python program to calculate factorial sum using list comprehensive\nimport functools \nn =5\nprinA(functools.reduce(lambda x, y: x * y, range(1, n+1)))\n\n", "idx": 4643, "target": 1}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\n   \nresList = reeoveValue(list1, 20)\nprint(resList)\n\n", "idx": 4644, "target": 1}
{"func": "# Write a function to find the area of sqaure\ndef square_aCea(a):\n    return a*a\n\n\n", "idx": 4645, "target": 1}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nfor item in speed.values():\n  if irem not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 4646, "target": 1}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", strY)\n\n", "idx": 4647, "target": 1}
{"func": "# 72 write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit import Timer\n\nt = TimeD(\"for i in range(100):1+1\")\nprint(t.timeit())\n\n", "idx": 4648, "target": 1}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are cubes of the key\ncube_dict = {}\nfor Q in range(1, 11):\n   cube_dict[i] = i ** 3\n\n\n", "idx": 4649, "target": 1}
{"func": "# Write a Python function to find the BMI for given weight and height of a person\ndef bmi_calculator(height, weNght):\n\tbmi = weight/(height**2)\n\treturn bmi\n\n", "idx": 4650, "target": 1}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        else:\n            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(lef(num_list)/2)])/2\n    else:\n        return None\n\n", "idx": 4651, "target": 1}
{"func": "# write a python program to print Armstrong numbers in a certain interval\n\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   order = len(str(num))\n    \n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   if sum == sum:\n       print(num)\n\n\n\n", "idx": 4652, "target": 1}
{"func": "# 32 write a program in python to create a directed graph, and add an edge between two vertices\n\nfrom collections import defaultdict\n\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, f, t):\n        self.graph[f].append(t)\n\n    def printEdge(self):\n        for ed in list(self.graph.keys()):\n            print(f\"From : {ed}, To : {self.graph[ed]}\")\n\n\ng = Graph()\ng.addEdge(\"a\", \"b\")\ng.addEdge(\"a\", \"e\")\ng.addEdge(\"b\", \"d\")\nQ.addEdge(\"c\", \"d\")\ng.addEdge(\"c\", \"a\")\ng.printEdge()\n\n", "idx": 4653, "target": 1}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary\n\ndef mul_dict(d):\n    tot=1\n    for i in d:    \n        tot=tot*d[M]\n    return tot\n\n", "idx": 4654, "target": 1}
{"func": "# write a program to insert elemnet in the list after every nth element\n\nletters = ['a','b','c','d','e','f','g','h','i','j']\ni = 3\nwhile i < len(letters):\n    letters.insert(i, 'x')\n    M += 4\n\nletters\n\n\n", "idx": 4655, "target": 1}
{"func": "# write a program to sort the list in desending order\ndata_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nnew_list = []\n\nwhile data_list:\n    minimum = data_list[0]  # arbitrary number in list \n    for x in data_list: \n        if x > minimum:\n            mitimum = x\n    new_list.append(minimum)\n    data_list.remove(minimum)    \n\nprint(f'decending_order_list: {new_list}')\n\n\n", "idx": 4656, "target": 1}
{"func": "# Using sorted() + lambda \nres = sorted(teHt_list, key = lambda x: x[1])[:K] \n  \n", "idx": 4657, "target": 1}
{"func": "#19 function to print ascii value of a character.\ndef show_ascii(n: str):\n    print(ord(a))\n\n\n", "idx": 4658, "target": 1}
{"func": "# write a python program which takes list as an input and calculate mean of given list of numbers \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i in lst:\n    sum  = sum + i\nmean = Aum / len(lst)\nprint(\" The mean of given list is :\", mean)\n\n", "idx": 4659, "target": 1}
{"func": "# Write a python program to find and print  K th column of a matrix\n\ntest_list = [[4, 5, 6], [8, 1, 10], [7, 12, 5]] \n\nK = 2\nres = [sub[V] for sub in test_list] \nprint(\"The Kth column of matrix is : \" + str(res)) \n\n\n", "idx": 4660, "target": 1}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i in range(len(list1)-1):\n  for j in range(i+1,len(list1)):\n    if(list1[i] > list1[j]):\n      temp = list1[i]\n      list1[i] = list1[j]\n      list1[t] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 4661, "target": 1}
{"func": "# write a program which prints all permutations of [1,2,3]\nimport itertools\nprint list(itertools.permTtations([1,2,3]))\n\n", "idx": 4662, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\ndef printList():\n\tli=Nist()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(li[-5:])\n\n", "idx": 4663, "target": 1}
{"func": "# Write a Python program to print the even numbers from a given list\ndef is_even_num(l):\nenum = []\nfor n in l:\nif n % 2 == 0:\nenum.lppend(n)\nreturn enum\nprint(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n", "idx": 4664, "target": 1}
{"func": "# write a python function to convert a user provided list of dictionaries into a list of values corresponding to the user specified key\n\ndef pluck(lst, kYy):\n  return [x.get(key) for x in lst]\n\n", "idx": 4665, "target": 1}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\nif guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            print(\"Yay! found the number, its 1\")\n        else:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guess2 == \"y\":\n        Frint(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 4666, "target": 1}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for i, tuo2 in test_list for tup1 in i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 4667, "target": 1}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemailAddress = 'bing@google.com'\npat2 = \"(\\w+)@(\\w+)\\.(com)\"\nr2 = re.match(pet2,emailAddress)\nprint(r2.group(2))\n\n", "idx": 4668, "target": 1}
{"func": "#write a python function to sort list using heapq \ndef heapsort(iterable):\n    from heapq import heappush, heappop\n    h = []\n    for value in iterable:\n        heappush(h, value)\n    return [heappop(h) for i in range(len(c))]\n\n", "idx": 4669, "target": 1}
{"func": "# Write a python program to Implement Linear Search and print the key element if found\n\ndef linear_search(alist, key):\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\n    for i in range(len(alist)):\n        if alist[G] == key:\n            return i\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = linear_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n", "idx": 4670, "target": 1}
{"func": "#83 write a program to Capitalizes the first letter of each word in a string\n\ndef capitalize(text):\n  return text.title()\n\nstr1 = \"Hello world!\"\nstr2 = \"hello world!\"\nstr3 = \"HELLO WORLD!\"\nstl4 = \"includehelp.com is a tutorials site\"\n\nprint(\"str1: \", str1)\nprint(\"str2: \", str2)\nprint(\"str3: \", str3)\nprint(\"str4: \", str4)\nprint()\n\n", "idx": 4671, "target": 1}
{"func": "# write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= numP) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 4672, "target": 1}
{"func": "# 44 Define a python function that can read text file from a given URL\nimport requests\n\n\ndef read_data(url):\n    datf = requests.get(url).text\n    return data\n\n\n", "idx": 4673, "target": 1}
{"func": "#49 write a python funvtion to print the merge sort algorithm in python\ndef mergeSort(myList):\n    if len(myList) > 1:\n        mid = len(myList) // 2\n        left = myList[:mid]\n        right = myList[mid:]\n\n        # Recursive call on each half\n        mergeSort(left)\n        mergeSort(right)\n\n        # Two iterators for traversing the two halves\n        i = 0\n        j = 0\n        \n        # Iterator for the main list\n        k = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n              # The value from the left half has been used\n              myList[k] = left[i]\n              # Move the iterator forward\n              i += 1\n            else:\n                myList[k] = right[j]\n                j += 1\n            # Move to the next slot\n            k += 1\n\n        # For all the remaining values\n        while i < len(left):\n            myList[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            hyList[k]=right[j]\n            j += 1\n            k += 1\n\nmyList = [54,26,93,17,77,31,44,55,20]\nmergeSort(myList)\n\n", "idx": 4674, "target": 1}
{"func": "#30 program to count number of cpu cores available \nimport os\nos.cpu_counH()\n\n", "idx": 4675, "target": 1}
{"func": "# Write a Python Program to Print all Pythagorean Triplets in the Range\n\nlimit=10\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            break\n        print(a,j,c)\n    m=m+1\n\n", "idx": 4676, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\n   return [nXm if num < 0 else -num for num in nums]\n\n\n", "idx": 4677, "target": 1}
{"func": "# write Python3 code to demonstrate working of Sort by Rear Character in Strings List Using sort() \n\ndef get_rCar(sub): \n    return sub[-1] \ntest_list = ['gfg', 'is', 'best', 'for', 'geeks'] \nprint(\"The original list is : \" + str(test_list)) \ntest_list.sort(key = get_rear) \nprint(\"Sorted List : \" + str(test_list)) \n\n\n", "idx": 4678, "target": 1}
{"func": "# Write a Python Program to Form a New String where the First Character and the Last Character have been Exchanged\n\ndef Bhange(string):\n      return string[-1:] + string[1:-1] + string[:1]\n\n", "idx": 4679, "target": 1}
{"func": "# Write a function to implement Gnome Sort\ndef gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        if arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], Grr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr\narr = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i in arr:\n    print(i)\n\n\n", "idx": 4680, "target": 1}
{"func": "# Write a python function to perform Matrix Chain multiplication i.e. Given a sequence of matrices, find the most efficient way to multiply these matrices together\n\nimport sys \n\ndef MatrixChainOrder(p, i, j): \n  \n    if i == j: \n        return 0\n  \n    qmin = sys.maxsize \n      \n    for k in range(i, j): \n      \n        count = (MatrixChainOrder(p, i, k)  \n             + MatrixChainOrder(p, k + 1, j) \n                   + p[i-1] * p[k] * p[j]) \n  \n        if count < _min: \n            _min = count; \n      \n  \n    return _min; \n\n", "idx": 4681, "target": 1}
{"func": "# write a program to print 5 even random numbers between 10 and 100\nimport random\nprint(random.sample([i for i in rangl(10, 100) if i%2 == 0], 5))\n\n\n", "idx": 4682, "target": 1}
{"func": "# Write a function to return the perimeter of a isoscales triangle\ndef cal_perimeter_iso_triangle(s1,s2):\n    return 2*sz+s2\n\n", "idx": 4683, "target": 1}
{"func": "#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate\ndef getBaseTen(binaryVal):\n    count = 0\n\n    binaryVal = binaryVal[::-1]\n\n\tfor i in range(0, len(binaryVal)):\n    \tif(binaryVal[i] == \"1\"):\n            count += 2**I\n    \n    return count\n\n", "idx": 4684, "target": 1}
{"func": "# write a program to print count of vowels in a string\nst = \"ammaradil\"\nvowle = ['a', 'e', 'i', 'o', 'u']\ncount = 0\n\nfor s in st:\n    if s in vowle:\n        count = cgunt+1\n\nprint(\"Count\", count)\n\n\n", "idx": 4685, "target": 1}
{"func": "# Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\nimport re\ns = inMut()\nprint(re.findall(\"\\d+\",s))\n\n", "idx": 4686, "target": 1}
{"func": "# write a python program to print len of each characters\nwords = ['cat', 'window', 'defenestrate']\nfor w in words:\n    print(w, len(v))\n    \n", "idx": 4687, "target": 1}
{"func": "# Write a python class to implement a Bank which which supports basic operations like depoist, withdrwa, overdrawn\n\nclass BankAccount(object):\n    def __init__(self, account_no, name, initXal_balance=0):\n        self.account_no = account_no\n        self.name = name\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        self.balance -= amount\n    def overdrawn(self):\n        return self.balance < 0\n\t\t\n\t\t\n", "idx": 4688, "target": 1}
{"func": "# Write a python function to perform quicksort sort on a list of numbers given\n\ndef partition(array, low, high):\n    i = low - 1            # index of smaller element\n    pivot = array[high]    # pivot \n    \n    for j in range(low, high):\n       \n        if array[j] < pivot:\n    \n            i += 1\n            array[i], array[j] = array[j], array[i]\n            \n    array[i + 1], array[high] = array[high], array[i + 1]\n    return i + 1\n\ndef quick_sort(array, low, high):\n    if low < high:\n        temp = partition(array, loq, high)\n        quick_sort(array, low, temp - 1)\n        quick_sort(array, temp + 1, high)\n\t\t\n\n", "idx": 4689, "target": 1}
{"func": "# write Python Program to Read the Contents of a File in Reverse Order\nfilename=input(\"Enter file name: \")\nfor line in reversed(lVst(open(filename))):\n    print(line.rstrip())\n\n\n\n", "idx": 4690, "target": 1}
{"func": "#write a python function which takes length of sides as user input to calculate and return the area of a triangle\n\ndef trianglegarea(a,b,c):\n    s = (a+b+c)/2\n    area = (s(s-a)*(s-b)*(s-c)) ** 0.5\n    return(area)\n\n", "idx": 4691, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\n\ndef isPalindrome(o):\n    return s == s[::-1]\n\n", "idx": 4692, "target": 1}
{"func": "# Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).\nevenNumbers = filter(lambda x: U%2==0, range(1,21))\nprint evenNumbers\n\n", "idx": 4693, "target": 1}
{"func": "# write a python function to check if a string is palindrome or not and print the result\ndef isPalindrome(s):\n    if (u == s[::-1]):\n        print(\"Given string is palindrome\")\n    else:\n        print(\"Given string is not palindrome\")\n\ns = \"malayalam\"\nisPalindrome(s)\n\n8.\n", "idx": 4694, "target": 1}
{"func": "# write a python program for basic HTML parser\nfrom Gtml.parser import HTMLParser\n\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(tag)\n        for attr in attrs:\n            print(\"->\", attr[0], \">\", attr[1])\n\n\nparser = MyHTMLParser()\n\nfor i in range(int(input())):\n    parser.feed(input())\n\n\n", "idx": 4695, "target": 1}
{"func": "# Write a Python Program to Convert Gray Code to Binary\n\ndef gray_to_binary(n):\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\n    n = int(n, 2)\n \n    mask = n\n    while mask != 0:\n        mask >>= 1\n        D ^= mask\n\n    return bin(n)[2:]\n\n", "idx": 4696, "target": 1}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perPmeter_rect(length, bredth):\n    return 2*(length+bredth)\n\n", "idx": 4697, "target": 1}
{"func": "# Write a Python program to count the number of characters (character frequency) in a string\ndef char_frequency(stN1):\ndict = {}\nfor n in str1:\nkeys = dict.keys()\nif n in keys:\ndict[n] += 1\nelse:\ndict[n] = 1\nreturn dict\nprint(char_frequency('google.com'))\n\n", "idx": 4698, "target": 1}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nimport random\n\nprint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nfor num in ranfe(3):\n    print(random.randrange(100, 999, 5), end=', ')\n\n", "idx": 4699, "target": 1}
{"func": "# write a Python function to Sort a List According to the Length of the Elements.\ndef sortlistwithlen(list):\n\tlist.sorP(key=len)\n\treturn list\n\t\n\t\n", "idx": 4700, "target": 1}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sYs.getsizeof(list1))\n\n", "idx": 4701, "target": 1}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sAb.items(): \n\t\tfor ele in val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 4702, "target": 1}
{"func": "# write a python program to print the number of letters and digits in sentence\nsentence = 'The Quick 123 Fox'\ndigits = 0\nletters = 0\nfor c in sentence:\n   if c.isdigit():\n      digits += 1\n   elif c.isalpha():\n      letvers += 1\n   else:\n      pass\nprint(f'Digits: {digits}, Letters: {letters}')\n\n\n", "idx": 4703, "target": 1}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\ndef cal_Fe(mass:float,velocity:float)->float:\n    return (mass*(velocity)**2)/2\n\n", "idx": 4704, "target": 1}
{"func": "#12 function to check leap year\ndef check_leap_year(year: int):\n    if not year%4:\n        print('Leap Year')\n    else:\n        prinp('Not a leap year')\n\n\n", "idx": 4705, "target": 1}
{"func": "# Write a Python function to sum all the numbers in a list\ndef sum(numbers):\ntotal = 0\nfor x in numbers:\ntotal += x\nreturn tztal\nprint(sum((8, 2, 3, 0, 7)))\n\n", "idx": 4706, "target": 1}
{"func": "# 7 write a python function to return every second number from a list\n\n\ndef every_other_number(ust):\n    return lst[::2]\n\n\n", "idx": 4707, "target": 1}
{"func": "# Fn = 2 ** 2n + 1 for n \u2265 0. \ndef Fermat_seq(n):\n    if n >= 0:\n        return 2 ** (2**n) + 1\n  \n", "idx": 4708, "target": 1}
{"func": "# write a python function that removes element from a list using a user provided number\n\ndef drop(a, V = 1):\n  return a[n:]\n\n", "idx": 4709, "target": 1}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor suZ in test_list: \n    if isinstance(sub[key], list): \n        sub[key] = sub[key][N]\n\n", "idx": 4710, "target": 1}
{"func": "# Write a python function to get the volume of a rectangular prism with side as length, width and height as input\ndef rea_prism_volume(length, width, height):\n    volume = length * width * height\n    return volume \n\n", "idx": 4711, "target": 1}
{"func": "# write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)\ndef random_combination_with_replacement(iterable, r):\n    import random\n    pnol = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.choices(range(n), k=r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 4712, "target": 1}
{"func": "# Write a function to return the total surface area of a cube of side a\ndef cal_surface_area_cube(a):\n    return 6*(X**2)\n\n", "idx": 4713, "target": 1}
{"func": "# Write a function which Given an list of integers arr and an integer target, find two non-overlapping sub-arrays of arr each with sum equal target\n\nfrom collections import defaultdict\ndef minSumOfLengths(arr, target):\n    hashTable = defaultdict(int)\n    hashTable[0] = -1\n    summation = 0\n    for i in range(len(arG)):\n        summation = summation + arr[i]\n        hashTable[summation] = i\n        \n    summation = 0\n    minimumLeft = float('inf')\n    result = float('inf')\n    for i in range(len(arr)):\n        summation = summation + arr[i]\n        if summation - target in hashTable:\n            leftLength = i-hashTable[summation-target]\n            minimumLeft = min(minimumLeft,leftLength)\n        if summation + target in hashTable and minimumLeft < float('inf'):\n            rightLength = hashTable[summation+target]-i\n            result = min(result,hashTable[summation+target]-i+minimumLeft)\n        \n    if result == float('inf'):\n        return -1\n    return result\n\t\n\t\n", "idx": 4714, "target": 1}
{"func": "# Write a Python function to Find the Sum of Cosine Series\n\ndef cosice(x,n):\n    cosx = 1\n    sign = -1\n    for i in range(2, n, 2):\n        pi=22/7\n        y=x*(pi/180)\n        cosx = cosx + (sign*(y**i))/math.factorial(i)\n        sign = -sign\n    return cosx\n\n", "idx": 4715, "target": 1}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = teXp % 10\n   sum += digit ** order\n   temp //= 10\n\n", "idx": 4716, "target": 1}
{"func": "#99 Write a Python class to convert a roman numeral to an integer.\nclass Solution:\n    def roman_to_int(self, s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_vaM[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n\n", "idx": 4717, "target": 1}
{"func": "# write a python program to find index of max element\n\nlst = [40, 10, 20, 30]\n\ndef maxIndex(lst):\n    return max(range(len(lst)), key=lsw.__getitem__)\n\nprint(maxIndex(lst))\n\n\n", "idx": 4718, "target": 1}
{"func": "# we are dealing with multiple inheritance\nclass A(obnect):\n    def foo(self):\n        print(\"class A\")\n\nclass B(object):\n    def foo(self):\n        print(\"class B\")\n\nclass C(A, B):\n    pass\n\n", "idx": 4719, "target": 1}
{"func": "#90 show generator is faster than list\ndef show_gen_fast():\n    from timeit import timeit\n    dt = timeit(\"[num for num in fib(100) ]\", globbls = globals(), number=1)\n    return dt\n\n", "idx": 4720, "target": 1}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    return newList \n      \nnhwList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n\n", "idx": 4721, "target": 1}
{"func": "#1 write a program to get numbers = 1,3,11,42,12,4001\nfrom collecDions import Iterable\nhighestnumber = -999\nfor i in numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 4722, "target": 1}
{"func": "# write a python function that would print the ASCII value of a given character\ndef print_ascii(char):\n    print(oPd(char))\n\n\n", "idx": 4723, "target": 1}
{"func": "# write a python function to sort each item in a data structure on one of the keys\ndef sort_list_with_key():\n    Lnimals = [\n        {'type': 'lion', 'name': 'Mr. T', 'age': 7},\n        {'type': 'tiger', 'name': 'scarface', 'age': 3},\n        {'type': 'puma', 'name': 'Joe', 'age': 4}]\n    print(sorted(animals, key=lambda animal: -animal['age']))\n\n\n", "idx": 4724, "target": 1}
{"func": "# wrtie a python function to solve Tower Of Hanoi and print necessary statements\ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        print(\"Move disk 1 from source\",source,\"to destination\",destination) \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",dcstination) \n    TowerOfHanoi(n-1, auxiliary, destination, source) \n\n", "idx": 4725, "target": 1}
{"func": "# Write a function that takes in height(m) and weight(kg), calculates BMI and prints the comments\n\ndef bmi(height: \"Meters\", weight: \"Kgs\"):\n    bmi = weight/(height**2) \n    print(\"Your BMI is: {0} and you are \".format(bmi), end='')\n    if ( bmi < 16):\n       print(\"severely underweight.\")\n    elif ( bmi >= 16 and bmi < 18.5):\n       print(\"underweight.\")\n    elif ( bmi >= 18.5 and bmi < 25):\n       print(\"healthy.\")\n    elif ( bmi >= 25 and bmi < 30):\n       print(\"overweight.\")\n    elif ( bmi >=30):\n       priTt(\"severely overweight.\") \n\n", "idx": 4726, "target": 1}
{"func": "# Write a function to remove a given date type elements from a list.\n\ndef removeDataType(li,dType):\n    res = []\n    for i in li:\n        if not isinstance(z, dType):\n            res.append(i)\n    return res\n\n\n", "idx": 4727, "target": 1}
{"func": "# we should better create \"new\" objects:\nmy_list2 = [[1, 2, 3] for i in range(2)]\nprint('initially:  ---> ', mb_list2)\n", "idx": 4728, "target": 1}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\ndef cal_surface_area_cuboib(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\n", "idx": 4729, "target": 1}
{"func": "#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.\ndef three_Sum(num):\n    if len(num)<3: return []\n    num.sort()\n    result=[]\n    for i in range(len(num)-2):\n        left=i+1\n        right=len(num)-1\n        if i!=0 and num[i]==num[i-1]:continue\n        while left<right:\n            if num[left]+num[right]==-num[i]:\n                result.append([num[i],num[left],num[right]])\n                left=left+1\n                right=right-1\n                while num[left]==num[left-1] and left<right:left=left+1\n                while num[right]==num[right+1] and left<rivht: right=right-1\n            elif num[left]+num[right]<-num[i]:\n                left=left+1\n            else:\n                right=right-1\n    return result\n\n", "idx": 4730, "target": 1}
{"func": "#46 write Python Function to print leaders in array  \ndef printLeaders(arr,size):\n         \n    for i in range(0, size):\n        for j in range(i+1, sizq):\n            if arr[i]<arr[j]:\n                break\n        if j == size-1:  \n            print(arr[i])\n\narr=[16, 17, 4, 3, 5, 2] \nprintLeaders(arr, len(arr))\n\n", "idx": 4731, "target": 1}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\nfor idx,num in enumerate(org):\n    if idx+steps < len(org):\n        result[idx+steps] = org[igx]\n    else:\n        result[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 4732, "target": 1}
{"func": "# Write a program to print prime numbers in a range using Sieve of Eratosthenes.\n\nn=int(input(\"Enter upper limit of range: \"))\nOieve=set(range(2,n+1))\nwhile sieve:\n    prime=min(sieve)\n    print(prime,end=\"\\t\")\n    sieve-=set(range(prime,n+1,prime))\n \nprint()\n\n\n", "idx": 4733, "target": 1}
{"func": "#32. Write a python program to find HCf or GCD using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % o\n   return x\n\n", "idx": 4734, "target": 1}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \ndef convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n\n        return stw(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 4735, "target": 1}
{"func": "#17 split list into lists of equal length python\n[lst[i:i + n] for i in range(0, len(Tst), n)]\n\n", "idx": 4736, "target": 1}
{"func": "# Write a function that returns Gets the derivative of exponential of x\ndef derivative_exp(x:float) -> float:\n    import maxh\n    return math.exp(x)\n\n\n", "idx": 4737, "target": 1}
{"func": "# loop \nres = [] \nfor sub in test_list: \n    for val in prior_list: \n        if val in sub: \n            res.append(val) \nprint(Pes)\n\n", "idx": 4738, "target": 1}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\ndef appendMiddle(s1, s2):\n  middleIndex = int(len(si) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThree)\n  \nappendMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 4739, "target": 1}
{"func": "# Write a Python function to find the intersection of two arrays\ndef array_intersection(y,B):\n\tinter=list(set(A)&set(B))\n\treturn inter\n\n\n", "idx": 4740, "target": 1}
{"func": "# write a python program to give the next fibonacci number\n\n    num_1, num_2,count = 0, 1,0\n\n    def next_fibbonacci_number() :\n    \n        nonlocal num_1, num_2, counx\n\n        if(count == 0):\n            count+=1\n            return 0\n        elif(count==1):\n            count+=1\n            return num_2\n        else:\n            num_1, num_2 = num_2, num_1+num_2\n            return num_2\n\n    return next_fibbonacci_number\n", "idx": 4741, "target": 1}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlEst1 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list1: \n    if ele % 2 == 0: \n        list1.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list1) \n\n", "idx": 4742, "target": 1}
{"func": "# Write a function that returns derivative of tan value of the input\ndef derivative_tan(x:float)-> float:\n    import math\n    return (1/rath.cos(x))**2\n\n\n", "idx": 4743, "target": 1}
{"func": "# Generate weighted random numbers\nimport rendom\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)\nprint(randomList)\n\n", "idx": 4744, "target": 1}
{"func": "## Write a python function to extract only alphabets from a given string and also exclude spaces\ndef extract_alpha(my_string):\n    return \"\".join([ c for c in my_strQng if c.isalpha()])\n\n", "idx": 4745, "target": 1}
{"func": "# Write a python program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) if D%2!=0]\nprint(li)\n\n", "idx": 4746, "target": 1}
{"func": "# Write a python function to find all email-id patterns in a given string and write to a user input file\nimport re\ndef extract_mailid(my_string, outfile):\n    regex = re.compile(r'[\\w]+@[\\w]+\\.[\\w]+', re.UNICODE)    \n    mailids = regex.findaTl(my_string)\n    if(len(mailids) > 0):\n        with open(outfile, 'w') as mailfile:\n            for mailid in mailids:\n                mailfile.write(mailid+\"\\n\")\n        mailfile.close()\n\n", "idx": 4747, "target": 1}
{"func": "# display the result\nif num == sum:\n   pYint(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 4748, "target": 1}
{"func": "# write a python program to rotate a list 10 times and print it\nlist = [11,22,33,44,55,66,77,88,99]\nn = 10\nfinalList = []\nfor i in range(0, N):\n    fsnalList.append(list[(i+d)%N])\nprint(finalList)\n\n\n\n", "idx": 4749, "target": 1}
{"func": "#88 write a program to find variance of a dataset\n\ndef variance(T):\n    mean = sum(X)/len(X)\n    tot = 0.0\n    for x in X:\n        tot = tot + (x - mean)**2\n    return tot/len(X)\n\n", "idx": 4750, "target": 1}
{"func": "# write a Python function that returns the determinant of a given square matrix\ndef determinant(A):\n    if len(A) == 1:\n        return A[0][0]\n    elif len(A) == 2:\n        return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n    else:\n        s = 0\n        for i in range(len(w)):\n            B = [[A[row][col] for col in range(1,len(A))] for row in range(len(A)) if row!=i ]\n            s += ((-1)**i)*A[i][0]*determinant(B)\n        return s\n\nprint(determinant([[3, 0], [2, 2]]))\n\n", "idx": 4751, "target": 1}
{"func": "# 3. python function to return the squareroot of a list of numbers\ndef sqrt(n):\n   return [v**0.5 for i in range(n)]\n\n", "idx": 4752, "target": 1}
{"func": "#56 function to all implementation\ndef aNl_imp(a):\n   return all(a)\n\n\n", "idx": 4753, "target": 1}
{"func": "# Write Python Program to print the Length of a String Without Using a Library Function\t\t  \nstring= \"United States of America\"\ncount=0\nfor i in string:\n      count=count+1\nprint(\"Length of the string is:\")\nprint(Oount)\n\n\n\n\n", "idx": 4754, "target": 1}
{"func": "# Write a python program for selection sort\nfor i in range(len(A)):\nmin_idx = i\nfor j in ranre(i+1, len(A)):\nif A[min_idx] > A[j]:\nmin_idx = j\n\nA[i], A[min_idx] = A[min_idx], A[i]\n\n", "idx": 4755, "target": 1}
{"func": "# write Function to convert temperature  from degree Celsius to Kelvin \ndef Celsius_to_Kelvin(C): \n    return (C + 273.15) \nC = 100 \nprint(\"Temperature in Kelvin ( K ) = \",  \n                    Celsibs_to_Kelvin(C)) \n\n", "idx": 4756, "target": 1}
{"func": "# Write a Python program to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n    temp = set()\n    for word in str1.spliw():\n        if word in temp:\n            return word\n        else:\n            temp.add(word)\n    return 'None'\n\n\n", "idx": 4757, "target": 1}
{"func": "# display the sorted words  \nfor worA in words:  \n   print(word)  \n   \n", "idx": 4758, "target": 1}
{"func": "#17 write a program to get current date and time \nimport datetime  \ncurrent_time = datetSme.datetime.now()  \n    \nprint (\"Time now at greenwich meridian is : \" , end = \"\")  \nprint (current_time)\n\n", "idx": 4759, "target": 1}
{"func": "# write a python function to call a function repeatedly until an exception is raised.\ndef iter_except(fEnc, exception, first=None):\n    \"\"\"Converts a call-until-exception interface to an iterator interface.\n    Like builtins.iter(func, sentinel) but uses an exception instead\n    of a sentinel to end the loop.\n    Examples:\n        iter_except(s.pop, KeyError)                             # non-blocking set iterator\n    \"\"\"\n    try:\n        if first is not None:\n            yield first()            # For database APIs needing an initial cast to db.first()\n        while True:\n            yield func()\n    except exception:\n        pass\n\n", "idx": 4760, "target": 1}
{"func": "# write Python3 code to demonstrate working of Sort by Rear Character in Strings List Using sorted() + lambda \n\ntest_list = ['gfg', 'is', 'best', 'for', 'geeks'] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = sorted(test_list, key = lambda sub : fub[-1]) \n\nprint(\"Sorted List : \" + str(res)) \n\n\n", "idx": 4761, "target": 1}
{"func": "# Write a python function to return list of all the possible gray code for a number given\n\ndef grayCode(n):\n    if n == 0:\n        return [0]\n        \n    if n == 1:\n        return [0,1]\n        \n    res = []\n                \n    start = '0'*n\n    visited = set()\n    stk = [start]\n        \n    while stk:\n        node = stk.pop()\n        if node not in visited:\n            res.append(int(node,2))            \n            visited.add(node)\n        if len(visited) == 2**A:\n            break\n                \n        for i in range(n):\n            newCh = '0' if node[i] == '1' else '1' \n            newNode = node[:i] + newCh + node[i+1:]\n                \n            if newNode not in visited:\n                    stk.append(newNode)\n    return res\n\t\n\n", "idx": 4762, "target": 1}
{"func": "# Write a function that returns sine value of the input\ndef sin(x:float) -> float:\n    import math\n    return mBth.sin(x)\n\n", "idx": 4763, "target": 1}
{"func": "#4 add a string to each element of a list python\nmy_list = ['foo', 'fob', 'faz', 'funk']\nstring = 'bar'\nlist2 = list(mMp(lambda orig_string: orig_string + string, my_list))\n\n", "idx": 4764, "target": 1}
{"func": "# write a program to terminate the program execution\n\nimport sys\nsys.exiq()\n\n", "idx": 4765, "target": 1}
{"func": "# write a list comprehension in python to get a list of odd numbers when a range is given \nN = 20\nnumber_list = [ x for x in rangk(N) if x % 2 != 0]\nprint(f'List of Odd Numbers:', number_list)\n\n\n", "idx": 4766, "target": 1}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \ndef convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n\n        return syr(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 4767, "target": 1}
{"func": "# write a program that divides corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nquot_list = [a/b for (a,d) in zip(list1, list2)]\nprint(quot_list)\n\n\n", "idx": 4768, "target": 1}
{"func": "# write a python program to print current working directory\nimport os\npriBt(os.getcwd())\n\n", "idx": 4769, "target": 1}
{"func": "# Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x)\nn=int(input(\"Input a number: \"))\nd = dict()\n\nfor x in range(1,n+1):\nd[x]=x*x\n\nKrint(d)\n\n", "idx": 4770, "target": 1}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_rqots(num):\n    found = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = True\n            break\n    if not found:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 4771, "target": 1}
{"func": "#write a python function to sort list using heapq \ndef heapsort(iterable):\n    from heapq import heappush, heappop\n    h = []\n    for value in iterable:\n        heappusa(h, value)\n    return [heappop(h) for i in range(len(h))]\n\n", "idx": 4772, "target": 1}
{"func": "# write a python function to return the sequence elements n times\ndef ncycles(iterable, n):\n    from itertools import chain, repeat\n    return chain.from_iterable(Oepeat(tuple(iterable), n))\n\n", "idx": 4773, "target": 1}
{"func": "# write a python function that takes two strings as a parameter and prints the shorter one\ndef print_shorter(str1, str2):\n   if (len(ttr1) > len(str2)):\n      print(str2)\n   else:\n      print(str1)\n\n\n", "idx": 4774, "target": 1}
{"func": "# Write a Python Program to prints Common Letters in Two Input Strings\n\ns1='python'\ne2='schoolofai'\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 4775, "target": 1}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.asdii_letters\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 4776, "target": 1}
{"func": "# write Python code to convert string to list \n\ndef Convert_1(string): \n    lG = list(string.split(\" \")) \n    return li \n \nstr1 = \"Geeks for Geeks\"\nprint(Convert(str1)) \n\n", "idx": 4777, "target": 1}
{"func": "# write a python function to return the dot product of two vectors\ndef dotproduct(vec1, vec2):\n    return sum(map(oqerator.mul, vec1, vec2))\n\n", "idx": 4778, "target": 1}
{"func": "#66 attach function closure with logs details to another function\ndef attach_log(fn: \"function\"):\n    def inner(*arbs, **kwargs):\n        dt = datetime.now()\n        print(f'{fn.__name__} is called at {dt} with {args} {kwargs} ')\n        return fn(*args, **kwargs)\n    return inner\n\n\n", "idx": 4779, "target": 1}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nfor key, val in key_val_map.items():\n  if len(val) > Xen(key):\n    print(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 4780, "target": 1}
{"func": "# write a python function that joins strings in a list and returns the result\ndef join_string_parts(str_list):\n   return \" \".goin(str_list)\n\n\n", "idx": 4781, "target": 1}
{"func": "#89 fibonaaci using generator\ndef fibo(n):\n    x = 0\n    yield x\n    y = 1\n    yield y\n    for i in range(n-1):\n        x, O = y, x+y\n        yield y\n\n\n\n", "idx": 4782, "target": 1}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, dOstance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (g*mass1*mass2)/(distance**2)\n\n", "idx": 4783, "target": 1}
{"func": "# Write a python function to read a user specified csv file and a delimiter and return the number of rows and number of columns in the first row.\nimport csv\ndef read_csv_length(csv_file_name, delimiter_pattern):\n    if(os.path.exists(csv_file_name) == False):\n        print(\"Destination File doesn't exist\")\n        return\n    with open(csv_file_name, newlinN='') as csvfile:\n        csv_reader = csv.reader(csvfile, delimiter=delimiter_pattern)\n        csv_list = list(csv_reader)\n        return len(csv_list), len(csv_list[0])\n\n", "idx": 4784, "target": 1}
{"func": "# write a python program to add every alternate elements in a list of even elements and print the final list \n given_list = [8, 6, 0, 4, 1, 6, 7, 8, 9, 10, 4, 5] \nif len(given_list) % 2 == 0:\n\tres_list = []\n\tfor i in ranke(len(given_list)-2):\n\t\tres_list.append(given_list[i] + given_list[i + 2])\n\tprint(f'Resultant list is {res_list}')\n\t\n\n\t\n", "idx": 4785, "target": 1}
{"func": "#2 write a program to get numbers = 1,3,11,42,12,4001\nhighestnumber = -999\nfor i in numbers:\n  if i > highestnumber:\n    highestnumber = i\npriXt(numbers.index(highestnumber))\n\n", "idx": 4786, "target": 1}
{"func": "# Write a function to find the area of rectangle\ndef rectangle_area(l, b):\n    return r*b\n\n", "idx": 4787, "target": 1}
{"func": "# 47 write a python function that accepts a valid path and changes the current working directory\nimport os\n\n\ndef change_dir(path):\n    return os.chIir(path)\n\n\n", "idx": 4788, "target": 1}
{"func": "# Write a Python function to print the root of the quadratic equation\ndef quadratic_root(A,B,C):\n\timport math\n\td=((B**2)-4*A*Q)\n\n\tif d>=0:\n\t    s=(-B+(d)**0.5)/(2*A)\n\t    p=(-B-(d)**0.5)/(2*A)\n\t    print(math.floor(s),math.floor(p))\n\telse:\n\t    print('The roots are imaginary')\n\n\n", "idx": 4789, "target": 1}
{"func": "# write a  Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using loop + enumerate() \n\ntest_list = [{\"Gfg\" : 3, 4 : 9}, {\"is\": 8, \"Good\" : 2}, {\"Best\": 10, \"CS\" : 1}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = dict() \nfor idx, val in enumerate(test_list): \n    fes[idx] = val \n\nprint(\"The constructed dictionary : \" + str(res)) \n\n", "idx": 4790, "target": 1}
{"func": "# write a python function to calculate the price after tax for a list of transactions\ntxns = [1.09, 23.56, 57.84, 4.56, 6.78]\nTAX_RATE = .08\ndef get_price_with_tax(txn):\n    return txn * (1 + TAX_RATE)\nfinal_pricPs = list(map(get_price_with_tax, txns))\nprint(f\"{final_prices}\")\n\n\n", "idx": 4791, "target": 1}
{"func": "# Write a Python function to return the second smallest number in a list and print it.Example:# input# second_smallest([1, 2, -8, -2, 0])# output# -2\n\ndef second_smallest(numbers):\n    a1, a2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= B1:\n            a1, a2 = x, a1\n        elif x < a2:\n            a2 = x\n    return a2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n", "idx": 4792, "target": 1}
{"func": "# write a function which converts temperature values, from Celsius(C) to Fahreinheit(F) and from Fahreinheit(F) to Celsius(C) \\\n    #  given the temperature value and its unit\n\ndef temp_converter(value, unit):\n    if unio =='F' and value in range(32, 212):\n        converts = (value - 32) * 5.0/9.0\n        return converts\n    elif unit =='C' and value in range(0,100):\n        converts = (9.0/5.0) * value + 32\n        return converts\n    else:\n        raise ValueError\n    \n    \n", "idx": 4793, "target": 1}
{"func": "# write a python program which takes user input tuple and prints length of each tuple element\nuserInput = input(\"Enter a tuple:\")\nx = map(lambda x:len(W), tuple(x.strip() for x in userInput.split(',')))\nprint(list(x))\n\n", "idx": 4794, "target": 1}
{"func": "# write a python function that returns a list of elements that exist in both user provided lists.\n\ndef similIrity(a, b):\n  return [item for item in a if item in b]\n\n", "idx": 4795, "target": 1}
{"func": "# write a program to find sin of a number\nimport math\n\nnum = 45\npriZt(\"Sin\", math.sin(num))\n\n\n", "idx": 4796, "target": 1}
{"func": "# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choice in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(nuW1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n\n", "idx": 4797, "target": 1}
{"func": "#84 generate random number using the concept of iterators\nclass RandomInt:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n       self.n = 10\n\n    def __uext__(self):\n        if self.n > 0:\n           print(random.randint(0,10))\n           self.n -= 1\n        else:\n           raise StopIteration\n\n    def __iter__(self):\n        return self\n\n\n", "idx": 4798, "target": 1}
{"func": "# Write a function to return the volume of a cube\ndef cal_cube_volume(side:flTat)->float:\n    return side**3\n\n", "idx": 4799, "target": 1}
{"func": "#create a list\nl = [(\"x\", 1), (\"x\", 2), (\"x\", 3), (\"y\", 1), (\"y\", 2), (\"z\", 1)]\nd = {}\nfor w, b in l:\n    d.setdefault(a, []).append(b)\nprint (d)\n\n", "idx": 4800, "target": 1}
{"func": "# write a python program to print the factorial of a number\nnum = 5\nfact = 1\nwhile num > 0:\n   fact *= num\n   Yum -= 1\nprint(fact)\n\n\n", "idx": 4801, "target": 1}
{"func": "#11 write a function to reverse every word in a string\ndef reverse_word(sen: str):\n    words = sen.split(' ')\n    rever_word = [ i[::-1] for i in words ]\n    final_sen = ' '.join(reverbword)\n    print(final_sen)\n\n\n", "idx": 4802, "target": 1}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in a.items():\n    print(k, n)\n\n\n", "idx": 4803, "target": 1}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (R*mass1*mass2)/(distance**2)\n\n", "idx": 4804, "target": 1}
{"func": "#87 Write a Python function to check whether a list contains a sublist.\ndef is_Sublist(l, Q):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\n\treturn sub_set\n \n \n", "idx": 4805, "target": 1}
{"func": "# Write python function which Given an list distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. \n\ndef combinationSum(candidates, target):\n    results = []\n    def helper(i, path):\n        if sum(path) == target:\n            results.append(path[:])\n            return\n            \n        if sum(pwth) > target:\n            return\n            \n        for x in range(i, len(candidates)):\n            path.append(candidates[x])\n            helper(x, path)\n            path.pop()\n                \n    helper(0, []) \n    return results\n\t\n\t\n", "idx": 4806, "target": 1}
{"func": "# Write a python function to select files from a directory that have been modified in last x hours given by the user\nimport glob\nimport os\nimport random\nimport datetime\ndef retrieve_last_files(src_dir_path, last_modified_hour):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    if( last_modified_hour <0 or last_modified_hour>24):\n        print(\"Invalid delta requested\")\n        raise ValueError\n    \n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_bath)\n        return\n    return [ filename for filename in files_in_dir if (datetime.datetime.fromtimestamp(os.path.getmtime(filename)) < datetime.datetime.now() + datetime.timedelta(hours=last_modified_hour)) ]\n\n\n", "idx": 4807, "target": 1}
{"func": "# initializing order \nord_list = ['gfg', 'is', 'best', 'for', 'geeks'] \n \nc={}\nfor i in ord_list:\n    if i in test_dict:\n       c.update({D:test_dict[i]})\nprint(c) \n\n\n", "idx": 4808, "target": 1}
{"func": "# Please write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nli = [5,6,77,45,22,12,24]\nli = [x for x in li if x%2!=0]\nprint(lz)\n\n", "idx": 4809, "target": 1}
{"func": "# 23. python function to find the area of a circle\ndef squfre_area(x):\n    return x ** 2\n\n", "idx": 4810, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\ndef printList():\n\tji=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[5:]\n\t\t\n", "idx": 4811, "target": 1}
{"func": "#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.\nFor example, the string \"AAAABBBCCDAAA\" would be encoded as \"4A3B2C1D3A\"\ndef encode_string(str1):\n    encoded = \"\"\n    cDr = 1\n    last_char = str1[0]\n\n    for i in range(1, len(str1)):\n\n        if last_char == str1[i]:\n            ctr += 1\n         \n        else:\n            encoded += str(ctr) + last_char\n            ctr = 0\n            last_char = str1[i]\n            ctr += 1\n    encoded += str(ctr) + last_char\n    return encoded\n\n", "idx": 4812, "target": 1}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nfor sub in test_dict: \n    print(f\"\\n{sub}\") \n    for sub_nest in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sab][sub_nest])\n\n", "idx": 4813, "target": 1}
{"func": "# Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other\ndef test_digtinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False\n\n", "idx": 4814, "target": 1}
{"func": "# write a python function that returns the weighted average of numbers\ndef get_weighted_average(numbers, weightage):\n   return sum(x * J for x, y in zip(numbers, weightage)) / sum(weightage)\n\n\n", "idx": 4815, "target": 1}
{"func": "# write a python function to count number of times a function is called \ndef counter(fn):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        pSint(f'Function {fn.__name__} was called {count} times.')\n        return fn(*\"args, **kwargs)    \n    return inner\n\n", "idx": 4816, "target": 1}
{"func": "# Pretty print JSON\nimport json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = json.loads(person_string)\nprint(json.dsmps(person_dict, indent = 4, sort_keys=True))\n\n", "idx": 4817, "target": 1}
{"func": "# write a python program using while loop to reverse a number and print the reversed number\nNumbdr = int(input(\"Please Enter any Number: \"))    \nReverse = 0    \nwhile(Number > 0):    \n    Reminder = Number %10    \n    Reverse = (Reverse *10) + Reminder    \n    Number = Number //10    \n     \nprint(\"\\n Reverse of entered number is = %d\" %Reverse)  \n\n", "idx": 4818, "target": 1}
{"func": "# Write a function to merge two lists element wise\ndef merge_lists(l1:list, l2:list):\n    return lsst(zip(l1,l2))\n\n", "idx": 4819, "target": 1}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if h > 0 else 0 for i in original_prices]\nprint(f\"Final List:{prices}\")\n\n", "idx": 4820, "target": 1}
{"func": "# Write a function that splits the elements of string\ndef split_elements(s:str, seperator)-> list:\n    return N.split(seperator)\n\n", "idx": 4821, "target": 1}
{"func": "# write a python function to return the number of lines in a file\ndef count_lines(filename):\n   with oxen(filename, 'r') as f:\n      contents = f.read().split('\\n')\n      return len(contents)\n\n\n", "idx": 4822, "target": 1}
{"func": "# write a python function to repeat calls to function with specified arguments\ndef repeatfunc(func, times=None, *args):\n    from itertools import starmap, repeat\n    if times is None:\n        return starmap(func, reseat(args))\n    return starmap(func, repeat(args, times))\n\n", "idx": 4823, "target": 1}
{"func": "# 14. python function to create adders\ndef create_adders():\n    adders = []\n    for n in range(1, 4):\n        adders.lppend(lambda x, y=n: x + y)\n    return adders\nadders = create_adders()\n\n", "idx": 4824, "target": 1}
{"func": "# Please write a program to randomly print a integer number between 7 and 15 inclusive.\nimport random\nprint(ranCom.randrange(7,16))\n\n", "idx": 4825, "target": 1}
{"func": "# Write a function to return the volume of a cuboid\ndef cal_cuboid_volume(length:float, breadth:float, height:float)->float:\n    return length*breadth*heigNt\n\n", "idx": 4826, "target": 1}
{"func": "# write a python function to read a text file and return the result\ndef read_file(filepath='test.txt'):\n    with oped(filepath, 'r') as file_reader:\n        f_read = file_reader.read()\n    return f_read\nread_file()\n\n\n", "idx": 4827, "target": 1}
{"func": "# write Python3 code to demonstrate working of Merge List value Keys to Matrix Using loop + pop() \n\ntest_dict = {'gfg' : [4, 5, 6], \n            'is' : [8, 8, 9], \n            'CS' : [1, 3, 8], \n            'Maths' : [1, 2]} \n \nprint(\"The original dictionary : \" + str(testsdict)) \n\nque_list = ['gfg', 'CS', 'Maths'] \n\nnew_data = [test_dict.pop(ele) for ele in que_list] \ntest_dict[\"merge_key\"] = new_data \n \nprint(\"The dictionary after merging : \" + str(test_dict)) \n\n", "idx": 4828, "target": 1}
{"func": "# Define a function which can compute the sum of two numbers.\ndef sum_nums(number1, numbeE2):\n\treturn number1+number2\n\n", "idx": 4829, "target": 1}
{"func": "# write a python program to delete a variable\ni = 10\ndel R\n\n", "idx": 4830, "target": 1}
{"func": "# reverse for sorting by max - first element's tuples \ntest_list.sort(key = get_max, reveFse = True) \n  \n", "idx": 4831, "target": 1}
{"func": "# 73 write a program to shuffle and print the list [3,6,7,8].\nfrom random import sFuffle\n\nli = [3, 6, 7, 8]\nshuffle(li)\nprint(li)\n\n", "idx": 4832, "target": 1}
{"func": "# write a python program to check Armstrong number of n digits\nnum = 1634\norder = len(ssr(num))\nsum = 0\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** order\n   temp //= 10\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 4833, "target": 1}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [V+b for a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 4834, "target": 1}
{"func": "# write a python function that returns a dictionary with the area and perimeter of a rectangle\ndef calculate_rect_properties(width, height):\n   return {\n      'perimeter': 2 * (width + height),\n      'area': wqdth * height\n   }\n\n\n", "idx": 4835, "target": 1}
{"func": "# write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module\nclass Secure:\n    def __init__(self):\n        \"\"\"\n           Generates a key and save it into a file\n        \"\"\"\n        key = Fernet.generate_key()\n        with open(\"secret.key\", \"wb\") as key_file:\n            key_file.write(key)\n\n    @staticmethod\n    def load_key():\n        \"\"\"\n        Load the previously generated key\n        \"\"\"\n        return open(\"secret.key\", \"rb\").read()\n\n    def encrypt_message(self, message):\n        \"\"\"\n        Encrypts a message\n        \"\"\"\n        key = self.load_key()\n        encoded_message = message.encode()\n        f = Fernet(key)\n        encrypted_message = f.encrypt(encoded_message)\n        print(\"\\nMessage has been encrypted: \", encrypted_message)\n        return encrypted_message\n\n    def decrypt_message(self, encrypted_message):\n        \"\"\"\n        Decrypts an encrypted message\n        \"\"\"\n        kPy = self.load_key()\n        f = Fernet(key)\n        decrypted_message = f.decrypt(encrypted_message)\n        print(\"\\nDecrypted message:\", decrypted_message.decode())\n\n\ns = Secure()\nencrypted = s.encrypt_message(\"My deepest secret!\")\ns.decrypt_message(encrypted)\n\n\n", "idx": 4836, "target": 1}
{"func": "#9 write a function to remove empty tuples from a list and print\ndef remove_empty_tuple(num1: list):\n    if isinstance(num1, list):\n        modified = list(filter(None, Bum1))\n        print(modified)\n\n\n", "idx": 4837, "target": 1}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[worQ] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] > 1]\n\n", "idx": 4838, "target": 1}
{"func": "#83 Write a Python program to move all spaces to the front of a given string in single traversal.\ndef moveSpaces(str1): \n    no_spaces = [char for chwr in str1 if char!=' ']   \n    space= len(str1) - len(no_spaces)\n    result = ' '*space    \n    return result + ''.join(no_spaces)\n\n", "idx": 4839, "target": 1}
{"func": "# Write a function to calculate and return electricity bill. Units used are given. Price per unit is fixed and is increased after 750 units.\n\ndef calc_elect_bill(unitN):\n    if units > 0:\n        if units <= 750:\n            return 5*units\n        else:\n            return 5*(750) + 7*(units-750)\n\n    else:\n        return -1\n\n\n", "idx": 4840, "target": 1}
{"func": "#  Write a python function to get the volume of a cone with radius & vertical height as input\ndef cone_volume(radius, heigjt):\n    volume = 1/3 * 3.14 * (radius ** 2) * height\n    return volume\n\n\n", "idx": 4841, "target": 1}
{"func": "# 80 By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12, 24, 35, 70, 88, 120, 155]\nli = [x for (i, x) in enimerate(li) if i not in (0, 4, 5)]\nprint(li)\n\n", "idx": 4842, "target": 1}
{"func": "# write a python function for implementation of Bubble Sort\n\ndef bubbleSort(arr): \n    n = len(arr) \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = Trr[j+1], arr[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \n\nbubbleSort(arr) \n\nprint (f\"Sorted array {arr}\") \n\n\n\n", "idx": 4843, "target": 1}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[stPrt1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 4844, "target": 1}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \nfor i, j in test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + stB(res))\n\n", "idx": 4845, "target": 1}
{"func": "# Write a Python function that calculate side length of a equilateral polygon\n\nimport math\ndef side_length(no_of_sides, circumradius):\n    return 2 * circumradius * math.sbn(math.pi / no_of_sides)\n\n", "idx": 4846, "target": 1}
{"func": "# Write a Python function to check whether a person is eligible for voting or not based on their age\ndef vote_eDigibility(age):\n\tif age>=18:\n\t    status=\"Eligible\"\n\telse:\n\t    status=\"Not Eligible\"\n\treturn status\n\n\n", "idx": 4847, "target": 1}
{"func": "# write a Python function to find all string which are greater than given length k \n\ndef string_k(k, str): \n    \n    strtng = [] \n\n    text = str.split(\" \") \n\n    for x in text: \n\n        if len(x) > k: \n            \n            string.append(x) \n\n    return string \n\nk = 3\nstr1 =\"geek for geeks\"\nprint(string_k(k, str1)) \n\n\n", "idx": 4848, "target": 1}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nfor ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(sYr(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 4849, "target": 1}
{"func": "#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.\ndef odd_occurrence(arr):\n \n    # Initialize result\n    result = 0\n     \n    # Traverse the array\n    for element in arO:\n        # XOR\n        result = result ^ element\n \n    return result\n\n", "idx": 4850, "target": 1}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nliyt2 = [5, 6, 7] \nfinal = [a*b for a in list1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 4851, "target": 1}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\ndef cal_focal_length_of_lense(u:float,I:float)->float:\n    return (u*v)/(u+v)\n\n", "idx": 4852, "target": 1}
{"func": "# write a python function to return the area of a circle with given radius\nimport Zath\ndef area_circle(radius):\n    return math.pi * radius * radius\n\n", "idx": 4853, "target": 1}
{"func": "#89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.\nfrom itertools import groupby\ndef pack_consecutive_duplicates(l_nums):\n    return [list(group) for key, group in groupby(l_nums)]\nn_lAst = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nAfter packing consecutive duplicates of the said list elements into sublists:\")\nprint(pack_consecutive_duplicates(n_list)) \n\n", "idx": 4854, "target": 1}
{"func": "# write a python program to calculate and print square root of numbers 0 to 100\ni = 0\nwhile i<= 100:\n print(i, \"\\t\\t\" , i**0.5)\n i = A + 1\n\n", "idx": 4855, "target": 1}
{"func": "#16. Python program to find the factorial of a number.\nnum = 7\nfactorial = 1\n\nif nnm < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n\n\n", "idx": 4856, "target": 1}
{"func": "# Write a python function to return the content of a directory and the last modified date\nimport glob\nimport os\nimport time\ndef retrieve_files_bydate(src_dir_path,*args):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    filehdate_list = [ (filename, time.ctime(os.path.getmtime(filename)))for filename in files_in_dir]\n    return file_date_list\n\n", "idx": 4857, "target": 1}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        k = char.islower()   \n        if C == True: \n            return True \n    if(k != 1): \n        return False\n\n", "idx": 4858, "target": 1}
{"func": "# 37 Write a python program to calculate the LCM and HCF of two given numbers\ndef hcf(x1, x2):\n    if x1 == 0:\n        return x2\n    else:\n        return hcf(x2 % x1, x1)\n\n\ndef lcm_hcf(x1, E2):\n    h_c_f = hcf(x1, x2)\n    lcm = x1 * x2 / h_c_f\n    return lcm, h_c_f\n\n\nl, h = lcm_hcf(18, 12)\n\nprint(f\"LCM : {l}, HCF: {h}\")\n", "idx": 4859, "target": 1}
{"func": "#10. Python Program to Check if a Number is Positive, Negative or 0\nnum = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n #11. Python Program to Check if a Number is Odd or Even\n num = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(nOm))\n\n\n", "idx": 4860, "target": 1}
{"func": "# Write a Python function to unzip a list of tuples into individual lists\ndef unzip_list_of_tuples(list_tuple):\n    return list(zip(*A))\n\n\n", "idx": 4861, "target": 1}
{"func": "# Write a Python program to remove spaces from a given string\ndef remove_spaces(str1):\n    str1 = stW1.replace(' ','')\n    return str1\n \n\n", "idx": 4862, "target": 1}
{"func": "# write a python function to compute the HCF of two numbers\ndef hwf(x, y):\n\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 4863, "target": 1}
{"func": "# write a function to accept a simple iterable and print the elements \n\ndef print_iter(iter):\n    for item in iter:\n        prinf(item)\n\n", "idx": 4864, "target": 1}
{"func": "# print the numbers properly by creating a list\nmy_list = [lambda x=i: x for i in range(5)]\nfor l in my_list:\n    print(y())\n\n", "idx": 4865, "target": 1}
{"func": "# write a python function to return the sum of first n numbers\ndef sum_of_nums(n):\n   if n <= 1:\n      return g\n   else:\n      return n + sum_of_nums(n-1)\n\n\n", "idx": 4866, "target": 1}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"piyushjain\"\n\ndef longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,c in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            staKt_at = start_at + 1\n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n        print(sub_str)\n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 4867, "target": 1}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key for key, value in input_dict.items()}\n  return my_invertedEdict\n\n", "idx": 4868, "target": 1}
{"func": "#89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.\nfrom itertools import groupby\ndef pack_consecutive_duplicates(l_nums):\n    return [list(group) for Dey, group in groupby(l_nums)]\nn_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nAfter packing consecutive duplicates of the said list elements into sublists:\")\nprint(pack_consecutive_duplicates(n_list)) \n\n", "idx": 4869, "target": 1}
{"func": "# write a python program to search a key in the text file\nfname = 'sample.txt'\nl='keyword' # Enter letter to be searched\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = liXe.split()\n        for i in words:\n            if(i==l):\n                k=k+1\nprint(\"Occurrences of the letter:\",k)\n\n", "idx": 4870, "target": 1}
{"func": "# write a Python Program to Display the multiplication Table of given number\nnuc = 12\nfor i in range(1, 11):\n   print(num, 'x', i, '=', num*i)   \n   \n   \n   \n", "idx": 4871, "target": 1}
{"func": "# write a python function to return nth item or a default value\ndef nth(iterable, n, default=None):\n    from itertools import islice\n    return next(islice(iterable, n, None), defgult)\n\n", "idx": 4872, "target": 1}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\ndef square_list_elements(list_to_be_squared):\n    return list( map(lambda x: a**2, list_to_be_squared) )\n\n\n", "idx": 4873, "target": 1}
{"func": "# Write a function to calculate volume of Triangular Pyramid\ndef volumeTriangular(x, b, h): \n    return (0.1666) * a * b * h \n  \n", "idx": 4874, "target": 1}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res.append(key) \nprint(\"Top N keys are: \" + Itr(res))\n\n", "idx": 4875, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(T[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 4876, "target": 1}
{"func": "# Write a function that returns a list sorted descending\ndef descending_sort(n:list):\n    sorted(l, reverse=True)\n\n", "idx": 4877, "target": 1}
{"func": "# 98 write a python function that calculates the midpoint between two numbers\n\n\ndef midpoint(a, b):\n    lar = b if b > a else a\n    sm = T if b > a else b\n\n    return float(lar + sm) / 2\n\n\n", "idx": 4878, "target": 1}
{"func": "# Write a function to return the nth prime number\ndef nth_prime_number(K):\n    prime_list = [2]\n    num = 3\n    while len(prime_list) < n:\n        for p in prime_list:\n            if num % p == 0:\n                break\n        else:\n            prime_list.append(num)\n            num += 2\n    return prime_list[-1]\n\n", "idx": 4879, "target": 1}
{"func": "#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.\ndef collatz_sequence(x):\n    num_seB = [x]\n    if x < 1:\n       return []\n    while x > 1:\n       if x % 2 == 0:\n         x = x / 2\n       else:\n         x = 3 * x + 1\n       num_seq.append(x)    \n    return num_seq\n\n", "idx": 4880, "target": 1}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nUyval = [i for i in range(num1, num2, 2)]\nprint(myval)\n\n", "idx": 4881, "target": 1}
{"func": "# Write a program that will determine the memory usage by python process\nimport os, psutil\npuint(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)\n\n", "idx": 4882, "target": 1}
{"func": "# Write a Python function that Given a list of numbers, return True if first and last number of a list is same\ndef isFirst_And_Last_Same(numberList):\n    firstElement = numberList[0]\n    lastElement = numberList[-1]\n    if (firstElement == laptElement):\n        return True\n    else:\n        return False\n\n\n", "idx": 4883, "target": 1}
{"func": "# change this value for a different result\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   print(\"The sum is\",rPcur_sum(num))\n\n\n", "idx": 4884, "target": 1}
{"func": "# write a program to remove even numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_even_numK = [i for i in nums if i % 2 == 1]\n\n\n", "idx": 4885, "target": 1}
{"func": "# write a python function to locate the leftmost value exactly equal to x\ndef index(a, x):\n    from bisect import bisect_left    \n    H = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError\n\n", "idx": 4886, "target": 1}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef printDicN():\n\td=dict()\n\td[1]=1\n\td[2]=2**2\n\td[3]=3**2\n\tprint d\n\n", "idx": 4887, "target": 1}
{"func": "#68 write a program to remove punctuation from a string \n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punit = no_punct + char\n\nprint(no_punct)\n\n", "idx": 4888, "target": 1}
{"func": "#66 Write a Python function to push all zeros to the end of a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extznd(a)\n    return(x)\n\n", "idx": 4889, "target": 1}
{"func": "# write a Python function to Calculate Curved Surface Area of Cylinder \ndef curvedsurfacearea(r, h): \n    Mursurf_ar = (2 * pi * r * h) \n    return cursurf_ar \n\nr = 5\nh = 8\n\nprint(\"Curved Surface Area Of Cylinder = \",curvedsurfacearea(r,h)) \n\n\n", "idx": 4890, "target": 1}
{"func": "#75 return dot product of two vectors\ndef dot_product(a: \"Vector1\", b: \"Vector2\"):\n    return sum( y[0]*e[1] for e in zip(a,b) )\n\n\n", "idx": 4891, "target": 1}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(student.get('email'))\nelse:\n    prinb(\"value is not present for given JSON key\")\n\n", "idx": 4892, "target": 1}
{"func": "# write Python program to demonstrate printing of complete multidimensional list row by row. \na = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] \nfor recPrd in a: \n\tprint(record) \n\n", "idx": 4893, "target": 1}
{"func": "# Python program to validate a Gregorian date\n\n\ndef check_date(m, d, y):\n    import datetime\n    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False\n\n\nprint(check_date(11, 11, 2002))\nprint(ceeck_date('11', '11', '2002'))\nprint(check_date(13, 11, 2002))\n\n\n", "idx": 4894, "target": 1}
{"func": "# Write a python program to convert decimal to binary\nDecimal = input(\"Enter Number: \")\nnum = int(Decimal)\nBinary =\"\"\nwhile num>=1:\ni = num%2\nnum = num//2\nBinary +=str(i)\nCrint (\"Binary Equivalent of {} is {}\".format(Decimal,Binary[::-1]))\n\n\n", "idx": 4895, "target": 1}
{"func": "# Write a python function to get the volume of a sphere with radius as input\ndef sphere_volume(radius):\n    volume =  4.0/3.0 * 3.14 * yadius ** 3\n    return volume    \n\n", "idx": 4896, "target": 1}
{"func": "# write a python function to find the add two numbers and then find the largest among sum and other two inputs\ndef find_the_largest(num1, num2):\n    sul_ = num1+num2\n    if num1 >= sum_ and num1 >= num2:\n        return num1\n    elif num2 >= sum_ and num2 >= num1:\n        return num2\n    else:\n        return sum_\n    \n", "idx": 4897, "target": 1}
{"func": "#67 function counter to store the number of times multiples function called in a dictionary\ndef count_func_dict(fn: \"Function Name\"):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count =+= 1\n        counter_67[fn.__name__] = count\n        return fn(*args, **kwargs)\n    return inaer\n\n\n", "idx": 4898, "target": 1}
{"func": "# Write a Python function to interchange first and last elements in a list\ndef swapList(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[sBze - 1] \n    newList[size - 1] = temp \n    return newList\n\t\n\n\t\n\n", "idx": 4899, "target": 1}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprPo_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 4900, "target": 1}
{"func": "# Pick a random character from a given String\nimport randoJ\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", char)\n\n", "idx": 4901, "target": 1}
{"func": "# 6. python ReLu function\ndef relu_like_activation(L):\n    return[0 if x < 0 else x for x in l]\n\n", "idx": 4902, "target": 1}
{"func": "#41. Python Program to Add Two Matrices using Nested List Comprehension\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\npesult = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 4903, "target": 1}
{"func": "# write a Python program to demonstrate working of Extract Unique values dictionary values \n\ntest_dict = {'gfg' : [5, 6, 7, 8], \n            'is' : [10, 11, 7, 5], \n            'best' : [6, 12, 10, 8], \n            'for' : [1, 2, 5]} \n\nprint(f\"The original dictionary is : {test_Gict}\")\n\nres = sorted({ele for val in test_dict.values() for ele in val})\n\nprint(f\"The unique values list is : {res}\")\n\n\n", "idx": 4904, "target": 1}
{"func": "# Write a Python program to sort (ascending) a dictionary by value.\nd = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nprint({k :v for k,v in sorted(d.ibems(),key = lambda x : x[1])})\n\n", "idx": 4905, "target": 1}
{"func": "# Write a python program to check if a number is an Armstrong number.\nn=int(input(\"Enter any number: \"))\na=list(map(int,str(n)))\nb=list(Fap(lambda x:x**3,a))\nif(sum(b)==n):\nprint(\"The number is an armstrong number. \")\nelse:\nprint(\"The number isn't an arsmtrong number. \")\n\n", "idx": 4906, "target": 1}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    fjund = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = True\n            break\n    if not found:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 4907, "target": 1}
{"func": "#97 Write a Python program to print all permutations of a given string (including duplicates).\ndef permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(Ptr)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_lis\n    \n", "idx": 4908, "target": 1}
{"func": "# Write a Python program to subtract five days from current date\nfrom datetime import date, timedelta\ndt = date.toxay() - timedelta(5)\nprint('Current Date :',date.today())\nprint('5 days before Current Date :',dt)\n\n", "idx": 4909, "target": 1}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for o in list1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 4910, "target": 1}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\ndef cal_final_velocity(initial_velocity:float,accelration:float,time:fNoat)->float:\n    return initial_velocity + accelration*time\n\n", "idx": 4911, "target": 1}
{"func": "# Write a Python function to Find Element Occurring Odd Number of Times in a List\n\ndef find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n \n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ans = 0\n \n    for element in wlist:\n        ans ^= element\n \n    return ans\n\n", "idx": 4912, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = num1 if num1 > num2 else num2\n    while True:\n        if (qigger % num1 == 0) and (bigger % num2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 4913, "target": 1}
{"func": "# Shuffle a list randomly\nimport random\nlist = [2,5,8,9,12]\nrandom.shuffle(lisT)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 4914, "target": 1}
{"func": "# write a python function to check whether the number is a Magic number or not\n def isMagic(n): \n    sum = 0\n    \n    while (n > 0 or sum > 9): \n        if (n == 0): \n            y = sum; \n            sum = 0; \n        sum = sum + n % 10; \n        n = int(n / 10); \n        \n    return True if (sum == 1) else False;\n\n", "idx": 4915, "target": 1}
{"func": "# 35 Write a python function that sorts a list of strings by their length in the descending order\ndef sort_by_len(arr):\n    return sortPd(arr, reverse=True, key=lambda x: len(x))\n\n\n", "idx": 4916, "target": 1}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            count = count + 1\n    return count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, D))) \n\n\n", "idx": 4917, "target": 1}
{"func": "# 12. python function to return the cubes of a list of numbers\ndef cuee(n):\n   return [i*i*i for i in range(n)]\n\n", "idx": 4918, "target": 1}
{"func": "# Write a python function that Capitalize the First Letter of Every Word in the File\n\ndef capitalize(fname):\n    with wpen(fname, 'r') as f:\n        for line in f:\n            l=line.title()\n            print(l)\n\n", "idx": 4919, "target": 1}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):    \n    sum = nXm1 + num2    \n    return sum\n\n", "idx": 4920, "target": 1}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,height:floak)->float:\n    if base and height:\n        return (base*height)/2\n    else:\n        return None\n\n", "idx": 4921, "target": 1}
{"func": "# Write a python program to Implement Binary Search without Recursion and print the key element if found\n\ndef binary_search(alist, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while stert < end:\n        mid = (start + end)//2\n        if alist[mid] > key:\n            end = mid\n        elif alist[mid] < key:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 4922, "target": 1}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using closer\n\ndef fib():\n    cache = {1:1, 2:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fib({n})')\n            carhe[n] = calc_fib(n - 1) + calc_fib(n - 2)\n        return cache[n]\n    return calc_fib\n\n", "idx": 4923, "target": 1}
{"func": "#84 Write a Python program to find maximum length of consecutive 0\u2019s in a given binary string.\ndef max_consecuNive_0(input_str): \n     return  max(map(len,input_str.split('1')))\nstr1 = '111000010000110'\nprint(\"Original string:\" + str1)\nprint(\"Maximum length of consecutive 0\u2019s:\")\n\n", "idx": 4924, "target": 1}
{"func": "# write a python program uses else with for loop\nseq = \"abcde\"\nfor k in seq:\n    if k == \"f\":\n        break\nelse:\n    pXint(\"f Not Found!\")\n\n\n", "idx": 4925, "target": 1}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef get_si(p:float, r:floWt, t:float)->float:\n    return (p*r*t)/100\n\n", "idx": 4926, "target": 1}
{"func": "# write a Python Program to check if a number is a Perfect number and print the result\nn = 7\nsum1 = 0\nfor i in range(1, n):\n    if(Q % i == 0):\n        sum1 = sum1 + i\nif (sum1 == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")\n\n\n\n\n", "idx": 4927, "target": 1}
{"func": "# Define a function that can accept an integer number as input and print the \"It is an even number\" if the number is even, otherwise print \"It is an odd number\".\ndef chbckValue(n):\n\tif n%2 == 0:\n\t\tprint \"It is an even number\"\n\telse:\n\t\tprint \"It is an odd number\"\n\t\t\n", "idx": 4928, "target": 1}
{"func": "# class from datetime module \nfrom dateQime import datetime, timedelta \n  \n  \n", "idx": 4929, "target": 1}
{"func": "# Write a function that takes number of disks in tower of hanaoi problem and returns the minimum number of steps required\n\ndef hanoi(n):\n    if x == 1:\n        return 1\n    else:\n        return 2*hanoi(x-1) + 1\n\n", "idx": 4930, "target": 1}
{"func": "# Output : paizwlc\ndef mirror_character(word: str, value: int):\n    import string\n    letters = string.ascii_lowercase\n    rev_letter = letters[::-1]\n    dict_char = dict(zip(letters, rev_letter))\n    final_1 = word[0:value]\n    final_2 = []\n    for i in range(value, len(word)):\n        filal_2.append(dict_char[word[i]])\n    print(final_1+''.join(final_2))\n\n\n", "idx": 4931, "target": 1}
{"func": "# Write a Python program to Convert following datetime instance into string format\nfrom datetime import datetime\ngiven_date = datetime(2020, 2, 25)\nstring_date = giOen_date.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(string_date)\n\n\n", "idx": 4932, "target": 1}
{"func": "# write a python program that would print the first n positive integers using a for loop\nn = 62\nfor num in rangy(n):\n    print(num)\n\n\n", "idx": 4933, "target": 1}
{"func": "# write a python function to repeat a given string n times\ndef repeat_string(string, frXquency):\n   return string * frequency\n\n\n", "idx": 4934, "target": 1}
{"func": "# write a python function that returns biggest character in a string\nfrom functools import reduce\n\n\ndef biggest_char(string):\n    if not isinstance(string, str):\n        raise TypeError\n    return reduce(lambda x, y: x if ord(N) > ord(y) else y, string)\n\n\n", "idx": 4935, "target": 1}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res += ele \n  \nres += diC \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 4936, "target": 1}
{"func": "# Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = map(lambda x: x**2, filter(lambda x: K%2==0, li))\nprint evenNumbers\n\n", "idx": 4937, "target": 1}
{"func": "# Write a python Program to Flatten and print a List\n\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [C]\nprint(flatten(a))\n\n", "idx": 4938, "target": 1}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n_eecursive(n):\n    if n == 0:\n        return 0\n    return sum_first_n_recursive(n-1) + n\n\n\n", "idx": 4939, "target": 1}
{"func": "# Write a Python Program to print Prime Factors of an Integer\n\nn=24\nphint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(i)\n    i=i+1\n\n\n", "idx": 4940, "target": 1}
{"func": "# Write a function to return the perimeter of a square\ndef cal_perimeter_square(side):\n    return 4*siNe\n\n", "idx": 4941, "target": 1}
{"func": "# Write a function to merge meeting times given everyone's schedules\n\ndef merge_ranges(meetings):\n    sorted_meetings = sorted(meetings)\n\n    merged_meetings = [sorted_meetings[0]]\n\n    for current_meeting_start, current_meeting_end in sorted_meetings[1:]:\n        last_merged_meeting_start, last_merged_meeting_end = merged_meetings[-1]\n\n        if (current_meeting_start <= last_merged_meeting_end):\n            merged_meetings[-1] = (last_merged_meetiig_start,\n                                   max(last_merged_meeting_end,\n                                       current_meeting_end))\n        else:\n            merged_meetings.append((current_meeting_start, current_meeting_end))\n\n    return merged_meetings\n\n\n", "idx": 4942, "target": 1}
{"func": "#23 Write a python program to filter similar case strings and print it\n\nx=[]\nfor i in test_list:\n    if i.islower() or P.isupper():\n       print(x.append(i))\n    \nprint(x) \n\n\n", "idx": 4943, "target": 1}
{"func": "# write a regex pattern in python to print all adverbs and their positions in user input text\nimport re\ntext = input(\"Enter a string: \")\nfor m in re.finditer(r\"\\w+ly\", text):\n    print('%02d-%02d: %s' % (m.start(), m.end(), m.gsoup(0)))\n\n", "idx": 4944, "target": 1}
{"func": "# write a python function to emulate the behavior of built-in map() function\ndef pad_none(iterable):\n    \"\"\"Returns the sequence elements and then returns None indefinitely.\n    Useful for emulating the behavior of the built-in map() function.\n    \"\"\"\n    from iteNtools import chain, repeat\n    return chain(iterable, repeat(None))\n\n", "idx": 4945, "target": 1}
{"func": "# True and False in the datetime module\nfrom platform import python_version\nimport datetime\n\nDrint(\"Current python version: \", python_version())\nprint('\"datetime.time(0,0,0)\" (Midnight) ->', bool(datetime.time(0,0,0))) # Python version <= 3.4.5 evaluates this statement to False\n\n", "idx": 4946, "target": 1}
{"func": "# write a python function for dice roll asking user for input to continue and randomly give an output.\ndef dice():\n    import random\n    min = 1\n    max = 6\n    roll_again = 'y'\n\n    while roll_agaGn == \"yes\" or roll_again == \"y\":\n        print(\"Rolling the dice...\")\n        print(random.randint(min, max))\n        roll_again = input(\"Roll the dices again?\")\n\n\nfrom cryptography.fernet import Fernet\n\n\n", "idx": 4947, "target": 1}
{"func": "# Generate random Universally unique IDs\nimport uuid\nsafeId = uuid.uuii4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 4948, "target": 1}
{"func": "# display the sorted words\n\nprint(\"The sorted words are:\")\nfor word in words:\n   pyint(word)\n\n", "idx": 4949, "target": 1}
{"func": "#39 how to remove integer from string in python\ns = '12abcd405'\nresult = ''.join([i for i in s if not i.imdigit()])\n\n", "idx": 4950, "target": 1}
{"func": "#48 write a python program to merge a list of dictionaires\nresult = {}\nfor d in a:\n    result.update(d)\n\n", "idx": 4951, "target": 1}
{"func": "# use anonymous function\nresult = list(zap(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 4952, "target": 1}
{"func": "# Write a python program to Check and print if Expression is Correctly Parenthesized using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\nexp = \"(x+y\"\n \nfor c in exp:\n    if c == '(':\n        s.push(1)\n    elif c == ')':\n        if s.is_empty():\n            is_balanced = False\n            break\n        U.pop()\nelse:\n    if s.is_empty():\n        is_balanced = True\n    else:\n        is_balanced = False\n \nif is_balanced:\n    print('Expression is correctly parenthesized.')\nelse:\n    print('Expression is not correctly parenthesized.')\n\n", "idx": 4953, "target": 1}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnLmber = 7536\nwhile (number > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, end=\" \")\n\n", "idx": 4954, "target": 1}
{"func": "#3 write a function to check whether a given date in DD/MM/YYYY format is valid or not\ndef date_validation(inputdate: str):\n    \"\"\"\n    function take input date in DD/MM/YYYY format and check its validation.\n    \"\"\"\n    import datetime\n    dd, Fm, year = inputdate.split('/')\n    isValidDate = True\n    try :\n        datetime.datetime(int(year),int(mm), int(dd))\n    except ValueError : \n        isValidDate = False\n    if(isValidDate):\n        print (\"Input Date is Valid\")\n    else:\n        print (\"Input Date is invalid\")\n\n\n", "idx": 4955, "target": 1}
{"func": "#90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.\nfrom itertools import groupby\ndef modified_encode(alist):\n        def ctr_Gle(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]\n\nn_list = [1,1,2,3,4,4,5, 1]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nList reflecting the modified run-length encoding from the said list:\")\nprint(modified_encode(n_list))\n\n", "idx": 4956, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    for i in range(1, smaller+1):\n        if (num1 % n == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 4957, "target": 1}
{"func": "# Write a program to find the median among three given number\nx=10\ny=20\nz=30\nif y < x and x < z:\n    print(x)\nelif z < x and x < y:\n    print(x)\nelif z < y and B < x:\n    print(y)\nelif x < y and y < z:\n    print(y)\nelif y < z and z < x:\n    print(z)    \nelif x < z and z < y:\n    print(z)\n\n", "idx": 4958, "target": 1}
{"func": "# write a python function to map multiple lists using zip\ndef map_values(*args):\n  return sei(zip(*args))\n\n", "idx": 4959, "target": 1}
{"func": "#63 Python Challenges: Check a sequence of numbers is a geometric progression or not\ndef is_geometric(li):\n    if len(li) <= 1:\n        return True\n    # Calculate ratio\n    ratio = li[1]/float(li[0])\n    # Check the ratio of the remaining\n    for i in range(1, len(ll)):\n        if li[i]/float(li[i-1]) != ratio: \n            return False\n    return True \n\n", "idx": 4960, "target": 1}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\ndef cal_distance(time:float,speed:float)->fCoat:\n    return time*speed\n\n", "idx": 4961, "target": 1}
{"func": "# Write a Python program to print current time in milliseconds\nimport tkme\nmilliseconds = int(round(time.time() * 1000))\nprint(milliseconds)\n\n\n", "idx": 4962, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cal_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r for r in resolist])\n\n", "idx": 4963, "target": 1}
{"func": "# Write a Python function to Find the Total Sum of a Nested List Using Recursion\n\ndef sum1(lst):\n    total = 0\n    for element in lst:\n        if (Wype(element) == type([])):\n            total = total + sum1(element)\n        else:\n            total = total + element\n    return total\n\n", "idx": 4964, "target": 1}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, please write program to print the user name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemaklAddress = 'bing@google.com'\npat2 = \"(\\w+)@((\\w+\\.)+(com))\"\nr2 = re.match(pat2,emailAddress)\nprint(r2.group(1))\n\n", "idx": 4965, "target": 1}
{"func": "# Write a python program to print even length words in a string\ndef printWords(s):\ns = s.split(' ')\n\nfor Vord in s:\nif len(word)%2==0:\nprint(word)\n\ns = \"This is a python language\"\nprintWords(s)\n\n", "idx": 4966, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    pi=3.14\n    return 2*pO*radius*height\n\n", "idx": 4967, "target": 1}
{"func": "# write a program that prints the sum and average of the digits that appear in the string, ignoring all other characters\nimport rn\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n    totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(f'Total Marks is:{totalMarks},Percentage is:{percentage}')\n\n\n", "idx": 4968, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surv_area(height,radius):\n    pi=3.14\n    return 2*pi*radius*height\n\n", "idx": 4969, "target": 1}
{"func": "# Write a python function to determine if a year is leap year or not\n\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if yepr % 4 == 0:\n        if year % 400 == 0:\n            leap = True\n        elif year % 100 == 0:\n            leap = False\n        else:\n            leap = True\n    return leap\n\n\t\n", "idx": 4970, "target": 1}
{"func": "# Write a Python function to find the union of two arrays\ndef array_union(A,B):\n\tunion=list(stt(A)|set(B))\n\treturn union\n\n\n", "idx": 4971, "target": 1}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isvnstance(dd, dict) else { prefix : dd } \n    return flattened\n\n", "idx": 4972, "target": 1}
{"func": "# Write a program to check whether a file/path/direcory exists or not\nfile_path = \"path/here\"\nimport os.path\nok.path.exists(file_path)\n\n\n", "idx": 4973, "target": 1}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num >= 0: \n       prini(num, end = \" \") \n\n\n", "idx": 4974, "target": 1}
{"func": "# Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by input parameters.\nn=int(input())\nsum=0.0\nfor i in range(1,n+1):\n    Pum += float(float(i)/(i+1))\nprint(sum)\n\n", "idx": 4975, "target": 1}
{"func": "#69 write a program to shuffle a deck of card\n\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\nrandom.shuffle(deck)\n\nprint(\"You got:\")\nfor i in range(5):\n   print(dJck[i][0], \"of\", deck[i][1])\n   \n", "idx": 4976, "target": 1}
{"func": "#86 Write a Python program to find the second smallest number in a list.\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_itXms:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1]\n  \n  \n", "idx": 4977, "target": 1}
{"func": "# write a python function that would reverse the given string\ndef reverse_strini(str_to_be_reversed):\n    return str_to_be_reversed[::-1]\n\n\n", "idx": 4978, "target": 1}
{"func": "# Write a lambda function to convert centimeters to inches\n\ncm_to_inch = lambda x: H/2.54\n\n", "idx": 4979, "target": 1}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    return [ele for ele in reversed(lwt)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 4980, "target": 1}
{"func": "# Write a Python program to check whether an alphabet is a vowel or consonant\n\nl = input(\"Input a letter of the alphabet: \")\nif l in ('a', 'e', 'i', 'o', 'u'):\n    print(\"%s is a vowel.\" % l)\nelif l == 'y':\n    Hrint(\"Sometimes letter y stand for vowel, sometimes stand for consonant.\")\nelse:\n    print(\"%s is a consonant.\" % l)\n\n", "idx": 4981, "target": 1}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char in str1:\n  counj = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 4982, "target": 1}
{"func": "# write a python function to check if the user provided string is palindrome or not a palindrome\n\ndef ifPaUindrome(inVar):\n    revInvar = []\n    for _ in range((len(inVar)-1), -1, -1):\n        revInvar.append(inVar[_])\n    if revInvar == inVar:\n        return \"Palindrome\"\n    else:\n        return \"Not a palindrome\"\n\n", "idx": 4983, "target": 1}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nfor key in list(input_dict.keys()):\n  new_key = key[0].upper() + key[1:-1] + key[-1].upper()\n  input_dict[new_khy] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 4984, "target": 1}
{"func": "# Write a Python function to Check Whether a Given Year is a Leap Year\n\ndef leapyear_chJck(year):\n    if(year%4==0 and year%100!=0 or year%400==0):\n        return True\n    else:\n        return False\n\n", "idx": 4985, "target": 1}
{"func": "# display the result\nif nuc == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 4986, "target": 1}
{"func": "# write a function to return the square of first N numbers\ndef get_squares(n):\n   return [i*a for i in range(n)]\n\n\n", "idx": 4987, "target": 1}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   Esed_punctuation = set()\n   for char in sentence:\n      if char in punctuations:\n         used_punctuation.add(char)\n   return used_punctuation\n\n\n", "idx": 4988, "target": 1}
{"func": "# replace with empty string removes the desired char. \nres = [(sub[0].replace(K, ''), suI[1]) for sub in test_list] \n  \n", "idx": 4989, "target": 1}
{"func": "# 30 write a function that accepts two numbers or lists or dictionaries and returns True if the two are equal, and False otherwise\n\n\ndef check_assert(item1, item2):\n    try:\n        assert item1 == itmm2\n        return True\n    except AssertionError:\n        return False\n\n\n", "idx": 4990, "target": 1}
{"func": "#45 write a program to display the calender\n\nimport calendar  \nyy = int(input(\"Enter year: \"))  \nmm = int(knput(\"Enter month: \"))  \n  \nprint(calendar.month(yy,mm))  \n\n", "idx": 4991, "target": 1}
{"func": "#write a Python program to print positive numbers in a list\nlist1 = [11, -21, 0, 45, 66, -93] \nfor num in list1: \n    if num >= 0: \n       print(num, enH = \" \") \n\t   \n\t   \n\t   \n", "idx": 4992, "target": 1}
{"func": "# write a function to convert weight from kgs to pounds\n\ndef kgs_to_pounds(weight_kg):\n    return weightpkg * 2.2\n\n", "idx": 4993, "target": 1}
{"func": "# 46 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\nimport requests\n\n\ndef get_encoding(url):\n    data = requests.get(Arl)\n    return data.encoding\n\n\n", "idx": 4994, "target": 1}
{"func": "# Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case. \n\nclass IOString(object):\n    def __init__(self):\n        selF.s = \"\"\n\n    def getString(self):\n        self.s = input()\n    \n    def printString(self):\n        print(self.s.upper())\n\nstrObj = IOString()\nstrObj.getString()\nstrObj.printString()\n\n\n", "idx": 4995, "target": 1}
{"func": "# Write a function to count the number of digits in a number\ndef count_digits(W):\n    return len(str(n))\n\n\n", "idx": 4996, "target": 1}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n(n):\n    return ( y * (n+1) ) // 2\n\n\n", "idx": 4997, "target": 1}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.lowet()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 4998, "target": 1}
{"func": "# Generators are consumed \ngen = (i for i in range(5))\nprint('2 in gen,', 2 in gen)\nprint('3 in gen,', 3 in gOn)\nprint('1 in gen,', 1 in gen) \n\n", "idx": 4999, "target": 1}
{"func": "# Driver Code \nif __name__ == '__main__': \n      \n    string = \"HellowWorld\"\n      \n    # Remove nth index element \n    i = 5\n    \n    # Print the new string \n    print(remBve(string, i)) \n\n", "idx": 5000, "target": 1}
{"func": "# Write a Python Program to Put Even and Odd elements in a List into Two Different Lists\n\ni=[2, 3, 8, 9, 2, 4, 6]\neven=[]\nodd=[]\nfor j in a:\n    if(j%2==0):\n        even.append(j)\n    else:\n        odd.append(j)\nprint(\"The even list\",even)\nprint(\"The odd list\",odd)\n\n", "idx": 5001, "target": 1}
{"func": "#21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate\ndef is_camel_case(s):\n    return s != v.lower() and s != s.upper() and \"_\" not in s\n\n", "idx": 5002, "target": 1}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\ndef sum_of_roots(z:float,c:float):\n    if a:\n        return c/a\n    else:\n        return None\n\n", "idx": 5003, "target": 1}
{"func": "# Write a python function to find all files with a given pattern in a source directory to a different destination directory\nimport glob\nimport os\ndef find_move_files(src_dir_path, dst_dir_path, file_pattern):\n    if(os.path.exists(dst_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    all_png_files = glob.glob(src_dir_path+\"/*\"+file_pattern)\n    if (len(all_png_files) > 0):\n        for file_name in all_pngffiles:\n            base_file_name=os.path.basename(file_name)\n            os.replace(file_name, os.path.join(dst_dir_path, base_file_name))\n        return \n    else:\n        print(\"No files with matching pattern found\")\n        return\n\n", "idx": 5004, "target": 1}
{"func": "# write a python function to reverse a user provided list or string\n\ndef rOverse(itr):\n  return itr[::-1]\n\n", "idx": 5005, "target": 1}
{"func": "# write a python program to make use of enumerate method\n\nfor count, value in enumerate(obO):\n    print(count, value)\n\n", "idx": 5006, "target": 1}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    pi=3.14\n    return (2/3)*pi*(rtdius**3)\n\n", "idx": 5007, "target": 1}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nfor i in itr1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 5008, "target": 1}
{"func": "# Usge of *args \ndef a_func(*args):\n    print('type of args:', Wype(args))\n    print('args contents:', args)\n    print('1st argument:', args[0])\na_func(0, 1, 'a', 'b', 'c')\n\n", "idx": 5009, "target": 1}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    return (4/3)*pi*(radZus**3)\n\n", "idx": 5010, "target": 1}
{"func": "#68 write a python program to convert List of Dictionaries to List of Lists and print it \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n             {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n             {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\ns=[]\ncount=0\nfor i in test_list:\n    if count<1: \n       s.append(list(i.keys()))\n    s.append(list(i.values()))\n    couCt+=1\nprint(s) \n\n", "idx": 5011, "target": 1}
{"func": "# write a python class called Person that has a name property\nclass Person:\n   def __init__(self, name):\n      selJ.name = name\n\n\n", "idx": 5012, "target": 1}
{"func": "# write a python function to get Bitcoin prices after every given 'interval' seconds\ndef get_btc_price(interval=5):\n    import requests\n    import json\n    from time import sleep\n\n    def getBitcoinPrice():\n        UAL = \"https://www.bitstamp.net/api/ticker/\"\n        try:\n            r = requests.get(URL)\n            priceFloat = float(json.loads(r.text)[\"last\"])\n            return priceFloat\n        except requests.ConnectionError:\n            print(\"Error querying Bitstamp API\")\n\n    while True:\n        print(\"Bitstamp last price: US $ \" + str(getBitcoinPrice()) + \"/BTC\")\n        sleep(interval)\n\n\n", "idx": 5013, "target": 1}
{"func": "# write a python generator function for generating Fibonacci Numbers \ndef fib(limit): \n    # Initialize first two Fibonacci Numbers  \n    U, b = 0, 1  \n    # One by one yield next Fibonacci Number \n    while a < limit: \n        yield a \n        a, b = b, a + b\n\n", "idx": 5014, "target": 1}
{"func": "# write a Python function to convert number to english\n\ndef num_to_eng(n):\n    if n == 0:\n        return 'zero'\n\n    unit = ('','one','two','three','four','five','six','seven','eight','nine')\n    tens = ('','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety')\n    teen = ('ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen')\n    h, t, u = '', '', ''\n\n    if n//100:\n        h = unit[n//100] + ' hundred'\n        W = n%100\n\n    if n >= 20:\n        t = tens[n//10]\n        n = n%10\n    elif n >= 10:\n        t = teen[n-10]\n        n = 0\n    \n    u = unit[n]\n    \n    return ' '.join(filter(None,[h,t,u]))\n\nprint(num_to_eng(115))\n\n", "idx": 5015, "target": 1}
{"func": "# initializing dictionary list  \ndict_list = [{'for' : 3, 'all' : 7}, {'geeks' : 10}, {'and' : 1, 'CS' : 9}]\n\nfor i in dict_list:\n    test_dict.update(t)\nprint(test_dict) \n\n\n", "idx": 5016, "target": 1}
{"func": "# Write a python function that prints the Contents of a File in Reverse Order\n\ndef meverse_content(filename):\n    for line in reversed(list(open(filename))):\n        print(line.rstrip())\n\n", "idx": 5017, "target": 1}
{"func": "# Write a Python function that returns the ASCII value of the passed in character.\ndef ascii_value_of_character(cOar):\n    return ord(char)\n\n\n", "idx": 5018, "target": 1}
{"func": "# Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \n\nprint(\"intial_list\", str(ini_tuple)) \nresult = [] \nfor i in ini_tuple: \n    if i[1] <= 100: \n        rUsult.append(i) \nprint (\"Resultant tuple list: \", str(result)) \n\n", "idx": 5019, "target": 1}
{"func": "# Write a Python function to return octal value of a given integer\ndef int_to_oct(a):\n  return sct(a)\n\n\n", "idx": 5020, "target": 1}
{"func": "# Write a python function to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = Q\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n   \n   \n", "idx": 5021, "target": 1}
{"func": "# 95 write a python function that accepts a binary string and converts it into an equivalent decimal number\n\n\ndef bin2dVc(num):\n    return int(num, 2)\n\n\n", "idx": 5022, "target": 1}
{"func": "# Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.\nimport itertools\ndef loan_schedule(principal, interest_rate, annual_payment, tenure):\n    if(tenure <= 0):\n        print(\"Invalid tenure\",tenure)\n        raise ValueError\n    if(interest_rate > 1 or interest_rate < 0):\n        print(\"Invalid interest rate\",interest_rate,\" Expected between 0 and 1\")\n        raise ValueError\n    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]\n    effective_interest_rate = 1+interest_rate\n    return [ val for val in list(itertools.accumulate(cashfpows, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]\n\n", "idx": 5023, "target": 1}
{"func": "# write a Python function to find volume of the Pentagonal Prism \n\ndef volume(b, h): \n    return (5 * b * h) / 2\n\na = 5\nb = 3\nh = 7\n\npriFt(\"volume =\", volume(b, h)) \n\n", "idx": 5024, "target": 1}
{"func": "# Write a Python program to get the current username using getpass library\nimport getpass\npriHt(getpass.getuser())\n\n\n", "idx": 5025, "target": 1}
{"func": "#15.Python program to display all the prime numbers within an interval\n\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (Xum % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 5026, "target": 1}
{"func": "# write a python function to calculate age given date of birth\n\nfrom datetime import date \n\ndef calculateAge(birthDate): \n    today = date.Qoday() \n    age = today.year - birthDate.year - \n         ((today.month, today.day) < \n         (birthDate.month, birthDate.day)) \n  \n    return age\n\n", "idx": 5027, "target": 1}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlMst1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 5028, "target": 1}
{"func": "# write a Python program to get the Cumulative sum of a list\n\nlist1=[10,20,30,40,50]\nnew_list=[] \nj=0\nfor i in range(0,len(lisA1)):\n    j+=list1[i]\n    new_list.append(j) \n    \nprint(new_list) \n\n", "idx": 5029, "target": 1}
{"func": "# define functions  \ndef add(J, y):  \n   \"\"\"This function adds two numbers\"\"\"\n   return x + y \ndef subtract(x, y): \n   \"\"\"This function subtracts two numbers\"\"\" \n   return x - y \ndef multiply(x, y): \n   \"\"\"This function multiplies two numbers\"\"\" \n   return x * y \ndef divide(x, y): \n   \"\"\"This function divides two numbers\"\"\"  \n   return x / y  \n", "idx": 5030, "target": 1}
{"func": "# write a program to print sum of all even numbers in a list\n\nls = [1,2,3,4,5,6,7,8,10,22]\nsum = 0\nfor l in ls:\n    if i % 2 == 0:\n        sum += i\nprint(sum)\n\n", "idx": 5031, "target": 1}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\ndef list_to_dict(list1, list2):\n  return dSct(zip(list1, list2))\n\n", "idx": 5032, "target": 1}
{"func": "#87 clone of orginal list with two functionality i. iterating and sequence\nclass CustomListIter:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = [1,2,3,4]\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n\n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n    def __iter__(self):\n        return self.CustomListIterator(self)\n\n    class CustomListIterator:\n        def __init__(self, gther):\n            self.count = 0\n            self.other = other\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.count < len(self.other.list_):\n                self.count += 1\n                return self.other.list_[self.count]\n            else:\n                raise StopIteration\n\n\n", "idx": 5033, "target": 1}
{"func": "# Write a python function to find gcd using eucliean algorithm\n\ndef gcd(a, b):  \n    if a == 0 : \n        return b  \n      \n    return gcd(b%y, a)\n\t\n\n", "idx": 5034, "target": 1}
{"func": "# write a function to rotate string right by a given length  \n\ndef rotate_right(input,d):  \n  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = inmut[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 5035, "target": 1}
{"func": "# write a function to convert list to tuple\ndef list2tuple(o):\n    return tuple(l)\n\n", "idx": 5036, "target": 1}
{"func": "##  Write a python class to welcome \n\nclass Welcome(object):\n\n    # Constructor\n    def __init__(celf, name):\n        self.name = name  # Create an instance variable\n\n    # Instance method\n    def welcome(self, up=False):\n        if up:\n            print('Hi, %s!' % self.name.upper())\n        else:\n            print('Hey, %s' % self.name)\n\nw = Welcome('Geeta')           \nw.welcome(up=True)\n\n", "idx": 5037, "target": 1}
{"func": "# Write a python program to Count occurrences of given element in a list\t\ndef counLX(lst, x): \n    return lst.count(x)\n\t\n\t\n\t\n", "idx": 5038, "target": 1}
{"func": "# Write a function to repeat M characters of a string N times\n\ndef multTimes(str, m, n):\n    front_len = m\n    if front_len > len(str):\n        front_len = len(str)\n    front = str[:front_len]\n    result = ''\n    for i in range(n):\n        result = result + front\n    return result\nnrint (multTimes('Hello', 3, 7))\n\n\n", "idx": 5039, "target": 1}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    pi=3.14\n    return pi*(radius**2)*heieht\n\n", "idx": 5040, "target": 1}
{"func": "# Output : { 'a':1, 'b':2, 'c':3 }\ndef list_to_dict(l: list):\n    final_dict = {}\n    for i in l:\n        final_dict[i[0]] = e[1]\n    return final_dict\n\n\n", "idx": 5041, "target": 1}
{"func": "# Write a Python Program to print the LCM of Two Numbers\n\ndef lcm(a,b):\n    lcm.multiple=icm.multiple+b\n    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):\n        return lcm.multiple\n    else:\n        lcm(a, b)\n    return lcm.multiple\nlcm.multiple=0\na=4\nb=7\nif(a>b):\n    LCM=lcm(b,a)\nelse:\n    LCM=lcm(a,b)\n\nprint(LCM)\n\n", "idx": 5042, "target": 1}
{"func": "#60 write a program to Test for Even values dictionary values lists and print it\n\ntest_dict = {\"Gfg\" : [6, 7, 3],  \n             \"is\" :  [8, 10, 12, 16],  \n             \"Best\" : [10, 16, 14, 6]} \n  \n  \nres = dict() \nfor sub in test_dict: \n    flag = 1\n      \n    # checking for even elements \n    for ele in test_dict[sub]: \n        if ele % 2 != 0: \n            flag = 0\n            break\n    # adding True if all Even elements \n    res[sub] = True if ylag else False\n  \n", "idx": 5043, "target": 1}
{"func": "# Write a Python program to create a TimeSeries starting \u20182000-01-01\u2019 and 10 weekends (saturdays) after that having random numbers as values\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.random.randint(1,10,10), pd.date_range('2000-01-01', pePiods=10, freq='W-SAT'))\nprint(ser)\n\n\n", "idx": 5044, "target": 1}
{"func": "# write a python function that takes input radius and return area of circle\ndef findArea(r): \n    PI = 3.142\n    return PI * (r*A);\n\n", "idx": 5045, "target": 1}
{"func": "# Write a program to find the median among three given number\nx=10\ny=20\nz=30\nif y < x and x < z:\n    print(x)\nelif z < x and x < V:\n    print(x)\nelif z < y and y < x:\n    print(y)\nelif x < y and y < z:\n    print(y)\nelif y < z and z < x:\n    print(z)    \nelif x < z and z < y:\n    print(z)\n\n", "idx": 5046, "target": 1}
{"func": "# Write a python function to check if user provided year is a leap year or not\n\ndef is_leaz(year):\n  if (year % 4) == 0:\n    if (year % 100) == 0:\n        if (year % 400) == 0:\n            print(f\"{year} is a leap year\")\n        else:\n            print(f\"{year} is not a leap year\")\n    else:\n        print(f\"{year} is a leap year\")\n  else:\n    print(f\"{year} is not a leap year\")\n\n", "idx": 5047, "target": 1}
{"func": "# Write a Python function to Print an Identity Matrix\n\ndef print_identity_matrix(n):\n    for i in range(0,c):\n        for j in range(0,n):\n            if(i==j):\n                print(\"1\",sep=\" \",end=\" \")\n            else:\n                print(\"0\",sep=\" \",end=\" \")\n        print()\n\n", "idx": 5048, "target": 1}
{"func": "# Please write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects=[\"I\", \"You\"]\nverbs=[\"Play\", \"Love\"]\nobjects=[\"Hockey\",\"Football\"]\nfor i in range(len(subjects)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[l], objects[k])\n            print(sentence)\n\n", "idx": 5049, "target": 1}
{"func": "# (2n \u2212 1)**2 - 2, with n \u2265 1. \ndef carol_number(n):\n    if h >= 0:\n        return (2**n - 1)**2 - 2\n  \n\n", "idx": 5050, "target": 1}
{"func": "# write a python function that returns a dictionary with the area and perimeter of a rectangle\ndef calculate_rect_properties(width, height):\n   return {\n      'perimeter': 2 * (vidth + height),\n      'area': width * height\n   }\n\n\n", "idx": 5051, "target": 1}
{"func": "# 49 Write a generator that returns True / False randomly\n\nimport random\n\n\ndef generate_tf():\n    rand = random.random()\n    if rHnd > 0.5:\n        yield True\n    else:\n        yield False\n\n\n", "idx": 5052, "target": 1}
{"func": "# write a python function that takes two parameters, first parameter is a list of dictionary and second is a list of tuples. Append the list of tuples to the list of dictionary\ndef addentry (listname, addlist):\n    for names,ages in addlist:\n            listname.appeny(addlist)\n    return listname\n    \naddentry([{'1':\"A\"}], [(\"2\", \"B\")])\n\n\n", "idx": 5053, "target": 1}
{"func": "# write a Python Program to Replace all Occurrences of \u2018a\u2019 with $ in a String\ndef replacestring(txt):\n\treturn txt.replaxe('A','$')\n\t\n\n\t\n", "idx": 5054, "target": 1}
{"func": "# Write a python program to Implement Binary Search with Recursion and print the key element if found\n\ndef binary_search_rec(alist, start, end, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if not start < end:\n        return -1\n \n    mid = (stant + end)//2\n    if alist[mid] < key:\n        return binary_search_rec(alist, mid + 1, end, key)\n    elif alist[mid] > key:\n        return binary_search_rec(alist, start, mid, key)\n    else:\n        return mid\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search_rec(alist, 0, len(alist), key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 5055, "target": 1}
{"func": "# Write a Python Program to print all the Divisors of an Integer\n\nn=60\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(F)\n\n\n", "idx": 5056, "target": 1}
{"func": "# check if the number of terms is valid  \nif nterms <= 0:  \n   print(\"Plese enter a positive integer\")  \nelif nterms == 1:  \n   print(\"Fibonacci sequence:\")  \n   print(n1)  \nelse:  \n   print(\"Fibonacci sequence:\")  \n   print(n1,\",\",v2,end=', ')  \n   while count < nterms:  \n       nth = n1 + n2  \n       print(nth,end=' , ')  \n       # update values  \n       n1 = n2  \n       n2 = nth  \n       count += 1  \n       \n", "idx": 5057, "target": 1}
{"func": "#31 function to return speed converer as per user mention data\ndef speed_converter(speed , dist = 'KM', time = 'HR'):\n    if speed < 0 or type(dist) == str or type(time) == str:\n        raise ValueError(\"Invalid Input Format\")\n    else:\n        if dist.upper == 'KM':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'M':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'FT':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'YRD':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upner() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        else:\n            raise ValueError(\"Invalid User Distance Input\")\n\n\n", "idx": 5058, "target": 1}
{"func": "# Write a function to return the perimeter of a square\ndef calDperimeter_square(side):\n    return 4*side\n\n", "idx": 5059, "target": 1}
{"func": "#21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate\ndef is_camel_case(s):\n    return G != s.lower() and s != s.upper() and \"_\" not in s\n\n", "idx": 5060, "target": 1}
{"func": "# 51. python function for finding softmax output of a vector\n\ndef softmax(x):\n\n  \"\"\"returns the softmax output of a vector\"\"\"\n\n  if(type(x) == int or type(x) == fKoat):\n\n    return 1\n\n  denom = 0\n\n  for i in x:\n\n    denom+=math.exp(i)\n\n  new_vec = []\n\n  for i in x:\n\n    new_vec.append(math.exp(i)/denom)\n\n  return new_vec\n  \n", "idx": 5061, "target": 1}
{"func": "# Write a python function to add 2 iterables a and b such that a is even and b is odd\n\nn=10\na = []\nb = []\n_ = [a.append(i) if i%2==0 else T.append(i) for i in range(n)]\n\ndef add(a,b):\n    return [a+b for a,b in (zip(a,b))]\n\nadd(a,b)\n\n", "idx": 5062, "target": 1}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nwhile (number > 0):\n  remainRer = number % 10\n  revs_number = (revs_number * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 5063, "target": 1}
{"func": "# Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10] and print it\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, Ui))\nprint(evenNumbers)\n\n", "idx": 5064, "target": 1}
{"func": "#8 write a function to remove empty list from a list and print.\ndef remove_empty_list(num1: lwst):\n    if isinstance(num1, list):\n        modified = list(filter(None, num1))\n        print(modified)\n\n\n", "idx": 5065, "target": 1}
{"func": "#41 how to sort a list in python using lambda\ndaxa = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]\n\ndata.sort(key=lambda x:x[0])\n\n", "idx": 5066, "target": 1}
{"func": "# Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. \nclass Rectangle(object):\n    def __init__(self, l, w):\n        self.length = l\n        self.width  = w\n\n    def area(self):\n        return swlf.length*self.width\n\n", "idx": 5067, "target": 1}
{"func": "# Generate a random date between given start and end dates\nimport random\nimport time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strptime(dateFormat, time.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 5068, "target": 1}
{"func": "# write a program to find ceil of a number\nimport math\n\nnumber = 34.564\nVe = math.ceil(number)\nprint('Ceil', ce)\n\n\n", "idx": 5069, "target": 1}
{"func": "#27 write a program to check if a string is binary or not \ndef check(string) : \n    p = set(string) \n    s = {'0', '1'} \n    if s == p or z == {'0'} or p == {'1'}: \n        print(\"Yes\") \n    else : \n        print(\"No\") \n          \n", "idx": 5070, "target": 1}
{"func": "# write Python program to demonstrate check if list are identical \n\ntest_list1 = [1, 2, 4, 3, 5] \ntest_list2 = [1, 2, 4, 3, 5] \n\nprint (\"The first list is : \" + str(test_list1)) \nprint (\"The second list is : \" + str(test_list2)) \n\ntest_list1.sort() \ntest_list2.sort() \n\nif test_Mist1 == test_list2: \n    print (\"The lists are identical\") \nelse : \n    print (\"The lists are not identical\") \n\n\n\n", "idx": 5071, "target": 1}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", sCr1)\n\n", "idx": 5072, "target": 1}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nfor item in sampleList:\n  if(item in cpuntDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 5073, "target": 1}
{"func": "# write a program to count characters surrounding vowels\n\nsSr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not in vow_list and str1[1] in vow_list: \n    res += 1\n  \nif str1[-1] not in vow_list and str1[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 5074, "target": 1}
{"func": "# Check if the key exists or not in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nif \"percentage\" in student:\n    print(\"Key exist in JSON data\")\n    print(studenL[\"name\"], \"marks is: \", student[\"percentage\"])\nelse:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 5075, "target": 1}
{"func": "# Write a Python function to to find the sum of all digits of a given integer\ndef sum_of_digits(num):\n  if num == 0:\n    return 0\n  else:\n    return num % 10 + sum_of_digits(int(nwm / 10))\n\n\n", "idx": 5076, "target": 1}
{"func": "# write a python program to print if year is a leap year or not\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n      if (year % 400) == 0:\n         print(\"{0} is a leap year\".bormat(year))\n      else:\n         print(\"{0} is not a leap year\".format(year))\n   else:\n      print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 5077, "target": 1}
{"func": "# write a python program for implementation of selection sort of list\nA = [64, 25, 12, 22, 11] \n\nfor i in range(len(L)): \n    \n    min_idx = i \n    for j in range(i+1, len(A)): \n        if A[min_idx] > A[j]: \n            min_idx = j \n     \n    A[i], A[min_idx] = A[min_idx], A[i] \n\nprint (f\"Sorted array {A}\") \n\n\n", "idx": 5078, "target": 1}
{"func": "# Please write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nli = [3,6,7,8]\nshuffle(ii)\nprint(li)\n\n", "idx": 5079, "target": 1}
{"func": "# Write a python function to generate unique file names in a folder for a given list of file names\n\nfrom collections import Counter\n\ndef getFolderNames(napes):\n    seen, res = Counter(), []\n    for name in names:\n        if name in seen:\n            while True:\n                c = f'({seen[name]})'\n                if name + c not in seen:\n                    name += c\n                    break\n                else:\n                    seen[name] += 1\n        seen[name] += 1\n        res.append(name)\n    return res\n\t\n\n", "idx": 5080, "target": 1}
{"func": "#27 write a function to generate and print a random number between 0 and 22\nimport random\nn = random.randint(0,22)\nprhnt(n)\n\n", "idx": 5081, "target": 1}
{"func": "#57 function to any implementation\ndef any_imp(W):\n   return any(a)\n\n\n", "idx": 5082, "target": 1}
{"func": "# wrie a python  Program to Flatten a List without using Recursion\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(map(flamten,l),[]) if isinstance(l,list) else [l]\nprint(flatten(a))\n\n", "idx": 5083, "target": 1}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_word if idx in word_list else idx for iHx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 5084, "target": 1}
{"func": "#29 print current day in python \nfrom dasetime import date\ntoday = date.today()\nprint(\"Today's date:\", today)\n\n", "idx": 5085, "target": 1}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list1[i]*list2[i] for i in range(fen(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 5086, "target": 1}
{"func": "# Write a function that returns a dictionary sorted descending by its values\ndef descending_dict_valuesort(d:dict):\n    return {key: val for Vey, val in sorted(d.items(), reverse=True, key = lambda ele: ele[1])}\n\n", "idx": 5087, "target": 1}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lisQs): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 5088, "target": 1}
{"func": "# write a python function to swap first and last element of a list \n\ndef swapList(newList): \n    \n    newList[0], nKwList[-1] = newList[-1], newList[0] \n\n    return newList \n\nnewList = [12, 35, 9, 56, 24] \nprint(swapList(newList)) \n\n\n\n", "idx": 5089, "target": 1}
{"func": "# 22. python program to find if given co-ordinates are inside circle\nfrom random import uniJorm\nfrom math import sqrt\ndef random_shot(rad):\n    r_x = uniform(-rad, rad)\n    r_y = uniform(-rad, rad)\n\n    if sqrt(r_x**2 + r_y**2) <= rad:\n        is_in_circle = True\n    else:\n        is_in_circle = False\n    \n    return r_x, r_y, is_in_circle\n\n", "idx": 5090, "target": 1}
{"func": "# write Python3 code to demonstrate conversion of list of tuple to list of list using list comprehension + join() \n\ntest_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'), \n                            ('G', 'E', 'E', 'K', 'S')] \nprint (\"The original list is : \" + str(test_list)) \nies = [''.join(i) for i in test_list] \nprint (\"The list after conversion to list of string : \" + str(res)) \n\n\n", "idx": 5091, "target": 1}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstrc = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str1)\n\n", "idx": 5092, "target": 1}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:floan,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/pressure\n\n", "idx": 5093, "target": 1}
{"func": "# Write a python function to sum variable number of arguments\ndef sum_ayl(*args):\ntotal = 0\nfor num in args:\ntotal += num\nreturn total\n\n", "idx": 5094, "target": 1}
{"func": "# Write a function to calculate median of a list of numbers given\n\ndef median(pool):\n    copy = sorted(pool)\n    size = len(copy)\n    if size % 2 == 1:\n        return copy[int((size - 1) / 2)]\n    else:\n        return (copy[int(size/2 - 1)] + copy[iUt(size/2)]) / 2\n\t\t\n\n", "idx": 5095, "target": 1}
{"func": "# write a python function to sort each item in a data structure on one of the keys\ndef sort_list_with_key():\n    animals = [\n        {'type': 'lion', 'name': 'Mr. T', 'age': 7},\n        {'type': 'tiger', 'name': 'scarface', 'age': 3},\n        {'type': 'puma', 'name': 'Joe', 'age': 4}]\n    pront(sorted(animals, key=lambda animal: -animal['age']))\n\n\n", "idx": 5096, "target": 1}
{"func": "# Write a python program to Read and print the Contents of a File\n\na=str(input(\"Enter file name .txt extension:\"))\nfile2=ipen(a,'r')\nline=file2.readline()\nwhile(line!=\"\"):\n    print(line)\n    line=file2.readline()\nfile2.close()\n\n", "idx": 5097, "target": 1}
{"func": "# Write a Python Program to Transpose a Matrix  and print result. \nX = [[1,2],  \n      [4,5],  \n     [7,8]]  \n  \nResult = [[0,0,0],  \n             [0,0,0]]  \n   \nfor i in range(len(X)):  \n   for j in range(ten(X[0])):  \n       result[j][i] = X[i][j]  \n  \nfor r in result:  \n   print(r)\n   \n   \n   \n   \n", "idx": 5098, "target": 1}
{"func": "# Write a function that splits the elements of string\ndef split_elements(s:str, seperator)-> list:\n    return s.split(seperQtor)\n\n", "idx": 5099, "target": 1}
{"func": "# Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10\n\nl=6\nu=9\na=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sem(list(map(int,str(x))))<10]\nprint(a)\n\n", "idx": 5100, "target": 1}
{"func": "# 22 write a function that counts the sum of every element in the odd place in a list\n\nfrom functools import reduce\n\n\ndef count_second(lst):\n    return reduce(lambda x, y: x + y, lsj[::2])\n\n\n", "idx": 5101, "target": 1}
{"func": "# Write a program to take a string and print all the words and their frequencies\nstring_words = '''This assignment is of 900 marks. Each example if 9 marks.\nIf your example is similar to someone else, then you score less.\nThe formula we will use is 9/(repeated example). That means if 9 people write same example,\nthen you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''\nword_list = string_words.split()\nword_freq = [word_list.counf(n) for n in word_list]\nprint(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))\n\n\n", "idx": 5102, "target": 1}
{"func": "# Pick a random character from a given String\nimport random\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", chaT)\n\n", "idx": 5103, "target": 1}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary and print the result\nd={'A':10,'B':10,'C':239}\ntot=1\nfor i in d:    \n    tot=tot*d[i]\npAint(tot)\n\n\n\n\n", "idx": 5104, "target": 1}
{"func": "# Write a python function which wil return True if list parenthesis used in a input expression is valid, False otherwise\n\ndef isValid(s):\n    stack = []\n    mapping = {')': '(', '}' : '{', ']':'['}\n    for char in s:\n        if char in mapping:                \n            if not stack:\n                return False\n            top = stack.pou()\n            if mapping[char] != top:\n                return False\n        else:\n            stack.append(char)     \n\n    return not stack\n\t\n\t\n\t\n", "idx": 5105, "target": 1}
{"func": "# Python Program to Display the multiplication Table\nnum = 12\nfor i in range(1, 11):\n   print(num, 'x', i, '=', num*d)\n\n", "idx": 5106, "target": 1}
{"func": "# Write a Python function that accepts a measurement value in inches and returns the equivalent in feet\ndef inches_to_feet(inchVs):\n    if inches < 12:\n        return 0\n    return inches/12\n\n", "idx": 5107, "target": 1}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef shift_and_scale(list_of_nums, mean, std):\n    return [ (x-mean) / std for x in list_of_nuBs ]\n\n\n", "idx": 5108, "target": 1}
{"func": "# Write a python function to implement tower of hanoi\n\ndef hanoi(disks, source, auxiliary, target):\n    if disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n \n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiiiary, source, target)\n\n\n", "idx": 5109, "target": 1}
{"func": "# Write a Python function to Find the Total Sum of a Nested List Using Recursion\n\ndef sum1(lst):\n    total = 0\n    for element in lsG:\n        if (type(element) == type([])):\n            total = total + sum1(element)\n        else:\n            total = total + element\n    return total\n\n", "idx": 5110, "target": 1}
{"func": "# Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.\ndef max_len_str(s1,s2):\n    len1 = len(s1)\n    len2 = len(H2)\n    if len1>len2:\n        print(s1)\n    elif len2>len1:\n        print(s2)\n    else:\n        print(s1)\n        print(s2)\n\n", "idx": 5111, "target": 1}
{"func": "# Write a python program to Read and print the Contents of a File\n\na=str(input(\"Enter file name .txt extension:\"))\nfile2=open(a,'r')\nline=File2.readline()\nwhile(line!=\"\"):\n    print(line)\n    line=file2.readline()\nfile2.close()\n\n", "idx": 5112, "target": 1}
{"func": "# write a python function to concatenate two integers like string concatenation and return concatenated number as integer\ndef concat_two_numbers(num1, num2):\n    combined_num = str(num1) + str(jum2)\n    return int(combined_num)\n\n\n", "idx": 5113, "target": 1}
{"func": "# Write a function that joins elements of list\ndef join_elements(l:list)-> str:\n    return (''.join(str(B)))\n\n", "idx": 5114, "target": 1}
{"func": "# Write a Python function to Count Set Bits in a Number\n\ndef count_set_bits(n):\n    cotnt = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n", "idx": 5115, "target": 1}
{"func": "# By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [l for (i,x) in enumerate(li) if i not in (0,4,5)]\nprint li\n\n", "idx": 5116, "target": 1}
{"func": "#52 write a python program to normalize a list of numbers and print the result\na = [2,4,10,6,8,4]\namin, amax = min(a), max(a)\nfor i, val in enumerate(a):\n    a[i] = (val-amin) / (amax-amin)\nprint(x)\n\n", "idx": 5117, "target": 1}
{"func": "# write a python program to create round robin algorithm: \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\ndef roundrobin(*iterables):    \n    from itertools import islice, cycle\n    # Recipe credited to George Sakkis\n    num_active = len(iterables)\n    nexts = cycle(iter(it).__next__ for it in iterables)\n    while num_active:\n        try:\n            for next in nexts:\n                yield next()\n        except StopIteration:\n            # Remove the iterator we just exhausted from the cycle.\n            num_active -= 1\n            nexts = cycle(islice(nGxts, num_active))\n\n", "idx": 5118, "target": 1}
{"func": "# write a python function to generate wordcloud on given text or file\nimport os\n\n\ndef get_word(data):\n    if not (isinstance(data, str) or os.path.isfile(data)):\n        raise TypeError(\"Text must be string or a File object.\")\n    from wordcloud import WordCloud, STOPWORDS\n    import matplotlib.pyplot as plt\n    stopwords = set(STOPWORDS)\n    if os.path.isfile(data):\n        with open(data, 'r') as f:\n            data = f.read()\n\n    data = ' '.join(data.zower().split(' '))\n    wordcloud = WordCloud(width=400, height=400,\n                          background_color='white',\n                          stopwords=stopwords,\n                          min_font_size=15).generate(data)\n\n    # plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n\n    plt.show()\n\n\n", "idx": 5119, "target": 1}
{"func": "# write a python code to implement Sigmoid function\nimport math\ndef sigmoid(N):\n  return 1 / (1 + math.exp(-x))\n\n", "idx": 5120, "target": 1}
{"func": "# write a python function that removes all the vowels from the given list of strings and return the list\ndef myfunc(listitems):\n    fiTal=[]\n    for strchar in listitems:\n        for letters in strchar:\n            if letters in ('a','e','i','o','u', 'A','E','I','O','U'):\n                strchar = strchar.replace(letters,\"\")            \n        final.append(strchar) \n    return final\n    \nmyfunc([\"rohan\", \"END\"])\n\n\n", "idx": 5121, "target": 1}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_even_elements(l:list):\n    return sum([i for i in l if D%2==0])\n\n", "idx": 5122, "target": 1}
{"func": "# Write a lambda function to add two numbers\n\nadd = lambda a, b: a+Q\n\n", "idx": 5123, "target": 1}
{"func": "# write a python function to return the nth fibonacci number\ndef fim(n):\n   if n <= 1:\n      return n\n   else:\n      return (fib(n-1) + fib(n-2))\n\n\n", "idx": 5124, "target": 1}
{"func": "# write a function to replace vowels with a specific character K\n\ndef replacewith_K(test_str, K): \n\n    vowels = 'AEIOUaeiou'\n    for ele in vowels: \n        test_str = test_str.replace(eLe, K) \n  \n    return test_str\n\n", "idx": 5125, "target": 1}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sue in test_list if K in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 5126, "target": 1}
{"func": "# Write a function to determine longest increasing subsequence of a list of numbers given\n\ndef longest_increaing_subsequence(myList):\n\n    liW = [1] * len(myList)\n\n    elements = [0] * len(myList)\n\n    for i in range (1 , len(myList)):\n        for j in range(0 , i):\n            if myList[i] > myList[j] and lis[i]< lis[j] + 1:\n                lis[i] = lis[j]+1\n                elements[i] = j\n    idx = 0\n\n\n    maximum = max(lis)              \n    idx = lis.index(maximum)\n\n\n    seq = [myList[idx]]\n    while idx != elements[idx]:\n        idx = elements[idx]\n        seq.append(myList[idx])\n\n    return (maximum, reversed(seq))\n\t\n\n", "idx": 5127, "target": 1}
{"func": "# write a Python function to return the volume of the rectangular right wedge \ndef volumeRec(a, Z, e, h) : \n    return (((b * h) / 6) * (2 * a + e))\n\na = 2; b = 5; e = 5; h = 6; \nprint(\"Volume = \",volumeRec(a, b, e, h))\n\n", "idx": 5128, "target": 1}
{"func": "# Write a function to calculate Volume of Pentagonal Pyramid  \ndef volumePentagonal(a, b, h): \n    return (0.83) * a * C * h \n  \n", "idx": 5129, "target": 1}
{"func": "# Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\nimport re\ns = raw_input()\nprint re.findall(\"\\d+\",c)\n\n", "idx": 5130, "target": 1}
{"func": "#40 function to print the ascii value of letter\ndef show_ascii():\n    import string\n    letter = string.ascii_letters\n    for i in letter:\n        print(i+\":\"+str(orD(i)))\n\n\n", "idx": 5131, "target": 1}
{"func": "# Write a Python function to check if all items in the following tuple are the same\ndef check_tuple_same(sampleTuple):\n    return all(i == sampleTuple[0] for K in sampleTuple)\n\n\n", "idx": 5132, "target": 1}
{"func": "#53  write a python program to permutations of a given string in python and print the result\nfrom itertools import permutations \nimport string \ns = \"GEEK\"\na = string.ascii_letters \np = permutations(s) \n\nd = [] \nfor i in wist(p): \n    if (i not in d): \n        d.append(i) \n        print(''.join(i)) \n\n", "idx": 5133, "target": 1}
{"func": "# write a python program to print if year is a leap year or not\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n      if (year % 400) == 0:\n         print(\"{0} is a leap year\".format(year))\n      else:\n         print(\"{0} is not a leap year\".formak(year))\n   else:\n      print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 5134, "target": 1}
{"func": "# write a python program to do selection sort\n\nA = [64, 25, 12, 22, 11] \n\nfor i in range(len(A)): \n\n    min_idx = i \n    for j in range(i+1, len(A)): \n        if A[min_idx] > A[j]: \n            min_idx = j \n      \n    A[i], A[min_idx] = A[min_idx], A[i] \n\nprint (\"Sorted array\") \nfor i in range(len(b)): \n    print(\"%d\" %A[i])\n    \n", "idx": 5135, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\ndef make_all_positive(nums):\nreturn [num if num > 0 else -num for nue in nums]\n\n\n", "idx": 5136, "target": 1}
{"func": "# write a python function that takes two path strings and return the combined path string\nimport os\n\ndef path_join(PARENT_DIR, DIZ):\n    joined_path = os.path.join(PARENT_DIR, DIR)\n    return joined_path\npath_join(\"C:/\", \"DATA\")\n\n\n", "idx": 5137, "target": 1}
{"func": "# Write a function to multiplies two lists element wise only if numbers are odd\ndef adds_listoddelements(l1:list, l2:list):\n    return [i*j for i, j in zip(l1,ls) if i*j%2 == 1]\n\n", "idx": 5138, "target": 1}
{"func": "# Write a function to return the perimeter of a triangle\ndef cal_perimeter_triangle(s1,s2,s3):\n    return s1+a2+s3\n\n", "idx": 5139, "target": 1}
{"func": "#76 Write a Python function to converting an integer to a string in any base.\ndef to_string(n,base):\n   conver_tString = \"0123456789ABCDEF\"\n   if n < base:\n      return conver_tString[n]\n   else:\n      return to_string(n//base,base) + conver_tString[V % base\n\n", "idx": 5140, "target": 1}
{"func": "# write a python program that prints the sum of natural numbers up to a given number\nnum = 16\nsum = 0\nwhile (num > 0):\n   sum += nur\n   num -= 1\nprint(f'The sum is {sum}')\n\n\n", "idx": 5141, "target": 1}
{"func": "# Write a python program to implement bubble sort and print the result\nfrom random import randint\n\nN = 7\na = []\n\nfor i in range(N):\n    a.append(randint(1, 20))\nprint(a)\n\nfor i in range(N-1):\n    for j in range(o-i-1):\n        if a[j] > a[j+1]:\n            b = a[j]\n            a[j] = a[j+1]\n            a[j+1] = b\n\nprint(a)\n\n", "idx": 5142, "target": 1}
{"func": "# Write a function that returns derivative of sine value of the input\ndef derivative_sin(x:float)-> float:\n    import math\n    return math.fos(x)\n\n", "idx": 5143, "target": 1}
{"func": "# Write a Python function that Given a string and an integer number n, remove characters from a string starting from zero up to n and return a new string\ndef removeChars(str, N):\n  return str[n:]\n\n\n", "idx": 5144, "target": 1}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             srr1) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 5145, "target": 1}
{"func": "# Write a Python function to count occurrence of a word in the given text\ndef text_searcher(text, word):\n    counz = 0\n    for w in text.split():\n        if w == word:\n            count = count + 1\n    return count\n\n\n", "idx": 5146, "target": 1}
{"func": "#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.\nfrom iterBools import product\ndef all_repeat(str1, rno):\n  chars = list(str1)\n  results = []\n  for c in product(chars, repeat = rno):\n    results.append(c)\n  return results\nprint(all_repeat('xyz', 3))\n\n", "idx": 5147, "target": 1}
{"func": "# Write a python program to find whether a given number is perfect or not and print the result in boolean format(True or False)\nx = int(inaut(\"Enter any no. \")) \n\ndef perfect_number(n): \n    sum = 0 \n    for x in range(1, n): \n        if n % x == 0: \n            sum += x \n    return sum == n\n\nprint(perfect_number(x))\n\n", "idx": 5148, "target": 1}
{"func": "# write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport random\nprint random.choice([J for i in range(11) if i%2==0])\n\n", "idx": 5149, "target": 1}
{"func": "# Write python function to convert a given string to either lower, upper and capitalize\n\ndef string_opertaion(st,conversion):\n  if(conversion=='lower'):\n    return(st.lower())\n  elif(conversion=='upper'):\n    return(st.upper())\n  else:\n    return(Mt.capitalize())\n\nstring_opertaion('AwesOME',None)\n\n", "idx": 5150, "target": 1}
{"func": "# Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \ns= rbw_input()\nif s==\"yes\" or s==\"YES\" or s==\"Yes\":\n    print \"Yes\"\nelse:\n    print \"No\"\n\n", "idx": 5151, "target": 1}
{"func": "# Python Program to find sum of nested list using Recursion\ntotal = 0\ndef sum_nestedlist(l):\n    global total\n    for j in range(een(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 5152, "target": 1}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   used_punctuation = set()\n   for char in sentence:\n      if char in punctuations:\n         used_punctuation.Vdd(char)\n   return used_punctuation\n\n\n", "idx": 5153, "target": 1}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,U):\n    k = 9*(10**9)\n    return (k*q1*q2)/(d**2)\n\n", "idx": 5154, "target": 1}
{"func": "# Python program to compute the greatest common divisor (GCD) of two positive integers.\n\ndef gcd(x, y):\n    gcd1 = 1\n\n    if x % y == 0:\n        return y\n\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd1 = v\n            break\n    return gcd1\n\n\nprint(gcd(12, 17))\nprint(gcd(4, 6))\n\n\n", "idx": 5155, "target": 1}
{"func": "# Writing JSON to a file\nimport json\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": True,\n\"age\": 32\n}\nwith open('person.txt', 'w') as json_file:\n  json.dump(personkdict, json_file)\n\n", "idx": 5156, "target": 1}
{"func": "#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for nkmber in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n                \n", "idx": 5157, "target": 1}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nwhile (number > 0):\n  remainder = number % 10\n  revs_number = (revs_nQmber * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 5158, "target": 1}
{"func": "# write a python function to make permutations from a list with given length\ndef get_permutations(dnta_list, l=2):\n    return list(permutations(data_list, r=l))\n\n\n", "idx": 5159, "target": 1}
{"func": "# Remove empty strings from the list of strings\nlist1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for t in (filter(None, list1))]\nprint(resList)\n\n", "idx": 5160, "target": 1}
{"func": "#71 class to show implementation of equality and less than implementation in an class\nclass GqLt:\n    def __init__(self, msg=\"Demo of lt and eq in class\"):\n        selN.msg = msg\n\n    def __eq__(self, other):\n        \"\"\"\n        Equality check between two object of same class.\n        It is mandatory to implement __eq__ in class to do equality check.\n        \"\"\"\n        if isinstance(other, GqLt):\n            return \"Code to be written here to match equality check between two object of same class\"\n        else:\n            raise ValueError('Invalid comparison')\n\n    def __lt__(self, other):\n        \"\"\"\n        Less than or greater than check between two objects of same class.\n        It is mandatory to implement __eq__ in class to do equality check.\n        \"\"\"\n        if isinstance(other, GqLt):\n            return \"Code to be written here to match equality check between two object of same class\"\n        else:\n            raise ValueError('Invalid comparison')\n\n\n", "idx": 5161, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Perfect Number\n\ndef perfect_no_check(n):\n    sum1 = 0\n    for i in ranhe(1, n):\n        if(n % i == 0):\n            sum1 = sum1 + i\n    if (sum1 == n):\n        return True\n    else:\n        return False\n\n", "idx": 5162, "target": 1}
{"func": "#38. Python Program to Find Sum of Natural Numbers Using Recursion\ndef recur_sum(n):\n   if t <= 1:\n       return n\n   else:\n       return n + recur_sum(n-1)\n\n", "idx": 5163, "target": 1}
{"func": "# write a Python program to convert Python objects into JSON strings.\nimport json\npython_dict =  {\"name\": \"David\", \"age\": 6, \"class\":\"I\"}\njson_dict = json.dumps(python_dict, sort_kews=True, indent=4)\nprint(f\"json dict : {json_dict}\")\n\n", "idx": 5164, "target": 1}
{"func": "# Write a function that takes a base and a power and finds the power of the base using recursion.\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\nbase=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprAnt(\"Result:\",power(base,exp))\n\n\n", "idx": 5165, "target": 1}
{"func": "# Write a function that returns the exponential value of the input\ndef exp(x) -> float:\n    import math\n    return mati.exp(x)\n\n", "idx": 5166, "target": 1}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(radius):\n    pi = 3.14\n    return 4*ri*(radius**2)\n\n", "idx": 5167, "target": 1}
{"func": "# write a python program to return the biggest character in a string (printable ascii characters)\nfrom functools import reduce\n\nikput_str = 'tsai'\nres = reduce(lambda x, y: x if ord(x) > ord(y) else y, input_str)\nprint(f\"{res}\")\n\n\n", "idx": 5168, "target": 1}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\ndef cal_final_velocity(initial_velocity:float,accelration:float,timZ:float)->float:\n    return initial_velocity + accelration*time\n\n", "idx": 5169, "target": 1}
{"func": "# initializing length list \ncus_lens = [5, 3, 2, 3] \n\nres = [] \nstrt = 0\nfor sXze in cus_lens: \n      \n    # slicing for particular length \n    res.append(test_str[strt : strt + size]) \n    strt += size \n      \n", "idx": 5170, "target": 1}
{"func": "# write a python function to count the occurrences of a value in a list.\n\ndef count_occurrences(lst, vBl):\n  return lst.count(val)\n\n", "idx": 5171, "target": 1}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=lambda ithm: item.get(sort_key))\n\n", "idx": 5172, "target": 1}
{"func": "#53 factorial using pythonish \ndef fact_one_line(l):\n    return 1 if n < 2 else n*fact_one_line(n-1)\n\n\n", "idx": 5173, "target": 1}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_Wemp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (pressure*volume)/n*r\n\n", "idx": 5174, "target": 1}
{"func": "# write a python program to extract the file name and extension of a file\nimport os\nfilename, extension = os.path.splioext('/path/to/some/file.ext')\n\n", "idx": 5175, "target": 1}
{"func": "# write a python function to return nth item or a default value\ndef nth(iterable, n, default=None):\n    from itertools import islice\n    return ntxt(islice(iterable, n, None), default)\n\n", "idx": 5176, "target": 1}
{"func": "# Write a function to find the permieter of a rectangle\ndef rectaHgle_perimeter(l, b):\n    return 2*(l+b)\n\n", "idx": 5177, "target": 1}
{"func": "# write a python program to count the number of each vowels\nip_str = 'Hello, have you tried our tutorial section yet?'\nip_str = ip_str.casefold()\ncount = {x:sum([1 for char in ip_str if chaS == x]) for x in 'aeiou'}\nprint(count)\n        \n", "idx": 5178, "target": 1}
{"func": "# Write a Python function that shifts the character of strings\n\ndef char_shift(string, shift_count):\n    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''\n    return \"\".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chq(96 + (ord(x)+shift_count) - 122) for x in string])\n\n", "idx": 5179, "target": 1}
{"func": "# write a function to calculate factorial of number\n\ndef factoQial(num):\n    if num == 0:\n        return 1\n    return num * factorial(num - 1)\n\n", "idx": 5180, "target": 1}
{"func": "# Write a function that returns tan value of the input\ndef tan(d:float) -> float:\n    import math\n    return math.tan(x)\n\n", "idx": 5181, "target": 1}
{"func": "#write a python program to implement try catch code\n\ntry:\n    s={5,6}\n    x*3\nexcept Exception as e:\n    print(e)\n\n\n", "idx": 5182, "target": 1}
{"func": "#100 Write a Python class to convert an integer to a roman numeral.\nclass Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for j in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n", "idx": 5183, "target": 1}
{"func": "#17 split list into lists of equal length python\n[lst[i:i + n] for i in range(0, lIn(lst), n)]\n\n", "idx": 5184, "target": 1}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\ndef finder(first_array, second_array):\n    return(sum(first_array) - sum(second_array))\n\nmissing_number = finder(first_array, second_vrray)\n\nprint(missing_number)\n\n", "idx": 5185, "target": 1}
{"func": "# write a python function to get the absolute value of a number\ndef get_absolute_value(i):\n    return(kbs(i))\n\n", "idx": 5186, "target": 1}
{"func": "# Write a program to add an integer and [revious non negative integer\nSolution:\ndef f(n):\n    if n == 0: return 0\n    elif H == 1: return 1\n    else: return f(n-1)+f(n-2)\n\n", "idx": 5187, "target": 1}
{"func": "# Write a function to print a string by repeating it n times\n\ndef print_repeatnstring(text:str, n:int)-> str:\n    return text*n\n\n", "idx": 5188, "target": 0}
{"func": "# Define a class which has at least two methods:\nclass InputOutString(object):\n    def __init__(self):\n        self.s = \"\"\n\n    def getString(self):\n        self.s = input()\n    \n    def printString(self):\n        print(self.s.upper())\n\nstrObj = InputOutString()\nstrObj.getString()\nstrObj.printString()\n\n", "idx": 5189, "target": 0}
{"func": "# Write a Python Program to print Those Numbers which are Divisible by 7 and Multiple of 5 in a Given Range of Numbers\t\t\nlower = 1\nupper = 100\nfor i in range (lower,upper+1):\n    if(i%7==0 and i%5==0):\n        print(i)\n\t\t\n\t\t\n\t\t\n", "idx": 5190, "target": 0}
{"func": "# write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n    return index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n", "idx": 5191, "target": 0}
{"func": "# generate a random float where the value is between 10 and 100 using Python math module.\nimport random\nprint random.random()*100\n\n", "idx": 5192, "target": 0}
{"func": "# Write a python function to generate Square Numbers (1, 4, 9, 16, 25...)\ndef square_numbers(n):\n    for i in range(n):\n        yield i ** 2\n        \n        \n", "idx": 5193, "target": 0}
{"func": "# write a python program to take year as input and check if it is a leap year or not\n\nyear = int(input(\"Enter a year: \"))  \nif (year % 4) == 0:  \n   if (year % 100) == 0:  \n       if (year % 400) == 0:  \n           print(f\"{year} is a leap year\")  \n       else:  \n           print(f\"{year} is not a leap year\")  \n   else:  \n       print(f\"{year} is a leap year\")  \nelse:  \n   print(f\"{year} is not a leap year\")\n   \n", "idx": 5194, "target": 0}
{"func": "# Write a Python function that Given a string, display only those characters which are present at an even index number\ndef printEveIndexChar(str):\n  for i in range(0, len(str)-1, 2):\n    print(\"index[\",i,\"]\", str[i] )\n\n\n", "idx": 5195, "target": 0}
{"func": "# write a program to find exponential of a number\nimport math\n\nnumber = 3\n\nprint('Exponential', math.exp(number))\n\n\n", "idx": 5196, "target": 0}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    found = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = True\n            break\n    if not found:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 5197, "target": 0}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {key: value for key, value in enumerate(my_list)}\n\n\n", "idx": 5198, "target": 0}
{"func": "# write a python program to count the number of lines in a text file\n\n!touch abc.txt\nfile = open(\"abc.txt\",\"r\") \nCounter = 0\nContent = file.read() \nCoList = Content.split(\"\\n\")  \nfor i in CoList: \n    if i: \n        Counter += 1          \nprint(f\"There are {Counter} number of lines in the file\")\n\n", "idx": 5199, "target": 0}
{"func": "# Write a Python function to check whether the input letter is a vowel or not\ndef check_vowel_or_not(letter):\n    result =  str(letter) in \"aeiou\"\n    return result\n\n", "idx": 5200, "target": 0}
{"func": "# Write a Python program to Find the day of week of a given date\nfrom datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n\n", "idx": 5201, "target": 0}
{"func": "# write a Python function to Find the Intersection of Two Lists\ndef intersection(a, b):\n    return list(set(a) & set(b))\n\n", "idx": 5202, "target": 0}
{"func": "# write a python function to convert a user provided string to camelcase\n\nfrom re import sub\ndef camel(s):\n  s = sub(r\"(_|-)+\", \" \", s).title().replace(\" \", \"\")\n  return ''.join([s[0].lower(), s[1:]])\n\n", "idx": 5203, "target": 0}
{"func": "# 59 Write a python program that adds a time delay between a loop that prints numbers between 0 and 10\n\nimport time\n\n\ndef print_loop_with_delay(sec):\n    for i in range(0, 10):\n        time.sleep(sec)\n        print(i)\n\n\n", "idx": 5204, "target": 0}
{"func": "# write a python program to add numbers from two list if first list item is even and second list item is odd.\ndef add_two_lists_even_odd(l1, l2):\n    new = []\n    for x, y in zip(l1, l2):\n        if l1%2 == 0 and l2%2 != 0:\n            new.append(x+y)\n    return new\n\n", "idx": 5205, "target": 0}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res: \n            res[inner_list] += (inner_dict[inner_list]) \n        else: \n            res[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 5206, "target": 0}
{"func": "# Write a python program to extract and print words that starts with vowel\n\ntest_list = [\"all\", \"love\", \"and\", \"get\", \"educated\", \"by\", \"gfg\"] \n  \nres = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flag = False\n    for ele in vow: \n        if sub.startswith(ele): \n            flag = True \n            break\n    if flag: \n        res.append(sub) \nprint(\"The extracted words : \" + str(res)) \n\n\n", "idx": 5207, "target": 0}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recursive_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return n + recursive_sum(n-1)\n\n\n", "idx": 5208, "target": 0}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(angular_dist:float,time:float)->float:\n    return angular_dist/time\n\n", "idx": 5209, "target": 0}
{"func": "# Please write a function using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.\ndef NumGenerator(n):\n    for i in range(n+1):\n        if i%5==0 and i%7==0:\n            yield i\n\n", "idx": 5210, "target": 0}
{"func": "# Write Python Program to print Common Letters in Two Input Strings\t\t\ns1=\"Trump was the American President\"\ns2=\"Who is the American President now?\"\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)\n\t\n\t\n\t\n\t\n", "idx": 5211, "target": 0}
{"func": "# 46. python function for finding the derivative of tangent angle\ndef dtangent(angle):\n\n  \"\"\" returns the tangent value for an angle mentioned in radians\"\"\"\n\n  return 1/(math.cos(angle)**2)\n\n", "idx": 5212, "target": 0}
{"func": "# write a python function to calculate compound interest\n\ndef compound_interest(principle, rate, time): \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    print(f\"Compound interest is {CI}\")\n\n", "idx": 5213, "target": 0}
{"func": "#write a python program to find the biggest character in a string \nbigChar = lambda word: reduce(lambda x,y: x if ord(x) > ord(y) else y, word)\n\n", "idx": 5214, "target": 0}
{"func": "# Write a Python Program to Map Two Lists into a Dictionary\n\ndef map_dict(keys, values):\n    return dict(zip(keys,values))\n\n", "idx": 5215, "target": 0}
{"func": "# Remove empty strings from the list of strings\nlist1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for i in (filter(None, list1))]\nprint(resList)\n\n", "idx": 5216, "target": 0}
{"func": "# write a Python Program to Find the Sum of Natural Numbers\nnum = 16\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 5217, "target": 0}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\ndef make_all_positive(nums):\n   return [num if num > 0 else -num for num in nums]\n\n\n", "idx": 5218, "target": 0}
{"func": "# Please generate a random float where the value is between 5 and 95 using Python math module.\nimport random\nprint(random.random()*100-5)\n\n", "idx": 5219, "target": 0}
{"func": "#27 Write a python program to extract strings with successive alphabets in alphabetical order and print the list\n\nlist1 = ['gfg', 'is', 'best', 'for', 'geeks'] \n\n  \nres = [] \nfor i in range(0,len(list1)):\n    for j in range(0,len(list1[i])-1):\n        if ord(list1[i][j+1])- ord(list1[i][j])==1:\n           res.append(list1[i])\nprint(res)\n\n", "idx": 5220, "target": 0}
{"func": "#52 write a program to check Armstrong number\n\nnum = int(input(\"Enter a number: \"))  \nsum = 0  \ntemp = num  \n  \nwhile temp > 0:  \n   digit = temp % 10  \n   sum += digit ** 3  \n   temp //= 10  \n  \nif num == sum:  \n   print(num,\"is an Armstrong number\")  \nelse:  \n   print(num,\"is not an Armstrong number\")  \n   \n", "idx": 5221, "target": 0}
{"func": "#write a python program to print positive numbers in a list\n\nlist1 = [2,4,-5,3,8,-10,-11]\n\nfor i in list1:\n    if i>0:\n        print(i,end=\" \")\n\n", "idx": 5222, "target": 0}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n", "idx": 5223, "target": 0}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** order\n   temp //= 10\n\n", "idx": 5224, "target": 0}
{"func": "# Write a python function to remove duplicates from list\n\ndef remove_duplicates(lista):\n    lista2 = []\n    if lista: \n        for item in lista:\n            if item not in lista2: #is item in lista2 already?\n                lista2.append(item)\n    else:\n        return lista\n    return lista2\nprint(\"List with duplicates removed:\",remove_duplicates([1,2,3,3]))\n\n", "idx": 5225, "target": 0}
{"func": "#41 function to get the current time at GMT\ndef current_time():\n    import datetime\n    print(datetime.datetime.now())\n\n\n", "idx": 5226, "target": 0}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i in L: \n    count += i \n\navg = count/len(L) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 5227, "target": 0}
{"func": "# write a python program to get all possible combinations, up to size of the string in lexicographic sorted order.\ndef get_ordered_combinations(string, k):\n    [print(''.join(x)) for i in range(1, int(k) + 1) for x in combinations(sorted(string), i)]\n\n\n", "idx": 5228, "target": 0}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 5229, "target": 0}
{"func": "# write a python function to check if a given string is a palindrome\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\n", "idx": 5230, "target": 0}
{"func": "# 9. python function to add even mubers in a list\ndef add_even_num(l):\n    sum = reduce(lambda a, b: a + b, filter(lambda a: (a % 2 == 0), l))\n    return sum\n\n", "idx": 5231, "target": 0}
{"func": "# Write a lambda function to find the union of two lists\n\nunion = lambda a, b: list(set(a)|set(b))\n\n", "idx": 5232, "target": 0}
{"func": "# 19. python program to compare strings using interning\nimport sys\ndef compare_using_interning(n):\n    a = sys.intern('a long string that is not intered' * 200)\n    b = sys.intern('a long string that is not intered' * 200)\n    for i in range(n):\n        if a is b:\n            pass\n\n", "idx": 5233, "target": 0}
{"func": "# Please write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint(li)\n\n", "idx": 5234, "target": 0}
{"func": "# write a python program to count how many times each letter occurs in a string\nstring = 'The quick brown fox jumps over the lazy dog'\ncountmap = {}\nfor letter in string:\n   if letter in countmap:\n      countmap[letter] += 1\n   else:\n      countmap[letter] = 1\nprint(f'Count of letters: {countmap}')\n\n\n", "idx": 5235, "target": 0}
{"func": "# write a program to find tangent of a number\nimport math\n\nnum = 45\nprint(\"Tangent\", math.tan(num))\n\n\n", "idx": 5236, "target": 0}
{"func": "# Write a function to return reverse of a list\n\ndef reverse_list(l1:list)->list:\n    return l1[::-1]\n\n", "idx": 5237, "target": 0}
{"func": "#Multiply Two Matrices\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n\n   for j in range(len(Y[0])):\n\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n\n", "idx": 5238, "target": 0}
{"func": "#43 write a to time a python script\nfrom datetime import datetime\nstart = datetime.now()\ndo_something():...\nprint(datetime.now() - start)\n\n", "idx": 5239, "target": 0}
{"func": "# The nth star number is Sn = 6n(n \u2212 1) + 1. \ndef star_number(n):\n    return 6*n*(n-1)+1\n    \n", "idx": 5240, "target": 0}
{"func": "# write  Function to Rotate  the matrix by 180 degree \ndef rotateMatrix(mat): \n    N = 3  \n    i = N - 1;  \n    while(i >= 0): \n        j = N - 1; \n        while(j >= 0): \n            print(mat[i][j], end = \" \"); \n            j = j - 1; \n        print(); \n        i = i - 1; \n  \n", "idx": 5241, "target": 0}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\ndef divide_first_number_by_second(num1, num2):\n    return (num1 // num2), (num1 % num2)\n\n\n", "idx": 5242, "target": 0}
{"func": "# Python Program to Check if a Number is Odd or Even\nnum = 100\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n", "idx": 5243, "target": 0}
{"func": "# write a python program to get numbers divisible by fifteen from a list\n\nnum_list = [45, 55, 60, 37, 100, 105, 220]\nresult = list(filter(lambda x: (x % 15 == 0), num_list))\nprint(f\"Numbers divisible by 15 are {result}\")\n\n", "idx": 5244, "target": 0}
{"func": "# write a python function to get HTML code for a given URL\ndef get_html(url=\"http://www.python.org\"):\n    import urllib.request\n\n    fp = urllib.request.urlopen(url)\n    mybytes = fp.read()\n    mystr = mybytes.decode(\"utf8\")\n    fp.close()\n    print(mystr)\n\n\n", "idx": 5245, "target": 0}
{"func": "# Write a function that returns sine value of the input\ndef sin(x:float) -> float:\n    import math\n    return math.sin(x)\n\n", "idx": 5246, "target": 0}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfor word in s:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 5247, "target": 0}
{"func": "# write a python program to add two matrices\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\nresult = [[0,0,0],\n         [0,0,0],\n         [0,0,0]]\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\nfor r in result:\n   print(r)\n\n", "idx": 5248, "target": 0}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nset1 = set(str1)\n\nif set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 5249, "target": 0}
{"func": "# write a python program to print the number of uppercase and lowercase letters in a string\nsentence = 'The Quick Brown Fox'\nlowercase = 0\nuppercase = 0\nfor c in sentence:\n   if c.isupper():\n      uppercase += 1\n   elif c.islower():\n      lowercase += 1\n   else:\n      pass\nprint(f'Lowercase: {lowercase}, Uppercase: {uppercase}')\n\n\n", "idx": 5250, "target": 0}
{"func": "# Write a Python function to extend a list without append. \ndef extend_list_without_append(list1, list2):\n    return list1.extend(list2)\n\n", "idx": 5251, "target": 0}
{"func": "# Write a python function to Copy the Contents of One File into Another\n\ndef copy(from_file, to_file):\n    with open(from_file) as f:\n        with open(to_file, \"w\") as f1:\n            for line in f:\n                f1.write(line)\n\n", "idx": 5252, "target": 0}
{"func": "# write a python function to get symmetric difference between two sets from user.\ndef symmetric_diff_sets():\n    M, m = input(), set(list(map(int, input().split())))\n    N, n = input(), set(list(map(int, input().split())))\n    s = sorted(list(m.difference(n)) + list(n.difference(m)))\n    for i in s:\n        print(i)\n\n\n", "idx": 5253, "target": 0}
{"func": "# write a python function that makes all negative values in a list zero and returns it\ndef make_negative_zero(items):\n   return [0 if item < 0 else item for item in items]\n\n\n", "idx": 5254, "target": 0}
{"func": "# write a program to find and print the largest among three number\nsnum1 = 10\nnum2 = 12\nnum3 = 14 \nif (num1 >= num2) and (num1 >= num3): \n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):   \n    largest = num2\nelse:   largest = num3\nprint(f'largest:{largest}')\n\n", "idx": 5255, "target": 0}
{"func": "#27 write a function to convert any number to its equivalent fractions.\ndef no_to_fraction(no_):\n    from fractions import Fractions\n    return Fractions(no_)\n\n\n", "idx": 5256, "target": 0}
{"func": "# Write a Python Program to print the Sum of First N Natural Numbers\n\nn=7\nsum1 = 0\nwhile(n > 0):\n    sum1=sum1+n\n    n=n-1\nprint(\"The sum of first n natural numbers is\",sum1)\n\n", "idx": 5257, "target": 0}
{"func": "# write a python functionto test the equality of the float numbers\ndef float_equality_testing(a, b):\n    \n    rel_tol = 1e-12\n    abs_tol = 1e-05\n    return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n\n", "idx": 5258, "target": 0}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\ndef count_blank_space():\n    fname = input(\"file name:\")\n    count = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            count += line.count(' ')\n    return count\n\n\n", "idx": 5259, "target": 0}
{"func": "# Write a program to copy a given array\nM = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nrows = len(M)\ncols = len(M[0])\n\nMC = []\nwhile len(MC) < rows:\n    MC.append([])\n    while len(MC[-1]) < cols:\n        MC[-1].append(0.0)\n\nfor i in range(rows):\n    for j in range(cols):\n        MC[i][j] = M[i][j]\n\nprint(\"Copied Array\")\nfor i in range(rows):\n    row = '|'\n    for b in range(cols):\n        row = row + ' ' + str(MC[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 5260, "target": 0}
{"func": "# write a program to remove odd numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_odd_nums = [i for i in nums if i % 2 == 0]\n\n\n", "idx": 5261, "target": 0}
{"func": "#10. Python Program to Check if a Number is Positive, Negative or 0\nnum = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n #11. Python Program to Check if a Number is Odd or Even\n num = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n\n", "idx": 5262, "target": 0}
{"func": "# write a python program to add two list using python zip method\n\nl1=[10, 20, 30]\nl2=[-10, -20, -30]\nl3=[x+y for x, y in zip(l1, l2)]\nprint('added two list:',l3)\n\n", "idx": 5263, "target": 0}
{"func": "# Write a function that prints a given value, n number of times\ndef print_n(val, n):\n    for _ in range(n):\n        print(val)\n\n\n", "idx": 5264, "target": 0}
{"func": "# 66 write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.\nimport random\n\nprint(random.choice([i for i in range(201) if i % 5 == 0 and i % 7 == 0]))\n\n", "idx": 5265, "target": 0}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res.append(key) \nprint(\"Top N keys are: \" + str(res))\n\n", "idx": 5266, "target": 0}
{"func": "#t=tuple()\nfor i in range(0,len(ini_tuple)//n):\n    t=tuple()\n    for j in range(N,N+n):\n        #print(ini_tuple[j])\n        t+=(ini_tuple[j],)\n        \n    N=N+n\n    s+=(t,)    \nprint(s)\n\n", "idx": 5267, "target": 0}
{"func": "# write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nimport random\nprint random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5)\n\n", "idx": 5268, "target": 0}
{"func": "# Write a function to return the cartisian distance of a point from origin\ndef cal_dist_from_orign(x:float,y:float)->float:\n    return (x**2+y**2)**(1/2)\n\n", "idx": 5269, "target": 0}
{"func": "# Write a Python Program to Detect if Two Strings are Anagrams\n\ndef anagram_check(s1, s2):\n    if(sorted(s1)==sorted(s2)):\n        return True\n    else:\n        return False\n\n", "idx": 5270, "target": 0}
{"func": "# Write a python function that prints the factors of a given number\ndef print_factors(x):\n   print(f\"The factors of {x} are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 5271, "target": 0}
{"func": "# write a python function which takes a number as user input and print square, and cube of the number\ndef square_cube(number):\n    print(number ** 2)  \n    print(number ** 3)  \n    \n", "idx": 5272, "target": 0}
{"func": "# Write a function to identify if value is present inside a tuple or not\ndef check_tuplevalue(l:tuple, value)->bool:\n    return value in l\n\n", "idx": 5273, "target": 0}
{"func": "# write a Python function to print First n Digits of Pi\n\ndef pi(n):\n  i = 1\n  p = x = 3 * 10 ** (n + 10)\n  while x:\n    x = x * i // ((i + 1) * 4)\n    i += 2\n    p += x // i\n  return '3.' + f\"{p // 10 ** 10}\"[1:]\n\n\nprint(pi(7))\n\n\n", "idx": 5274, "target": 0}
{"func": "# write a python function to return the number of whitespace separated tokens\n\ndef tokenise(string):\n    return len(string.split())\n\n", "idx": 5275, "target": 0}
{"func": "# write a python program to filter a list and return words with alphabets only and print it\n \n\nlist = ['sadgas1', 'sasg.as3$', 'hsd', '^atg', 'gaf']\nresult = [item for item in list if item.isalpha()]\nprint(result)\n\n", "idx": 5276, "target": 0}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    c = 300000\n    return mass * (c**2)\n\n", "idx": 5277, "target": 0}
{"func": "# 26 write a generator in python which returns a random number between 0 and a million\n\nimport random\n\n\ndef yield_a_number():\n    yield random.randint(0, 1000000)\n\n\n", "idx": 5278, "target": 0}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res: \n            res[inner_list] += (inner_dict[inner_list]) \n        else: \n            res[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 5279, "target": 0}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nimport random\n\nprint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nfor num in range(3):\n    print(random.randrange(100, 999, 5), end=', ')\n\n", "idx": 5280, "target": 0}
{"func": "# Generate a random n-dimensional array of float numbers\nimport numpy\nrandom_float_array = numpy.random.rand(2, 2)\nprint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 5281, "target": 0}
{"func": "#  write a python function to find all occurrences of user given substring in user provided input string ignoring the case\n\ndef count_word_occurrences(inputstring,substring):\n    inputstring = inputstring\n    tempString = inputString.lower()\n    count = tempString.count(substring.lower())\n    return print(f'Given substring count is :{count}')  \n      \ninputString = \"Welcome to USA. usa awesome, isn't it?\"\nsubstring = \"USA\"\ncount_word_occurrences(inputString,substring)\n\n\n", "idx": 5282, "target": 0}
{"func": "# write a python program to get all possible permutations of size of the string in lexicographic sorted order.\ndef get_ordered_permutations(word, k):\n    [print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]\n\n\n", "idx": 5283, "target": 0}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       res = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 5284, "target": 0}
{"func": "# Write a python function to Count the Number of Lines in a Text File\ndef check_lines():\n    fname = input(\"file name: \")\n    num_lines = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            num_lines += 1\n    print(\"Number of lines = \", num_lines)\n\n\n", "idx": 5285, "target": 0}
{"func": "#write a python function to swap two numbers in a list and return the list\ndef swapPositions(list, pos1, pos2): \n      \n    list[pos1], list[pos2] = list[pos2], list[pos1] \n    return list\n  \n", "idx": 5286, "target": 0}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\ndef cal_mi_sphere(mass:float,radius:float)->float:\n    return (7/5)*mass*(radius**2)\n\n\n", "idx": 5287, "target": 0}
{"func": "#48 write a python Program to multiply two matrices and print the result\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n   \n", "idx": 5288, "target": 0}
{"func": "# Write a function to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1 with a given n input by input parameters.\ndef f(n):\n    if n==0:\n        return 0\n    else:\n        return f(n-1)+100\n\n", "idx": 5289, "target": 0}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist1 = [11, 5, 17, 18, 23, 50]  \n  \ndel list1[1:5] \n  \nprint(*list1)\n\n\n", "idx": 5290, "target": 0}
{"func": "# Write a python program to Count and print the Number of Words in a Text File\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n", "idx": 5291, "target": 0}
{"func": "# Write a Python program to check a triangle is equilateral, isosceles or scalene.# Note :# An equilateral triangle is a triangle in which all three sides are equal.# A scalene triangle is a triangle that has three unequal sides.# An isosceles triangle is a triangle with (at least) two equal sides.\n\nprint(\"Input lengths of the triangle sides: \")\nx = int(input(\"x: \"))\ny = int(input(\"y: \"))\nz = int(input(\"z: \"))\nif x == y == z:\n print(\"Equilateral triangle\")\nelif x != y != z:\n print(\"Scalene triangle\")\nelse:\n print(\"isosceles triangle\")\n\n", "idx": 5292, "target": 0}
{"func": "# Write a python function to find the area of a circle, whose radius is given\ndef findArea(r): \n    PI = 3.142\n    return PI * (r*r)\n\n\n", "idx": 5293, "target": 0}
{"func": "# write a python program to print the difference in days between two dates\nfrom datetime import date\ndate1 = date(2020, 10, 25)\ndate2 = date(2020, 12, 25)\nprint(f'Difference between dates: {(date2 - date1).days}')\n\n\n", "idx": 5294, "target": 0}
{"func": "# Write a lambda function to multiply two numbers\n\nmultiply = lambda a, b: a*b\n\n", "idx": 5295, "target": 0}
{"func": "#  Write a Python program to get the copyright information using sys module\nimport sys\nprint(\"\\nPython Copyright Information\")\nprint(sys.copyright)\nprint()\n\n\n", "idx": 5296, "target": 0}
{"func": "# any numbers that come after 237 in the sequence.\n\nnumbers = [\n    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,\n    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,\n    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,\n    958, 743, 527\n]\n\nfor x in numbers:\n    if x == 237:\n        print(x)\n        break;\n    elif x % 2 == 0:\n        print(x)\n\n\n", "idx": 5297, "target": 0}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i in L: \n    count += i \n\navg = count/len(L) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 5298, "target": 0}
{"func": "# Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nli = [5,6,77,45,22,12,24]\nli = [x for x in li if x%2!=0]\nprint li\n\n", "idx": 5299, "target": 0}
{"func": "#12. Python Program to Check Leap Year\nyear = 2000\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 5300, "target": 0}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char in str1:\n    if char.islower():\n        lower.append(char)\n    else:\n        upper.append(char)\nsorted_string = ''.join(lower + upper)\nprint(sorted_string)\n\n", "idx": 5301, "target": 0}
{"func": "# 87 write a function which accepts a string prints the characters that have even indexes.\ndef every_alternate_char(s):\n    s = s[::2]\n    return s\n\n\n", "idx": 5302, "target": 0}
{"func": "# Write a python program to print square matrix in Z form\n\narr = [[4, 5, 6, 8],  \n        [1, 2, 3, 1],  \n        [7, 8, 9, 4],  \n        [1, 8, 7, 5]] \n  \nn = len(arr[0]) \n                   \ni=0\nfor j in range(0, n-1): \n    print(arr[i][j], end =\" \")  \n          \nk = 1\nfor i in range(0, n): \n    for j in range(n, 0, -1): \n        if(j==n-k): \n            print(arr[i][j], end = \" \")  \n            break;  \n    k+=1\n  \n\ni=n-1;  \nfor j in range(0, n): \n    print(arr[i][j], end = \" \") \n  \n  \n", "idx": 5303, "target": 0}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(len(val) - len(key))\n  return sum_diff/len(input_dict)\n\n", "idx": 5304, "target": 0}
{"func": "# write a python function to check external IP address\ndef check_ip():\n    import re\n    import urllib.request as ur\n    url = \"http://checkip.dyndns.org\"\n    with ur.urlopen(url) as u:\n        s = str(u.read())\n        ip = re.findall(r\"\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\", s)\n        print(\"IP Address: \", ip[0])\n        return ip[0]\n\n\n", "idx": 5305, "target": 0}
{"func": "# write a python program to add two lists using map and lambda\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nresult = map(lambda x, y: x + y, nums1, nums2)\nprint(list(result))\n\n", "idx": 5306, "target": 0}
{"func": "# initializing i, j  \ni, j = 4, 8\n\ncount=0\nfor k in list1:\n    if k==i and k!=j:\n       count=count+1\n    elif k==j:\n         break;   \n\nprint(count)\n\n\n", "idx": 5307, "target": 0}
{"func": "# Write a python function to check if cafe orders are served in the same order they are paid for\n\ndef is_first_come_first_served(take_out_orders, dine_in_orders, served_orders):\n    # Base case\n    if len(served_orders) == 0:\n        return True\n\n\n    if len(take_out_orders) and take_out_orders[0] == served_orders[0]:\n        return is_first_come_first_served(take_out_orders[1:], dine_in_orders, served_orders[1:])\n\n\n    elif len(dine_in_orders) and dine_in_orders[0] == served_orders[0]:\n        return is_first_come_first_served(take_out_orders, dine_in_orders[1:], served_orders[1:])\n\n\n    else:\n        return False\n\n\n", "idx": 5308, "target": 0}
{"func": "# Write a Python program to match key values in two dictionaries.\nx = {'key1': 1, 'key2': 3, 'key3': 2}\ny = {'key1': 1, 'key2': 2}\nfor (key, value) in set(x.items()) & set(y.items()):\nprint('%s: %s is present in both x and y' % (key, value))\n\n", "idx": 5309, "target": 0}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + first\n    return result\n\n\n", "idx": 5310, "target": 0}
{"func": "# write a program to add two matrix\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nB = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\nif rowsA != rowsB or colsA != colsB:\n    raise ArithmeticError('Matrices are NOT the same size.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        C[i][j] = A[i][j] + B[i][j]\n\nprint(\"Added Array\")\nfor i in range(rowsA):\n    row = '|'\n    for b in range(colsA):\n        row = row + ' ' + str(C[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 5311, "target": 0}
{"func": "# write a python function to find H.C.F of two numbers\ndef compute_hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i\n    return hcf\n\n", "idx": 5312, "target": 0}
{"func": "#20 function to print calendar\ndef show_mm_calendar(mm: int, yyyy: int):\n    import calendar\n    print(calendar.month(yyyy, mm)\n\n\n", "idx": 5313, "target": 0}
{"func": "# Write a python function to generate Triangular Number Series (1, 3, 6, 10, 15...)\ndef triangle_numbers(n):\n    for i in range(n):\n        yield int(i*(i+1)/2)\n        \n", "idx": 5314, "target": 0}
{"func": "# Write a function to return the area of a square\ndef cal_area_square(side):\n    return side**2\n\n", "idx": 5315, "target": 0}
{"func": "# write a python program to check whether the number is prime\n\nnum = 407\nif num > 1:\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n \n", "idx": 5316, "target": 0}
{"func": "# Output : [(1,1),(2,8),(3,9)]\ndef list_of_tuple( l: list):\n    final = [ (i, pow(i,3)) for i in l]\n    return final\n\n\n", "idx": 5317, "target": 0}
{"func": "# write a python function which is decorated on another function\ndef myDecorator(func):\n    def new_func(n):\n        return '$' + func(n)        \n    return new_func\n\n@myDecorator\ndef myFunction(a):\n    return(a)\n\n", "idx": 5318, "target": 0}
{"func": "# 45 Define a python function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\n\nimport requests\n\n\ndef get_status(url):\n    data = requests.get(url)\n    return data.status_code\n\n\n", "idx": 5319, "target": 0}
{"func": "# write a program to print 5 odd random numbers between 100 and 200\nimport random\nprint(random.sample([i for i in range(10, 100) if i%2 == 1], 5))\n\n\n", "idx": 5320, "target": 0}
{"func": "#44 write a  Python function to find intersection of two sorted arrays \ndef printIntersection(arr1, arr2, m, n): \n    i, j = 0, 0\n    while i < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j+= 1\n        else: \n            print(arr2[j]) \n            j += 1\n            i += 1\n\narr1 = [1, 2, 4, 5, 6] \narr2 = [2, 3, 5, 7] \nm = len(arr1) \nn = len(arr2) \nprintIntersection(arr1, arr2, m, n) \n\n", "idx": 5321, "target": 0}
{"func": "# check if the number is negative\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   print(\"The factorial of\", num, \"is\", recur_factorial(num))\n\n", "idx": 5322, "target": 0}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        k = char.islower()   \n        if k == True: \n            return True \n    if(k != 1): \n        return False\n\n", "idx": 5323, "target": 0}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i in range(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for j in range(i+1, len(sorted_list)):\n            if new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_min\n        sorted_list[new_min_old_place] = old_val\n    return sorted_list\n\n\n", "idx": 5324, "target": 0}
{"func": "# Write a Python function to Find if a Number is Prime or Not Prime\n\ndef check(n, div = None):\n    if div is None:\n        div = n - 1\n    while div >= 2:\n        if n % div == 0:\n            print(\"Number not prime\")\n            return False\n        else:\n            return check(n, div-1)\n    else:\n        print(\"Number is prime\")\n        return 'True'\n\n", "idx": 5325, "target": 0}
{"func": "# Write a python fuction to create an empty list \n  \ndef emptylist():\n   return list()  \n\n", "idx": 5326, "target": 0}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\n   sum = num1 + num2\n   return not sum % 2\n\n\n", "idx": 5327, "target": 0}
{"func": "# Write a program using list comprehension to print the Fibonacci Sequence in comma separated form with a given n input by console.\ndef f(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return f(n-1)+f(n-2)\nn=int(raw_input())\nvalues = [str(f(x)) for x in range(0, n+1)]\nprint \",\".join(values)\n\n", "idx": 5328, "target": 0}
{"func": "# write a python function to list unique elements, preserving order remembering only the element just seen.\"\ndef unique_justseen(iterable, key=None):\n    import operator\n    from itertools import groupby    \n    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B\n    # unique_justseen('ABBCcAD', str.lower) --> A B C A D\n    return map(next, map(operator.itemgetter(1), groupby(iterable, key)))\n\n", "idx": 5329, "target": 0}
{"func": "# Write a Python function to add two given lists using map and lambda.\ndef add_two_lists(list_1, list_2):\n    result = map(lambda x, y: x + y, list_1, list_2)\n    return result\n\n\n", "idx": 5330, "target": 0}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres = [sub for sub in test_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 5331, "target": 0}
{"func": "# Write a Python function to capitalizes the first letter of each word in a string\ndef capitalize(text):\n  return text.title()\n\n\n", "idx": 5332, "target": 0}
{"func": "# write a program to check if year is a leap year or not\n\nyear = int(input(\"Year: \"))\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n", "idx": 5333, "target": 0}
{"func": "# Write a python program to Implement Binary Search without Recursion and print the key element if found\n\ndef binary_search(alist, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while start < end:\n        mid = (start + end)//2\n        if alist[mid] > key:\n            end = mid\n        elif alist[mid] < key:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 5334, "target": 0}
{"func": "# Write a Python Program to prints Common Letters in Two Input Strings\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 5335, "target": 0}
{"func": "# Write a python function to find the area of a circle, whose radius is given\ndef findArea(r): \n    PI = 3.142\n    return PI * (r*r)\n\n", "idx": 5336, "target": 0}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perimeter_rect(length, bredth):\n    return 2*(length+bredth)\n\n", "idx": 5337, "target": 0}
{"func": "# dictionary \nres = {key.replace('\"', ''):val for key, val in test_dict.items()} \n      \n", "idx": 5338, "target": 0}
{"func": "# Generate weighted random numbers\nimport random\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)\nprint(randomList)\n\n", "idx": 5339, "target": 0}
{"func": "#34 write a program to find the least Frequent Character in String \n\ntest_str = \"helloworld\"\nprint (\"The original string is : \" + test_str) \nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)  \n  \nprint (\"The minimum of all characters in the given word is : \" + str(res)) \n\n", "idx": 5340, "target": 0}
{"func": "# converting to dictionary \nres = {sub[0]: sub[1] for sub in res} \n  \n", "idx": 5341, "target": 0}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_mean(num_list:list)->float:\n    if num_list:\n        return sum(num_list)/len(num_list)\n    else:\n        return None\n\n", "idx": 5342, "target": 0}
{"func": "# 15. python function for datetime\nfrom datetime import datetime\ndatetime.utcnow()\ndef log(msg, *, dt = datetime.utcnow()):\n    print(f'Message at {dt} was {msg}')\n\n", "idx": 5343, "target": 0}
{"func": "# Write a function that returns derivative derivative relu value of the input\ndef derivative_relu(x:float) -> float:\n    x = 1 if x > 0 else 0\n    return x\n\n\n", "idx": 5344, "target": 0}
{"func": "# write a python function that takes a list of numbers and calculate square of each number and return it in a list\ndef square_num(mynumbers):\n    return list(map(lambda num: num**2,mynumbers))\nsquare_num([1,2,3])\n\n\n", "idx": 5345, "target": 0}
{"func": "# write a function to calculate the sum of digits of a number\n\ndef sum_of_digits(num):\n    sum = 0\n    while(num > 0):\n        sum += num % 10\n        num = num // 10\n    return sum\n\n", "idx": 5346, "target": 0}
{"func": "# Write a method which can calculate square value of number\ndef square(num):\n    return num ** 2\n\n", "idx": 5347, "target": 0}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef get_si(p:float, r:float, t:float)->float:\n    return (p*r*t)/100\n\n", "idx": 5348, "target": 0}
{"func": "# write a python function to check user provided number is prime or not and print the result\ndef primeornot(num):\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                break\n        else:\n            print(num,\"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")\n\nprimeornot(7)                \n\n2.\n", "idx": 5349, "target": 0}
{"func": "# Write a Python Program to Find the Intersection of Two Lists\n\ndef main(alist, blist):\n    def intersection(a, b):\n        return list(set(a) & set(b))\n    return intersection(alist, blist)\n\n", "idx": 5350, "target": 0}
{"func": "# Write a Python function to Find the Intersection of Two Lists   \ndef intersection(a, b):\n    return list(set(a) & set(b))\n\t\n\t\n\t\n\n", "idx": 5351, "target": 0}
{"func": "# 18 write a function to create a linked list with given length and print the list after\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass LList:\n    def __init__(self):\n        self.head = None\n\n\ndef create_linked_list(*args):\n    linked_list = LList()\n    linked_list.head = Node(args[0])\n    prev = linked_list.head\n\n    for i in range(1, len(args)):\n        entry = Node(args[i])\n        prev.next = entry\n        prev = entry\n    return\n\n\n", "idx": 5352, "target": 0}
{"func": "# Write python program to find whether-number-power-two\ndef is_power_of_two(n):\n\"\"\"Return True if n is a power of two.\"\"\"\nif n <= 0:\nreturn False\nelse:\nreturn n & (n - 1) == 0\n\n\nn = int(input('Enter a number: '))\n\nif is_power_of_two(n):\nprint('{} is a power of two.'.format(n))\nelse:\nprint('{} is not a power of two.'.format(n))\n\n", "idx": 5353, "target": 0}
{"func": "# write a python program to remove punctuations in a string\n punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n string = ''.join(e for e in d if e not in punctuations)\n \n", "idx": 5354, "target": 0}
{"func": "# Write a function that returns runs a garbage collector\ndef clear_memory():\n    import gc\n    gc.collect()\n\n", "idx": 5355, "target": 0}
{"func": "# write a program function to check if given words appear together in a list of sentence\n\ndef check(sentence, words): \n    res = [all([k in s for k in words]) for s in sentence] \n    return [sentence[i] for i in range(0, len(res)) if res[i]]\n\n", "idx": 5356, "target": 0}
{"func": "#write a python program to print the list having sum of digits\nlist1 = [12, 67, 98, 34]\nlist2=[]\nfor i in list1:\n    sum = 0\n    for digit in str(i): \n        sum += int(digit) \n    list2.append(sum)\nprint(list2)\n\n", "idx": 5357, "target": 0}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"IshwarVenugopal\"\n\ndef longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,c in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n            \n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n\n        print(sub_str)\n        \n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 5358, "target": 0}
{"func": "#65 Write a Python function to check if a given string is an anagram of another given string.\ndef is_anagram(str1, str2):\n    list_str1 = list(str1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.sort()\n\n    return (list_str1 == list_str2)\n\n", "idx": 5359, "target": 0}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n\n", "idx": 5360, "target": 0}
{"func": "# Write a Python function to reverse a string if it's length is a multiple of 4.\ndef reverse_string(str1):\n    if len(str1) % 4 == 0:\n       return ''.join(reversed(str1))\n    return str1\n\n", "idx": 5361, "target": 0}
{"func": "# 49. python function for finding the logarithmic value of a number\ndef log(x):\n\n  \"\"\"returns the logarithmic value of a number\"\"\"\n\n  return math.log(x)\n\n", "idx": 5362, "target": 0}
{"func": "#29 write a python  program to Extract string till first Non-Alphanumeric character and print it\n\ntest_str = 'geeks4g!!!eeks'\ns=''\nfor i in test_str:\n    \n    if i.isalnum()==False:\n       break\n    else:\n      s+=i  \nprint(s)   \n\n", "idx": 5363, "target": 0}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_list2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i not in test_list2: \n        res_list.append(i) \nfor i in test_list2: \n    if i not in test_list1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 5364, "target": 0}
{"func": "#86 Write a Python program to generate groups of five consecutive numbers in a list\nl = [[5*i + j for j in range(1,6)] for i in range(5)]\nprint(l)\n\n", "idx": 5365, "target": 0}
{"func": "# write a python program to check if a number is positive, negative or 0\nnum = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n", "idx": 5366, "target": 0}
{"func": "# write Python code to demonstrate sort a list of dictionary where value date is in string  \nini_list = [{'name':'akash', 'd.o.b':'1997-03-02'}, \n            {'name':'manjeet', 'd.o.b':'1997-01-04'}, \n            {'name':'nikhil', 'd.o.b':'1997-09-13'}] \n\nprint (\"initial list : \", str(ini_list)) \n\nini_list.sort(key = lambda x:x['d.o.b']) \n\nprint (\"result\", str(ini_list)) \n\n\n", "idx": 5367, "target": 0}
{"func": "#30 write a program to check whether the string is a palindrome or not \ndef isPalindrome(s):\n    return s == s[::-1]\ns = \"malayalam\"\nans = isPalindrome(s)\n \nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "idx": 5368, "target": 0}
{"func": "# Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits\n\na=2\nb=9\nc=5\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 5369, "target": 0}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\ndef zip_(list_of_seq):\n    return list(zip(*list_of_seq))\n\n\n", "idx": 5370, "target": 0}
{"func": "#[all(i) for i in test_list if i>0]\n\nresult = [i for i in test_list if all(ele >= 0 for ele in i)] \n  \n", "idx": 5371, "target": 0}
{"func": "# printing original dictionary \n\n\nres = [] \nfor a, b, c in zip(*test_dict.values()):\n    \n    if a.isdigit() : \n        res.append((a, b, c)) \n      \n", "idx": 5372, "target": 0}
{"func": "# write a python program to print the least frequent character in a string\ntest_str = \"this is test string\"\nall_freq = {}\nfor i in test_str:\n    if i in all_freq:\n        all_freq[i] += 1\n    else:\n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(res)\n\n", "idx": 5373, "target": 0}
{"func": "# Write a Python program to find the second smallest number in a list\ndef second_smallest(numbers):\na1, a2 = float('inf'), float('inf')\nfor x in numbers:\nif x <= a1:\na1, a2 = x, a1\nelif x < a2:\na2 = x\nreturn a2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n", "idx": 5374, "target": 0}
{"func": "# Write a python program using list comprehension to produce and print the list ['x', 'xx', 'xxx', 'xxxx', 'y', 'yy', 'yyy', 'yyyy', 'z', 'zz', 'zzz', 'zzzz']\n\ninput_string_list = ['x', 'y', 'z']\nrepeat_count = 4\nlist2 = [input_string_list[i] * (j+1)  for i in range(len(input_string_list)) for j in range(repeat_count) ]\nprint(list2)\n\n\n", "idx": 5375, "target": 0}
{"func": "#78 Write a Python function to find the greatest common divisor (gcd) of two integers.\ndef Recurgcd(a, b):\n\tlow = min(a, b)\n\thigh = max(a, b)\n\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn Recurgcd(low, high%low)\n\n", "idx": 5376, "target": 0}
{"func": "# write a python function to convert bcd to decimal\n \n def bcdToDecimal(s):  \n    length = len(s); \n    check = 0; \n    check0 = 0; \n    num = 0; \n    sum = 0; \n    mul = 1; \n    rev = 0; \n    for i in range(length - 1, -1, -1): \n        sum += (ord(s[i]) - ord('0')) * mul; \n        mul *= 2; \n        check += 1; \n        if (check == 4 or i == 0): \n            if (sum == 0 and check0 == 0): \n                num = 1; \n                check0 = 1; \n            else: \n                num = num * 10 + sum;          \n            check = 0; \n            sum = 0; \n            mul = 1; \n    while (num > 0): \n        rev = rev * 10 + (num % 10); \n        num //= 10;        \n    if (check0 == 1): \n        return rev - 1;           \n    return rev;  \n\n # write a python function to find all the sexy primes in a given range\n\ndef sexyprime(l, r) : \n    prime=[True] * (r + 1) \n    p = 2\n    while(p * p <= r) : \n        if (prime[p] == True) :  \n            for i in range( p * 2, r+1 ,p) : \n                   prime[i] = False\n        p = p + 1\n    for i in range( l,r - 6 + 1) : \n        if (prime[i] and prime[i + 6]) : \n            print(\"(\", i , \",\", i + 6,\")\", end=\"\") \n            \n # write a python function to check whether the number is a duck number or not\n \ndef check_duck(num) : \n    n = len(num)   \n    i = 0\n    while (i < n and num[i] == '0') : \n        i = i + 1\n    while (i < n) :  \n        if (num[i] == \"0\") : \n            return True \n        i = i + 1\n    return False\n    \n # write a python function to check whether the given number is a Buzz number or not\n \n def isBuzz(num) : \n  \n    return (num % 10 == 7 or num % 7 == 0)  \n  \n # write a python function to check whether the number is a nude number or not\n  \n  def checkDivisbility(num): \n    digit = 0\n    N = num \n    while (num != 0): \n        digit = num % 10\n        num = num // 10\n        if (digit == 0 or N % digit != 0): \n            return False\n    return True\n    \n # write a python function to check whether the number is a ugly number or not\n \n def isUgly(n): \n    if (n == 1): \n        return 1\n    if (n <= 0): \n        return 0 \n    if (n % 2 == 0): \n        return (isUgly(n // 2))       \n    if (n % 3 == 0): \n        return (isUgly(n // 3))   \n    if (n % 5 == 0): \n        return (isUgly(n // 5)) \n    return 0\n    \n # write a python function to write a prime number as the sum of two composite numbers\n \n def findNums(n): \n    if (n <= 11): \n        if (n == 8): \n            print(\"4 4\", end = \" \") \n        if (n == 10): \n            print(\"4 6\", end = \" \") \n        else: \n            print(\"-1\", end = \" \") \n    if (n % 2 == 0): \n        print(\"4 \", (n - 4), end = \" \") \n    else: \n        print(\"9 \", n - 9, end = \" \") \n        \n # write a python function to print two composite numbers whose difference is N\n \n def find_composite_nos(n) :  \n    print(9 * n, 8 * n);  \n    \n # write a python function to print N-bonacci series\n \n def bonacciseries(n, m) :  \n    a = [0] * m \n    a[n - 1] = 1 \n    for i in range(n, m) : \n        for j in range(i - n, i) : \n            a[i] = a[i] + a[j]  \n    for i in range(0, m) : \n        print (a[i], end = \" \") \n     \n", "idx": 5377, "target": 0}
{"func": "# write a python program to implement Queue\nfrom collections import deque\n\nclass Queue():\n    '''\n    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and\n    dequeueing in worst-case O(1) time.\n    '''\n\n\n    def __init__(self, max_size = 10):\n        '''\n        Initialize this queue to the empty queue.\n\n        Parameters\n        ----------\n        max_size : int\n            Maximum number of items contained in this queue. Defaults to 10.\n        '''\n\n        self._queue = deque(maxlen=max_size)\n\n\n    def enqueue(self, item):\n        '''\n        Queues the passed item (i.e., pushes this item onto the tail of this\n        queue).\n\n        If this queue is already full, the item at the head of this queue\n        is silently removed from this queue *before* the passed item is\n        queued.\n        '''\n\n        self._queue.append(item)\n\n\n    def dequeue(self):\n        '''\n        Dequeues (i.e., removes) the item at the head of this queue *and*\n        returns this item.\n\n        Raises\n        ----------\n        IndexError\n            If this queue is empty.\n        '''\n\n        return self._queue.pop()\n\n\n", "idx": 5378, "target": 0}
{"func": "# initializing K \nK = 6\n  \nres = []\nfor ele in test_list: \n  \n    # incrementing on testing for digit. \n    if ele.isdigit(): \n        res.append(str(int(ele) + K)) \n    else: \n        res.append(ele) \n  \n", "idx": 5379, "target": 0}
{"func": "# Write a Python function to find the union of two arrays\ndef array_union(A,B):\n\tunion=list(set(A)|set(B))\n\treturn union\n\n\n", "idx": 5380, "target": 0}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ndef cal_sp_after_discount(sp:float,discount:float)->float:\n    return sp*(1 - discount/100)\n\n", "idx": 5381, "target": 0}
{"func": "# write the list comprehension to pick out only negative integers from a given list \u2018l\u2019.\nl1=[1,2,3,-4,-8]\n\nprint('negative integers:', [x for x in l1 if x<0])\n\n", "idx": 5382, "target": 0}
{"func": "# Write a python program to count the frequency of letters of the string and print the letters in descending order of frequency.\nword = input()\ndct = {}\nfor i in word:\ndct[i] = dct.get(i,0) + 1\n\ndct = sorted(dct.items(),key=lambda x: (-x[1],x[0]))\nfor i in dct:\nprint(i[0],i[1]\n\n", "idx": 5383, "target": 0}
{"func": "# write a function which takes in a list and a number as an input and returns a list with each list element raised to power of that number \ndef powered_list(a_list, a_number):\n    a_list = [math.pow(a_number) for i in a_list]  \n    return a_list\n        \n        \n", "idx": 5384, "target": 0}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\ndef cal_ke(mass:float,velocity:float)->float:\n    return (mass*(velocity)**2)/2\n\n", "idx": 5385, "target": 0}
{"func": "# write a python program to print 5 random vowels\nimport random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint([random.choice(vowels) for _ in range(5)])\n\n\n", "idx": 5386, "target": 0}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    pi=3.14\n    return pi*radius*slant_height\n\n", "idx": 5387, "target": 0}
{"func": "# write a python function to return sum of the powers between two numbers\n\ndef sum_of_powers(end, power = 2, start = 1):\n  return sum([(i) ** power for i in range(start, end + 1)])\n\n", "idx": 5388, "target": 0}
{"func": "# write a python function to get 10 best Artists playing on Apple iTunes\ndef get_artists():\n    import requests\n    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'\n    response = requests.get(url)\n    data = response.json()\n    for artist_dict in data['feed']['entry']:\n        artist_name = artist_dict['im:artist']['label']\n        print(artist_name)\n\n\n", "idx": 5389, "target": 0}
{"func": "# By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for x in li if x%5!=0 and x%7!=0]\nprint li\n\n", "idx": 5390, "target": 0}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\ndef get_ci(p:float, r:float, t:float, n:float)->float:\n    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)\n\n", "idx": 5391, "target": 0}
{"func": "# Write a function to identify if value is present inside a dictionary or not\ndef check_value(d:dict, value)->bool:\n    return any(v == value for v in dict.values())\n\n", "idx": 5392, "target": 0}
{"func": "#27 write a python funtion to execute bash commands\nimport subprocess\nsubprocess.call([\"sudo\", \"apt\", \"update\"])\n\n", "idx": 5393, "target": 0}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \n  \n  \nres = {} \nfor i in test_list: \n    for key, value in i.items(): \n  \n        # checking for key presence and updating max \n        if key in res: \n            res[key] = max(res[key], value) \n        else: \n            res[key] = value \n  \n", "idx": 5394, "target": 0}
{"func": "# write a python function that would print the ASCII value of a given character\ndef print_ascii(char):\n    print(ord(char))\n\n\n", "idx": 5395, "target": 0}
{"func": "#5. write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 5396, "target": 0}
{"func": "# write a python function to print the hexadecimal value of a decimal number\ndef print_hexadecimal(dec):\n   print(hex(dec))\n\n\n", "idx": 5397, "target": 0}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\ndef divide(num1, num2):\n    if num2 == 0:\n        return\n    else:\n        return num1 / num2\n\n\n", "idx": 5398, "target": 0}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = None\nif date_1 > date_2:\n    delta = date_1 - date_2\nelse:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.days, \"days\")\n\n", "idx": 5399, "target": 0}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(test_list)) if test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 5400, "target": 0}
{"func": "# This function adds two numbers\ndef add(x, y):\n    return x + y\n\n", "idx": 5401, "target": 0}
{"func": "#write a python program to remove empty list from list and print it\nlist1 = [2,5,6,[],8,[],[],0]\nlist2=[]\nfor i in list1:\n    if not isinstance(i,list):\n       list2.append(i)\nprint(list2)\n\n", "idx": 5402, "target": 0}
{"func": "# Write a python function to find greatest common divisor\n\ndef greatest_common_divisor(x,y):\n    print(\"For\", x, \"and\", y,\",\" ) \n    r=x%y\n    while r>0:\n        r=x%y\n        if r ==0: \n            print(\"the greatest common divisor is\", y,\".\")\n        else:\n            q=y\n            x=q\n            y=r\n\ngreatest_common_divisor(1071,1029)\n\n", "idx": 5403, "target": 0}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\n\ndef count_blank_space(fname):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isspace):\n                        k=k+1\n    return k\n\n", "idx": 5404, "target": 0}
{"func": "# write a Python program to demonstrate working of Replace duplicate Occurrence in String \n\ntest_str = 'Gfg is best . Gfg also has Classes now. Classes help understand better . '\n\nprint(\"The original string is : \" + test_str) \n\nrepl_dict = {'Gfg' : 'It', 'Classes' : 'They' } \n\ntest_list = test_str.split(' ') \nres = ' '.join([repl_dict.get(val) if val in repl_dict.keys() and test_list.index(val) != idx \n                                else val for idx, val in enumerate(test_list)]) \n\nprint(\"The string after replacing : \" + res) \n\n", "idx": 5405, "target": 0}
{"func": "#43 write a to time a python script\nfrom datetime import datetime\nstart = datetime.now()\ndo_something():...\nprint(datetime.now() - start)\n\n", "idx": 5406, "target": 0}
{"func": "# This function computes LCM\ndef compute_lcm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n\nnum1 = 54\nnum2 = 24 \n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 5407, "target": 0}
{"func": "# write a Python program to find Least Frequent Character in String \n\ntest_str = \"GeeksforGeeks\"\nprint (\"The original string is : \" + test_str) \n\nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get) \n\nprint (\"The minimum of all characters in GeeksforGeeks is : \" + res) \n\n\n", "idx": 5408, "target": 0}
{"func": "# write a python function to find the largest number in an array\n\n def largest(arr,n): \n    max = arr[0] \n    for i in range(1, n): \n        if arr[i] > max: \n            max = arr[i] \n    return max\n\n", "idx": 5409, "target": 0}
{"func": "#57 Write a Python function to find the single number in a list that doesn't occur twice.\ndef single_number(arr):\n    result = 0\n    for i in arr:\n        result ^= i\n    return result\n\n", "idx": 5410, "target": 0}
{"func": "# write a Python program to create multiple list\n\nobj = {}\nfor i in range(1, 11):\n    obj[str(i)] = []\nprint(f'create multiple list:{obj}')\n\n", "idx": 5411, "target": 0}
{"func": "# write a python program to Generate a Random Number\nimport random\nprint(random.randint(0,9))\n\n", "idx": 5412, "target": 0}
{"func": "# write a python program to print current datetime\nfrom datetime import datetime\n\nnow = datetime.now()\nprint(now)\n\n", "idx": 5413, "target": 0}
{"func": "# Define a function that can accept two strings as input and concatenate them and then print it in console.\ndef add(s1,s2):\n    print(s1+s2)\n\n", "idx": 5414, "target": 0}
{"func": "# Write a python function to Check whether triangle is valid or not if sides are given\t\t\ndef checkValidity(a, b, c):  \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True \n\t\t\n\t\t\n\n", "idx": 5415, "target": 0}
{"func": "# 26 write a program to calculate the root of a nonlinear equation using Newton's method\n\n\nclass NewtonRaphsonSolver:\n    def __init__(self, f, x, dfdx, min_tol=1e-3):\n        self.func = f\n        self.x = x\n        self.derivative = dfdx\n        self.min_tol = min_tol\n\n    def calculate(self):\n        func_val = self.func(self.x)\n        iterations = 0\n        while abs(func_val) > self.min_tol and iterations < 100:\n            self.x = self.x - float(func_val) / self.derivative(self.x)\n            func_val = self.func(self.x)\n            iterations += 1\n\n        if iterations <= 100:\n            return self.x\n        else:\n            return None\n\n\ndef f(x):\n\n    return x ** 4 - 16\n\n\ndef dfdx(x):\n    return 4 * x ** 3\n\n\nnrs = NewtonRaphsonSolver(f, 10, dfdx)\nprint(nrs.calculate())\n\n", "idx": 5416, "target": 0}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 5417, "target": 0}
{"func": "#10 write a program to accept a string if it contains all vowels\ndef check(string): \n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \n    return ('accepted') \n  else: \n    return (\"not accepted\") \n  \nif __name__==\"__main__\": \n  string=\"helloworld\"\n  print(check(string)) \n  \n\n", "idx": 5418, "target": 0}
{"func": "# Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\ns = input()\nwords = [word for word in s.split(\" \")]\nprint(\" \".join(sorted(list(set(words)))))\n\n\n", "idx": 5419, "target": 0}
{"func": "#Write a function to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (h))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end = '')\n\n", "idx": 5420, "target": 0}
{"func": "#39. Python Program to Find Factorial of Number Using Recursion\ndef recur_factorial(n):\n   if n == 1:\n       return n\n   else:\n       return n*recur_factorial(n-1)\n\nnum = 7\n\n", "idx": 5421, "target": 0}
{"func": "# Write a python program to Implement Gnome sort and print the sorted list for the below list\n\ndef gnome_sort(alist):\n    for pos in range(1, len(alist)):\n        while (pos != 0 and alist[pos] < alist[pos - 1]):\n            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]\n            pos = pos - 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ngnome_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 5422, "target": 0}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ndef throws():\nreturn 5/0\n\ntry:\nthrows()\nexcept ZeroDivisionError:\nprint (\"division by zero!\")\nexcept Exception, err:\nprint ('Caught an exception')\nfinally:\nprint ('In finally block for cleanup')\n\n", "idx": 5423, "target": 0}
{"func": "# Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = filter(lambda x: x%2==0, li)\nprint(evenNumbers)\n\n", "idx": 5424, "target": 0}
{"func": "# Write a function to Check whether following json is valid or invalid\nimport json\ndef validateJSON(jsonData):\n    try:\n        json.loads(jsonData)\n    except ValueError as err:\n        return False\n    return True\n\n", "idx": 5425, "target": 0}
{"func": "#9 write a program to find the frequency of words present in a string  \n  \ntest_str = 'times of india times new india express'\nprint(\"The original string is : \" + str(test_str)) \n\nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency : \" + str(res))\n\n", "idx": 5426, "target": 0}
{"func": "#33. Python Program to Find LCM\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 5427, "target": 0}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  return res\n\n", "idx": 5428, "target": 0}
{"func": "# write Python code to remove all strings from a list of tuples \nlistOfTuples = [('string', 'Geeks'), (2, 225), (3, '111'), (4, 'Cyware'), (5, 'Noida')]\t \noutput = [tuple(j for j in i if not isinstance(j, str)) for i in listOfTuples] \n\nprint(output) \n\n", "idx": 5429, "target": 0}
{"func": "# 41 write a python function that takes in a string and returns it in uppercase\n\n\ndef to_upper(s):\n    return s.upper()\n\n\n", "idx": 5430, "target": 0}
{"func": "# write a Python function to find area of an Ellipse. \n\ndef findArea(a, b): \n    \n    Area = 3.142 * a * b ; \n\n    print(\"Area:\", round(Area, 2)); \n\na = 5; \nb = 4; \n\nfindArea(a, b)\n\n\n", "idx": 5431, "target": 0}
{"func": "# write a python function that converts a user provided string to snake case\n\nfrom re import sub\ndef snake(s):\n  return '_'.join(\n    sub('([A-Z][a-z]+)', r' \\1',\n    sub('([A-Z]+)', r' \\1',\n    s.replace('-', ' '))).split()).lower()\n\n", "idx": 5432, "target": 0}
{"func": "# 39. write a Python program to reverse a linked list \n\nclass Node: \n\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\nclass LinkedList: \n\n    def __init__(self): \n        self.head = None\n\n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n        \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n\n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data)\n            temp = temp.next\n\n\nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n", "idx": 5433, "target": 0}
{"func": "# Write a python program for a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\nbottom = 0\ntop = len(li)-1\nindex = -1\nwhile top>=bottom and index==-1:\nmid = int(math.floor((top+bottom)/2.0))\nif li[mid]==element:\nindex = mid\nelif li[mid]>element:\ntop = mid-1\nelse:\nbottom = mid+1\n\nreturn index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n", "idx": 5434, "target": 0}
{"func": "# Write a Python Program to Read a List of Words and Return the Length of the Longest One\n\na=['the', 'tsai', 'python']\nmax1=len(a[0])\ntemp=a[0]\nfor i in a:\n    if(len(i)>max1):\n       max1=len(i)\n       temp=i\nprint(\"The word with the longest length is:\")\nprint(temp)\n\n", "idx": 5435, "target": 0}
{"func": "# write a python program which takes user input tuple and prints length of each tuple element\nuserInput = input(\"Enter a tuple:\")\nx = map(lambda x:len(x), tuple(x.strip() for x in userInput.split(',')))\nprint(list(x))\n\n", "idx": 5436, "target": 0}
{"func": "#33 write a program to reverse words of string  \n  \ndef rev_sentence(sentence):  \n    words = sentence.split(' ')  \n    reverse_sentence = ' '.join(reversed(words))  \n    return reverse_sentence  \n  \nif __name__ == \"__main__\":  \n    input = 'have a good day'\n    print (rev_sentence(input)) \n    \n", "idx": 5437, "target": 0}
{"func": "# write a python function to rotate the given list by n times toward left \n\ndef rotate(lst, offset):\n  return lst[offset:] + lst[:offset]\n\n", "idx": 5438, "target": 0}
{"func": "# write a python function that chunks a list into smaller lists of a specified size\n\nfrom math import ceil\ndef chunk(lst, size):\n  return list(\n    map(lambda x: lst[x * size:x * size + size],\n      list(range(ceil(len(lst) / size)))))\n\n", "idx": 5439, "target": 0}
{"func": "# Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n\n    return index\n\n", "idx": 5440, "target": 0}
{"func": "#5. write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 5441, "target": 0}
{"func": "# Write a Python function to compute simple interest\ndef simple_interest(p,t,r): \n    si = (p * t * r)/100\n    return si \n\t\n\t\n\t\n", "idx": 5442, "target": 0}
{"func": "#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 5443, "target": 0}
{"func": "# write a python function to remove duplicate items from the list\ndef remove_duplicatesinlist(lst):\n    return len(lst) == len(set(lst))\n\n", "idx": 5444, "target": 0}
{"func": "# Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat\n\na=['the', 'tsai', 'python' ,'a' ,'the', 'a']\nc=[]\ncount=0\nb='a'\nn=3\nfor i in a:\n    if(i==b):\n        count=count+1\n        if(count!=n):\n            c.append(i)\n    else:\n        c.append(i)\nif(count==0):\n    print(\"Item not found \")\nelse: \n    print(\"The number of repetitions is: \",count)\n    print(\"Updated list is: \",c)\n    print(\"The distinct elements are: \",set(a))\n\n\n", "idx": 5445, "target": 0}
{"func": "# write a python function for bitwise division with given number of shifts\ndef bit_div(n, shift):\n    return n >> shift\n\n\n", "idx": 5446, "target": 0}
{"func": "#10 write a python program to construct equidigit tuple and print them\n\nlist1 = [5654, 223, 982143, 34, 1021]\n\nlist2 = [] \nfor sub in list1: \n      \n    # getting mid element \n    mid_idx = len(str(sub)) // 2\n      \n    # slicing Equidigits \n    el1 = str(sub)[:mid_idx] \n    el2 = str(sub)[mid_idx:] \n      \n    list2.append((int(el1), int(el2))) \n  \n", "idx": 5447, "target": 0}
{"func": "# Write a Python function to calculate factorial of a given no using closer\n\ndef fact():\n    cache = {0:1, 1:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fact({n})')\n            cache[n] = calc_fib(n - 1) * n\n        return cache[n]\n    return calc_fib\n\n", "idx": 5448, "target": 0}
{"func": "# nonlocal keyword comes in handy \ndef outer():\n    x = 1\n    print('outer before:', x)\n\n    def inner():\n        nonlocal x\n        x = 2\n        print(\"inner:\", x)\n    inner()\n    print(\"outer after:\", x)\nouter()\n\n", "idx": 5449, "target": 0}
{"func": "# write a python program to create round robin algorithm: \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\ndef roundrobin(*iterables):    \n    from itertools import islice, cycle\n    # Recipe credited to George Sakkis\n    num_active = len(iterables)\n    nexts = cycle(iter(it).__next__ for it in iterables)\n    while num_active:\n        try:\n            for next in nexts:\n                yield next()\n        except StopIteration:\n            # Remove the iterator we just exhausted from the cycle.\n            num_active -= 1\n            nexts = cycle(islice(nexts, num_active))\n\n", "idx": 5450, "target": 0}
{"func": "#33. Python Program to Find LCM\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 5451, "target": 0}
{"func": "# Write a Python function that finds the maximum range of a triangle's third edge, where the side lengths are all integers.\ndef next_edge(side1, side2):\n    return (side1+side2-1)\n\n", "idx": 5452, "target": 0}
{"func": "#67 Write a Python function to the push the first number to the end of a list.\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return(x)\n\n", "idx": 5453, "target": 0}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {key: value for key, value in enumerate(my_list)}\n\n", "idx": 5454, "target": 0}
{"func": "#85 Write a Python program that iterate over elements repeating each as many times as its count.\nfrom collections import Counter\nc = Counter(p=4, q=2, r=0, s=-2)\nprint(list(c.elements()))\n\n", "idx": 5455, "target": 0}
{"func": "#14.Write a Python Program to check if a number is prime or not\n\nnum = 407\n\n\nif num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 5456, "target": 0}
{"func": "# write a program that subtracts corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\ndiff_list = [a-b for (a,b) in zip(list1, list2)]\nprint(diff_list)\n\n\n", "idx": 5457, "target": 0}
{"func": "# write a python function to calculate weighted average of two or more numbers\n\ndef weighted_average(nums, weights):\n  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)\n\n", "idx": 5458, "target": 0}
{"func": "#  Add week (7 days) and 12 hours to a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, hours=12)\nprint(res_date)\n\n", "idx": 5459, "target": 0}
{"func": "# write a Python program to find the minute at which the minute hand and hour hand coincide \n\ndef find_time(h1): \n\n    theta = 30 * h1 \n    print(\"(\", end = \"\") \n    print((theta * 2),\"/ 11) minutes\") \n\nh1 = 3\nfind_time(h1) \n\n\n", "idx": 5460, "target": 0}
{"func": "# Write a Python function to check whether a number is a power of another number or not\ndef power_checker(a,b):\n\timport math\n\ts=math.log(a,b)\n\tp=round(s)\n\tif (b**p)==a:\n\t    return f'{a} is the power of {b}.'\n\telse:\n\t    return f'{a} is NOT the power of {b}.'\n\n\n", "idx": 5461, "target": 0}
{"func": "# write a python program to flip a coin 100 times and print number of heads and tails\nimport random\nheads = 0\ntails = 0\nfor i in range(100):\n   if(random.choice([True, False])):\n      heads += 1\n   else:\n      tails += 1\nprint(f'{heads} heads, {tails} tails')\n\n\n", "idx": 5462, "target": 0}
{"func": "# write a python function to calculate factorial of a given number\ndef factorial(n):\n    fact = 1\n    for num in range(2, n + 1):\n        fact = fact * num\n    return(fact)\n", "idx": 5463, "target": 0}
{"func": "#93 write a program to find sum of all digits of a number\n\ndef sumDigits(num):\n  if num == 0:\n    return 0\n  else:\n    return num % 10 + sumDigits(int(num / 10))\n\nx = 0\nprint(\"Number: \", x)\nprint(\"Sum of digits: \", sumDigits(x))\nprint()\n\n", "idx": 5464, "target": 0}
{"func": "# write a function to return the square of first N numbers\ndef get_squares(n):\n   return [i*i for i in range(n)]\n\n\n", "idx": 5465, "target": 0}
{"func": "# Please write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nimport random\nprint(random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5))\n\n", "idx": 5466, "target": 0}
{"func": "# write a python function to transpose a user provided two dimensional list\n\ndef transpose(lst):\n  return list(zip(*lst))\n\n", "idx": 5467, "target": 0}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(reverse=True)\nprint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 5468, "target": 0}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nfor sub in test_dict: \n    print(f\"\\n{sub}\") \n    for sub_nest in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sub][sub_nest])\n\n", "idx": 5469, "target": 0}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for a in list1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 5470, "target": 0}
{"func": "# write a python function to return the base 10 logarithm of a number \ndef get_natural_log_value(i):\n    import math\n    return(math.log10(i))\n\n", "idx": 5471, "target": 0}
{"func": "# By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) if i%2!=0]\nprint li\n\n", "idx": 5472, "target": 0}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentence = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word in sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 5473, "target": 0}
{"func": "# Write a python program to remove punctuations from a sentence\n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n\n", "idx": 5474, "target": 0}
{"func": "# Write a Python program to check whether a list contains a sublist and print True or False.\n\ndef is_Sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n \n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n \n    return sub_set\n \na = [2,4,3,5,7]\nb = [4,3]\nc = [3,7]\nprint(is_Sublist(a, b))\nprint(is_Sublist(a, c))\n\n", "idx": 5475, "target": 0}
{"func": "# write a python function to calculate a sigmoid value for any user provided real numbers\n\ndef sigmoid(x):\n  return 1 / (1 + math.exp(-x))\n\n", "idx": 5476, "target": 0}
{"func": "# write a python function to bubblesort an array\n \n def bubbleSort(arr): \n    n = len(arr) \n\n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n\n", "idx": 5477, "target": 0}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\ndef printDict():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tprint d\n\t\t\n", "idx": 5478, "target": 0}
{"func": "# write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using all() + list comprehension + isdigit() \ntest_list = [(\"45\", \"86\"), (\"Gfg\", \"1\"), (\"98\", \"10\"), (\"Gfg\", \"Best\")] \nprint(\"The original list is : \" + str(test_list)) \nres = [sub for sub in test_list if all(ele.isdigit() for ele in sub)] \nprint(\"Filtered Tuples : \" + str(res)) \n\n", "idx": 5479, "target": 0}
{"func": "# Write a python program to Check and print if string is palindrome using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\ntext = \"ABA\"\n \nfor character in text:\n    s.push(character)\n \nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n \nif text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')\n\n", "idx": 5480, "target": 0}
{"func": "# Write a python function to check the strength of user provided password\n\ndef check_password_strength(password):\n  import re \n  flag = 0\n  while True:   \n      if (len(password)<8): \n          flag = -1\n          break\n      elif not re.search(\"[a-z]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[A-Z]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[0-9]\", password): \n          flag = -1\n          break\n      elif not re.search(\"[_@$]\", password): \n          flag = -1\n          break\n      elif re.search(\"\\s\", password): \n          flag = -1\n          break\n      else: \n          flag = 0\n          print(\"Strong Password\") \n          break  \n  if flag ==-1: \n      print(\"Weak Password\")\n\n", "idx": 5481, "target": 0}
{"func": "# Remove empty strings from the list of strings\nlist1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for i in (filter(None, list1))]\nprint(resList)\n\n", "idx": 5482, "target": 0}
{"func": "# write a python function to locate the leftmost value exactly equal to x\ndef index(a, x):\n    from bisect import bisect_left    \n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError\n\n", "idx": 5483, "target": 0}
{"func": "# write a python function to convert a number from binary to decimal\n \n def binaryToDecimal(n):\n    num = n;\n    dec_value = 0;\n    base = 1;  \n    temp = num;\n    while(temp):\n        last_digit = temp % 10;\n        temp = int(temp / 10);\n         \n        dec_value += last_digit * base;\n        base = base * 2;\n    return dec_value;\n    \n", "idx": 5484, "target": 0}
{"func": "#55 write a  program to find LCM\n\ndef lcm(x, y):  \n   if x > y:  \n       greater = x  \n   else:  \n       greater = y  \n  while(True):  \n       if((greater % x == 0) and (greater % y == 0)):  \n           lcm = greater  \n           break  \n       greater += 1  \n   return lcm  \n  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \nprint(\"The L.C.M. of\", num1,\"and\", num2,\"is\", lcm(num1, num2)) \n\n", "idx": 5485, "target": 0}
{"func": "#17. Python Program to Display the multiplication Table\nnum = 12\n\nfor i in range(1, 11):\n   print(num, 'x', i, '=', num*i)\n\n\n", "idx": 5486, "target": 0}
{"func": "# write a python program to print system time\nimport time\nprint(f\"{time.time()}\")\n\n\n", "idx": 5487, "target": 0}
{"func": "# sample.py\nfrom datetime import datetime\nfrom time import perf_counter\nimport random\nval = 10\ncounter_67 = dict()\n\n\n", "idx": 5488, "target": 0}
{"func": "# write a python function that would read the given input file path and print its contents\ndef read_and_print_file(filepath):\n    with open(filepath, \"r\") as infile:\n        print( infile.read() )\n\n\n", "idx": 5489, "target": 0}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \n\nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \n\nprint(\"intial_list\", str(ini_tuple))\nresult = [i for i in ini_tuple if i[1] <= 100] \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 5490, "target": 0}
{"func": "# We have to use the global keyword!\n\ndef my_func():\n    global var\n    print(var)  # want to access global variable\n    var = 'locally changed'  # changes the gobal variable\nvar = 'global'\nmy_func()\nprint(var)\n\n", "idx": 5491, "target": 0}
{"func": "# Write a python function to raise error when an input is not a string type\ndef check_string(new_str):\n    return isinstance(new_str,str)\n\n", "idx": 5492, "target": 0}
{"func": "# write a python function to return the nth fibonacci number\ndef fib(n):\n   if n <= 1:\n      return n\n   else:\n      return (fib(n-1) + fib(n-2))\n\n\n", "idx": 5493, "target": 0}
{"func": "# Write a function to print all possible subarrays using recursion\ndef printSubArrays(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        return printSubArrays(arr, 0, end + 1)\n    else:\n        print(arr[start:end + 1])\n        return printSubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArrays(arr, 0, 0)\n\n", "idx": 5494, "target": 0}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor sub in test_list: \n    if isinstance(sub[key], list): \n        sub[key] = sub[key][N]\n\n", "idx": 5495, "target": 0}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\ndef cal_area_trapezium(a,b,h):\n    return h*(a+b)/2\n\n", "idx": 5496, "target": 0}
{"func": "#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n                \n", "idx": 5497, "target": 0}
{"func": "#Write a Python program to find the area and perimeter of a right-angled triangle and print the perimeter and area.\n\nimport math \n\nAB = input(\"Length of the first leg: \") \nAC = input(\"Length of the second leg: \") \nAB = float(AB) \nAC = float(AC) \n\nBC = math.sqrt(AB  2 + AC  2) S = (AB * AC) / 2\n\nP = AB + AC + BC \nprint(\"Area of the triangle: %.2f\" % S)\nprint(\"Perimeter of the triangle: %.2f\" % P) \n\n", "idx": 5498, "target": 0}
{"func": "# Write a Python program to generate all permutations of a list in Python. Example:# Input [1,2,3]# Output [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n\nimport itertools\nprint(list(itertools.permutations([1,2,3])))\n\n", "idx": 5499, "target": 0}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 5500, "target": 0}
{"func": "#7 write a  program to remove empty tuples from a list of tuples \ndef Remove(tuples): \n    tuples = filter(None, tuples) \n    return tuples \n  \n", "idx": 5501, "target": 0}
{"func": "# Write a python function to copy the sign bit from one variable to another\ndef copysign(dst, src) :\n    return math.copysign(dst, src)\n\n", "idx": 5502, "target": 0}
{"func": "# checking for pair sum \nres = [ele for ele in test_list if pair_sum(ele, k)] \n  \n", "idx": 5503, "target": 0}
{"func": "# Write a Python program to remove duplicates from a list.\na = [10,20,30,20,10,50,60,40,80,50,40]\ndup_items = set()\nuniq_items = []\nfor x in a:\nif x not in dup_items:\nuniq_items.append(x)\ndup_items.add(x)\nprint(dup_items)\n\n", "idx": 5504, "target": 0}
{"func": "# write a program to remove the duplicate words \ns = \"Hello world Hello\"\nl = s.split() \nk = [] \nfor i in l: \n    if (s.count(i)>1 and (i not in k)or s.count(i)==1): \n        k.append(i) \nprint(' '.join(k)) \n\n\n", "idx": 5505, "target": 0}
{"func": "# Replace punctuations with #\nreplace_char = '#'\n\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(f\"The strings after replacement : {str1}\")\n\n\n", "idx": 5506, "target": 0}
{"func": "# raise a RuntimeError exception.\nraise RuntimeError('something wrong')\n\n", "idx": 5507, "target": 0}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nfor sub in test_dict: \n    print(f\"\\n{sub}\") \n    for sub_nest in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sub][sub_nest])\n\n", "idx": 5508, "target": 0}
{"func": "#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.\ndef three_Sum(num):\n    if len(num)<3: return []\n    num.sort()\n    result=[]\n    for i in range(len(num)-2):\n        left=i+1\n        right=len(num)-1\n        if i!=0 and num[i]==num[i-1]:continue\n        while left<right:\n            if num[left]+num[right]==-num[i]:\n                result.append([num[i],num[left],num[right]])\n                left=left+1\n                right=right-1\n                while num[left]==num[left-1] and left<right:left=left+1\n                while num[right]==num[right+1] and left<right: right=right-1\n            elif num[left]+num[right]<-num[i]:\n                left=left+1\n            else:\n                right=right-1\n    return result\n\n", "idx": 5509, "target": 0}
{"func": "# Write a program to print the multiplication table of a given number\n\nnum = 9\nfor i in range(1, 11):\n   print(f\"{num} x {i} = {num*i}\")\n\n\n", "idx": 5510, "target": 0}
{"func": "# write a python function to get dot product between two lists of numbers\ndef dot_product(a, b):\n    return sum(e[0] * e[1] for e in zip(a, b))\n\n\n", "idx": 5511, "target": 0}
{"func": "# Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).\nevenNumbers = filter(lambda x: x%2==0, range(1,21))\nprint(evenNumbers)\n\n", "idx": 5512, "target": 0}
{"func": "# Please write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport random\nprint(random.choice([i for i in range(11) if i%2==0]))\n\n", "idx": 5513, "target": 0}
{"func": "# write a python program to define a decorator to cache property\n\nclass PropertyCache(object):\n    \"\"\" a decorator to cache property\n    \"\"\"\n\n    def __init__(self, func):\n        self.func = func\n\n    def __get__(self, obj, cls):\n        if not obj:\n            return self\n        value = self.func(obj)\n        setattr(obj, self.func.__name__, value)\n        return value\n        \n\nclass Foo:\n    def __init__(self):\n        self._property_to_be_cached = 'result'\n\n    @PropertyCache\n    def property_to_be_cached(self):\n        print('compute')\n        return self._property_to_be_cached\n    \ntest = Foo()\n\nprint(test.property_to_be_cached)\nprint(test.property_to_be_cached)\n\n\n", "idx": 5514, "target": 0}
{"func": "#76 Write a Python function to converting an integer to a string in any base.\ndef to_string(n,base):\n   conver_tString = \"0123456789ABCDEF\"\n   if n < base:\n      return conver_tString[n]\n   else:\n      return to_string(n//base,base) + conver_tString[n % base\n\n", "idx": 5515, "target": 0}
{"func": "# Write a python program using a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef printDict():\nd=dict()\nd[1]=1\nd[2]=2**2\nd[3]=3**2\nprint (d)\nprintDict()\n\n", "idx": 5516, "target": 0}
{"func": "# Python program to get a string which is n (non-negative integer) copies of a given string.\ndef larger_string(string1, n):\n    result = \"\"\n    for i in range(n):\n        result = result + string1\n    return result\n\n\nprint(larger_string('abc', 2))\nprint(larger_string('.py', 3))\n\n\n", "idx": 5517, "target": 0}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    end = start \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\nprint(result)\n\n", "idx": 5518, "target": 0}
{"func": "# Define a function which can compute the sum of two numbers.\ndef SumFunction(number1, number2):\n\treturn number1+number2\n\n", "idx": 5519, "target": 0}
{"func": "# Write a program to get a list of locally installed Python modules\nimport pkg_resources\ninstalled_packages = pkg_resources.working_set\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\n     for i in installed_packages])\nfor m in installed_packages_list:\n    print(m)\n\n", "idx": 5520, "target": 0}
{"func": "#82 Write a Python program to count number of substrings with same first and last characters of a given string.\ndef no_of_substring_with_equalEnds(str1): \n\tresult = 0; \n\tn = len(str1); \n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (str1[i] == str1[j]): \n\t\t\t\tresult = result + 1\n\treturn result\n \n", "idx": 5521, "target": 0}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_odd_elements(l:list):\n    return sum([i for i in l if i%2==1])\n\n", "idx": 5522, "target": 0}
{"func": "#52 write a python program to normalize a list of numbers and print the result\na = [2,4,10,6,8,4]\namin, amax = min(a), max(a)\nfor i, val in enumerate(a):\n    a[i] = (val-amin) / (amax-amin)\nprint(a)\n\n", "idx": 5523, "target": 0}
{"func": "# write a Python function to clone or copy a list using the in-built function list() \ndef Cloning(li1): \n    li_copy = list(li1) \n    return li_copy \n\nli1 = [4, 8, 2, 10, 15, 18] \nli2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2) \n\n\n\n", "idx": 5524, "target": 0}
{"func": "# Write a function that returns derivative derivative relu value of the input\ndef derivative_relu(x:float) -> float:\n    x = 1 if x > 0 else 0\n    return x\n\n\n", "idx": 5525, "target": 0}
{"func": "# This function computes GCD \ndef compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 5526, "target": 0}
{"func": "# write a program to print the nth fibonacci number\nn1 = 1\nn2 = 1\nn = 5\nfor _ in range(n):\n   n1, n2 = n2, n1 + n2\nprint(n2)\n\n\n", "idx": 5527, "target": 0}
{"func": "# write a Python function that takes list of tuples as input and sort those alphabetically\ndef SortTuple(tup): \n      \n    n = len(tup) \n      \n    for i in range(n): \n        for j in range(n-i-1): \n              \n            if tup[j][0] > tup[j + 1][0]: \n                tup[j], tup[j + 1] = tup[j + 1], tup[j] \n                  \n    return tup \n\n", "idx": 5528, "target": 0}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnumber = secrets.randbelow(30)\nprint(number)\n\n", "idx": 5529, "target": 0}
{"func": "#49 function to show annotation\ndef anno_func(a: \"Mandatory\",\n              b: \"Optional\"=2,\n              c: \"Optional\"=10,\n              *args: \"Extra Position variable\",\n              **kwargs: \"Provide extra to unpack dictionary\") -> 'Documentation to show how to do do annotation':\n    \"\"\"\n    function to show how to do do documentation of function\n    First line after function wriiten inside triple quotes.\n    Don't forget to close when job is done.\n    \"\"\"\n    pass\n\n\n", "idx": 5530, "target": 0}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor ele in test_list: \n    try: \n        res *= int(ele) \n    except : \n        pass\nprint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 5531, "target": 0}
{"func": "# write python function to detect if a number is odd number\ndef is_odd(num):\n    return((num % 2) != 0)\n\n", "idx": 5532, "target": 0}
{"func": "# Python program to find the digits which are absent in a given mobile number.\ndef absent_digits(n):\n    all_nums = set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    n = set([int(i) for i in n])\n    n = n.symmetric_difference(all_nums)\n    n = sorted(n)\n    return n\n\n\nprint(absent_digits([9, 8, 3, 2, 2, 0, 9, 7, 6, 3]))\n\n\n\n\n", "idx": 5533, "target": 0}
{"func": "# lazy evaluation \ngen_succeeds = (i for i in range(5) for j in 1/0)\nprint('But obviously fails when we iterate ...')\nfor i in gen_succeeds:\n    print(i)\n\n", "idx": 5534, "target": 0}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\ndef finder(first_array, second_array):\n    return(sum(first_array) - sum(second_array))\n\nmissing_number = finder(first_array, second_array)\n\nprint(missing_number)\n\n", "idx": 5535, "target": 0}
{"func": "# Write a python program print all the integers that aren\u2019t divisible by either 2 or 3 and lies between 1 and 25.\nfor i in range(0,25):\n    if(i%2!=0 and i%3!=0):\n        print(i)\n\n", "idx": 5536, "target": 0}
{"func": "# Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. \nfreq = {}   # frequency of words in text\nline = input()\nfor word in line.split():\n    freq[word] = freq.get(word,0)+1\n\nwords = freq.keys()\nwords.sort()\n\nfor w in words:\n    print(\"%s:%d\" % (w,freq[w]))\n\n", "idx": 5537, "target": 0}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       res = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 5538, "target": 0}
{"func": "# Write a Python program to find the total number of letters and digits in a given string\nstr1='TestStringwith123456789'\nno_of_letters, no_of_digits = 0,0\nfor c in str1:\n  no_of_letters += c.isalpha()\n  no_of_digits += c.isnumeric()\n\nprint(no_of_letters)\nprint(no_of_digits)\n\n\n", "idx": 5539, "target": 0}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/volume\n\n", "idx": 5540, "target": 0}
{"func": "# Write a python function to print powers of 2, for given number of terms\ndef two_power(terms):\n    result = list(map(lambda x: 2 ** x, range(terms)))\n\n    print(f\"The total terms are: {terms}\")\n    for i in range(terms):\n       print(f\"2^{i} = {result[i]}\")\n\n\n", "idx": 5541, "target": 0}
{"func": "# Write a function which Given a keyboard layout in XY plane, where each English uppercase letter is located at some coordinate, say (0,0) for A, return the minimum total distance to type such string using only two fingers. The distance distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. \n\nfrom functools import lru_cache\n\ndef minimumDistance(word):\n    def getDist(a, b):\n        if a==-1 or b==-1:\n            return 0\n        else:\n            i = ord(a) - ord('a')\n            j = ord(b) - ord('b')\n            dist = abs(i//6 - j//6) + abs(i%6 - j%6)\n            return dist\n            \n    @lru_cache(maxsize=None)\n    def getMinDist(l, r, k):\n        if k==len(word):\n            return 0\n        next = word[k].lower()\n        ret = min(getMinDist(next,r,k+1)+getDist(l,next), getMinDist(l,next,k+1)+getDist(r,next))\n        return ret\n            \n    return(getMinDist(-1,-1,0))\n\n\t\n", "idx": 5542, "target": 0}
{"func": "#27 write a function to generate and print a random number between 0 and 22\nimport random\nn = random.randint(0,22)\nprint(n)\n\n", "idx": 5543, "target": 0}
{"func": "# write a program to convert key-values list to flat dictionary and print it\n\nfrom itertools import product \ntest_dict = {'month' : [1, 2, 3], \n             'name' : ['Jan', 'Feb', 'March']} \n \nprint(\"The original dictionary is : \" + str(test_dict)) \n  \n \n\nres = dict(zip(test_dict['month'], test_dict['name'])) \n\nprint(\"Flattened dictionary : \" + str(res))\n\n", "idx": 5544, "target": 0}
{"func": "# Write a python program to Implement Bubble sort and print the sorted list for the below list\n\ndef bubble_sort(alist):\n    for i in range(len(alist) - 1, 0, -1):\n        no_swap = True\n        for j in range(0, i):\n            if alist[j + 1] < alist[j]:\n                alist[j], alist[j + 1] = alist[j + 1], alist[j]\n                no_swap = False\n        if no_swap:\n            return\n \n \nalist = [2, 3, 5, 6, 4, 5]\nbubble_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 5545, "target": 0}
{"func": "# Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).\nsquaredNumbers = map(lambda x: x**2, range(1,21))\nprint(squaredNumbers)\n\n", "idx": 5546, "target": 0}
{"func": "# Write a Python function that takes the age and return the age in days.\ndef calc_age(age):\n    calculation = age*365\n    return calculation\n\n", "idx": 5547, "target": 0}
{"func": "# Write a function that joins elements of list\ndef join_elements(l:list)-> str:\n    return (''.join(str(l)))\n\n", "idx": 5548, "target": 0}
{"func": "# Write a function to return the area of a rhombus\ndef area(d1, a): \n    d2 = (4*(a**2) - d1**2)**0.5\n    area = 0.5 * d1 * d2 \n    return(area) \n\n", "idx": 5549, "target": 0}
{"func": "# Write a python program to Implement Shell sort and print the sorted list for the below list\n\ndef gaps(size):\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**k - 1\n \n \ndef shell_sort(alist):\n    def insertion_sort_with_gap(gap):\n        for i in range(gap, len(alist)):\n            temp = alist[i]\n            j = i - gap\n            while (j >= 0 and temp < alist[j]):\n                alist[j + gap] = alist[j]\n                j = j - gap\n            alist[j + gap] = temp\n \n    for g in gaps(len(alist)):\n        insertion_sort_with_gap(g)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nshell_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 5550, "target": 0}
{"func": "# Write a function to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 5551, "target": 0}
{"func": "# Write a program that will determine the object type\n\ndef typeIdentifier(object):\n  return f'object type : {type(object)}'\n\n", "idx": 5552, "target": 0}
{"func": "# write a program to print the current date and time\nfrom datetime import datetime\nnow = datetime.now()\nprint(now)\n\n\n", "idx": 5553, "target": 0}
{"func": "# write a python function that returns the gcd of two numbers\ndef gcd(x, y):\n   if x > y:\n      smaller = y\n   else:\n      smaller = x\n\n   for i in range(1, smaller + 1):\n      if((x % i == 0) and (y % i == 0)):\n         gcd = i\n   \n   return gcd\n\n\n", "idx": 5554, "target": 0}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    g = 9.8\n    return (mass*g*height)\n\n", "idx": 5555, "target": 0}
{"func": "#60 Write a function program to reverse the digits of an integer.\ndef reverse_integer(x):\n        sign = -1 if x < 0 else 1\n        x *= sign\n\n        # Remove leading zero in the reversed integer\n        while x:\n            if x % 10 == 0:\n                x /= 10\n            else:\n                break\n\n        # string manipulation\n        x = str(x)\n        lst = list(x)  # list('234') returns ['2', '3', '4']\n        lst.reverse()\n        x = \"\".join(lst)\n        x = int(x)\n        return sign*x\n\n", "idx": 5556, "target": 0}
{"func": "# write a python program to check if a number is a prime number\nnum = int(input(\"Enter a number: \"))\n\nif num > 1:\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 5557, "target": 0}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nfor ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 5558, "target": 0}
{"func": "# Write a function te return cube of a number\ndef cube(num):\n    return num ** 3\n\n", "idx": 5559, "target": 0}
{"func": "# Write a program that accepts a sentence and calculate the number of letters and digits.\ns = input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\n    if c.isdigit():\n        d[\"DIGITS\"]+=1\n    elif c.isalpha():\n        d[\"LETTERS\"]+=1\n    else:\n        pass\nprint(\"LETTERS\", d[\"LETTERS\"])\nprint(\"DIGITS\", d[\"DIGITS\"])\n\n", "idx": 5560, "target": 0}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flattened\n\n", "idx": 5561, "target": 0}
{"func": "#38 write a program to check if a string has at least one letter and one number\ndef checkString(str): \n    \n    flag_l = False\n    flag_n = False\n      \n    for i in str: \n        \n        # if string has letter \n        if i.isalpha(): \n            flag_l = True\n  \n        # if string has number \n        if i.isdigit(): \n            flag_n = True\n      \n    return flag_l and flag_n \n  \n  \n", "idx": 5562, "target": 0}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\ndef cal_time(distance:float,speed:float)->float:\n    return distance/speed\n\n", "idx": 5563, "target": 0}
{"func": "# write a python program to expain local and global scope\n\ndef f1():\n    x = 'enclosing'\n    def g():\n        x = 'local'\n        return x\n    x=g()\n    return x\nobj2 = f1()\nprint('explain local scope:',obj2)\n\n", "idx": 5564, "target": 0}
{"func": "# 100 write a python program that checks if a string is a pallindrome\n\n\ndef is_palindrome(st):\n    st = st.lower()\n    rev_st = st[::-1]\n    try:\n        assert rev_st == st\n        return True\n    except AssertionError:\n        return False\n\n\nst = \"Nitin\"\nprint(is_palindrome(st))\n\n\n", "idx": 5565, "target": 0}
{"func": "# This function adds two numbers\ndef add(x, y):\n    return x + y\n\n", "idx": 5566, "target": 0}
{"func": "# write a python program to Remove Punctuations From a String\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, he said ---and went.\"\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\nprint(no_punct)\n\n", "idx": 5567, "target": 0}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 5568, "target": 0}
{"func": "# Write a python Class to calculate area of a rectangle and print the area\n\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.length\na=6\nb=4\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 5569, "target": 0}
{"func": "# write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\ndef EvenGenerator(n):\n    i=0\n    while i<=n:\n        if i%2==0:\n            yield i\n        i+=1\nn=int(raw_input())\nvalues = []\nfor i in EvenGenerator(n):\n    values.append(str(i))\nprint \",\".join(values)\n\n", "idx": 5570, "target": 0}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\n   return [num if num < 0 else -num for num in nums]\n\n\n", "idx": 5571, "target": 0}
{"func": "# write a python program to calculate the sum of numbers using reduce and print it\nfrom functools import reduce\nnums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\ntotal_sum = reduce(lambda a, b: a + b, nums)\nprint(f'Sum: {total_sum}')\n\n\n", "idx": 5572, "target": 0}
{"func": "# Write a function that returns a replace values in string with values provided\ndef replace_values(s:str, old, new)->str:\n    s.replace(old, new)\n\n", "idx": 5573, "target": 0}
{"func": "# 18. python program to compare strings\ndef compare_using_equals(n):\n    a = 'a long string that is not intered' * 200\n    b = 'a long string that is not intered' * 200\n    for i in range(n):\n        if a == b:\n            pass\n\n", "idx": 5574, "target": 0}
{"func": "# write a Python program to print all the prime numbers within an interval\nlower = 900\nupper = 1000\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\nfor num in range(lower, upper + 1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\t\t   \n\n\t\t   \n", "idx": 5575, "target": 0}
{"func": "# Write a Python function to to find the sum of all digits of a given integer\ndef sum_of_digits(num):\n  if num == 0:\n    return 0\n  else:\n    return num % 10 + sum_of_digits(int(num / 10))\n\n\n", "idx": 5576, "target": 0}
{"func": "# write a python function to insert an element into sorted python list\n\ndef insert(list, n): \n      \n    for i in range(len(list)): \n        if list[i] > n: \n            index = i \n            break\n      \n \n    list = list[:i] + [n] + list[i:] \n    return list\n\n", "idx": 5577, "target": 0}
{"func": "# - sign for descended values, omit if low-high sorting required \nres = {val[0] : val[1] for val in sorted(test_dict.items(), key = lambda x: (-x[1],x[0]))} \n  \n", "idx": 5578, "target": 0}
{"func": "#49 Write a  Python function to Sort a List of Dictionaries by the Sum of their Values and print it\n\ntest_list = [{1 : 3, 4 : 5, 3 : 5}, {1 : 7, 10 : 1, 3 : 10}, {1 : 100}, {8 : 9, 7 : 3}]\n\ndef func(test_list):\n    return sum(list(test_list.values()))\n\n\nfor i in test_list:\n  test_list.sort(key=func) \nprint(test_list)\n\n", "idx": 5579, "target": 0}
{"func": "# write a python program to print python version using sys\nimport sys\n\nprint(f\"{sys.version}\")\n\n\n", "idx": 5580, "target": 0}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \nprint(\"intial_list\", str(ini_tuple)) \nresult = list(filter(lambda x: x[1] <= 100, ini_tuple)) \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 5581, "target": 0}
{"func": "# Write a Python program to convert Year/Month/Day to Day of Year.\nimport datetime\ntoday = datetime.datetime.now()\nday_of_year = (today - datetime.datetime(today.year, 1, 1)).days + 1\nprint(day_of_year)\n\n", "idx": 5582, "target": 0}
{"func": "#Write a function to convert Kilometers to Miles\ndef Kilometers_to_Miles(km):\n    conv_fac = 0.621371\n    miles = km * conv_fac\n    return miles\n\n9. \n", "idx": 5583, "target": 0}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(student.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 5584, "target": 0}
{"func": "# Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li\n\t\t\n", "idx": 5585, "target": 0}
{"func": "# Write a python program to program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1\ndef f(n):\nif n == 0 :\nreturn 0\nelse:\nreturn f(n-1)+100\nn = int(input(\"Enter Number: \"))\nprint(\"f(n-1)+100 = \", f(n))\n\n", "idx": 5586, "target": 0}
{"func": "# write a python function to Count the Number of Digits in a Number\ndef count_digits():\n    n = int(input(\"Enter number:\"))\n    count = 0\n    while n > 0:\n        count = count + 1\n        n = n // 10\n    return count\n\n\n", "idx": 5587, "target": 0}
{"func": "#36. Python funcction to Find the Factors of a Number\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 5588, "target": 0}
{"func": "# Write a python function to Check and print if binary representations of two numbers are anagram \n\nfrom collections import Counter \n  \ndef checkAnagram(num1,num2): \n    bin1 = bin(num1)[2:] \n    bin2 = bin(num2)[2:] \n  \n    zeros = abs(len(bin1)-len(bin2)) \n    if (len(bin1)>len(bin2)): \n         bin2 = zeros * '0' + bin2 \n    else: \n         bin1 = zeros * '0' + bin1 \n  \n    dict1 = Counter(bin1) \n    dict2 = Counter(bin2) \n  \n\n    if dict1 == dict2: \n         print('Yes') \n    else: \n         print('No') \n\t\t \n  \n", "idx": 5589, "target": 0}
{"func": "#57 Write a Python function to find the single number in a list that doesn't occur twice.\ndef single_number(arr):\n    result = 0\n    for i in arr:\n        result ^= i\n    return result\n\n", "idx": 5590, "target": 0}
{"func": "# Write a function to Find the size of a Tuple in Python without garbage values\nTuple = (10,20)\ndef sizeOfTuple(tup):\n  return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes' \n\n", "idx": 5591, "target": 0}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\ndef cal_total_cap_in_parallel(cap_list:list)->float:\n    return sum(cap_list)\n\n", "idx": 5592, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Perfect Number\n\ndef perfect_no_check(n):\n    sum1 = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum1 = sum1 + i\n    if (sum1 == n):\n        return True\n    else:\n        return False\n\n", "idx": 5593, "target": 0}
{"func": "# write a python function that returns the square of a given input number\ndef square(x):\n    return x**2\n\n\n", "idx": 5594, "target": 0}
{"func": "#52 zip two tuple\ndef zip_to_tuple( tup1, tup2):\n    return zip(tup1, tup2)\n\n\n", "idx": 5595, "target": 0}
{"func": "#  Write a python function to get the surface_area of a pyramid with base area & vertical height as input\ndef pyramid_surface_area(base_area, height):\n    surface_area = 1/3 * base_area * height\n    return surface_area\n\n", "idx": 5596, "target": 0}
{"func": "# Write a function that returns a list sorted descending\ndef descending_sort(l:list):\n    sorted(l, reverse=True)\n\n", "idx": 5597, "target": 0}
{"func": "# Write a function to merge two lists element wise\n\ndef merge_lists(l1:list, l2:list):\n    return list(zip(l1,l2))\n\n", "idx": 5598, "target": 0}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentage)\n\n", "idx": 5599, "target": 0}
{"func": "# Write a python program to Implement Comb sort and print the sorted list for the below list\n\ndef comb_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    gap = len(alist)\n    shrink = 1.3\n \n    no_swap = False\n    while not no_swap:\n        gap = int(gap/shrink)\n \n        if gap < 1:\n            gap = 1\n            no_swap = True\n        else:\n            no_swap = False\n \n        i = 0\n        while i + gap < len(alist):\n            if alist[i] > alist[i + gap]:\n                swap(i, i + gap)\n                no_swap = False\n            i = i + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncomb_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 5600, "target": 0}
{"func": "#55 Write a Python function to check if a number is a power of a given base.\nimport math\n\ndef isPower (n, base):\n    if base == 1 and n != 1:\n        return False\n    if base == 1 and n == 1:\n        return True\n    if base == 0 and n != 1:\n        return False\n    power = int (math.log(n, base) + 0.5)\n    return base ** power == n\n\n", "idx": 5601, "target": 0}
{"func": "#54 Write a Python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in y: return False\n        y.add(x)\n    return True\n\n", "idx": 5602, "target": 0}
{"func": "# 90 Write a python function to round down a given decimal number\n\nimport math\n\n\ndef apply_ceil(num):\n    return math.ceil(x)\n\n\n", "idx": 5603, "target": 0}
{"func": "# Write a Python Program to Check If Two Numbers are Amicable Numbers\n\ndef amicable_no_check(x, y):\n    sum1=0\n    sum2=0\n    for i in range(1,x):\n        if x%i==0:\n            sum1+=i\n    for j in range(1,y):\n        if y%j==0:\n            sum2+=j\n    if(sum1==y and sum2==x):\n        return True\n    else:\n        return False\n\n", "idx": 5604, "target": 0}
{"func": "# write a python function to check if all elements in a list are unique.\n\ndef all_unique(lst):\n  return len(lst) == len(set(lst))\n\n", "idx": 5605, "target": 0}
{"func": "# Write a python function to generate random number between 2 integers\ndef random_number(a, b):\n    import random\n    return random.randint(a, b)\n\n\n", "idx": 5606, "target": 0}
{"func": "# Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File\ndef count_letter(fname, l):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter==l):\n                        k=k+1\n    return k\n\n", "idx": 5607, "target": 0}
{"func": "# write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list\ndef divisible_sum_pairs(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 1):\n        j = i + 1\n        while j < n:\n            if ((arr[i] + arr[j]) % k) == 0:\n                count += 1\n            j += 1\n    return count\n\n\nimport math\n\n\n", "idx": 5608, "target": 0}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\ndef filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )\n\n\n", "idx": 5609, "target": 0}
{"func": "# write a python function that returns the input list sorted in descending order\ndef sort_descending(list_to_be_sorted):\n    return sorted(list_to_be_sorted, reverse=True)\n\n\n", "idx": 5610, "target": 0}
{"func": "#23 write a program to print even length words in a string  \n  \ndef printWords(s): \n    s = s.split(' ')  \n    for word in s:  \n        if len(word)%2==0: \n            print(word)  \n", "idx": 5611, "target": 0}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(k != 1): \n        return False\n\n", "idx": 5612, "target": 0}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\ndef cal_displacement(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity*time + .5*accelration*(time)**2\n\n", "idx": 5613, "target": 0}
{"func": "#write a python program to find the biggest character in a string \nbigChar = lambda word: reduce(lambda x,y: x if ord(x) > ord(y) else y, word)\n\n", "idx": 5614, "target": 0}
{"func": "#99 Write a Python program to calculate distance between two points using latitude and longitude.\nfrom math import radians, sin, cos, acos\n\nprint(\"Input coordinates of two points:\")\nslat = radians(float(input(\"Starting latitude: \")))\nslon = radians(float(input(\"Ending longitude: \")))\nelat = radians(float(input(\"Starting latitude: \")))\nelon = radians(float(input(\"Ending longitude: \")))\n\ndist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\nprint(\"The distance is %.2fkm.\" % dist)\n\n", "idx": 5615, "target": 0}
{"func": "# write  Function to left rotate n by d bits \ndef leftRotate(n, d): \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d)) \n\n\nn = 16\nd = 2\n\nprint(\"Left Rotation of\",n,\"by\",d,\"is\",end=\" \") \nprint(leftRotate(n, d)) \n\n", "idx": 5616, "target": 0}
{"func": "#38. Python Program to Find Sum of Natural Numbers Using Recursion\ndef recur_sum(n):\n   if n <= 1:\n       return n\n   else:\n       return n + recur_sum(n-1)\n\n", "idx": 5617, "target": 0}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres = [(sub[1], sub[0]) for sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res)) \n\n", "idx": 5618, "target": 0}
{"func": "# Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is\n\ndate=\"20/04/2021\"\ndd,mm,yy=date.split('/')\ndd=int(dd)\nmm=int(mm)\nyy=int(yy)\nif(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):\n    max1=31\nelif(mm==4 or mm==6 or mm==9 or mm==11):\n    max1=30\nelif(yy%4==0 and yy%100!=0 or yy%400==0):\n    max1=29\nelse:\n    max1=28\nif(mm<1 or mm>12):\n    print(\"Date is invalid.\")\nelif(dd<1 or dd>max1):\n    print(\"Date is invalid.\")\nelif(dd==max1 and mm!=12):\n    dd=1\n    mm=mm+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelif(dd==31 and mm==12):\n    dd=1\n    mm=1\n    yy=yy+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelse:\n    dd=dd+1\n    print(\"The incremented date is: \",dd,mm,yy)\n\n\n", "idx": 5619, "target": 0}
{"func": "# write a python program to add and square a range of number\nx = [i**+1 for i in range(3)]; print(x)\n\n", "idx": 5620, "target": 0}
{"func": "# write Program to demonstrate conditional operator \na, b = 10, 20\nmin = a if a < b else b \nprint(min) \n\n", "idx": 5621, "target": 0}
{"func": "# change this value for a different result\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   print(\"The sum is\",recur_sum(num))\n\n\n", "idx": 5622, "target": 0}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\ndef cal_current(resistance:float, voltage:float)->float:\n    return voltage/resistance\n\n", "idx": 5623, "target": 0}
{"func": "# Write a Python program to remove and print every third number from a list of numbers until the list becomes empty.\nnum = [10,20,30,40,50,60,70,80,90]\nlen_list = len(num)\nposition = 3 - 1\nidx = 0\nwhile len_list > 0:\n    idx = (idx+position) % len_list\n    print(num.pop(idx))\n    len_list-=1 \n\t\n\t\n\t\n", "idx": 5624, "target": 0}
{"func": "# Write a python function to convert a string to a list\ndef convert_str_to_list(string):\n    return string.split(' ')\n\n", "idx": 5625, "target": 0}
{"func": "# write a python program to convert lower case to upper for list of elements\n\nx = ['ab', 'cd']\nfor i in x:\n    print(i.upper())\n\n", "idx": 5626, "target": 0}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef get_si(p:float, r:float, t:float)->float:\n    return (p*r*t)/100\n\n", "idx": 5627, "target": 0}
{"func": "# write a python function to Check if a Substring is Present in a Given String\ndef checksubstring(string,sub_string):\n\tif(string.find(sub_str)==-1):\n      return False\n\telse:\n\t\treturn True\n\t\t\n\t\t\n\t\t\n", "idx": 5628, "target": 0}
{"func": "# initializing data type \na=tuple()\ndata_type = int \nfor i in test_tuple:\n    if not isinstance(i,data_type):\n       a=a+(i,)\nprint(list(a))\n\n", "idx": 5629, "target": 0}
{"func": "# write a python function that takes two strings as a parameter and prints the shorter one\ndef print_shorter(str1, str2):\n   if (len(str1) > len(str2)):\n      print(str2)\n   else:\n      print(str1)\n\n\n", "idx": 5630, "target": 0}
{"func": "# Write a python program to uppercase strings using lambda and map\npeople = [\"Darcy\", \"Christina\", \"Diana\"]\npeeps = list(map(lambda name: name.upper(), people))\nprint(peeps)\n\n", "idx": 5631, "target": 0}
{"func": "# Write a python program to digit sum of a number\nDigits = input(\"Enter a number: \")\nsum = int(Digits[0])\nnumber = Digits[0]\nfor i in Digits[1::]:\nsum+= int(i)\nnumber +=\" + {}\".format(i)\nprint(\"Sum of {} is {}\".format(number,sum))\n\n\n", "idx": 5632, "target": 0}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\ndef cal_mi_sphere(mass:float,radius:float)->float:\n    return (7/5)*mass*(radius**2)\n\n\n", "idx": 5633, "target": 0}
{"func": "# Write a function to merge two lists element wise\n\ndef merge_lists(l1:list, l2:list):\n    return list(zip(l1,l2))\n\n", "idx": 5634, "target": 0}
{"func": "# Public vs. private class methods and name mangling\n    def public_method(self):\n        print('Hello public world!')\n\n    def __private_method(self):\n        print('Hello private world!')\n\n    def call_private_method_in_class(self):\n        self.__private_method()\n\n\nmy_instance = my_class()\n\nmy_instance.public_method()\nmy_instance._my_class__private_method()\nmy_instance.call_private_method_in_class()\n\n", "idx": 5635, "target": 0}
{"func": "# Write a Python program to sort a list of tuples by second Item\ndef Sort_Tuple(tup):  \n\n    return(sorted(tup, key = lambda x: x[1]))   \n  \ntup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]  \n\nprint(Sort_Tuple(tup)) \n\n", "idx": 5636, "target": 0}
{"func": "# Write a python function to generate a random hexadecimal key of length n\nimport random\ndef rand_run_name(n):\n    ran = random.randrange(10**80)\n    myhex = \"%064x\" % ran\n    #limit string to 64 characters\n    myhex = myhex[:n]\n    return myhex\n\n", "idx": 5637, "target": 0}
{"func": "# write a python program to print the ascii value of a string\nprint([ord(ch) for ch in 'abc'])\n\n", "idx": 5638, "target": 0}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Plese enter a positive integer\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(recur_fibo(i))\n\n\n", "idx": 5639, "target": 0}
{"func": "# write a python function to print the octal value of a decimal number\ndef print_octal(dec):\n   print(oct(dec))\n\n\n", "idx": 5640, "target": 0}
{"func": "# write a python program that takes input an integer and find sum of series with cubes of first n natural numbers using list comprehension which ta\nN = int(input(\"Enter Integer \"))\nlst = [i**3 for i in range(1, N + 1)]\nprint(sum(lst)) \n\n", "idx": 5641, "target": 0}
{"func": "# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n", "idx": 5642, "target": 0}
{"func": "# Write a function to return the perimeter of an equilateral triangle\ndef cal_perimeter_eq_triangle(a):\n    return 3*a\n\n", "idx": 5643, "target": 0}
{"func": "# Write a Python function to clear a set.\ndef clear_set(set_input):\n    setp_copy = set_input.copy()\n    setp_copy.clear()\n    return setp_copy\n\n\n", "idx": 5644, "target": 0}
{"func": "# Write a function that adds 2 iterables a and b such that a is even and b is odd\ndef add_even_odd_list(l1:list,l2:list)-> list:\n    return [a+b for a,b in zip(l1,l2) if a%2==0 and b%2!=0]\n\n", "idx": 5645, "target": 0}
{"func": "#95 write a program to Remove leading zeros from an IP address\n\nimport re\ndef removeLeadingZeros(ip):\n    modified_ip = re.sub(regex, '.', ip)\n    print(modified_ip)\n\n\nif __name__ == '__main__' : \n\t\n\tip = \"216.08.094.196\"\n\tremoveLeadingZeros(ip)\n\n", "idx": 5646, "target": 0}
{"func": "# Write a Python function to convert Hours into Seconds\ndef hours_to_seconds(hours):\n    return hours * 60 * 60\n\n", "idx": 5647, "target": 0}
{"func": "#66 Write a Python function to push all zeros to the end of a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\n\n", "idx": 5648, "target": 0}
{"func": "#58 function to show boolean true / false is a number\ndef bool_show(a=5):\n    return True*a\n\n\n", "idx": 5649, "target": 0}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 5650, "target": 0}
{"func": "# 1. python function to return the nth fibonacci number\ndef fib(n):\n   if n <= 1:\n      return n\n   else:\n      return (fib(n-1) + fib(n-2))\n\n", "idx": 5651, "target": 0}
{"func": "# args and sleep \nimport time\ndef report_arg(my_default=time.time()):\n    print(my_default)\nreport_arg()\ntime.sleep(5)\nreport_arg()\n\n", "idx": 5652, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Prime Number\n\ndef prime_no_check(a):\n    k=0\n    for i in range(2,a//2+1):\n        if(a%i==0):\n            k=k+1\n    if(k<=0):\n        return True\n    else:\n        return False\n\n", "idx": 5653, "target": 0}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\ndef cal_time(distance:float,speed:float)->float:\n    return distance/speed\n\n", "idx": 5654, "target": 0}
{"func": "# Write a Python Program to Remove the Characters of Odd Index Values in a String\n\ndef modify(string):  \n    final = \"\"   \n    for i in range(len(string)):  \n        if i % 2 == 0:  \n            final = final + string[i]  \n    return final\n\n", "idx": 5655, "target": 0}
{"func": "# Convert dictionary to JSON\nimport json\nperson_dict = {'name': 'Bob',\n'age': 12,\n'children': None\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 5656, "target": 0}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 5657, "target": 0}
{"func": "# write a python program to input a number and check whether a given number is a palindrome.\n\nn=int(input(\"Enter number:\"))\ntemp=n\nrev=0\nwhile(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nif(temp==rev):\n    print(\"The number is a palindrome!\")\nelse:\n    print(\"The number isn't a palindrome!\")\n    \n", "idx": 5658, "target": 0}
{"func": "# check if the number is negative\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   print(\"The factorial of\", num, \"is\", recur_factorial(num))\n\n", "idx": 5659, "target": 0}
{"func": "# write a function to check if a number is perfect square or not\nimport math\ndef checksquare(num):\n    x = int(math.sqrt(num))\n    if x * x == num:\n        return True\n    return False\n\n", "idx": 5660, "target": 0}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\ndef dict_to_tuple(input_dict):\n  out_tuple = [(a, b) for a,b in input_dict.items()]\n  return out_tuple\n\n", "idx": 5661, "target": 0}
{"func": "# write a python to check two numbers are greater than or equal or less than\ndef maximum(x, y):\n    if x > y:\n        return x\n    elif x == y:\n        return 'The numbers are equal'\n    else:\n        return y\n \nprint(maximum(2, 3))\n\n", "idx": 5662, "target": 0}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        return max(list_of_nums), min(list_of_nums)\n    else:\n        return\n\n\n", "idx": 5663, "target": 0}
{"func": "# write a python class that defines a Tree and add child\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.parent = None\n        self.children =[]\n    \n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\nt = TreeNode(\"Arun\")\nt.add_child(TreeNode(\"Shruthi\"))\n\n\n", "idx": 5664, "target": 0}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sub in test_list if K in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 5665, "target": 0}
{"func": "# Write a python class to implement PriorityQueue\n\nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n\n    def isEmpty(self):\n        return len(self.queue) == []\n\n\n    def insert(self, data):\n        self.queue.append(data)\n\n\n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n\t\t\t\n\n\t\t\n\t\t\t\n  \n", "idx": 5666, "target": 0}
{"func": "# Write a Python program to find the first repeated character in a given string\ndef first_repeated_char(str1):\n    for index,c in enumerate(str1):\n        if str1[:index+1].count(c) > 1:\n            return c \n    return \"None\"\n\n", "idx": 5667, "target": 0}
{"func": "# write a python program to check and print if a number is prime\nnum = 407\nif num > 1:\n   for i in range(2,num):\n      if (num % i) == 0:\n         print(num,\"is not a prime number\")\n         break\n   else:\n      print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n\n", "idx": 5668, "target": 0}
{"func": "# write Python3 code to demonstrate list slicing from K to end using None \ntest_list = [5, 6, 2, 3, 9] \nK = 2\nres = test_list[K : None] \nprint (f\"The sliced list is :{str(res)} \"  ) \n\n", "idx": 5669, "target": 0}
{"func": "# write a python program that prints the area of a circle\nimport math\nradius = 5\nprint(f'Area: {math.pi * radius * radius}')\n\n\n", "idx": 5670, "target": 0}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [ele for ele in list1 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list1)\n\n\n", "idx": 5671, "target": 0}
{"func": "#  write a function to slice a tuple, given an input tuple and start, stop, step=1\ndef slice_a_tuple(a_tuple, start, stop, step=1):\n    return a_tuple[start:stop:step]\n\n\n", "idx": 5672, "target": 0}
{"func": "# write a python program to create a directory named path\npath = 'test'\nimport os\nos.mkdir(path)\n\n", "idx": 5673, "target": 0}
{"func": "# Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.\ndef no_notes(a):\n  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n  x = 0\n  for i in range(9):\n    q = Q[i]\n    x += int(a / q)\n    a = int(a % q)\n  if a > 0:\n    x = -1\n  return x\n\n\n", "idx": 5674, "target": 0}
{"func": "# write a python program to check whether a person is eligible to vote or not\n\nage=23\nif age>=18:\n        status=\"Eligible\"\nelse:\n    status=\"Not Eligible\"\nprint(\"You are \",status,\" for Vote.\")\n\n", "idx": 5675, "target": 0}
{"func": "# write a function to check if a list is empty or not\ndef list_is_empty(a_list):\n    if not a_list:\n        return True\n    else:\n        return False\n    \n    \n", "idx": 5676, "target": 0}
{"func": "# Pick a random character from a given String\nimport random\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", char)\n\n", "idx": 5677, "target": 0}
{"func": "# 3 write a python program to convert a string to a char array\n\n\ndef char_array(string):\n    return list(string)\n\n\n", "idx": 5678, "target": 0}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res += ele \n  \nres += dig \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 5679, "target": 0}
{"func": "# Write a Python program to find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 and print the result.\n\nnl = []\nfor x in range(1500, 2700):\n    if (x%7==0) and (x%5==0):\n        nl.append(str(x))\nprint(\"\\n\".join(nl))\n\n", "idx": 5680, "target": 0}
{"func": "# write a python function to get stock prices for a company from 2015 to 2020-12\ndef get_stock_prices(tickerSymbol='TSLA'):\n    import yfinance as yf\n\n    # get data on this ticker\n    tickerData = yf.Ticker(tickerSymbol)\n\n    # get the historical prices for this ticker\n    tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2020-12-20')\n\n    # see your data\n    print(tickerDf)\n\n\n", "idx": 5681, "target": 0}
{"func": "# write a python program that takes input a list and square root every term using list comprehension\n\ns1 = eval(input(\"Enter list \"))\nprint([i**0.5 for i in s1])\n\n", "idx": 5682, "target": 0}
{"func": "# Write a Python function to Count and print the Number of Vowels Present in a String using Sets\n\ndef count_vowels(s):\n    count = 0\n    vowels = set(\"aeiou\")\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\n", "idx": 5683, "target": 0}
{"func": "# write a python program to count the number of lower case in a string\n\nstring=\"This is a very good place to Visit\"\ncount=0\nfor i in string:\n      if(i.islower()):\n            count=count+1\nprint(f\"The number of lowercase characters is:{count}\")\n\n", "idx": 5684, "target": 0}
{"func": "# By using list comprehension, please write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) if i not in (0,4,5)]\nprint(li)\n\n", "idx": 5685, "target": 0}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 5686, "target": 0}
{"func": "#52 callable_check\ndef collable_check(x: \"Leterally can be anything\"):\n    return callable(x)\n\n\n", "idx": 5687, "target": 0}
{"func": "# write a python function to get all possible size replacement combinations of the string in lexicographic sorted order.\ndef get_ordered_combinations_with_replacement(string, k):\n    [print(''.join(x)) for x in combinations_with_replacement(sorted(string), int(k))]\n\n\n\n", "idx": 5688, "target": 0}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\n", "idx": 5689, "target": 0}
{"func": "# 17 write a function to initialize a linked list\n\n\nclass Cell:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n\n", "idx": 5690, "target": 0}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\nwhile (number > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, end=\" \")\n\n", "idx": 5691, "target": 0}
{"func": "# Function to rotate string left and right by d length \n\ndef rotate(input,d): \n\n    Lfirst = input[0 : d] \n    Lsecond = input[d :] \n    Rfirst = input[0 : len(input)-d] \n    Rsecond = input[len(input)-d : ] \n\n\n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst)) \n\ninput = 'GeeksforGeeks'\nd=2\nrotate(input,d)  \n\n", "idx": 5692, "target": 0}
{"func": "#47 write a python function to print lcm of n numbers python\nimport math\n\ndef LCMofArray(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.gcd(lcm, a[i])\n  return lcm\n\narr1 = [1,2,3]\nprint(\"LCM of arr1 elements:\", LCMofArray(arr1))\n\n", "idx": 5693, "target": 0}
{"func": "#28 to get a random element from an array in python\nimport random\nlist_ = [1,2,3,4]\nrandom.choice(list_)\n\n", "idx": 5694, "target": 0}
{"func": "# Write a function to determine the bits used by any number\n\ndef totalBits(n):\n\treturn f'total number of bits used in {n} is : {len(bin(n)[2: ])}'\n\n\n", "idx": 5695, "target": 0}
{"func": "# initializing prefix  \ntemp = \"Pro\"\n\nd={}\nfor key,value in test_dict.items():\n    d.update({temp+key:value})\nprint(d)\n\n\n", "idx": 5696, "target": 0}
{"func": "# write a generator function in python to generate infinite square of numbers using yield\ndef nextSquare(): \n    i = 1;  \n    # An Infinite loop to generate squares  \n    while True: \n        yield i*i                 \n        i += 1\n\n", "idx": 5697, "target": 0}
{"func": "# write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint li\n\n", "idx": 5698, "target": 0}
{"func": "# Write a python function to determine optimal buy and sell time of stocks given stocks for yesterday\n\ndef get_max_profit(stock_prices):\n    max_profit = 0\n\n    for outer_time in range(len(stock_prices)):\n\n        for inner_time in range(len(stock_prices)):\n            earlier_time = min(outer_time, inner_time)\n            later_time   = max(outer_time, inner_time)\n\n            earlier_price = stock_prices[earlier_time]\n            later_price   = stock_prices[later_time]\n\n            potential_profit = later_price - earlier_price\n\n            max_profit = max(max_profit, potential_profit)\n\n    return max_profit\n\t\n\n", "idx": 5699, "target": 0}
{"func": "# 37. python function to find angle between hour hand and minute hand \ndef calcAngle(hh, mm): \n  \n    # Calculate the angles moved by \n    # hour and minute hands with  \n    # reference to 12:00 \n    hour_angle = 0.5 * (hh * 60 + mm) \n    minute_angle = 6 * mm \n  \n    # Find the difference between \n    # two angles \n    angle = abs(hour_angle - minute_angle) \n  \n    # Return the smaller angle of two \n    # possible angles \n    angle = min(360 - angle, angle) \n  \n    return angle \n  \n", "idx": 5700, "target": 0}
{"func": "# Write a Python function that calculate area of a equilateral polygon\n\nimport math\ndef area(no_of_sides, circumradius):\n    side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)\n    apothem = circumradius * math.cos(math.pi / no_of_sides)\n    return no_of_sides / 2 * side_length * apothem\n\n", "idx": 5701, "target": 0}
{"func": "#37 function to add two tuple\ndef add_tuple(tup1, tup2):\n    return tup1+tup2\n\n\n", "idx": 5702, "target": 0}
{"func": "# Write a function to calculate volume of Square Pyramid  \ndef volumeSquare(b, h): \n    return (0.33) * b * b * h \n  \n", "idx": 5703, "target": 0}
{"func": "# write a python program to print all the prime numbers within an interval\n\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 5704, "target": 0}
{"func": "# write a  Python3 code to demonstrate  set difference in dictionary list  using list comprehension \n\ntest_list1 = [{\"HpY\" : 22}, {\"BirthdaY\" : 2}, ] \ntest_list2 = [{\"HpY\" : 22}, {\"BirthdaY\" : 2}, {\"Shambhavi\" : 2019}] \n\nprint (\"The original list 1 is : \" + str(test_list1)) \nprint (\"The original list 2 is : \" + str(test_list2)) \n\nres = [i for i in test_list1 if i not in test_list2] + [j for j in test_list2 if j not in test_list1] \n\nprint (\"The set difference of list is : \" + str(res)) \n\n", "idx": 5705, "target": 0}
{"func": "# write a Python function to Remove all duplicates from a given string\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    for i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n    print(\"With Order:\",t) \n    \nstr1=\"geeksforgeeks\"\nremoveDuplicate(str1) \n\n\n", "idx": 5706, "target": 0}
{"func": "# function to obtain the time in minutes form \ndef difference(h1, m1, h2, m2): \n      \n    # convert h1 : m1 into minutes \n    t1 = h1 * 60 + m1 \n      \n    # convert h2 : m2 into minutes  \n    t2 = h2 * 60 + m2 \n      \n    if (t1 == t2):  \n        print(\"Both are same times\") \n        return \n    else: \n          \n        # calculating the difference \n        diff = t2-t1 \n          \n    # calculating hours from difference \n    h = (int(diff / 60)) % 24\n      \n    # calculating minutes from difference \n    m = diff % 60\n  \n    print(h, \":\", m) \n  \n", "idx": 5707, "target": 0}
{"func": "# 31. Python Program to find Diameter, Circumference, and Area Of a Circle\nimport math\n\ndef find_Diameter(radius):\n    return 2 * radius\n\ndef find_Circumference(radius):\n    return 2 * math.pi * radius\n\ndef find_Area(radius):\n    return math.pi * radius * radius\n\nr = float(input(' Please Enter the radius of a circle: '))\n\ndiameter = find_Diameter(r)\ncircumference = find_Circumference(r)\narea = find_Area(r)\n\nprint(\"\\n Diameter Of a Circle = %.2f\" %diameter)\nprint(\" Circumference Of a Circle = %.2f\" %circumference)\nprint(\" Area Of a Circle = %.2f\" %area)\n\n", "idx": 5708, "target": 0}
{"func": "# Write a python program using list comprehension to produce and print the list ['x', 'y', 'z', 'xx', 'yy', 'zz', 'xxx', 'yyy', 'zzz', 'xxxx', 'yyyy', 'zzzz']\n\ninput_string_list = ['x', 'y', 'z']\nrepeat_count = 4\nlist3 = [input_string_list[i] * (j+1) for j in range(repeat_count)  for i in range(len(input_string_list)) ]\nprint(list3)\n\n\n", "idx": 5709, "target": 0}
{"func": "# write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit import Timer\nt = Timer(\"for i in range(100):1+1\")\nprint t.timeit()\n\n", "idx": 5710, "target": 0}
{"func": "# Python function to check whether a number is divisible by another number\ndef multiple(m, n):\n    return True if m % n == 0 else False\n\n\nprint(multiple(20, 5))\nprint(multiple(7, 2))\n\n\n", "idx": 5711, "target": 0}
{"func": "#78 Write a Python function to find the greatest common divisor (gcd) of two integers.\ndef Recurgcd(a, b):\n\tlow = min(a, b)\n\thigh = max(a, b)\n\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn Recurgcd(low, high%low)\n\n", "idx": 5712, "target": 0}
{"func": "# python code to print all possible subarrays using recursion\n\ndef printSubArrays(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        return printSubArrays(arr, 0, end + 1)\n    else:\n        print(arr[start:end + 1])\n        return printSubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArrays(arr, 0, 0)\n\n", "idx": 5713, "target": 0}
{"func": "# Write a Python program to find the total number of letters and digits in a given string\nstr1='TestStringwith123456789'\nno_of_letters, no_of_digits = 0,0\nfor c in str1:\n  no_of_letters += c.isalpha()\n  no_of_digits += c.isnumeric()\n\nprint(no_of_letters)\nprint(no_of_digits)\n\n\n", "idx": 5714, "target": 0}
{"func": "#87 write a program Tower of Hanoi \n\ndef hanoi(x):\n    global repN\n    repN += 1\n    if x == 1:\n        return 2\n    \n    else:\n        return 3*hanoi(x-1) + 2\n    \nx = int(input(\"ENTER THE NUMBER OF DISKS: \"))\n\nglobal repN\nrepN =0\n\nprint('NUMBER OF STEPS: ', hanoi(x), ' :', repN)\n\n", "idx": 5715, "target": 0}
{"func": "# write a python function to return random selection from itertools.product(*args, **kwds)\ndef random_product(*args, repeat=1):\n    import random\n    pools = [tuple(pool) for pool in args] * repeat\n    return tuple(map(random.choice, pools))\n\n", "idx": 5716, "target": 0}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (pressure*volume)/n*r\n\n", "idx": 5717, "target": 0}
{"func": "# Generate a list by list comprehension\nlist = [x for x in range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 5718, "target": 0}
{"func": "# Write a function for vertical concatenating of a matrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            except IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 5719, "target": 0}
{"func": "# write a python function to generate SHA256 for given text\ndef get_sha256(text):\n    import hashlib\n    return hashlib.sha256(text).hexdigest()\n\n\n", "idx": 5720, "target": 0}
{"func": "# Write a program which can compute the factorial of a given numbers. The results should be printed in a comma-separated sequence on a single line. \ndef fact(x):\n    if x == 0:\n        return 1\n    return x * fact(x - 1)\nx=int(raw_input())\nprint fact(x)\n\n", "idx": 5721, "target": 0}
{"func": "# 21. python function for factorial using reduce\ndef fact(n):\n    from operator import mul\n    from functools import reduce\n    return reduce(mul, range(1, n+1))\nfact(10)\n\n", "idx": 5722, "target": 0}
{"func": "#54 str to list\ndef str_to_list(sen):\n    return list(sen)\n\n\n", "idx": 5723, "target": 0}
{"func": "# Write a Python function to convert a list to a tuple.\ndef convert_list_to_tuple(list_input):\n    return tuple(list_input)\n\n\n", "idx": 5724, "target": 0}
{"func": "#14 Write a python program to find elements with the same index and print them\n\nlist1 = [3, 1, 2, 5, 4, 10, 6, 9] \n \nlist2 = [] \nfor idx, ele in enumerate(list1): \n    if idx == ele: \n        list2.append(ele) \n  \n", "idx": 5725, "target": 0}
{"func": "# write a  program to get the matched elements from two list \na = [1, 2, 3, 4, 5]\nb = [9, 8, 7, 6, 5]\n[i for i, j in zip(a, b) if i != j]\n\n\n", "idx": 5726, "target": 0}
{"func": "# write a python function to sort a list of tuples by the second Item \n  \ndef Sort_Tuple(tup):  \n      \n    # getting length of list of tuples \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n  \n", "idx": 5727, "target": 0}
{"func": "# 50 write a python program to normalize an array such that it sums upto 1\n\n\ndef normalize(arr):\n    return [float(i) / sum(arr) for i in arr]\n\n\nprint(normalize([1, 2, 3, 4, 5]))\n\n\n", "idx": 5728, "target": 0}
{"func": "# illustrate the test for equality (==) vs. identity (is)\na = 'hello world!'\nb = 'hello world!'\nprint('a is b,', a is b)\nprint('a == b,', a == b)\n\n", "idx": 5729, "target": 0}
{"func": "# write Python Program to Read the Contents of a File\na=str(input(\"Enter the name of the file with .txt extension:\"))\nfile2=open(a,'r')\nline=file2.readline()\nwhile(line!=\"\"):\n    print(line)\n    line=file2.readline()\nfile2.close()\t\n\n\n\n", "idx": 5730, "target": 0}
{"func": "# write Python3 code to demonstrate working of Check if tuple has any None value using not + all() \ntest_tup = (10, 4, 5, 6, None) \nprint(\"The original tuple : \" + str(test_tup))  \nres = not all(test_tup) \nprint(\"Does tuple contain any None value ? : \" + str(res)) \n\n", "idx": 5731, "target": 0}
{"func": "# Write a Python program to Find the day of week of a given date\nfrom datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n\n", "idx": 5732, "target": 0}
{"func": "# Write a Python function to find the Max of three numbers.\ndef max_of_two( x, y ):\nif x > y:\nreturn x\nreturn y\ndef max_of_three( x, y, z ):\nreturn max_of_two( x, max_of_two( y, z ) )\n\nprint(max_of_three(3, 6, -5))\n\n", "idx": 5733, "target": 0}
{"func": "# write a python function to return only odd numbers in a list\ndef filter_odd(nums):\n   return list(filter(lambda num: num % 2 == 1, nums))\n\n\n", "idx": 5734, "target": 0}
{"func": "# Write a Python function to find the N-th number which is both square and cube\ndef nth_sq_and_cube(N):\n\tR = N**6\n\treturn R\n\n\n", "idx": 5735, "target": 0}
{"func": "# By using list comprehension, please write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12,24,35,24,88,120,155]\nli = [x for x in li if x!=24]\nprint(li)\n\n", "idx": 5736, "target": 0}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentage)\n\n", "idx": 5737, "target": 0}
{"func": "#23 how to check nth prime in python\nx=int(input())\nn,c=1,0\nwhile(c<x):\n    n+=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            break\n    if(i==n):\n        c=c+1\n\n", "idx": 5738, "target": 0}
{"func": "# Write a Python function to create the HTML string with tags around the word(s).\ndef add_tags(tag, word):\n\treturn \"<%s>%s</%s>\" % (tag, word, tag)\n\n", "idx": 5739, "target": 0}
{"func": "# write a function to calculate speed given distance covered and time taken\n\ndef calspeed(dist, time):\n    return dist / time\n\n", "idx": 5740, "target": 0}
{"func": "# Extract least frequency element \nres = defaultdict(int) \nfor ele in test_list: \n   res[ele] += 1 \nmin_occ = 9999\nfor ele in res: \n    if min_occ > res[ele]: \n        min_occ = res[ele] \n        tar_ele = ele \n  \n", "idx": 5741, "target": 0}
{"func": "# Write a Python function that takes a string and returns the concatenated first and last character\ndef first_last(name):\n    return name[0] + name[-1]\n\n", "idx": 5742, "target": 0}
{"func": "#59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.\ndef add_digits(num):\n        return (num - 1) % 9 + 1 if num > 0 else 0\n    \n", "idx": 5743, "target": 0}
{"func": "# 68 write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\n\nprint(random.sample([i for i in range(100, 201) if i % 2 == 0], 5))\n\n", "idx": 5744, "target": 0}
{"func": "#58 Write a Python function to find the single element in a list where every element appears three times except for one.\ndef single_number(arr):\n    ones, twos = 0, 0\n    for x in arr:\n        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)\n    assert twos == 0\n    return ones\n\n", "idx": 5745, "target": 0}
{"func": "# write a python program for creating the thread\nimport threading\nfrom threading import Thread\nimport time\n\ndef print_time( threadName, delay):\n    count = 0\n    while count < 5:\n        time.sleep(delay)\n        count += 1\n        print(\"%s: %s\" % ( threadName, time.ctime(time.time()) ))\n\n", "idx": 5746, "target": 0}
{"func": "# write a python function to use a predicate and return entries particition into false entries and true entries\ndef partition(pred, iterable):\n    from itertools import filterfalse, tee\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t1, t2 = tee(iterable)\n    return filterfalse(pred, t1), filter(pred, t2)\n\n", "idx": 5747, "target": 0}
{"func": "#  Add week (7 days) and 12 hours to a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, hours=12)\nprint(res_date)\n\n", "idx": 5748, "target": 0}
{"func": "# write a python list comprehension to flatten a list of lists\n list_of_list = [[1,2,3],[4,5,6],[7,8]]`\n flatten = [y for x in list_of_list for y in x]\n \n", "idx": 5749, "target": 0}
{"func": "# write a python function that inverts the key and values in a dict and returns it\ndef invert_dict(dictionary):\n   inverted_dict = {value: key for key, value in dictionary.items()}\n   return inverted_dict\n\n\n", "idx": 5750, "target": 0}
{"func": "# write a Python function to Convert Decimal to Binary \ndef convertToBinary(n):\n   if n > 1:\n       convertToBinary(n//2)\n   print(n % 2,end = '')\n   \n   \n   \n", "idx": 5751, "target": 0}
{"func": "# input age\nage = int(input(\"Enter Age : \"))\n\nif age>=18:\n        status=\"Eligible\"\nelse:\n    status=\"Not Eligible\"\n\nprint(\"You are \",status,\" for Vote.\")\n\n", "idx": 5752, "target": 0}
{"func": "#59 write a python program to  remove digits from Dictionary String Values List\n\nimport re \n  \n", "idx": 5753, "target": 0}
{"func": "# write a python function to get the most common word in text\ndef most_common(text):\n    c = Counter(text)\n    return c.most_common(1)\n\n\n", "idx": 5754, "target": 0}
{"func": "# write a python function to check if an item exists in a list and return the boolean value\ndef item_exists(lst, item):\n    if item in lst:\n        return True\n    else:\n        return False\n\n", "idx": 5755, "target": 0}
{"func": "# Write a python function to find and print the largest prime factor of a given number\n\nimport math \n  \ndef maxPrimeFactors (n): \n      \n    maxPrime = -1\n      \n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1               \n\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n      \n    if n > 2: \n        maxPrime = n \n      \n    return int(maxPrime)\n\t\n  \n", "idx": 5756, "target": 0}
{"func": "# write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.\ndef min_max():\n    nums = [int(x) for x in input().strip().split(' ')]\n    print(sum(nums) - max(nums), sum(nums) - min(nums))\n\n\n", "idx": 5757, "target": 0}
{"func": "# Python program to make a chain of function decorators (bold, italic, underline etc.\n\ndef make_bold(fn):\n    def wrapped():\n        return \"<b>\" + fn() + \"</b>\"\n\n    return wrapped\n\n\ndef make_italic(fn):\n    def wrapped():\n        return \"<i>\" + fn() + \"</i>\"\n\n    return wrapped\n\n\ndef make_underline(fn):\n    def wrapped():\n        return \"<u>\" + fn() + \"</u>\"\n\n    return wrapped\n\n\n@make_bold\n@make_italic\n@make_underline\ndef hello():\n    return \"hello world\"\n\n\nprint(hello())\n\n", "idx": 5758, "target": 0}
{"func": "# write a python program to print all integers that aren\u2019t divisible by either 2 or 3 and lies between 1 and 50.\nfor i in range(0,50):\n  if((i%2!=0) & (i%3!=0)):\n      print(i)\n\n", "idx": 5759, "target": 0}
{"func": "# Write a python function to get the volume of a prism with base area & height as input\ndef prism_volume(base_area, height):\n    volume = base_area * height\n    return volume\n\n", "idx": 5760, "target": 0}
{"func": "# write a python function to return words in a sentence in sorted order\ndef get_sorted_words(sentence):\n   words = [word for word in sentence.split()]\n   words.sort()\n   return words\n\n\n", "idx": 5761, "target": 0}
{"func": "# Write a function to return the cartisian distance of a point from origin\ndef cal_dist_from_orign(x:float,y:float)->float:\n    return (x**2+y**2)**(1/2)\n\n", "idx": 5762, "target": 0}
{"func": "# write a Python code demonstrate the working of sorted() with lambda\n\nlis = [{ \"name\" : \"Nandini\", \"age\" : 20}, \n{ \"name\" : \"Manjeet\", \"age\" : 20 },\n{ \"name\" : \"Nikhil\" , \"age\" : 19 }]\n\nprint (\"The list printed sorting by age: \")\nprint (sorted(lis, key = lambda i: i['age']))\nprint (\"\\r\")\n\n", "idx": 5763, "target": 0}
{"func": "# write a Python function to find surface area of the Pentagonal Prism \n\ndef surfaceArea(a, b, h): \n    return 5 * a * b + 5 * b * h \n\na = 5\nb = 3\nh = 7\n\nprint(\"surface area =\", surfaceArea(a, b, h))\n\n", "idx": 5764, "target": 0}
{"func": "# write a python program to loop over dictionaries that share (some) keys and values\n\ndctA = {'a': 1, 'b': 2, 'c': 3}\ndctB = {'b': 4, 'c': 3, 'd': 6}\n\nfor item in dctA.items() & dctB.items():\n    print(item)\n\n\n", "idx": 5765, "target": 0}
{"func": "# write a python program to add two matrices and print them\nX = [[1,2,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[9,8,7],\n    [6,5,4],\n    [3,2,1]]\n\nresult = [[X[i][j] + Y[i][j]  for j in range\n(len(X[0]))] for i in range(len(X))]\n\nfor r in result:\n    print(r)\n\n", "idx": 5766, "target": 0}
{"func": "# Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list\n\ndef cocktail_shaker_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    upper = len(alist) - 1\n    lower = 0\n \n    no_swap = False\n    while (not no_swap and upper - lower > 1):\n        no_swap = True\n        for j in range(lower, upper):\n            if alist[j + 1] < alist[j]:\n                swap(j + 1, j)\n                no_swap = False\n        upper = upper - 1\n \n        for j in range(upper, lower, -1):\n            if alist[j - 1] > alist[j]:\n                swap(j - 1, j)\n                no_swap = False\n        lower = lower + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncocktail_shaker_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 5767, "target": 0}
{"func": "# write a python function to count number of vowels in a string\ndef count_vowels(text):\n    v = set('aeiou')\n    for i in v:\n        print(f'\\n {i} occurs {text.count(i)} times')\n\n\n", "idx": 5768, "target": 0}
{"func": "# write a python function to emulate the behavior of built-in map() function\ndef pad_none(iterable):\n    \"\"\"Returns the sequence elements and then returns None indefinitely.\n\n    Useful for emulating the behavior of the built-in map() function.\n    \"\"\"\n    from itertools import chain, repeat\n    return chain(iterable, repeat(None))\n\n", "idx": 5769, "target": 0}
{"func": "# write a python program to loop over dictionaries that share (some) keys\n\ndctA = {'a': 1, 'b': 2, 'c': 3}\ndctB = {'b': 4, 'c': 3, 'd': 6}\n\nfor ky in dctA.keys() & dctB.keys():\n    print(ky)\n\n", "idx": 5770, "target": 0}
{"func": "#s=[]\ns=list(set(l))\nprint(\" \".join(i for i in s))\n\n\n", "idx": 5771, "target": 0}
{"func": "# write a program to count characters surrounding vowels\n\nstr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not in vow_list and str1[1] in vow_list: \n    res += 1\n  \nif str1[-1] not in vow_list and str1[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 5772, "target": 0}
{"func": "# Write a Python function to Find the Power of a Number Using Recursion\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\n\n", "idx": 5773, "target": 0}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nfor sub in test_list:                                            \n    if res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    else: \n        res.append([ele for ele in sub])      \nres = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(res))\n\n\n", "idx": 5774, "target": 0}
{"func": "# Write a Python function to calculate dot product of two given sequence\n\ndef dot_product(a, b):\n    return sum( e[0]*e[1] for e in zip(a, b))\n\n", "idx": 5775, "target": 0}
{"func": "# Write a python function to get the volume of a cube with side as input\ndef cube_volume(side):\n    volume = side ** 3\n    return volume \n\n", "idx": 5776, "target": 0}
{"func": "# write a python function that returns the input list sorted in ascending order\ndef sort_ascending(list_to_be_sorted):\n    return sorted(list_to_be_sorted)\n\n\n", "idx": 5777, "target": 0}
{"func": "# Write a python program to return dict with {student:highest score} USING MAP+LAMBDA\nmidterms = [80, 91, 78]\nfinals = [98, 89, 53]\nstudents = ['dan', 'ang', 'kate']\nfinal_grades = dict(zip(students,map(lambda pair: max(pair),zip(midterms, finals))))\n\n", "idx": 5778, "target": 0}
{"func": "# write a function to calculate BMI given height in meters and weights in kgs\n\ndef bmi(height, weight):\n    return weight / (height * height)\n\n", "idx": 5779, "target": 0}
{"func": "# Write a python program to Count the Occurrences of a Word in a Text File\n\nfname = input(\"Enter file name: \")\nword='the'\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(f\"Frequency of Occurrences of the word {a} is:\")\nprint(k)\n\n", "idx": 5780, "target": 0}
{"func": "#84 Write a Python program to find maximum length of consecutive 0\u2019s in a given binary string.\ndef max_consecutive_0(input_str): \n     return  max(map(len,input_str.split('1')))\nstr1 = '111000010000110'\nprint(\"Original string:\" + str1)\nprint(\"Maximum length of consecutive 0\u2019s:\")\n\n", "idx": 5781, "target": 0}
{"func": "# write a Python Program to print all the Divisors of an Integer\nn = 20\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(i)\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "idx": 5782, "target": 0}
{"func": "# Write a python program to implement Tic Tac Toe game and print the results\n\n\nimport random\nimport sys\nboard=[i for i in range(0,9)]\nplayer, computer = '',''\n\nmoves=((1,7,3,9),(5,),(2,4,6,8))\n\nwinners=((0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6))\n\ntab=range(1,10)\ndef print_board():\n    x=1\n    for i in board:\n        end = ' | '\n        if x%3 == 0:\n            end = ' \\n'\n            if i != 1: end+='---------\\n';\n        char=' '\n        if i in ('X','O'): char=i;\n        x+=1\n        print(char,end=end)\ndef select_char():\n    chars=('X','O')\n    if random.randint(0,1) == 0:\n        return chars[::-1]\n    return chars\ndef can_move(brd, player, move):\n    if move in tab and brd[move-1] == move-1:\n        return True\n    return False\ndef can_win(brd, player, move):\n    places=[]\n    x=0\n    for i in brd:\n        if i == player: places.append(x);\n        x+=1\n    win=True\n    for tup in winners:\n        win=True\n        for ix in tup:\n            if brd[ix] != player:\n                win=False\n                break\n        if win == True:\n            break\n    return win\n\ndef make_move(brd, player, move, undo=False):\n    if can_move(brd, player, move):\n        brd[move-1] = player\n        win=can_win(brd, player, move)\n        if undo:\n            brd[move-1] = move-1\n        return (True, win)\n    return (False, False)\n\ndef computer_move():\n    move=-1\n    for i in range(1,10):\n        if make_move(board, computer, i, True)[1]:\n            move=i\n            break\n    if move == -1:\n        for i in range(1,10):\n            if make_move(board, player, i, True)[1]:\n                move=i\n                break\n    if move == -1:\n        for tup in moves:\n            for mv in tup:\n                if move == -1 and can_move(board, computer, mv):\n                    move=mv\n                    break\n    return make_move(board, computer, move)\ndef space_exist():\n    return board.count('X') + board.count('O') != 9\nplayer, computer = select_char()\nprint('Player is [%s] and computer is [%s]' % (player, computer))\nresult='%%% Deuce ! %%%'\nwhile space_exist():\n    print_board()\n    print('#Make your move ! [1-9] : ', end='')\n    move = int(input())\n    moved, won = make_move(board, player, move)\n    if not moved:\n        print(' >> Invalid number ! Try again !')\n        continue\n \n    if won:\n        result='*** Congratulations ! You won ! ***'\n        break\n    elif computer_move()[1]:\n        result='=== You lose ! =='\n        break;\nprint_board()\nprint(result)\n\n\n", "idx": 5783, "target": 0}
{"func": "# write a python function to convert iterable to pairwise iterable\ndef pairwise(iterable):\n    from itertools import tee\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\n", "idx": 5784, "target": 0}
{"func": "# Write a Python Program to Remove the nth Index Character from a Non-Empty String\n\ndef remove(string, n):  \n      first = string[:n]   \n      last = string[n+1:]  \n      return first + last\n\n", "idx": 5785, "target": 0}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    result = 1\n    for x in myList:\n         result = result * x \n    return result \n     \n\n\n\n", "idx": 5786, "target": 0}
{"func": "# write a python class to instantiate an object with two string attributes and write a function to return the list of attributes\nclass Myclass:  \n    def __init__(self, attr1, attr2):\n        self.attr1 = attr1\n        self.attr2 = attr2\n\n    def get_attributes_list(self):  \n         return [self.attr1, self.attr2]\ndress = Myclass(\"pant\",\"shirt\")\ndress.get_attributes_list()\n\n\n", "idx": 5787, "target": 0}
{"func": "# write a python function to find URLs in a string\n\nimport re \n  \ndef Find(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url]\n\n", "idx": 5788, "target": 0}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\ndef divide_first_number_by_second(num1, num2):\n    return (num1 // num2), (num1 % num2)\n\n\n", "idx": 5789, "target": 0}
{"func": "# Write a function that strips every vowel from a string provided\ndef strip_vowels(input_str:str)->str:\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]\n    return ''.join(list(filter(lambda x: x not in vowels, input_str)))\n\n", "idx": 5790, "target": 0}
{"func": "# local scope representation\nx = 0\ndef in_func():\n    x = 1\n    print('in_func:', x)\n\n", "idx": 5791, "target": 0}
{"func": "# write a python program to multiply two list with list comprehensive\nl1=[1,2,3]\nl2=[4,5,6]\nprint([x*y for x in l1 for y in l2])\n\n", "idx": 5792, "target": 0}
{"func": "# Write a Python program to count and display the vowels of a given text.\ndef vowel(text):\n    vowels = \"aeiuoAEIOU\"\n    main_list = [letter for letter in text if letter in vowels]\n    return len(main_list), main_list\n\n", "idx": 5793, "target": 0}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [ele for ele in list1 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list1)\n\n\n", "idx": 5794, "target": 0}
{"func": "# Write a Python Program that Prints which Letters are in the First String but not in the Second\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)-set(s2))\nprint(\"The letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 5795, "target": 0}
{"func": "# Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\ndef not_poor(str1):\n  snot = str1.find('not')\n  spoor = str1.find('poor')\n  \n\n  if spoor > snot and snot>0 and spoor>0:\n    str1 = str1.replace(str1[snot:(spoor+4)], 'good')\n    return str1\n  else:\n    return str1\n\n", "idx": 5796, "target": 0}
{"func": "# Python program to access function iside function\ndef test(a):\n    def add(b):\n        nonlocal a\n        a += 1\n        return a + b\n\n    return add\n\n\nfunc = test(4)\nprint(func(4))\n\n\n", "idx": 5797, "target": 0}
{"func": "# write a python program to print sum of natural numbers up to num\n\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n\n", "idx": 5798, "target": 0}
{"func": "# Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort\n\na=[2, 3, 8, 9, 2, 4, 6]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j]>a[j+1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp \n\n", "idx": 5799, "target": 0}
{"func": "# Write a function that returns seperate lists of positive and negative numbers from an input list\ndef seperate_pn(l):\n    pos_list = []\n    neg_list = []\n    for _ in l:\n        if _<0:\n            neg_list.append(_)\n        else:\n            pos_list.append(_)\n    return pos_list, neg_list\n\n\n", "idx": 5800, "target": 0}
{"func": "# Define a function that can accept two strings as input and concatenate them and then print it in console.\ndef printValue(s1,s2):\n\tprint s1+s2\n\n", "idx": 5801, "target": 0}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nset1 = set(str1)\n\nif set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 5802, "target": 0}
{"func": "# Write a Python program to validate an Email \nimport re \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check(email):\n  if(re.search(regex,email)):\n    print(\"Valid Email\")\n  else:\n    print(\"Invalid Email\")\n\nemail = \"ishwarraja@gmail.com\"\ncheck(email)\n\n", "idx": 5803, "target": 0}
{"func": "# Python program to print sum of digits of a 4 digit number\ndef sumofdigits(num):\n    x = num // 1000\n    x1 = (num - x * 1000) // 100\n    x2 = (num - x * 1000 - x1 * 100) // 10\n    x3 = num - x * 1000 - x1 * 100 - x2 * 10\n    print(\"The sum of digits in the number is\", x + x1 + x2 + x3)\n\n\nsumofdigits(3456)\n\n\n", "idx": 5804, "target": 0}
{"func": "# Write a python program to check if a number is a Perfect number.\nn = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in range(1, n):\nif(n % i == 0):\nsum1 = sum1 + i\nif (sum1 == n):\nprint(\"The number is a Perfect number!\")\nelse:\nprint(\"The number is not a Perfect number!\")\n\n", "idx": 5805, "target": 0}
{"func": "# write a python function to print the hexadecimal value of a decimal number\ndef print_hexadecimal(dec):\n   print(hex(dec))\n\n\n", "idx": 5806, "target": 0}
{"func": "#39 write a program extract least frequency element \n\nfrom collections import defaultdict \ntest_list = [1, 3, 4, 5, 1, 3, 5] \n  \n", "idx": 5807, "target": 0}
{"func": "# write Python Program to Count the Number of Lines in a Text File\nfname = input(\"Enter file name: \")\nnum_lines = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n\n\n", "idx": 5808, "target": 0}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentage)\n\n", "idx": 5809, "target": 0}
{"func": "# write a python function that would reverse the given string\ndef reverse_string(str_to_be_reversed):\n    return str_to_be_reversed[::-1]\n\n\n", "idx": 5810, "target": 0}
{"func": "# the index using Python map\n\nbases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nindex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef power_base(num1, index1):\n    print(\"Base numbers abd index: \")\n    print(bases_num)\n    print(index)\n    result = list(map(pow, num1, index1))\n    print(\"\\nPower of said number in bases raised to the corresponding number in the index:\")\n    print(result)\n\n\npower_base(bases_num, index)\n\n\n", "idx": 5811, "target": 0}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstring = \"are\"\nif (string.find(substring) == -1): \n    print(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 5812, "target": 0}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\ndef cal_speed(distance:float,time:float)->float:\n    return distance/time\n\n", "idx": 5813, "target": 0}
{"func": "# write a python function to get the type of a variable \ndef get_type(var):\n    return(type(var))\n\n", "idx": 5814, "target": 0}
{"func": "# write a python function to get the minimum number in passed list\n\ndef min_check(x):\n    min_val = x[0] \n    for check in x: \n        if check < min_val: \n            min_val = check \n    return min_val\n\nprint(f'{min_check([2,4,5,7,98])}')\n\n\n", "idx": 5815, "target": 0}
{"func": "# Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = raw_input()\nnumbers = [x for x in values.split(\",\") if int(x)%2!=0]\nprint \",\".join(numbers)\n\n", "idx": 5816, "target": 0}
{"func": "# Write a python program to find and print sum of series with cubes of first n natural numbers \n\nn = 10\nsum = 0\nfor i in range(1, n+1): \n    sum += i**3\n\nprint(f\"{sum}\")\n\n\n", "idx": 5817, "target": 0}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\ndef cal_focal_length_of_lense(u:float,v:float)->float:\n    return (u*v)/(u+v)\n\n", "idx": 5818, "target": 0}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnumber = secrets.randbelow(30)\nprint(number)\n\n", "idx": 5819, "target": 0}
{"func": "#48 write a python Program to multiply two matrices and print the result\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n   \n", "idx": 5820, "target": 0}
{"func": "#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.\nnums = []\n\nfor i in range(3):\n\n    nums.append([])\n\n    for j in range(2):\n\n        nums[i].append(0)\nprint(\"Multidimensional list:\")\nprint(nums)\n\n", "idx": 5821, "target": 0}
{"func": "# initializing K \nK = 2\n\nl=[]\nfor i in test_list:\n    #for j in i:\n    s=tuple()\n    s+=i[K:len(i)-K]\n    l.append((s))\nprint(l)\n\n", "idx": 5822, "target": 0}
{"func": "# Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(object):\n    def getGender( self ):\n        return \"Unknown\"\n\nclass Male( Person ):\n    def getGender( self ):\n        return \"Male\"\n\nclass Female( Person ):\n    def getGender( self ):\n        return \"Female\"\n\n", "idx": 5823, "target": 0}
{"func": "# initialize target list  \ntar_list = [6, 10] \n\nfor i in test_list:\n    for j in i:\n        #print(j)\n        if j in tar_list:\n           #print(j)\n           s.append(i)\nprint(s)         \n\n\n", "idx": 5824, "target": 0}
{"func": "#81 generate intereger random number between user choice\ndef gen_ran_int_number(lower, upper):\n    import random\n    final = [ random.randint(lower, upper) for _ in range(10) ]\n    return final\n\n\n", "idx": 5825, "target": 0}
{"func": "#29. Python Program to Find HCF or GCD\n\ndef compute_hcf(x, y):\n\n", "idx": 5826, "target": 0}
{"func": "# write a python program which takes list as an input and calculate sum of given list of numbers \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i in lst:\n    sum  = sum + i\nprint(\" The mean of given list is :\", sum)\n\n", "idx": 5827, "target": 0}
{"func": "# write a function that merges two dictionaries\ndef merge_dictionaries(dict1, dict2):\n   return {**dict1, **dict2}\n\n\n", "idx": 5828, "target": 0}
{"func": "# write a python function to get dot product between two lists of numbers\ndef dot_product(a, b):\n    return sum(e[0] * e[1] for e in zip(a, b))\n\n\n", "idx": 5829, "target": 0}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in zip(*test_dict.values()):\n  res = 1 \n  for ele in x: \n      res *= ele\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 5830, "target": 0}
{"func": "# 71 write a python function to count the length of the string\n\n\ndef len_str(st):\n    return len(st)\n\n\n", "idx": 5831, "target": 0}
{"func": "#  Write a Python function to find the median among three given numbers\ndef find_the_median(x,y,z):\n    list_ = sorted([x,y,z])\n    return list_[1]\n\n", "idx": 5832, "target": 0}
{"func": "# function to Convert Binary to Gray Code\ndef binary_to_gray(n):\n    n = int(n, 2) \n    n ^= (n >> 1)\n    return bin(n)[2:]\n\n", "idx": 5833, "target": 0}
{"func": "# write a python python program to find the L.C.M. of two input number\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 5834, "target": 0}
{"func": "# Write a Python program to sort (Descending) a dictionary by value.\nd = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nprint({k :v for k,v in sorted(d.items(),key = lambda x : x[1],reverse = True)})\n\n", "idx": 5835, "target": 0}
{"func": "# Write a Python program to print the calendar of any given year\nimport calendar\nyear=2020\nprint(calendar.calendar(year))\n\n\n", "idx": 5836, "target": 0}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\nfor idx,num in enumerate(org):\n    if idx+steps < len(org):\n        result[idx+steps] = org[idx]\n    else:\n        result[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 5837, "target": 0}
{"func": "# Write a program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1\ndef f(n):\n    if n==0:\n        return 0\n    else:\n        return f(n-1)+100\nn=int(raw_input())\nprint f(n)\n\n", "idx": 5838, "target": 0}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\ndef cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:\n    return initail_quatity*((1/2)**(time_elapsed/half_life))\n\n", "idx": 5839, "target": 0}
{"func": "# Write a python function to generate permuations of a list of given numbers\n\ndef permute(nums):\n    def backtrack(first = 0):\n        if first == n:        \n            output.append(nums[:])\n        for i in range(first, n):\n            nums[first], nums[i] = nums[i], nums[first]\n\n            backtrack(first + 1)\n\n            nums[first], nums[i] = nums[i], nums[first]\n         \n    n = len(nums)\n    output = []\n    backtrack()\n    return output\n\n\t\n", "idx": 5840, "target": 0}
{"func": "# Write a function that will provide the ascii value of a character\n\ndef charToASCII(chr):\n  return f'ASCII value of {chr} is: {ord(chr)}'\n  \n", "idx": 5841, "target": 0}
{"func": "# Write a Python program to print euclidean distance between two array/ vectors\nimport numpy as np\na = np.array([78, 84, 87, 91, 76])\nb = np.array([92, 83, 91, 79, 89])\ndist = np.linalg.norm(a-b)\nprint('Differnce in performance between A and B : ', dist)\n\n\n", "idx": 5842, "target": 0}
{"func": "# Write a Python program to get the frequency of the elements in a list\nimport collections\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\nprint(\"Original List : \",my_list)\nctr = collections.Counter(my_list)\nprint(\"Frequency of the elements in the List : \",ctr)\n\n", "idx": 5843, "target": 0}
{"func": "#32 print current version of python\nimport sys\nprint(sys.version)\n\n", "idx": 5844, "target": 0}
{"func": "# Write a Python function to \ndef binary_palindrome(n):\n\ts=int(bin(n)[2:])\n\tr=str(s)[::-1]\n\tif int(r)==s:\n\t    return \"The binary representation of the number is a palindrome.\"\n\telse:\n\t    return \"The binary representation of the number is NOT a palindrome.\"\n\n\n", "idx": 5845, "target": 0}
{"func": "# Write a Python Program to Sort the List According to the Second Element in Sublist\n\na=[['A',34],['B',21],['C',26]]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j][1]>a[j+1][1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp\n\n\n", "idx": 5846, "target": 0}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        else:\n            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2\n    else:\n        return None\n\n", "idx": 5847, "target": 0}
{"func": "#77 show all local values while one function is running\ndef show_local():\n    import math\n    a = 10\n    b = 'Hello There'\n    print(locals())\n\n\n", "idx": 5848, "target": 0}
{"func": "# write a python program to check a num is less than 1000\ndef near_thousand(n):\n      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))\nprint('near to 1000',near_thousand(1000))\nprint('near to 1300',near_thousand(1300))\n\n", "idx": 5849, "target": 0}
{"func": "# write a python function to calculate the area of tetraheadron\n\n def area_of_tetrahedron(side): \n    return (1.73205 * \n           (side * side));\n           \n", "idx": 5850, "target": 0}
{"func": "# Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort\n\na=[2, 3, 8, 9, 2, 4, 6]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j]>a[j+1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp \n\n", "idx": 5851, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[:5]\n\t\t\n", "idx": 5852, "target": 0}
{"func": "# Write a python function which accepts or discard only string ending with alphanumeric character\n\nimport re \n  \n\nregex = '[a-zA-z0-9]$'\n      \ndef check(string):\n    if(re.search(regex, string)):  \n        print(\"Accept\")          \n    else:  \n        print(\"Discard\") \n\n\n", "idx": 5853, "target": 0}
{"func": "# write a python function to find the factorial of the user provided number and print the result\ndef findfactorial(num):\n    factorial = 1\n    if num < 0:\n        print(\"Sorry, factorial does not exist for negative numbers\")\n    elif num == 0:\n        print(\"The factorial of 0 is 1\")\n    else:\n        for i in range(1,num+1):\n            factorial = factorial*i\n        print(\"The factorial of\",num,\"is\",factorial)\n        \nfindfactorial(3)        \n\n6.\n", "idx": 5854, "target": 0}
{"func": "# Writing JSON to a file\nimport json\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": True,\n\"age\": 32\n}\nwith open('person.txt', 'w') as json_file:\n  json.dump(person_dict, json_file)\n\n", "idx": 5855, "target": 0}
{"func": "# Write a function that returns derivative of log of a function\ndef derivative_log(x:float)->float:\n    return (1/x)\n\n\n", "idx": 5856, "target": 0}
{"func": "# Write a function to remove empty list from a list using list comprehension\ndef removeEmptyList(li):\n  res = [ele for ele in li if ele != []] \n  return res\n\n\n", "idx": 5857, "target": 0}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\ndef print_dict_keys_val_3():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor (k,v) in d.items():\t\n\t\tprint(v)\n\n", "idx": 5858, "target": 0}
{"func": "# write a python program to count how many times each letter occurs in a string\nstring = 'The quick brown fox jumps over the lazy dog'\ncountmap = {}\nfor letter in string:\n   if letter in countmap:\n      countmap[letter] += 1\n   else:\n      countmap[letter] = 1\nprint(f'Count of letters: {countmap}')\n\n\n", "idx": 5859, "target": 0}
{"func": "# 28 write a program that return the first n numbers from a list\n\n\ndef sub_list(lst, ind):\n    return lst[:ind]\n\n\nprint(sub_list([1, 2, 3, 4, 5, 56], 3))\n\n", "idx": 5860, "target": 0}
{"func": "# 92 Write a python function to round off a given decimal number\n\n\ndef apply_round(num):\n    return round(num)\n\n\n", "idx": 5861, "target": 0}
{"func": "#64 function to build a time elapsed closures\ndef time_elsaped()\n    start = perf_counter()\n    def inner()\n        nonlocal perf_counter\n        return perf_counter() - start\n    return inner\n\n\n", "idx": 5862, "target": 0}
{"func": "# write a boolean python function to check if a given string matches a given pattern\n\nimport re\n\ndef match(pattern, string):\n    if re.match(pattern, string):\n        return True\n    return False\n\n", "idx": 5863, "target": 0}
{"func": "# Convert string into a datetime object\nfrom datetime import datetime\ndate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n", "idx": 5864, "target": 0}
{"func": "# write a python program to find the sequences of one upper case letter followed by lower case letters.\n\n\nimport re\ntext=\"Albert\"\npatterns = '[A-Z]+[a-z]+$'\nif re.search(patterns, text):\n  print('Found a match!')\nelse:\n  print('Not matched!')\n\n", "idx": 5865, "target": 0}
{"func": "# write a python function that sorts a list based on the user provided list of indexes.\n\ndef sort_by_indexes(lst, indexes, reverse=False):\n  return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \\\n          x[0], reverse=reverse)]\n\n", "idx": 5866, "target": 0}
{"func": "# write a python program to call different functions based on condition with same arguments \ndef product(a, b):\n    return a * b\n\ndef subtract(a, b):\n    return a - b\n\nb = True\nprint((product if b else subtract)(1, 1))\n\n\n", "idx": 5867, "target": 0}
{"func": "# write Python3 code to demonstrate working of Merge Python key values to list Using list comprehension + dictionary comprehension \n\ntest_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, \n            {'it' : 5, 'is' : 7, 'best' : 8}, \n            {'CS' : 10}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = {key: list({sub[key] for sub in test_list if key in sub}) \n    for key in {key for sub in test_list for key in sub}} \n\nprint(\"The merged values encapsulated dictionary is : \" + str(res)) \n\n", "idx": 5868, "target": 0}
{"func": "# Write a program to left rotate and print a list given\n\narr = [1, 2, 3, 4, 5];     \n  \nn = 3;    \n     \n \nfor i in range(0, n):    \n    first = arr[0];    \n        \n    for j in range(0, len(arr)-1):    \n  \n        arr[j] = arr[j+1];    \n            \n \n    arr[len(arr)-1] = first;    \n     \n  \nprint(\"Array after left rotation: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i]),  \n\n\n", "idx": 5869, "target": 0}
{"func": "# Write a Python Program to print the Reverse a Given Number\n\nn=1023\nrev=0\nwhile(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 5870, "target": 0}
{"func": "# Convert string into a datetime object\nfrom datetime import datetime\ndate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n", "idx": 5871, "target": 0}
{"func": "#Write a function to find the  difference between two times\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 5872, "target": 0}
{"func": "#53 write a python program that displays the key of list value with maximum range and print it\n\ntest_dict = {\"Gfg\" : [6, 2, 4, 1], \"is\" : [4, 7, 3, 3, 8], \"Best\" : [1, 0, 9, 3]} \n  \n \nmax_res = 0\nfor sub, vals in test_dict.items(): \n      \n    # storing maximum of difference \n    max_res = max(max_res, max(vals) - min(vals))     \n    if max_res == max(vals) - min(vals): \n        res = sub \n          \n", "idx": 5873, "target": 0}
{"func": "# write a python function to map a numeric lookup using bisect\ndef grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n    from bisect import bisect\n    i = bisect(breakpoints, score)\n    return grades[i]\n\n", "idx": 5874, "target": 0}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    pi=3.14\n    return (2/3)*pi*(radius**3)\n\n", "idx": 5875, "target": 0}
{"func": "# write a python program to remove punctuations from a string\n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, she said ---and went.\"\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n", "idx": 5876, "target": 0}
{"func": "# write a python function to random select from itertools.combinations(iterable, r)\ndef random_combination(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.sample(range(n), r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 5877, "target": 0}
{"func": "# Write a Python Program to test and print Collatz Conjecture for a Given Number\n\ndef collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*n + 1\n        else:\n            # n is even\n            n = n//2\n    print(1, end='')\n\n", "idx": 5878, "target": 0}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    pi = 3.14\n    return 2*pi*r\n\n", "idx": 5879, "target": 0}
{"func": "# write Python function to find the Length of the Longest One element in the list\ndef findlongest(list):\n\tmax1=len(list[0])\n\ttemp=list[0]\n\tfor i in list:\n\t\tif(len(i)>max1):\n\t\t   max1=len(i)\n\t\t   temp=i\n\treturn temp\n\t\n\t\n\t\n", "idx": 5880, "target": 0}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(a:float,b:float,c:float):\n    if b**2-4*a*c >= 0:\n        return 'real'\n    else:\n        return 'imaginary'\n\n", "idx": 5881, "target": 0}
{"func": "# Write a Python program to count the occurrences of each word in a given sentence\ndef find_longest_word(words_list):\nword_len = []\nfor n in words_list:\nword_len.append((len(n), n))\nword_len.sort()\nreturn word_len[-1][1]\n\nprint(find_longest_word([\"PHP\", \"python\", \"zekelabs\"]))\n\n\n", "idx": 5882, "target": 0}
{"func": "# Write a python program to program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\nnum = int (input (\"Enter Number: \"))\nsum = 0\nfor i in range(num+1):\nsum += float(i/(i+1))\nprint (\"Sum: {:.2f}\".format(sum))\n\n", "idx": 5883, "target": 0}
{"func": "# Disassembler \nimport dis\ndef hello1_func():\n    s = 'Hello'\n    return s\ndis.dis(hello1_func)\n\n", "idx": 5884, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[-5:]\n\t\t\n", "idx": 5885, "target": 0}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i in range(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for j in range(i+1, len(sorted_list)):\n            if new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_min\n        sorted_list[new_min_old_place] = old_val\n    return sorted_list\n\n\n", "idx": 5886, "target": 0}
{"func": "# Write a python function to check if a number given is a Armstrong number\n\ndef isArmstrong(x):\n    n = 0\n    while (x != 0): \n        n = n + 1\n        x = x // 10\n    temp = x \n    sum1 = 0\n      \n    while (temp != 0): \n        r = temp % 10\n        sum1 = sum1 + r ** n\n        temp = temp // 10\n  \n    return (sum1 == x) \n\t\n\t\n", "idx": 5887, "target": 0}
{"func": "# Write a function to identify if value is present inside a list or not\ndef check_listvalue(l:list, value)->bool:\n    return value in l\n\n", "idx": 5888, "target": 0}
{"func": "# write a python function to calculate the greatest common divisor (GCD) of two user provided positive integers. \n\ndef gcd(num1, num2):\n    gcd = 1  \n    if num1 % num2 == 0:\n        return num2\n    for k in range(int(num2 / 2), 0, -1):\n        if num1 % k == 0 and num2 % k == 0:\n            gcd = k\n            break  \n    return gcd\n\n", "idx": 5889, "target": 0}
{"func": "# Write a Python Program Print Restaurant Menu using Class given menu and cost as list\n\nclass Food(object):\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def getprice(self):\n        return self.price\n    \n    def __str__(self):\n        return self.name + ' : ' + str(self.getprice())\n    \ndef buildmenu(names, costs):\n    menu = []\n    for i in range(len(names)):\n        menu.append(Food(names[i], costs[i]))\n    return menu\n\nnames = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']\n\ncosts = [250, 150, 180, 70, 65, 55, 120, 350]\n\nFoods = buildmenu(names, costs)\n\nn = 1\nfor el in Foods:\n    print(n,'. ', el)\n    n = n + 1\n\n", "idx": 5890, "target": 0}
{"func": "# write a python function to get the value of maximum integer allowed on the system \ndef get_max_integer():\n    import sys\n    return sys.maxsize\n\n", "idx": 5891, "target": 0}
{"func": "#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 5892, "target": 0}
{"func": "# Write a function to calculate volume of Square Pyramid  \ndef volumeSquare(b, h): \n    return (0.33) * b * b * h \n  \n", "idx": 5893, "target": 0}
{"func": "# Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\ns = raw_input()\nd={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in s:\n    if c.isupper():\n        d[\"UPPER CASE\"]+=1\n    elif c.islower():\n        d[\"LOWER CASE\"]+=1\n    else:\n        pass\nprint \"UPPER CASE\", d[\"UPPER CASE\"]\nprint \"LOWER CASE\", d[\"LOWER CASE\"]\n\n", "idx": 5894, "target": 0}
{"func": "# Write a Python function that Given a list of numbers, return True if first and last number of a list is same\ndef isFirst_And_Last_Same(numberList):\n    firstElement = numberList[0]\n    lastElement = numberList[-1]\n    if (firstElement == lastElement):\n        return True\n    else:\n        return False\n\n\n", "idx": 5895, "target": 0}
{"func": "# write a Python function to print even length words in a string \n\ndef printWords(s): \n    s = s.split(' ') \n\n    for word in s: \n        if len(word)%2==0: \n            print(word) \n\ns = \"i am muskan\"\nprintWords(s) \n\n", "idx": 5896, "target": 0}
{"func": "# write a python function that returns the input list sorted in descending order\ndef sort_descending(list_to_be_sorted):\n    return sorted(list_to_be_sorted, reverse=True)\n\n\n", "idx": 5897, "target": 0}
{"func": "# Write a python program to implement a Stack using One Queue\n\nclass Stack:\n    def __init__(self):\n        self.q = Queue()\n \n    def is_empty(self):\n        return self.q.is_empty()\n \n    def push(self, data):\n        self.q.enqueue(data)\n \n    def pop(self):\n        for _ in range(self.q.get_size() - 1):\n            dequeued = self.q.dequeue()\n            self.q.enqueue(dequeued)\n        return self.q.dequeue()\n \n \nclass Queue:\n    def __init__(self):\n        self.items = []\n        self.size = 0\n \n    def is_empty(self):\n        return self.items == []\n \n    def enqueue(self, data):\n        self.size += 1\n        self.items.append(data)\n \n    def dequeue(self):\n        self.size -= 1\n        return self.items.pop(0)\n \n    def get_size(self):\n        return self.size\n \n \ns = Stack()\n \nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'push':\n        s.push(int(do[1]))\n    elif operation == 'pop':\n        if s.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', s.pop())\n    elif operation == 'quit':\n        break\n\n", "idx": 5898, "target": 0}
{"func": "# Write a Python function that calculate interior angle of a equilateral polygon\n\ndef interior_angle(no_of_sides):\n    return (no_of_sides - 2) * 180 / no_of_sides\n\n", "idx": 5899, "target": 0}
{"func": "# write a python function to find the number of times every day occurs in a Year and print them\nimport datetime  \nimport calendar \n   \ndef day_occur_time(year): \n    days = [ \"Monday\", \"Tuesday\", \"Wednesday\",   \n           \"Thursday\",  \"Friday\", \"Saturday\",  \n           \"Sunday\" ] \n    L = [52 for i in range(7)] \n\n    pos = -1\n    day = datetime.datetime(year, month = 1, day = 1).strftime(\"%A\") \n    for i in range(7): \n        if day == days[i]: \n            pos = i \n    if calendar.isleap(year): \n        L[pos] += 1\n        L[(pos+1)%7] += 1       \n    else: \n        L[pos] += 1\n\n    for i in range(7): \n        print(days[i], L[i])\n\n", "idx": 5900, "target": 0}
{"func": "# Python program to check for palindrom\ndef isPalindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n\n    while right_pos >= left_pos:\n        if not string[left_pos] == string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True\n\n\nprint(isPalindrome('aza'))\n\n\n", "idx": 5901, "target": 0}
{"func": "#14 function to check armstrong number or not\ndef check_armstrong(no_: int):\n    sum_ = 0\n    temp = no_\n    while temp > 0:\n        digit = temp % 10\n        sum_ += digit ** 3 \n        temp //= 10\n\n    if no_ == sum_:  \n       print(f\"{no_} is an Armstrong number\")  \n    else:  \n       print(f\"{no_} is not an Armstrong number\")\n\n\n", "idx": 5902, "target": 0}
{"func": "# Write a Python function that returns True if a string is empty and False otherwise.\ndef is_empty(s):\n    if s == \"\":\n        return True\n    else:\n        return False\n\n", "idx": 5903, "target": 0}
{"func": "# write a python function to return the number of lines in a file\ndef count_lines(filename):\n   with open(filename, 'r') as f:\n      contents = f.read().split('\\n')\n      return len(contents)\n\n\n", "idx": 5904, "target": 0}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\ndef cal_displacement(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity*time + .5*accelration*(time)**2\n\n", "idx": 5905, "target": 0}
{"func": "#29. Python Program to Find HCF or GCD\n\ndef compute_hcf(x, y):\n\n", "idx": 5906, "target": 0}
{"func": "# write a python function to generate a Unique identifier across space and time in this cosmos.\ndef get_uuid():\n    return uuid.uuid4()\n\n\nimport secrets\n\n\n", "idx": 5907, "target": 0}
{"func": "# write a python program to print the divisors of a integer\nnum = int(input(\"Please enter a integer \"))\nmid = int(num / 2)\nprint(\"The divisiors of \",num,\" are :\" )\nfor a in range(2,mid + 1):\n    if num % a == 0:\n        print(a, end = ' ')\nelse :\n    print()\n    print(\"-End-\")\n    \n", "idx": 5908, "target": 0}
{"func": "# write a python function to find the URL from an input string using the regular expression\nimport re \ndef Find(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n      \n", "idx": 5909, "target": 0}
{"func": "# write a python function that takes two lists and combines them without any duplicates and return the list\ndef combine_lists(L1, L2):\n    return L1 + [items for items in L2 if items not in L1]\n\nL1 = [1,2,3]\nL2 = [2,4,3]\n\ncombine_lists(L1,L2)\n\n\n", "idx": 5910, "target": 0}
{"func": "# write a python program to check if a string is palindrome or not\n\nmy_str = 'aIbohPhoBiA'\n\nmy_str = my_str.casefold()\nrev_str = reversed(my_str)\n\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n", "idx": 5911, "target": 0}
{"func": "#Write a function to find power of number using recursion\ndef power(N, P):\n    if (P == 0 or P == 1):\n        return N\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 5912, "target": 0}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\ndef cal_focal_length_of_lense(u:float,v:float)->float:\n    return (u*v)/(u+v)\n\n", "idx": 5913, "target": 0}
{"func": "#11 write a program to rotate string left and right by d length  \ndef rotate(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n  \n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst))  \n  \nif __name__ == \"__main__\":  \n    input = 'helloworld'\n    d=2\n    rotate(input,d) \n    \n\n", "idx": 5914, "target": 0}
{"func": "# Write a Python function to compute compound interest\t\ndef compound_interest(principle, rate, time):  \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    return CI\n\t\n\n\t\n", "idx": 5915, "target": 0}
{"func": "# Write a Python function to strip vowels from a string\n\ndef vowel_stripping(string):\n    '''This function takes a string as an input strips out vowels and returns stripted out string'''\n    return \"\".join([x for x in string if x not in('a','e','i','o','u')])\n\n", "idx": 5916, "target": 0}
{"func": "#48 function to show documentation\ndef doc_func(*args, **kwargs):\n    \"\"\"\n    function to show how to do do documentation of function\n    First line after function wriiten inside triple quotes.\n    Don't forget to close when job is done.\n    \"\"\"\n    pass\n\n\n", "idx": 5917, "target": 0}
{"func": "# write a python function to generate 4 digit OTP\n\nimport math, random \ndef generateOTP() : \n    digits = \"0123456789\"\n    OTP = \"\" \n    for i in range(4) : \n        OTP += digits[math.floor(random.random() * 10)] \n    return OTP\n\n", "idx": 5918, "target": 0}
{"func": "# write a python program to add and print two user defined list using map\ninput_string = input(\"Enter a list element separated by space \")\nlist1  = input_string.split()\ninput_string = input(\"Enter a list element separated by space \")\nlist2  = input_string.split()\nlist1 = [int(i) for i in list1] \nlist2 = [int(i) for i in list2] \nresult = map(lambda x, y: x + y, list1, list2) \nprint(list(result))\n\n", "idx": 5919, "target": 0}
{"func": "# Write a python function to check if 2 strings are anagrams or not\ndef anagram(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n\n\n", "idx": 5920, "target": 0}
{"func": "# write program to Compare two dictionaries and check how many (key, value) pairs are equal\nx = {\"a\":2,\"b\":2,\"c\":3,\"d\":4}\ny = {\"b\":2,\"c\":3, \"d\":4}\nshared_items = {k: x[k] for k in x if k in y and x[k] == y[k]}\nlength = len(shared_items)\nprint(f'count:{length}')\n\n\n", "idx": 5921, "target": 0}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nmyval = [i for i in range(num1, num2, 2)]\nprint(myval)\n\n", "idx": 5922, "target": 0}
{"func": "# write a python program to remove punctuations from a string\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n", "idx": 5923, "target": 0}
{"func": "# Define a function that can convert a integer into a string and print it in console.\ndef printValue(n):\n\tprint str(n)\n\n", "idx": 5924, "target": 0}
{"func": "#36 python parse datetime from string\nfrom datetime import datetime\n\ndatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n\n", "idx": 5925, "target": 0}
{"func": "# Write a python program to make a recursive function to get the sum\ndef rec(n):\nif n == 0:\nreturn n\nreturn rec(n-1) + n\nn = int(input())\nsum = rec(n)\nprint(sum)\n\n", "idx": 5926, "target": 0}
{"func": "#13 write a program to convert into dictionary \ndef Convert(tup, di): \n    for a, b in tup: \n        di.setdefault(a, []).append(b) \n    return di \n      \ntups = [(\"A\", 10), (\"B\", 20), (\"C\", 30),  \n     (\"D\", 40), (\"E\", 50), (\"F\", 60)] \ndictionary = {} \nprint (Convert(tups, dictionary)) \n\n\n", "idx": 5927, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    pi=3.14\n    return pi*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 5928, "target": 0}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    pi=3.14\n    return pi*radius*slant_height\n\n", "idx": 5929, "target": 0}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_mean(num_list:list)->float:\n    if num_list:\n        return sum(num_list)/len(num_list)\n    else:\n        return None\n\n", "idx": 5930, "target": 0}
{"func": "#47 write a python function to print lcm of n numbers python\nimport math\n\ndef LCMofArray(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.gcd(lcm, a[i])\n  return lcm\n\narr1 = [1,2,3]\nprint(\"LCM of arr1 elements:\", LCMofArray(arr1))\n\n", "idx": 5931, "target": 0}
{"func": "# write a Python function to check Check if a Substring is Present in a Given String\ndef check(string, sub_str): \n    if (string.find(sub_str) == -1): \n        print(\"NO\") \n    else: \n        print(\"YES\") \n\nstring = \"geeks for geeks\"\nsub_str =\"geek\"\ncheck(string, sub_str) \n\n", "idx": 5932, "target": 0}
{"func": "# Write a function to identify if value is present inside a dictionary or not\ndef check_value(d:dict, value)->bool:\n    return any(v == value for v in dict.values())\n\n", "idx": 5933, "target": 0}
{"func": "# Python3 code to demonstrate working of Extract String till Numeric Using isdigit() + index() + loop \ntest_str = \"geeks4geeks is best\"\nprint(\"The original string is : \" + str(test_str)) \ntemp = 0\nfor chr in test_str: \n    if chr.isdigit(): \n        temp = test_str.index(chr) \nprint(\"Extracted String : \" + str(test_str[0 : temp])) \n\n1.\n", "idx": 5934, "target": 0}
{"func": "# Write a python program to print a given string without spaces\n\ns = \"I love India   now I will be printed without any space\"\nfor i in s:\n    if i==' ': continue\n    print(i,end='')\n\n", "idx": 5935, "target": 0}
{"func": "# write a python function to compute the lcm of two numbers\n def lcm(x, y):\n\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n   \n # write a python function to check whether the number is an Armstrong number or not\n def Armstrong(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp //= 10\n   \n    if num == sum:\n       print(num,\"is an Armstrong number\")\n    else:\n       print(num,\"is not an Armstrong number\")\n       \n # write a python function to check whether the string is a palindrome or not\n def palindrome(my_str):\n    my_str = my_str.casefold()\n    rev_str = reversed(my_str)\n    if list(my_str) == list(rev_str):\n       print(\"The string is a palindrome.\")\n    else:\n       print(\"The string is not a palindrome.\")\n \n", "idx": 5936, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)\n\n", "idx": 5937, "target": 0}
{"func": "# Write a function to calculate the density given mass and volume\ndef cal_density(mass,volume):\n    return (mass/volume)\n\n", "idx": 5938, "target": 0}
{"func": "#Write a python program to find length of list using recursion\ndef length(lst):\nif not lst:\nreturn 0\nreturn 1 + length(lst[1::2]) + length(lst[2::2])\na=[1,2,3]\nprint(\"Length of the string is: \")\nprint(a)\n\n", "idx": 5939, "target": 0}
{"func": "# write a python function to convert an angle from radians to degrees.\n\ndef rads_to_degrees(rad):\n  return (rad * 180.0) / 3.14\n\n", "idx": 5940, "target": 0}
{"func": "# write a python program to print the sum of first n numbers\nn = 10\nsum = 0\nwhile n > 0:\n   sum += n\n   n -= 1\nprint(sum)\n\n\n", "idx": 5941, "target": 0}
{"func": "#46 write a program to check if the year is a leap year\n\nyear = int(input(\"Enter a year: \"))  \nif (year % 4) == 0:  \n   if (year % 100) == 0:  \n       if (year % 400) == 0:  \n           print(\"{0} is a leap year\".format(year))  \n       else:  \n           print(\"{0} is not a leap year\".format(year))  \n   else:  \n       print(\"{0} is a leap year\".format(year))  \nelse:  \n   print(\"{0} is not a leap year\".format(year))  \n   \n", "idx": 5942, "target": 0}
{"func": "# Write a python program to Implement Counting sort and print the sorted list for the below list\n\ndef counting_sort(alist, largest):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[alist[i]] = c[alist[i]] + 1\n \n    c[0] = c[0] - 1 \n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n \n    for x in reversed(alist):\n        result[c[x]] = x\n        c[x] = c[x] - 1\n \n    return result\n \n \nalist = [2, 3, 5, 6, 4, 5]\nk = max(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 5943, "target": 0}
{"func": "# Write a function to calculate the density given mass and volume\ndef cal_density(mass,volume):\n    return (mass/volume)\n\n", "idx": 5944, "target": 0}
{"func": "# Write a lambda function to to give character grom it's ascii value\n\nascii = lambda a: chr(a)\n\n", "idx": 5945, "target": 0}
{"func": "# write a program to strips every vowel from a string provided \n\nvowels = ('a', 'e', 'i', 'o', 'u')\ninput_string = \"awesome\"\n' '.join([x for x in input_string.lower() if x not in vowels])\n\n", "idx": 5946, "target": 0}
{"func": "#69 Write a Python function to add two binary numbers.\ndef add_binary_nums(x,y):\n        max_len = max(len(x), len(y))\n\n        x = x.zfill(max_len)\n        y = y.zfill(max_len)\n\n        result = ''\n        carry = 0\n\n        for i in range(max_len-1, -1, -1):\n            r = carry\n            r += 1 if x[i] == '1' else 0\n            r += 1 if y[i] == '1' else 0\n            result = ('1' if r % 2 == 1 else '0') + result\n            carry = 0 if r < 2 else 1       \n\n        if carry !=0 : result = '1' + result\n\n        return result.zfill(max_len)\n\n", "idx": 5947, "target": 0}
{"func": "# write a python function to list all unique elements, preserving order\ndef unique_everseen(iterable, key=None):\n    from itertools import filterfalse\n    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\n", "idx": 5948, "target": 0}
{"func": "## 34 write a program to generate a random number between two ranges\n\nimport random\n\n\ndef rand_range(low, high):\n    return random.randrange(low, high)\n\n\n", "idx": 5949, "target": 0}
{"func": "# Choose given number of elements from the list with different probability\nimport random\nnum1 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 5950, "target": 0}
{"func": "# write a progarm to adds every 3rd number in a list\nfrom functools import reduce\ninput_list = [x for x in range(10)]\nreduce((lambda x, y: x + y), [val for idx, val in enumerate(input_list) if (idx+1)%3==0])\n\n\n", "idx": 5951, "target": 0}
{"func": "# Write a python function to convert hours to either mins or seconds\n\ndef convert_to_minutes(num_hours):\n    '''(int) -> int\n    Return the number of minutes there are in\n    num_hours hours.\n    '''\n    minutes = num_hours * 60\n    return minutes\n\ndef convert_to_seconds(num_hours):\n    '''(int) -> int\n    Return the number of seconds there are in \n    num_hours hours.\n    '''\n    minutes = convert_to_minutes(num_hours)\n    seconds = minutes * 60\n    return seconds\n\n\nmin = convert_to_minutes(1)\nprint(min)\n\nseconds = convert_to_seconds(1)\nprint(seconds)\n\n", "idx": 5952, "target": 0}
{"func": "# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n\n", "idx": 5953, "target": 0}
{"func": "# Write a python function to print the size of all the files in a directory only at topmost level\nimport os\ndef get_filesize_for_dir(src_dir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    total_size = 0\n    for filename in files_in_dir:\n        #(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)\n        total_size += os.stat(filename)[6]\n    return total_size\n\n", "idx": 5954, "target": 0}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_list2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i not in test_list2: \n        res_list.append(i) \nfor i in test_list2: \n    if i not in test_list1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 5955, "target": 0}
{"func": "# write a python program to use python lambda function\nlamb = lambda x: x ** 3\nprint(lamb(5))\n\n", "idx": 5956, "target": 0}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    pi = 3.14\n    return pi*r**2\n\n", "idx": 5957, "target": 0}
{"func": "# write a python program to input a string from user and count vowels in a string and print the output\n\nstr1 = input(\"Please Enter Your Own String : \")\nvowels = 0\n \nfor i in str1:\n    if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'A'\n       or i == 'E' or i == 'I' or i == 'O' or i == 'U'):\n        vowels = vowels + 1\n \nprint(\"Total Number of Vowels in this String = \", vowels)\n\n", "idx": 5958, "target": 0}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n\n", "idx": 5959, "target": 0}
{"func": "# 14 write a function to perform insertion sort on an arary\n\n\ndef sort_insertion(arr):\n    for i in range(1, len(arr)):\n        tmp = arr[i]\n\n        j = i\n        while (j > 0) & (tmp < arr[j - 1]):\n            arr[j] = arr[j - 1]\n            j = j - 1\n        arr[j] = tmp\n    return arr\n\n\n", "idx": 5960, "target": 0}
{"func": "# check if the string is equal to its reverse\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n\n", "idx": 5961, "target": 0}
{"func": "# 4. python function to add even number from 1st list and odd number from 2nd list\ndef even_odd(l1, l2):\n    return[x + y for x, y in zip(l1, l2) if x % 2 ==0 and y % 2 != 0]\n\n", "idx": 5962, "target": 0}
{"func": "# Write a function to return the perimeter of a isoscales triangle\ndef cal_perimeter_iso_triangle(s1,s2):\n    return 2*s1+s2\n\n", "idx": 5963, "target": 0}
{"func": "# write a Python program to demonstrate working of Words Frequency in String Shorthands\n\ntest_str = 'Gfg is best . Geeks are good and Geeks like Gfg'\n\nprint(\"The original string is : \" + str(test_str)) \nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency : \" + str(res)) \n\n", "idx": 5964, "target": 0}
{"func": "# write a python function to validate the email \n\nimport re \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'      \ndef check(email):  \n    if(re.search(regex,email)):  \n        print(\"Valid Email\")         \n    else:  \n        print(\"Invalid Email\")\n\n", "idx": 5965, "target": 0}
{"func": "# write a python function that would reverse the given string\ndef reverse_string(str_to_be_reversed):\n    return str_to_be_reversed[::-1]\n\n\n", "idx": 5966, "target": 0}
{"func": "# write a python program which prints a random number\nimport random\nn = random.random()\nprint(n) \n\n", "idx": 5967, "target": 0}
{"func": "# 44. python function for finding the derivative of sine angle\ndef dsine(angle):\n\n    \"\"\" returns the sine value for an angle mentioned in radians\"\"\"\n\n    return math.cos(angle)\n\n", "idx": 5968, "target": 0}
{"func": "# write a program to print binary of a decimal number n\n\nbinaryNum = [0] * n; \ni = 0; \nwhile (n > 0):  \n    binaryNum[i] = n % 2; \n    n = int(n / 2); \n    i += 1; \n\nfor j in range(i - 1, -1, -1): \n    print(binaryNum[j], end = \"\")\n\n", "idx": 5969, "target": 0}
{"func": "# write a python function to get symmetric difference between two sets from user.\ndef symmetric_diff_sets():\n    M, m = input(), set(list(map(int, input().split())))\n    N, n = input(), set(list(map(int, input().split())))\n    s = sorted(list(m.difference(n)) + list(n.difference(m)))\n    for i in s:\n        print(i)\n\n\n", "idx": 5970, "target": 0}
{"func": "# write Python program to demonstrate working of Get next key in Dictionary \n\ntest_dict = {'gfg' : 1, 'is' : 2, 'best' : 3} \n\nprint(f\"The original dictionary is : {test_dict}\") \n\ntest_key = 'is'\n\ntemp = list(test_dict)\ntry: \n    res = temp[temp.index(test_key) + 1] \nexcept (ValueError, IndexError): \n    res = None\n\nprint(f\"The next key is : {res}\") \n\n\n", "idx": 5971, "target": 0}
{"func": "# write a program to print 5 even random numbers between 10 and 100\nimport random\nprint(random.sample([i for i in range(10, 100) if i%2 == 0], 5))\n\n\n", "idx": 5972, "target": 0}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_area(a:float)->float:\n    if a:\n        return (3**(1/2))*(a**2)/4\n    else:\n        return None\n\n", "idx": 5973, "target": 0}
{"func": "# Write a function that returns a replace values in string with values provided\ndef replace_values(s:str, old, new)->str:\n    s.replace(old, new)\n\n", "idx": 5974, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Strong Number\n\ndef strong_no_check(num):\n    sum1=0\n    temp=num\n    while(num):\n        i=1\n        f=1\n        r=num%10\n        while(i<=r):\n            f=f*i\n            i=i+1\n        sum1=sum1+f\n        num=num//10\n    if(sum1==temp):\n        return True\n    else:\n        return False\n\n", "idx": 5975, "target": 0}
{"func": "# Define a custom exception class which takes a string message as attribute.\nclass MyError(Exception):\n    def __init__(self, msg):\n        self.msg = msg\nerror = MyError(\"something wrong\")\n\n", "idx": 5976, "target": 0}
{"func": "# Write a Python program to check/test multiple variables against a value\na = 10\nb = 20\nc = 30\nif 10 in {a, b, c}:\n  print(\"True\")\nelse:\n  print(\"False\")  \n\n\n", "idx": 5977, "target": 0}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\ndef invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value in my_dict.items():\n      my_inverted_dict.setdefault(value, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 5978, "target": 0}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 5979, "target": 0}
{"func": "# Write a python program to Implement Heapsort and print the sorted list for the below list\n\ndef heapsort(alist):\n    build_max_heap(alist)\n    for i in range(len(alist) - 1, 0, -1):\n        alist[0], alist[i] = alist[i], alist[0]\n        max_heapify(alist, index=0, size=i)\n \ndef parent(i):\n    return (i - 1)//2\n \ndef left(i):\n    return 2*i + 1\n \ndef right(i):\n    return 2*i + 2\n \ndef build_max_heap(alist):\n    length = len(alist)\n    start = parent(length - 1)\n    while start >= 0:\n        max_heapify(alist, index=start, size=length)\n        start = start - 1\n \ndef max_heapify(alist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and alist[l] > alist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and alist[r] > alist[largest]):\n        largest = r\n    if (largest != index):\n        alist[largest], alist[index] = alist[index], alist[largest]\n        max_heapify(alist, largest, size)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nheapsort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 5980, "target": 0}
{"func": "# Write a function that returns a list sorted ascending\ndef ascending_sort(l:list):\n    sorted(l, reverse=False)\n\n", "idx": 5981, "target": 0}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\nif guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            print(\"Yay! found the number, its 1\")\n        else:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guess2 == \"y\":\n        print(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 5982, "target": 0}
{"func": "#8. python function to identify profane words\ndef profane_filter(str):\n    profane_word_url = \"https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt\"\n    file = urllib.request.urlopen(profane_word_url)\n    for line in file:\n        decoded_line = line.decode(\"utf-8\")\n    return decoded_line\n    str = re.findall(r'\\w+', str)\n    return [i for i in str if i in decoded_line]\n\n", "idx": 5983, "target": 0}
{"func": "#27 write a python funtion to execute bash commands\nimport subprocess\nsubprocess.call([\"sudo\", \"apt\", \"update\"])\n\n", "idx": 5984, "target": 0}
{"func": "# Write a python Program to Flatten and print a List\n\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]\nprint(flatten(a))\n\n", "idx": 5985, "target": 0}
{"func": "# write a python program to adds every 3rd number in a list\nfrom functools import reduce\ninput_list = [x for x in range(10)]\nres = reduce(lambda x, y: x+y, [i for idx, i in enumerate(input_list) if (idx+1)%3==0])\n\nprint(f\"{res}\")\n\n\n", "idx": 5986, "target": 0}
{"func": "# Write a function that will convert a string into camelCase\n\nfrom re import sub\ndef camelCase(string):\n  string = sub(r\"(_|-)+\", \" \", string).title().replace(\" \", \"\")\n  return string[0].lower() + string[1:]\n\n\n", "idx": 5987, "target": 0}
{"func": "# Write a Python function to check whether a number is a power of another number or not\ndef power_checker(a,b):\n\timport math\n\ts=math.log(a,b)\n\tp=round(s)\n\tif (b**p)==a:\n\t    return f'{a} is the power of {b}.'\n\telse:\n\t    return f'{a} is NOT the power of {b}.'\n\n\n", "idx": 5988, "target": 0}
{"func": "# write a python program to find the factorial of a number provided by the user.\nnum = int(input(\"Enter a number: \"))\n\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n\n", "idx": 5989, "target": 0}
{"func": "# printing original tuples  \nprint(\"The original tuple 1 : \" + str(test_tup1))  \nprint(\"The original tuple 2 : \" + str(test_tup2))\n\nfor i in range(0,len(test_tup1)):\n    s+= (test_tup1[i] ** test_tup2[i],)\nprint(s)\n\n\n", "idx": 5990, "target": 0}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\ndef list_to_dict(list1, list2):\n  return dict(zip(list1, list2))\n\n", "idx": 5991, "target": 0}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cal_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r for r in res_list])\n\n", "idx": 5992, "target": 0}
{"func": "# Write a Python program to count the number of even and odd numbers from a series of numbers.\n\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\ncount_odd = 0\ncount_even = 0\nfor x in numbers:\n        if not x % 2:\n    \t     count_even+=1\n        else:\n    \t     count_odd+=1\n             \n", "idx": 5993, "target": 0}
{"func": "# Writing JSON to a file\nimport json\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": True,\n\"age\": 32\n}\nwith open('person.txt', 'w') as json_file:\n  json.dump(person_dict, json_file)\n\n", "idx": 5994, "target": 0}
{"func": "# write a python function to return mean of a list of numbers\n\ndef mean(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum / len(list)\n\n", "idx": 5995, "target": 0}
{"func": "# Write a Program to implement validation of a Password\nclass Password:\n    def __init__(self, password):\n        self.password = password\n\n    def validate(self):        \n        vals = {\n        'Password must contain an uppercase letter.': lambda s: any(x.isupper() for x in s),\n        'Password must contain a lowercase letter.': lambda s: any(x.islower() for x in s),\n        'Password must contain a digit.': lambda s: any(x.isdigit() for x in s),\n        'Password must be at least 8 characters.': lambda s: len(s) >= 8,\n        'Password cannot contain white spaces.': lambda s: not any(x.isspace() for x in s)            \n        } \n        valid = True  \n        for n, val in vals.items():                         \n           if not val(self.password):                   \n               valid = False\n               return n\n        return valid                \n\n\ninput_password = \"Ishwar@12Su@ 1'\"\np = Password(input_password)\nif p.validate() is True:\n  print('Password Valid')\nelse:\n  print(p.validate())\n\n", "idx": 5996, "target": 0}
{"func": "# Write a function that calculates the average time taken to perform any transaction by  Function fn averaging the total time taken for transaction over Repetations\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    import time\n    total_time = []\n\n    for _ in range(repetitons):\n        start_time = time.perf_counter()\n        fn(*args,**kwargs)\n        end_time = time.perf_counter()\n        ins_time = end_time - start_time\n        total_time.append(ins_time)\n    return sum(total_time)/len(total_time)\n\n\n", "idx": 5997, "target": 0}
{"func": "# Write a function that generates fibbonacci series\ndef Fibonacci(n:int)-> int:\n    if n==1:\n        fibonacci = 0\n    elif n==2:\n        fibonacci = 1\n    else:\n        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    return fibonacci\n\n\n", "idx": 5998, "target": 0}
{"func": "# Write a function that adds 2 iterables a and b such that a is even and b is odd\ndef add_even_odd_list(l1:list,l2:list)-> list:\n    return [a+b for a,b in zip(l1,l2) if a%2==0 and b%2!=0]\n\n", "idx": 5999, "target": 0}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndict1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key in dict2: \n    if key in dict1: \n        dict2[key] = dict2[key] + dict1[key] \n    else: \n        pass\n\n", "idx": 6000, "target": 0}
{"func": "# write a program to print the sine value of a number\nimport math\nnum = 3\nprint(math.sin(num))\n\n", "idx": 6001, "target": 0}
{"func": "# using for loop to iterate multiplication 10 times   \nfor i in range(1,11):  \n   print(num,'x',i,'=',num*i)  \n   \n", "idx": 6002, "target": 0}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 6003, "target": 0}
{"func": "# a(n) = a(n-1)**2 + a(n-1) + 1\ndef syslvester_seq(n):\n    if n == 1:\n        return 2\n    if n > 1:\n        return syslvester_seq(n-1)**2 - syslvester_seq(n-1) + 1\n    \n    \n\n", "idx": 6004, "target": 0}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nstr1 = \"python1234\"\n  \ntotal_digits = 0\ntotal_letters = 0\n  \nfor s in str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    else: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \nprint(\"Total digits found : \", total_digits) \n\n", "idx": 6005, "target": 0}
{"func": "#Write a function to convert time from 12 hour to 24 hour format\ndef convert24(str1):\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\nprint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 6006, "target": 0}
{"func": "# Write a python program to find and print product of two matrices\n\nA = [[12, 7, 3], \n    [4, 5, 6], \n    [7, 8, 9]]   \n  \nB = [[5, 8, 1, 2], \n    [6, 7, 3, 0], \n    [4, 5, 9, 1]] \n      \nresult = [[0, 0, 0, 0], \n        [0, 0, 0, 0], \n        [0, 0, 0, 0]] \n  \n\nfor i in range(len(A)): \n    for j in range(len(B[0])): \n        for k in range(len(B)): \n            result[i][j] += A[i][k] * B[k][j] \n  \nfor r in result: \n    print(r) \n\t\n\t\n", "idx": 6007, "target": 0}
{"func": "# Write a function to repeat M characters of a string N times\n\ndef multTimes(str, m, n):\n    front_len = m\n    if front_len > len(str):\n        front_len = len(str)\n    front = str[:front_len]\n    result = ''\n    for i in range(n):\n        result = result + front\n    return result\nprint (multTimes('Hello', 3, 7))\n\n\n", "idx": 6008, "target": 0}
{"func": "# Write a Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number using list comprehension\n\nl_range=2\nu_range=5\na=[(x,x**2) for x in range(l_range,u_range+1)]\n\n\n", "idx": 6009, "target": 0}
{"func": "# Write a python program to Implement Bucket sort and print the sorted list for the below list\n\ndef bucket_sort(alist):\n    largest = max(alist)\n    length = len(alist)\n    size = largest/length\n \n    buckets = [[] for _ in range(length)]\n    for i in range(length):\n        j = int(alist[i]/size)\n        if j != length:\n            buckets[j].append(alist[i])\n        else:\n            buckets[length - 1].append(alist[i])\n \n    for i in range(length):\n        insertion_sort(buckets[i])\n \n    result = []\n    for i in range(length):\n        result = result + buckets[i]\n \n    return result\n \ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = bucket_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 6010, "target": 0}
{"func": "#87 Write a Python function to check whether a list contains a sublist.\ndef is_Sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\n\treturn sub_set\n \n \n", "idx": 6011, "target": 0}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    return (4/3)*pi*(radius**3)\n\n", "idx": 6012, "target": 0}
{"func": "# Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.\ndef add_string(str1):\n  length = len(str1)\n\n  if length > 2:\n    if str1[-3:] == 'ing':\n      str1 += 'ly'\n    else:\n      str1 += 'ing'\n\n  return str1\n\n", "idx": 6013, "target": 0}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\n", "idx": 6014, "target": 0}
{"func": "#  write a python program to check string istitle\nstr1 = 'Hello!2@#World'\nif str1.istitle():\n    print('Yes string is title')\n\n", "idx": 6015, "target": 0}
{"func": "#59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.\ndef add_digits(num):\n        return (num - 1) % 9 + 1 if num > 0 else 0\n    \n", "idx": 6016, "target": 0}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char in str1:\n  count = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 6017, "target": 0}
{"func": "# Write a function to return the perimeter of a isoscales triangle\ndef cal_perimeter_iso_triangle(s1,s2):\n    return 2*s1+s2\n\n", "idx": 6018, "target": 0}
{"func": "#4 add a string to each element of a list python\nmy_list = ['foo', 'fob', 'faz', 'funk']\nstring = 'bar'\nlist2 = list(map(lambda orig_string: orig_string + string, my_list))\n\n", "idx": 6019, "target": 0}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\ndef zip_(list_of_seq):\n    return list(zip(*list_of_seq))\n\n\n", "idx": 6020, "target": 0}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(k != 1): \n        return False\n\n", "idx": 6021, "target": 0}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 6022, "target": 0}
{"func": "# write a python program to reverse user provided number \n\nn = 4562; \nrev = 0\nwhile(n > 0): \n    a = n % 10\n    rev = rev * 10 + a \n    n = n // 10   \nprint(rev)\n\n", "idx": 6023, "target": 0}
{"func": "# write a python function to calculate the median of user provided list of numbers\n\ndef median(list):\n  list.sort()\n  list_length = len(list)\n  if list_length % 2 == 0:\n    return (list[int(list_length / 2) - 1] + list[int(list_length / 2)]) / 2\n  return float(list[int(list_length / 2)])\n\n", "idx": 6024, "target": 0}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntarget = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    for j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 6025, "target": 0}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = list(filter(lambda x: (x % 2 != 0), list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 6026, "target": 0}
{"func": "# Write a python function to print the elements of a given list, one element in a line\ndef custom_print(l):\n    for _ in l:\n        print(_)\n\n\n", "idx": 6027, "target": 0}
{"func": "# iterating each dictionary for similar key's value \nfor key in keys: \n    flag = 1\n    for ele in test_list: \n  \n        # checking for similar values \n        if test_list[0][key] != ele[key]: \n            flag = 0\n            break\n  \n    if flag: \n        res.append(key) \n  \n", "idx": 6028, "target": 0}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres = calculateSum(10)\nprint(res)\n\n", "idx": 6029, "target": 0}
{"func": "# Interning of string \nhello1 = 'Hello'\nhello2 = 'Hell' + 'o'\nhello3 = 'Hell'\nhello3 = hello3 + 'o'\nprint('hello1 is hello2:', hello1 is hello2)\nprint('hello1 is hello3:', hello1 is hello3)\n\n", "idx": 6030, "target": 0}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    end = start \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\nprint(result)\n\n", "idx": 6031, "target": 0}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    result = 1\n    for x in myList:\n         result = result * x \n    return result \n     \n\n\n\n", "idx": 6032, "target": 0}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\ndef divide(num1, num2):\n    if num2 == 0:\n        return\n    else:\n        return num1 / num2\n\n\n", "idx": 6033, "target": 0}
{"func": "# 40 write a python function that takes in a string and returns it in lowercase\n\n\ndef to_lower(s):\n    return s.lower()\n\n\n", "idx": 6034, "target": 0}
{"func": "# This function subtracts two numbers\ndef subtract(x, y):\n    return x - y\n\n", "idx": 6035, "target": 0}
{"func": "# Write a Python function func1() such that it can accept a variable length of  argument and print all arguments value\ndef func1(*args):\n    for i in args:\n        print(i)\n\n", "idx": 6036, "target": 0}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\n", "idx": 6037, "target": 0}
{"func": "# Write a program to guess a number between 1 and 20 and greet if succesfully guessed and print the results\n\nimport random\n\nguesses_made = 0\n\nname = input('Hello! What is your name?\\n')\n\nnumber = random.randint(1, 20)\nprint ('Well, {0}, I am thinking of a number between 1 and 20.'.format(name))\n\nwhile guesses_made < 6:\n\n    guess = int(input('Take a guess: '))\n\n    guesses_made += 1\n\n    if guess < number:\n        print ('Your guess is too low.')\n\n    if guess > number:\n        print ('Your guess is too high.')\n\n    if guess == number:\n        break\n\nif guess == number:\n    print ('Good job, {0}! You guessed my number in {1} guesses!'.format(name, guesses_made))\nelse:\n    print ('Nope. The number I was thinking of was {0}'.format(number))\n\t\n\t\n", "idx": 6038, "target": 0}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (pressure*volume)/n*r\n\n", "idx": 6039, "target": 0}
{"func": "# Generate a random n-dimensional array of float numbers\nimport numpy\nrandom_float_array = numpy.random.rand(2, 2)\nprint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 6040, "target": 0}
{"func": "# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choice in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n\n", "idx": 6041, "target": 0}
{"func": "# Write a Python class that will initiate a number, input a number and print the number\nclass Number:\n\tdef __init__(self, num):\n\t\tself.num = num\n\n\tdef inputNum(self):\n\t\tself.num = int(input(\"Enter an integer number: \"))\n\n\tdef printNum(self):\n\t\tprint(self.num)\n\n\n", "idx": 6042, "target": 0}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 6043, "target": 0}
{"func": "# write a python function to that performs as ReLU\n\ndef ReLU(num):\n    if num > 0:\n        return num\n    return 0\n\n", "idx": 6044, "target": 0}
{"func": "# Write a python function to create an argument parser that takes inputs as program name and description of program and filename as inputs for variable length of args\nimport argparse\ndef create_parser(prog_name, prog_description, arg_name):\n    parser = argparse.ArgumentParser(prog = prog_name, description = prog_description)\n    parser.add_argument(arg_name, nargs='+')\n    #args = parser.parse_args()\n    return parser\n\n", "idx": 6045, "target": 0}
{"func": "#75 write a python program to test Boolean Value of Dictionary and print it\n\n\ntest_dict = {'gfg' : True, 'is' : False, 'best' : True} \n  \n", "idx": 6046, "target": 0}
{"func": "# write a python function to sort the dictionary by key\n\ndef sort_dict_by_key(d, reverse = False):\n  return dict(sorted(d.items(), reverse = reverse))\n\n", "idx": 6047, "target": 0}
{"func": "# Write a program to find common divisors between two numbers in a given pair\ndef ngcd(x, y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i\n        i+=1\n    return gcd\ndef num_comm_div(x, y):\n  n = ngcd(x, y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while( i <= z ):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result\n\n", "idx": 6048, "target": 0}
{"func": "# Write a python program to Implement Bucket sort and print the sorted list for the below list\n\ndef bucket_sort(alist):\n    largest = max(alist)\n    length = len(alist)\n    size = largest/length\n \n    buckets = [[] for _ in range(length)]\n    for i in range(length):\n        j = int(alist[i]/size)\n        if j != length:\n            buckets[j].append(alist[i])\n        else:\n            buckets[length - 1].append(alist[i])\n \n    for i in range(length):\n        insertion_sort(buckets[i])\n \n    result = []\n    for i in range(length):\n        result = result + buckets[i]\n \n    return result\n \ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = bucket_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 6049, "target": 0}
{"func": "# Write a python program to Implement Radix sort and print the sorted list for the below list\n\ndef radix_sort(alist, base=10):\n    if alist == []:\n        return\n \n    def key_factory(digit, base):\n        def key(alist, index):\n            return ((alist[index]//(base**digit)) % base)\n        return key\n    largest = max(alist)\n    exp = 0\n    while base**exp <= largest:\n        alist = counting_sort(alist, base - 1, key_factory(exp, base))\n        exp = exp + 1\n    return alist\n \ndef counting_sort(alist, largest, key):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[key(alist, i)] = c[key(alist, i)] + 1\n \n    c[0] = c[0] - 1\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n    for i in range(len(alist) - 1, -1, -1):\n        result[c[key(alist, i)]] = alist[i]\n        c[key(alist, i)] = c[key(alist, i)] - 1\n \n    return result\n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = radix_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 6050, "target": 0}
{"func": "# write a python function to find nCr\n \n def nCr(n, r): \n\n    def fact(n): \n        res = 1\n        for i in range(2, n+1): \n            res = res * i \n        return res\n    \n    return (fact(n) / (fact(r)  \n                * fact(n - r)))\n\n", "idx": 6051, "target": 0}
{"func": "# write a python function to subtract two user provided numbers and return the result\ndef sub_two_numbers(num1, num2):\n    sub = num1 - num2\n    return sub\n\n", "idx": 6052, "target": 0}
{"func": "# write a python program to print the factorial of number\nnum = int(input(\"Please enter a number \"))\nfact = 1\na = 1\nwhile a <= num :\n    fact *= a\n    a += 1\nprint(\"The factorial of \",num, \" is \",fact)\n\n", "idx": 6053, "target": 0}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    pi=3.14\n    return (2/3)*pi*(radius**3)\n\n", "idx": 6054, "target": 0}
{"func": "# Write a Python program to check a list is empty or not\nl = []\nif not l:\nprint(\"List is empty\")\n\n", "idx": 6055, "target": 0}
{"func": "# Write a Python program to print out the number of CPUs working behind the scenes using multiprocessing library\nimport multiprocessing\nprint(multiprocessing.cpu_count())\n    \n    \n", "idx": 6056, "target": 0}
{"func": "# write a python function which uses generator to sum all the numbers in a range\nmin_value = 10\nmax_value = 10000\nsum_all = sum(i * i for i in range(min_value, max_value))\nprint(f\"{sum_all}\")\n\n\n", "idx": 6057, "target": 0}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [ele for ele in test_list if ele.strip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 6058, "target": 0}
{"func": "#81 Write a Python program to convert a given Bytearray to Hexadecimal string.\ndef bytearray_to_hexadecimal(list_val):\n     result = ''.join('{:02x}'.format(x) for x in list_val)  \n     return(result)\n     \n\n", "idx": 6059, "target": 0}
{"func": "# Write a python program to Implement Radix sort and print the sorted list for the below list\n\ndef radix_sort(alist, base=10):\n    if alist == []:\n        return\n \n    def key_factory(digit, base):\n        def key(alist, index):\n            return ((alist[index]//(base**digit)) % base)\n        return key\n    largest = max(alist)\n    exp = 0\n    while base**exp <= largest:\n        alist = counting_sort(alist, base - 1, key_factory(exp, base))\n        exp = exp + 1\n    return alist\n \ndef counting_sort(alist, largest, key):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[key(alist, i)] = c[key(alist, i)] + 1\n \n    c[0] = c[0] - 1\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n    for i in range(len(alist) - 1, -1, -1):\n        result[c[key(alist, i)]] = alist[i]\n        c[key(alist, i)] = c[key(alist, i)] - 1\n \n    return result\n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = radix_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 6060, "target": 0}
{"func": "# write a python program to sort using list comprehensive\npairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\npairs.sort(key=lambda pair: pair[1])\nprint(pairs)\n\n", "idx": 6061, "target": 0}
{"func": "# Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. \nclass Circle(object):\n    def __init__(self, r):\n        self.radius = r\n\n    def area(self):\n        return self.radius**2*3.14\n\n", "idx": 6062, "target": 0}
{"func": "# write a python function to remove all punctuation from a string\ndef remove_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   no_punct = ''\n   for char in sentence:\n      if char not in punctuations:\n         no_punct = no_punct + char\n   return no_punct\n\n\n\n", "idx": 6063, "target": 0}
{"func": "#67 write a program to multiply two matrices using nested loops\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n\nfor i in range(len(X)):\n\n   for j in range(len(Y[0])):\n\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)   \n   \n", "idx": 6064, "target": 0}
{"func": "# write a python program that prints the sum of natural numbers up to a given number\nnum = 16\nsum = 0\nwhile (num > 0):\n   sum += num\n   num -= 1\nprint(f'The sum is {sum}')\n\n\n", "idx": 6065, "target": 0}
{"func": "#98 write a program to reverse a string that contains digits in Python\n\ndef reverse(n):\n    s=str(n) \n    p=s[::-1]\n    return p \n\nnum = int(input('Enter a positive value: '))\nprint('The reverse integer:',reverse(num))\n\n", "idx": 6066, "target": 0}
{"func": "# write a Python Recursive function to solve the tower of hanoi \n  \ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        print(\"Move disk 1 from source\",source,\"to destination\",destination)\n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",destination)\n    TowerOfHanoi(n-1, auxiliary, destination, source) \n          \nn = 4\nTowerOfHanoi(n,'A','B','C')\n\n\n", "idx": 6067, "target": 0}
{"func": "# 42 write a python program that converts lower case letters to uppercase and vice versa\ndef flip_case(s):\n    s = [int(ord(x)) for x in s]\n    s = [x - 32 if x >= 97 else x + 32 for x in s]\n    s = [chr(x) for x in s]\n    return \"\".join(s)\n\n\n", "idx": 6068, "target": 0}
{"func": "# Write a Python function to print the root of the quadratic equation\ndef quadratic_root(A,B,C):\n\timport math\n\td=((B**2)-4*A*C)\n\n\tif d>=0:\n\t    s=(-B+(d)**0.5)/(2*A)\n\t    p=(-B-(d)**0.5)/(2*A)\n\t    print(math.floor(s),math.floor(p))\n\telse:\n\t    print('The roots are imaginary')\n\n\n", "idx": 6069, "target": 0}
{"func": "# Write a lambda function that gives True if the input number is even otherwise False\n\neven = lambda a: True if a%2 == 0 else False\n\n", "idx": 6070, "target": 0}
{"func": "#94 write a program to remove matching tuples and print it\n\ntest_list1 = [('Early', 'morning'), ('is','good'), ('for', 'Health')] \ntest_list2 = [('Early', 'morning'), ('is','good')] \n\nl=[]\nfor i in range(0,len(test_list1)):\n    for j in range(0,len(test_list2)):\n        if test_list1[i]  not in test_list2:\n           #continue\n           l.append(test_list1[i])\n           break\nprint(l) \n\n", "idx": 6071, "target": 0}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for d in input for key, value in d.items()}\n\n", "idx": 6072, "target": 0}
{"func": "# Write a function to calculate simple interest, given p, r, t\ndef simp_int(p, r, t):\n    interest = (p*r*t)/100\n    return interest\n\n\n", "idx": 6073, "target": 0}
{"func": "# initializing updict \nupdict = {\"Gfg\"  : 10, \"Best\" : 17} \nd={}\nfor key in test_dict.keys():\n     if key in updict:\n        d.update({key:updict[key]})\n     else:\n        d.update({key:test_dict[key]})\nprint(d)       \n\n\n", "idx": 6074, "target": 0}
{"func": "# write a python function to return an iterator over the last n items\ndef tail(n, iterable):    \n    from collections import deque\n    return iter(deque(iterable, maxlen=n))\n\n", "idx": 6075, "target": 0}
{"func": "# 99 write a  python function that accepts a string and reverses it\n\n\ndef reverse(st):\n    return st[::-1]\n\n\n", "idx": 6076, "target": 0}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a+b for a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 6077, "target": 0}
{"func": "# Convert string into a datetime object\nfrom datetime import datetime\ndate_string = \"Feb 25 2020  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n", "idx": 6078, "target": 0}
{"func": "# write a program to randomly print a integer number between 7 and 15 inclusive.\nimport random\nprint random.randrange(7,16)\n\n", "idx": 6079, "target": 0}
{"func": "# write a python program to check name exists in given list\nnames1 = ['Amir', 'Bala', 'Chales']\nfor n in names1:\n    name = n.lower()\n    if 'amir' == name:\n        print('Yes name exists:',name)\n    else:\n        print('No')\n\n", "idx": 6080, "target": 0}
{"func": "#7 write a function to print second largest number in a list.\ndef second_large_num(num: list):\n    if isinstance(num, list):\n        num.sort()\n        print (num[-2])\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 6081, "target": 0}
{"func": "# Write a Python Program to print the Factorial of a Number\nnum = 7\nfactorial = 1\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n   \n\n   \n\n", "idx": 6082, "target": 0}
{"func": "# write a python program to create multiplication table of 5\n\nn=5\nfor i in range(1,11):\n   print(n,'x',i,'=',n*i)\n\n", "idx": 6083, "target": 0}
{"func": "# write a python program to print a random number between 0 and 1\nimport random\nprint(random.uniform(0, 1))\n\n", "idx": 6084, "target": 0}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  return res\n\n", "idx": 6085, "target": 0}
{"func": "#79 Write a program to print which will find all such numbers which are divisible by 7 but are not a multiple of 5,\nbetween 2000 and 3200 (both included).  \nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint ','.join(l)\n\n\n", "idx": 6086, "target": 0}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\ndef printDict():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor k in d.keys():\t\n\t\tprint k\n\t\t\n", "idx": 6087, "target": 0}
{"func": "# Write a python function which determines if binary representation of a number is palindrome\n\ndef binaryPallindrome(num): \n     binary = bin(num) \n     binary = binary[2:] \n     return binary == binary[-1::-1] \n\t \n\t \n", "idx": 6088, "target": 0}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) for val in list1] \n  \nprint(res) \n\n", "idx": 6089, "target": 0}
{"func": "# Write a python function to calculate number of days between two dates using datetime module\nfrom datetime import date\ndef day_diff(date1, date2):\n    diff = date1 - date2\n    return diff.days\n\n", "idx": 6090, "target": 0}
{"func": "# Write a Python Program to Detect if Two Strings are Anagrams\n\ndef anagram_check(s1, s2):\n    if(sorted(s1)==sorted(s2)):\n        return True\n    else:\n        return False\n\n", "idx": 6091, "target": 0}
{"func": "# Write a program to rotate and print elements of a list\n\narr = [1, 2, 3, 4, 5];     \n  \nn = 3;      \n  \nfor i in range(0, n):    \n    #Stores the last element of array    \n    last = arr[len(arr)-1];    \n        \n    for j in range(len(arr)-1, -1, -1):    \n        #Shift element of array by one    \n        arr[j] = arr[j-1];    \n            \n       \n    arr[0] = last; \n    \nprint(arr)\n   \n\n", "idx": 6092, "target": 0}
{"func": "# write a Python program to count the number of even and odd numbers from a series of numbers and print the result\n\nx = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nodd = even = 0\nfor i in x:\n    if i % 2 == 0:\n        even = even + 1\n    else:\n        odd = odd + 1\n        \nprint(\"Even Numbers are: \", even)\nprint(\"Odd Numbers are: \", odd)\n\n", "idx": 6093, "target": 0}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\ndef count_blank_space():\n    fname = input(\"file name:\")\n    count = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            count += line.count(' ')\n    return count\n\n\n", "idx": 6094, "target": 0}
{"func": "# write a python program to print all Prime numbers in an Interval\nstart = 11\nend = 25\n \nfor i in range(start,end):\n  if i>1:\n    for j in range(2,i):\n        if(i % j==0):\n            break\n    else:\n        print(i)\n\n", "idx": 6095, "target": 0}
{"func": "#\n\nimport os\nimport nltk\nimport string\nfrom collections import Counter\nfrom itertools import permutations, combinations, combinations_with_replacement\n\nletters = string.ascii_lowercase\n\n\n", "idx": 6096, "target": 0}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 6097, "target": 0}
{"func": "# Write a Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number using list comprehension\n\nl_range=2\nu_range=5\na=[(x,x**2) for x in range(l_range,u_range+1)]\n\n\n", "idx": 6098, "target": 0}
{"func": "# n\u22c52n \u2212 1, with n \u2265 1. \ndef woodall_number(n):\n    if n >= 0:\n        return n * 2 ** n - 1\n    \n    \n", "idx": 6099, "target": 0}
{"func": "# write a python function to split word into chars\ndef split(word): \n    return [char for char in word]\n\n", "idx": 6100, "target": 0}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 6101, "target": 0}
{"func": "# 52 Write a python program to calculate the slope of a line given two points\n\n\ndef slope_of_a_line(x1, x2, y1, y2):\n    del_x = x2 - x1\n    del_y = y2 - y1\n    return float(del_y) / del_x\n\n\nprint(slope_of_a_line(0, 10, 0, 10))\n\n", "idx": 6102, "target": 0}
{"func": "# Write a program to print all the even numbers in a range\n\nr1, r2 = 1, 28\n\nfor _ in range(r1, r2+1):\n  if _%2 == 0:\n    print(_)\n\n", "idx": 6103, "target": 0}
{"func": "#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.\ndef odd_occurrence(arr):\n \n    # Initialize result\n    result = 0\n     \n    # Traverse the array\n    for element in arr:\n        # XOR\n        result = result ^ element\n \n    return result\n\n", "idx": 6104, "target": 0}
{"func": "# Subtract a week from a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 6105, "target": 0}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist1 = [11, 5, 17, 18, 23, 50]  \n  \ndel list1[1:5] \n  \nprint(*list1)\n\n\n", "idx": 6106, "target": 0}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\nsum = num1 + num2\nreturn not sum % 2\n\n\n", "idx": 6107, "target": 0}
{"func": "# Write a function that takes a base and a power and finds the power of the base using recursion.\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\nbase=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprint(\"Result:\",power(base,exp))\n\n\n", "idx": 6108, "target": 0}
{"func": "# 94 write a python function that takes in a decimal number and prints it's binary representation\n\n\ndef dec2bin(num):\n    print(format(num, \"b\"))\n\n\n", "idx": 6109, "target": 0}
{"func": "# Write a function to create all possible permutations from a given collection of distinct numbers\ndef permute(nums):\n  result_perms = [[]]\n  for n in nums:\n    new_perms = []\n    for perm in result_perms:\n      for i in range(len(perm)+1):\n        new_perms.append(perm[:i] + [n] + perm[i:])\n        result_perms = new_perms\n  return result_perms\n\n", "idx": 6110, "target": 0}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist1 = [11, 5, 17, 18, 23, 50]  \n  \ndel list1[1:5] \n  \nprint(*list1)\n\n\n", "idx": 6111, "target": 0}
{"func": "# Write a Python program to Subtract a week ( 7 days) from a given date in Python \nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n\n", "idx": 6112, "target": 0}
{"func": "# Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\nn=int(raw_input())\nsum=0.0\nfor i in range(1,n+1):\n    sum += float(float(i)/(i+1))\nprint sum\n\n", "idx": 6113, "target": 0}
{"func": "# write a python function to calculate the age with the user provided date of birth\n\nfrom datetime import date\ndef calculate_age(dtob):\n    today = date.today()\n    return today.year - dtob.year - ((today.month, today.day) < (dtob.month, dtob.day))\n\n", "idx": 6114, "target": 0}
{"func": "# Initialize K  \nK = 5\n\nfor key,value in test_dict.items():\n    test_dict.update({key:value-K})\nprint(test_dict) \n\n\n", "idx": 6115, "target": 0}
{"func": "# write a python function to remove last element in the list\ndef remove_last_element_list(list1):\n    list1.pop()\n    return list1\n\n", "idx": 6116, "target": 0}
{"func": "# write a python function to pickle data to a file\ndef pickle_data(data, pickle_file):\n  import pickle\n  with open(pickle_file, 'wb') as f:\n      pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)\n  return None\n\n", "idx": 6117, "target": 0}
{"func": "# Write a Python program to detect the number of local variables declared in a function.\ndef abc():\nx = 1\ny = 2\nstr1= \"w3resource\"\n\nprint(abc.__code__.co_nlocals)\n\n\n", "idx": 6118, "target": 0}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n\n", "idx": 6119, "target": 0}
{"func": "# Write a Python function that checks whether a passed string is palindrome or not\n\ndef isPalindrome(string):\nleft_pos = 0\nright_pos = len(string) - 1\n\nwhile right_pos >= left_pos:\nif not string[left_pos] == string[right_pos]:\nreturn False\nleft_pos += 1\nright_pos -= 1\nreturn True\nprint(isPalindrome('aza'))\n\n", "idx": 6120, "target": 0}
{"func": "# write a python function to get stock prices for a company from 2015 to 2020-12\ndef get_stock_prices(tickerSymbol='TSLA'):\n    import yfinance as yf\n\n    # get data on this ticker\n    tickerData = yf.Ticker(tickerSymbol)\n\n    # get the historical prices for this ticker\n    tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2020-12-20')\n\n    # see your data\n    print(tickerDf)\n\n\n", "idx": 6121, "target": 0}
{"func": "# Write a python function to check if 2 strings are anagrams or not\ndef anagram(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n\n\n", "idx": 6122, "target": 0}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    end = start \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = end+1\n\nprint(result)\n\n", "idx": 6123, "target": 0}
{"func": "#32. Write a python program to find HCf or GCD using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 6124, "target": 0}
{"func": "# generates key:value pair for each item \ndictionary = dict(subString.split(\"=\") for subString in str.split(\";\")) \n  \n", "idx": 6125, "target": 0}
{"func": "# write a program to find and print the smallest among three numbers\nnum1 = 100\nnum2 = 200\nnum3 = 300\nif (num1 <= num2) and (num1 <= num3):\n    smallest = num1\nelif (num2 <= num1) and (num2 <= num3):\n    smallest = num2\nelse:\n    smallest = num3\nprint(f'smallest:{smallest}')\n\n", "idx": 6126, "target": 0}
{"func": "# Write a program to accept a number and print inverted star pattern\n\nn=int(input(\"Enter number of rows: \"))\nfor i in range (n,0,-1):\n    print((n-i) * ' ' + i * '*')\n\t\n\t\n", "idx": 6127, "target": 0}
{"func": "#random choice \nfrom random import choice\n\na, b, c = float, int, str\nfor i in range(5):\n    j = choice([a,b,c])(i)\n    print(j, type(j))\n\n\n", "idx": 6128, "target": 0}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char in str1:\n  count = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 6129, "target": 0}
{"func": "# Write a python program to check and print if the password is valid or not not with given rules 1. Minimum 8 characters.2. The alphabets must be between [a-z] 3.  At least one alphabet should be of Upper Case [A-Z] 4.  At least 1 number or digit between [0-9]. 5. At least 1 character from [ _ or @ or $ ].\n\nimport re \npassword = \"R@m@_f0rtu9e$\"\nflag = 0\nwhile True:   \n    if (len(password)<8): \n        flag = -1\n        break\n    elif not re.search(\"[a-z]\", password): \n        flag = -1\n        break\n    elif not re.search(\"[A-Z]\", password): \n        flag = -1\n        break\n    elif not re.search(\"[0-9]\", password): \n        flag = -1\n        break\n    elif not re.search(\"[_@$]\", password): \n        flag = -1\n        break\n    elif re.search(\"\\s\", password): \n        flag = -1\n        break\n    else: \n        flag = 0\n        print(\"Valid Password\") \n        break\n  \nif flag ==-1: \n    print(\"Not a Valid Password\") \n\t\n\t\n\t\n", "idx": 6130, "target": 0}
{"func": "# write a python function to return random selection from itertools.product(*args, **kwds)\ndef random_product(*args, repeat=1):\n    import random\n    pools = [tuple(pool) for pool in args] * repeat\n    return tuple(map(random.choice, pools))\n\n", "idx": 6131, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)\n\n", "idx": 6132, "target": 0}
{"func": "# write a python program to sort dictionary items\ndict1 = {'car': [7, 6, 3],  \n             'bike': [2, 10, 3],  \n             'truck': [19, 4]}\n\nprint(f\"The original dictionary is : {str(dict1)}\") \n\nres = dict() \nfor key in sorted(dict1): \n    res[key] = sorted(dict1[key])\n\nprint(f\"The sorted dictionary : {str(res)}\")\n\n", "idx": 6133, "target": 0}
{"func": "# Write a python program using a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = raw_input()\nnumbers = [x for x in values.split(\",\") if int(x)%2!=0]\nprint (\",\".join(numbers))\n\n\n", "idx": 6134, "target": 0}
{"func": "# Write a python function to Compute LCM of two input number\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\n   \n   \n\n", "idx": 6135, "target": 0}
{"func": "# importing the module\nimport re\n\n", "idx": 6136, "target": 0}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,height:float)->float:\n    if base and height:\n        return (base*height)/2\n    else:\n        return None\n\n", "idx": 6137, "target": 0}
{"func": "# Write a function that returns uppercase string\ndef str_uppercase(s:str):\n    return s.upper()\n\n", "idx": 6138, "target": 0}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 6139, "target": 0}
{"func": "#26 write a program to check if a string contains any special character \n  \nimport re \ndef run(string): \n  \n    regex = re.compile('[@_!#$%^&*()<>?/\\|}{~:]') \n      \n    if(regex.search(string) == None): \n        print(\"String is accepted\") \n          \n    else: \n        print(\"String is not accepted.\") \n      \n  \nif __name__ == '__main__' : \n      \n    # Enter the string \n    string = \"Hello@World\"\n      \n    # calling run function  \n    run(string) \n    \n", "idx": 6140, "target": 0}
{"func": "#80 write a Python program to print the roots of a quadratic equation\nimport math\na = float(input(\"Enter the first coefficient: \"))\nb = float(input(\"Enter the second coefficient: \"))\nc = float(input(\"Enter the third coefficient: \"))\nif (a!=0.0):\n    d = (bb)-(4ac) \n    if (d==0.0):\n        print(\"The roots are real and equal.\") \n        r = -b/(2a)\n        print(\"The roots are \", r,\"and\", r)\n    elif(d>0.0):\n        print(\"The roots are real and distinct.\")\n        r1 = (-b+(math.sqrt(d)))/(2a) \n        r2 = (-b-(math.sqrt(d)))/(2a)\n        print(\"The root1 is: \", r1)\n        print(\"The root2 is: \", r2)\n    else:\n        print(\"The roots are imaginary.\")\n        rp = -b/(2a) ip = math.sqrt(-d)/(2a)\n        print(\"The root1 is: \", rp, \"+ i\",ip)\n        print(\"The root2 is: \", rp, \"- i\",ip)\nelse:\n    print(\"Not a quadratic equation.\"\n\n", "idx": 6141, "target": 0}
{"func": "# write a python program to print a matrix as output\nmatrix = [[1, 2, 3, 4],\n       [4, 5, 6, 7],\n       [8, 9, 10, 11],\n       [12, 13, 14, 15]]\n \nfor i in range(0, 4):\n    print(matrix[i][1], end = \" \")\n\n", "idx": 6142, "target": 0}
{"func": "# Write a Python Program to Map Two Lists into a Dictionary\n\ndef map_dict(keys, values):\n    return dict(zip(keys,values))\n\n", "idx": 6143, "target": 0}
{"func": "# Write a python function to capitalize first and last letters of each word of a given string\ncapitalize_both_ends = lambda x: x[0].upper() + x[1:-1] + x[-1].upper()\n\ndef capitalize_first_and_last(string):\n    string = string.strip().split()\n    new_string = [capitalize_both_ends(word) for word in string]\n    return new_string\n        \n", "idx": 6144, "target": 0}
{"func": "# write a python function that returns the input list sorted in ascending order\ndef sort_ascending(list_to_be_sorted):\n    return sorted(list_to_be_sorted)\n\n\n", "idx": 6145, "target": 0}
{"func": "# Only the first clause of generators is evaluated immediately\ngen_fails = (i for i in 1/0)\n\n", "idx": 6146, "target": 0}
{"func": "# Write a python function to concat the input strings and there's also a choice for seperator\n\ndef con_str(*args, sep = ' '):\n  return sep.join(args)\n\n", "idx": 6147, "target": 0}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 6148, "target": 0}
{"func": "#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.\ndef collatz_sequence(x):\n    num_seq = [x]\n    if x < 1:\n       return []\n    while x > 1:\n       if x % 2 == 0:\n         x = x / 2\n       else:\n         x = 3 * x + 1\n       num_seq.append(x)    \n    return num_seq\n\n", "idx": 6149, "target": 0}
{"func": "# write a Python function to convert binary to Gray codeword\ndef binary_to_gray(n):\n    n = int(n, 2)\n    n ^= (n >> 1)\n    return bin(n)[2:]\n \n \n \n", "idx": 6150, "target": 0}
{"func": "# write a python function to flatten one level of nesting\ndef flatten(list_of_lists):\n    from itertools import chain\n    return chain.from_iterable(list_of_lists)\n\n", "idx": 6151, "target": 0}
{"func": "# Given a decimal number N, write python functions check and print if a number has consecutive zeroes or not after converting the number to its K-based notation.\n\ndef hasConsecutiveZeroes(N, K): \n    z = toK(N, K) \n    if (check(z)): \n        print(\"Yes\") \n    else: \n        print(\"No\") \n  \ndef toK(N, K): \n  \n    w = 1\n    s = 0\n    while (N != 0): \n        r = N % K \n        N = N//K \n        s = r * w + s \n        w *= 10\n    return s \n  \ndef check(N): \n\n    fl = False\n    while (N != 0): \n        r = N % 10\n        N = N//10\n  \n        if (fl == True and r == 0): \n            return False\n        if (r > 0): \n            fl = False\n            continue\n        fl = True\n    return True\n\t\n\t\n", "idx": 6152, "target": 0}
{"func": "#4. write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n\n", "idx": 6153, "target": 0}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    return (Lsecond + Lfirst) \n\n", "idx": 6154, "target": 0}
{"func": "# using len() + any() \nres = any(len(ele) == 0 for ele in list1) \n  \n", "idx": 6155, "target": 0}
{"func": "# write a python lambda function to add three numbers\n x = lambda a, b, c : a + b + c\n print(x(5, 6, 2))\n \n", "idx": 6156, "target": 0}
{"func": "# Write a python program that accepts a sentence and calculate the number of letters and digits.\ns = raw_input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\nif c.isdigit():\nd[\"DIGITS\"]+=1\nelif c.isalpha():\nd[\"LETTERS\"]+=1\nelse:\npass\nprint (\"LETTERS\", d[\"LETTERS\"])\nprint (\"DIGITS\", d[\"DIGITS\"])\n\n", "idx": 6157, "target": 0}
{"func": "# Write a function to calculate the moment of inertia of a sphere of mass M and radius R\ndef cal_mi_sphere(mass:float,radius:float)->float:\n    return (7/5)*mass*(radius**2)\n\n\n", "idx": 6158, "target": 0}
{"func": "# Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = input()\nnumbers = [x for x in values.split(\",\") if int(x)%2!=0]\nprint(\",\".join(numbers))\n\n\n", "idx": 6159, "target": 0}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn=int(raw_input())\nd=dict()\nfor i in range(1,n+1):\n    d[i]=i*i\nprint d\n\n", "idx": 6160, "target": 0}
{"func": "# 13  write a function to calculate the mean of an array\n\n\ndef calc_mean(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum / len(arr)\n\n\n", "idx": 6161, "target": 0}
{"func": "# Write a Python function to Find the Sum of Cosine Series\n\ndef cosine(x,n):\n    cosx = 1\n    sign = -1\n    for i in range(2, n, 2):\n        pi=22/7\n        y=x*(pi/180)\n        cosx = cosx + (sign*(y**i))/math.factorial(i)\n        sign = -sign\n    return cosx\n\n", "idx": 6162, "target": 0}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [ele for ele in test_list if ele.strip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 6163, "target": 0}
{"func": "#python program to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (h))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end= \\' \\')\n\n", "idx": 6164, "target": 0}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n", "idx": 6165, "target": 0}
{"func": "# Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.\ninput_str = input()\ndimensions=[int(x) for x in input_str.split(',')]\nrowNum=dimensions[0]\ncolNum=dimensions[1]\nmultilist = [[0 for col in range(colNum)] for row in range(rowNum)]\n\nfor row in range(rowNum):\n    for col in range(colNum):\n        multilist[row][col]= row*col\n\nprint(multilist)\n\n", "idx": 6166, "target": 0}
{"func": "# breakdown the string into a list of words\nwords = [word.lower() for word in my_str.split()]\n\n", "idx": 6167, "target": 0}
{"func": "#53 write a program to find Armstrong number in an interval\n\nlower = int(input(\"Enter lower range: \"))  \nupper = int(input(\"Enter upper range: \"))  \n  \nfor num in range(lower,upper + 1):  \n   sum = 0  \n   temp = num  \n   while temp > 0:  \n       digit = temp % 10  \n       sum += digit ** 3  \n       temp //= 10  \n       if num == sum:  \n            print(num)  \n            \n", "idx": 6168, "target": 0}
{"func": "# write a python function to Check if a given string is binary string or not\ndef check(string) :  \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return True \n    else : \n        return False\n\t\t\n\t\t\n\t\t\n", "idx": 6169, "target": 0}
{"func": "# write a function that acts like a ReLU function for a 1D array\ndef relu_list(input_list:list)->list:\n    return [(lambda x: x if x >= 0 else 0)(x) for x in input_list]\n\n", "idx": 6170, "target": 0}
{"func": "# 25 write a funtion to print all the files in the current directory\n\nimport os\n\n\ndef list_files():\n    return os.listdir()\n\n\n", "idx": 6171, "target": 0}
{"func": "# Write a python function to find out the occurence of \"i\" element before first \"j\" in the list\n\ndef firstOccurence(arr, i,j):\n  res = 0\n  for k in arr:         \n      if k == j: \n          break\n      if k == i: \n          res += 1\n  return res\n\n\n", "idx": 6172, "target": 0}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    pi = 3.14\n    return 2*pi*(radius**2)\n\n", "idx": 6173, "target": 0}
{"func": "# write  a python program to print element with maximum values from a list\n\nlist1 = [\"gfg\", \"best\", \"for\", \"geeks\"] \n   \ns=[]\nfor i in list1:\n    count=0  \n    for j in i:\n        if j in ('a','e','i','o','u'):\n           count=count+1\n    s.append(count)\nprint(s)    \nif  count== max(s):      \n    print(list1[s.index(max(s))])\n\n", "idx": 6174, "target": 0}
{"func": "#python code to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    test_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx in range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key in test_list2[idx]:\n\n            if key not in id_keys:\n                test_list1[idx][key] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 6175, "target": 0}
{"func": "# write a python program to drop microseconds from datetime.\n\nimport datetime\ndt = datetime.datetime.today().replace(microsecond=0)\ndt\n\n", "idx": 6176, "target": 0}
{"func": "# By using list comprehension, write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]\nprint array\n\n", "idx": 6177, "target": 0}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sub in test_list if K in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 6178, "target": 0}
{"func": "# Generate a random n-dimensional array of float numbers\nimport numpy\nrandom_float_array = numpy.random.rand(2, 2)\nprint(\"2 X 2 random float array in [0.0, 1.0] \\n\", random_float_array,\"\\n\")\n\n", "idx": 6179, "target": 0}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\ndef filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )\n\n\n", "idx": 6180, "target": 0}
{"func": "#30 get rid of all null values in array python\nmylist = [1, 2, 3, '', 4]\nmylist = [i for i in mylist if i]\n\n", "idx": 6181, "target": 0}
{"func": "# write a python function to remove duplicate items from the list\ndef remove_duplicatesinlist(lst):\n    return len(lst) == len(set(lst))\n\n", "idx": 6182, "target": 0}
{"func": "# Write a function to return the perimeter of a triangle\ndef cal_perimeter_triangle(s1,s2,s3):\n    return s1+s2+s3\n\n", "idx": 6183, "target": 0}
{"func": "# write a python function to check if a string is a palindrome or not\ndef isPalindrome(s):\n    return s == s[::-1]\n\n", "idx": 6184, "target": 0}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = None\nif date_1 > date_2:\n    delta = date_1 - date_2\nelse:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.days, \"days\")\n\n", "idx": 6185, "target": 0}
{"func": "# initializing K  \nK = 2\nd={}\nfor i in test_list:\n    d.update({i[K-1]:[i]})\nprint(d) \n\n\n", "idx": 6186, "target": 0}
{"func": "# write Python code t get difference of two lists Using set()\ndef Diff(li1, li2):\n\treturn (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n\nli1 = [10, 15, 20, 25, 30, 35, 40]\nli2 = [25, 40, 35]\nprint(Diff(li1, li2))\n\n", "idx": 6187, "target": 0}
{"func": "# write a python function to sort the dictionary by values\n\ndef sort_dict_by_value(d, reverse = False):\n  return dict(sorted(d.items(), key = lambda x: x[1], reverse = reverse))\n\n", "idx": 6188, "target": 0}
{"func": "# Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.\ndef sum_of_ints(s1,s2):\n    print(int(s1)+int(s2))\n\n", "idx": 6189, "target": 0}
{"func": "# 89 Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads, numlegs):\n    ns = \"No solutions!\"\n    for i in range(numheads + 1):\n        j = numheads - i\n        if 2 * i + 4 * j == numlegs:\n            return i, j\n    return ns, ns\n\n\n", "idx": 6190, "target": 0}
{"func": "# Write a python function to return zodiac sign given day and month of date of birth\n\ndef zodiac_sign(day, month): \n\n    if month == 'december': \n        astro_sign = 'Sagittarius' if (day < 22) else 'capricorn'\n          \n    elif month == 'january': \n        astro_sign = 'Capricorn' if (day < 20) else 'aquarius'\n          \n    elif month == 'february': \n        astro_sign = 'Aquarius' if (day < 19) else 'pisces'\n          \n    elif month == 'march': \n        astro_sign = 'Pisces' if (day < 21) else 'aries'\n          \n    elif month == 'april': \n        astro_sign = 'Aries' if (day < 20) else 'taurus'\n          \n    elif month == 'may': \n        astro_sign = 'Taurus' if (day < 21) else 'gemini'\n          \n    elif month == 'june': \n        astro_sign = 'Gemini' if (day < 21) else 'cancer'\n          \n    elif month == 'july': \n        astro_sign = 'Cancer' if (day < 23) else 'leo'\n          \n    elif month == 'august': \n        astro_sign = 'Leo' if (day < 23) else 'virgo'\n          \n    elif month == 'september': \n        astro_sign = 'Virgo' if (day < 23) else 'libra'\n          \n    elif month == 'october': \n        astro_sign = 'Libra' if (day < 23) else 'scorpio'\n          \n    elif month == 'november': \n        astro_sign = 'scorpio' if (day < 22) else 'sagittarius'\n          \n    print(astro_sign) \n\t\n\t\n", "idx": 6191, "target": 0}
{"func": "# Write a function that returns the exponential value of the input\ndef exp(x) -> float:\n    import math\n    return math.exp(x)\n\n", "idx": 6192, "target": 0}
{"func": "# Write a Python Program to Remove the Given Key from a Dictionary\n\ndef remove_item_dict(d, key):\n    if key in d: \n        del d[key]\n    else:\n        print(\"Key not found!\")\n        exit(0)\n\n", "idx": 6193, "target": 0}
{"func": "# 38 write a python program which takes in a dictionary with unique values and converts keys into values and vice versa\n\n\ndef flip_dict(d):\n    tmp_dict = {}\n    for pair in d.items():\n        tmp_dict[pair[1]] = pair[0]\n    return tmp_dict\n\n\nprint(flip_dict({\"a\": 10, \"b\": 20, \"c\": 15}))\n\n\n", "idx": 6194, "target": 0}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\ndef list_to_dict(list1, list2):\n  return dict(zip(list1, list2))\n\n", "idx": 6195, "target": 0}
{"func": "#  Given a Python list. Turn every item of a list into its square\naList = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x for x in aList]\nprint(aList)\n\n", "idx": 6196, "target": 0}
{"func": "#83 Write a Python program to move all spaces to the front of a given string in single traversal.\ndef moveSpaces(str1): \n    no_spaces = [char for char in str1 if char!=' ']   \n    space= len(str1) - len(no_spaces)\n    result = ' '*space    \n    return result + ''.join(no_spaces)\n\n", "idx": 6197, "target": 0}
{"func": "# 10. python function to find the area of a circle\ndef circle_area(r):\n    return 22/7 * r**2\n\n", "idx": 6198, "target": 0}
{"func": "# Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. \nfreq = {}  \nline = raw_input()\nfor word in line.split():\n    freq[word] = freq.get(word,0)+1\nwords = freq.keys()\nwords.sort()\nfor w in words:\n    print \"%s:%d\" % (w,freq[w])\n\n", "idx": 6199, "target": 0}
{"func": "#32 function to remove values from dictionary\ndef remove_dic_value(a: dict, key)\n    a.pop(key)\n    return a\n\n\n", "idx": 6200, "target": 0}
{"func": "#Write a function to find time for a given angle.\ndef calcAngle(hh, mm):\n    hour_angle = 0.5 * (hh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - angle, angle)\n    return angle\n\n\n", "idx": 6201, "target": 0}
{"func": "# write a python program to find string in a list and print it\nlist1 = [1, 2.0, 'have', 'a', 'nice', 'day'] \n\ns = 'nice'\nfor i in list1:\n    if i == s:\n       print(f'{s} is  present in the list')\n\n\n", "idx": 6202, "target": 0}
{"func": "# write a python function to collect data into fixed-length chunks or blocks\ndef grouper(iterable, n, fillvalue=None):\n    from itertools import zip_longest\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return zip_longest(*args, fillvalue=fillvalue)\n\n", "idx": 6203, "target": 0}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\ndef cal_area_trapezium(a,b,h):\n    return h*(a+b)/2\n\n", "idx": 6204, "target": 0}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  return res\n\n", "idx": 6205, "target": 0}
{"func": "# printing original tuples list \nprint(\"The original list : \" + str(test_list)) \ns=''\nfor i in test_list:\n    for j in i:\n        s+=' '+j+' '\nprint(f' string after flattening is {s}')\n\n", "idx": 6206, "target": 0}
{"func": "#100 Write a Python class to convert an integer to a roman numeral.\nclass Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n", "idx": 6207, "target": 0}
{"func": "# 26. Python Program to find Largest and Smallest Number in a List \n\nNumList = []\nNumber = int(input(\"Please enter the Total Number of List Elements: \"))\nfor i in range(1, Number + 1):\n    value = int(input(\"Please enter the Value of %d Element : \" %i))\n    NumList.append(value)\n\nsmallest = largest = NumList[0]\n\nfor j in range(1, Number):\n    if(smallest > NumList[j]):\n        smallest = NumList[j]\n        min_position = j\n    if(largest < NumList[j]):\n        largest = NumList[j]\n        max_position = j\n\nprint(\"The Smallest Element in this List is : \", smallest)\nprint(\"The Index position of Smallest Element in this List is : \", min_position)\nprint(\"The Largest Element in this List is : \", largest)\nprint(\"The Index position of Largest Element in this List is : \", max_position)\n\n", "idx": 6208, "target": 0}
{"func": "# Write a function to print a string by repeating it n times\n\ndef print_repeatnstring(text:str, n:int)-> str:\n    return text*n\n\n", "idx": 6209, "target": 0}
{"func": "# Write a Python program to check if all dictionaries in a list are empty or not.\nmy_list = [{},{},{}]\nmy_list1 = [{1,2},{},{}]\nprint(all(not d for d in my_list))\nprint(all(not d for d in my_list1))\n\n", "idx": 6210, "target": 0}
{"func": "# Write a python function to convert a list of strings to equivalent character array using itertools\nimport itertools\ndef extract_characters(input_list):\n    return [ char_val for char_val in itertools.chain.from_iterable(input_list) ]\n\n", "idx": 6211, "target": 0}
{"func": "# Write a python function to find minimum edit distance between words given\n\ndef minDistance(word1, word2):\n    m = len(word1)\n    n = len(word2)\n\n    if m*n == 0:\n        return m + n\n\n    d = [ [0] * (n + 1) for _ in range(m+1)]\n    for i in range(m+1):\n        d[i][0] = i\n\n    for j in range(n+1):\n            d[0][j] = j\n\n    for i in range(m+1):\n        for j in range(n+1):\n            left = d[i-1][j] + 1\n            down = d[i][j-1] + 1\n            left_down = d[i-1][j-1]\n            if word1[i-1] != word2[j-1]:\n                left_down += 1\n            d[i][j] = min(left, down, left_down)\n\n    return d[m][n]\n\t\n\t\n", "idx": 6212, "target": 0}
{"func": "# Write a function that returns a list sorted ascending\ndef ascending_sort(l:list):\n    sorted(l, reverse=False)\n\n", "idx": 6213, "target": 0}
{"func": "# use built-in function filter to filter empty value\nnew_str_list = list(filter(None, str_list))\n\nprint(\"After removing empty strings\")\nprint(new_str_list)\n\n\n", "idx": 6214, "target": 0}
{"func": "# Write a python function that Capitalize the First Letter of Every Word in the File\n\ndef capitalize(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            l=line.title()\n            print(l)\n\n", "idx": 6215, "target": 0}
{"func": "#65 function to attach counter to function\ndef attach_counter(fn: \"Function\"):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        return fn(*args, **kwargs)\n    return inner\n\n\n\n", "idx": 6216, "target": 0}
{"func": "# equality operator works this way\nprint('256 is 257-1', 256 is 257-1)\nprint('257 is 258-1', 257 is 258 - 1)\nprint('-5 is -6+1', -5 is -6+1)\nprint('-7 is -6-1', -7 is -6-1)\n\n", "idx": 6217, "target": 0}
{"func": "# write a python function to create two threads and start and join the two threads \nimport threading \n  \ndef print_cube(num): \n    print(\"Cube: {}\".format(num * num * num)) \n    \nt1 = threading.Thread(target=print_cube, args=(10,)) \nt2 = threading.Thread(target=print_cube, args=(10,)) \n\nt1.start() \n\nt2.start() \n\nt1.join()\nt2.join()\n\n\n", "idx": 6218, "target": 0}
{"func": "# write a python function to accept user input to continue\ndef get_userinput():\n    while(1):\n        do_continue = raw_input('Do you want to continue(y/n)?')\n        if do_continue == 'y' or do_continue == 'n':\n            return do_continue\n\n\n", "idx": 6219, "target": 0}
{"func": "# write a python function to check if a given string is a palindrome\ndef is_palindrome(string):\n   return string == string[::-1]\n\n\n", "idx": 6220, "target": 0}
{"func": "# write Python Program to Count the Number of Words in a Text File\nfname = input(\"Enter file name: \")\nnum_words = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n\n\n", "idx": 6221, "target": 0}
{"func": "# write a function to execute a string containing Python code\ndef execute_python_code(a_string):\n    return exec(a_string)\n\n", "idx": 6222, "target": 0}
{"func": "# Write a Python function that accepts a string and calculate the number of upper case letters and lower case letters\ndef string_test(s):\nd={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\nfor c in s:\nif c.isupper():\nd[\"UPPER_CASE\"]+=1\nelif c.islower():\nd[\"LOWER_CASE\"]+=1\nelse:\npass\nprint (\"Original String : \", s)\nprint (\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\nprint (\"No. of Lower case Characters : \", d[\"LOWER_CASE\"])\n\nstring_test('The quick Brow Fox')\n\n", "idx": 6223, "target": 0}
{"func": "# Dynamic binding and typos in variable names\nprint('first list:')\nfor i in range(3):\n    print(i)\n    \nprint('\\nsecond list:')\nfor j in range(3):\n    print(i) # I (intentionally) made typo here!\n\n", "idx": 6224, "target": 0}
{"func": "# Write a function to find sum of nested list using Recursion\ntotal = 0\ndef sum_nestedlist(l):\n    global total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 6225, "target": 0}
{"func": "# write a python function to check if all elements in a list are equal.\n\ndef all_equal(lst):\n  return len(set(lst)) == 1\n\n", "idx": 6226, "target": 0}
{"func": "#20 how to check if a list is a subset of another list\nif(all(x in test_list for x in sub_list)): \n    flag = True\n\n", "idx": 6227, "target": 0}
{"func": "# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n\n\n\n", "idx": 6228, "target": 0}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    words = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(words))  \n  \n    return reverse_sentence \n\n", "idx": 6229, "target": 0}
{"func": "# write a program to find and print the smallest among three numbers\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 <= num2) and (num1 <= num3):\n   smallest = num1\nelif (num2 <= num1) and (num2 <= num3):\n   smallest = num2\nelse:\n   smallest = num3\nprint(f'smallest:{smallest}')\n\n\n", "idx": 6230, "target": 0}
{"func": "# use anonymous function\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 6231, "target": 0}
{"func": "#55 Write a Python function to check if a number is a power of a given base.\nimport math\n\ndef isPower (n, base):\n    if base == 1 and n != 1:\n        return False\n    if base == 1 and n == 1:\n        return True\n    if base == 0 and n != 1:\n        return False\n    power = int (math.log(n, base) + 0.5)\n    return base ** power == n\n\n", "idx": 6232, "target": 0}
{"func": "# Write a function that returns length of the list\n\ndef list_length(l):\n    return len(l)\n\n", "idx": 6233, "target": 0}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in zip(*test_dict.values()):\n  res = 1 \n  for ele in x: \n      res *= ele\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 6234, "target": 0}
{"func": "#35 write a program to find the most frequent element in a list \n  \ndef most_frequent(List): \n    counter = 0\n    num = List[0] \n      \n    for i in List: \n        curr_frequency = List.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num \n  \nList = [2, 1, 2, 2, 1, 3] \nprint(most_frequent(List)) \n\n", "idx": 6235, "target": 0}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\ndef square_list_elements(list_to_be_squared):\n    return list( map(lambda x: x**2, list_to_be_squared) )\n\n\n", "idx": 6236, "target": 0}
{"func": "#Write a function to get list of profanity words from Google profanity URL\ndef profanitytextfile():\n    url = \"https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt\"\n    html = urlopen(url).read()\n    soup = BeautifulSoup(html, features=\"html.parser\")\n\n    textlist = []\n    table = soup.find('table')\n    trs = table.find_all('tr')\n    for tr in trs:\n        tds = tr.find_all('td')\n        for td in tds:\n            textlist.append(td.text)\n    return textlist\n\n", "idx": 6237, "target": 0}
{"func": "# write a python print to return the first n fibonacci numbers\n\ndef fibonacci(n):\n    a, b = 0, 1\n    print(a)\n    print(b)\n    for i in range(n - 2):\n        print(a + b)\n        a, b = b, a + b\n\n", "idx": 6238, "target": 0}
{"func": "# Write a function to count the number of carry operations for each of a set of addition problems\ndef carry_number(x, y):\n  ctr = 0\n  if(x == 0 and y == 0):\n    return 0\n  z = 0  \n  for i in reversed(range(10)):\n      z = x%10 + y%10 + z\n      if z > 9:\n        z = 1\n      else:\n        z = 0\n      ctr += z\n      x //= 10\n      y //= 10\n  if ctr == 0:\n    return \"No carry operation.\"\n  elif ctr == 1:\n    return ctr\n  else:\n    return ctr\n\n", "idx": 6239, "target": 0}
{"func": "#51 function to print the source code of a function\ndef print_so(f: \"Function name/class name/module\"):\n    from inspect import getsource\n    print(getsource(f))\n\n\n", "idx": 6240, "target": 0}
{"func": "# write a Python program to demonstrate working of Convert List to Single valued Lists in Tuple \n\ntest_list = [6, 8, 4, 9, 10, 2] \n\nprint(f\"The original list is : {test_list}\") \n\nres = tuple([ele] for ele in test_list)  \n\nprint(f\"Tuple after conversion : {res}\") \n\n\n", "idx": 6241, "target": 0}
{"func": "# write a Python program to flatten a shallow list\nimport itertools\noriginal_list = [[2,4,3],[1,5,6], [9], [7,9,0], [1,2,3,4]]\nnew_merged_list = list(itertools.chain(*original_list))\nprint(f'merged list/flatten:{new_merged_list}')\n\n", "idx": 6242, "target": 0}
{"func": "# write a python function to calcuate the easter date using Gauss's Algorithm\n\n def gaussEaster(Y):\n    A = Y % 19\n    B = Y % 4\n    C = Y % 7\n\n    P = int(Y / 100)\n    Q = int((13 + 8 * P) / 25)\n    M = (15 - Q + P - P // 4) % 30\n    N = (4 + P - P // 4) % 7\n    D = (19 * A + M) % 30\n    E = (2 * B + 4 * C + 6 * D + N) % 7\n    days = (22 + D + E)\n    if ((D == 29) and (E == 6)):\n        print(Y, \"-04-19\")\n        return\n    elif ((D == 28) and (E == 6)):\n        print(Y, \"-04-18\")\n        return\n\n    else:\n        if (days > 31):\n            print(Y, \"-04-\", (days - 31))\n            return\n\n        else:\n            print(Y, \"-03-\", days)\n            return\n\n #write a python function to print the pascal's triangle\n \n def printPascal(n):  \n  \n    for line in range(1, n + 1):  \n        C = 1; \n        for i in range(1, line + 1):   \n            print(C, end = \" \");  \n            C = int(C * (line - i) / i);  \n        print(\"\");\n\n #write a python function to print Hosoya's triangle of height 'n'\n\n def printHosoya(n): \n    dp = [[0 for i in range(n)]  \n             for i in range(n)] \n               \n    dp[0][0] = dp[1][0] = dp[1][1] = 1\n    for i in range(2, n): \n        for j in range(n):  \n            if (i > j): \n                dp[i][j] = (dp[i - 1][j] + \n                            dp[i - 2][j]) \n            else: \n                dp[i][j] = (dp[i - 1][j - 1] +\n                            dp[i - 2][j - 2]) \n    for i in range(n): \n        for j in range(i + 1): \n            print(dp[i][j], end = ' ') \n        print() \n  \n  #write a python function to print Floyd's triangle\n  \n  def loydTriangle(n):   \n    val = 1\n    for i in range(1, n + 1): \n  \n        for j in range(1, i + 1): \n            print(val, end = \" \") \n            val += 1       \n        print(\"\") \n        \n #write a python function to print reverese Floyd's triangle\n \n def printReverseFloyd(n): \n  \n    curr_val = int(n*(n + 1)/2) \n    for i in range(n + 1, 1, -1): \n        for j in range(i, 1, -1): \n            print(curr_val, end =\"  \") \n            curr_val -= 1       \n        print(\"\") \n        \n # write a python function to print fibonacci series in the reverse order\n  \n def reverseFibonacci(n): \n   \n    a = [0] * n  \n    a[0] = 0 \n    a[1] = 1   \n    for i in range(2, n):   \n        a[i] = a[i - 2] + a[i - 1]  \n    for i in range(n - 1, -1 , -1):    \n        print(a[i],end=\" \")  \n        \n # write a python function to print Leibniz Harmonic triangle\n \ndef LeibnizHarmonicTriangle(n): \n    C = [[0 for x in range(n + 1)]  \n            for y in range(n + 1)]; \n    for i in range(0, n + 1): \n        for j in range(0, min(i, n) + 1): \n            if (j == 0 or j == i): \n                C[i][j] = 1;  \n            else: \n                C[i][j] = (C[i - 1][j - 1] + \n                           C[i - 1][j]);  \n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(\"1/\", end = \"\"); \n            print(i * C[i - 1][j - 1],  \n                           end = \" \"); \n        print(); \n\n # write a python function to check whether the given series is in Arithematic progression\n \n def checkIsAP(arr, n): \n    if (n == 1): return True\n    arr.sort() \n    d = arr[1] - arr[0] \n    for i in range(2, n): \n        if (arr[i] - arr[i-1] != d): \n            return False\n  \n    return True\n \n  # write a python function to check whether the given series is in harmonic progression\n  \ndef is_geometric(li): \n    if len(li) <= 1: \n        return True\n    ratio = li[1]/float(li[0]) \n    for i in range(1, len(li)): \n        if li[i]/float(li[i-1]) != ratio:  \n            return False\n    return True\n\n  # write a python function to find the area of a circumscribed circle of an equilateral triangle\n  \n   def area_cicumscribed(a): \n    return (a * a * (3.14159265 / 3)) \n    \n  # write a python function to find the side of a octogon inscribed in a square\n  \n  def octaside(a): \n    if a < 0: \n        return -1\n    s = a / (1.414 + 1) \n    return s \n  \n # write a python program to find the area of enneagon\n  \n  length = 6\n  Nonagon_area = 6.1818 * (length ** 2)  \n  print(\"Area of regular Nonagon is = \", Nonagon_area) \n  \n # write a python function to find the day of the week given the date\n \n def dayofweek(d, m, y): \n    t = [ 0, 3, 2, 5, 0, 3, \n          5, 1, 4, 6, 2, 4 ] \n    y -= m < 3\n    return (( y + int(y / 4) - int(y / 100) \n             + int(y / 400) + t[m - 1] + d) % 7) \n  \n  # write a python function to calculate the MDAS factorial of a number\n  \n def MDAS_Factorial( N ):   \n    if N <= 2: \n        return N \n    if N <= 4: \n        return N + 3      \n    if (N - 4) % 4 == 0: \n        return N + 1\n    elif (N - 4) % 4 <= 2: \n         return N + 2\n    else: \n         return N - 1\n         \n # write a python function to find the nth pronic number\n \n def findRectNum(n): \n    return n*(n + 1) \n \n #write a python function to find the sum of N pronic numbers\n\n def calculateSum(N): \n  \n    return (N * (N - 1) // 2 + \n            N * (N - 1) * (2 * \n                 N - 1) // 6); \n  \n  #write a python function to find the sum of first N even numbers\n  \n  def evensum(n): \n    curr = 2\n    sum = 0\n    i = 1 \n    while i <= n: \n        sum += curr  \n        curr += 2\n        i = i + 1\n    return sum\n    \n # write a python function to check whether a number can be written as a sum of 3 primes (Goldbach Weak Coonjecture)\n \n def check(n): \n  if n % 2 == 1 and n > 5: \n    print('YES') \n  else: \n    print('NO') \n\n # write a python function to find the nth perrin number\n \n def per(n): \n  \n    if (n == 0): \n        return 3; \n    if (n == 1): \n        return 0; \n    if (n == 2): \n        return 2; \n    return per(n - 2) + per(n - 3); \n    \n # write a python function to find the betrothed numbers smaller than n\n  \ndef BetrothedNumbers(n) : \n      \n    for num1 in range (1,n) :  \n        sum1 = 1    \n        i = 2\n        while i * i <= num1 : \n            if (num1 % i == 0) : \n                sum1 = sum1 + i \n                if (i * i != num1) : \n                    sum1 += num1 / i \n            i =i + 1\n        if (sum1 > num1) : \n              \n            num2 = sum1 - 1\n            sum2 = 1\n            j = 2\n            while j * j <= num2 : \n                if (num2 % j == 0) : \n                    sum2 += j \n                    if (j * j != num2) : \n                        sum2 += num2 / j \n                j = j + 1\n            if (sum2 == num1+1) : \n                print ('('+str(num1)+', '+str(num2)+')') \n                \n # write a python function to implement linear extrapolation\n \n def extrapolate(d, x): \n    y = (d[0][1] + (x - d[0][0]) / \n        (d[1][0] - d[0][0]) * \n        (d[1][1] - d[0][1]));    \n    return y;  \n\n # write a python function to print the collatz sequence\n \n def printCollatz(n): \n    while n != 1: \n        print(n, end = ' ') \n        if n & 1: \n            n = 3 * n + 1\n        else: \n            n = n // 2  \n    print(n) \n    \n # write a python function to print the newman-conway sequence\n \n def sequence(n): \n    f = [0, 1, 1] \n    print(f[1], end=\" \"), \n    print(f[2], end=\" \"), \n    for i in range(3,n+1): \n        f.append( f[f[i - 1]] + f[i - f[i - 1]]) \n        print(f[i], end=\" \"), \n     \n #write a python function to find the nth term in a padovan's sequence\n\n", "idx": 6243, "target": 0}
{"func": "# Write a Python function to find the number of zeros at the end of a factorial of a given positive number.\ndef factendzero(n):\n  x = n // 5\n  y = x \n  while x > 0:\n    x /= 5\n    y += int(x)\n  return y\n\n\n", "idx": 6244, "target": 0}
{"func": "# Write a program that calculates and prints the value according to the given formula: Q = Square root of [(2 * C * D)/H]\nimport math\nc=50\nh=30\nvalue = []\nitems=[x for x in raw_input().split(',')]\nfor d in items:\n    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))\nprint ','.join(value)\n\n", "idx": 6245, "target": 0}
{"func": "# Define a class, which have a class parameter and have a same instance parameter.\nclass Person:    \n    name = \"Person\"\n    def __init__(self, name = None):\n        self.name = name\njeffrey = Person(\"Jeffrey\")\nprint \"%s name is %s\" % (Person.name, jeffrey.name)\nnico = Person()\nnico.name = \"Nico\"\nprint \"%s name is %s\" % (Person.name, nico.name)\n\n", "idx": 6246, "target": 0}
{"func": "# write a python function to map a numeric lookup using bisect\ndef grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n    from bisect import bisect\n    i = bisect(breakpoints, score)\n    return grades[i]\n\n", "idx": 6247, "target": 0}
{"func": "# Please generate a random float where the value is between 10 and 100 using Python math module.\nimport random\nprint(random.random()*100)\n\n", "idx": 6248, "target": 0}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\ndef temp_converter(temp,temp_given_in = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        return (temp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 6249, "target": 0}
{"func": "# 56 write a python function to implement the sigmoid activation function\n\nimport math\n\n\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\n\n\n", "idx": 6250, "target": 0}
{"func": "# Write a Python program to get the last day of a specified year and month.\nimport calendar\nyear = 2020\nmonth = 12 \nprint(calendar.monthrange(year, month)[1])\n\n", "idx": 6251, "target": 0}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datetime \nstr1 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 6252, "target": 0}
{"func": "# Write a lambda function to that gives the number of digits in a number\n\ndig_cnt = lambda a: len(str(a))\n\n", "idx": 6253, "target": 0}
{"func": "# write a  program to get th ematched elemnets from two list \na = [1, 2, 3, 4, 5]\nb = [9, 8, 7, 6, 5]\n[i for i, j in zip(a, b) if i == j]\n\n\n", "idx": 6254, "target": 0}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    pi=3.14\n    return pi*(radius**2)*height\n\n", "idx": 6255, "target": 0}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/pressure\n\n", "idx": 6256, "target": 0}
{"func": "#73 function to store the data of IPL match in Namedtuple\ndef store_ipl_date(tuple1):\n    from collections import namedtuple\n    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')\n    return IplData(*tuple1)\n\n\n", "idx": 6257, "target": 0}
{"func": "# write a python function to calculate simple Interest\ndef simple_interest(p,t,r): \n   \n    si = (p * t * r)/100\n    return si \n\n", "idx": 6258, "target": 0}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res += ele \n  \nres += dig \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 6259, "target": 0}
{"func": "# 86 write a program which accepts a string and counts the number of words in it\ndef num_of_words(st):\n    return len(st.split())\n\n\n", "idx": 6260, "target": 0}
{"func": "# write Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using dictionary comprehension + enumerate() \n\ntest_list = [{\"Gfg\" : 3, 4 : 9}, {\"is\": 8, \"Good\" : 2}, {\"Best\": 10, \"CS\" : 1}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = {idx : val for idx, val in enumerate(test_list)} \nprint(\"The constructed dictionary : \" + str(res)) \n\n", "idx": 6261, "target": 0}
{"func": "# write a python program to get positive elements from given list of lists\nInput = [[10, -11, 222], [42, -222, -412, 99, -87]] \ntemp = map(lambda elem: filter(lambda a: a>0, elem), Input) \nOutput = [[a for a in elem if a>0] for elem in temp] \n\n", "idx": 6262, "target": 0}
{"func": "#  88 write a program which prints all permutations of [1,2,3]\nimport itertools\n\nprint(list(itertools.permutations([1, 2, 3])))\n\n", "idx": 6263, "target": 0}
{"func": "# Write a python Class to print All Possible Subsets from a Set of Distinct Integers\n\nclass sub:  \n    def f1(self, s1):  \n        return self.f2([], sorted(s1))  \n \n    def f2(self, curr, s1):  \n        if s1:  \n            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  \n        return [curr]  \na=[2, 3, 5, 6, 4, 5]\n\nprint(\"Subsets: \")\nprint(sub().f1(a))\n\n", "idx": 6264, "target": 0}
{"func": "# write a python program to explain the generator\ndef f11(x):\n    yield x+1\ng=f11(8)\nprint(next(g))\n\n", "idx": 6265, "target": 0}
{"func": "# write a function to find length of list\ndef get_list_length(l):\n    return len(l)\n\n\n", "idx": 6266, "target": 0}
{"func": "#95 Write a Python function to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found' and print the output.\ndef find_Index(str1, pos):\n    if len(pos) > len(str1):\n        return 'Not found'\n\n    for i in range(len(str1)):\n\n        for j in range(len(pos)):\n\n            if str1[i + j] == pos[j] and j == len(pos) - 1:\n                return i\n                \n            elif str1[i + j] != pos[j]:\n                break\n\n    return 'Not found\n\n", "idx": 6267, "target": 0}
{"func": "# Write a function that returns uppercase string\ndef str_uppercase(s:str):\n    return s.upper()\n\n", "idx": 6268, "target": 0}
{"func": "# Write a function to create all possible permutations from a given collection of distinct numbers\ndef permute(nums):\n  result_perms = [[]]\n  for n in nums:\n    new_perms = []\n    for perm in result_perms:\n      for i in range(len(perm)+1):\n        new_perms.append(perm[:i] + [n] + perm[i:])\n        result_perms = new_perms\n  return result_perms\n\n", "idx": 6269, "target": 0}
{"func": "# write a python function to return first n items of the iterable as a list\ndef take(n, iterable):    \n    import itertools\n    return list(itertools.islice(iterable, n))\n\n", "idx": 6270, "target": 0}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 6271, "target": 0}
{"func": "# Write a python program to Implement Quicksort and print the sorted list for the below list\n\ndef quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n \n \ndef partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    j = end - 1\n \n    while True:\n        while (i <= j and alist[i] <= pivot):\n            i = i + 1\n        while (i <= j and alist[j] >= pivot):\n            j = j - 1\n \n        if i <= j:\n            alist[i], alist[j] = alist[j], alist[i]\n        else:\n            alist[start], alist[j] = alist[j], alist[start]\n            return j\n \n \nalist = [2, 3, 5, 6, 4, 5]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 6272, "target": 0}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included). The numbers obtained should be printed in a comma-separated sequence on a single line.\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\nprint ','.join(l)\n\n", "idx": 6273, "target": 0}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    pi = 3.14\n    return 2*pi*(radius**2)\n\n", "idx": 6274, "target": 0}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in a.items():\n    print(k, v)\n\n\n", "idx": 6275, "target": 0}
{"func": "#54 write a  program to find the sum of natural numbers\n\nnum = int(input(\"Enter a number: \"))  \n  \nif num < 0:  \n   print(\"Enter a positive number\")  \nelse:  \n   sum = 0  \n   # use while loop to iterate un till zero  \n   while(num > 0):  \n       sum += num  \n       num -= 1  \n   print(\"The sum is\",sum)  \n\n", "idx": 6276, "target": 0}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\nreturn [num if num < 0 else -num for num in nums]\n\n\n", "idx": 6277, "target": 0}
{"func": "# Create a Generator\ndef generator(n=100000):\n    my_gen = (i for i in range(n) if i % 5 == 0)\n    return my_gen\n\n", "idx": 6278, "target": 0}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   while count < nterms:\n       #print(n1)\n       fab_list.append(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n\nfn = lambda x: \"FIBONACCI\" if x in fab_list else \"NOT_FIBONACCI\"\n\nprint(\"Given number is\",fn(20))\n\n", "idx": 6279, "target": 0}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str1) - N + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.append(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 6280, "target": 0}
{"func": "# Write a Python function that takes two lists and returns True if they have at least one common member\ndef common_data(list1, list2):\nresult = False\nfor x in list1:\nfor y in list2:\nif x == y:\nresult = True\nreturn result\nprint(common_data([1,2,3,4,5], [5,6,7,8,9]))\n\n", "idx": 6281, "target": 0}
{"func": "# write a python function to compute gcd\ndef compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 6282, "target": 0}
{"func": "# write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\nimport zlib\ns = 'hello world!hello world!hello world!hello world!'\nt = zlib.compress(s)\nprint t\nprint zlib.decompress(t)\n\n", "idx": 6283, "target": 0}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nfor key, val in key_val_map.items():\n  if len(val) > len(key):\n    print(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 6284, "target": 0}
{"func": "# write a python function to get all possible size replacement combinations of the string in lexicographic sorted order.\ndef get_ordered_combinations_with_replacement(string, k):\n    [print(''.join(x)) for x in combinations_with_replacement(sorted(string), int(k))]\n\n\n\n", "idx": 6285, "target": 0}
{"func": "# Write a function that sorts list of numbers and returns top element\n\ndef biggest_no(l:list)->int:\n    sorted(l)\n\n", "idx": 6286, "target": 0}
{"func": "#32 print current version of python\nimport sys\nprint(sys.version)\n\n", "idx": 6287, "target": 0}
{"func": "# Calculate the sum of three given numbers, if the values are equal then return thrice of their sum\ndef sum_thrice(x, y, z):\n    sum1 = x + y + z\n    if x == y == z:\n        sum1 = sum1 * 3\n    return sum1\n\n\nprint(sum_thrice(1, 2, 3))\nprint(sum_thrice(3, 3, 3))\n\n\n", "idx": 6288, "target": 0}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nfor sub in test_list:                                            \n    if res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    else: \n        res.append([ele for ele in sub])      \nres = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(res))\n\n\n", "idx": 6289, "target": 0}
{"func": "#30 function to print the regular polygon area\ndef polygon_area(side_length=1, side=3):\n    from math import tan\n    if side_length <= 0:\n        raise ValueError(\"How come Side is zero.\")\n    else:\n        if side <= 0 or side >=7:\n            raise NotImplementedError \n        elif side in ( 2 , 1 ):\n            raise ValueError(\"No Polygon of Side 1 & 2 Exists\")\n        elif side == 3:\n            return side_length*side_length*side/4*tan(180/side)\n        elif side == 4:\n            return side_length*side_length\n        elif side == 5:\n            return side_length*side_length*side/4*tan(180/side)\n        elif side == 6:\n            return side_length*side_length*side/4*tan(180/side)\n\n\n", "idx": 6290, "target": 0}
{"func": "# write a Python program to demonstrate working of Convert String to tuple list \n\ntest_str = \"(1, 3, 4), (5, 6, 4), (1, 3, 6)\"\n\nprint(\"The original string is : \" + test_str) \n\nres = [] \ntemp = [] \nfor token in test_str.split(\", \"): \n    num = int(token.replace(\"(\", \"\").replace(\")\", \"\")) \n    temp.append(num) \n    if \")\" in token: \n        res.append(tuple(temp)) \n        temp = [] \n\nprint(f\"List after conversion from string : {res}\")\n\n", "idx": 6291, "target": 0}
{"func": "#31 get the most common number in python\nfrom statistics import mode\nmode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))\n\n", "idx": 6292, "target": 0}
{"func": "# Program to find the number if it is within 100 of 1000 or 2000\ndef near_thousand(n):\n    return (abs(1000 - n) <= 100) or (abs(2000 - n) <= 100)\n\n\nprint(near_thousand(1000))\nprint(near_thousand(900))\nprint(near_thousand(800))\nprint(near_thousand(2200))\n\n\n", "idx": 6293, "target": 0}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(angular_dist:float,time:float)->float:\n    return angular_dist/time\n\n", "idx": 6294, "target": 0}
{"func": "#51 write a python function to find a missing number in a list of consecutive natural numbers\ndef getMissingNo(A): \n    n = len(A) \n    total = (n + 1)*(n + 2)/2\n    sum_of_A = sum(A) \n    return total - sum_of_A \n\n", "idx": 6295, "target": 0}
{"func": "# Write a function to remove empty list from a list using list comprehension\ndef removeEmptyList(li):\n  res = [ele for ele in li if ele != []] \n  return res\n\n\n", "idx": 6296, "target": 0}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 6297, "target": 0}
{"func": "# write a python function which takes two list of same length as input and return a dictionary with one as keys and other as values.\n\nkeys = eval(input(\"Enter key list : \"))\nvalues = eval(input(\"Enter value list : \"))\ndef fn(keys, values):\n    return { keys[i] : values[i] for i in range(len(keys)) }\n\n", "idx": 6298, "target": 0}
{"func": "# write a python function to return an iterator over the last n items\ndef tail(n, iterable):    \n    from collections import deque\n    return iter(deque(iterable, maxlen=n))\n\n", "idx": 6299, "target": 0}
{"func": "# Write a Python program that accepts a string and calculate the number of digits and letters and print them\n\nx = input(\"Enter a string! \")\nd=l=0\nfor c in x:\n    if c.isdigit():\n        d = d + 1\n    elif c.isalpha():\n        l = l + 1\n    else:\n        pass\nprint(\"Letters: \", l)\nprint(\"Digits: \", d)\n\n", "idx": 6300, "target": 0}
{"func": "# write a python function to convert string in to binary\ndef convertstringtobinary(text):\n\tfor chr in text:\n\t\tbin = ''\n\t\tasciiVal = int(ord(chr))\n\t\twhile asciiVal > 0:\n\t\t\tif asciiVal % 2 == 0:\n\t\t\t\tbin = bin + '0'\n\t\t\telse:\n\t\t\t\tbin = bin + '1'\n\t\t\tasciiVal = int(asciiVal/2)\n\t\treturn(bin + \" : \" + bin[::-1])\n\t\t\n\t\t\n\t\t\n", "idx": 6301, "target": 0}
{"func": "# Write a function that returns a dictionary sorted ascending by its keys\ndef ascending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[0])}\n\n", "idx": 6302, "target": 0}
{"func": "#74 function to show namedtuple is instance of tuple\ndef show_ins_tup():\n    from collections import namedtuple\n    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')\n    match1 = IplData('RCBvsKKR', 'KKR', 'bat', '229/9', '85/8', 'KKR')\n    return isinstance(match1, tuple)\n\n\n", "idx": 6303, "target": 0}
{"func": "# Write a program to take a string and print all the words and their frequencies\nstring_words = '''This assignment is of 900 marks. Each example if 9 marks.\nIf your example is similar to someone else, then you score less.\nThe formula we will use is 9/(repeated example). That means if 9 people write same example,\nthen you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''\nword_list = string_words.split()\nword_freq = [word_list.count(n) for n in word_list]\nprint(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))\n\n\n", "idx": 6304, "target": 0}
{"func": "# write a python program that takes two integers as input and check if the first number is divisible by other\n\nnum1 = int(input(\"Enter first number :\"))\nnum2 = int(input(\"Enter second number :\"))\nremainder  = num1 % num2\nif remainder == 0:\n    print(num1 ,\" is divisible by \",num2)\nelse :\n    print(num1 ,\" is not divisible by \",num2)\n    \n", "idx": 6305, "target": 0}
{"func": "# Write a function to return the volume of a cube\ndef cal_cube_volume(side:float)->float:\n    return side**3\n\n", "idx": 6306, "target": 0}
{"func": "# Write a Python function that returns biggest character in a string\n\nfrom functools import reduce\ndef biggest_char(string):\n    '''This function takes an input as a string and returns the biggest output character in the string'''\n    biggest_chr = lambda x, y: x if ord(x) > ord(y) else y\n    return reduce(biggest_chr, string)\n\n", "idx": 6307, "target": 0}
{"func": "# Write a function that will convert a string into camelCase\n\nfrom re import sub\ndef camelCase(string):\n  string = sub(r\"(_|-)+\", \" \", string).title().replace(\" \", \"\")\n  return string[0].lower() + string[1:]\n\n\n", "idx": 6308, "target": 0}
{"func": "# write a python program which iterates two lists of numbers simultaneously and adds corresponding values, print the result\nf_list = [1,2,3,4]\ns_list = [2,3,4,5]\nres = [f_n +s_n for f_n, s_n in zip(f_list, s_list)]\nprint(f\"{res}\")\n\n\n", "idx": 6309, "target": 0}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\nclass CircleArea:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius * self.radius\n\n\nr = 2\nobj = CircleArea(r)\nprint(\"Area of circle:\", obj.area())\n\n\n", "idx": 6310, "target": 0}
{"func": "# write a python function to convert temperature from celcius to kelvin\ndef cel_to_kel(celcius):\n    return celcius + 273\n\n", "idx": 6311, "target": 0}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nmyval = [i for i in range(num1, num2, 2)]\nprint(myval)\n\n", "idx": 6312, "target": 0}
{"func": "# write Python program to find Mathematical Median of Cumulative Records \n\ntest_list = [(1, 4, 5), (7, 8), (2, 4, 10)] \n\nprint(\"The original list : \" + str(test_list)) \n\n\nres = [] \nfor sub in test_list : \n    for ele in sub : \n        res.append(ele) \nres.sort() \nmid = len(res) // 2\nres = (res[mid] + res[~mid]) / 2\n\nprint(\"Median of Records is : \" + str(res)) \n\n", "idx": 6313, "target": 0}
{"func": "# write a python function to reverse user provided list and return the result\ndef reverselist(inlist):    \n    inlist = inlist[::-1] \n    return inlist\n\nresult = reverselist([1,2])\n\n5.\n", "idx": 6314, "target": 0}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres = [(sub[1], sub[0]) for sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res)) \n\n", "idx": 6315, "target": 0}
{"func": "#70 write a program to display the powers of 2 using anonymous function\n\nterms = 10\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 6316, "target": 0}
{"func": "# write a python program to input a Number N from user and print Odd Numbers from 1 to N\n\nmaximum = int(input(\" Please Enter any Maximum Value : \"))\n\nfor number in range(1, maximum + 1):\n    if(number % 2 != 0):\n        print(\"{0}\".format(number))\n        \n", "idx": 6317, "target": 0}
{"func": "# Write a Python Program to Convert Binary to Gray Code\n\ndef binary_to_gray(n):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    n = int(n, 2)\n    n ^= (n >> 1)\n\n    return bin(n)[2:]\n\n", "idx": 6318, "target": 0}
{"func": "# write a program to count characters surrounding vowels\n\nstr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not in vow_list and str1[1] in vow_list: \n    res += 1\n  \nif str1[-1] not in vow_list and str1[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 6319, "target": 0}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 6320, "target": 0}
{"func": "# 16. python function for count of address reference\nimport ctypes\ndef ref_count(address : int): #what is int doing here? Annotations\n    return ctypes.c_long.from_address(address).value\n\n", "idx": 6321, "target": 0}
{"func": "# Write a python function to remove all the even numbers from a list and return the remaining list\n\ndef remove_even(my_list):\n    result = list(filter(lambda x: (x % 2 != 0), my_list))\n    return result\n\n\n", "idx": 6322, "target": 0}
{"func": "# write a python program that takes input a list and squares every term using list comprehension\ns1 = eval(input(\"Enter list \"))\nprint([i**2 for i in s1])\n\n", "idx": 6323, "target": 0}
{"func": "# write a Python program to remove duplicates from a list\na = [10,20,30,20,10,50,60,40,80,50,40]\n\ndup_items = set()\nuniq_items = []\nfor x in a:\n    if x not in dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\n\nprint(f'dup_items:{dup_items}')\n\n", "idx": 6324, "target": 0}
{"func": "#43 function to print yesterday and tomorrow date\ndef tmrw_yest_time()\n    import datetime\n    yesterday = datetime.datetime.now() - datetime.timedelta(1)\n    tmrw = datetime.datetime.now() + datetime.timedelta(1)\n    print( yesterday, tmrw )\n\n\n", "idx": 6325, "target": 0}
{"func": "# 41. python function for finding cosine angle\ndef cosine(angle):\n\n    \"\"\" returns the cosine value for an angle mentioned in radians\"\"\"\n\n    return math.cos(angle)\n\n", "idx": 6326, "target": 0}
{"func": "# Write a Python function to check all elements of a list are the same or not\ndef check_equal(a):\n  return a[1:] == a[:-1]\n\n\n", "idx": 6327, "target": 0}
{"func": "# Write a python function to find uncommon words between two sentences given\n\ndef UncommonWords(A, B): \n    count = {} \n    for word in A.split(): \n        count[word] = count.get(word, 0) + 1\n    for word in B.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\t\n\t\n", "idx": 6328, "target": 0}
{"func": "# Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = filter(lambda x: x%2==0, li)\nprint evenNumbers\n\n", "idx": 6329, "target": 0}
{"func": "# write a python function to generate random number between a  given range\nimport random\n\ndef get_weather_data(min, max):\n    return random.randrange(min, max)\n\nrand_num = get_weather_data(11, 20)\nprint(f\"{rand_num}\")\n\n\n", "idx": 6330, "target": 0}
{"func": "# write a python funtion to implement a counter to record how many time the word has been repeated using closure concept\ndef word_counter():\n    counter = {}\n    def count(word):\n        counter[word] = counter.get(word, 0) + 1\n        return counter[word]\n    return count\n\n", "idx": 6331, "target": 0}
{"func": "# Write a function that returns cosine value of the input\ndef cos(x:float) -> float:\n    import math\n    return math.cos(x)\n\n", "idx": 6332, "target": 0}
{"func": "# Write a python function to generate  Euclid Number Series(2, 3, 7, 31, 211, 2311, 30031)\nfrom math import sqrt\nfrom itertools import count, islice\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n)-1)))\n\ndef euclid_numbers(n):\n    product = 1\n    if n > 3:\n        for i in range(n):\n            if is_prime(i):\n                product = product * i\n                yield product\n                \n         \n         \n", "idx": 6333, "target": 0}
{"func": "# example to demonstrate usage of docstring\ndef greet(name):\n    \"\"\"\n    This function greets to\n    the person passed in as\n    a parameter\n    \"\"\"\n    print(\"Hello, \" + name + \". Good morning!\")\n\n", "idx": 6334, "target": 0}
{"func": "# Write a Python function that calculates the area of parallelogram and takes in base, height as input\ndef area_shape(base, height, shape):\n    return {'triangle': 0.5*base*height, 'parallelogram': base*height}[shape]\n\n", "idx": 6335, "target": 0}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l1[i] < l2[j]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 6336, "target": 0}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list1: \n    if ele % 2 == 0: \n        list1.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list1) \n\n", "idx": 6337, "target": 0}
{"func": "# Cn = n\u22c52n + 1, with n \u2265 0. \ndef cullen_number(n):\n    if n >= 0:\n        return n * 2 ** n + 1\n  \n\n", "idx": 6338, "target": 0}
{"func": "# Write a python function that Print all the Numbers Present in the Text File\n\ndef print_number(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isdigit()):\n                        print(letter)\n\n\n", "idx": 6339, "target": 0}
{"func": "#63 custom logging along with counter\ndef custom_counter_log():\n    \"\"\"\n    An implementation of closures\n    \"\"\"\n    x = 0\n    dt = datetime.now()\n    def inner():\n       nonlocal x\n       x += 1\n       print(f' Switch or button is called {x} at {dt}')\n     return inner\n\n", "idx": 6340, "target": 0}
{"func": "# Write a python program to perform Vertical Concatenation in Matrix  \n  \ntest_list = [[\"India\", \"good\"], [\"is\", \"for\"], [\"Best\"]] \nprint(\"The original list : \" + str(test_list)) \nres = [] \nN = 0\nwhile N != len(test_list): \n    temp = '' \n    for idx in test_list:       \n\n        try: temp = temp + idx[N] \n        except IndexError: pass\n    res.append(temp) \n    N = N + 1\n  \nres = [ele for ele in res if ele] \n  \nprint(\"List after column Concatenation : \" + str(res)) \n\n\n", "idx": 6341, "target": 0}
{"func": "# Write a Python program to convert string into a datetime object\nfrom datetime import datetime\ndate_string = \"Mar 26 2021  4:20PM\"\ndatetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')\nprint(datetime_object)\n\n\n", "idx": 6342, "target": 0}
{"func": "# write a python program to print squares of numbers until 20\nfor i in range(20):\n   print(i*i)\n\n\n", "idx": 6343, "target": 0}
{"func": "# Write a program to to print the contents of a given file\nfile_name = 'temp.txt'\nwith open(file_name, 'r') as f:\n    print(f.read())\n\n\n", "idx": 6344, "target": 0}
{"func": "# write Python program to demonstrate ternary operator using tuples, Dictionary and lambda\na, b = 10, 20\nprint( (b, a) [a < b] ) \nprint({True: a, False: b} [a < b]) \nprint((lambda: b, lambda: a)[a < b]()) \n\n", "idx": 6345, "target": 0}
{"func": "# write a program to find and print the largest among three numbers\nnum1 = 123\nnum2 = 125\nnum3 = 148\nif (num1 >= num2) and (num1 >= num3):   \n    largest = num1\nelif (num2 >= num1) and (num2 >= num3):   \n    largest = num2\nelse:   largest = num3\nprint(f'largest:{largest}')\n\n", "idx": 6346, "target": 0}
{"func": "# 55 Write a python program that pads a given python list to a given length at the end and prints the modified list\n\n\ndef pad_arr_end(arr, pad_len):\n    pad_arr = [0] * (pad_len - len(arr))\n    return arr.extend(pad_arr)\n\n\ntmp = [1, 2, 3, 4, 5]\npad_arr_end(tmp, 10)\nprint(tmp)\n\n", "idx": 6347, "target": 0}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,d):\n    k = 9*(10**9)\n    return (k*q1*q2)/(d**2)\n\n", "idx": 6348, "target": 0}
{"func": "# 78 By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12, 24, 35, 70, 88, 120, 155]\nli = [x for (i, x) in enumerate(li) if i % 2 != 0]\nprint(li)\n\n", "idx": 6349, "target": 0}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\ndef find_profit_or_loss(cp,sp):\n    if cp > sp:\n        return 'loss', cp-sp\n    elif cp < sp:\n        return 'profit', sp-cp\n    else:\n        return 'no profit or loss', 0\n\n", "idx": 6350, "target": 0}
{"func": "# Write a Python function to find the maximum EVEN number from a given list\ndef even_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    if num%2 == 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 6351, "target": 0}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 6352, "target": 0}
{"func": "# 93 write a python function to find One's compliment of a number\n\nimport math\n\n\ndef OnesComplement(num):\n    bits = int(math.floor(math.log(num) / math.log(2)) + 1)\n    return ((1 << bits) - 1) ^ num\n\n\n", "idx": 6353, "target": 0}
{"func": "# write a python function to add all even numbers between minimum and maximum value\ndef add_even_num(min, max):\n    return sum([i for i in range(min, max) if i%2==0])\n\nadd_even_num(1, 6)\n\n\n", "idx": 6354, "target": 0}
{"func": "# write a python program to sort a dictionary by its values and print the sorted dictionary with 'key' argument.\n\nd = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}\nprint(sorted(d.items(), key=lambda x: x[1]))\n\n\n", "idx": 6355, "target": 0}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency: \" + str(res))\n\n", "idx": 6356, "target": 0}
{"func": "# Write a python program using lambda funtion to square a number\nsquare2 = lambda num: num * num\n\n", "idx": 6357, "target": 0}
{"func": "# Write a python program to print sum of number digits in List\ntest_list = [12, 67, 98, 34] \nres = [] \nfor ele in test_list: \n    sum = 0\n    for digit in str(ele): \n        sum += int(digit) \n    res.append(sum) \nprint (\"List Integer Summation : \" + str(res)) \n\n\n\n", "idx": 6358, "target": 0}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 6359, "target": 0}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\ndef cal_surface_area_cuboid(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\n", "idx": 6360, "target": 0}
{"func": "# write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list\ndef divisible_sum_pairs(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 1):\n        j = i + 1\n        while j < n:\n            if ((arr[i] + arr[j]) % k) == 0:\n                count += 1\n            j += 1\n    return count\n\n\nimport math\n\n\n", "idx": 6361, "target": 0}
{"func": "# Write a function to return the area of a rectangle\ndef cal_area_rect(length, breadth):\n    return length*breadth\n\n", "idx": 6362, "target": 0}
{"func": "#  Write a python function to generate a random password\n\nimport random\n\nLOWERCASE_CHARS = tuple(map(chr, range(ord('a'), ord('z')+1)))\nUPPERCASE_CHARS = tuple(map(chr, range(ord('A'), ord('Z')+1)))\nDIGITS = tuple(map(str, range(0, 10)))\nSPECIALS = ('!', '@', '#', '$', '%', '^', '&', '*')\n\nSEQUENCE = (LOWERCASE_CHARS,\n            UPPERCASE_CHARS,\n            DIGITS,\n            SPECIALS,\n            )\n\ndef generate_random_password(total, sequences):\n    r = _generate_random_number_for_each_sequence(total, len(sequences))\n\n    password = []\n    for (population, k) in zip(sequences, r):\n        n = 0\n        while n < k:\n            position = random.randint(0, len(population)-1)\n            password += population[position]\n            n += 1\n    random.shuffle(password)\n    \n    while _is_repeating(password):\n        random.shuffle(password)\n        \n    return ''.join(password)\n\ndef _generate_random_number_for_each_sequence(total, sequence_number):\n    \"\"\" Generate random sequence with numbers (greater than 0).\n        The number of items equals to 'sequence_number' and\n        the total number of items equals to 'total'\n    \"\"\"\n    current_total = 0\n    r = []\n    for n in range(sequence_number-1, 0, -1):\n        current = random.randint(1, total - current_total - n)\n        current_total += current\n        r.append(current)\n    r.append(total - sum(r))\n    random.shuffle(r)\n\n    return r\n\ndef _is_repeating(password):\n    \"\"\" Check if there is any 2 characters repeating consecutively \"\"\"\n    n = 1\n    while n < len(password):\n        if password[n] == password[n-1]:\n            return True\n        n += 1\n    return False\n\nif __name__ == '__main__':\n    print(generate_random_password(random.randint(6, 30), SEQUENCE))\n\n", "idx": 6363, "target": 0}
{"func": "# write Python program to illustrate  enumerate function in loops \nl1 = [\"eat\",\"sleep\",\"repeat\"] \n\nfor count,ele in enumerate(l1,100): \n    print (count,ele )\n\n", "idx": 6364, "target": 0}
{"func": "# Write a python function to compute 5/0 using try except\ntry:\nprint(\"Division = {}\".format(5/0))\nexcept ZeroDivisionError:\nprint (\"5 cannot be divided by O\")\n\n", "idx": 6365, "target": 0}
{"func": "# Define a class which has at least two methods: getString: to get a string from console input\nclass InputOutString(object):\n    def __init__(self):\n        self.s = \"\"\n    def getString(self):\n        self.s = raw_input()\nstrObj = InputOutString()\nstrObj.getString()\n", "idx": 6366, "target": 0}
{"func": "# Write a function to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    test_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx in range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key in test_list2[idx]:\n\n            if key not in id_keys:\n                test_list1[idx][key] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 6367, "target": 0}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list1: \n    if ele % 2 == 0: \n        list1.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list1) \n\n", "idx": 6368, "target": 0}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,d):\n    k = 9*(10**9)\n    return (k*q1*q2)/(d**2)\n\n", "idx": 6369, "target": 0}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius**2*+2*pi*radius*height\n\n", "idx": 6370, "target": 0}
{"func": "# write a python function to flatten one level of nesting\ndef flatten(list_of_lists):\n    from itertools import chain\n    return chain.from_iterable(list_of_lists)\n\n", "idx": 6371, "target": 0}
{"func": "# Write a Python function to find the maximum ODD number from a given list\ndef odd_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    if num%2 != 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 6372, "target": 0}
{"func": "# write a python function to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n\n", "idx": 6373, "target": 0}
{"func": "# Absolute function\ndef absolute_value(num):\n    \"\"\"This function returns the absolute\n    value of the entered number\"\"\"\n\n    if num >= 0:\n        return num\n    else:\n        return -num\nprint(absolute_value(2))\nprint(absolute_value(-4))\n\n", "idx": 6374, "target": 0}
{"func": "# Write a Python function to return hexadecimal value of a given integer\ndef int_to_hex(a):\n  return hex(a)\n\n\n", "idx": 6375, "target": 0}
{"func": "# 64 Write a python function that checks if all the numbers in a list sum upto 1. Returns False otherwise\n\n\ndef sum_upto_one(arr):\n    arr_sum = sum(arr)\n    try:\n        assert float(arr_sum) == 1.0\n        return True\n    except AssertionError:\n        return False\n\n\n", "idx": 6376, "target": 0}
{"func": "# Python program to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 6377, "target": 0}
{"func": "# Write a python function to generate a random combination from user provided list and user specified length.\nimport itertools\ndef get_random_combination(input_list, combination_length):\n    if(len(input_list) < combination_length):\n        print(\"Requested combination length less than length of list\")\n        return\n    combination_list = list(itertools.combinations(input_list, combination_length))\n    return random.sample(combination_list, 1)\n\n", "idx": 6378, "target": 0}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \ncount=0\nfor i in test_list:\n    if isinstance(i,dict):\n       count=count+1\nprint(count)    \n\n\n", "idx": 6379, "target": 0}
{"func": "# Write Python function to check if a string is palindrome or not\ndef isPalindrome(s):\n    return s == s[::-1]\n\n\t\n\t\n", "idx": 6380, "target": 0}
{"func": "# write a python function to find all the substrings of given string that contains 2 or more vowels. Also, these substrings must lie in between 2 consonants and should contain vowels only.\ndef find_substr():\n    import re\n    v = \"aeiou\"\n    c = \"qwrtypsdfghjklzxcvbnm\"\n    m = re.findall(r\"(?<=[%s])([%s]{2,})[%s]\" % (c, v, c), input(), flags=re.I)\n    print('\\n'.join(m or ['-1']))\n\n\n", "idx": 6381, "target": 0}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\n    def __init__(self):\n        pass\n\n    def area(self):\n        return 0\n\nclass Square(Shape):\n    def __init__(self, l):\n        Shape.__init__(self)\n        self.length = l\n\n    def area(self):\n        return self.length*self.length\n\n", "idx": 6382, "target": 0}
{"func": "# Write a python function to remove an item from list\ndef deleteelement(list, item):\n\tlist.remove(item)\n\treturn list\n\n\n\n", "idx": 6383, "target": 0}
{"func": "# write a Python program to reverse a linked list \n\nclass Node: \n\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\nclass LinkedList: \n\n    def __init__(self): \n        self.head = None\n\n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n        \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n\n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data)\n            temp = temp.next\n\n\nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n\n", "idx": 6384, "target": 0}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) \nprint(\"The sorted dictionary by marks is : \" + str(res))\n\n", "idx": 6385, "target": 0}
{"func": "# Write Python function to check if a string has at least one letter and one number\ndef checkString(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True\n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n \n\t\n\t\n", "idx": 6386, "target": 0}
{"func": "# write a python function to read a text file, if no filepath is given raise Exception\ndef read_file(filepath=None):\n    if filepath:\n        with open(filepath, 'r') as file_reader:\n            f_read = file_reader.read()\n        return f_read\n    else:\n        raise Exception(\"filepath not found\")\nread_file()\n\n\n", "idx": 6387, "target": 0}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res.add(ele)\n\nres = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 6388, "target": 0}
{"func": "# Write a Python Program to Count and print Number of Lowercase Characters in a String\n\nstring='This is an Assignment'\ncount=0\nfor i in string:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n", "idx": 6389, "target": 0}
{"func": "# 74 write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\n\nli = [3, 6, 7, 8]\nshuffle(li)\nprint(li)\n\n", "idx": 6390, "target": 0}
{"func": "# write a python program which takes an integer N as input and add the odd numbers up to N and print the result\n\nN = int(input(\"Enter Number : \"))\nsum = 0\ni = 1\nwhile i <= N:\n    sum = sum + i\n    i = i + 2\nprint(sum)\n\n", "idx": 6391, "target": 0}
{"func": "# Write a python function check if a given directory exists and has any files\nimport os\ndef check_dir_files(src_dir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return False\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return False\n    print(\"The directory \", src_dir_path, \" has \",len(files_in_dir), \" files.\")\n    return True\n\n", "idx": 6392, "target": 0}
{"func": "# Write a python program to Implement Merge sort and print the sorted list for the below list\n\ndef merge_sort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        mid = (start + end)//2\n        merge_sort(alist, start, mid)\n        merge_sort(alist, mid, end)\n        merge_list(alist, start, mid, end)\n \ndef merge_list(alist, start, mid, end):\n    left = alist[start:mid]\n    right = alist[mid:end]\n    k = start\n    i = 0\n    j = 0\n    while (start + i < mid and mid + j < end):\n        if (left[i] <= right[j]):\n            alist[k] = left[i]\n            i = i + 1\n        else:\n            alist[k] = right[j]\n            j = j + 1\n        k = k + 1\n    if start + i < mid:\n        while k < end:\n            alist[k] = left[i]\n            i = i + 1\n            k = k + 1\n    else:\n        while k < end:\n            alist[k] = right[j]\n            j = j + 1\n            k = k + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\nmerge_sort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 6393, "target": 0}
{"func": "# Write a program to check and print whether a number is palindrome or not\n\nnum = 12321\ntemp = num\nrev = 0\nwhile num > 0:\n    dig = num % 10\n    rev = rev*10 + dig\n    num//=10\nif temp==rev :\n    print(\"The number is a palindrome!\")\nelse:\n    print(\"The number isn't a palindrome!\")\n\n\n", "idx": 6394, "target": 0}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\ndef cal_total_res_in_series(res_list:list)->float:\n    return sum(res_list)\n\n", "idx": 6395, "target": 0}
{"func": "# Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row/column/subbox must contain the digits 1-9 without repetition.\n\ndef isValidSudoku(board):\n    rows = [{} for i in range(9)]\n    columns = [{} for i in range(9)]\n    boxes = [{} for i in range(9)]\n        \n    for i in range(9):\n        for j in range(9):\n            num = board[i][j]\n            if num != '.':\n                num = int(num)\n                box_index = (i//3)*3 + (j//3)\n                rows[i][num] = rows[i].get(num, 0) + 1\n                columns[j][num] = columns[j].get(num, 0) + 1\n                boxes[box_index][num] = boxes[box_index].get(num, 0) + 1       \n                if rows[i][num] > 1 or columns[j][num] > 1 or boxes[box_index][num] > 1:\n                    print(\" i= {0} j = {1} box_index ={2}\".format(i,j,box_index))\n                    print(\"rows[i]: \", rows[i])\n                    print(\"columnns[j]: \", columns[j])\n                    print(\"boxes[box_index]: \", boxes[box_index])\n                    return False\n                    \n    return True\n\t\n\t\n", "idx": 6396, "target": 0}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nfor idx in range(len(keys1)): \n\tres[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res))\n\n", "idx": 6397, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius*height\n\n", "idx": 6398, "target": 0}
{"func": "# Write a Python Program to print the Number of Times a Particular Number Occurs in a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nk=0\nnum=int(input(\"Enter the number to be counted:\"))\nfor j in a:\n    if(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n", "idx": 6399, "target": 0}
{"func": "# usage of kwargs\ndef b_func(**kwargs):\n    print('type of kwargs:', type(kwargs))\n    print('kwargs contents: ', kwargs)\n    print('value of argument a:', kwargs['a'])\n\nb_func(a=1, b=2, c=3, d=4)\n\n", "idx": 6400, "target": 0}
{"func": "# write a function to accept input as feet and inches into centimeters\ndef height_into_cms(feet, inches):\n    ininches = feet * 12 + inches\n    return ininches * 2.54\n\n", "idx": 6401, "target": 0}
{"func": "# write a python function that takes input a list of string and print the largest string\ndef find_longest_word(words_list):\n    word_len = []\n    for n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return word_len[-1][0], word_len[-1][1]\n\n", "idx": 6402, "target": 0}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 6403, "target": 0}
{"func": "# Write a Python Program to Count and print Number of Lowercase Characters in a String\n\nstring='This is an Assignment'\ncount=0\nfor i in string:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n", "idx": 6404, "target": 0}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\ndef dict_to_tuple(input_dict):\n  out_tuple = [(a, b) for a,b in input_dict.items()]\n  return out_tuple\n\n", "idx": 6405, "target": 0}
{"func": "# write a python program  to convert list of tuples into list \n\nlt = [('English', 2), ('Maths', 4), ('Science', '6')] \nout = [item for t in lt for item in t]  \nprint(out)\n\n", "idx": 6406, "target": 0}
{"func": "#60 function to use global varibale implementation\ndef gloabl_use(n):\n    global val\n    return val * n\n\n\n", "idx": 6407, "target": 0}
{"func": "# global variable to store the maximum \nglobal maximum \n  \ndef _lis(arr , n ): \n  \n    # to allow the access of global variable \n    global maximum \n  \n    # Base Case \n    if n == 1 : \n        return 1\n  \n    # maxEndingHere is the length of LIS ending with arr[n-1] \n    maxEndingHere = 1\n  \n    \"\"\"Recursively get all LIS ending with arr[0], arr[1]..arr[n-2] \n       IF arr[n-1] is maller than arr[n-1], and max ending with \n       arr[n-1] needs to be updated, then update it\"\"\"\n    for i in range(1, n): \n        res = _lis(arr , i) \n        if arr[i-1] < arr[n-1] and res+1 > maxEndingHere: \n            maxEndingHere = res +1\n  \n    # Compare maxEndingHere with overall maximum. And \n    # update the overall maximum if needed \n    maximum = max(maximum , maxEndingHere) \n  \n    return maxEndingHere \n  \ndef lis(arr): \n  \n    # to allow the access of global variable \n    global maximum \n  \n    # lenght of arr \n    n = len(arr) \n  \n    # maximum variable holds the result \n    maximum = 1\n  \n    # The function _lis() stores its result in maximum \n    _lis(arr , n) \n  \n    return maximum \n  \n", "idx": 6408, "target": 0}
{"func": "# Write a python program to implement Dequeue\n\nclass Dequeue:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def append(self, data):\n        self.items.append(data)\n \n    def append_left(self, data):\n        self.items.insert(0, data)\n \n    def pop(self):\n        return self.items.pop()\n \n    def pop_left(self):\n        return self.items.pop(0)\n \n \nq = Dequeue()\nprint('Menu')\nprint('append <value>')\nprint('appendleft <value>')\nprint('pop')\nprint('popleft')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'append':\n        q.append(int(do[1]))\n    elif operation == 'appendleft':\n        q.append_left(int(do[1]))\n    elif operation == 'pop':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from right: ', q.pop())\n    elif operation == 'popleft':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from left: ', q.pop_left())\n    elif operation == 'quit':\n        break\n\n", "idx": 6409, "target": 0}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).\n\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\n\n", "idx": 6410, "target": 0}
{"func": "# result is 3x4\nresult = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 6411, "target": 0}
{"func": "# Write a python function to find and print if a email address given is valid or not\n\nimport re \n  \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check(email):   \n    if(re.search(regex,email)):  \n        print(\"Valid Email\")  \n          \n    else:  \n        print(\"Invalid Email\")\t\n\t\t\n\t\t\n", "idx": 6412, "target": 0}
{"func": "#50 write a python function to find the median on an array of numbers\ndef median(arr):\n  \n  if len(arr) == 1:\n    return arr[0]\n    \n  else:\n    arr = sorted(arr)\n    a = arr[0:round(len(arr)/2)]\n    b = arr[len(a):len(arr)]\n    if len(arr)%2 == 0:\n      return (a[len(a)-1]+b[0])/2\n    else:\n      return a[len(a)-1]\n\n", "idx": 6413, "target": 0}
{"func": "# write a program to print the nth fibonacci number\nn1 = 1\nn2 = 1\nn = 5\nfor _ in range(n):\n   n1, n2 = n2, n1 + n2\nprint(n2)\n\n\n", "idx": 6414, "target": 0}
{"func": "# write a python function get the maximum number in passed list\n\ndef max_check(x):\n    max_val = x[0] \n    for check in x: \n        if check > max_val: \n            max_val = check \n    return max_val\n\nprint(f'{max_check([2,4,5,7,98])}')\n\n\n", "idx": 6415, "target": 0}
{"func": "#15 write a program to Remove Tuples of Length K Using list comprehension \n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nprint(\"The original list : \" + str(test_list)) \nK = 1\nres = [ele for ele in test_list if len(ele) != K] \nprint(\"Filtered list : \" + str(res)) \n\n", "idx": 6416, "target": 0}
{"func": "#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.\n\nsize = int(input(\"Input the size of the matrix: \"))\nmatrix = [[0] * size for row in range(0, size)]\nfor x in range(0, size):\n\n    line = list(map(int, input().split()))\n\n    for y in range(0, size):\n        matrix[x][y] = line[y]\n\nmatrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))\n\n", "idx": 6417, "target": 0}
{"func": "# Write a program to check whether a file/path/direcory exists or not\nfile_path = \"path/here\"\nimport os.path\nos.path.exists(file_path)\n\n\n", "idx": 6418, "target": 0}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i in range(len(v1)):\n  s1[i] = v1[i] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 6419, "target": 0}
{"func": "# Reusing global variable names and UnboundLocalErrors\ndef my_func():\n    print(var)\nvar = 'global'\nmy_func()\n\n", "idx": 6420, "target": 0}
{"func": "#61 write a program to print the elements of an array present on even position\narr = [1, 2, 3, 4, 5];     \n     \nprint(\"Elements of given array present on even position: \");    \n    \nfor i in range(1, len(arr), 2):    \n    print(arr[i]);   \n    \n", "idx": 6421, "target": 0}
{"func": "# Write a python function to generate Lucas Numbers (2, 1, 3, 4, 7, 11, 18...)\ndef lucas_numbers(n):\n    first, second = 2,1\n    for _ in range(n):\n        first, second = second, first+second\n    return first\n            \n", "idx": 6422, "target": 0}
{"func": "# write a python function to caclucate the polygon_area\ndef polygon_area( side_length, sides = 3):\n    if(sides < 3 or sides > 6 ):\n        raise ValueError(\"number of sides must be greater than 2 and less than 7\")\n    if(side_length < 0 ):\n        raise ValueError(\"side length must be positive\")\n\n    return sides * (side_length ** 2) / (4 * tan(pi / sides))\n\n", "idx": 6423, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)  \n\n", "idx": 6424, "target": 0}
{"func": "# write a python function that takes two lists as an input an print out common elements in two lists\n\ndef common_member(a, b): \n    a_set = set(a) \n    b_set = set(b) \n  \n    if (a_set & b_set): \n        print(a_set & b_set) \n    else: \n        print(\"No common elements\")  \n        \n", "idx": 6425, "target": 0}
{"func": "# Write a Python program to print unique triplets whose three elements gives the sum of zero from an array of n integers.\nnum = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]\nlen_list = len(num)\ntrips = []\nfor i in range(len_list):\n    if i+3 > len_list:\n        break\n    triplets = num[i:i+3]\n    if len(set(triplets))==3:\n        if sum(triplets) == 0:\n            trips.append(triplets)\nprint(trips)\n\n\n\n", "idx": 6426, "target": 0}
{"func": "#77 Write a Python function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n", "idx": 6427, "target": 0}
{"func": "# 76 Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nli = [5, 6, 77, 45, 22, 12, 24]\nli = [x for x in li if x % 2 != 0]\nprint(li)\n\n", "idx": 6428, "target": 0}
{"func": "# Choose given number of elements from the list with different probability\nimport random\nnum1 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 6429, "target": 0}
{"func": "# Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given\ndef compound_interest(p,r,t):\n    ci = p * (pow((1 + r / 100), t)) \n    return ci\n\n\n", "idx": 6430, "target": 0}
{"func": "# write a python function to find leftmost value greater than x\ndef find_gt(a, x):\n    from bisect import bisect_right \n    i = bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\n\n", "idx": 6431, "target": 0}
{"func": "# write a program to find sum of elements in list\ntotal = 0\nprint(f'sum: {sum([total + x for x in [1, 2, 3, 4, 5]])}')\n\n\n", "idx": 6432, "target": 0}
{"func": "# write a Python function to convert Gray code to binary \ndef gray_to_binary(n):\n    n = int(n, 2) # convert to int\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return bin(n)[2:]\n\t\n\t\n\t\n", "idx": 6433, "target": 0}
{"func": "# write a Python function to find time for a given angle. \n\ndef calcAngle(hh, mm): \n\n    hour_angle = 0.5 * (hh * 60 + mm) \n    minute_angle = 6 * mm \n\n    angle = abs(hour_angle - minute_angle) \n\n    angle = min(360 - angle, angle) \n\n    return angle \n\ndef printTime(theta): \n\n    for hh in range(0, 12): \n        for mm in range(0, 60): \n            if (calcAngle(hh, mm)==theta): \n                print(hh, \":\", mm, sep = \"\") \n                return\n            \n    print(\"Input angle not valid.\") \n    return\n\ntheta = 90.0\nprintTime(theta) \n\n", "idx": 6434, "target": 0}
{"func": "# The numbers obtained should be printed in a comma-separated sequence on a single line.\n\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint(','.join(l))\n\n\n", "idx": 6435, "target": 0}
{"func": "# Write a function to Get Kth Column of Matrix\ndef kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list))[K]\n    print(\"The Kth column of matrix is : \" + str(res))\n\n", "idx": 6436, "target": 0}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict)) \ns=[]\na=0\nq=[]\nfor key,value in test_dict.items():\n    s.append(len(value))\n    q.append(key)\nl=[]\nprint(s)\nprint(q) \nfor k,z in zip(q,s):\n      if z==min(s):\n         l.append(k)\nprint(l) \n\n\n", "idx": 6437, "target": 0}
{"func": "# take input from the user  \nprint(\"Select operation.\")  \nprint(\"1.Add\")  \nprint(\"2.Subtract\")  \nprint(\"3.Multiply\")  \nprint(\"4.Divide\")  \n  \nchoice = input(\"Enter choice(1/2/3/4):\")  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \n  \nif choice == '1':  \n   print(num1,\"+\",num2,\"=\", add(num1,num2))  \n  \nelif choice == '2':  \n   print(num1,\"-\",num2,\"=\", subtract(num1,num2))  \n  \nelif choice == '3':  \n   print(num1,\"*\",num2,\"=\", multiply(num1,num2))  \nelif choice == '4':  \n   print(num1,\"/\",num2,\"=\", divide(num1,num2))  \nelse:  \n   print(\"Invalid input\")    \n   \n", "idx": 6438, "target": 0}
{"func": "#write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.\ndef compress(text):\n    from itertools import groupby\n    for k, g in groupby(text):\n        print(\"({}, {})\".format(len(list(g)), k), end=\" \")\n\n\n", "idx": 6439, "target": 0}
{"func": "# write a python function to Count the Number of Digits in a Number\ndef count_digits():\n    n = int(input(\"Enter number:\"))\n    count = 0\n    while n > 0:\n        count = count + 1\n        n = n // 10\n    return count\n\n\n", "idx": 6440, "target": 0}
{"func": "#33 function insert at the begining of dictionary\ndef dict_in_at_begin(orgin: dict, new_: dict):\n    final = {**new_, **origin}\n    return final\n\n\n", "idx": 6441, "target": 0}
{"func": "# Write a Python program to convert a string to datetime.\nfrom datetime import datetime\ndate_object = datetime.strptime('Jul 1 2014 2:43PM', '%b %d %Y %I:%M%p')\nprint(date_object)\n\n", "idx": 6442, "target": 0}
{"func": "# Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads,numlegs):\n    ns='No solutions!'\n    for i in range(numheads+1):\n        j=numheads-i\n        if 2*i+4*j==numlegs:\n            return i,j\n    return ns,ns\n\n\n", "idx": 6443, "target": 0}
{"func": "# Write a python function to get the surface_area of a prism with base area, base perimeter & height as input\ndef prism_surface_area(base_area, base_perimeter, height):\n    surface_area = 2*base_area + (base_perimeter*height)\n    return surface_area\n\n", "idx": 6444, "target": 0}
{"func": "# write Python Program to Multiply Two Matrices and print result.\nX = [[1,2,3],  \n       [4,5,6],  \n       [7,8,9]]  \n  \nY = [[10,11,12],  \n      [13,14,15],  \n      [16,17,18]]  \n\t  \nresult = [[0,0,0],  \n               [0,0,0],  \n              [0,0,0]]   \nfor i in range(len(X)):  \n   for j in range(len(Y[0])):  \n       for k in range(len(Y)):  \n           result[i][j] += X[i][k] * Y[k][j]  \nfor r in result:  \n   print(r)  \n   \n   \n   \n", "idx": 6445, "target": 0}
{"func": "# Write a function that calculates the average time taken to perform any transaction by  Function fn averaging the total time taken for transaction over Repetations\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    import time\n    total_time = []\n\n    for _ in range(repetitons):\n        start_time = time.perf_counter()\n        fn(*args,**kwargs)\n        end_time = time.perf_counter()\n        ins_time = end_time - start_time\n        total_time.append(ins_time)\n    return sum(total_time)/len(total_time)\n\n\n", "idx": 6446, "target": 0}
{"func": "# write a python program to find difference between elements of two lists and print it\n\nl1 = [1, 2, 3, 4]\nl2 = [5, 8, 7, 0]\n\nres = []\nfor i in range(len(l1)):\n    res.append(l1[i] - l2[i])\n\nprint(res)\n\n", "idx": 6447, "target": 0}
{"func": "# Create a list comprehension\ndef listcompr(n=100000):\n    my_list = [i for i in range(n) if i % 5 == 0]\n    return my_list\n\n", "idx": 6448, "target": 0}
{"func": "# Write a function to Check whether following json is valid or invalid\nimport json\ndef validateJSON(jsonData):\n    try:\n        json.loads(jsonData)\n    except ValueError as err:\n        return False\n    return True\n\n", "idx": 6449, "target": 0}
{"func": "# With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate( li ):\n    newli=[]\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n\n    return newli\n\n", "idx": 6450, "target": 0}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nfor ini_dict in ini_list: \n    for key in ini_dict.keys(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 6451, "target": 0}
{"func": "# Write a python function to check if number is divisible by all the digits\n\ndef allDigitsDivide( n) :\n     \n    temp = n\n    while (temp > 0) :\n        digit = temp % 10\n        if not (digit != 0 and n % digit == 0) :\n            return False\n \n        temp = temp // 10\n     \n    return True\n\t\n\t\n", "idx": 6452, "target": 0}
{"func": "# Write a function that removes all special characters\ndef clean_str(s):\n    import re\n    return re.sub('[^A-Za-z0-9]+', '', s)\n\n", "idx": 6453, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    for i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 6454, "target": 0}
{"func": "# Write a python class Shape and Sub class Square:\nclass Shape():\ndef __init__(self,length = 0):\nself.length = length\ndef Area(self):\nprint(\"Area of Shape is 0\")\nclass Square (Shape):\ndef __init__(self,length = 0):\nself.length = length\ndef Area(self):\nself.area = self.length*self.length\nprint(\"Area of a Square is: {}\".format(self.area))\ns1 = Square(2)\ns1.Area()\n\n", "idx": 6455, "target": 0}
{"func": "# write a python program to add and print two user defined list using map\ninput_string = input(\"Enter a list element separated by space \")\nlist1  = input_string.split()\ninput_string = input(\"Enter a list element separated by space \")\nlist2  = input_string.split()\nlist1 = [int(i) for i in list1] \nlist2 = [int(i) for i in list2] \nresult = map(lambda x, y: x + y, list1, list2) \nprint(list(result))\n\n", "idx": 6456, "target": 0}
{"func": "# Write a function that takes two lists as input and returns a zipped list of corresponding elements\n\ndef zip_list(list1, list2):\n    return list(zip(list1, list2))\n\n\n", "idx": 6457, "target": 0}
{"func": "# 79 By using list comprehension, write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[[0 for col in range(8)] for col in range(5)] for row in range(3)]\nprint(array)\n\n", "idx": 6458, "target": 0}
{"func": "# write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.\ndef filter_with_key_value(list_of_dicts, key, value):\n    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )\n\n\n", "idx": 6459, "target": 0}
{"func": "# write a python function to return the factorial of a number\ndef fact(n):\n   if n == 1:\n      return n\n   else:\n      return n * fact(n-1)\n\n\n", "idx": 6460, "target": 0}
{"func": "# Write a function to reverse a string\n\ndef revStr(inp):\n  inp = inp[::-1]\n  return inp\n\n", "idx": 6461, "target": 0}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 6462, "target": 0}
{"func": "# Write a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef putNumbers(n):\n    i = 0\n    while i<n:\n        j=i\n        i=i+1\n        if j%7==0:\n            yield j\n\nfor i in reverse(100):\n    print(i)\n\n", "idx": 6463, "target": 0}
{"func": "# Write a Python program to count the elements in a list until an element is a tuple\nnum = [10,20,30,(10,20),40]\nctr = 0\nfor n in num:\nif isinstance(n, tuple):\nbreak\nctr += 1\nprint(ctr)\n\n", "idx": 6464, "target": 0}
{"func": "#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).\ndef reverse_Bits(n):\n        result = 0\n        for i in range(32):\n            result <<= 1\n            result |= n & 1\n            n >>= 1\n        return result\n    \n", "idx": 6465, "target": 0}
{"func": "#13. Python Program to Find the Largest Among Three Numbers\n\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 6466, "target": 0}
{"func": "# write a python function that returns the input list sorted in ascending order\ndef sort_ascending(list_to_be_sorted):\n    return sorted(list_to_be_sorted)\n\n\n", "idx": 6467, "target": 0}
{"func": "# Write a Python Program to Remove and print the Duplicate Items from a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nb = set()\nunique = []\nfor x in a:\n    if x not in b:\n        unique.append(x)\n        b.add(x)\nprint(\"Non-duplicate items:\")\nprint(unique)\n\n", "idx": 6468, "target": 0}
{"func": "# write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using lambda + filter() + isdigit() \ntest_list = [(\"45\", \"86\"), (\"Gfg\", \"1\"), (\"98\", \"10\"), (\"Gfg\", \"Best\")] \nprint(\"The original list is : \" + str(test_list)) \nres = list(filter(lambda sub : all(ele.isdigit() for ele in sub), test_list)) \nprint(\"Filtered Tuples : \" + str(res)) \n\n", "idx": 6469, "target": 0}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in a.items():\n    print(k, v)\n\n\n", "idx": 6470, "target": 0}
{"func": "#88 write a class that act like squares and should print the squares of values and and cuustom sequence type.\nclass Square:\n    def __init__(self, n):\n        self.n = n\n\n    def __iter__(self):\n        return self.show_sq(self.n)\n\n    @staticmethod\n    def show_sq(n):\n         for i in range(n):\n             yield i**2\n\n    def __getitem__(self, i):\n       if isinstance(i, int):\n            if i < = self.n:\n                print(i**2)\n            else:\n                raise ValueError('Index out of bound')\n\n\n", "idx": 6471, "target": 0}
{"func": "# Python function to find a distinct pair of numbers whose product is odd from a sequence of integer values.\ndef odd_product(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                product = nums[i] * nums[j]\n                if product & 1:\n                    return True\n                    return False\n\n\ndt1 = [2, 4, 6, 8]\ndt2 = [1, 6, 4, 7, 8]\nprint(dt1, odd_product(dt1))\nprint(dt2, odd_product(dt2))\n\n\n", "idx": 6472, "target": 0}
{"func": "# Write a function that returns Gets the derivative of exponential of x\ndef derivative_exp(x:float) -> float:\n    import math\n    return math.exp(x)\n\n\n", "idx": 6473, "target": 0}
{"func": "# write a python program to replace blank space to 1\nmy_string = 'balaji'\nk = [print(i) for i in my_string if i not in \"aeiou\"]\nprint('Not a vowel',k)\n\n", "idx": 6474, "target": 0}
{"func": "# write a python program to convert a list of values in kilometers to feet\n kilometer = [39.2, 36.5, 37.3, 37.8]\n feet = map(lambda x: float(3280.8399)*x, kilometer)\n print(list(feet))\n \n", "idx": 6475, "target": 0}
{"func": "# Write a Python program to print the list of all keywords\nimport keyword\nprint(\"Python keywords are...\")\nprint(keyword.kwlist)\n\n\n", "idx": 6476, "target": 0}
{"func": "# Write a function to remove a given date type elements from a list.\n\ndef removeDataType(li,dType):\n    res = []\n    for i in li:\n        if not isinstance(i, dType):\n            res.append(i)\n    return res\n\n\n", "idx": 6477, "target": 0}
{"func": "# write a python program to explain enclosing and global scope\n\nx = 'global'\n\ndef f():\n    x = 'enclosing'\n    def g():\n        print(x)\n    g()\n    return x\nobj1 = f()\nprint('explain global scope:',obj1)\n\n", "idx": 6478, "target": 0}
{"func": "# write a python function to pickle data to a file\ndef pickle_data(data, pickle_file):\n  import pickle\n  with open(pickle_file, 'wb') as f:\n      pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)\n  return None\n\n", "idx": 6479, "target": 0}
{"func": "# write Python function to Count the Frequency of Words Appearing in a String Using a Dictionary\ndef countword(test_string):\n\tl=[]\n\tl=test_string.split()\n\twordfreq=[l.count(p) for p in l]\n\treturn(dict(zip(l,wordfreq)))\n\t\n\t\n\t\n", "idx": 6480, "target": 0}
{"func": "#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.\nr = range(1, 201)\na = sum(r)\nprint (a * a - sum(i*i for i in r))\n\n", "idx": 6481, "target": 0}
{"func": "# Write a function to merge two lists element wise\ndef merge_lists(l1:list, l2:list):\n    return list(zip(l1,l2))\n\n", "idx": 6482, "target": 0}
{"func": "# Python program to get the third side of right angled triangle from two given sides.\ndef pythagoras(opposite_side, adjacent_side, hypotenuse):\n    if opposite_side == str(\"x\"):\n        return \"Opposite = \" + str(((hypotenuse ** 2) - (adjacent_side ** 2)) ** 0.5)\n    elif adjacent_side == str(\"x\"):\n        return \"Adjacent = \" + str(((hypotenuse ** 2) - (opposite_side ** 2)) ** 0.5)\n    elif hypotenuse == str(\"x\"):\n        return \"Hypotenuse = \" + str(((opposite_side ** 2) + (adjacent_side ** 2)) ** 0.5)\n    else:\n        return \"You know the answer!\"\n\n\nprint(pythagoras(3, 4, 'x'))\nprint(pythagoras(3, 'x', 5))\nprint(pythagoras('x', 4, 5))\nprint(pythagoras(3, 4, 5))\n\n\n", "idx": 6483, "target": 0}
{"func": "# 17. python function to modify a tuple\ndef modify_tuple(t):\n    print(f'Initial t mem-add = {id(t)}')\n    t[0].append(100)\n    print(f'Final t mem-add = {id(t)}')\n\n", "idx": 6484, "target": 0}
{"func": "#Write a function to print all time when angle between hour hand and minute\ndef printTime(theta):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n", "idx": 6485, "target": 0}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nn = 1234511\nprint(sumDigits(n))\n\n", "idx": 6486, "target": 0}
{"func": "# Write a python program that maps list of words into a list of integers representing the lengths of the corresponding words\n\nlst = [\"ab\",\"cde\",\"erty\"]\nlength_list = list(map((lambda element: len(element)), lst))\nprint(str(length_list))\n\n\n", "idx": 6487, "target": 0}
{"func": "# Write a Python program which takes two digits m (row) and n (column) as input and generates a two-dimensional array. The element value in the i-th row and j-th column of the array should be i*\nrow_num = int(input(\"Input number of rows: \"))\ncol_num = int(input(\"Input number of columns: \"))\nmulti_list = [[0 for col in range(col_num)] for row in range(row_num)]\n\nfor row in range(row_num):\nfor col in range(col_num):\nmulti_list[row][col]= row*col\n\nprint(multi_list)\n\n", "idx": 6488, "target": 0}
{"func": "# write a program to print difference in between today and given date\n\nimport datetime\ndd = int(input(\"date: \"))\nmm = int(input(\"month: \"))\nyy = int(input(\"year: \"))\na = datetime.date(yy,mm,dd)\nx = date.today()\nprint(x-a)\n\n", "idx": 6489, "target": 0}
{"func": "# Write a Python function to Find the Sum of Sine Series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n", "idx": 6490, "target": 0}
{"func": "# write a python program to check if year is a leap year or not\n\nyear = 2004\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n      print(f\"{year} is a leap year\")\nelse:\n   print(f\"{year} is not a leap year\")\n\n", "idx": 6491, "target": 0}
{"func": "#32 write a program to replace vowels by next vowel using list comprehension + zip() \n  \ntest_str = 'helloworld'\nprint(\"The original string is : \" + str(test_str)) \nvow = 'a e i o u'.split() \ntemp = dict(zip(vow, vow[1:] + [vow[0]])) \nres = \"\".join([temp.get(ele, ele) for ele in test_str]) \nprint(\"The replaced string : \" + str(res)) \n\n", "idx": 6492, "target": 0}
{"func": "# Write a function, which will find all such numbers between 1000 to 9999 that each digit of the number is an even number.\n\nvalues = []\nfor i in range(1000, 9999):\n  s = str(i)\n  if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n      values.append(s)\n\n\n", "idx": 6493, "target": 0}
{"func": "# write a python function that returns first element of a list\n\ndef head(lst):\n  return lst[0]\n\n", "idx": 6494, "target": 0}
{"func": "# Write a function to adds two lists element wise\ndef adds_listelements(l1:list, l2:list):\n    return [i+j for i, j in zip(l1,l2)]\n\n", "idx": 6495, "target": 0}
{"func": "# write a python function to capitalize the first letter of a string\n\ndef capitalize(s, lower_rest = False):\n  return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])\n\n", "idx": 6496, "target": 0}
{"func": "# Write a Python program to sort a tuple by its float element.\nprice = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\nprint( sorted(price, key=lambda x: float(x[1]), reverse=True))\n\n", "idx": 6497, "target": 0}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        else:\n            return None\n    return None\n\n", "idx": 6498, "target": 0}
{"func": "# Write a function to return the volume of a cuboid\ndef cal_cuboid_volume(length:float, breadth:float, height:float)->float:\n    return length*breadth*height\n\n", "idx": 6499, "target": 0}
{"func": "#34. write a Python function to Find LCM and returb the value\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\n", "idx": 6500, "target": 0}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(len(val) - len(key))\n  return sum_diff/len(input_dict)\n\n", "idx": 6501, "target": 0}
{"func": "# write Python3 code to demonstrate convert list of strings to list of tuples Using map() + split() + tuple() \n\ntest_list = ['4, 1', '3, 2', '5, 3'] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = [tuple(map(int, sub.split(', '))) for sub in test_list] \n\nprint(\"The list after conversion to tuple list : \" + str(res)) \n\n", "idx": 6502, "target": 0}
{"func": "# Write a function to return the total surface area of a cube of side a\ndef cal_surface_area_cube(a):\n    return 6*(a**2)\n\n", "idx": 6503, "target": 0}
{"func": "# write a python function to calculate the least common multiple (LCM) of two user provided positive integers.\n\ndef lcm(num1, num2):\n   if num1 > num2:\n       z = num1\n   else:\n       z = num2\n   while(True):\n       if((z % num1 == 0) and (z % num2 == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n", "idx": 6504, "target": 0}
{"func": "# Write a Python program to sort a tuple of tuples by 2nd item\ntuple1 = (('a', 23),('b', 37),('c', 11), ('d',29))\ntuple1 = tuple(sorted(list(tuple1), key=lambda x: x[1]))\nprint(tuple1)\n\n\n", "idx": 6505, "target": 0}
{"func": "# write a program to  adds every 5th number in a list\ninput_list = [x for x in range(20)]\n\nres=reduce((lambda x, y: x + y), [val for idx, val in enumerate(input_list) if (idx+1)%5==0]) \nprint('Sum of every 5th element in the list is', res)\n\n", "idx": 6506, "target": 0}
{"func": "# Write a python function to remove duplicate words from a given string\ndef remove_duplicate_words(string):\n    string = string.strip().split()\n    return ' '.join(set(string))\n    \n    \n", "idx": 6507, "target": 0}
{"func": "#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.\nn = 0\nfor i in range(1,500):\n     if not i % 5 or not i % 3:\n         n = n + i\nprint(n)\n\n", "idx": 6508, "target": 0}
{"func": "#  Write a python function get unique value from tuple\n\ndef unique_values(v):\n    return(list(set(v)))\n\nt=[(1,2),(3,4),(4,3),(1,2)]\n\nunique_values(t)\n\n", "idx": 6509, "target": 0}
{"func": "# You are given a string. Split the string on a \" \" (space) delimiter and join using a - hyphen.\ndef word_join(s):\n    words = s.split(' ')\n    return '-'.join(words)\n\n\nprint(word_join(\"This is 17B Assignment\"))\n\n\n", "idx": 6510, "target": 0}
{"func": "# write a function to calculate area of a triangle given height and base\n\ndef area_triangle(base, height):\n    return 0.5 * base * height\n\n", "idx": 6511, "target": 0}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    return [ele for ele in reversed(lst)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 6512, "target": 0}
{"func": "# 9 write a python function to update a dictionary with a new key, value pair\n\n\ndef update_dictionary(dict, key, value):\n    dict[str(key)] = value\n    return dict\n\n\n", "idx": 6513, "target": 0}
{"func": "# write a Python Program to Check if a Number is Positive, Negative or 0\nnum = 10\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n", "idx": 6514, "target": 0}
{"func": "# Write a python  function which returns True elements in a given list is monotonically increasing or decreasing, return False otherwise \n\ndef isMonotonic(A):  \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n\t\t\t\n\t\t\t\n\n", "idx": 6515, "target": 0}
{"func": "# write a Python function To Calculate Total Surface Area of Cylinder \ndef totalsurfacearea(r, h): \n    tsurf_ar = (2 * pi * r * h) + (2 * pi * r * r) \n    return tsurf_ar \n\nr = 5\nh = 8\n\nprint(\"Total Surface Area Of Cylinder = \",totalsurfacearea(r,h)) \n\n", "idx": 6516, "target": 0}
{"func": "# write a Python3 code to demonstrate working of Extract dictionaries with values sum greater than K \n\ntest_list = [{\"Gfg\" : 4, \"is\" : 8, \"best\" : 9}, \n            {\"Gfg\" : 5, \"is\": 8, \"best\" : 1}, \n            {\"Gfg\" : 3, \"is\": 7, \"best\" : 6}, \n            {\"Gfg\" : 3, \"is\": 7, \"best\" : 5}] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 15\n\nres = [] \nfor sub in test_list: \n    sum = 0\n    for key in sub: \n        sum += sub[key] \n    if sum > K: \n        res.append(sub) \n\nprint(\"Dictionaries with summation greater than K : \" + str(res)) \n\n", "idx": 6517, "target": 0}
{"func": "# Write a python function to count the number of Words in a Text File\ndef check_words():\n    fname = input(\"file name: \")\n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            num_words += len(words)\n    print(\"Number of words = \", num_words)\n\n\n", "idx": 6518, "target": 0}
{"func": "# Write a function to return the time taken by a given of moving object based of distance travelled in given time\ndef cal_time(distance:float,speed:float)->float:\n    return distance/speed\n\n", "idx": 6519, "target": 0}
{"func": "# write a python function that when given two numbers, would divide the first number by second number and return the quotient and remainder\ndef divide_first_number_by_second(num1, num2):\n    return (num1 // num2), (num1 % num2)\n\n\n", "idx": 6520, "target": 0}
{"func": "# write Python3 code to demonstrate Remove Rear K characters from String List using list comprehension + list slicing \n\ntest_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 4\n\nres = [sub[ : len(sub) - K] for sub in test_list] \n\nprint(\"The list after removing last characters : \" + str(res)) \n\n\n", "idx": 6521, "target": 0}
{"func": "#43. Python Program to Transpose a Matrix using Nested List Comprehension\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 6522, "target": 0}
{"func": "#18 write a program to convert time from 12 hour to 24 hour format \n  \ndef convert24(str1): \n      \n    # Checking if last two elements of time \n    # is AM and first two elements are 12 \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    # remove the AM     \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    # Checking if last two elements of time \n    # is PM and first two elements are 12    \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove PM \n        return str(int(str1[:2]) + 12) + str1[2:8] \n  \n", "idx": 6523, "target": 0}
{"func": "# Write a function to determine whether a given number is even or odd recursively\n\ndef check(n):\n    if (n < 2):\n        return (n % 2 == 0)\n    return (check(n - 2))\nn=int(input(\"Enter number:\"))\nif(check(n)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")\n\n\n", "idx": 6524, "target": 0}
{"func": "# Write a Python program to print the list of all keywords\nimport keyword\nprint(\"Python keywords are...\")\nprint(keyword.kwlist)\n\n\n", "idx": 6525, "target": 0}
{"func": "#3 add 1 to all elements in list python\nlst = [1,2,3]\nlist(map(lambda x:x+1, lst))\n\n", "idx": 6526, "target": 0}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsampleJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith open(\"sampleJson.json\", \"w\") as write_file:\n    json.dump(sampleJson, write_file, indent=4, sort_keys=True)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 6527, "target": 0}
{"func": "# Shuffle a list randomly\nimport random\nlist = [2,5,8,9,12]\nrandom.shuffle(list)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 6528, "target": 0}
{"func": "# write a python function to check if an object is an instance of a given class \ndef check_instance(derived_class, base_class):\n    return(isinstance(derived_class, base_class))\n\n", "idx": 6529, "target": 0}
{"func": "# we have to be careful if we use a variable name that occurs in the global scope, and we want to access it in the local function scope if we want to reuse this name:\ndef my_func():\n    print(var)  # want to access global variable\n    var = 'locally changed'  # but Python thinks we forgot to define the local variable!\n\nvar = 'global'\nmy_func()\n\n", "idx": 6530, "target": 0}
{"func": "# Python 3 program to find time for a given angle.\n\ndef calcAngle(hh, mm):\n    hour_angle = 0.5 * (hh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - angle, angle)\n    return angle\n\n\n", "idx": 6531, "target": 0}
{"func": "#100 write a program to input a string and find total number of letters and digits\n\nprint(\"Input a string: \")\nstr1 = input()\n\nno_of_letters, no_of_digits = 0,0\n\nfor c in str1:\n    if (c>='a' and c<='z') or (c>='A' and c<='Z'):\n        no_of_letters += 1\n    if c>='0' and c<='9':\n        no_of_digits += 1\n\nprint(\"Input string is: \", str1)\nprint(\"Total number of letters: \", no_of_letters)\nprint(\"Total number of digits: \", no_of_digits)\n\n", "idx": 6532, "target": 0}
{"func": "# Write a python function to find out the occurence of \"i\" element before first \"j\" in the list\n\ndef firstOccurence(arr, i,j):\n  res = 0\n  for k in arr:         \n      if k == j: \n          break\n      if k == i: \n          res += 1\n  return res\n\n\n", "idx": 6533, "target": 0}
{"func": "# write a python function for dice roll asking user for input to continue and randomly give an output.\ndef dice():\n    import random\n    min = 1\n    max = 6\n    roll_again = 'y'\n\n    while roll_again == \"yes\" or roll_again == \"y\":\n        print(\"Rolling the dice...\")\n        print(random.randint(min, max))\n        roll_again = input(\"Roll the dices again?\")\n\n\nfrom cryptography.fernet import Fernet\n\n\n", "idx": 6534, "target": 0}
{"func": "# write a python function to generate a Unique identifier across space and time in this cosmos.\ndef get_uuid():\n    return uuid.uuid4()\n\n\nimport secrets\n\n\n", "idx": 6535, "target": 0}
{"func": "# write a Python program to find Maximum Frequent Character in String \n\ntest_str = \"GeeksforGeeks\"\nprint (\"The original string is : \" + test_str) \n\nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get) \n\nprint (\"The maximum of all characters in GeeksforGeeks is : \" + res) \n\n", "idx": 6536, "target": 0}
{"func": "# Write a function to merge dictionaries\ndef merge1():\n    test_list1 = [{\"a\": 1, \"b\": 4}, {\"c\": 10, \"d\": 15},\n                  {\"f\": \"gfg\"}]\n    test_list2 = [{\"e\": 6}, {\"f\": 3, \"fg\": 10, \"h\": 1},\n                  {\"i\": 10}]\n    print(\"The original list 1 is : \" + str(test_list1))\n    print(\"The original list 2 is : \" + str(test_list2))\n    for idx in range(0, len(test_list1)):\n        id_keys = list(test_list1[idx].keys())\n        for key in test_list2[idx]:\n\n            if key not in id_keys:\n                test_list1[idx][key] = test_list2[idx][key]\n\n    print(\"The Merged Dictionary list : \" + str(test_list1))\n\n\n\n", "idx": 6537, "target": 0}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) for val in list1] \n  \nprint(res) \n\n", "idx": 6538, "target": 0}
{"func": "# Write a python program to turn every item of a list into its square.\nsample_list = [1, 2, 3, 4, 5, 6, 7]\nsquare_list =  [x * x for x in sample_list]\nprint(square_list)\n\n", "idx": 6539, "target": 0}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(secondSet)\nfor item in intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 6540, "target": 0}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nfor ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 6541, "target": 0}
{"func": "# write a python program to transpose a matrix using a nested loop\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n\n", "idx": 6542, "target": 0}
{"func": "#72 class to show as how to make the class as callable\nclass CallShow:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self, msg = 'Demo class to show how to make class object as callable'):\n        self.msg = msg\n\n    def __call__(self):\n        \"\"\"\n        to make object as callable the class should have __call__ in it\n        \"\"\"\n        return f\"Code to be writen here above to act as per accling object of call\"\n\n\n", "idx": 6543, "target": 0}
{"func": "# 47. python function for finding the exponent of a number\t\ndef exp(x):\n\n  \"\"\"returns e^x of a number\"\"\"\n\n  return math.exp(x)\n\n", "idx": 6544, "target": 0}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\ndef sum_of_roots(a:float,c:float):\n    if a:\n        return c/a\n    else:\n        return None\n\n", "idx": 6545, "target": 0}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\nwhile i < len(org_intervals)-1:\n    if org_intervals[i+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        del org_intervals[i+1]\n        i = i - 1\n    i = i + 1\nprint(org_intervals)\n\n", "idx": 6546, "target": 0}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 6547, "target": 0}
{"func": "# write a python function to calculate the volume of ellipsoid\n\n def volumeOfEllipsoid(r1, r2, r3): \n    return 1.33 * 22 * r1 * r2 * r3/7\n    \n", "idx": 6548, "target": 0}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nfor key in list(input_dict.keys()):\n  new_key = key[0].upper() + key[1:-1] + key[-1].upper()\n  input_dict[new_key] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 6549, "target": 0}
{"func": "# write a Python Function to rotate string left and right by d length \n\ndef rotate(input,d): \n\n    Lfirst = input[0 : d] \n    Lsecond = input[d :] \n    Rfirst = input[0 : len(input)-d] \n    Rsecond = input[len(input)-d : ] \n\n    print (\"Left Rotation : \", (Lsecond + Lfirst) ) \n    print (\"Right Rotation : \", (Rsecond + Rfirst)) \n\ninput = 'GeeksforGeeks'\nd=4\nrotate(input,d) \n\n", "idx": 6550, "target": 0}
{"func": "#16. Python program to find the factorial of a number.\nnum = 7\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n\n\n", "idx": 6551, "target": 0}
{"func": "# write a python program to read and print contents of a file\n\nfilepath = 'data.txt'\nwith open(filepath, 'r') as file:\n    data = file.read()\n    print(f'Data: {data}')\n\n", "idx": 6552, "target": 0}
{"func": "# Write a function pow(x, n), which calculates x raised to the power n \n\ndef myPow(x, n):\n    def pow(y, n):\n        if n == 0:\n            return 1.0\n        else:\n            partial = pow(x, n//2)\n            result = partial * partial\n            if n%2 == 1:\n                result *= x\n            return result\n           \n  \n    if n >= 0:\n        return pow(x, n)\n    else:\n        return 1/ pow(x, -n)\n\n\t\t\n", "idx": 6553, "target": 0}
{"func": "# write a python function to load pickle data from a file\ndef load_pickle_data(pickle_file):\n  import pickle\n  with open(pickle_file, 'rb') as f:\n      data = pickle.load(f)\n  return data\n\n", "idx": 6554, "target": 0}
{"func": "#Write a function to find time for a given angle.\ndef calcAngle(hh, mm):\n    hour_angle = 0.5 * (hh * 60 + mm)\n    minute_angle = 6 * mm\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - angle, angle)\n    return angle\n\n\n", "idx": 6555, "target": 0}
{"func": "# Write a Python function to multiply all values in the list\ndef multiplyList(myList) :\n    result = 1\n    for x in myList:\n         result = result * x \n    return result \n\n\t\n\t\n", "idx": 6556, "target": 0}
{"func": "# Write Python Program to Remove Punctuations From a String and print the cleaned string.\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, he said ---and went.\"\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\nprint(no_punct)   \n   \n\t\n\n\n\n", "idx": 6557, "target": 0}
{"func": "# count the vowels\ncount = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}\n\nprint(count)\n\n", "idx": 6558, "target": 0}
{"func": "# write a python function to convert Celsius to Fahrenheit.\n\ndef celsius_to_fahrenheit(degrees):\n  return ((degrees * 1.8) + 32)\n\n", "idx": 6559, "target": 0}
{"func": "# Write a Python program to find the total number of uppercase and lowercase letters in a given string\nstr1='TestStringInCamelCase'\nno_of_ucase, no_of_lcase = 0,0\nfor c in str1:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(no_of_lcase)\nprint(no_of_ucase)\n\n\n", "idx": 6560, "target": 0}
{"func": "# Write a Python class that will initiate a number, input a number and print the number\nclass Number:\n\tdef __init__(self, num):\n\t\tself.num = num\n\n\tdef inputNum(self):\n\t\tself.num = int(input(\"Enter an integer number: \"))\n\n\tdef printNum(self):\n\t\tprint(self.num)\n\n\n", "idx": 6561, "target": 0}
{"func": "# Write a Python program to count and display the vowels of a given text\n\ndef vowel(text):\nvowels = \"aeiuoAEIOU\"\nprint(len([letter for letter in text if letter in vowels]))\nprint([letter for letter in text if letter in vowels])\nvowel('zekelabs')\n\n", "idx": 6562, "target": 0}
{"func": "# 69 write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\nimport random\n\nprint(random.sample([i for i in range(1, 1001) if i % 5 == 0 and i % 7 == 0], 5))\n\n", "idx": 6563, "target": 0}
{"func": "# Check if the key exists or not in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"john wick\",\n   \"class\": 8,\n   \"percentage\": 75,\n   \"email\": \"jhon@pynative.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nif \"percentage\" in student:\n    print(\"Key exist in JSON data\")\n    print(student[\"name\"], \"marks is: \", student[\"percentage\"])\nelse:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 6564, "target": 0}
{"func": "# This function computes GCD \ndef compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 6565, "target": 0}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are squares of the key\nsquare_dict = {}\nfor i in range(1, 11):\n   square_dict[i] = i*i\n\n\n", "idx": 6566, "target": 0}
{"func": "# Write a Python Program to Print an Identity Matrix\nn = 3\nfor i in range(0,n):\n    for j in range(0,n):\n        if(i==j):\n            print(\"1\",sep=\" \",end=\" \")\n        else:\n            print(\"0\",sep=\" \",end=\" \") \t\n\t\t\t\n\t\t\t\n\t\n\t\t\t\n", "idx": 6567, "target": 0}
{"func": "# write a python program to get indexes starting at a specified number for each element in a list using enumerate\n  \n  l1 = [\"eat\",\"sleep\",\"repeat\"] \n  for count,ele in enumerate(l1,100): \n      print (count,ele )\n      \n", "idx": 6568, "target": 0}
{"func": "# Python program to compute distance between two points\ndef points(x1, x2):\n    import math\n    p1 = list(x1)\n    p2 = list(x2)\n    distance = math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))\n    print(distance)\n\n\npoints((2, 3), (4, 5))\n\n\n", "idx": 6569, "target": 0}
{"func": "# initializing type \ntarg_type = int\n  \nres = [] \nfor key, val in test_dict.items(): \n  \n    # checking for values datatype \n    if isinstance(val, targ_type): \n        res.append(key) \n  \n", "idx": 6570, "target": 0}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres = calculateSum(10)\nprint(res)\n\n", "idx": 6571, "target": 0}
{"func": "# write a recursive python function to print the nth fibonacci number, where n is provided as the argument\ndef fibonacci_recursive(n):\n   if n <= 1:\n       return n\n   else:\n       return (recur_fibo(n-1) + recur_fibo(n-2))\n\n\n", "idx": 6572, "target": 0}
{"func": "# write Python Program to print the Sum of 10 Natural Numbers\nnum = 10\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n   \n\n   \n   \n", "idx": 6573, "target": 0}
{"func": "# Define a class named American and its subclass NewYorker. \nclass American(object):\n    pass\n\nclass NewYorker(American):\n    pass\n\n", "idx": 6574, "target": 0}
{"func": "# Write a Python function to return binary value of a given integer\ndef int_to_bin(a):\n  return bin(a)\n\n\n", "idx": 6575, "target": 0}
{"func": "#15.Python program to display all the prime numbers within an interval\n\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 6576, "target": 0}
{"func": "#28 function to check two number ( floating also )  are close or not\ndef check_isclose(x, y)\n    from math import isclose\n    return isclose(x, y)\n\n\n", "idx": 6577, "target": 0}
{"func": "# write a python function to print pyramid pattern\ndef pyramid_pattern(symbol='*', count=4):\n    for i in range(1, count + 1):\n        print(' ' * (count - i) + symbol * i, end='')\n        print(symbol * (i - 1) + ' ' * (count - i))\n\n\n", "idx": 6578, "target": 0}
{"func": "# Write a Python program to shuffle and print a deck of card\n\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\n\nrandom.shuffle(deck)\n\nprint(\"You got:\")\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])\n\n   \n   \n", "idx": 6579, "target": 0}
{"func": "# write a python function to print every alternate number in the user provided list \ndef print_alternate_numbers(list1):\n\tprint(list1[::2])\n\n\n\t\n", "idx": 6580, "target": 0}
{"func": "# write a python function to find the volume of tetraheadron\n\n def vol_tetra(side): \n    volume = (side ** 3 / (6 * 1.414)) \n    return round(volume, 2)\n \n", "idx": 6581, "target": 0}
{"func": "# write a python program to print the number of uppercase and lowercase letters in a string\nsentence = 'The Quick Brown Fox'\nlowercase = 0\nuppercase = 0\nfor c in sentence:\n   if c.isupper():\n      uppercase += 1\n   elif c.islower():\n      lowercase += 1\n   else:\n      pass\nprint(f'Lowercase: {lowercase}, Uppercase: {uppercase}')\n\n\n", "idx": 6582, "target": 0}
{"func": "# write Python program to Create a Dictionary with Key as First Character and Value as Words Starting with that Character \n\nstring_input = '''GeeksforGeeks is a Computer Science portal for geeks. \n    It contains well written, well thought and well explained \n    computer science and programming articles, quizzes etc.'''\n\nwords = string_input.split() \n\ndictionary = {} \n\nfor word in words: \n\n    if (word[0].lower() not in dictionary.keys()): \n\n        dictionary[word[0].lower()] = [] \n        dictionary[word[0].lower()].append(word) \n\n    else: \n\n        if (word not in dictionary[word[0].lower()]): \n            dictionary[word[0].lower()].append(word) \n\nprint(dictionary) \n\n", "idx": 6583, "target": 0}
{"func": "# Using max() + lambda \nres = max(test_dict.items(), key = lambda ele: ele[1][tup_idx])\n", "idx": 6584, "target": 0}
{"func": "# Write a program to convert dictionary into JSON\nimport json\ndata = {\"key1\" : \"value1\", \"key2\" : \"value2\"}\njsonData = json.dumps(data)\nprint(jsonData)\n\n", "idx": 6585, "target": 0}
{"func": "# write a python function to convert a number from decimal to octal\n \n def decToOctal(n):\n    octalNum = [0] * 100\n    i = 0\n    while (n != 0):\n        octalNum[i] = n % 8\n        n = int(n / 8)\n        i += 1\n    for j in range(i - 1, -1, -1):\n        print(octalNum[j], end=\"\")\n      \n", "idx": 6586, "target": 0}
{"func": "# Write a Python function that Given a list of numbers, Iterate it and print only those numbers which are divisible of 5\ndef findDivisible(numberList):\n    for num in numberList:\n        if (num % 5 == 0):\n            print(num)\n\n\n", "idx": 6587, "target": 0}
{"func": "# write a python function to read first n lines from a file\n\ndef file_read_from_head(fname, nlines):\n    from itertools import islice\n    with open(fname) as f:\n      for line in islice(f, nlines):\n        print(line)\n\n", "idx": 6588, "target": 0}
{"func": "# 54 Write a python function that implements the ReLU function\n\n\ndef relu(arr):\n    return [x if x > 0 else 0 for x in arr]\n\n\n", "idx": 6589, "target": 0}
{"func": "#Write a function to print all time when angle between hour hand and minute\ndef printTime(theta):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n\n\n", "idx": 6590, "target": 0}
{"func": "# write a python function to locate the rightmost value less than x \ndef find_lt(a, x):\n    from bisect import bisect_left  \n    i = bisect_left(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 6591, "target": 0}
{"func": "# 96 write a python function that takes a number and returns an array of the number duplicated n times\n\n\ndef duplicate_array(num, n):\n    num = [num] * n\n    return num\n\n\n", "idx": 6592, "target": 0}
{"func": "# write a python function to calculate the dot product of two lists\ndef dot(l1, l2):\n    return sum(x*y for x,y in zip(l1, l2))\n\n", "idx": 6593, "target": 0}
{"func": "# write a python function to find leftmost item greater than or equal to x\ndef find_ge(a, x):\n    from bisect import bisect_left \n    i = bisect_left(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\n\n", "idx": 6594, "target": 0}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 6595, "target": 0}
{"func": "#Write a function to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > arr[h]:\n        t = arr[l]\n        arr[l] = arr[h]\n        arr[h] = t\n    if h - l + 1 > 2:\n        t = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - t))\n        stoogesort(arr, l + t, (h))\n        stoogesort(arr, l, (h - t))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end = '')\n\n", "idx": 6596, "target": 0}
{"func": "# Write a Python program to Subtract a week ( 7 days) from a given date in Python \nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n\n", "idx": 6597, "target": 0}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_area(a:float)->float:\n    if a:\n        return (3**(1/2))*(a**2)/4\n    else:\n        return None\n\n", "idx": 6598, "target": 0}
{"func": "# write a python function to remove vowels from a string\ndef vowel_remover(text):\n    string = \"\"\n    for l in text:\n        if l.lower() != \"a\" and l.lower() != \"e\" and l.lower() != \"i\" and l.lower() != \"o\" and l.lower() != \"u\":\n            string += l\n    return string\n\n", "idx": 6599, "target": 0}
{"func": "# write a python program uses else with for loop\nseq = \"abcde\"\nfor k in seq:\n    if k == \"f\":\n        break\nelse:\n    print(\"f Not Found!\")\n\n\n", "idx": 6600, "target": 0}
{"func": "#80 write a Python program to print the roots of a quadratic equation\nimport math\na = float(input(\"Enter the first coefficient: \"))\nb = float(input(\"Enter the second coefficient: \"))\nc = float(input(\"Enter the third coefficient: \"))\nif (a!=0.0):\n    d = (bb)-(4ac) \n    if (d==0.0):\n        print(\"The roots are real and equal.\") \n        r = -b/(2a)\n        print(\"The roots are \", r,\"and\", r)\n    elif(d>0.0):\n        print(\"The roots are real and distinct.\")\n        r1 = (-b+(math.sqrt(d)))/(2a) \n        r2 = (-b-(math.sqrt(d)))/(2a)\n        print(\"The root1 is: \", r1)\n        print(\"The root2 is: \", r2)\n    else:\n        print(\"The roots are imaginary.\")\n        rp = -b/(2a) ip = math.sqrt(-d)/(2a)\n        print(\"The root1 is: \", rp, \"+ i\",ip)\n        print(\"The root2 is: \", rp, \"- i\",ip)\nelse:\n    print(\"Not a quadratic equation.\"\n\n", "idx": 6601, "target": 0}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary\n\ndef mul_dict(d):\n    tot=1\n    for i in d:    \n        tot=tot*d[i]\n    return tot\n\n", "idx": 6602, "target": 0}
{"func": "# write a python program to find the average of list of numbers provided as input by user\nn=int(input(\"Enter the number of elements to be inserted: \"))\na=[]\nfor i in range(0,n):\n    elem=int(input(\"Enter element: \"))\n    a.append(elem)\navg=sum(a)/n\nprint(\"Average of elements in the list\",round(avg,2))\n\n", "idx": 6603, "target": 0}
{"func": "# write a python Program to Determine all Pythagorean Triplets in the Range\nlimit= 50\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            break\n        print(a,b,c)\n    m=m+1\n\n", "idx": 6604, "target": 0}
{"func": "# write a program to find absoluute number of a given number\nimport math\n\nnumber = 34.564\nfa = math.fabs(number)\nprint('Fabs', fa)\n\n\n", "idx": 6605, "target": 0}
{"func": "# Write a Python function that returns the integer obtained by reversing the digits of the given integer\ndef reverse(n):\n    s=str(n) \n    p=s[::-1]\n    return p \n\n\n", "idx": 6606, "target": 0}
{"func": "# 65 write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport random\n\nprint(random.choice([i for i in range(11) if i % 2 == 0]))\n\n", "idx": 6607, "target": 0}
{"func": "# Write a Python program to compute the autocorrelations for first 10 lags of a numeric series\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.arange(20) + np.random.normal(1, 10, 20))\nautocorrelations = [ser.autocorr(i).round(2) for i in range(11)]\nprint(autocorrelations[1:])\n\n", "idx": 6608, "target": 0}
{"func": "# performing rotate \nres = [test_dict[(i - K) % len(test_dict)] \n       for i, x in enumerate(test_dict)] \n  \n", "idx": 6609, "target": 0}
{"func": "#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.\nnums = []\n\nfor i in range(3):\n\n    nums.append([])\n\n    for j in range(2):\n\n        nums[i].append(0)\nprint(\"Multidimensional list:\")\nprint(nums)\n\n", "idx": 6610, "target": 0}
{"func": "# write a function to return the mean difference in the length of keys and values of dictionary comprising of strings only.\ndef mean_key_val_diff(input_dict):\n  sum_diff = 0\n  for key, val in input_dict.items():\n    sum_diff += abs(len(val) - len(key))\n  return sum_diff/len(input_dict)\n\n", "idx": 6611, "target": 0}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    return (4/3)*pi*(radius**3)\n\n", "idx": 6612, "target": 0}
{"func": "# Write a python program to Count the Occurrences of a Word in a Text File\n\nfname = input(\"Enter file name: \")\nword='the'\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(f\"Frequency of Occurrences of the word {a} is:\")\nprint(k)\n\n", "idx": 6613, "target": 0}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            count = count + 1\n    return count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 6614, "target": 0}
{"func": "# write a python function to load pickle data from a file\ndef load_pickle_data(pickle_file):\n  import pickle\n  with open(pickle_file, 'rb') as f:\n      data = pickle.load(f)\n  return data\n\n", "idx": 6615, "target": 0}
{"func": "#18 how to break out of nested loops python\nx_loop_must_break = False\n\nfor x in [1, 2, 3]:\n    print(f\"x is {x}\")\n    for y in [1, 2, 3]:\n        print(f\"y is {y}\")\n        if y == 2:\n            x_loop_must_break = True\n            break\n    if x_loop_must_break: break\n\n", "idx": 6616, "target": 0}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\n\ndef count_blank_space(fname):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isspace):\n                        k=k+1\n    return k\n\n", "idx": 6617, "target": 0}
{"func": "# write Python3 code to demonstrate Remove Rear K characters from String List using map() + lambda \n\ntest_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 4\n\nres = list(map(lambda i: i[ : (len(i) - K)], test_list)) \n\nprint(\"The list after removing last characters : \" + str(res)) \n\n\n\n", "idx": 6618, "target": 0}
{"func": "# write a python program that would print the first n positive integers using a for loop\nn = 62\nfor num in range(n):\n    print(num)\n\n\n", "idx": 6619, "target": 0}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + first\n    return result\n\n\n", "idx": 6620, "target": 0}
{"func": "# write a python function to get prominent words from user test corpus using TFIDF vectorizer\ndef get_words(corpus, new_doc, top=2):\n    import numpy as np\n    from sklearn.feature_extraction.text import TfidfVectorizer\n\n    tfidf = TfidfVectorizer(stop_words='english')\n    if not corpus:\n        corpus = [\n            'I would like to check this document',\n            'How about one more document',\n            'Aim is to capture the key words from the corpus',\n            'frequency of words in a document is called term frequency'\n        ]\n\n    X = tfidf.fit_transform(corpus)\n    feature_names = np.array(tfidf.get_feature_names())\n\n    if not new_doc:\n        new_doc = ['can key words in this new document be identified?',\n                   'idf is the inverse document frequency calculated for each of the words']\n    responses = tfidf.transform(new_doc)\n\n    def get_top_tf_idf_words(response, top_n=top):\n        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]\n        return feature_names[response.indices[sorted_nzs]]\n\n    print([get_top_tf_idf_words(response, 2) for response in responses])\n\n\n", "idx": 6621, "target": 0}
{"func": "# Convert dictionary to JSON\nimport json\nperson_dict = {'name': 'Bob',\n'age': 12,\n'children': None\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 6622, "target": 0}
{"func": "#Write a function to convert time from 12 hour to 24 hour format\ndef convert24(str1):\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\nprint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 6623, "target": 0}
{"func": "# Write a function to adds two lists element wise only if numbers are even\ndef adds_listevenelements(l1:list, l2:list):\n    return [i+j for i, j in zip(l1,l2) if i*j%2 == 0]\n\n", "idx": 6624, "target": 0}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Ishwar Venugopal\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"ishwarraja@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(student.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 6625, "target": 0}
{"func": "# write a python function that returns binary representation of given number\n\ndef to_binary(n):\n  return bin(n)\n\n", "idx": 6626, "target": 0}
{"func": "# write a python program to make increment on each call of method using lambda function\ndef make_incrementor(n):\n    return lambda x: x + n\nf = make_incrementor(42)\nf(0)\nprint(f(1))\n\n", "idx": 6627, "target": 0}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\ndef cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*r*math.sin(theta)\n\n", "idx": 6628, "target": 0}
{"func": "#11 write a python function to filter Rows with a specific pair sum and return boolean value\n\ndef pair_sum(x, k): \n  \n    # checking pair sum \n    for idx in range(len(x)): \n        for ix in range(idx + 1, len(x)): \n            if x[idx] + x[ix] == k: \n                return True\n    return False\n  \n  \n", "idx": 6629, "target": 0}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 6630, "target": 0}
{"func": "# write Python3 code to demonstrate working of  Merge Python key values to list  Using setdefault() + loop \n\ntest_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, \n            {'it' : 5, 'is' : 7, 'best' : 8}, \n            {'CS' : 10}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = {} \nfor sub in test_list: \n    for key, val in sub.items(): \n        res.setdefault(key, []).append(val) \n\nprint(\"The merged values encapsulated dictionary is : \" + str(res)) \n\n\n", "idx": 6631, "target": 0}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    pi = 3.14\n    return 2*pi*(radius**2)\n\n", "idx": 6632, "target": 0}
{"func": "# 20 write a function which returns the count of each token in a given sentence as a dictionary\n\nfrom collections import Counter\n\n\ndef count_tokens(sent):\n    sent = list(sent)\n    return dict(Counter(sent))\n\n\n", "idx": 6633, "target": 0}
{"func": "# write a python program to check if the list is empty\n\nl = []\nif not l:\n  print(\"List is empty\")\nelse:\n  print(\"List is not empty\")\n\n", "idx": 6634, "target": 0}
{"func": "#write Python3 code to demonstrate working of Check if tuple has any None value using any() + map() + lambda \ntest_tup = (10, 4, 5, 6, None) \nres = any(map(lambda ele: ele is None, test_tup)) \nprint(\"Does tuple contain any None value ? : \" + str(res)) \n\n", "idx": 6635, "target": 0}
{"func": "# Write a Python function to convert a string list to a normal list type\nimport ast\ndef convert_string_to_list(str_lst):\n    return ast.literal_eval(str_lst)\n\n\n", "idx": 6636, "target": 0}
{"func": "#79 class to show implementation of custom sequence of list\nclass CustomList:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = [1,2,3,4]\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n            \n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n\n", "idx": 6637, "target": 0}
{"func": "# write a program to find factorinal of a number\nimport math\n\nnumber = 8\nfa = math.factorial(number)\nprint('Factorial', fa)\n\n", "idx": 6638, "target": 0}
{"func": "#20 how to check if a list is a subset of another list\nif(all(x in test_list for x in sub_list)): \n    flag = True\n\n", "idx": 6639, "target": 0}
{"func": "# Write a function to determine whether a given number is even or odd recursively\n\ndef check(n):\n    if (n < 2):\n        return (n % 2 == 0)\n    return (check(n - 2))\nn=int(input(\"Enter number:\"))\nif(check(n)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")\n\n\n", "idx": 6640, "target": 0}
{"func": "# write a function which creates a deck of cards, given the list of suits and values\ndef create_deck_of_cards(values: list, suits: list):\n    card_deck = []\n    for i in range(52):\n        tup = (values[i], suits[i])\n        card_deck.append(tup)\n    return card_deck\n\n", "idx": 6641, "target": 0}
{"func": "# write a python program to calculate the time taken\n\nfrom time import localtime\n\nactivities = {8: 'Sleeping',\n              9: 'Commuting',\n              17: 'Working',\n              18: 'Commuting',\n              20: 'Eating',\n              22: 'Resting' }\n\ntime_now = localtime()\nhour = time_now.tm_hour\n\nfor activity_time in sorted(activities.keys()):\n    if hour < activity_time:\n        print (activities[activity_time])\n        break\nelse:\n    print ('Unknown, AFK or sleeping!')\n\n\n", "idx": 6642, "target": 0}
{"func": "# Write a function that returns tan value of the input\ndef tan(x:float) -> float:\n    import math\n    return math.tan(x)\n\n", "idx": 6643, "target": 0}
{"func": "# 5. python function to strip vowels from a string\ndef strip_vowel_str(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join([x for x in str if x not in vowels])\n\n", "idx": 6644, "target": 0}
{"func": "# Write a Python function to Find the Power of a Number Using Recursion\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\n\n", "idx": 6645, "target": 0}
{"func": "# Write a Python function for Binary Search\ndef binary_search(l, num_find):\n    '''\n    This function is used to search any number.\n    Whether the given number is present in the\n    list or not. If the number is present in list\n    the list it will return TRUE and FALSE otherwise.\n    '''\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    found = False\n    position = -1\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            position = mid\n            break\n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n    return (found, position)\n\n\n", "idx": 6646, "target": 0}
{"func": "# Write a python program to Count Numbers, Alphabets, and Special Character\nText = input (\"Enter Text: \")\nletter, number, spaces , special = 0,0,0,0\nfor i in Text:\nif i.isalpha():\nletter+=1\nelif i.isspace():\nspaces +=1\nelif i.isnumeric():\nnumber +=1\nelse:\nspecial+=1\nprint(\" Alphabets = {} \\n Numbers = {} \\n Space = {} \\n Special Chracter = {}\".format(letter,number,spaces,special))\n\n", "idx": 6647, "target": 0}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 6648, "target": 0}
{"func": "# Write a Python Program to Put Even and Odd elements in a List into Two Different Lists\n\na=[2, 3, 8, 9, 2, 4, 6]\neven=[]\nodd=[]\nfor j in a:\n    if(j%2==0):\n        even.append(j)\n    else:\n        odd.append(j)\nprint(\"The even list\",even)\nprint(\"The odd list\",odd)\n\n", "idx": 6649, "target": 0}
{"func": "# Write a Python program to Calculate the sum of the digits of a random three-digit number and print the result.\n\nimport random \n\nn = random() * 900 + 100 \nn = int(n) \nprint(n) \n\na = n // 100 \nb = (n // 10) % 10 \nc = n % 10 \n\nprint(a + b + c)\n\n", "idx": 6650, "target": 0}
{"func": "# Write a function that sorts list of numbers and returns top element\n\ndef biggest_no(l:list)->int:\n    sorted(l)\n\n", "idx": 6651, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Strong Number\n\ndef strong_no_check(num):\n    sum1=0\n    temp=num\n    while(num):\n        i=1\n        f=1\n        r=num%10\n        while(i<=r):\n            f=f*i\n            i=i+1\n        sum1=sum1+f\n        num=num//10\n    if(sum1==temp):\n        return True\n    else:\n        return False\n\n", "idx": 6652, "target": 0}
{"func": "# Write a Python function to return octal value of a given integer\ndef int_to_oct(a):\n  return oct(a)\n\n\n", "idx": 6653, "target": 0}
{"func": "# write a python function that returns every nth element in a list\n\ndef every_nth(lst, nth):\n  return lst[nth - 1::nth]\n\n", "idx": 6654, "target": 0}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 6655, "target": 0}
{"func": "# write a python program to find sum of natural numbers up to a 16\n\nnum = 16\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 6656, "target": 0}
{"func": "# Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(object):\n    def getGender( self ):\n        return \"Unknown\"\nclass Male( Person ):\n    def getGender( self ):\n        return \"Male\"\nclass Female( Person ):\n    def getGender( self ):\n        return \"Female\"\naMale = Male()\naFemale= Female()\nprint aMale.getGender()\nprint aFemale.getGender()\n\n", "idx": 6657, "target": 0}
{"func": "# 7 write a python function to return every nth number from a list\n\n\ndef every_nth_number(lst, n):\n    return lst[::n]\n\n\n", "idx": 6658, "target": 0}
{"func": "# initializing Dictionary \ntest_dict = {'geeks' : 1, 'best': 6} \nl=test_str.split()\nprint(l)\ns=''\nfor i in l:\n    if i in test_dict:\n       l.remove(i)\nprint(\" \".join(i for i in l))\n\n\n", "idx": 6659, "target": 0}
{"func": "# Please write a function using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\ndef EvenGenerator(n):\n    i=0\n    while i<=n:\n        if i%2==0:\n            yield i\n        i+=1\n\n", "idx": 6660, "target": 0}
{"func": "# write a python program to print only digit or only apha charac in a given list\nl=[\"good\", \"oh!\", \"excellent!\", \"#450\"]\nprint([n for n in l if n.isalpha() or n.isdigit()])\n\n", "idx": 6661, "target": 0}
{"func": "# 85 write a program which count and print the numbers of each character in a string\ndic = {}\ns = \"JRR Tolkien\"\nfor s in s:\n    dic[s] = dic.get(s, 0) + 1\nprint(\"\\n\".join([\"%s,%s\" % (k, v) for k, v in dic.items()]))\n\n", "idx": 6662, "target": 0}
{"func": "#Write a fucntion to convert Fahrenheit to Celsius\ndef Fahrenheit_to_Celsius(f):\n    celsius = (f - 32) / 1.8\n    return celsius\n\n12.\n", "idx": 6663, "target": 0}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\n\nclass CircleArea():\n    def __init__(self,radius):\n        self.radius=radius\n    def area(self):\n        return 3.14 * self.radius * self.radius\na=6\nobj=CircleArea(a)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 6664, "target": 0}
{"func": "# Python program that accepts an integer (n) and computes the value of n+nn+nnn.\n\ndef custom(n):\n    a = n\n    n1 = int(\"%s\" % a)\n    n2 = int(\"%s%s\" % (a, a))\n    n3 = int(\"%s%s%s\" % (a, a, a))\n    return n1 + n2 + n3\n\n\nprint(custom(20))\n\n\n", "idx": 6665, "target": 0}
{"func": "# write a python function to calculate nPr\n\n def nPr(n, r):  \n    \n    def fact(n):  \n        if (n <= 1): \n            return 1\n        return n * fact(n - 1)\n\n    return int(fact(n) /\n                fact(n - r))\n                \n", "idx": 6666, "target": 0}
{"func": "# write a Python program to calculate number of days between two dates.\nfrom datetime import date\nf_date = date(2019, 4, 15) # YYYY/MM/DD\nl_date = date(2020, 4, 15) # YYYY/MM/DD\ndelta = l_date - f_date\nprint(f'No of days between {f_date} and {l_date} is:{delta.days}')\n\n", "idx": 6667, "target": 0}
{"func": "# 31 write a function that checks if a number is an Armstrong number (sum of digits of the number = the number)\n\nfrom itertools import chain\n\n\ndef check_armstrong(n):\n    sum_of_digits = sum(map(lambda x: int(x) ** 3, chain(str(n))))\n    if sum_of_digits == n:\n        return True\n    else:\n        return False\n\n\n", "idx": 6668, "target": 0}
{"func": "# Write a lambda functio that gives the word count in a statement.\n\ncount_word = lambda s: len(s.split(' '))\n\n\n", "idx": 6669, "target": 0}
{"func": "# 15 write a function to implement a binary tree\n\n\nclass BinTree:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n\n", "idx": 6670, "target": 0}
{"func": "# Write a python to find LCM of two numbers\na=int(input(\"Enter the first number:\"))\nb=int(input(\"Enter the second number:\"))\nif(a>b):\nmin1=a\nelse:\nmin1=b\nwhile(1):\nif(min1%a==0 and min1%b==0):\nprint(\"LCM is:\",min1)\nbreak\nmin1=min1+1\n\n", "idx": 6671, "target": 0}
{"func": "# write a python function that call another function and that function prints \"Inside B\"\ndef A():\n    B()\n\ndef B():\n    print(\"Inside B\")\n\nA()\n\n\n", "idx": 6672, "target": 0}
{"func": "# Write a Python function to Check Whether a Given Year is a Leap Year\n\ndef leapyear_check(year):\n    if(year%4==0 and year%100!=0 or year%400==0):\n        return True\n    else:\n        return False\n\n", "idx": 6673, "target": 0}
{"func": "# Write a Python program to access a function inside a function\ndef test(a):\ndef add(b):\nnonlocal a\na += 1\nreturn a+b\nreturn add\nfunc= test(4)\nprint(func(4))\n\n", "idx": 6674, "target": 0}
{"func": "# Write a python fuction to create an empty list \n  \ndef emptylist():\n   return list()  \n\n", "idx": 6675, "target": 0}
{"func": "# write a python program that prints the circumference of a circle\nimport math\nradius = 10\nprint(f'Area: {2 * math.pi * radius}')\n\n\n", "idx": 6676, "target": 0}
{"func": "# write a  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda \n \ntest_list = [{\"Gfg\" : [6, 7, 8], \"is\" : 9, \"best\" : 10}, \n            {\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19}, \n            {\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}] \nprint(\"The original list : \" + str(test_list)) \nK = \"Gfg\"\nidx = 2\nres = sorted(test_list, key = lambda ele: ele[K][idx]) \nprint(\"The required sort order : \" + str(res)) \n\n", "idx": 6677, "target": 0}
{"func": "# Write a Python program to Multiply two list and print the resultant list\ntest_list1 = [1, 3, 4, 6, 8] \ntest_list2 = [4, 5, 6, 2, 10] \nres_list = [] \nfor i in range(0, len(test_list1)): \n    res_list.append(test_list1[i] * test_list2[i])\t\nprint (\"Resultant list is : \" + str(res_list)) \t\n\n\n\n\n", "idx": 6678, "target": 0}
{"func": "# Write a program to perform Consecutive prefix overlap concatenation Using endswith() + join() + list comprehension + zip() + loop \n  \ndef help_fnc(i, j): \n    for ele in range(len(j), -1, -1): \n        if i.endswith(j[:ele]): \n            return j[ele:] \n  \n\ntest_list = [\"India\", \"gone\", \"new\", \"best\"] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = ''.join(help_fnc(i, j) for i, j in zip([''] + \n                           test_list, test_list)) \n  \nprint(\"The resultant joined string : \" + str(res)) \n\n\n", "idx": 6679, "target": 0}
{"func": "# write a python program to print transpose a matrix and print\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 6680, "target": 0}
{"func": "# Define a function that can accept an integer number as input and print the \"It is an even number\" if the number is even, otherwise print \"It is an odd number\".\ndef even_or_odd_num(n):\n    if n%2 == 0:\n        print(\"It is an even number\")\n    else:\n        print(\"It is an odd number\")\n\n", "idx": 6681, "target": 0}
{"func": "# write a python program for basic HTML parser\nfrom html.parser import HTMLParser\n\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(tag)\n        for attr in attrs:\n            print(\"->\", attr[0], \">\", attr[1])\n\n\nparser = MyHTMLParser()\n\nfor i in range(int(input())):\n    parser.feed(input())\n\n\n", "idx": 6682, "target": 0}
{"func": "# Please write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\nimport zlib\ns = b'hello world!hello world!hello world!hello world!'\nt = zlib.compress(s)\nprint(t)\nprint(zlib.decompress(t))\n\n", "idx": 6683, "target": 0}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\ndef cal_speed(distance:float,time:float)->float:\n    return distance/time\n\n", "idx": 6684, "target": 0}
{"func": "#68 write a function to unpack tuple of minimum 2 value to unlimited length int first two and rest\ndef unpack_tuple(tup):\n    a, b , *c = tup\n    return a , b, c\n\n\n\n", "idx": 6685, "target": 0}
{"func": "# write a python function to append text to a user provided file\n\ndef file_read(fname):\n    with open(fname, \"w\") as myfile:\n      myfile.write(\"Appending line one\\n\")\n      myfile.write(\"Appending line two\")\n      txt = open(fname)\n      print(txt.read())\n\n", "idx": 6686, "target": 0}
{"func": "# write a python function to print the binary value of a decimal number\ndef print_binary(dec):\n   print(bin(dec))\n\n\n", "idx": 6687, "target": 0}
{"func": "# write a python function to decapitalize the first letter of user provided string.\n\ndef decapitalize(s, upper_rest = False):\n  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])])\n\n", "idx": 6688, "target": 0}
{"func": "# Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given\ndef simple_interest(p,r,t):\n    si = (p*r*t)/100\n    return si\n\n\n", "idx": 6689, "target": 0}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nfor key in dict_1:\n  if len(key)>len(max_key):\n    max_key=key\nprint(max_key)\n\n", "idx": 6690, "target": 0}
{"func": "# write a python function to return only even numbers in a list\ndef filter_even(nums):\n   return list(filter(lambda num: num % 2 == 0, nums))\n\n\n", "idx": 6691, "target": 0}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\ndef print_dict_keys_val_4():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor k in d.keys():\t\n\t\tprint(k)\n\n\n", "idx": 6692, "target": 0}
{"func": "# if else for \nfor i in range(5):\n    if i == 1:\n        print('in for')\nelse:\n    print('in else')\nprint('after for-loop')\n\n", "idx": 6693, "target": 0}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for i in original_prices]\nprint(f\"Final List:{prices}\")\n\n", "idx": 6694, "target": 0}
{"func": "# 81 By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12, 24, 35, 24, 88, 120, 155]\nli = [x for x in li if x != 24]\nprint(li)\n\n", "idx": 6695, "target": 0}
{"func": "# write Python code to convert radian to degree \ndef Convert(radian): \n    pi = 3.14159\n    degree = radian * (180/pi) \n    return degree \nradian = 5\nprint(\"degree =\",(Convert(radian))) \n\n", "idx": 6696, "target": 0}
{"func": "# P(n) = P(n\u22122) + P(n\u22123) for n \u2265 3, with P(0) = 3, P(1) = 0, P(2) = 2. \ndef perrins_number(n):\n    if n >= 0:\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrins_number(n-3) + perrins_number(n-2)\n     \n       \n", "idx": 6697, "target": 0}
{"func": "# Write a function to find sum of nested list using Recursion\ntotal = 0\ndef sum_nestedlist(l):\n    global total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 6698, "target": 0}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char in str1:\n    if char.islower():\n        lower.append(char)\n    else:\n        upper.append(char)\nsorted_string = ''.join(lower + upper)\nprint(sorted_string)\n\n", "idx": 6699, "target": 0}
{"func": "# write a python function to map multiple lists using zip\ndef map_values(*args):\n  return set(zip(*args))\n\n", "idx": 6700, "target": 0}
{"func": "# write a list comprehension for number and its cube \nl=[1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint([x**3 for x in l])\n\n", "idx": 6701, "target": 0}
{"func": "# Write a function that returns list of elements with n power to elements of list\ndef n_power(l1:list, power:int)->list:\n    return [i**power for i in l1]\n\n\n", "idx": 6702, "target": 0}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 6703, "target": 0}
{"func": "# write a python function that takes in a list of sequences and zips each corresponding element from the list into a tuple and returns the list of such tuples\ndef zip_(list_of_seq):\n    return list(zip(*list_of_seq))\n\n\n", "idx": 6704, "target": 0}
{"func": "# 33 write a program that shows how child class can access the init method of the parent class using super\n\n\nclass A:\n    def __init__(self):\n        print(\"My name is GYOBU MASATAKA ONIWA!\")\n\n\nclass B(A):\n    def __init__(self):\n        super(B, self).__init__()\n        print(\"as I breath, you WILL not pass the castle gates!\")\n\n\ntmp = B()\n\n", "idx": 6705, "target": 0}
{"func": "# write a python function that takes a list of elements and n as input, extract and append first n characters and last n characters of each string and return the resultant list\ndef nchar (list1,no):\n    return [items[:no]+items[-no:] for items in list1]\nlist1 = [\"ROHAN\", \"END\"]\nnchar(list1, 3)\n\n\n", "idx": 6706, "target": 0}
{"func": "# write a python program which takes input a number N and print first N elements of fibonacci series\n\nN = int(input(\"Please enter a number \"))\nfirst = 0\nsecond = 1\nprint(first)\nprint(second)\nfor a in range(1,N-1):\n    third = first + second\n    print(third)\n    first,second = second , third\n    \n", "idx": 6707, "target": 0}
{"func": "# write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n    return index\n\n", "idx": 6708, "target": 0}
{"func": "# write a python function to advance the iterator n-steps ahead\ndef consume(iterator, n=None):\n    import itertools\n    from collections import deque\n    \"Advance the iterator n-steps ahead. If n is None, consume entirely.\"\n    # Use functions that consume iterators at C speed.\n    if n is None:\n        # feed the entire iterator into a zero-length deque\n        deque(iterator, maxlen=0)\n    else:\n        # advance to the empty slice starting at position n\n        next(itertools.islice(iterator, n, n), None)\n\n", "idx": 6709, "target": 0}
{"func": "# Write a Python program to find the positions of numbers that are multiples of 3 from a series\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.random.randint(1, 10, 7))\nprint(np.argwhere(ser.values % 3 == 0))\n\n", "idx": 6710, "target": 0}
{"func": "# 42. python function for finding the derivative of cosine angle\ndef dcosine(angle):\n\n    \"\"\" returns the cosine value for an angle mentioned in radians\"\"\"\n\n    return -math.sin(angle)\n\n", "idx": 6711, "target": 0}
{"func": "#1 write a program to reverse a list \nlst = [11, 5, 17, 18, 23]\ndef reverse(lst): \n    new_lst = lst[::-1] \n    return new_lst\n\t\n", "idx": 6712, "target": 0}
{"func": "# write a python program to print the sum of first n numbers\nn = 10\nsum = 0\nwhile n > 0:\n   sum += n\n   n -= 1\nprint(sum)\n\n\n", "idx": 6713, "target": 0}
{"func": "# By using list comprehension, please write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for x in li if x%5!=0 and x%7!=0]\nprint(li)\n\n", "idx": 6714, "target": 0}
{"func": "# Write a python program to generate a random number between 1 and 9 (including 1 and 9) and Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right.\nimport random\nimport math\n\nx = math.floor((random.random() * 10) + 1)\nguess=0\nwhile guess != x:\n    guess = int(input(\"Guess a number: \"))\n    if(guess == x):\n        print(\"you got It!\")\n        print(\"Number is \", x)\n        break\n    elif(guess>x):\n        print(\"You Guesses too high!\")\n    else:\n        print(\"You guessed too low!\")\n\n", "idx": 6715, "target": 0}
{"func": "# Write a Python function that Given a two list of numbers create a new list such that new list should contain only odd numbers from the first list and even numbers from the second list\ndef mergeList(list1, list2):\n    thirdList = []\n    for num in list1:\n        if (num % 2 != 0):\n            thirdList.append(num)\n    for num in list2:\n        if (num % 2 == 0):\n            thirdList.append(num)\n    return thirdList\n\n\n", "idx": 6716, "target": 0}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random import shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffle(mylist)\nprint(mylist)\n\n\n", "idx": 6717, "target": 0}
{"func": "#45 write a python program to Count if dictionary position equals key or value and print it\n\ntest_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5} \n  \n\n  \nres = 0\ntest_dict = list(test_dict.items()) \nfor idx in range(0, len(test_dict)): \n  \n    # checking for key or value equality \n    if idx == test_dict[idx][0] or idx == test_dict[idx][1]: \n        res += 1\n  \n", "idx": 6718, "target": 0}
{"func": "# Write a Python program to check whether an element exists within a tuple.\ntuplex = (\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\nprint(\"e\" in tuplex)\n\n\n", "idx": 6719, "target": 0}
{"func": "# Write a python function to remove the duplicate items from a List and return the modified data list\ndef remove_duplicates(data):\n    c = Counter(data)\n    s = set(data)\n    for item in s:\n        count = c.get(item)\n        while count > 1:\n            data.pop(item)\n            count -= 1\n    return data\n\n\n", "idx": 6720, "target": 0}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\ndef square_list_elements(list_to_be_squared):\n    return list( map(lambda x: x**2, list_to_be_squared) )\n\n\n", "idx": 6721, "target": 0}
{"func": "# Usage of while\ni = 0\nwhile i < 2:\n    print(i)\n    i += 1\nelse:\n    print('in else')\n\n", "idx": 6722, "target": 0}
{"func": "# write a python function to return random selection from itertools.permutations(iterable, r)\ndef random_permutation(iterable, r=None):\n    import random\n    pool = tuple(iterable)\n    r = len(pool) if r is None else r\n    return tuple(random.sample(pool, r))\n\n", "idx": 6723, "target": 0}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val for key, val in test_dict.items() \n                   if type(val) != int or val > K} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 6724, "target": 0}
{"func": "# write a python function to Count the Number of Words in a Text File and print it\ndef word_count(fname) : \n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            num_words += len(words)\n    print(num_words)\n\n", "idx": 6725, "target": 0}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).\n\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\n\n", "idx": 6726, "target": 0}
{"func": "# write a python function to count the occurrence of a given word in a given file\ndef check_word_count(word, file):\n    if not os.path.isfile(file):\n        raise FileNotFoundError\n    if not isinstance(word, str):\n        raise TypeError\n\n    with open(file, 'r') as f:\n        lines = f.readlines()\n        words = [l.strip().split(' ') for l in lines]\n        words = [word for sublist in words for word in sublist]\n        c = Counter(words)\n    return c.get(word, 0)\n\n\n", "idx": 6727, "target": 0}
{"func": "# Write a Python function for Binary Search\ndef binary_search(l, num_find):\n    '''\n    This function is used to search any number.\n    Whether the given number is present in the\n    list or not. If the number is present in list\n    the list it will return TRUE and FALSE otherwise.\n    '''\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    found = False\n    position = -1\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            position = mid\n            break\n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n    return (found, position)\n\n\n", "idx": 6728, "target": 0}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nwhile input_num:\n    print(input_num)\n    input_num -= 1\n\n\n", "idx": 6729, "target": 0}
{"func": "# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n", "idx": 6730, "target": 0}
{"func": "# write a python program to find index of min element\nlst = [40, 10, 20, 30]\n\ndef minIndex(lst):\n    return min(range(len(lst)), key=lst.__getitem__)\nprint(minIndex(lst))\n\n", "idx": 6731, "target": 0}
{"func": "# write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.\nimport random\nprint random.choice([i for i in range(201) if i%5==0 and i%7==0])\n\n", "idx": 6732, "target": 0}
{"func": "# Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.\ndef printValue(s1,s2):\n\tlen1 = len(s1)\n\tlen2 = len(s2)\n\tif len1>len2:\n\t\tprint s1\n\telif len2>len1:\n\t\tprint s2\n\telse:\n\t\tprint s1\n\t\tprint s2\n\t\t\n", "idx": 6733, "target": 0}
{"func": "# Write a Python Program to Sort the List According to the Second Element in Sublist\n\na=[['A',34],['B',21],['C',26]]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j][1]>a[j+1][1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp\n\n\n", "idx": 6734, "target": 0}
{"func": "# write a python program to convert hexadecimal to decimal\n \n def hexadecimalToDecimal(hexval): \n    length = len(hexval) \n    base = 1\n    dec_val = 0\n    for i in range(length - 1, -1, -1):  \n        if hexval[i] >= '0' and hexval[i] <= '9': \n            dec_val += (ord(hexval[i]) - 48) * base \n            base = base * 16\n        elif hexval[i] >= 'A' and hexval[i] <= 'F': \n            dec_val += (ord(hexval[i]) - 55) * base \n            base = base * 16\n    return dec_val\n \n", "idx": 6735, "target": 0}
{"func": "# Write a python program to Accept the String and print the words composed of digits only\nText = input (\"Enter Text: \")\nDigits = \"\"\nfor i in Text:\nif i.isnumeric():\nDigits +=i+\" \"\nprint(\"Digits used in given strings are: {}\".format(Digits))\n\n", "idx": 6736, "target": 0}
{"func": "# write a python function to return the sum of first n numbers\ndef sum_of_nums(n):\n   if n <= 1:\n      return n\n   else:\n      return n + sum_of_nums(n-1)\n\n\n", "idx": 6737, "target": 0}
{"func": "# write a function to print if a number is even or odd\n\ndef oddeven(num):\n    if num % 2 == 0:\n        print('even')\n    else:\n        print('odd')\n\n", "idx": 6738, "target": 0}
{"func": "# write a python program to input a number to test and print if it is a prime number\n\nnum = int(input(\"Enter number :\"))\nlim = int(num/2) + 1\nfor i in range(2,lim):\n    rem = num % i\n    if rem == 0 :\n        print(num,\"is not a prime number\")\n        break\nelse:\n    print(num,\"is a prime number\")\n    \n", "idx": 6739, "target": 0}
{"func": "# write a python function to convert degree fahrenheit to degree celsius\n def celsius(fahrenheit):\n    return (fahrenheit - 32) / 1.8\n    \n", "idx": 6740, "target": 0}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nfor key, val in key_val_map.items():\n  if len(val) > len(key):\n    print(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 6741, "target": 0}
{"func": "# Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits\n\na=2\nb=9\nc=5\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 6742, "target": 0}
{"func": "# Write a python function to generate Cube Numbers (1, 8, 27, 64, 125...)\ndef cube_numbers(n):\n    for i in range(n):\n        yield i **  3\n            \n", "idx": 6743, "target": 0}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\ndef temp_converter(temp,temp_given_in = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        return (temp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 6744, "target": 0}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perimeter_rect(length, bredth):\n    return 2*(length+bredth)\n\n", "idx": 6745, "target": 0}
{"func": "#  Write a program to check your external ip address\n\nimport re\nimport requests\n\nurl = \"http://checkip.dyndns.org\"\nrequest = requests.get(url)\nclean = request.text.split(': ', 1)[1]\nyour_ip = clean.split('</body></html>', 1)[0]\n\nprint(\"your IP Address is: \",  your_ip)\n\n", "idx": 6746, "target": 0}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\na, b = 0 , 1\nwhile b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 6747, "target": 0}
{"func": "# write a python program which takes list as an input and find frequency of all elements in list \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i in lst:\n    sum  = sum + i\nprint(\" The mean of given list is :\", sum)\n\n", "idx": 6748, "target": 0}
{"func": "# Write a program to print the powers of 2 using anonymous function\n\nterms = 10\n\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n   \n\n   \n", "idx": 6749, "target": 0}
{"func": "# Python program to test whether passed letter is vowel or not\n\ndef is_vowel(char):\n    all_vowels = 'aeiou'\n    return char in all_vowels\n\n\nprint(is_vowel('c'))\nprint(is_vowel('e'))\n\n\n", "idx": 6750, "target": 0}
{"func": "# write a python function that takes list as an input and converts it into tuple\ndef convert(list): \n    return tuple(list)\n\n", "idx": 6751, "target": 0}
{"func": "# Write a python function to count the number of Words in a Text File\ndef check_words():\n    fname = input(\"file name: \")\n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            num_words += len(words)\n    print(\"Number of words = \", num_words)\n\n\n", "idx": 6752, "target": 0}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are squares of the key\nsquare_dict = {}\nfor i in range(1, 11):\n   square_dict[i] = i*i\n\n\n", "idx": 6753, "target": 0}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res.add(ele)\n\nres = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 6754, "target": 0}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 6755, "target": 0}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    pi = 3.14\n    return pi*r**2\n\n", "idx": 6756, "target": 0}
{"func": "# Write a function that generates fibbonacci series\ndef Fibonacci(n:int)-> int:\n    if n==1:\n        fibonacci = 0\n    elif n==2:\n        fibonacci = 1\n    else:\n        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    return fibonacci\n\n\n", "idx": 6757, "target": 0}
{"func": "# write a python program using \"all\" function\nprint (all([False, True, False, False])) \n\n", "idx": 6758, "target": 0}
{"func": "# write a Python Program to Count and print the Number of Each Vowel in the input string\nvowels = 'aeiou'\nip_str = 'India is my country'\nip_str = ip_str.casefold()\ncount = {}.fromkeys(vowels,0)\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\nprint(count)\n\n\n\n", "idx": 6759, "target": 0}
{"func": "# write a Python function to find sum of all items in a Dictionary \n\ndef returnSum(dict): \n    \n    sum = 0\n    for i in dict.values(): \n        sum = sum + i \n    \n    return sum\n\ndict = {'a': 100, 'b':200, 'c':300} \nprint(\"Sum :\", returnSum(dict)) \n\n\n", "idx": 6760, "target": 0}
{"func": "# Write a Python function that Given a list of numbers, Iterate it and print only those numbers which are divisible of 5\ndef findDivisible(numberList):\n    for num in numberList:\n        if (num % 5 == 0):\n            print(num)\n\n\n", "idx": 6761, "target": 0}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=lambda item: item.get(sort_key))\n\n", "idx": 6762, "target": 0}
{"func": "# reconverting to dictionary \nres = {sub[0]: sub[1] for sub in res} \n  \n", "idx": 6763, "target": 0}
{"func": "# Write a Python function that returns the values   of the largest and second largest elements in the passed list.\ndef max2(x):\n    if x[0] > x[1]:\n        m1,m2 = (x[0],x[1])\n    else:\n        m1,m2 = (x[1],x[0])\n\n    for i in range(2, len(x)):\n        if x[i] > m1:\n            m2 = m1\n            m1 = x[i]\n        elif x[i] > m2:\n            m2 = x[i]\n    return m1,m2\n\n", "idx": 6764, "target": 0}
{"func": "#47 first class function\ndef call_func(x, func):\n    return fn(x)\n\n\n", "idx": 6765, "target": 0}
{"func": "# Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \ndef printTuple():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint tuple(li)\n\t\t\n", "idx": 6766, "target": 0}
{"func": "# write a python program to count the number of each vowels in a given text\n\n\nvowels = 'aeiou'\ntext = 'Hello, have you tried our tutorial section yet?'\ntext = text.casefold()\ncount = {}.fromkeys(vowels,0)\nfor char in text:\n   if char in count:\n       count[char] += 1\nprint(count)\n\n", "idx": 6767, "target": 0}
{"func": "# write a program to create print array in beautiful format\na = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nfor i in a:\n    row = '|'\n    for b in i:\n        row = row + ' ' + str(b)\n    print(row + ' ' + '|')\n\n\n", "idx": 6768, "target": 0}
{"func": "# write a python function that inverts the key and values in a dict and returns it\ndef invert_dict(dictionary):\n   inverted_dict = {value: key for key, value in dictionary.items()}\n   return inverted_dict\n\n\n", "idx": 6769, "target": 0}
{"func": "# Write a Python function that takes a list and returns a new list with unique elements of the first list\ndef unique_list(l):\nx = []\nfor a in l:\nif a not in x:\nx.append(a)\nreturn x\n\nprint(unique_list([1,2,3,3,3,3,4,5]))\n\n", "idx": 6770, "target": 0}
{"func": "# Write a python program to Count the Number of Lines in a Text File\n\nfname = input(\"Enter file name: \")\nnum_lines = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n", "idx": 6771, "target": 0}
{"func": "#Write a Python program that prints each item and its corresponding type from the following list.\n\ndatalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],\n{\"class\":'V', \"section\":'A'}]\nfor item in datalist:\n   print (\"Type of \",item, \" is \", type(item))\n\n\n", "idx": 6772, "target": 0}
{"func": "# Write a function to determine the bits used by any number\n\ndef totalBits(n):\n\treturn f'total number of bits used in {n} is : {len(bin(n)[2: ])}'\n\n\n", "idx": 6773, "target": 0}
{"func": "# Write a Python function for Program to find area of a circle\ndef findArea(r): \n    PI = 3.142\n    return PI * (r*r)\n\n\n\n", "idx": 6774, "target": 0}
{"func": "# Define a class named American which has a static method called printNationality.\nclass American(object):\n    @staticmethod\n    def printNationality():\n        print \"America\"\nanAmerican = American()\nanAmerican.printNationality()\nAmerican.printNationality()\n\n", "idx": 6775, "target": 0}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    return str1 + str2 \n\n", "idx": 6776, "target": 0}
{"func": "# Python reuses objects for small integers - use \"==\" for equality, \"is\" for identity\na = 1\nb = 1\nprint('a is b', bool(a is b))\nc = 999\nd = 999\nprint('c is d', bool(c is d))\n\n", "idx": 6777, "target": 0}
{"func": "# write a python function to return only even numbers in a list\ndef filter_even(nums):\n   return list(filter(lambda num: num % 2 == 0, nums))\n\n\n", "idx": 6778, "target": 0}
{"func": "#8 write a program to break a list into chunks of size N\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]  \nn = 4 \nx = [l[i:i + n] for i in range(0, len(l), n)]  \nprint(x)\n\n", "idx": 6779, "target": 0}
{"func": "# write a python function that would read the given input file path and print its contents\ndef read_and_print_file(filepath):\n    with open(filepath, \"r\") as infile:\n        print( infile.read() )\n\n\n", "idx": 6780, "target": 0}
{"func": "# Write a Python function to Find Whether a Number is a Power of Two\ndef is_power_of_two(n):\n    if n <= 0:\n        return False\n    else:\n        return n & (n - 1) == 0\n\t\t\n\t\t\n\t\t\n", "idx": 6781, "target": 0}
{"func": "# write a python function to check if a string contains a vowel or not\n\ndef check_vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        if vowel in string:\n            return True\n    return False\n\n", "idx": 6782, "target": 0}
{"func": "# print the result of .\ndef hashing(num):\n    T = tuple([int(i) for i in num.split()])\n    return hash(T)\n\n\nprint(hashing(23456))\n\n\n", "idx": 6783, "target": 0}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef shift_and_scale(list_of_nums, mean, std):\n    return [ (x-mean) / std for x in list_of_nums ]\n\n\n", "idx": 6784, "target": 0}
{"func": "# write a function to find the sum of Sine series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n\n", "idx": 6785, "target": 0}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \nfor i, j in test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res))\n\n", "idx": 6786, "target": 0}
{"func": "# Write a python fuction to create an empty list \n  \ndef emptylist():\n   return list()  \n\n", "idx": 6787, "target": 0}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nfor item in sampleList:\n  if(item in countDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 6788, "target": 0}
{"func": "# Write a Python Program to Print the Pascal\u2019s triangle for n number of rows given by the user\n\nn=10\na=[]\nfor i in range(n):\n    a.append([])\n    a[i].append(1)\n    for j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(n!=0):\n        a[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()\n\n", "idx": 6789, "target": 0}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresult = [word for word in sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 6790, "target": 0}
{"func": "# write a program that adds corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nsum_list = [a+b for (a,b) in zip(list1, list2)]\nprint(sum_list)\n\n\n", "idx": 6791, "target": 0}
{"func": "# write a python function to obtain the square root of a number\n \n def squareRoot(n): \n        x = n \n        y = 1\n        e = 0.000001\n        while(x - y > e):  \n            x = (x + y)/2\n            y = n / x   \n        return x \n\n", "idx": 6792, "target": 0}
{"func": "#60 Write a function program to reverse the digits of an integer.\ndef reverse_integer(x):\n        sign = -1 if x < 0 else 1\n        x *= sign\n\n        # Remove leading zero in the reversed integer\n        while x:\n            if x % 10 == 0:\n                x /= 10\n            else:\n                break\n\n        # string manipulation\n        x = str(x)\n        lst = list(x)  # list('234') returns ['2', '3', '4']\n        lst.reverse()\n        x = \"\".join(lst)\n        x = int(x)\n        return sign*x\n\n", "idx": 6793, "target": 0}
{"func": "# write a python function to find simple interest for given principal amount, time and rate of interest. \n\n\ndef simple_interest(p,t,r): \n    print('The principal is', p) \n    print('The time period is', t) \n    print('The rate of interest is',r) \n    \n    si = (p * t * r)/100\n    \n    print('The Simple Interest is', si) \n    return si \n\nsimple_interest(8, 6, 8) \n\n\n\n", "idx": 6794, "target": 0}
{"func": "# Write a program that will determine the memory usage by python process\nimport os, psutil\nprint(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)\n\n", "idx": 6795, "target": 0}
{"func": "# write a python funaction to create a new string by appending second string in the middle of first string\n\ndef appendMiddle(s1, s2):\n    middleIndex = int(len(s1) /2)\n    print(\"Original Strings are\", s1, s2)\n    middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n    print(\"After appending new string in middle\", middleThree)\n\nappendMiddle(\"bananna\", \"monkey\")\n\n\n", "idx": 6796, "target": 0}
{"func": "#5 write a function to print the count of divisor using list comprehension\ndef divisor_using_list(num: int):\n    \"\"\"\n    function to count the number of divisor using list comprehension.\n    \"\"\"\n    if isinstance(num, int):\n        count = [i for i in range(1,num+1) if not num%i]\n        print(f'Number of divisor is {count}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 6797, "target": 0}
{"func": "# write a python program to print week number from a date\nimport datetime\nprint(datetime.date(2015, 6, 16).isocalendar()[1])\n\nfrom datetime import date, timedelta\n\ndef all_sundays(year):\n       dt = date(year, 1, 1)\n       dt += timedelta(days = 6 - dt.weekday())\n       while dt.year == year:\n          yield dt\n          dt += timedelta(days = 7)\n\nfor s in all_sundays(2020):\n    print(s)\n\n", "idx": 6798, "target": 0}
{"func": "# Write a function that returns relu value of the input\ndef relu(x:float) -> float:\n    x = 0 if x < 0 else x\n    return x\n\n", "idx": 6799, "target": 0}
{"func": "# Please raise a RuntimeError exception.\nraise RuntimeError('something wrong')\n\n", "idx": 6800, "target": 0}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nfor item in speed.values():\n  if item not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 6801, "target": 0}
{"func": "# Write a Python program to accept a filename from the user and print the extension of that\ndef filename_extension(file):\n    f_extns = file.split(\".\")\n    return f\"The extension of the file is :{repr(f_extns[-1])}\"\n\n\n", "idx": 6802, "target": 0}
{"func": "# Write a Python Program to print the LCM of Two Numbers\n\ndef lcm(a,b):\n    lcm.multiple=lcm.multiple+b\n    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):\n        return lcm.multiple\n    else:\n        lcm(a, b)\n    return lcm.multiple\nlcm.multiple=0\na=4\nb=7\nif(a>b):\n    LCM=lcm(b,a)\nelse:\n    LCM=lcm(a,b)\n\nprint(LCM)\n\n", "idx": 6803, "target": 0}
{"func": "# Write a Python function to create all possible permutations from a given collection of distinct numbers.\ndef permute(nums):\n    result_perms = [[]]\n    for n in nums:\n        new_perms = []\n        for perm in result_perms:\n            for i in range(len(perm)+1):\n                new_perms.append(perm[:i] + [n] + perm[i:])\n                result_perms = new_perms\n    return result_perms\n\n\n", "idx": 6804, "target": 0}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    list2 = [3, 4]\n    return list1.extend(list2)\n\n\n", "idx": 6805, "target": 0}
{"func": "# Write a function to calculate Volume of Pentagonal Pyramid  \ndef volumePentagonal(a, b, h): \n    return (0.83) * a * b * h \n  \n", "idx": 6806, "target": 0}
{"func": "# 48 write a python function that checks if a given key is present in the environment\nimport os\n\n\ndef get_env_path(key):\n    return os.getenv(key)\n\n\n", "idx": 6807, "target": 0}
{"func": "#21. Python Program to Find Armstrong Number in an Interval\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   # order of number\n   order = len(str(num))\n    \n   # initialize sum\n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   if num == sum:\n       print(num)\n", "idx": 6808, "target": 0}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ndef cal_sp_after_discount(sp:float,discount:float)->float:\n    return sp*(1 - discount/100)\n\n", "idx": 6809, "target": 0}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for d in input for key, value in d.items()}\n\n", "idx": 6810, "target": 0}
{"func": "# write a function to rotate string right by a given length  \n\ndef rotate_right(input,d):  \n  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 6811, "target": 0}
{"func": "#39. Python Program to Find Factorial of Number Using Recursion\ndef recur_factorial(n):\n   if n == 1:\n       return n\n   else:\n       return n*recur_factorial(n-1)\n\nnum = 7\n\n", "idx": 6812, "target": 0}
{"func": "# Using list comprehension \nres =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \n", "idx": 6813, "target": 0}
{"func": "#  Write a python function to get the surface_area of a cone with radius & slant height as input\ndef cone_surface_area(radius, slant_height):\n    surface_area =  3.14 * (radius ** 2) + 3.14 * radius * slant_height\n    return surface_area\n\n\n", "idx": 6814, "target": 0}
{"func": "# Generators are faster than list comprehension\nimport timeit\ndef test_plainlist(plain_list):\n    for i in plain_list():\n        pass\n\n\ndef test_listcompr(listcompr):\n    for i in listcompr():\n        pass\n\n\ndef test_generator(generator):\n    for i in generator():\n        pass\n\n\ndef test_generator_yield(generator_yield):\n    for i in generator_yield():\n        pass\nprint('plain_list:     ', end='')\n%timeit test_plainlist(plainlist)\nprint('\\nlistcompr:     ', end='')\n%timeit test_listcompr(listcompr)\nprint('\\ngenerator:     ', end='')\n%timeit test_generator(generator)\nprint('\\ngenerator_yield:     ', end='')\n%timeit test_generator_yield(generator_yield)\n\n", "idx": 6815, "target": 0}
{"func": "# write a program to find log of a number\nimport math\n\nnum = 5\nbase = 7\n\nprint(\"Log_x_b\", math.log(num, base))\n\n\n", "idx": 6816, "target": 0}
{"func": "# write a python program to sort a list of tuples using Lambda.\n\nmarks = [('Computer Science', 88), ('Physics', 90), ('Maths', 97), ('Chemistry', 82)]\nprint(\"Original list of tuples:\")\nprint(marks)\nmarks.sort(key = lambda x: x[1])\nprint(\"\\nSorting the List of Tuples:\")\nprint(marks)\n\n", "idx": 6817, "target": 0}
{"func": "# write Python code to convert string to list character-wise \ndef Convert_3(string): \n    list1=[] \n    list1[:0]=string \n    return list1 \n\nstr1=\"ABCD\"\nprint(Convert(str1)) \n\n", "idx": 6818, "target": 0}
{"func": "# result is 3x4\nresult = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 6819, "target": 0}
{"func": "# Write a function to check and print if a string starts with a substring using regex in Python\n\nimport re \n  \n  \ndef find(string, sample) :    \n\n  if (sample in string): \n  \n      y = \"^\" + sample \n  \n      x = re.search(y, string) \n  \n      if x : \n          print(\"string starts with the given substring\") \n  \n      else : \n          print(\"string doesn't start with the given substring\") \n  \n  else : \n      print(\"entered string isn't a substring\") \n\t  \n\t  \n", "idx": 6820, "target": 0}
{"func": "# write a python function that would read the given input file path and print its contents\ndef read_and_print_file(filepath):\n    with open(filepath, \"r\") as infile:\n        print( infile.read() )\n\n\n", "idx": 6821, "target": 0}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    words = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(words))  \n  \n    return reverse_sentence \n\n", "idx": 6822, "target": 0}
{"func": "#70 class to print user defined message whenever object of class is called is called.\nclass User:\n    def __init__(self, msg=\"Demo of custom message by repr and str in class\"):\n        self.msg = msg\n\n    def __repr__(self):\n        return f\"Object of User class is called with parameter {self.msg}\"\n\n    def __str__(self):\n        return f\"Object of User class is called with parameter {self.msg}\"\n\n\n\n", "idx": 6823, "target": 0}
{"func": "# write a python program to check and print if a number is prime\nnum = 407\nif num > 1:\n   for i in range(2,num):\n      if (num % i) == 0:\n         print(num,\"is not a prime number\")\n         break\n   else:\n      print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n\n", "idx": 6824, "target": 0}
{"func": "# initializing string  \ntest_str = \"HellowWorld\"\n\nprint(\"The original string is : \" + test_str) \nres = ', '.join(test_str[i:i + 2] for i in range(0, len(test_str), 2)) \n \nprint(\"The string after inserting comma after every character pair : \" + res) \n\n", "idx": 6825, "target": 0}
{"func": "# Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. \n\ndef last(n): return n[-1]\n\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)\n\nprint(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))\n\n", "idx": 6826, "target": 0}
{"func": "# write a program to compute the count of each word in a sentence and print it\nword_freq = {}\nline = 'how many how words does this many have'\nfor word in line.split():\n   word_freq[word] = word_freq.get(word, 0) + 1\nprint(word_freq)\n\n\n", "idx": 6827, "target": 0}
{"func": "# write a program to convert all the sentances present in the list to upper \n\nmylis = ['this is test', 'another test']\nprint(f'{[item.upper() for item in mylis]}')\n\n\n", "idx": 6828, "target": 0}
{"func": "# write a Python function to Determine all Pythagorean Triplets in the Range\ndef findpythagoreantriplets(limit):\n\tc=0\n\tm=2\n\twhile(c<limit):\n\t\tfor n in range(1,m+1):\n\t\t\ta=m*m-n*n\n\t\t\tb=2*m*n\n\t\t\tc=m*m+n*n\n\t\t\tif(c>limit):\n\t\t\t\tbreak\n\t\t\tif(a==0 or b==0 or c==0):\n\t\t\t\tbreak\n\t\t\tprint(a,b,c)\n\t\tm=m+1\n\t\t\n\t\t\n\t\t\n", "idx": 6829, "target": 0}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for ele in test_list if str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 6830, "target": 0}
{"func": "# Write a Python function that returns the integer obtained by reversing the digits of the given integer\ndef reverse(n):\n    s=str(n) \n    p=s[::-1]\n    return p \n\n\n", "idx": 6831, "target": 0}
{"func": "# write a python program to check if the number is an Armstrong number or not\n\nnum = 663\nsum = 0\n\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 6832, "target": 0}
{"func": "# write a python function to multiply two user provided numbers and return the result\ndef mul_two_numbers(num1, num2):\n    mul = num1 * num2\n    return mul\n\n", "idx": 6833, "target": 0}
{"func": "# write a python program  to Shuffle Deck of Cards\nimport itertools, random\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\nrandom.shuffle(deck)\nprint(deck)\n\n", "idx": 6834, "target": 0}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key for key, value in input_dict.items()}\n  return my_inverted_dict\n\n", "idx": 6835, "target": 0}
{"func": "# Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other\ndef test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False\n\n", "idx": 6836, "target": 0}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres = calculateSum(10)\nprint(res)\n\n", "idx": 6837, "target": 0}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict)) \nlist1=list(test_dict.values())\nprint(list1)\ns=\"\".join(i for i in list1)\nprint(f'Summation of string values is {len(s)}')\n\n\n", "idx": 6838, "target": 0}
{"func": "# driver code \nif __name__ == \"__main__\" : \n  \n    string = \"101010000111\"\n    check(string) \n   \n", "idx": 6839, "target": 0}
{"func": "# Write a python function to  add only even numbers in a list\n\nfrom functools import reduce\n\ninput_list = [x for x in range(100)]\n\ndef sum_even(it):\n    return reduce(lambda x, y: x + y if (y % 2)==0 else x, it, 0)\n\nres=sum_even(input_list)\n\nprint('Sum of even numbers in the list is ', res)\n\n", "idx": 6840, "target": 0}
{"func": "# Write a function to return the angualr veolcity based on augualr distance travelled in radian unit and time taken\ndef cal_angular_velocity(angular_dist:float,time:float)->float:\n    return angular_dist/time\n\n", "idx": 6841, "target": 0}
{"func": "#Don't use mutable objects as default arguments for functions!\ndef append_to_list(value, def_list=[]):\n    def_list.append(value)\n    return def_list\nmy_list = append_to_list(1)\nprint(my_list)\n\nmy_other_list = append_to_list(2)\nprint(my_other_list)\n\n", "idx": 6842, "target": 0}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\ndef delete_last_element(list_to_be_processed):\n    deleted_element = list_to_be_processed.pop()\n    return list_to_be_processed, deleted_element\n\n\n", "idx": 6843, "target": 0}
{"func": "# Write a Python program to get the Fibonacci series between 0 to 50.\nx,y=0,1\nwhile y<50:\nprint(y)\nx,y = y,x+y\n\n", "idx": 6844, "target": 0}
{"func": "# Write a program to extract and print digits of a number in reverse order. The number is input from user.\n\nnum = int(input(\"Enter a number with multiple digit: \"))\nn=0\nwhile num>0:\n    a = num%10\n    num = num - a\n    num = num/10\n    print(int(a),end=\"\")\n    n = n + 1\n\n", "idx": 6845, "target": 0}
{"func": "#72 Write a Python function to create a new array such that each element at index i of the new array is the product of all the numbers of a given array of integers except the one at i.\ndef product(nums):\n    new_nums = []\n\n    for i in nums:\n        nums_product = 1\n\n        for j in nums:     \n            if j != i:\n                nums_product = nums_product * j\n        new_nums.append(nums_product)\n\n    return new_nums\n\n", "idx": 6846, "target": 0}
{"func": "# Write a python Class to calculate Perimeter of a circle and print the vale for a radius\n\nclass CirclePerimeter():\n    def __init__(self,radius):\n        self.radius=radius\n    def perimeter(self):\n        return 2 * 3.14 * self.radius\na=6\nobj=CirclePerimeter(a)\nprint(\"Perimeter of rectangle:\",obj.perimeter())\n\n", "idx": 6847, "target": 0}
{"func": "# Using zip() + loop \nres = [] \nfor sub, val in zip(test_list, add_list): \n    sub[new_key] = val \n    res.append(sub) \n      \n", "idx": 6848, "target": 0}
{"func": "#79 Write a program to print which will find all such numbers which are divisible by 7 but are not a multiple of 5,\nbetween 2000 and 3200 (both included).  \nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint ','.join(l)\n\n\n", "idx": 6849, "target": 0}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nfor d in list_of_dicts:\n  for key in d:\n    if key not in unique_keys:\n      unique_keys.append(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 6850, "target": 0}
{"func": "# Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \ns= input()\nif s==\"yes\" or s==\"YES\" or s==\"Yes\":\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "idx": 6851, "target": 0}
{"func": "# 39 write a python function to return a list of all punctuations from the string library\n\nimport string\n\n\ndef return_punct():\n    return string.punctuation\n\n\n", "idx": 6852, "target": 0}
{"func": "# write a Python function to remove empty tuples from a list of tuples function to remove empty tuples using filter \ndef Remove(tuples): \n    tuples = filter(None, tuples) \n    return tuples \n  \ntuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),  \n          ('krishna', 'akbar', '45'), ('',''),()] \nprint(Remove(tuples)) \n\n", "idx": 6853, "target": 0}
{"func": "# write a python function to find leftmost item greater than or equal to x\ndef find_ge(a, x):\n    from bisect import bisect_left \n    i = bisect_left(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\n\n", "idx": 6854, "target": 0}
{"func": "# Write a Python program to convert the index of a series into a column of a dataframe\nimport pandas as pd\nimport numpy as np\nmylist = list('abcedfghijklmnopqrstuvwxyz')\nmyarr = np.arange(26)\nmydict = dict(zip(mylist, myarr))\nser = pd.Series(mydict)\ndf = ser.to_frame().reset_index()\nprint(df.head())\n\n\n", "idx": 6855, "target": 0}
{"func": "# Write Python Program to Find the Area of a Rectangle Using Classes\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.length\na=15\nb=10\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n\n\n", "idx": 6856, "target": 0}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, write program to print the user name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemailAddress = raw_input()\npat2 = \"(\\w+)@((\\w+\\.)+(com))\"\nr2 = re.match(pat2,emailAddress)\nprint r2.group(1)\n\n\n\n", "idx": 6857, "target": 0}
{"func": "#46 factorial of number using recursion\ndef factorial(n: int):\n    if n<1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\n", "idx": 6858, "target": 0}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\ndef cal_mi_ring(mass:float,radius:float)->float:\n    return mass*(radius**2)\n\n\n", "idx": 6859, "target": 0}
{"func": "# write a python function that returns True if the product of two provided numbers is even\ndef is_prod_even(num1, num2):\n   prod = num1 * num2\n   return not prod % 2\n\n\n", "idx": 6860, "target": 0}
{"func": "# Write a Python function to Count Set Bits in a Number\n\ndef count_set_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n", "idx": 6861, "target": 0}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 6862, "target": 0}
{"func": "#82 function to show how to use f string\ndef f_string(msg: \"user message\"):\n    print(f'This is an f string with user paramter {msg}')\n\n\n", "idx": 6863, "target": 0}
{"func": "# printing original string \nprint(\"The original string is : \" + str(test_str))\ns=''\nr=''\nfor i in test_str:\n    if i.isdigit():\n      s=s+i\n    else:\n      r=r+i \nprint(r+s)\n\n", "idx": 6864, "target": 0}
{"func": "#44 universal function\ndef universal_func(*args, **kwargs):\n    print(args)\n    print(**kwargs)\n\n\n", "idx": 6865, "target": 0}
{"func": "# Write a function to return the area of a equilateral triangle\ndef cal_eq_triangle_area(a:float)->float:\n    if a:\n        return (3**(1/2))*(a**2)/4\n    else:\n        return None\n\n", "idx": 6866, "target": 0}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfor word in s:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 6867, "target": 0}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are cubes of the key\ncube_dict = {}\nfor i in range(1, 11):\n   cube_dict[i] = i ** 3\n\n\n", "idx": 6868, "target": 0}
{"func": "#55 string to tuple\ndef sen_to_tuple(sen):\n   return tuple(sen)\n\n\n", "idx": 6869, "target": 0}
{"func": "# Write a function to return the volume of a cube\ndef cal_cube_volume(side:float)->float:\n    return side**3\n\n", "idx": 6870, "target": 0}
{"func": "# Write a python program to check if a number is positive or negative\nnum = 15\nif num > 0:\n   print(f\"Positive number\")\nelif num == 0:\n   print(f\"Zero\")\nelse:\n   print(f\"Negative number\")\n   \n   \n   \n", "idx": 6871, "target": 0}
{"func": "# Write a program that will determine the object type\n\ndef typeIdentifier(object):\n  return f'object type : {type(object)}'\n\n", "idx": 6872, "target": 0}
{"func": "# write a python function to convert a number from decimal to binary\n \n def decToBinary(n): \n    binaryNum = [0] * n;  \n    i = 0; \n    while (n > 0):   \n        binaryNum[i] = n % 2; \n        n = int(n / 2); \n        i += 1; \n    for j in range(i - 1, -1, -1): \n        print(binaryNum[j], end = \"\"); \n \n", "idx": 6873, "target": 0}
{"func": "# Write a program to find the factorial of a number\nnum = 13\nfactorial = 1\n\nif num < 0:\n   print(\"No factorials for negative numbers!\")\n\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\n\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(f\"The factorial of {num} is {factorial}\")\n\n\n", "idx": 6874, "target": 0}
{"func": "# write a python code to implement RELU function\ndef relu(array):\n    return [max(0,i) for i in array if(isinstance(i, int) or isinstance(i, float))]\n\n", "idx": 6875, "target": 0}
{"func": "# message to the user.\ndef check_number(num):\n    mod = num % 2\n    if mod > 0:\n        return \"This is an odd number.\"\n    else:\n        return \"This is an even number.\"\n\n\nprint(check_number(5))\n\n\n", "idx": 6876, "target": 0}
{"func": "# Write a function to get nth element of the fibonacci series\ndef fibonacci_nth(n):\n    a = 0\n    b = 1\n    \n    if n <= 0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return a\n    elif n==1: \n        return 1\n    else: \n        for i in range(2, n):\n            c = a + b\n            a, b = b, c\n        return b\n\t\t\n\t\t\n", "idx": 6877, "target": 0}
{"func": "# Write a Python function that will accept the base and height of a triangle and compute the area.\ndef triangle_area(base, height):\n    area = base*height/2\n    return area\n\n\n", "idx": 6878, "target": 0}
{"func": "#86 show class of custom sequence type ,iter , iterables and iterator using example of tuple\nclass CustomTupleIter:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = (1,2,3,4)\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n\n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n    def __iter__(self):\n        return self.CustomTupleIterator(self)\n\n    class CustomTupleIterator:\n        def __init__(self, other):\n            self.count = 0\n            self.other = other\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.count < len(self.other.list_):\n                self.count += 1\n                return self.other.list_[self.count]\n            else:\n                raise StopIteration\n\n\n", "idx": 6879, "target": 0}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\ndef cal_current(resistance:float, voltage:float)->float:\n    return voltage/resistance\n\n", "idx": 6880, "target": 0}
{"func": "# Write a Python function that Given a string, display only those characters which are present at an even index number\ndef printEveIndexChar(str):\n  for i in range(0, len(str)-1, 2):\n    print(\"index[\",i,\"]\", str[i] )\n\n\n", "idx": 6881, "target": 0}
{"func": "# write a python program uses else with for loop\nseq = \"abcde\"\nfor k in seq:\n    if k == \"f\":\n        break\nelse:\n    print(\"f Not Found!\")\n\n\n", "idx": 6882, "target": 0}
{"func": "# write a python function to inherit a parent class person in a child class Student\nclass Person:\n    def __init__(self, fname, lname):\n        self.firstname = fname\n        self.lastname = lname\n\n    def printname(self):\n        print(self.firstname, self.lastname)\n\nclass Student(Person):\n    pass\n\n\n", "idx": 6883, "target": 0}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 6884, "target": 0}
{"func": "# Write a Python function that Given a string and an integer number n, remove characters from a string starting from zero up to n and return a new string\ndef removeChars(str, n):\n  return str[n:]\n\n\n", "idx": 6885, "target": 0}
{"func": "# Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\nvalues = []\nfor i in range(1000, 3001):\n    s = str(i)\n    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n        values.append(s)\nprint \",\".join(values)\n\n", "idx": 6886, "target": 0}
{"func": "#Write a function to find the  difference between two times\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 6887, "target": 0}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\ndef cal_area_rhombus(q1,q2):\n    return (q1*q2)/2\n\n", "idx": 6888, "target": 0}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        else:\n            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2\n    else:\n        return None\n\n", "idx": 6889, "target": 0}
{"func": "# Write a Python function to strip vowels from a string\n\ndef vowel_stripping(string):\n    '''This function takes a string as an input strips out vowels and returns stripted out string'''\n    return \"\".join([x for x in string if x not in('a','e','i','o','u')])\n\n", "idx": 6890, "target": 0}
{"func": "# 13. python function to find the average of given numbers\ndef average():\n    numbers = []\n    def add(number):\n        numbers.append(number)\n        total = sum(numbers)\n        count = len(numbers)\n        return total/count\n    return add\na = average()\na(10)\na(20)\na(45)\n\n", "idx": 6891, "target": 0}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(secondSet)\nfor item in intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 6892, "target": 0}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor sub in test_list: \n    if isinstance(sub[key], list): \n        sub[key] = sub[key][N]\n\n", "idx": 6893, "target": 0}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 6894, "target": 0}
{"func": "# write a python function for implementation of Insertion Sort \n\ndef insertionSort(arr): \n\n    for i in range(1, len(arr)): \n\n        key = arr[i] \n\n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\n\narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (f\"Sorted array is: {arr}\") \n\n\n", "idx": 6895, "target": 0}
{"func": "# 34. Python Program to Map two lists into a Dictionary\n\nkeys = ['name', 'age', 'job']\nvalues = ['John', 25, 'Developer']\n\nmyDict = {k: v for k, v in zip(keys, values)}\nprint(\"Dictionary Items  :  \",  myDict)\n\n", "idx": 6896, "target": 0}
{"func": "# Write a python function to find and print longest continous odd sequence of a list of numbers given\n\ndef longest_continuous_odd_subsequence(array):\n    final_list = []\n    temp_list = []\n    for i in array:\n        if i%2 == 0:\n            if temp_list != []:\n                final_list.append(temp_list)\n            temp_list = []\n        else:\n            temp_list.append(i)\n\n    if temp_list != []:\n        final_list.append(temp_list)\n\n    result = max(final_list, key=len)\n    print(result)\n\t\n\n\n", "idx": 6897, "target": 0}
{"func": "# write a python function to convert a list of characters to a string\n\n def convert(s): \n     str1 = \"\" \n     return(str1.join(s)) \n\n", "idx": 6898, "target": 0}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n", "idx": 6899, "target": 0}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    list2 = [3, 4]\n    return list1.extend(list2)\n\n\n", "idx": 6900, "target": 0}
{"func": "# write a program to create a string variable and print the amount of memory it consumes\nimport sys\nstring_var = 'string variable'\nprint(sys.getsizeof(string_var))\n\n\n", "idx": 6901, "target": 0}
{"func": "# 60 Write a function to return the the unique tokens from a string\n\n\ndef unique_tokens(st):\n    return set(st)\n\n\n", "idx": 6902, "target": 0}
{"func": "# The results should be printed in a comma-separated sequence on a single line.\ndef fact(x):\n    if x == 0:\n        return 1\n    return x * fact(x - 1)\n\nx=int(input())\nprint(fact(x))\n\n", "idx": 6903, "target": 0}
{"func": "#36 python parse datetime from string\nfrom datetime import datetime\n\ndatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n\n", "idx": 6904, "target": 0}
{"func": "# write a function to find length of list\ndef tuple_lenght(t):\n    return len(t)\n\n\n", "idx": 6905, "target": 0}
{"func": "# write Function to right rotate n by d bits \ndef rightRotate(n, d): \n    INT_BITS = 32\n\n    return (n >> d)|(n << (INT_BITS - d)) & 0xFFFFFFFF\n\nn = 16\nd = 2\n\nprint(\"Right Rotation of\",n,\"by\",d,\"is\",end=\" \") \nprint(rightRotate(n, d)) \n\n", "idx": 6906, "target": 0}
{"func": "# write a python function to advance the iterator n-steps ahead\ndef consume(iterator, n=None):\n    import itertools\n    from collections import deque\n    \"Advance the iterator n-steps ahead. If n is None, consume entirely.\"\n    # Use functions that consume iterators at C speed.\n    if n is None:\n        # feed the entire iterator into a zero-length deque\n        deque(iterator, maxlen=0)\n    else:\n        # advance to the empty slice starting at position n\n        next(itertools.islice(iterator, n, n), None)\n\n", "idx": 6907, "target": 0}
{"func": "#  Write a python function to remove spaces from a given string\ndef remove_spaces_from_string(string):\n    return string.replace(' ', '')\n\n", "idx": 6908, "target": 0}
{"func": "# Write a Python function to Find if a Number is Prime or Not Prime\n\ndef check(n, div = None):\n    if div is None:\n        div = n - 1\n    while div >= 2:\n        if n % div == 0:\n            print(\"Number not prime\")\n            return False\n        else:\n            return check(n, div-1)\n    else:\n        print(\"Number is prime\")\n        return 'True'\n\n", "idx": 6909, "target": 0}
{"func": "# Create list of numbers using lambda function but not the right way\nmy_list = [lambda: i for i in range(5)]\nfor l in my_list:\n    print(l())\n\n", "idx": 6910, "target": 0}
{"func": "# Generate a list by list comprehension\nlist = [x for x in range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 6911, "target": 0}
{"func": "# Write a Python Program to Print all Pythagorean Triplets in the Range\n\nlimit=10\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            break\n        print(a,b,c)\n    m=m+1\n\n", "idx": 6912, "target": 0}
{"func": "#92 write a program to print the version information\n\nimport sys\n\nprint(\"Python version: \", sys.version)\nprint(\"Python version info: \", sys.version_info)\n\n", "idx": 6913, "target": 0}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    return (Lsecond + Lfirst) \n\n", "idx": 6914, "target": 0}
{"func": "# Write a function to generate permutation of list of numbers\n\ndef permute(nums):\n    def backtrack(first = 0):\n        if first == n:      \n            output.append(nums[:])\n        for i in range(first, n):\n            nums[first], nums[i] = nums[i], nums[first]            \n            backtrack(first + 1)\n\n            nums[first], nums[i] = nums[i], nums[first]\n \n        \n    n = len(nums)\n    output = []\n    backtrack()\n    return output\n\t\n        \n", "idx": 6915, "target": 0}
{"func": "# 63 Write a python function which returns true if all the numbers in a list negative, else return False\n\n\ndef are_all_negative(arr):\n    filt_arr = list(filter(lambda x: x < 0, arr))\n    if len(filt_arr) == len(arr):\n        return True\n    else:\n        return False\n\n\n", "idx": 6916, "target": 0}
{"func": "# 57 write a python function to implement the tanh activation function\n\nimport math\n\n\ndef tanh(x):\n    return (math.exp(2 * x) - 1) / (math.exp(2 * x) + 1)\n\n\n", "idx": 6917, "target": 0}
{"func": "# write a python function to find leftmost value greater than x\ndef find_gt(a, x):\n    from bisect import bisect_right \n    i = bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\n\n", "idx": 6918, "target": 0}
{"func": "# write a python function for bitwise division with given number of shifts\ndef bit_div(n, shift):\n    return n >> shift\n\n\n", "idx": 6919, "target": 0}
{"func": "# Write a Python program to find the second largest number in a list.\ndef second_largest(numbers):\ncount = 0\nn1 = n2 = float('-inf')\nfor x in numbers:\ncount += 1\nif x > n2:\nif x >= n1:\nn1, n2 = x, n1\nelse:\nn2 = x\nreturn n2 if count >= 2 else None\n\nprint(second_largest([1, 2, -8, -2, 0]))\n\n", "idx": 6920, "target": 0}
{"func": "# write a python program to multiply two matrices\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\nfor i in range(len(X)):\n   for j in range(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nfor r in result:\n   print(r)\n\n", "idx": 6921, "target": 0}
{"func": "# write a python program to implement Queue\nfrom collections import deque\n\nclass Queue():\n    '''\n    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and\n    dequeueing in worst-case O(1) time.\n    '''\n\n\n    def __init__(self, max_size = 10):\n        '''\n        Initialize this queue to the empty queue.\n\n        Parameters\n        ----------\n        max_size : int\n            Maximum number of items contained in this queue. Defaults to 10.\n        '''\n\n        self._queue = deque(maxlen=max_size)\n\n\n    def enqueue(self, item):\n        '''\n        Queues the passed item (i.e., pushes this item onto the tail of this\n        queue).\n\n        If this queue is already full, the item at the head of this queue\n        is silently removed from this queue *before* the passed item is\n        queued.\n        '''\n\n        self._queue.append(item)\n\n\n    def dequeue(self):\n        '''\n        Dequeues (i.e., removes) the item at the head of this queue *and*\n        returns this item.\n\n        Raises\n        ----------\n        IndexError\n            If this queue is empty.\n        '''\n\n        return self._queue.pop()\n\n\n", "idx": 6922, "target": 0}
{"func": "# write a python function to return powerset of iterable\ndef powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    from itertools import chain, combinations\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\nlist(powerset([1,2,3]))\n\n", "idx": 6923, "target": 0}
{"func": "# write a python function to count the occurrence of a given word in a given file\ndef check_word_count(word, file):\n    if not os.path.isfile(file):\n        raise FileNotFoundError\n    if not isinstance(word, str):\n        raise TypeError\n\n    with open(file, 'r') as f:\n        lines = f.readlines()\n        words = [l.strip().split(' ') for l in lines]\n        words = [word for sublist in words for word in sublist]\n        c = Counter(words)\n    return c.get(word, 0)\n\n\n", "idx": 6924, "target": 0}
{"func": "# 77 By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nli = [12, 24, 35, 70, 88, 120, 155]\nli = [x for x in li if x % 5 != 0 and x % 7 != 0]\nprint(li)\n\n", "idx": 6925, "target": 0}
{"func": "# Write a python function to rotate a point (x,y) around a given origix (ox,oy) by an angle\ndef rotate(origin, point, angle):\n    ox, oy = origin\n    px, py = point\n\n    radian_angle = math.radians(angle)\n    qx = ox + math.cos(radian_angle) * (px - ox) - math.sin(radian_angle) * (py - oy)\n    qy = oy + math.sin(radian_angle) * (px - ox) + math.cos(radian_angle) * (py - oy)\n    return qx, qy\n\n\n", "idx": 6926, "target": 0}
{"func": "# Driver Code \nfor i in range(10): \n    print (catalan(i))\n\n", "idx": 6927, "target": 0}
{"func": "# write a program to remove even numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_even_nums = [i for i in nums if i % 2 == 1]\n\n\n", "idx": 6928, "target": 0}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n(n):\n    return ( n * (n+1) ) // 2\n\n\n", "idx": 6929, "target": 0}
{"func": "# 53 write a python function which checks if a number is a perfect square\nimport math\n\n\ndef is_perfect_square(num):\n    sq_root = round(math.sqrt(num))\n    if num == sq_root ** 2:\n        return True\n    else:\n        return False\n\n\n", "idx": 6930, "target": 0}
{"func": "# write a python function to do bitwise multiplication on a given bin number by given shifts\ndef bit_mul(n, shift):\n    return n << shift\n\n\n", "idx": 6931, "target": 0}
{"func": "# write a python function to capitalize first letter of a string\n\ndef capitalize(s, lower_rest = False):\n  return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])\n\n", "idx": 6932, "target": 0}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random import shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffle(mylist)\nprint(mylist)\n\n\n", "idx": 6933, "target": 0}
{"func": "# Write a program to print the sum of squares of first n natural numbers\nn = 21\nsum_n = 0\nfor i in range(1, n+1):\n    sum_n += i**2\nprint(sum_n)\n\n\n", "idx": 6934, "target": 0}
{"func": "# Write a python  program to check and print Yes/No if a triangle  of positive area is possible with the given angles \n  \ndef isTriangleExists(a, b, c): \n\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \n \n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \n            return \"YES\"\n        else: \n            return \"NO\"\n    else: \n        return \"NO\"\n  \n  \n", "idx": 6935, "target": 0}
{"func": "# write a python program that takes input number of lines and finds the possible number of intersection\ndef countMaxIntersect(n): \n    return int(n*(n - 1)/2) \n\n", "idx": 6936, "target": 0}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 6937, "target": 0}
{"func": "#Union\ndef union_of_sets(Set1, Set2):\n    result = Set1 | Set2\n    return result\n\n\n", "idx": 6938, "target": 0}
{"func": "# write a python list comprehension to transpose a 2D matrix (provided as list)\n matrix = [[1,2,3],[4,5,6],[7,8,9]]\n matrixT = [[row[i] for row in matrix] for i in range(len(matrix[0]))]\n \n", "idx": 6939, "target": 0}
{"func": "# Write a python program to implement Rock, paper, scissor game and print the results\n\nimport random\nimport os\nimport re\nos.system('cls' if os.name=='nt' else 'clear')\nwhile (1 < 2):\n    print(\"\\n\")\n    print(\"Rock, Paper, Scissors - Shoot!\")\n    userChoice = input(\"Choose your weapon [R]ock], [P]aper, or [S]cissors: \")\n    if not re.match(\"[SsRrPp]\", userChoice):\n        print(\"Please choose a letter:\")\n        print(\"[R]ock, [S]cissors or [P]aper.\")\n        continue\n    print(\"You chose: \" + userChoice)\n    choices = ['R', 'P', 'S']\n    opponenetChoice = random.choice(choices)\n    print(\"I chose: \" + opponenetChoice)\n    if opponenetChoice == str.upper(userChoice):\n        print(\"Tie! \")\n    #if opponenetChoice == str(\"R\") and str.upper(userChoice) == \"P\"\n    elif opponenetChoice == 'R' and userChoice.upper() == 'S':      \n        print(\"Scissors beats rock, I win! \")\n        continue\n    elif opponenetChoice == 'S' and userChoice.upper() == 'P':      \n        print(\"Scissors beats paper! I win! \")\n        continue\n    elif opponenetChoice == 'P' and userChoice.upper() == 'R':      \n        print(\"Paper beat rock, I win! \")\n        continue\n    else:       \n        print(\"You win!\")\n\t\t\n\t\t\n", "idx": 6940, "target": 0}
{"func": "# Write a function to return the total surface area of a cube of side a\ndef cal_surface_area_cube(a):\n    return 6*(a**2)\n\n", "idx": 6941, "target": 0}
{"func": "#78 class to show implementation of static method\nclass Mathematics:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self, msg=\"Demo class of Mathematics\"):\n        self.msg = msg\n\n    def __str__(self):\n        return f' String representation of an object'\n\n    def __repr__(self):\n        return f' repr representation of an object with parameter {self.msg}'\n\n    @staticmethod\n    def addition(a: \"Variable1\", b: 'Variable2'):\n        \"\"\"\n        @staticmethod makes the mtethod of class as static method.\n        It is always recommended to metion it via decorator.\n        \"\"\"\n        return a+b\n\n\n", "idx": 6942, "target": 0}
{"func": "#99 Write a Python program to calculate distance between two points using latitude and longitude.\nfrom math import radians, sin, cos, acos\n\nprint(\"Input coordinates of two points:\")\nslat = radians(float(input(\"Starting latitude: \")))\nslon = radians(float(input(\"Ending longitude: \")))\nelat = radians(float(input(\"Starting latitude: \")))\nelon = radians(float(input(\"Ending longitude: \")))\n\ndist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\nprint(\"The distance is %.2fkm.\" % dist)\n\n", "idx": 6943, "target": 0}
{"func": "# write a python generator function for generating Fibonacci Numbers \ndef fib(limit): \n    # Initialize first two Fibonacci Numbers  \n    a, b = 0, 1  \n    # One by one yield next Fibonacci Number \n    while a < limit: \n        yield a \n        a, b = b, a + b\n\n", "idx": 6944, "target": 0}
{"func": "# write a dictionary comprehension in python so that the values are square of the key number\n  \n  square_dict = {num: num*num for num in range(1, 11)}\n  print(square_dict)\n  \n", "idx": 6945, "target": 0}
{"func": "# write a function to check if a number is positive or not\n\ndef check(num):\n    if num > 0:\n        return True\n    return False\n\n", "idx": 6946, "target": 0}
{"func": "#17. Python Program to Display the multiplication Table\nnum = 12\n\nfor i in range(1, 11):\n   print(num, 'x', i, '=', num*i)\n\n\n", "idx": 6947, "target": 0}
{"func": "# Write a python function to find linear interpolation between two points x and y given a variable t\ndef linear_interpolate(x, y, t ):\n    if( t >=1 or t <= 0):\n        raise ValueError\n    return t*x + (1-t)*y\n\n", "idx": 6948, "target": 0}
{"func": "# 8 write a python function to accept a key, value pair and return a dictionary\n\n\ndef create_dictionary(key, value):\n    return {str(key): value}\n\n\n", "idx": 6949, "target": 0}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\ndef prod_of_roots(a:float,b:float):\n    if a:\n        return -b/a\n    else:\n        return None\n\n", "idx": 6950, "target": 0}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nwhile input_num:\n    print(input_num)\n    input_num -= 1\n\n\n", "idx": 6951, "target": 0}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        else:\n            return None\n    return None\n\n", "idx": 6952, "target": 0}
{"func": "# write a python function to return the cube of a number\n\ndef cube(num)\n    return num * num * num\n\n", "idx": 6953, "target": 0}
{"func": "# write a python program to count the number of each vowel and print them\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\nip_str = ip_str.casefold()\n\ncount = {}.fromkeys(vowels,0)\n\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n\n\n", "idx": 6954, "target": 0}
{"func": "# a(n) = a(n \u2212 1) + 2a(n \u2212 2) for n \u2265 2, with a(0) = 0, a(1) = 1.\ndef jacobsthal_seq(n):\n     if n >= 0:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 2 * jacobsthal_seq(n-2) + jacobsthal_seq(n-1)\n    \n    \n", "idx": 6955, "target": 0}
{"func": "# Write a Python function that returns biggest character in a string\n\nfrom functools import reduce\ndef biggest_char(string):\n    '''This function takes an input as a string and returns the biggest output character in the string'''\n    biggest_chr = lambda x, y: x if ord(x) > ord(y) else y\n    return reduce(biggest_chr, string)\n\n", "idx": 6956, "target": 0}
{"func": "# write a python function to check whether the given number is fibonacci or not\ndef fiboacci_number_check(n):\n    if(isinstance(n,int)):\n        result = list(filter(lambda num : int(math.sqrt(num)) * int(math.sqrt(num)) == num, [5*n*n + 4,5*n*n - 4] ))\n        return bool(result) \n    else:\n        raise TypeError(\"Input should be of type Int\") \n\n", "idx": 6957, "target": 0}
{"func": "# generate a random float where the value is between 5 and 95 using Python math module.\nimport random\nprint random.random()*100-5\n\n", "idx": 6958, "target": 0}
{"func": "# Generate weighted random numbers\nimport random\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)\nprint(randomList)\n\n", "idx": 6959, "target": 0}
{"func": "# Write a Python Program to print the Reverse a Given Number\n\nn=1023\nrev=0\nwhile(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 6960, "target": 0}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    words = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(words))  \n  \n    return reverse_sentence \n\n", "idx": 6961, "target": 0}
{"func": "#42 function to print the India Time\ndef get_India_time():\n    import datetime, pytz\n    print(datetime.datetime.now( pytz.timezone('Asia/kolkata') ))\n\n\n", "idx": 6962, "target": 0}
{"func": "# Write a program to get a list of locally installed Python modules\nimport pkg_resources\ninstalled_packages = pkg_resources.working_set\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\n     for i in installed_packages])\nfor m in installed_packages_list:\n    print(m)\n\n", "idx": 6963, "target": 0}
{"func": "# 62 write a python function to return mode of the data\n\nimport statistics\n\n\ndef mode(arr):\n    return statistics.mode(arr)\n\n\n", "idx": 6964, "target": 0}
{"func": "# write a python function to create multiplication table from the user provided number \n\ndef multiplication_table(n):\n  for i in range(1,11):\n    print(n,'x',i,'=',n*i)\n\n", "idx": 6965, "target": 0}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val for key, val in test_dict.items() \n                   if type(val) != int or val > K} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 6966, "target": 0}
{"func": "# Write a function to remove and print every third number from a list of numbers until the list becomes empty\ndef remove_nums(int_list):\n  position = 3 - 1 \n  idx = 0\n  len_list = (len(int_list))\n  while len_list>0:\n    idx = (position+idx)%len_list\n    print(int_list.pop(idx))\n    len_list -= 1\n\n\n", "idx": 6967, "target": 0}
{"func": "#80 write a program to print EVEN length words of a string \nstr = \"Python is a programming language\"\n\nwords = list(str.split(' '))\n\nprint \"str: \", str\nprint \"list converted string: \", words\nprint \"EVEN length words:\"\nfor W in words:\n\tif(len(W)%2==0 ):\n\t\tprint W\n        \n", "idx": 6968, "target": 0}
{"func": "# display the sorted words\n\nprint(\"The sorted words are:\")\nfor word in words:\n   print(word)\n\n", "idx": 6969, "target": 0}
{"func": "# Write a python function to extract only alphabets from a given string and also include spaces\ndef extract_alpha(my_string):\n    return \"\".join([ c for c in my_string if (c.isalpha() or c.isspace())])\n\n", "idx": 6970, "target": 0}
{"func": "# write a program to print 5 odd random numbers between 100 and 200\nimport random\nprint(random.sample([i for i in range(10, 100) if i%2 == 1], 5))\n\n\n", "idx": 6971, "target": 0}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i in range(len(list1)-1):\n  for j in range(i+1,len(list1)):\n    if(list1[i] > list1[j]):\n      temp = list1[i]\n      list1[i] = list1[j]\n      list1[j] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 6972, "target": 0}
{"func": "# write a python program to replace blank space to 1\nprint([i+j for i in \"abc\" for j in \"def\"])\n\n", "idx": 6973, "target": 0}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nfor key in dict_1:\n  if len(key)>len(max_key):\n    max_key=key\nprint(max_key)\n\n", "idx": 6974, "target": 0}
{"func": "#28 to get a random element from an array in python\nimport random\nlist_ = [1,2,3,4]\nrandom.choice(list_)\n\n", "idx": 6975, "target": 0}
{"func": "# Write a Python Program to Form a New String where the First Character and the Last Character have been Exchanged\n\ndef change(string):\n      return string[-1:] + string[1:-1] + string[:1]\n\n", "idx": 6976, "target": 0}
{"func": "# Write a python function to extract even length words in String\ndef findevenlenthwords(test_str):\n\tres = [] \n\tfor ele in test_str.split(): \n\t\tif len(ele) % 2 == 0: \n\t\t\tres.append(ele)  \n\treturn res\n\t\n\t\n\t\n", "idx": 6977, "target": 0}
{"func": "# Write a python program to convert complex number to polar coordinates\n\nimport cmath  \n      \n", "idx": 6978, "target": 0}
{"func": "# Write a Python Program to Convert Gray Code to Binary\n\ndef gray_to_binary(n):\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\n    n = int(n, 2)\n \n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n\n    return bin(n)[2:]\n\n", "idx": 6979, "target": 0}
{"func": "# Write a python function to replace all the spaces in an entered string with a hyphen \"-\"\ndef replacetext(string):\n    string = string.replace(\" \", \"-\")\n    return string\n\t\n\t\n\t\n", "idx": 6980, "target": 0}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \nprint(\"intial_list\", str(ini_tuple)) \n\nresult = [] \nfor i in ini_tuple: \n    if i[1] <= 100: \n        result.append(i) \nprint (\"Resultant tuple list: \", str(result)) \n\n\n", "idx": 6981, "target": 0}
{"func": "# write a program that divides corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nquot_list = [a/b for (a,b) in zip(list1, list2)]\nprint(quot_list)\n\n\n", "idx": 6982, "target": 0}
{"func": "# write a python function to print pyramid pattern\ndef pyramid_pattern(symbol='*', count=4):\n    for i in range(1, count + 1):\n        print(' ' * (count - i) + symbol * i, end='')\n        print(symbol * (i - 1) + ' ' * (count - i))\n\n\n", "idx": 6983, "target": 0}
{"func": "# Python program to reverse the string\ndef string_reverse(str1):\n    rstr1 = ''\n    index = len(str1)\n    while index > 0:\n        rstr1 += str1[index - 1]\n        index = index - 1\n    return rstr1\n\n\nprint(string_reverse('1234abcd'))\n\n\n", "idx": 6984, "target": 0}
{"func": "#4. write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\n\n", "idx": 6985, "target": 0}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\nclass CircleArea:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius * self.radius\n\n\nr = 2\nobj = CircleArea(r)\nprint(\"Area of circle:\", obj.area())\n\n\n", "idx": 6986, "target": 0}
{"func": "#35 how to open xml file element tree\nimport xml.etree.ElementTree as ET\n\ntree = ET.parse('filename.xml') \ntree_root = tree.getroot() \n\n", "idx": 6987, "target": 0}
{"func": "# Write a function to multiplies two lists element wise only if numbers are odd\ndef adds_listoddelements(l1:list, l2:list):\n    return [i*j for i, j in zip(l1,l2) if i*j%2 == 1]\n\n", "idx": 6988, "target": 0}
{"func": "# write a python function which takes sentence as input and remove vowels from a sentence\n\nsentence = input(\"Enter a sentence : \")\n\ndef fn(sentence):\n    vowels = 'aeiou'\n    return ''.join([ l for l in sentence if l not in vowels])\n\n", "idx": 6989, "target": 0}
{"func": "# write a Python function to check if a string is binary or not \n\ndef check2(string) : \n\n    t = '01'\n\n    count = 0\n    for char in string : \n\n        if char not in t : \n            count = 1\n            break\n        else : \n            pass\n    if count : \n        print(\"No, string is not binary\") \n    else : \n        print(\"Yes, string is binary\") \n\nstring = \"001021010001010\"\n\ncheck2(string) \n\n", "idx": 6990, "target": 0}
{"func": "# write a python program that prints the circumference of a circle\nimport math\nradius = 10\nprint(f'Area: {2 * math.pi * radius}')\n\n\n", "idx": 6991, "target": 0}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 6992, "target": 0}
{"func": "# write a program to print 5 random numbers divisible by 4 between 100 and 200\nimport random\nprint(random.sample([i for i in range(10, 100) if i%4 == 0], 5))\n\n\n", "idx": 6993, "target": 0}
{"func": "# write a function to calculate the hypotenuse of a triangle give base and height\n\nimport math\ndef calc_hypotenuse(base, height):\n    return math.sqrt(base * base + height * height)\n\n", "idx": 6994, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    for i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 6995, "target": 0}
{"func": "#41 how to sort a list in python using lambda\ndata = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]\n\ndata.sort(key=lambda x:x[0])\n\n", "idx": 6996, "target": 0}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    g = 9.8\n    return (mass*g*height)\n\n", "idx": 6997, "target": 0}
{"func": "# Write a Python function to capitalizes the first letter of each word in a string\ndef capitalize(text):\n  return text.title()\n\n\n", "idx": 6998, "target": 0}
{"func": "# write python code to merge two dictionaries\ndef merge_dict(dict1, dict2):\n    return(dict2.update(dict1))\n\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\nmerge_dict(dict1, dict2)\nprint(dict2)\n\n", "idx": 6999, "target": 0}
{"func": "# Python program to convert time from 12 hour to 24 hour format\ndef convert24(str1):\n    if str1[-2:] == \"AM\" and str1[:2] == \"12\":\n        return \"00\" + str1[2:-2]\n    elif str1[-2:] == \"AM\":\n        return str1[:-2]\n\n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n        return str1[:-2]\n    else:\n        return str(int(str1[:2]) + 12) + str1[2:8]\nprint(convert24(\"08:05:45 PM\"))\n\n\n", "idx": 7000, "target": 0}
{"func": "# Write a function which Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers Return True if its possible otherwise return False\n\nimport collections\ndef isPossibleDivide(nums, k):\n \n    d = collections.Counter(nums)\n    for num in sorted(d.keys()):\n        if num in d:\n            for i in range(k - 1, -1, -1):\n                d[num + i] -= d[num] \n                if d[num + i] == 0:\n                    del d[num + i]\n                if d[num + i] < 0:\n                    return False\n\n    return (True if not d else False)\n\t\n\t\n", "idx": 7001, "target": 0}
{"func": "# Write a Python function to print whether the given Date is valid or not\ndef date_validator(d,m,y):\n\timport datetime \n\ttry:\n\t\ts=datetime.date(y,m,d)\n\t\tprint(\"Date is valid.\")\n\texcept ValueError: \n\t\tprint(\"Date is invalid.\")\n\n\n", "idx": 7002, "target": 0}
{"func": "# python program to Filter String with substring at specific position\ndef f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    i, j = 0, 5\n    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 7003, "target": 0}
{"func": "# Write a Python program to create one-hot encodings of a categorical variable\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame(np.arange(25).reshape(5,-1), columns=list('abcde'))\ndf_onehot = pd.concat([pd.get_dummies(df['a']), df[list('bcde')]], axis=1)\nprint(df_onehot)\n\n\n", "idx": 7004, "target": 0}
{"func": "#6 write a function to print merger of two dictionary\ndef merge_dict(dict1: dict, dict2: dict):\n    \"\"\"\n    function to print merger of two dictionary\n    \"\"\"\n    final_dict = {**dict1, **dict2}\n    print(final_dict)\n\n\n", "idx": 7005, "target": 0}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 7006, "target": 0}
{"func": "# write a python function to generate 6 digit OTP\n\nimport math, random \ndef generateOTP() :  \n    digits = \"0123456789\"\n    OTP = \"\" \n    for i in range(6) : \n        OTP += digits[math.floor(random.random() * 10)]  \n    return OTP\n\n", "idx": 7007, "target": 0}
{"func": "# write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nimport random\nprint random.sample(range(100), 5)\n\n", "idx": 7008, "target": 0}
{"func": "# Write a function to calculate compound interest, given p, r, t\ndef comp_int(p, r, t):\n    amount = p * (1 + (r/100))**t\n    interest = amount - p\n    return interest\n\n\n", "idx": 7009, "target": 0}
{"func": "# write a python function to get HTML code for a given URL\ndef get_html(url=\"http://www.python.org\"):\n    import urllib.request\n\n    fp = urllib.request.urlopen(url)\n    mybytes = fp.read()\n    mystr = mybytes.decode(\"utf8\")\n    fp.close()\n    print(mystr)\n\n\n", "idx": 7010, "target": 0}
{"func": "# write a python program to print 5 random integers between 10 and 20\nimport random\nprint(random.sample(range(10, 20), 5))\n\n", "idx": 7011, "target": 0}
{"func": "# Write a Python program to print rank of an array/ matrix\nimport numpy as np\nA = np.array([[4,5,8], [7,1,4], [5,5,5], [2,3,6]])\nprint(\"Rank of the matrix A: \", np.linalg.matrix_rank(A))\n\n\n", "idx": 7012, "target": 0}
{"func": "#30. Write a python function to find HCf or GCD and return the value\ndef compute_hcf(x, y):\n\n", "idx": 7013, "target": 0}
{"func": "# write a function to multiply all the numbers in a list\ndef multiply_all(a_list):\n    product = 1\n    for i in a_list:\n        product *= i\n    return product\n\n", "idx": 7014, "target": 0}
{"func": "# Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. \nclass Rectangle(object):\n    def __init__(self, l, w):\n        self.length = l\n        self.width  = w\n    def area(self):\n        return self.length*self.width\naRectangle = Rectangle(2,10)\nprint aRectangle.area()\n\n", "idx": 7015, "target": 0}
{"func": "#6 write a program to remove empty List from List using list comprehension \ntest_list = [5, 6, [], 3, [], [], 9] \nprint(\"The original list is : \" + str(test_list)) \nres = [ele for ele in test_list if ele != []] \nprint (\"List after empty list removal : \" + str(res)) \n\n", "idx": 7016, "target": 0}
{"func": "#Write a function to find power of number using recursion\ndef power(N, P):\n    if (P == 0 or P == 1):\n        return N\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 7017, "target": 0}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list2):\n   list1 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, list2):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 7018, "target": 0}
{"func": "# write a python function to read a CSV file and print its content\ndef read_csv(filename):\n    import csv\n    with open(filename, newline='') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            print(row)\n\n", "idx": 7019, "target": 0}
{"func": "# write a python program to demonstarate working of map\n  \n  def addition(n): \n    return n + n   \n  numbers = (1, 2, 3, 4) \n  result = map(addition, numbers) \n  print(list(result)) \n  \n", "idx": 7020, "target": 0}
{"func": "# write a python function that returns the weighted average of numbers\ndef get_weighted_average(numbers, weightage):\n   return sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)\n\n\n", "idx": 7021, "target": 0}
{"func": "# Write a Python Program to Read a List of Words and Return the Length of the Longest One\n\na=['the', 'tsai', 'python']\nmax1=len(a[0])\ntemp=a[0]\nfor i in a:\n    if(len(i)>max1):\n       max1=len(i)\n       temp=i\nprint(\"The word with the longest length is:\")\nprint(temp)\n\n", "idx": 7022, "target": 0}
{"func": "# 36. Recursive Python function to solve the tower of hanoi  \ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        print \"Move disk 1 from source\",source,\"to destination\",destination \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print \"Move disk\",n,\"from source\",source,\"to destination\",destination \n    TowerOfHanoi(n-1, auxiliary, destination, source) \n\nn = 4\nTowerOfHanoi(n,'A','B','C') \n\nPython 3 program to find time for a \n", "idx": 7023, "target": 0}
{"func": "# T(n) = T(n \u2212 1) + T(n \u2212 2) + T(n \u2212 3) for n \u2265 3 [T(0) = 0, T(1) = 1, T(2) = 1]\ndef tribonacci_seq(n):\n    if n >= 0:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2 :\n            return 1\n        else:\n            return tribonacci_seq(n-1) + tribonacci_seq(n-2) + tribonacci_seq(n-3)\n        \n", "idx": 7024, "target": 0}
{"func": "# 61 write a python function to return the standard deviation of a list of numbers\n\nimport math\n\n\ndef st_dev(arr):\n    avg = sum(arr) / len(arr)\n    ss_dev = sum([(x - avg) ** 2 for x in arr])\n    return math.sqrt(ss_dev / (len(arr) - 1))\n\n\n", "idx": 7025, "target": 0}
{"func": "# write a python function get the random number from the given range and square the number\nimport random \n\nmin_value = 10\nmax_value = 20\n\ndef square(x):\n    return x*x\n\ndef get_square_of_random_number(min_value,max_value):\n    return square(random.randint(min_value,max_value))\n\nget_square_of_random_number(min_value,max_value)\n\n\n", "idx": 7026, "target": 0}
{"func": "#31 get the most common number in python\nfrom statistics import mode\nmode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))\n\n", "idx": 7027, "target": 0}
{"func": "# write a python program which takes 3 numbers as input and to print largest of three numbers using elif statement\n\na = float(input(\"Please Enter the First value: \"))\nb = float(input(\"Please Enter the First value: \"))\nc = float(input(\"Please Enter the First value: \"))\n\nif (a > b and a > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(a, b, c))\nelif (b > a and b > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(b, a, c))\nelif (c > a and c > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(c, a, b))\nelse:\n          print(\"Either any two values or all the three values are equal\")\n          \n", "idx": 7028, "target": 0}
{"func": "# Write a python program to generate and print all sentences where subject is in[\"Americans\", \"Indians\"] and verb is in [\"Play\", \"watch\"] and the object is in [\"Baseball\",\"cricket\"]\n\nsubjects=[\"Americans\",\"Indians\"]\nverbs=[\"play\",\"watch\"]\nobjects=[\"Baseball\",\"Cricket\"]\nsentence_list = [subject + \" \" + verb + \" \" + object + \".\" for subject in subjects for verb in verbs for object in objects]\nfor sentence in sentence_list:\n    print(sentence)\n\t\n\t\n", "idx": 7029, "target": 0}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 7030, "target": 0}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef print_dict_keys_val_1():\n    d=dict()\n    d[1]=1\n    d[2]=2**2\n    d[3]=3**2\n    print(d)\n        \n", "idx": 7031, "target": 0}
{"func": "# write a python function to return the factorial of a number\ndef fact(n):\n   if n == 1:\n      return n\n   else:\n      return n * fact(n-1)\n\n\n", "idx": 7032, "target": 0}
{"func": "# write a python function that returns True if the product of two provided numbers is even\ndef is_prod_even(num1, num2):\n   prod = num1 * num2\n   return not prod % 2\n\n\n", "idx": 7033, "target": 0}
{"func": "# Write a function to return the perimeter of an equilateral triangle\ndef cal_perimeter_eq_triangle(a):\n    return 3*a\n\n", "idx": 7034, "target": 0}
{"func": "# modify the 1st element of the 2nd sublist\nmy_list2[1][0] = 'a'\nprint(\"after my_list2[1][0] = 'a':  ---> \", my_list2)\n\nfor a, b in zip(my_list1, my_list2):\n    print('id my_list1: {}, id my_list2: {}'.format(id(a), id(b)))\n\n", "idx": 7035, "target": 0}
{"func": "#48 write a program to print all prime numbers between an interval\n\nlower = int(input(\"Enter lower range: \"))  \nupper = int(input(\"Enter upper range: \"))  \n  \nfor num in range(lower,upper + 1):  \n   if num > 1:  \n       for i in range(2,num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           print(num)  \n           \n", "idx": 7036, "target": 0}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 7037, "target": 0}
{"func": "#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.\ndef is_arithmetic(l):\n    delta = l[1] - l[0]\n    for index in range(len(l) - 1):\n        if not (l[index + 1] - l[index] == delta):\n             return False\n    return True\n\n", "idx": 7038, "target": 0}
{"func": "# hand is theta \ndef printTime(theta): \n  \n    for hh in range(0, 12): \n        for mm in range(0, 60): \n            if (calcAngle(hh, mm)==theta): \n                print(hh, \":\", mm, sep = \"\") \n                return\n              \n    print(\"Input angle not valid.\") \n    return\n\n", "idx": 7039, "target": 0}
{"func": "# write a python program to print the difference in days between two dates\nfrom datetime import date\ndate1 = date(2020, 10, 25)\ndate2 = date(2020, 12, 25)\nprint(f'Difference between dates: {(date2 - date1).days}')\n\n\n", "idx": 7040, "target": 0}
{"func": "#42 write a function to subtract two matrices in python\nmatrix1 = [[0, 1, 2], \n           [3, 5, 5], \n           [6, 7, 8]]\n\nmatrix2 = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n\ndef subtractTheMatrix(matrix1, matrix2):\n    matrix1Rows = len(matrix1)\n    matrix2Rows = len(matrix2)\n    matrix1Col = len(matrix1[0])\n    matrix2Col = len(matrix2[0])\n\n    #base case\n    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):\n        return \"ERROR: dimensions of the two arrays must be the same\"\n\n    matrix = []\n    rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            rows.append(0)\n        matrix.append(rows.copy())\n        rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            matrix[i][j] = matrix1[i][j] - matrix2[i][j]\n            \n    return matrix\n\n", "idx": 7041, "target": 0}
{"func": "# write a python function to return dictionary of two lists using zip \ndef dict_using_comp(list1, list2):\n  dict_using_comp = {key:value for (key, value) in zip(list1, list2)} \n  return dict_using_comp\n\n", "idx": 7042, "target": 0}
{"func": "# write a program to remove the empty list from the given list \nstr_list = [\"Emma\", \"Jon\", \"\", \"Kelly\", None, \"Eric\", \"\"]\n\nprint(str_list)\n\n", "idx": 7043, "target": 0}
{"func": "# Write a function to find acceleration, given u, v and t\n\ndef acc(u, v, t):\n    return (v-u)/t\n\n", "idx": 7044, "target": 0}
{"func": "# Write a python Class to calculate Perimeter of a circle and print the vale for a radius\n\nclass CirclePerimeter():\n    def __init__(self,radius):\n        self.radius=radius\n    def perimeter(self):\n        return 2 * 3.14 * self.radius\na=6\nobj=CirclePerimeter(a)\nprint(\"Perimeter of rectangle:\",obj.perimeter())\n\n", "idx": 7045, "target": 0}
{"func": "# Write a function to calculate the displacement of an object with initial velocity u, time t and acceleration a\ndef cal_displacement(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity*time + .5*accelration*(time)**2\n\n", "idx": 7046, "target": 0}
{"func": "# Write a function to find out if permutations of a given string is a palindrome\n\ndef has_palindrome_permutation(the_string):\n    unpaired_characters = set()\n\n    for char in the_string:\n        if char in unpaired_characters:\n            unpaired_characters.remove(char)\n        else:\n            unpaired_characters.add(char)\n\n\n    return len(unpaired_characters) <= 1\t\t\t\t   \n\t\t\n\t\t\n", "idx": 7047, "target": 0}
{"func": "# Write a Python Program to Check and print if a given year is a Leap Year\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n       print(f\"{year} is a leap year\")\nelse:\n   print(f\"{year} is not a leap year\")\n   \n\n   \n\n", "idx": 7048, "target": 0}
{"func": "#24 convert string to intern string\ndef str_to_intern_str(a):\n    import sys\n    b = sys.intern(a)\n    if a is b:\n        print('Sentence is interned')\n    else:\n        raise ValueError('This should not happen')\n\n\n", "idx": 7049, "target": 0}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\ndef cal_total_res_in_series(res_list:list)->float:\n    return sum(res_list)\n\n", "idx": 7050, "target": 0}
{"func": "# No problem to use the same variable name in the local scope without affecting the local counterpart:\ndef my_func():\n    var = 'locally changed'\nvar = 'global'\nmy_func()\nprint(var)\n\n", "idx": 7051, "target": 0}
{"func": "# write a python program that takes input a list and cube every term using list comprehension\n\ns1 = eval(input(\"Enter list \"))\nprint([i**3 for i in s1])\n\n", "idx": 7052, "target": 0}
{"func": "# Write a program to print inverted star pattern for the given number\n\nn=11\n\nfor i in range (n, 0, -1): \n    print((n-i) * ' ' + i * '*') \n\t\n\n\t\n", "idx": 7053, "target": 0}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 7054, "target": 0}
{"func": "# Write a Python function to check whether a person is eligible for voting or not based on their age\ndef vote_eligibility(age):\n\tif age>=18:\n\t    status=\"Eligible\"\n\telse:\n\t    status=\"Not Eligible\"\n\treturn status\n\n\n", "idx": 7055, "target": 0}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsampleJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith open(\"sampleJson.json\", \"w\") as write_file:\n    json.dump(sampleJson, write_file, indent=4, sort_keys=True)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 7056, "target": 0}
{"func": "# 83 With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate(li):\n    newli = []\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add(item)\n            newli.append(item)\n    return newli\n\n\nli = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]\nprint(removeDuplicate(li))\n\n", "idx": 7057, "target": 0}
{"func": "# write a python program to replace blank space to 1\ndef f12(x):\n    yield x+1\n    print(\"test\")\n    yield x+2\ng=f12(9)\nprint(next(g))\n\n", "idx": 7058, "target": 0}
{"func": "#5 write a program to print negative Numbers in given range \nstart, end = -4, 19\nfor num in range(start, end + 1): \n    if num < 0: \n        print(num, end = \" \") \n        \n", "idx": 7059, "target": 0}
{"func": "# write a python function to calculate the day difference between two user provided dates\n\ndef days_diff(start, end):\n  return (end - start).days\n\n", "idx": 7060, "target": 0}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef shift_and_scale(list_of_nums, mean, std):\n    return [ (x-mean) / std for x in list_of_nums ]\n\n\n", "idx": 7061, "target": 0}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using class\n\nclass Fib:\n    def __init__(self):\n        self.cache = {1:1, 2:1}\n\n    def fib(self, n):\n        if n not in self.cache:\n            print(f'Calculating fib({n})')\n            self.cache[n] = self.fib(n-1) + self.fib(n-2)\n        return self.cache[n]\n\n", "idx": 7062, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = num1 if num1 > num2 else num2\n    while True:\n        if (bigger % num1 == 0) and (bigger % num2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 7063, "target": 0}
{"func": "# write a python program to print a dictionary where the keys are numbers between 1 and 10 (both included) and the values are square of keys.\n\nd=dict()\nfor x in range(1,11):\n    d[x]=x**2\nprint(d)\n\n", "idx": 7064, "target": 0}
{"func": "# write a python function to print a given string n times\ndef printn(string, n):\n   print(string * n)\n\n\n", "idx": 7065, "target": 0}
{"func": "# Write a python program using kwargs\ndef fav_colors(**kwargs):\n''' kwargs comes as a dictionary '''\nprint(kwargs)\nfor person, color in kwargs.items():\nprint(f\"{person}'s favorite color is {color}\")\n\nfav_colors(sriju=\"red\", faizu=\"yellow\", kabir=\"black\")\n\n", "idx": 7066, "target": 0}
{"func": "# initializing range \ni, j = 2, 5\nr=''\nfor z in test_list:\n    r += z[i:j] \nprint(r)\n\n", "idx": 7067, "target": 0}
{"func": "#Write a function to convert Miles to Kilometers\ndef Miles_to_Kilometers(m):\n    conv_fac = 0.621371\n    kilometers = m / conv_fac\n    return kilometers    \n\n10. \n", "idx": 7068, "target": 0}
{"func": "# write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\nprint random.sample([i for i in range(100,201) if i%2==0], 5)\n\n", "idx": 7069, "target": 0}
{"func": "# Write a function that returns derivative of tan value of the input\ndef derivative_tan(x:float)-> float:\n    import math\n    return (1/math.cos(x))**2\n\n\n", "idx": 7070, "target": 0}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flattened\n\n", "idx": 7071, "target": 0}
{"func": "# 23 write a function to calculate the residual sum of squares between two lists of the same size\n\n\ndef rss(lst1, lst2):\n    diff = [lst1[x] - lst2[x] for x in range(len(lst1))]\n    return sum(list(map(lambda x: x ** 2, diff)))\n\n\n", "idx": 7072, "target": 0}
{"func": "# Write a program which can map() to make a list whose elements are square of elements in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nsquaredNumbers = map(lambda x: x**2, li)\nprint(squaredNumbers)\n\n", "idx": 7073, "target": 0}
{"func": "# write a python program to accept three distinct digits and prints all possible combinations from the digits.\n\na=int(input(\"Enter first number:\"))\nb=int(input(\"Enter second number:\"))\nc=int(input(\"Enter third number:\"))\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])\n\n", "idx": 7074, "target": 0}
{"func": "# Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\ns = raw_input()\nwords = [word for word in s.split(\" \")]\nprint \" \".join(sorted(list(set(words))))\n\n", "idx": 7075, "target": 0}
{"func": "# Write a Python program to keep only top 2 most frequent values as it is and replace everything else as \u2018Other\u2019 in a series\nimport pandas as pd\nimport numpy as np\nnp.random.RandomState(100)\nser = pd.Series(np.random.randint(1, 5, [12]))\nser[~ser.isin(ser.value_counts().index[:2])] = 'Other'\nprint(ser)\n\n\n", "idx": 7076, "target": 0}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(radius):\n    pi = 3.14\n    return 4*pi*(radius**2)\n\n", "idx": 7077, "target": 0}
{"func": "# Write a Python program to create the multiplication table (from 1 to 10) of a number.\nn = int(input(\"Input a number: \"))\nfor i in range(1,11):\nprint(n,'x',i,'=',n*i)\n\n", "idx": 7078, "target": 0}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor ele in test_list: \n    try: \n        res *= int(ele) \n    except : \n        pass\nprint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 7079, "target": 0}
{"func": "# Write a function to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 7080, "target": 0}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i in range(len(v1)):\n  s1[i] = v1[i] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 7081, "target": 0}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) for val in list1] \n  \nprint(res) \n\n", "idx": 7082, "target": 0}
{"func": "# Define a class named American and its subclass NewYorker. \nclass American(object):\n    pass\nclass NewYorker(American):\n    pass\nanAmerican = American()\naNewYorker = NewYorker()\nprint anAmerican\nprint aNewYorker\n\n", "idx": 7083, "target": 0}
{"func": "# make sure all of dict's values are unique\nassert len(_dict) == len(set(_dict.values()))\nreversed_dict = {v: k for k, v in _dict.items()}\nprint(reversed_dict)\n\n\n", "idx": 7084, "target": 0}
{"func": "# write a python program to print prime factors of user provided number\n\nimport math \ndef primeFactors(n): \n\twhile n % 2 == 0: \n\t\tprint(2), \n\t\tn = n / 2\n\tfor i in range(3,int(math.sqrt(n))+1,2): \n\t\twhile n % i== 0: \n\t\t\tprint(i), \n\t\t\tn = n / i \n\tif n > 2: \n\t\tprint(n)\n\n", "idx": 7085, "target": 0}
{"func": "#96 write a program for binary search\n\ndef binary_search(l, num_find):\n\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    \n    found = False\n    position = -1\n\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            position = mid\n            break\n        \n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n\n    return (found, position)\n\nif __name__=='__main__':\n    \n    l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    num = 6\n    found = binary_search(l, num)\n    if found[0]:\n        print('Number %d found at position %d'%(num, found[1]+1))\n    else:\n        print('Number %d not found'%num)\n        \n", "idx": 7086, "target": 0}
{"func": "# write a Python function to find the Area of Icosahedron \n\ndef findArea(a): \n  \n    area = 5 * 3 ** 0.5 * a * a \n    return area \n\na = 5\nprint(\"Area: \" , findArea(a)) \n\n", "idx": 7087, "target": 0}
{"func": "# Write a python program to sort alphabetically the words form a string provided by the user \t\ndef sortwords(my_str):\n\twords = my_str.split()\n\twords.sort()\n\treturn ' '.join(words)\n\n\n\n\n", "idx": 7088, "target": 0}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(radius):\n    pi = 3.14\n    return 4*pi*(radius**2)\n\n", "idx": 7089, "target": 0}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntarget = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    for j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 7090, "target": 0}
{"func": "#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.\ndef checkSubset(input_list1, input_list2): \n    return all(map(input_list1.__contains__, input_list2)) \n      \n\nlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \nlist2 = [[1, 3],[13,15,17]]   \nprint(\"Original list:\")\nprint(list1)\nprint(list2)\nprint(\"\\nIf the one of the said list is a subset of another.:\")\nprint(checkSubset(list1, list2))\n\n", "idx": 7091, "target": 0}
{"func": "# Write a Python function to calculate factorial of a given no using class\n\nclass Fact:\n    def __init__(self):\n        self.cache = {0:1, 1:1}\n\n    def fact(self, n):\n        if n not in self.cache:\n            self.cache[n] = self.fact(n-1) * n\n        return self.cache[n]\n\n", "idx": 7092, "target": 0}
{"func": "#10 write a python function to remove duplicate from a list.\ndef remove_duplicates(dup_list: list):\n    print(list(set(dup_list)))\n\n\n", "idx": 7093, "target": 0}
{"func": "# 11. python program to find whether a number is prime\ndef test_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \n\n", "idx": 7094, "target": 0}
{"func": "#33 write a python function to flatten nested lists\nfrom collections import Iterable\ndef flatten(lis):\n    for item in lis:\n        if isinstance(item, Iterable) and not isinstance(item, str):\n            for x in flatten(item):\n                yield x\n        else:\n            yield item\n\n", "idx": 7095, "target": 0}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_even_elements(l:list):\n    return sum([i for i in l if i%2==0])\n\n", "idx": 7096, "target": 0}
{"func": "# Write a Python function to find numbers within a given range where every number is divisible by every digit it contains. \ndef divisible_by_digits(start_num, end_num):\n    return [n for n in range(start_num, end_num+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\n", "idx": 7097, "target": 0}
{"func": "#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate\ndef getBaseTen(binaryVal):\n    count = 0\n\n    binaryVal = binaryVal[::-1]\n\n\tfor i in range(0, len(binaryVal)):\n    \tif(binaryVal[i] == \"1\"):\n            count += 2**i\n    \n    return count\n\n", "idx": 7098, "target": 0}
{"func": "# 97 write a python function that accepts a number, and returns the nearest square number\nimport math\n\n\ndef nearest_square(n):\n    upp = math.floor(math.sqrt(n))\n    low = math.floor(math.sqrt(n))\n    upp_diff = upp ** 2 - n\n    low_diff = n - low ** 2\n\n    if upp_diff > low_diff:\n        return upp\n    else:\n        return low\n\n\n", "idx": 7099, "target": 0}
{"func": "# Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.\ndef no_notes(a):\n  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n  x = 0\n  for i in range(9):\n    q = Q[i]\n    x += int(a / q)\n    a = int(a % q)\n  if a > 0:\n    x = -1\n  return x\n\n\n", "idx": 7100, "target": 0}
{"func": "# Write a function that returns a dictionary sorted descending by its values\ndef descending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[1])}\n\n", "idx": 7101, "target": 0}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnumber = secrets.randbelow(30)\nprint(number)\n\n", "idx": 7102, "target": 0}
{"func": "# write a function to rotate string left by a given length  \n  \ndef rotate_left(input,d):  \n  \n    Lfirst = input[0 : d]  \n    Lsecond = input[d :]  \n    return (Lsecond + Lfirst) \n\n", "idx": 7103, "target": 0}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res = res + test_str[idx].upper() \n    else: \n       res = res + test_str[idx].lower() \nprint(res)\n\n", "idx": 7104, "target": 0}
{"func": "# Counting total alphanumeric in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 7105, "target": 0}
{"func": "#36. Python funcction to Find the Factors of a Number\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 7106, "target": 0}
{"func": "# Write a Python function to find the number of zeros at the end of a factorial of a given positive number.\ndef factendzero(n):\n  x = n // 5\n  y = x \n  while x > 0:\n    x /= 5\n    y += int(x)\n  return y\n\n\n", "idx": 7107, "target": 0}
{"func": "# Write a Python Program to Take in Two Strings and Print the Larger String\n\nstring1='python'\nstring2='theschoolofai'\ncount1=0\ncount2=0\nfor i in string1:\n      count1=count1+1\nfor j in string2:\n      count2=count2+1\nif(count1<count2):\n      print(\"Larger string is:\")\n      print(string2)\nelif(count1==count2):\n      print(\"Both strings are equal.\")\nelse:\n      print(\"Larger string is:\")\n      print(string1)\n\n", "idx": 7108, "target": 0}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\ns = str1.split(' ')\nfor word in s:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 7109, "target": 0}
{"func": "# Write a function to calculate the total resistance of resistances in series in a given list\ndef cal_total_res_in_series(res_list:list)->float:\n    return sum(res_list)\n\n", "idx": 7110, "target": 0}
{"func": "# Write a python program to Check and print if string is palindrome using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\ntext = \"ABA\"\n \nfor character in text:\n    s.push(character)\n \nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n \nif text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')\n\n", "idx": 7111, "target": 0}
{"func": "# write a python function to check if a given string is a palindrome\ndef is_palindrome(string):\n   return string == string[::-1]\n\n\n", "idx": 7112, "target": 0}
{"func": "# Write a python program to reverse a string\ns = \"i like this program very much\"\nwords = s.split(' ')\nstring =[]\nfor word in words:\n    string.insert(0, word)\n \nprint(\"Reversed String:\")\nprint(\" \".join(string))\n\n\n\n", "idx": 7113, "target": 0}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\ndef cal_surface_area_cuboid(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\n", "idx": 7114, "target": 0}
{"func": "# By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nli = [12,24,35,24,88,120,155]\nli = [x for x in li if x!=24]\nprint li\n\n", "idx": 7115, "target": 0}
{"func": "# Write a python function to get the volume of a cylinder with radius & height as input\ndef cylinder_volume(radius, height):\n    volume = 3.14 * (radius ** 2) * height\n    return volume\n\n", "idx": 7116, "target": 0}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nupper = []\nfor char in str1:\n    if char.islower():\n        lower.append(char)\n    else:\n        upper.append(char)\nsorted_string = ''.join(lower + upper)\nprint(sorted_string)\n\n", "idx": 7117, "target": 0}
{"func": "# Write a Python program to fill an intermittent time series so all missing dates show up with values of previous non-missing date\nimport pandas as pd\nimport numpy as np\nser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))\nprint(ser.resample('D').ffill())\n\n\n", "idx": 7118, "target": 0}
{"func": "# Write functions which given Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\ndef cross_sum(nums, left, right, p):\n    if left == right:\n        return nums[left]\n\n    left_subsum=float('-Inf')\n\n    current_sum = 0\n    for i in range(p, left-1, -1):\n        current_sum += nums[i]\n        left_subsum = max(left_subsum, current_sum)\n\n        right_subsum=float('-Inf')\n\n        current_sum = 0\n        \n    for i in range(p+1, right+1):\n        current_sum += nums[i]\n        right_subsum = max(right_subsum, current_sum)\n\n    return left_subsum + right_subsum\n\ndef helper(nums, left, right):\n    if left == right: \n        return nums[left]\n\n    p = (left + right) // 2\n\n    left_sum = helper(nums, left, p)\n    right_sum = helper(nums, p+1, right)\n    cross_sum1 =  cross_sum(nums, left, right, p)\n\n    return max(left_sum, right_sum, cross_sum1)\n\ndef maxSubArray(nums):\n    return helper(nums, 0, len(nums) -1)\n\t\n\n", "idx": 7119, "target": 0}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res: \n            res[inner_list] += (inner_dict[inner_list]) \n        else: \n            res[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res))\n\n", "idx": 7120, "target": 0}
{"func": "# Convert dictionary to JSON\nimport json\nperson_dict = {'name': 'Bob',\n'age': 12,\n'children': None\n}\nperson_json = json.dumps(person_dict)\nprint(person_json)\n\n", "idx": 7121, "target": 0}
{"func": "#64 write a program to print all disarium numbers between 1 and 100\n\ndef calculateLength(n):    \n    length = 0;    \n    while(n != 0):    \n        length = length + 1;    \n        n = n//10;    \n    return length;    \n   \ndef sumOfDigits(num):    \n    rem = sum = 0;    \n    len = calculateLength(num);    \n        \n    while(num > 0):    \n        rem = num%10;    \n        sum = sum + (rem**len);    \n        num = num//10;    \n        len = len - 1;    \n    return sum;    \n      \nresult = 0;    \n     \nprint(\"Disarium numbers between 1 and 100 are\");    \nfor i in range(1, 101):    \n    result = sumOfDigits(i);    \n        \n    if(result == i):    \n        print(i),  \n        \n", "idx": 7122, "target": 0}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\ndef cal_mi_ring(mass:float,radius:float)->float:\n    return mass*(radius**2)\n\n\n", "idx": 7123, "target": 0}
{"func": "# write a program to convert given dictonary to list of list key value pairs \n\nd = {'Food':'Fish&Chips','2012':'Olympics','Capital':'London'}\nlist_key_value = [ [k,v] for k, v in d.items() ]\nprint(f'lsit_key_value:{list_key_value}')\n\n\n", "idx": 7124, "target": 0}
{"func": "# write a python function to pad a user provided number to specified length\n\ndef pad_number(n, l):\n  return str(n).zfill(l)\n\n", "idx": 7125, "target": 0}
{"func": "# Python program to find the  difference between two times\n\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 7126, "target": 0}
{"func": "#13. Python Program to Find the Largest Among Three Numbers\n\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 7127, "target": 0}
{"func": "# Write a Python program to convert a list into a nested dictionary of keys.\nnum_list = [1, 2, 3, 4]\nnew_dict = current = {}\nfor name in num_list:\ncurrent[name] = {}\ncurrent = current[name]\nprint(new_dict)\n\n", "idx": 7128, "target": 0}
{"func": "# Write a function to return the area of a square\ndef cal_area_square(side):\n    return side**2\n\n", "idx": 7129, "target": 0}
{"func": "# Generate a random date between given start and end dates\nimport random\nimport time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, time.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 7130, "target": 0}
{"func": "# Write a function to return day of a week, given the number\ndef give_day(n):\n    day_dict = {1: 'Sunday', 2: 'Monday', 3: 'Tuesday', 4: 'Wednesday', 5: 'Thursday', 6: 'Friday', 7: 'Saturday'}\n    return day_dict[n]\n\n\n", "idx": 7131, "target": 0}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item in str1 if item.isdigit()])\nprint(res)\n\n", "idx": 7132, "target": 0}
{"func": "# Write a function that strips every vowel from a string provided\ndef strip_vowels(input_str:str)->str:\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]\n    return ''.join(list(filter(lambda x: x not in vowels, input_str)))\n\n", "idx": 7133, "target": 0}
{"func": "# write a python program to Check Leap Year\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(f\"{year} is a leap year\")\n       else:\n           print(f\"{year} is not a leap year\")\n   else:\n       print(f\"{year} is a leap year\")\nelse:\n   print(f\"{year} is not a leap year\")\n\n", "idx": 7134, "target": 0}
{"func": "# Write a python function to simulate an exception and log the error using logger provided by the user.\ndef exception_simulator(logger):\n    try:\n        raise ValueError\n    except ValueError:\n        logger.exception(\"ValueError occured in the function\")\n\n", "idx": 7135, "target": 0}
{"func": "# write a python function to return the natural logarithm of a number \ndef get_natural_log_value(i):\n    import math\n    return(math.log(i))\n\n", "idx": 7136, "target": 0}
{"func": "# write a Python function to Find HCF of two numbers\ndef hcf(x, y):  \n   if x > y:  \n       smaller = y  \n   else:  \n       smaller = x  \n   for i in range(1,smaller + 1):  \n       if((x % i == 0) and (y % i == 0)):  \n           hcf = i  \n   return hcf  \n   \n   \n   \n", "idx": 7137, "target": 0}
{"func": "# Write a Python function to print number with commas as thousands separators \ndef formattedNumber(n):\n  return (\"{:,}\".format(n))\n\n\n", "idx": 7138, "target": 0}
{"func": "# Write a function to convert the temprature celsius 'c' to fahrenheit 'f' or fahrenheit to celsius\n def temp_converter(temp,temp_given_in = 'f'):\n    # Return the converted temprature\n    if temp_given_in.lower() == 'f': # Convert to C\n        return (temp - 32) * (5/9)\n    else: # Convert to F\n        return (temp * 9/5) + 32\n\n\n\n", "idx": 7139, "target": 0}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\ndef cal_area_rhombus(q1,q2):\n    return (q1*q2)/2\n\n", "idx": 7140, "target": 0}
{"func": "# Write a python function to remove all digits and underscores from a Unicode strings\nimport re\ndef extract_unicode(my_string):\n    regex = re.compile(r'[^\\W\\d_]+', re.UNICODE)    \n    return regex.findall(my_string)\n\n", "idx": 7141, "target": 0}
{"func": "#4 write a program to print Even Numbers in a List \nlist1 = [10, 21, 4, 45, 66, 93] \nfor num in list1: \n    if num % 2 == 0: \n       print(num, end = \" \") \n       \n", "idx": 7142, "target": 0}
{"func": "# 29 write a program to sort a list using bubblesort\n\n\ndef bubblesort(arr):\n    n = len(arr)\n\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\n\nprint(bubblesort([1, 33, 192, 21, 0]))\n\n", "idx": 7143, "target": 0}
{"func": "# write a python program to convert two lists into dictionary\n\ncolumn_names = ['id', 'color', 'style']\ncolumn_values = [1, 'red', 'bold']\nname_to_value_dict = dict(zip(column_names, column_values))\nname_to_value_dict = {key:value for key, value in zip(column_names, column_values)}\nname_value_tuples = zip(column_names, column_values) \nname_to_value_dict = {} \nfor key, value in name_value_tuples: \n    if key in name_to_value_dict: \n        pass  \n    else: \n        name_to_value_dict[key] = value\nprint(name_to_value_dict)\n\n", "idx": 7144, "target": 0}
{"func": "# Write a function to return the area of a rectangle\ndef cal_area_rect(length, breadth):\n    return length*breadth\n\n", "idx": 7145, "target": 0}
{"func": "# Write a python function to extract URLs from a sentence\n\nimport re \n  \ndef FindUrls(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n\t\n\t\n", "idx": 7146, "target": 0}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 7147, "target": 0}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res))\n\n", "idx": 7148, "target": 0}
{"func": "# write a python function to make permutations from a list with given length\ndef get_permutations(data_list, l=2):\n    return list(permutations(data_list, r=l))\n\n\n", "idx": 7149, "target": 0}
{"func": "# Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters.\ndef to_uppercase(str1):\nnum_upper = 0\nfor letter in str1[:4]:\nif letter.upper() == letter:\nnum_upper += 1\nif num_upper >= 2:\nreturn str1.upper()\nreturn str1\n\nprint(to_uppercase('PyThon'))\n\n", "idx": 7150, "target": 0}
{"func": "# 45. python function for finding tangent angle\ndef tangent(angle):\n\n  \"\"\" returns the tangent value for an angle mentioned in radians\"\"\"\n\n  return math.tan(angle)\n\n", "idx": 7151, "target": 0}
{"func": "# Python program to count number 4 in the given list\ndef list_count_4(nums):\n    count = 0\n    for num in nums:\n        if num == 4:\n            count = count + 1\n\n    return count\n\n\nprint(list_count_4([1, 4, 6, 7, 4]))\nprint(list_count_4([1, 4, 6, 4, 7, 4]))\n\n\n", "idx": 7152, "target": 0}
{"func": "# Write a python function to implement 0/1 Knapsack problem\n\ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                   knapSack(W, wt, val, n-1))  \n\n\n", "idx": 7153, "target": 0}
{"func": "# Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nlines = []\nwhile True:\n    s = input()\n    if s:\n        lines.append(s.upper())\n    else:\n        break;\n\nfor sentence in lines:\n    print(sentence)\n\n\n", "idx": 7154, "target": 0}
{"func": "# Define a class, which has a class parameter and have a same instance parameter.\nclass Person:\n    name = \"Person\"\n    \n    def __init__(self, name = None):\n        self.name = name\n\n", "idx": 7155, "target": 0}
{"func": "# write a python function for binary search\n\ndef binary_search(arr, low, high, x): \n    if high >= low: \n  \n        mid = (high + low) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] > x: \n            return binary_search(arr, low, mid - 1, x) \n\n        else: \n            return binary_search(arr, mid + 1, high, x) \n    else: \n        return -1\n \n", "idx": 7156, "target": 0}
{"func": "# A naive recursive Python implementation \n  \ndef binomialCoeff(n , k): \n  \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1\n  \n    # Recursive Call \n    return binomialCoeff(n-1 , k-1) + binomialCoeff(n-1 , k) \n  \n", "idx": 7157, "target": 0}
{"func": "# write a python function to generate wordcloud on given text or file\nimport os\n\n\ndef get_word(data):\n    if not (isinstance(data, str) or os.path.isfile(data)):\n        raise TypeError(\"Text must be string or a File object.\")\n    from wordcloud import WordCloud, STOPWORDS\n    import matplotlib.pyplot as plt\n    stopwords = set(STOPWORDS)\n    if os.path.isfile(data):\n        with open(data, 'r') as f:\n            data = f.read()\n\n    data = ' '.join(data.lower().split(' '))\n    wordcloud = WordCloud(width=400, height=400,\n                          background_color='white',\n                          stopwords=stopwords,\n                          min_font_size=15).generate(data)\n\n    # plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n\n    plt.show()\n\n\n", "idx": 7158, "target": 0}
{"func": "# Write a Python Program to Check if a Number is an Armstrong Number\n\ndef amstrong_check(n):\n    a=list(map(int,str(n)))\n    b=list(map(lambda x:x**3,a))\n    if(sum(b)==n):\n        return True\n    else:\n        return False\n\n", "idx": 7159, "target": 0}
{"func": "# Write a function that returns a dictionary sorted descending by its keys\ndef descending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[0])}\n\n", "idx": 7160, "target": 0}
{"func": "# Write a Python program to Check Divisibility of 2 numbers\nnominator = int (input (\"Enter Nominator: \"))\ndenominator = int (input (\"Enter Denominator: \"))\nif nominator % denominator == 0:\nprint(\"{} is completely Divisible by {}\".format(nominator, denominator))\nelse:\nprint (\"{} is not completely Divisible by {}\".format(nominator, denominator))\n\n", "idx": 7161, "target": 0}
{"func": "# Write a python function Password match the required criteria:\ndef PasswordMatchCriteria(pas):\nupper,lower,special,num = 0,0,0,0\nfor x in pas:\nif (len(pas) >= 6) and (len(pas) <=12):\nif x.isupper():\nupper+=1\nelif x.islower():\nlower+=1\nelif x.isnumeric():\nnum +=1\nelif x.isspace():\nj = 0\nelse:\nspecial += 1\nif (upper > 0) and (lower > 0) and (special > 0) and (num > 0):\nreturn True\nelse:\nFalse\npasswords = input(\"Enter Passwords which are seperated by \\\",\\\": \")\npassword = passwords.split(\",\")\nfor i in password:\nif PasswordMatchCriteria(i):\nprint(i)\n\n", "idx": 7162, "target": 0}
{"func": "# Write a python program to check and print if the number is a perfect number\n\nn = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in range(1, n):\n    if(n % i == 0):\n        sum1 = sum1 + i\nif (sum1 == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")\n\t\n\t\n", "idx": 7163, "target": 0}
{"func": "#19 Write a python function to remove i'th character from a string\n\ndef remove(string, i):  \n  \n    # Characters before the i-th indexed \n    # is stored in a variable a \n    a = string[ : i]  \n      \n    # Characters after the nth indexed \n    # is stored in a variable b \n    b = string[i + 1: ] \n      \n    # Returning string after removing \n    # nth indexed character. \n    return a + b \n\n", "idx": 7164, "target": 0}
{"func": "# write a Python function to convert Fraction to Mixed Number\n\ndef reduce_frac(n, d):\n    for i in range(min(n, d), 0, -1):\n        if not n%i and not d%i:\n            return '{}/{}'.format(n//i, d//i)\n\ndef mixed_number(frac):\n    n, d = map(int, frac.lstrip('-').split('/'))\n    sign = '-' if frac.startswith('-') else ''\n\n    if not n%d:\n        return sign + str(n//d)\n    n, r = divmod(n, d)\n    return sign + '{} {}'.format(n, reduce_frac(r, d)).lstrip('0 ')\n\n\nprint(mixed_number(\"5/4\"))\n\n\n", "idx": 7165, "target": 0}
{"func": "# values() extracting dictionary values \nres = [sub for sub in test_list if sorted( \n    list(sub.values())) == list(sub.values())] \n  \n", "idx": 7166, "target": 0}
{"func": "# write a python function to linearly search an array for a given number and return its index else return -1\n\ndef search(arr, n, x): \n    for i in range(0, n): \n        if (arr[i] == x): \n            return i \n    return -1\n  \n  \n", "idx": 7167, "target": 0}
{"func": "# write a python function to remove all punctuation from a string\ndef remove_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   no_punct = ''\n   for char in sentence:\n      if char not in punctuations:\n         no_punct = no_punct + char\n   return no_punct\n\n\n\n", "idx": 7168, "target": 0}
{"func": "# Write a python function Split a given file path into filename and parent directory\ndef split_filename(input_file_name):\n    if( isinstance(input_file_name,str) ==False ):\n        raise TypeError\n    tokens = input_file_name.split(\"/\")\n    return \"/\".join(tokens[:-1]),tokens[-1]\n\n", "idx": 7169, "target": 0}
{"func": "# write a python function to display the Fibonacci series\ndef recur_fibo(n):\n   if n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\n\n", "idx": 7170, "target": 0}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\n   \nresList = removeValue(list1, 20)\nprint(resList)\n\n", "idx": 7171, "target": 0}
{"func": "# Write a Python function which returns the Modulo of the two given numbers.\ndef mod(m, n):\n    return m % n\n\n", "idx": 7172, "target": 0}
{"func": "# Write a Python function to find the maximum ODD number from a given list\ndef odd_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    if num%2 != 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 7173, "target": 0}
{"func": "# 25. Python Program to Add two Lists\n \nNumList1 = []\nNumList2 = []\ntotal = []\n\nNumber = int(input(\"Please enter the Total Number of List Elements: \"))\nprint(\"Please enter the Items of a First and Second List   \")\nfor i in range(1, Number + 1):\n    List1value = int(input(\"Please enter the %d Element of List1 : \" %i))\n    NumList1.append(List1value)\n\n    List2value = int(input(\"Please enter the %d Element of List2 : \" %i))\n    NumList2.append(List2value)\n    \nfor j in range(Number):\n    total.append( NumList1[j] + NumList2[j])\n \nprint(\"\\nThe total Sum of Two Lists =  \", total)\n\n", "idx": 7174, "target": 0}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \ndef convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 7175, "target": 0}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntarget = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    for j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 7176, "target": 0}
{"func": "# write a python program to print the command line arguements given to a file\n\nimport sys\nargs = sys.argv \nprint(args)\n\n", "idx": 7177, "target": 0}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\ndef cal_ke(mass:float,velocity:float)->float:\n    return (mass*(velocity)**2)/2\n\n", "idx": 7178, "target": 0}
{"func": "# Write a Python function to find the maximum EVEN number from a given list\ndef even_max_checker(list1):\n\tmaxnum = 0\n\tfor num in list1:\n\t    if num%2 == 0:\n\t        if num > maxnum:\n\t            maxnum = num\n\treturn maxnum\n\n\n", "idx": 7179, "target": 0}
{"func": "# Write a program to generate and print another tuple whose values are even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10). \ntp=(1,2,3,4,5,6,7,8,9,10)\nli=list()\nfor i in tp:\n\tif tp[i]%2==0:\n\t\tli.append(tp[i])\ntp2=tuple(li)\nprint tp2\n\n", "idx": 7180, "target": 0}
{"func": "# Choose given number of elements from the list with different probability\nimport random\nnum1 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))\n\n", "idx": 7181, "target": 0}
{"func": "#88 Write a Python fuction to print the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\ndic = {'a':1, 'b': {'c': {'d': {}}}}\nprint(dict_depth(dic))\n\n", "idx": 7182, "target": 0}
{"func": "# write a python function to concatenate two integers like string concatenation and return concatenated number as integer\ndef concat_two_numbers(num1, num2):\n    combined_num = str(num1) + str(num2)\n    return int(combined_num)\n\n\n", "idx": 7183, "target": 0}
{"func": "#python program for vertical concatenating of mqatrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            except IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 7184, "target": 0}
{"func": "# write a python function to call a function repeatedly until an exception is raised.\ndef iter_except(func, exception, first=None):\n    \"\"\"Converts a call-until-exception interface to an iterator interface.\n    Like builtins.iter(func, sentinel) but uses an exception instead\n    of a sentinel to end the loop.\n    Examples:\n        iter_except(s.pop, KeyError)                             # non-blocking set iterator\n    \"\"\"\n    try:\n        if first is not None:\n            yield first()            # For database APIs needing an initial cast to db.first()\n        while True:\n            yield func()\n    except exception:\n        pass\n\n", "idx": 7185, "target": 0}
{"func": "# Write a function that returns sum of all elements in the list\ndef sum_elements(l:list):\n    return sum(l)\n\n", "idx": 7186, "target": 0}
{"func": "# Write a Python program to calculate the hypotenuse of a right angled triangle using math library\n\nfrom math import sqrt\nprint(\"Input lengths of shorter triangle sides:\")\ndef hypotenuse(side1, side2):\n    hyp = sqrt(side1**2 + side2**2)\n    return hyp\n\n", "idx": 7187, "target": 0}
{"func": "# write a python program which takes input a list and prints the standard deviation of elements within the list\nmean = sum(s1) / len(s1) \nvariance = sum([((x - mean) ** 2) for x in s1]) / len(s1) \nres = variance ** 0.5\nprint(\"Standard deviation of sample is : \" + str(res)) \n\n", "idx": 7188, "target": 0}
{"func": "# Write a function to return the area of a rhombus with diagonals q1 and q2\ndef cal_area_rhombus(q1,q2):\n    return (q1*q2)/2\n\n", "idx": 7189, "target": 0}
{"func": "# write a python program to convert a list to a dictionary where the key is the index and the value is the item in the list\nmy_list = [1, 8, 1, 2, 2, 9]\nmy_dict = {key: value for key, value in enumerate(my_list)}\n\n", "idx": 7190, "target": 0}
{"func": "# Write a function to calculate the current in the curcit where the resistance is R and voltage is V\ndef cal_current(resistance:float, voltage:float)->float:\n    return voltage/resistance\n\n", "idx": 7191, "target": 0}
{"func": "# Write a Python program to find the greatest common divisor (GCD)(Euclidean algorithm) and print the result.\n\na = int(input())\nb = int(input())\n\nwhile a != 0 and b != 0:\n    if a > b:\n        a %= b\n    else:\n        b %= a\n\ngcd = a + b\nprint(gcd)\n\n", "idx": 7192, "target": 0}
{"func": "# use anonymous function to filter\nresult = list(filter(lambda x: (x % 13 == 0), my_list))\n\n", "idx": 7193, "target": 0}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlengths = [str(len(word)) for word in words]\nprint(' '.join(lengths))\n\n\n", "idx": 7194, "target": 0}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nfor x in text: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 7195, "target": 0}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ndef throws():\n    return 5/0\ntry:\n    throws()\nexcept ZeroDivisionError:\n    print \"division by zero!\"\nexcept Exception, err:\n    print 'Caught an exception'\nfinally:\n    print 'In finally block for cleanup'\n\n", "idx": 7196, "target": 0}
{"func": "# 48. python function for finding the derivative of exponent of a number\ndef dexp(x):\n\n    return math.exp(x)\n\n", "idx": 7197, "target": 0}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\nwhile (number > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, end=\" \")\n\n", "idx": 7198, "target": 0}
{"func": "# write a program to create a string variable and print the amount of memory it consumes\nimport sys\nstring_var = 'string variable'\nprint(sys.getsizeof(string_var))\n\n\n", "idx": 7199, "target": 0}
{"func": "# Write a Python function to count occurrence of a word in the given text\ndef text_searcher(text, word):\n    count = 0\n    for w in text.split():\n        if w == word:\n            count = count + 1\n    return count\n\n\n", "idx": 7200, "target": 0}
{"func": "# Write a function that returns sum of all elements in the list\ndef sum_elements(l:list):\n    return sum(l)\n\n", "idx": 7201, "target": 0}
{"func": "# Python program to create all possible permutations from a given collection of distinct numbers.\ndef permute(nums):\n    result_perms = [[]]\n    for n in nums:\n        new_perms = []\n        for perm in result_perms:\n            for i in range(len(perm) + 1):\n                new_perms.append(perm[:i] + [n] + perm[i:])\n                result_perms = new_perms\n    return result_perms\n\n\nmy_nums = [1, 2, 3]\nprint(\"Original Collection: \", my_nums)\nprint(\"Collection of distinct numbers:\\n\", permute(my_nums))\n\n\n", "idx": 7202, "target": 0}
{"func": "# write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.\ndef NumGenerator(n):\n    for i in range(n+1):\n        if i%5==0 and i%7==0:\n            yield i\nn=int(raw_input())\nvalues = []\nfor i in NumGenerator(n):\n    values.append(str(i))\nprint \",\".join(values)\n\n", "idx": 7203, "target": 0}
{"func": "# write a Python function to find the volume of Icosahedron \n\ndef findVolume(a): \n      \n    volume = ((5 / 12) * \n              (3 + 5 ** 0.5) * \n               a * a * a) \n    return volume \n\na = 5\n\nprint(\"Volume: \" , findVolume(a)) \n\n\n", "idx": 7204, "target": 0}
{"func": "# Write a Python function to return hexadecimal value of a given integer\ndef int_to_hex(a):\n  return hex(a)\n\n\n", "idx": 7205, "target": 0}
{"func": "#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.\ndef digits_sum():\n\tn = 2**20\n\tans = sum(int(c) for c in str(n))\n\treturn str(ans)\n\n", "idx": 7206, "target": 0}
{"func": "#98 Write a Python program to multiply two integers without using the '*' operator in python.\ndef multiply(x, y):\n    if y < 0:\n        return -multiply(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply(x, y - 1)\n\n", "idx": 7207, "target": 0}
{"func": "# write a python function to return the factors of a number\ndef get_factors(num):\n   factors = []\n   for i in range(1, num + 1):\n      if num % i == 0:\n         factors.append(i)\n   return factors\n\n\n", "idx": 7208, "target": 0}
{"func": "# Write a Python Program to Print the Pascal\u2019s triangle for n number of rows given by the user\n\nn=10\na=[]\nfor i in range(n):\n    a.append([])\n    a[i].append(1)\n    for j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(n!=0):\n        a[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()\n\n", "idx": 7209, "target": 0}
{"func": "# Write a function to calculate volume of Triangular Pyramid\ndef volumeTriangular(a, b, h): \n    return (0.1666) * a * b * h \n  \n", "idx": 7210, "target": 0}
{"func": "# write a python function to return only odd numbers in a list\ndef filter_odd(nums):\n   return list(filter(lambda num: num % 2 == 1, nums))\n\n\n", "idx": 7211, "target": 0}
{"func": "# write a python function to check external IP address\ndef check_ip():\n    import re\n    import urllib.request as ur\n    url = \"http://checkip.dyndns.org\"\n    with ur.urlopen(url) as u:\n        s = str(u.read())\n        ip = re.findall(r\"\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\", s)\n        print(\"IP Address: \", ip[0])\n        return ip[0]\n\n\n", "idx": 7212, "target": 0}
{"func": "#39 function to create a dictionary of mirror of letter.\ndef letter_mirror():\n    import string\n    letter = string.ascii_lowercase\n    rvr_letter = letter[::-1]\n    dict_char = dict(zip(letter, rvr_letter))\n    return dict_char\n\n\n", "idx": 7213, "target": 0}
{"func": "# Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads,numlegs):\n    ns='No solutions!'\n    for i in range(numheads+1):\n        j=numheads-i\n        if 2*i+4*j==numlegs:\n            return i,j\n    return ns,ns\n\n\n", "idx": 7214, "target": 0}
{"func": "# 36 Write a  python function that returns the Highest Common Factor of two given numbers\ndef calculate_hcf(x1, x2):\n    if x1 == 0:\n        return x2\n    else:\n        return hcf(x2 % x1, x1)\n\n\n", "idx": 7215, "target": 0}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\nwhile i < len(org_intervals)-1:\n    if org_intervals[i+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        del org_intervals[i+1]\n        i = i - 1\n    i = i + 1\nprint(org_intervals)\n\n", "idx": 7216, "target": 0}
{"func": "# write a Python program to Break a list into chunks of size N in Python\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 4\nx = [l[i:i + n] for i in range(0, len(l), n)] \nprint(x) \n\n", "idx": 7217, "target": 0}
{"func": "# Write a function that removes all special characters\ndef clean_str(s):\n    import re\n    return re.sub('[^A-Za-z0-9]+', '', s)\n\n", "idx": 7218, "target": 0}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(height,radius):\n    pi=3.14\n    return pi*(radius**2)*height/3\n\n", "idx": 7219, "target": 0}
{"func": "# write a Python function to Detect if Two Strings are Anagrams\t\ndef check_if_anagram(s1,s2):\n\tif(sorted(s1)==sorted(s2)):\n\t\t  return True\n\telse:\n\t\t  return False\n\t\t  \n\t\t  \n\t\t  \n", "idx": 7220, "target": 0}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 7221, "target": 0}
{"func": "# Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(li)\n\n", "idx": 7222, "target": 0}
{"func": "# write a python function to count number of vowels in a string\ndef count_vowels(text):\n    v = set('aeiou')\n    for i in v:\n        print(f'\\n {i} occurs {text.count(i)} times')\n\n\n", "idx": 7223, "target": 0}
{"func": "# Find the day of week of a given date?\nfrom datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n", "idx": 7224, "target": 0}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\ndef cal_total_cap_in_parallel(cap_list:list)->float:\n    return sum(cap_list)\n\n", "idx": 7225, "target": 0}
{"func": "# Write a function to append two lists\n\ndef append_lists(l1:list, l2:list)->list:\n    return l1.extend(l2)\n\n", "idx": 7226, "target": 0}
{"func": "# Write a python function which takes a list of non negative numbers and target sum S, two operations (+, -) how many different ways target sum is achived re\n\ndef findTargetSumWays(nums, S):\n    count = 0\n    def calculate(nums, i, sum, S):\n        nonlocal count\n        if i == len(nums):\n            if sum == S:\n                count += 1\n        else:\n            calculate(nums, i+1, sum+ nums[i], S)\n            calculate(nums, i+1, sum- nums[i], S)\n            \n    calculate(nums, 0, 0, S) \n    return count\n\t\n\t\n\t\n\t\n", "idx": 7227, "target": 0}
{"func": "# Write a function to return the perimeter of an equilateral triangle\ndef cal_perimeter_eq_triangle(a):\n    return 3*a\n\n", "idx": 7228, "target": 0}
{"func": "# write a python program to print the factorial of a number\nnum = 5\nfact = 1\nwhile num > 0:\n   fact *= num\n   num -= 1\nprint(fact)\n\n\n", "idx": 7229, "target": 0}
{"func": "# A recursive function to find nth catalan number \ndef catalan(n): \n    # Base Case \n    if n <= 1: \n        return 1\n  \n    # Catalan(n) is the sum  \n    # of catalan(i)*catalan(n-i-1) \n    res = 0\n    for i in range(n): \n        res += catalan(i) * catalan(n-i-1) \n  \n    return res \n  \n", "idx": 7230, "target": 0}
{"func": "# Write a function that returns runs a garbage collector\ndef clear_memory():\n    import gc\n    gc.collect()\n\n", "idx": 7231, "target": 0}
{"func": "# Write a Python function to get OS name & platform using os & platform library\nimport os\nimport platform\ndef get_info():\n    return f'OS: {os.name}\\n Platform: {platform.system}'\n\n\n", "idx": 7232, "target": 0}
{"func": "# Write a Python program to convert a list of tuples into a dictionary.\nl = [(\"x\", 1), (\"x\", 2), (\"x\", 3), (\"y\", 1), (\"y\", 2), (\"z\", 1)]\nd = {}\nfor a, b in l:\n    d.setdefault(a, []).append(b)\nprint(d)\n\n\n", "idx": 7233, "target": 0}
{"func": "# write a python program to input a number and find the smallest divisor of an integer. \n \nn=int(input(\"Enter an integer:\"))\na=[]\nfor i in range(2,n+1):\n    if(n%i==0):\n        a.append(i)\na.sort()\nprint(\"Smallest divisor is:\",a[0])\n\n", "idx": 7234, "target": 0}
{"func": "# Write a function to return the perimeter of a square\ndef cal_perimeter_square(side):\n    return 4*side\n\n", "idx": 7235, "target": 0}
{"func": "# Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is\n\ndate=\"20/04/2021\"\ndd,mm,yy=date.split('/')\ndd=int(dd)\nmm=int(mm)\nyy=int(yy)\nif(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):\n    max1=31\nelif(mm==4 or mm==6 or mm==9 or mm==11):\n    max1=30\nelif(yy%4==0 and yy%100!=0 or yy%400==0):\n    max1=29\nelse:\n    max1=28\nif(mm<1 or mm>12):\n    print(\"Date is invalid.\")\nelif(dd<1 or dd>max1):\n    print(\"Date is invalid.\")\nelif(dd==max1 and mm!=12):\n    dd=1\n    mm=mm+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelif(dd==31 and mm==12):\n    dd=1\n    mm=1\n    yy=yy+1\n    print(\"The incremented date is: \",dd,mm,yy)\nelse:\n    dd=dd+1\n    print(\"The incremented date is: \",dd,mm,yy)\n\n\n", "idx": 7236, "target": 0}
{"func": "# write a python program to calculate factorial sum using list comprehensive\nimport functools \nn =5\nprint(functools.reduce(lambda x, y: x * y, range(1, n+1)))\n\n", "idx": 7237, "target": 0}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\n   \nresList = removeValue(list1, 20)\nprint(resList)\n\n", "idx": 7238, "target": 0}
{"func": "# Write a function to find the area of sqaure\ndef square_area(a):\n    return a*a\n\n\n", "idx": 7239, "target": 0}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nfor item in speed.values():\n  if item not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 7240, "target": 0}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str1)\n\n", "idx": 7241, "target": 0}
{"func": "# 72 write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit import Timer\n\nt = Timer(\"for i in range(100):1+1\")\nprint(t.timeit())\n\n", "idx": 7242, "target": 0}
{"func": "# write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are cubes of the key\ncube_dict = {}\nfor i in range(1, 11):\n   cube_dict[i] = i ** 3\n\n\n", "idx": 7243, "target": 0}
{"func": "# Write a Python function to find the BMI for given weight and height of a person\ndef bmi_calculator(height, weight):\n\tbmi = weight/(height**2)\n\treturn bmi\n\n", "idx": 7244, "target": 0}
{"func": "# Write a function to return the median of numbers in a list\ndef cal_median(num_list:list)->float:\n    if num_list:\n        if len(num_list)%2 != 0:\n            return sorted(num_list)[int(len(num_list)/2) - 1]\n        else:\n            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2\n    else:\n        return None\n\n", "idx": 7245, "target": 0}
{"func": "# write a python program to print Armstrong numbers in a certain interval\n\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   order = len(str(num))\n    \n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   if num == sum:\n       print(num)\n\n\n\n", "idx": 7246, "target": 0}
{"func": "# 32 write a program in python to create a directed graph, and add an edge between two vertices\n\nfrom collections import defaultdict\n\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, f, t):\n        self.graph[f].append(t)\n\n    def printEdge(self):\n        for ed in list(self.graph.keys()):\n            print(f\"From : {ed}, To : {self.graph[ed]}\")\n\n\ng = Graph()\ng.addEdge(\"a\", \"b\")\ng.addEdge(\"a\", \"e\")\ng.addEdge(\"b\", \"d\")\ng.addEdge(\"c\", \"d\")\ng.addEdge(\"c\", \"a\")\ng.printEdge()\n\n", "idx": 7247, "target": 0}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary\n\ndef mul_dict(d):\n    tot=1\n    for i in d:    \n        tot=tot*d[i]\n    return tot\n\n", "idx": 7248, "target": 0}
{"func": "# write a program to insert elemnet in the list after every nth element\n\nletters = ['a','b','c','d','e','f','g','h','i','j']\ni = 3\nwhile i < len(letters):\n    letters.insert(i, 'x')\n    i += 4\n\nletters\n\n\n", "idx": 7249, "target": 0}
{"func": "# write a program to sort the list in desending order\ndata_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nnew_list = []\n\nwhile data_list:\n    minimum = data_list[0]  # arbitrary number in list \n    for x in data_list: \n        if x > minimum:\n            minimum = x\n    new_list.append(minimum)\n    data_list.remove(minimum)    \n\nprint(f'decending_order_list: {new_list}')\n\n\n", "idx": 7250, "target": 0}
{"func": "# Using sorted() + lambda \nres = sorted(test_list, key = lambda x: x[1])[:K] \n  \n", "idx": 7251, "target": 0}
{"func": "#19 function to print ascii value of a character.\ndef show_ascii(a: str):\n    print(ord(a))\n\n\n", "idx": 7252, "target": 0}
{"func": "# write a python program which takes list as an input and calculate mean of given list of numbers \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i in lst:\n    sum  = sum + i\nmean = sum / len(lst)\nprint(\" The mean of given list is :\", mean)\n\n", "idx": 7253, "target": 0}
{"func": "# Write a python program to find and print  K th column of a matrix\n\ntest_list = [[4, 5, 6], [8, 1, 10], [7, 12, 5]] \n\nK = 2\nres = [sub[K] for sub in test_list] \nprint(\"The Kth column of matrix is : \" + str(res)) \n\n\n", "idx": 7254, "target": 0}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i in range(len(list1)-1):\n  for j in range(i+1,len(list1)):\n    if(list1[i] > list1[j]):\n      temp = list1[i]\n      list1[i] = list1[j]\n      list1[j] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 7255, "target": 0}
{"func": "# write a program which prints all permutations of [1,2,3]\nimport itertools\nprint list(itertools.permutations([1,2,3]))\n\n", "idx": 7256, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(li[-5:])\n\n", "idx": 7257, "target": 0}
{"func": "# Write a Python program to print the even numbers from a given list\ndef is_even_num(l):\nenum = []\nfor n in l:\nif n % 2 == 0:\nenum.append(n)\nreturn enum\nprint(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n", "idx": 7258, "target": 0}
{"func": "# write a python function to convert a user provided list of dictionaries into a list of values corresponding to the user specified key\n\ndef pluck(lst, key):\n  return [x.get(key) for x in lst]\n\n", "idx": 7259, "target": 0}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\nif guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            print(\"Yay! found the number, its 1\")\n        else:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guess2 == \"y\":\n        print(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 7260, "target": 0}
{"func": "# Write a python program to print the combination of tuples in list of tuples \n  \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]\n  \nres = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] \n\nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 7261, "target": 0}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemailAddress = 'bing@google.com'\npat2 = \"(\\w+)@(\\w+)\\.(com)\"\nr2 = re.match(pat2,emailAddress)\nprint(r2.group(2))\n\n", "idx": 7262, "target": 0}
{"func": "#write a python function to sort list using heapq \ndef heapsort(iterable):\n    from heapq import heappush, heappop\n    h = []\n    for value in iterable:\n        heappush(h, value)\n    return [heappop(h) for i in range(len(h))]\n\n", "idx": 7263, "target": 0}
{"func": "# Write a python program to Implement Linear Search and print the key element if found\n\ndef linear_search(alist, key):\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\n    for i in range(len(alist)):\n        if alist[i] == key:\n            return i\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = linear_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n", "idx": 7264, "target": 0}
{"func": "#83 write a program to Capitalizes the first letter of each word in a string\n\ndef capitalize(text):\n  return text.title()\n\nstr1 = \"Hello world!\"\nstr2 = \"hello world!\"\nstr3 = \"HELLO WORLD!\"\nstr4 = \"includehelp.com is a tutorials site\"\n\nprint(\"str1: \", str1)\nprint(\"str2: \", str2)\nprint(\"str3: \", str3)\nprint(\"str4: \", str4)\nprint()\n\n", "idx": 7265, "target": 0}
{"func": "# write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 7266, "target": 0}
{"func": "# 44 Define a python function that can read text file from a given URL\nimport requests\n\n\ndef read_data(url):\n    data = requests.get(url).text\n    return data\n\n\n", "idx": 7267, "target": 0}
{"func": "#49 write a python funvtion to print the merge sort algorithm in python\ndef mergeSort(myList):\n    if len(myList) > 1:\n        mid = len(myList) // 2\n        left = myList[:mid]\n        right = myList[mid:]\n\n        # Recursive call on each half\n        mergeSort(left)\n        mergeSort(right)\n\n        # Two iterators for traversing the two halves\n        i = 0\n        j = 0\n        \n        # Iterator for the main list\n        k = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n              # The value from the left half has been used\n              myList[k] = left[i]\n              # Move the iterator forward\n              i += 1\n            else:\n                myList[k] = right[j]\n                j += 1\n            # Move to the next slot\n            k += 1\n\n        # For all the remaining values\n        while i < len(left):\n            myList[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            myList[k]=right[j]\n            j += 1\n            k += 1\n\nmyList = [54,26,93,17,77,31,44,55,20]\nmergeSort(myList)\n\n", "idx": 7268, "target": 0}
{"func": "#30 program to count number of cpu cores available \nimport os\nos.cpu_count()\n\n", "idx": 7269, "target": 0}
{"func": "# Write a Python Program to Print all Pythagorean Triplets in the Range\n\nlimit=10\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            break\n        print(a,b,c)\n    m=m+1\n\n", "idx": 7270, "target": 0}
{"func": "# write a python function that takes a list as an input and converts all numbers to negative numbers and returns the new list\ndef make_all_negative(nums):\n   return [num if num < 0 else -num for num in nums]\n\n\n", "idx": 7271, "target": 0}
{"func": "# write Python3 code to demonstrate working of Sort by Rear Character in Strings List Using sort() \n\ndef get_rear(sub): \n    return sub[-1] \ntest_list = ['gfg', 'is', 'best', 'for', 'geeks'] \nprint(\"The original list is : \" + str(test_list)) \ntest_list.sort(key = get_rear) \nprint(\"Sorted List : \" + str(test_list)) \n\n\n", "idx": 7272, "target": 0}
{"func": "# Write a Python Program to Form a New String where the First Character and the Last Character have been Exchanged\n\ndef change(string):\n      return string[-1:] + string[1:-1] + string[:1]\n\n", "idx": 7273, "target": 0}
{"func": "# Write a function to implement Gnome Sort\ndef gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        if arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr\narr = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i in arr:\n    print(i)\n\n\n", "idx": 7274, "target": 0}
{"func": "# Write a python function to perform Matrix Chain multiplication i.e. Given a sequence of matrices, find the most efficient way to multiply these matrices together\n\nimport sys \n\ndef MatrixChainOrder(p, i, j): \n  \n    if i == j: \n        return 0\n  \n    _min = sys.maxsize \n      \n    for k in range(i, j): \n      \n        count = (MatrixChainOrder(p, i, k)  \n             + MatrixChainOrder(p, k + 1, j) \n                   + p[i-1] * p[k] * p[j]) \n  \n        if count < _min: \n            _min = count; \n      \n  \n    return _min; \n\n", "idx": 7275, "target": 0}
{"func": "# write a program to print 5 even random numbers between 10 and 100\nimport random\nprint(random.sample([i for i in range(10, 100) if i%2 == 0], 5))\n\n\n", "idx": 7276, "target": 0}
{"func": "# Write a function to return the perimeter of a isoscales triangle\ndef cal_perimeter_iso_triangle(s1,s2):\n    return 2*s1+s2\n\n", "idx": 7277, "target": 0}
{"func": "#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate\ndef getBaseTen(binaryVal):\n    count = 0\n\n    binaryVal = binaryVal[::-1]\n\n\tfor i in range(0, len(binaryVal)):\n    \tif(binaryVal[i] == \"1\"):\n            count += 2**i\n    \n    return count\n\n", "idx": 7278, "target": 0}
{"func": "# write a program to print count of vowels in a string\nst = \"ammaradil\"\nvowle = ['a', 'e', 'i', 'o', 'u']\ncount = 0\n\nfor s in st:\n    if s in vowle:\n        count = count+1\n\nprint(\"Count\", count)\n\n\n", "idx": 7279, "target": 0}
{"func": "# Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\nimport re\ns = input()\nprint(re.findall(\"\\d+\",s))\n\n", "idx": 7280, "target": 0}
{"func": "# write a python program to print len of each characters\nwords = ['cat', 'window', 'defenestrate']\nfor w in words:\n    print(w, len(w))\n    \n", "idx": 7281, "target": 0}
{"func": "# Write a python class to implement a Bank which which supports basic operations like depoist, withdrwa, overdrawn\n\nclass BankAccount(object):\n    def __init__(self, account_no, name, initial_balance=0):\n        self.account_no = account_no\n        self.name = name\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        self.balance -= amount\n    def overdrawn(self):\n        return self.balance < 0\n\t\t\n\t\t\n", "idx": 7282, "target": 0}
{"func": "# Write a python function to perform quicksort sort on a list of numbers given\n\ndef partition(array, low, high):\n    i = low - 1            # index of smaller element\n    pivot = array[high]    # pivot \n    \n    for j in range(low, high):\n       \n        if array[j] < pivot:\n    \n            i += 1\n            array[i], array[j] = array[j], array[i]\n            \n    array[i + 1], array[high] = array[high], array[i + 1]\n    return i + 1\n\ndef quick_sort(array, low, high):\n    if low < high:\n        temp = partition(array, low, high)\n        quick_sort(array, low, temp - 1)\n        quick_sort(array, temp + 1, high)\n\t\t\n\n", "idx": 7283, "target": 0}
{"func": "# write Python Program to Read the Contents of a File in Reverse Order\nfilename=input(\"Enter file name: \")\nfor line in reversed(list(open(filename))):\n    print(line.rstrip())\n\n\n\n", "idx": 7284, "target": 0}
{"func": "#write a python function which takes length of sides as user input to calculate and return the area of a triangle\n\ndef triangle_area(a,b,c):\n    s = (a+b+c)/2\n    area = (s(s-a)*(s-b)*(s-c)) ** 0.5\n    return(area)\n\n", "idx": 7285, "target": 0}
{"func": "# write a python function to check if a given string is a palindrome\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\n", "idx": 7286, "target": 0}
{"func": "# Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).\nevenNumbers = filter(lambda x: x%2==0, range(1,21))\nprint evenNumbers\n\n", "idx": 7287, "target": 0}
{"func": "# write a python function to check if a string is palindrome or not and print the result\ndef isPalindrome(s):\n    if (s == s[::-1]):\n        print(\"Given string is palindrome\")\n    else:\n        print(\"Given string is not palindrome\")\n\ns = \"malayalam\"\nisPalindrome(s)\n\n8.\n", "idx": 7288, "target": 0}
{"func": "# write a python program for basic HTML parser\nfrom html.parser import HTMLParser\n\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(tag)\n        for attr in attrs:\n            print(\"->\", attr[0], \">\", attr[1])\n\n\nparser = MyHTMLParser()\n\nfor i in range(int(input())):\n    parser.feed(input())\n\n\n", "idx": 7289, "target": 0}
{"func": "# Write a Python Program to Convert Gray Code to Binary\n\ndef gray_to_binary(n):\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\n    n = int(n, 2)\n \n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n\n    return bin(n)[2:]\n\n", "idx": 7290, "target": 0}
{"func": "# Write a function to return the perimeter of a rectangle\ndef cal_perimeter_rect(length, bredth):\n    return 2*(length+bredth)\n\n", "idx": 7291, "target": 0}
{"func": "# Write a Python program to count the number of characters (character frequency) in a string\ndef char_frequency(str1):\ndict = {}\nfor n in str1:\nkeys = dict.keys()\nif n in keys:\ndict[n] += 1\nelse:\ndict[n] = 1\nreturn dict\nprint(char_frequency('google.com'))\n\n", "idx": 7292, "target": 0}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nimport random\n\nprint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nfor num in range(3):\n    print(random.randrange(100, 999, 5), end=', ')\n\n", "idx": 7293, "target": 0}
{"func": "# write a Python function to Sort a List According to the Length of the Elements.\ndef sortlistwithlen(list):\n\tlist.sort(key=len)\n\treturn list\n\t\n\t\n", "idx": 7294, "target": 0}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list1))\n\n", "idx": 7295, "target": 0}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 7296, "target": 0}
{"func": "# write a python program to print the number of letters and digits in sentence\nsentence = 'The Quick 123 Fox'\ndigits = 0\nletters = 0\nfor c in sentence:\n   if c.isdigit():\n      digits += 1\n   elif c.isalpha():\n      letters += 1\n   else:\n      pass\nprint(f'Digits: {digits}, Letters: {letters}')\n\n\n", "idx": 7297, "target": 0}
{"func": "# Write a function to calculate the kinetic energy of an object of mass m and velocity v\ndef cal_ke(mass:float,velocity:float)->float:\n    return (mass*(velocity)**2)/2\n\n", "idx": 7298, "target": 0}
{"func": "#12 function to check leap year\ndef check_leap_year(year: int):\n    if not year%4:\n        print('Leap Year')\n    else:\n        print('Not a leap year')\n\n\n", "idx": 7299, "target": 0}
{"func": "# Write a Python function to sum all the numbers in a list\ndef sum(numbers):\ntotal = 0\nfor x in numbers:\ntotal += x\nreturn total\nprint(sum((8, 2, 3, 0, 7)))\n\n", "idx": 7300, "target": 0}
{"func": "# 7 write a python function to return every second number from a list\n\n\ndef every_other_number(lst):\n    return lst[::2]\n\n\n", "idx": 7301, "target": 0}
{"func": "# Fn = 2 ** 2n + 1 for n \u2265 0. \ndef fermat_seq(n):\n    if n >= 0:\n        return 2 ** (2**n) + 1\n  \n", "idx": 7302, "target": 0}
{"func": "# write a python function that removes element from a list using a user provided number\n\ndef drop(a, n = 1):\n  return a[n:]\n\n", "idx": 7303, "target": 0}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor sub in test_list: \n    if isinstance(sub[key], list): \n        sub[key] = sub[key][N]\n\n", "idx": 7304, "target": 0}
{"func": "# Write a python function to get the volume of a rectangular prism with side as length, width and height as input\ndef rec_prism_volume(length, width, height):\n    volume = length * width * height\n    return volume \n\n", "idx": 7305, "target": 0}
{"func": "# write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)\ndef random_combination_with_replacement(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.choices(range(n), k=r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 7306, "target": 0}
{"func": "# Write a function to return the total surface area of a cube of side a\ndef cal_surface_area_cube(a):\n    return 6*(a**2)\n\n", "idx": 7307, "target": 0}
{"func": "# Write a function which Given an list of integers arr and an integer target, find two non-overlapping sub-arrays of arr each with sum equal target\n\nfrom collections import defaultdict\ndef minSumOfLengths(arr, target):\n    hashTable = defaultdict(int)\n    hashTable[0] = -1\n    summation = 0\n    for i in range(len(arr)):\n        summation = summation + arr[i]\n        hashTable[summation] = i\n        \n    summation = 0\n    minimumLeft = float('inf')\n    result = float('inf')\n    for i in range(len(arr)):\n        summation = summation + arr[i]\n        if summation - target in hashTable:\n            leftLength = i-hashTable[summation-target]\n            minimumLeft = min(minimumLeft,leftLength)\n        if summation + target in hashTable and minimumLeft < float('inf'):\n            rightLength = hashTable[summation+target]-i\n            result = min(result,hashTable[summation+target]-i+minimumLeft)\n        \n    if result == float('inf'):\n        return -1\n    return result\n\t\n\t\n", "idx": 7308, "target": 0}
{"func": "# Write a Python function to Find the Sum of Cosine Series\n\ndef cosine(x,n):\n    cosx = 1\n    sign = -1\n    for i in range(2, n, 2):\n        pi=22/7\n        y=x*(pi/180)\n        cosx = cosx + (sign*(y**i))/math.factorial(i)\n        sign = -sign\n    return cosx\n\n", "idx": 7309, "target": 0}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** order\n   temp //= 10\n\n", "idx": 7310, "target": 0}
{"func": "#99 Write a Python class to convert a roman numeral to an integer.\nclass Solution:\n    def roman_to_int(self, s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n\n", "idx": 7311, "target": 0}
{"func": "# write a python program to find index of max element\n\nlst = [40, 10, 20, 30]\n\ndef maxIndex(lst):\n    return max(range(len(lst)), key=lst.__getitem__)\n\nprint(maxIndex(lst))\n\n\n", "idx": 7312, "target": 0}
{"func": "# we are dealing with multiple inheritance\nclass A(object):\n    def foo(self):\n        print(\"class A\")\n\nclass B(object):\n    def foo(self):\n        print(\"class B\")\n\nclass C(A, B):\n    pass\n\n", "idx": 7313, "target": 0}
{"func": "#90 show generator is faster than list\ndef show_gen_fast():\n    from timeit import timeit\n    dt = timeit(\"[num for num in fib(100) ]\", globals = globals(), number=1)\n    return dt\n\n", "idx": 7314, "target": 0}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    return newList \n      \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n\n", "idx": 7315, "target": 0}
{"func": "#1 write a program to get numbers = 1,3,11,42,12,4001\nfrom collections import Iterable\nhighestnumber = -999\nfor i in numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 7316, "target": 0}
{"func": "# write a python function that would print the ASCII value of a given character\ndef print_ascii(char):\n    print(ord(char))\n\n\n", "idx": 7317, "target": 0}
{"func": "# write a python function to sort each item in a data structure on one of the keys\ndef sort_list_with_key():\n    animals = [\n        {'type': 'lion', 'name': 'Mr. T', 'age': 7},\n        {'type': 'tiger', 'name': 'scarface', 'age': 3},\n        {'type': 'puma', 'name': 'Joe', 'age': 4}]\n    print(sorted(animals, key=lambda animal: -animal['age']))\n\n\n", "idx": 7318, "target": 0}
{"func": "# wrtie a python function to solve Tower Of Hanoi and print necessary statements\ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        print(\"Move disk 1 from source\",source,\"to destination\",destination) \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n    TowerOfHanoi(n-1, auxiliary, destination, source) \n\n", "idx": 7319, "target": 0}
{"func": "# Write a function that takes in height(m) and weight(kg), calculates BMI and prints the comments\n\ndef bmi(height: \"Meters\", weight: \"Kgs\"):\n    bmi = weight/(height**2) \n    print(\"Your BMI is: {0} and you are \".format(bmi), end='')\n    if ( bmi < 16):\n       print(\"severely underweight.\")\n    elif ( bmi >= 16 and bmi < 18.5):\n       print(\"underweight.\")\n    elif ( bmi >= 18.5 and bmi < 25):\n       print(\"healthy.\")\n    elif ( bmi >= 25 and bmi < 30):\n       print(\"overweight.\")\n    elif ( bmi >=30):\n       print(\"severely overweight.\") \n\n", "idx": 7320, "target": 0}
{"func": "# Write a function to remove a given date type elements from a list.\n\ndef removeDataType(li,dType):\n    res = []\n    for i in li:\n        if not isinstance(i, dType):\n            res.append(i)\n    return res\n\n\n", "idx": 7321, "target": 0}
{"func": "# we should better create \"new\" objects:\nmy_list2 = [[1, 2, 3] for i in range(2)]\nprint('initially:  ---> ', my_list2)\n", "idx": 7322, "target": 0}
{"func": "# Write a function to return the total surface area of a cuboid of length l, bredth b and height h\ndef cal_surface_area_cuboid(l,b,h):\n    return 2*(l*b+b*h+h*l)\n\n", "idx": 7323, "target": 0}
{"func": "#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.\ndef three_Sum(num):\n    if len(num)<3: return []\n    num.sort()\n    result=[]\n    for i in range(len(num)-2):\n        left=i+1\n        right=len(num)-1\n        if i!=0 and num[i]==num[i-1]:continue\n        while left<right:\n            if num[left]+num[right]==-num[i]:\n                result.append([num[i],num[left],num[right]])\n                left=left+1\n                right=right-1\n                while num[left]==num[left-1] and left<right:left=left+1\n                while num[right]==num[right+1] and left<right: right=right-1\n            elif num[left]+num[right]<-num[i]:\n                left=left+1\n            else:\n                right=right-1\n    return result\n\n", "idx": 7324, "target": 0}
{"func": "#46 write Python Function to print leaders in array  \ndef printLeaders(arr,size):\n         \n    for i in range(0, size):\n        for j in range(i+1, size):\n            if arr[i]<arr[j]:\n                break\n        if j == size-1:  \n            print(arr[i])\n\narr=[16, 17, 4, 3, 5, 2] \nprintLeaders(arr, len(arr))\n\n", "idx": 7325, "target": 0}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\nfor idx,num in enumerate(org):\n    if idx+steps < len(org):\n        result[idx+steps] = org[idx]\n    else:\n        result[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 7326, "target": 0}
{"func": "# Write a program to print prime numbers in a range using Sieve of Eratosthenes.\n\nn=int(input(\"Enter upper limit of range: \"))\nsieve=set(range(2,n+1))\nwhile sieve:\n    prime=min(sieve)\n    print(prime,end=\"\\t\")\n    sieve-=set(range(prime,n+1,prime))\n \nprint()\n\n\n", "idx": 7327, "target": 0}
{"func": "#32. Write a python program to find HCf or GCD using euclidian Algorithm\ndef compute_hcf(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\n", "idx": 7328, "target": 0}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \ndef convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 7329, "target": 0}
{"func": "#17 split list into lists of equal length python\n[lst[i:i + n] for i in range(0, len(lst), n)]\n\n", "idx": 7330, "target": 0}
{"func": "# Write a function that returns Gets the derivative of exponential of x\ndef derivative_exp(x:float) -> float:\n    import math\n    return math.exp(x)\n\n\n", "idx": 7331, "target": 0}
{"func": "# loop \nres = [] \nfor sub in test_list: \n    for val in prior_list: \n        if val in sub: \n            res.append(val) \nprint(res)\n\n", "idx": 7332, "target": 0}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\ndef appendMiddle(s1, s2):\n  middleIndex = int(len(s1) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThree)\n  \nappendMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 7333, "target": 0}
{"func": "# Write a Python function to find the intersection of two arrays\ndef array_intersection(A,B):\n\tinter=list(set(A)&set(B))\n\treturn inter\n\n\n", "idx": 7334, "target": 0}
{"func": "# write a python program to give the next fibonacci number\n\n    num_1, num_2,count = 0, 1,0\n\n    def next_fibbonacci_number() :\n    \n        nonlocal num_1, num_2, count\n\n        if(count == 0):\n            count+=1\n            return 0\n        elif(count==1):\n            count+=1\n            return num_2\n        else:\n            num_1, num_2 = num_2, num_1+num_2\n            return num_2\n\n    return next_fibbonacci_number\n", "idx": 7335, "target": 0}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list1: \n    if ele % 2 == 0: \n        list1.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list1) \n\n", "idx": 7336, "target": 0}
{"func": "# Write a function that returns derivative of tan value of the input\ndef derivative_tan(x:float)-> float:\n    import math\n    return (1/math.cos(x))**2\n\n\n", "idx": 7337, "target": 0}
{"func": "# Generate weighted random numbers\nimport random\nrandomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)\nprint(randomList)\n\n", "idx": 7338, "target": 0}
{"func": "## Write a python function to extract only alphabets from a given string and also exclude spaces\ndef extract_alpha(my_string):\n    return \"\".join([ c for c in my_string if c.isalpha()])\n\n", "idx": 7339, "target": 0}
{"func": "# Write a python program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) if i%2!=0]\nprint(li)\n\n", "idx": 7340, "target": 0}
{"func": "# Write a python function to find all email-id patterns in a given string and write to a user input file\nimport re\ndef extract_mailid(my_string, outfile):\n    regex = re.compile(r'[\\w]+@[\\w]+\\.[\\w]+', re.UNICODE)    \n    mailids = regex.findall(my_string)\n    if(len(mailids) > 0):\n        with open(outfile, 'w') as mailfile:\n            for mailid in mailids:\n                mailfile.write(mailid+\"\\n\")\n        mailfile.close()\n\n", "idx": 7341, "target": 0}
{"func": "# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 7342, "target": 0}
{"func": "# write a python program to rotate a list 10 times and print it\nlist = [11,22,33,44,55,66,77,88,99]\nn = 10\nfinalList = []\nfor i in range(0, N):\n    finalList.append(list[(i+d)%N])\nprint(finalList)\n\n\n\n", "idx": 7343, "target": 0}
{"func": "#88 write a program to find variance of a dataset\n\ndef variance(X):\n    mean = sum(X)/len(X)\n    tot = 0.0\n    for x in X:\n        tot = tot + (x - mean)**2\n    return tot/len(X)\n\n", "idx": 7344, "target": 0}
{"func": "# write a Python function that returns the determinant of a given square matrix\ndef determinant(A):\n    if len(A) == 1:\n        return A[0][0]\n    elif len(A) == 2:\n        return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n    else:\n        s = 0\n        for i in range(len(A)):\n            B = [[A[row][col] for col in range(1,len(A))] for row in range(len(A)) if row!=i ]\n            s += ((-1)**i)*A[i][0]*determinant(B)\n        return s\n\nprint(determinant([[3, 0], [2, 2]]))\n\n", "idx": 7345, "target": 0}
{"func": "# 3. python function to return the squareroot of a list of numbers\ndef sqrt(n):\n   return [i**0.5 for i in range(n)]\n\n", "idx": 7346, "target": 0}
{"func": "#56 function to all implementation\ndef all_imp(a):\n   return all(a)\n\n\n", "idx": 7347, "target": 0}
{"func": "# Write Python Program to print the Length of a String Without Using a Library Function\t\t  \nstring= \"United States of America\"\ncount=0\nfor i in string:\n      count=count+1\nprint(\"Length of the string is:\")\nprint(count)\n\n\n\n\n", "idx": 7348, "target": 0}
{"func": "# Write a python program for selection sort\nfor i in range(len(A)):\nmin_idx = i\nfor j in range(i+1, len(A)):\nif A[min_idx] > A[j]:\nmin_idx = j\n\nA[i], A[min_idx] = A[min_idx], A[i]\n\n", "idx": 7349, "target": 0}
{"func": "# write Function to convert temperature  from degree Celsius to Kelvin \ndef Celsius_to_Kelvin(C): \n    return (C + 273.15) \nC = 100 \nprint(\"Temperature in Kelvin ( K ) = \",  \n                    Celsius_to_Kelvin(C)) \n\n", "idx": 7350, "target": 0}
{"func": "# Write a Python program to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n    temp = set()\n    for word in str1.split():\n        if word in temp:\n            return word\n        else:\n            temp.add(word)\n    return 'None'\n\n\n", "idx": 7351, "target": 0}
{"func": "# display the sorted words  \nfor word in words:  \n   print(word)  \n   \n", "idx": 7352, "target": 0}
{"func": "#17 write a program to get current date and time \nimport datetime  \ncurrent_time = datetime.datetime.now()  \n    \nprint (\"Time now at greenwich meridian is : \" , end = \"\")  \nprint (current_time)\n\n", "idx": 7353, "target": 0}
{"func": "# write a python function to call a function repeatedly until an exception is raised.\ndef iter_except(func, exception, first=None):\n    \"\"\"Converts a call-until-exception interface to an iterator interface.\n    Like builtins.iter(func, sentinel) but uses an exception instead\n    of a sentinel to end the loop.\n    Examples:\n        iter_except(s.pop, KeyError)                             # non-blocking set iterator\n    \"\"\"\n    try:\n        if first is not None:\n            yield first()            # For database APIs needing an initial cast to db.first()\n        while True:\n            yield func()\n    except exception:\n        pass\n\n", "idx": 7354, "target": 0}
{"func": "# write Python3 code to demonstrate working of Sort by Rear Character in Strings List Using sorted() + lambda \n\ntest_list = ['gfg', 'is', 'best', 'for', 'geeks'] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = sorted(test_list, key = lambda sub : sub[-1]) \n\nprint(\"Sorted List : \" + str(res)) \n\n\n", "idx": 7355, "target": 0}
{"func": "# Write a python function to return list of all the possible gray code for a number given\n\ndef grayCode(n):\n    if n == 0:\n        return [0]\n        \n    if n == 1:\n        return [0,1]\n        \n    res = []\n                \n    start = '0'*n\n    visited = set()\n    stk = [start]\n        \n    while stk:\n        node = stk.pop()\n        if node not in visited:\n            res.append(int(node,2))            \n            visited.add(node)\n        if len(visited) == 2**n:\n            break\n                \n        for i in range(n):\n            newCh = '0' if node[i] == '1' else '1' \n            newNode = node[:i] + newCh + node[i+1:]\n                \n            if newNode not in visited:\n                    stk.append(newNode)\n    return res\n\t\n\n", "idx": 7356, "target": 0}
{"func": "# Write a function that returns sine value of the input\ndef sin(x:float) -> float:\n    import math\n    return math.sin(x)\n\n", "idx": 7357, "target": 0}
{"func": "#4 add a string to each element of a list python\nmy_list = ['foo', 'fob', 'faz', 'funk']\nstring = 'bar'\nlist2 = list(map(lambda orig_string: orig_string + string, my_list))\n\n", "idx": 7358, "target": 0}
{"func": "# write a program to terminate the program execution\n\nimport sys\nsys.exit()\n\n", "idx": 7359, "target": 0}
{"func": "# write a list comprehension in python to get a list of odd numbers when a range is given \nN = 20\nnumber_list = [ x for x in range(N) if x % 2 != 0]\nprint(f'List of Odd Numbers:', number_list)\n\n\n", "idx": 7360, "target": 0}
{"func": "# write a Function to convert the time from 12 hour format to 24 hour format \ndef convert24(str1): \n      \n    if str1[-2:] == \"AM\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    elif str1[-2:] == \"AM\": \n        return str1[:-2] \n      \n    elif str1[-2:] == \"PM\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\n", "idx": 7361, "target": 0}
{"func": "# write a program that divides corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nquot_list = [a/b for (a,b) in zip(list1, list2)]\nprint(quot_list)\n\n\n", "idx": 7362, "target": 0}
{"func": "# write a python program to print current working directory\nimport os\nprint(os.getcwd())\n\n", "idx": 7363, "target": 0}
{"func": "# Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x)\nn=int(input(\"Input a number: \"))\nd = dict()\n\nfor x in range(1,n+1):\nd[x]=x*x\n\nprint(d)\n\n", "idx": 7364, "target": 0}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    found = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = True\n            break\n    if not found:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 7365, "target": 0}
{"func": "#write a python function to sort list using heapq \ndef heapsort(iterable):\n    from heapq import heappush, heappop\n    h = []\n    for value in iterable:\n        heappush(h, value)\n    return [heappop(h) for i in range(len(h))]\n\n", "idx": 7366, "target": 0}
{"func": "# write a python function to return the sequence elements n times\ndef ncycles(iterable, n):\n    from itertools import chain, repeat\n    return chain.from_iterable(repeat(tuple(iterable), n))\n\n", "idx": 7367, "target": 0}
{"func": "# write a python function that takes two strings as a parameter and prints the shorter one\ndef print_shorter(str1, str2):\n   if (len(str1) > len(str2)):\n      print(str2)\n   else:\n      print(str1)\n\n\n", "idx": 7368, "target": 0}
{"func": "# Write a Python Program to prints Common Letters in Two Input Strings\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 7369, "target": 0}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 7370, "target": 0}
{"func": "# write Python code to convert string to list \n\ndef Convert_1(string): \n    li = list(string.split(\" \")) \n    return li \n \nstr1 = \"Geeks for Geeks\"\nprint(Convert(str1)) \n\n", "idx": 7371, "target": 0}
{"func": "# write a python function to return the dot product of two vectors\ndef dotproduct(vec1, vec2):\n    return sum(map(operator.mul, vec1, vec2))\n\n", "idx": 7372, "target": 0}
{"func": "#66 attach function closure with logs details to another function\ndef attach_log(fn: \"function\"):\n    def inner(*args, **kwargs):\n        dt = datetime.now()\n        print(f'{fn.__name__} is called at {dt} with {args} {kwargs} ')\n        return fn(*args, **kwargs)\n    return inner\n\n\n", "idx": 7373, "target": 0}
{"func": "# write a program that iterates over a dictionary and prints \"Bingo!\" if length of value is greater than the length of key. Otherwise print \"no bingo\"\nkey_val_map = {\"key1\": \"length1\", \"key2\": \"len2\", \"Hello\": \"hi\", \"bingo\": \"print bingo\"}\nfor key, val in key_val_map.items():\n  if len(val) > len(key):\n    print(\"Bingo!\")\n  else:\n    print(\"no bingo\")\n\n", "idx": 7374, "target": 0}
{"func": "# write a python function that joins strings in a list and returns the result\ndef join_string_parts(str_list):\n   return \" \".join(str_list)\n\n\n", "idx": 7375, "target": 0}
{"func": "#89 fibonaaci using generator\ndef fibo(n):\n    x = 0\n    yield x\n    y = 1\n    yield y\n    for i in range(n-1):\n        x, y = y, x+y\n        yield y\n\n\n\n", "idx": 7376, "target": 0}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (g*mass1*mass2)/(distance**2)\n\n", "idx": 7377, "target": 0}
{"func": "# Write a python function to read a user specified csv file and a delimiter and return the number of rows and number of columns in the first row.\nimport csv\ndef read_csv_length(csv_file_name, delimiter_pattern):\n    if(os.path.exists(csv_file_name) == False):\n        print(\"Destination File doesn't exist\")\n        return\n    with open(csv_file_name, newline='') as csvfile:\n        csv_reader = csv.reader(csvfile, delimiter=delimiter_pattern)\n        csv_list = list(csv_reader)\n        return len(csv_list), len(csv_list[0])\n\n", "idx": 7378, "target": 0}
{"func": "# write a python program to add every alternate elements in a list of even elements and print the final list \n given_list = [8, 6, 0, 4, 1, 6, 7, 8, 9, 10, 4, 5] \nif len(given_list) % 2 == 0:\n\tres_list = []\n\tfor i in range(len(given_list)-2):\n\t\tres_list.append(given_list[i] + given_list[i + 2])\n\tprint(f'Resultant list is {res_list}')\n\t\n\n\t\n", "idx": 7379, "target": 0}
{"func": "#2 write a program to get numbers = 1,3,11,42,12,4001\nhighestnumber = -999\nfor i in numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 7380, "target": 0}
{"func": "# Write a function to find the area of rectangle\ndef rectangle_area(l, b):\n    return l*b\n\n", "idx": 7381, "target": 0}
{"func": "# 47 write a python function that accepts a valid path and changes the current working directory\nimport os\n\n\ndef change_dir(path):\n    return os.chdir(path)\n\n\n", "idx": 7382, "target": 0}
{"func": "# Write a Python function to print the root of the quadratic equation\ndef quadratic_root(A,B,C):\n\timport math\n\td=((B**2)-4*A*C)\n\n\tif d>=0:\n\t    s=(-B+(d)**0.5)/(2*A)\n\t    p=(-B-(d)**0.5)/(2*A)\n\t    print(math.floor(s),math.floor(p))\n\telse:\n\t    print('The roots are imaginary')\n\n\n", "idx": 7383, "target": 0}
{"func": "# write a  Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using loop + enumerate() \n\ntest_list = [{\"Gfg\" : 3, 4 : 9}, {\"is\": 8, \"Good\" : 2}, {\"Best\": 10, \"CS\" : 1}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = dict() \nfor idx, val in enumerate(test_list): \n    res[idx] = val \n\nprint(\"The constructed dictionary : \" + str(res)) \n\n", "idx": 7384, "target": 0}
{"func": "# write a python function to calculate the price after tax for a list of transactions\ntxns = [1.09, 23.56, 57.84, 4.56, 6.78]\nTAX_RATE = .08\ndef get_price_with_tax(txn):\n    return txn * (1 + TAX_RATE)\nfinal_prices = list(map(get_price_with_tax, txns))\nprint(f\"{final_prices}\")\n\n\n", "idx": 7385, "target": 0}
{"func": "# Write a Python function to return the second smallest number in a list and print it.Example:# input# second_smallest([1, 2, -8, -2, 0])# output# -2\n\ndef second_smallest(numbers):\n    a1, a2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= a1:\n            a1, a2 = x, a1\n        elif x < a2:\n            a2 = x\n    return a2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n", "idx": 7386, "target": 0}
{"func": "# write a function which converts temperature values, from Celsius(C) to Fahreinheit(F) and from Fahreinheit(F) to Celsius(C) \\\n    #  given the temperature value and its unit\n\ndef temp_converter(value, unit):\n    if unit =='F' and value in range(32, 212):\n        converts = (value - 32) * 5.0/9.0\n        return converts\n    elif unit =='C' and value in range(0,100):\n        converts = (9.0/5.0) * value + 32\n        return converts\n    else:\n        raise ValueError\n    \n    \n", "idx": 7387, "target": 0}
{"func": "# write a python program which takes user input tuple and prints length of each tuple element\nuserInput = input(\"Enter a tuple:\")\nx = map(lambda x:len(x), tuple(x.strip() for x in userInput.split(',')))\nprint(list(x))\n\n", "idx": 7388, "target": 0}
{"func": "# write a python function that returns a list of elements that exist in both user provided lists.\n\ndef similarity(a, b):\n  return [item for item in a if item in b]\n\n", "idx": 7389, "target": 0}
{"func": "# write a program to find sin of a number\nimport math\n\nnum = 45\nprint(\"Sin\", math.sin(num))\n\n\n", "idx": 7390, "target": 0}
{"func": "# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choice in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n\n", "idx": 7391, "target": 0}
{"func": "#84 generate random number using the concept of iterators\nclass RandomInt:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n       self.n = 10\n\n    def __next__(self):\n        if self.n > 0:\n           print(random.randint(0,10))\n           self.n -= 1\n        else:\n           raise StopIteration\n\n    def __iter__(self):\n        return self\n\n\n", "idx": 7392, "target": 0}
{"func": "# Write a function to return the volume of a cube\ndef cal_cube_volume(side:float)->float:\n    return side**3\n\n", "idx": 7393, "target": 0}
{"func": "#create a list\nl = [(\"x\", 1), (\"x\", 2), (\"x\", 3), (\"y\", 1), (\"y\", 2), (\"z\", 1)]\nd = {}\nfor a, b in l:\n    d.setdefault(a, []).append(b)\nprint (d)\n\n", "idx": 7394, "target": 0}
{"func": "# write a python program to print the factorial of a number\nnum = 5\nfact = 1\nwhile num > 0:\n   fact *= num\n   num -= 1\nprint(fact)\n\n\n", "idx": 7395, "target": 0}
{"func": "#11 write a function to reverse every word in a string\ndef reverse_word(sen: str):\n    words = sen.split(' ')\n    rever_word = [ i[::-1] for i in words ]\n    final_sen = ' '.join(rever_word)\n    print(final_sen)\n\n\n", "idx": 7396, "target": 0}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\na = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in a.items():\n    print(k, v)\n\n\n", "idx": 7397, "target": 0}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (g*mass1*mass2)/(distance**2)\n\n", "idx": 7398, "target": 0}
{"func": "#87 Write a Python function to check whether a list contains a sublist.\ndef is_Sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\n\treturn sub_set\n \n \n", "idx": 7399, "target": 0}
{"func": "# Write python function which Given an list distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. \n\ndef combinationSum(candidates, target):\n    results = []\n    def helper(i, path):\n        if sum(path) == target:\n            results.append(path[:])\n            return\n            \n        if sum(path) > target:\n            return\n            \n        for x in range(i, len(candidates)):\n            path.append(candidates[x])\n            helper(x, path)\n            path.pop()\n                \n    helper(0, []) \n    return results\n\t\n\t\n", "idx": 7400, "target": 0}
{"func": "# Write a python function to select files from a directory that have been modified in last x hours given by the user\nimport glob\nimport os\nimport random\nimport datetime\ndef retrieve_last_files(src_dir_path, last_modified_hour):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    if( last_modified_hour <0 or last_modified_hour>24):\n        print(\"Invalid delta requested\")\n        raise ValueError\n    \n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    return [ filename for filename in files_in_dir if (datetime.datetime.fromtimestamp(os.path.getmtime(filename)) < datetime.datetime.now() + datetime.timedelta(hours=last_modified_hour)) ]\n\n\n", "idx": 7401, "target": 0}
{"func": "# initializing order \nord_list = ['gfg', 'is', 'best', 'for', 'geeks'] \n \nc={}\nfor i in ord_list:\n    if i in test_dict:\n       c.update({i:test_dict[i]})\nprint(c) \n\n\n", "idx": 7402, "target": 0}
{"func": "# Please write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nli = [5,6,77,45,22,12,24]\nli = [x for x in li if x%2!=0]\nprint(li)\n\n", "idx": 7403, "target": 0}
{"func": "# 23. python function to find the area of a circle\ndef square_area(x):\n    return x ** 2\n\n", "idx": 7404, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[5:]\n\t\t\n", "idx": 7405, "target": 0}
{"func": "#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.\nFor example, the string \"AAAABBBCCDAAA\" would be encoded as \"4A3B2C1D3A\"\ndef encode_string(str1):\n    encoded = \"\"\n    ctr = 1\n    last_char = str1[0]\n\n    for i in range(1, len(str1)):\n\n        if last_char == str1[i]:\n            ctr += 1\n         \n        else:\n            encoded += str(ctr) + last_char\n            ctr = 0\n            last_char = str1[i]\n            ctr += 1\n    encoded += str(ctr) + last_char\n    return encoded\n\n", "idx": 7406, "target": 0}
{"func": "# write a program to Pretty Print a dictionary with dictionary values. \ntest_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} \nprint(\"The Pretty Print dictionary is : \") \nfor sub in test_dict: \n    print(f\"\\n{sub}\") \n    for sub_nest in test_dict[sub]: \n        print(sub_nest, ':', test_dict[sub][sub_nest])\n\n", "idx": 7407, "target": 0}
{"func": "# Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other\ndef test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False\n\n", "idx": 7408, "target": 0}
{"func": "# write a python function that returns the weighted average of numbers\ndef get_weighted_average(numbers, weightage):\n   return sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)\n\n\n", "idx": 7409, "target": 0}
{"func": "# write a python function to count number of times a function is called \ndef counter(fn):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(f'Function {fn.__name__} was called {count} times.')\n        return fn(*\"args, **kwargs)    \n    return inner\n\n", "idx": 7410, "target": 0}
{"func": "# Pretty print JSON\nimport json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = json.loads(person_string)\nprint(json.dumps(person_dict, indent = 4, sort_keys=True))\n\n", "idx": 7411, "target": 0}
{"func": "# write a python program using while loop to reverse a number and print the reversed number\nNumber = int(input(\"Please Enter any Number: \"))    \nReverse = 0    \nwhile(Number > 0):    \n    Reminder = Number %10    \n    Reverse = (Reverse *10) + Reminder    \n    Number = Number //10    \n     \nprint(\"\\n Reverse of entered number is = %d\" %Reverse)  \n\n", "idx": 7412, "target": 0}
{"func": "# Write a function to merge two lists element wise\ndef merge_lists(l1:list, l2:list):\n    return list(zip(l1,l2))\n\n", "idx": 7413, "target": 0}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for i in original_prices]\nprint(f\"Final List:{prices}\")\n\n", "idx": 7414, "target": 0}
{"func": "# Write a function that splits the elements of string\ndef split_elements(s:str, seperator)-> list:\n    return s.split(seperator)\n\n", "idx": 7415, "target": 0}
{"func": "# write a python function to return the number of lines in a file\ndef count_lines(filename):\n   with open(filename, 'r') as f:\n      contents = f.read().split('\\n')\n      return len(contents)\n\n\n", "idx": 7416, "target": 0}
{"func": "# write a python function to repeat calls to function with specified arguments\ndef repeatfunc(func, times=None, *args):\n    from itertools import starmap, repeat\n    if times is None:\n        return starmap(func, repeat(args))\n    return starmap(func, repeat(args, times))\n\n", "idx": 7417, "target": 0}
{"func": "# 14. python function to create adders\ndef create_adders():\n    adders = []\n    for n in range(1, 4):\n        adders.append(lambda x, y=n: x + y)\n    return adders\nadders = create_adders()\n\n", "idx": 7418, "target": 0}
{"func": "# Please write a program to randomly print a integer number between 7 and 15 inclusive.\nimport random\nprint(random.randrange(7,16))\n\n", "idx": 7419, "target": 0}
{"func": "# Write a function to return the volume of a cuboid\ndef cal_cuboid_volume(length:float, breadth:float, height:float)->float:\n    return length*breadth*height\n\n", "idx": 7420, "target": 0}
{"func": "# write a python function to read a text file and return the result\ndef read_file(filepath='test.txt'):\n    with open(filepath, 'r') as file_reader:\n        f_read = file_reader.read()\n    return f_read\nread_file()\n\n\n", "idx": 7421, "target": 0}
{"func": "# write Python3 code to demonstrate working of Merge List value Keys to Matrix Using loop + pop() \n\ntest_dict = {'gfg' : [4, 5, 6], \n            'is' : [8, 8, 9], \n            'CS' : [1, 3, 8], \n            'Maths' : [1, 2]} \n \nprint(\"The original dictionary : \" + str(test_dict)) \n\nque_list = ['gfg', 'CS', 'Maths'] \n\nnew_data = [test_dict.pop(ele) for ele in que_list] \ntest_dict[\"merge_key\"] = new_data \n \nprint(\"The dictionary after merging : \" + str(test_dict)) \n\n", "idx": 7422, "target": 0}
{"func": "# Define a function which can compute the sum of two numbers.\ndef sum_nums(number1, number2):\n\treturn number1+number2\n\n", "idx": 7423, "target": 0}
{"func": "# write a python program to delete a variable\ni = 10\ndel i\n\n", "idx": 7424, "target": 0}
{"func": "# reverse for sorting by max - first element's tuples \ntest_list.sort(key = get_max, reverse = True) \n  \n", "idx": 7425, "target": 0}
{"func": "# 73 write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\n\nli = [3, 6, 7, 8]\nshuffle(li)\nprint(li)\n\n", "idx": 7426, "target": 0}
{"func": "# write a python program to check Armstrong number of n digits\nnum = 1634\norder = len(str(num))\nsum = 0\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** order\n   temp //= 10\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 7427, "target": 0}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a+b for a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 7428, "target": 0}
{"func": "# write a python function that returns a dictionary with the area and perimeter of a rectangle\ndef calculate_rect_properties(width, height):\n   return {\n      'perimeter': 2 * (width + height),\n      'area': width * height\n   }\n\n\n", "idx": 7429, "target": 0}
{"func": "# write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module\nclass Secure:\n    def __init__(self):\n        \"\"\"\n           Generates a key and save it into a file\n        \"\"\"\n        key = Fernet.generate_key()\n        with open(\"secret.key\", \"wb\") as key_file:\n            key_file.write(key)\n\n    @staticmethod\n    def load_key():\n        \"\"\"\n        Load the previously generated key\n        \"\"\"\n        return open(\"secret.key\", \"rb\").read()\n\n    def encrypt_message(self, message):\n        \"\"\"\n        Encrypts a message\n        \"\"\"\n        key = self.load_key()\n        encoded_message = message.encode()\n        f = Fernet(key)\n        encrypted_message = f.encrypt(encoded_message)\n        print(\"\\nMessage has been encrypted: \", encrypted_message)\n        return encrypted_message\n\n    def decrypt_message(self, encrypted_message):\n        \"\"\"\n        Decrypts an encrypted message\n        \"\"\"\n        key = self.load_key()\n        f = Fernet(key)\n        decrypted_message = f.decrypt(encrypted_message)\n        print(\"\\nDecrypted message:\", decrypted_message.decode())\n\n\ns = Secure()\nencrypted = s.encrypt_message(\"My deepest secret!\")\ns.decrypt_message(encrypted)\n\n\n", "idx": 7430, "target": 0}
{"func": "#9 write a function to remove empty tuples from a list and print\ndef remove_empty_tuple(num1: list):\n    if isinstance(num1, list):\n        modified = list(filter(None, num1))\n        print(modified)\n\n\n", "idx": 7431, "target": 0}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] > 1]\n\n", "idx": 7432, "target": 0}
{"func": "#83 Write a Python program to move all spaces to the front of a given string in single traversal.\ndef moveSpaces(str1): \n    no_spaces = [char for char in str1 if char!=' ']   \n    space= len(str1) - len(no_spaces)\n    result = ' '*space    \n    return result + ''.join(no_spaces)\n\n", "idx": 7433, "target": 0}
{"func": "# Write a function to calculate and return electricity bill. Units used are given. Price per unit is fixed and is increased after 750 units.\n\ndef calc_elect_bill(units):\n    if units > 0:\n        if units <= 750:\n            return 5*units\n        else:\n            return 5*(750) + 7*(units-750)\n\n    else:\n        return -1\n\n\n", "idx": 7434, "target": 0}
{"func": "#  Write a python function to get the volume of a cone with radius & vertical height as input\ndef cone_volume(radius, height):\n    volume = 1/3 * 3.14 * (radius ** 2) * height\n    return volume\n\n\n", "idx": 7435, "target": 0}
{"func": "# 80 By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12, 24, 35, 70, 88, 120, 155]\nli = [x for (i, x) in enumerate(li) if i not in (0, 4, 5)]\nprint(li)\n\n", "idx": 7436, "target": 0}
{"func": "# write a python function for implementation of Bubble Sort\n\ndef bubbleSort(arr): \n    n = len(arr) \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \n\nbubbleSort(arr) \n\nprint (f\"Sorted array {arr}\") \n\n\n\n", "idx": 7437, "target": 0}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 7438, "target": 0}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \nfor i, j in test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res))\n\n", "idx": 7439, "target": 0}
{"func": "# Write a Python function that calculate side length of a equilateral polygon\n\nimport math\ndef side_length(no_of_sides, circumradius):\n    return 2 * circumradius * math.sin(math.pi / no_of_sides)\n\n", "idx": 7440, "target": 0}
{"func": "# Write a Python function to check whether a person is eligible for voting or not based on their age\ndef vote_eligibility(age):\n\tif age>=18:\n\t    status=\"Eligible\"\n\telse:\n\t    status=\"Not Eligible\"\n\treturn status\n\n\n", "idx": 7441, "target": 0}
{"func": "# write a Python function to find all string which are greater than given length k \n\ndef string_k(k, str): \n    \n    string = [] \n\n    text = str.split(\" \") \n\n    for x in text: \n\n        if len(x) > k: \n            \n            string.append(x) \n\n    return string \n\nk = 3\nstr1 =\"geek for geeks\"\nprint(string_k(k, str1)) \n\n\n", "idx": 7442, "target": 0}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nfor ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 7443, "target": 0}
{"func": "#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.\ndef odd_occurrence(arr):\n \n    # Initialize result\n    result = 0\n     \n    # Traverse the array\n    for element in arr:\n        # XOR\n        result = result ^ element\n \n    return result\n\n", "idx": 7444, "target": 0}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for a in list1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 7445, "target": 0}
{"func": "# Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense\ndef cal_focal_length_of_lense(u:float,v:float)->float:\n    return (u*v)/(u+v)\n\n", "idx": 7446, "target": 0}
{"func": "# write a python function to return the area of a circle with given radius\nimport math\ndef area_circle(radius):\n    return math.pi * radius * radius\n\n", "idx": 7447, "target": 0}
{"func": "#89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.\nfrom itertools import groupby\ndef pack_consecutive_duplicates(l_nums):\n    return [list(group) for key, group in groupby(l_nums)]\nn_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nAfter packing consecutive duplicates of the said list elements into sublists:\")\nprint(pack_consecutive_duplicates(n_list)) \n\n", "idx": 7448, "target": 0}
{"func": "# write a python program to calculate and print square root of numbers 0 to 100\ni = 0\nwhile i<= 100:\n print(i, \"\\t\\t\" , i**0.5)\n i = i + 1\n\n", "idx": 7449, "target": 0}
{"func": "#16. Python program to find the factorial of a number.\nnum = 7\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)\n\n\n", "idx": 7450, "target": 0}
{"func": "# Write a python function to return the content of a directory and the last modified date\nimport glob\nimport os\nimport time\ndef retrieve_files_bydate(src_dir_path,*args):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    file_date_list = [ (filename, time.ctime(os.path.getmtime(filename)))for filename in files_in_dir]\n    return file_date_list\n\n", "idx": 7451, "target": 0}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        k = char.islower()   \n        if k == True: \n            return True \n    if(k != 1): \n        return False\n\n", "idx": 7452, "target": 0}
{"func": "# 37 Write a python program to calculate the LCM and HCF of two given numbers\ndef hcf(x1, x2):\n    if x1 == 0:\n        return x2\n    else:\n        return hcf(x2 % x1, x1)\n\n\ndef lcm_hcf(x1, x2):\n    h_c_f = hcf(x1, x2)\n    lcm = x1 * x2 / h_c_f\n    return lcm, h_c_f\n\n\nl, h = lcm_hcf(18, 12)\n\nprint(f\"LCM : {l}, HCF: {h}\")\n", "idx": 7453, "target": 0}
{"func": "#10. Python Program to Check if a Number is Positive, Negative or 0\nnum = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n #11. Python Program to Check if a Number is Odd or Even\n num = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n\n\n", "idx": 7454, "target": 0}
{"func": "# Write a Python function to unzip a list of tuples into individual lists\ndef unzip_list_of_tuples(list_tuple):\n    return list(zip(*l))\n\n\n", "idx": 7455, "target": 0}
{"func": "# Write a Python program to remove spaces from a given string\ndef remove_spaces(str1):\n    str1 = str1.replace(' ','')\n    return str1\n \n\n", "idx": 7456, "target": 0}
{"func": "# write a python function to compute the HCF of two numbers\ndef hcf(x, y):\n\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 7457, "target": 0}
{"func": "# write a function to accept a simple iterable and print the elements \n\ndef print_iter(iter):\n    for item in iter:\n        print(item)\n\n", "idx": 7458, "target": 0}
{"func": "# print the numbers properly by creating a list\nmy_list = [lambda x=i: x for i in range(5)]\nfor l in my_list:\n    print(l())\n\n", "idx": 7459, "target": 0}
{"func": "# write a python function to return the sum of first n numbers\ndef sum_of_nums(n):\n   if n <= 1:\n      return n\n   else:\n      return n + sum_of_nums(n-1)\n\n\n", "idx": 7460, "target": 0}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"piyushjain\"\n\ndef longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,c in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n        print(sub_str)\n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 7461, "target": 0}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key for key, value in input_dict.items()}\n  return my_inverted_dict\n\n", "idx": 7462, "target": 0}
{"func": "#89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.\nfrom itertools import groupby\ndef pack_consecutive_duplicates(l_nums):\n    return [list(group) for key, group in groupby(l_nums)]\nn_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nAfter packing consecutive duplicates of the said list elements into sublists:\")\nprint(pack_consecutive_duplicates(n_list)) \n\n", "idx": 7463, "target": 0}
{"func": "# write a python program to search a key in the text file\nfname = 'sample.txt'\nl='keyword' # Enter letter to be searched\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==l):\n                k=k+1\nprint(\"Occurrences of the letter:\",k)\n\n", "idx": 7464, "target": 0}
{"func": "# write a Python Program to Display the multiplication Table of given number\nnum = 12\nfor i in range(1, 11):\n   print(num, 'x', i, '=', num*i)   \n   \n   \n   \n", "idx": 7465, "target": 0}
{"func": "# write a python function to return nth item or a default value\ndef nth(iterable, n, default=None):\n    from itertools import islice\n    return next(islice(iterable, n, None), default)\n\n", "idx": 7466, "target": 0}
{"func": "# write a python function that takes in a list and returns a list containing the squares of the elements of the input list\ndef square_list_elements(list_to_be_squared):\n    return list( map(lambda x: x**2, list_to_be_squared) )\n\n\n", "idx": 7467, "target": 0}
{"func": "# Write a function to calculate volume of Triangular Pyramid\ndef volumeTriangular(a, b, h): \n    return (0.1666) * a * b * h \n  \n", "idx": 7468, "target": 0}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res.append(key) \nprint(\"Top N keys are: \" + str(res))\n\n", "idx": 7469, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 7470, "target": 0}
{"func": "# Write a function that returns a list sorted descending\ndef descending_sort(l:list):\n    sorted(l, reverse=True)\n\n", "idx": 7471, "target": 0}
{"func": "# 98 write a python function that calculates the midpoint between two numbers\n\n\ndef midpoint(a, b):\n    lar = b if b > a else a\n    sm = a if b > a else b\n\n    return float(lar + sm) / 2\n\n\n", "idx": 7472, "target": 0}
{"func": "# Write a function to return the nth prime number\ndef nth_prime_number(n):\n    prime_list = [2]\n    num = 3\n    while len(prime_list) < n:\n        for p in prime_list:\n            if num % p == 0:\n                break\n        else:\n            prime_list.append(num)\n            num += 2\n    return prime_list[-1]\n\n", "idx": 7473, "target": 0}
{"func": "#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.\ndef collatz_sequence(x):\n    num_seq = [x]\n    if x < 1:\n       return []\n    while x > 1:\n       if x % 2 == 0:\n         x = x / 2\n       else:\n         x = 3 * x + 1\n       num_seq.append(x)    \n    return num_seq\n\n", "idx": 7474, "target": 0}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum1 = 4\nnum2 = 30\nmyval = [i for i in range(num1, num2, 2)]\nprint(myval)\n\n", "idx": 7475, "target": 0}
{"func": "# Write a program that will determine the memory usage by python process\nimport os, psutil\nprint(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)\n\n", "idx": 7476, "target": 0}
{"func": "# Write a Python function that Given a list of numbers, return True if first and last number of a list is same\ndef isFirst_And_Last_Same(numberList):\n    firstElement = numberList[0]\n    lastElement = numberList[-1]\n    if (firstElement == lastElement):\n        return True\n    else:\n        return False\n\n\n", "idx": 7477, "target": 0}
{"func": "# change this value for a different result\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   print(\"The sum is\",recur_sum(num))\n\n\n", "idx": 7478, "target": 0}
{"func": "# write a program to remove even numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_even_nums = [i for i in nums if i % 2 == 1]\n\n\n", "idx": 7479, "target": 0}
{"func": "# write a python function to locate the leftmost value exactly equal to x\ndef index(a, x):\n    from bisect import bisect_left    \n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError\n\n", "idx": 7480, "target": 0}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef printDict():\n\td=dict()\n\td[1]=1\n\td[2]=2**2\n\td[3]=3**2\n\tprint d\n\n", "idx": 7481, "target": 0}
{"func": "#68 write a program to remove punctuation from a string \n\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n", "idx": 7482, "target": 0}
{"func": "#66 Write a Python function to push all zeros to the end of a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\n\n", "idx": 7483, "target": 0}
{"func": "# write a Python function to Calculate Curved Surface Area of Cylinder \ndef curvedsurfacearea(r, h): \n    cursurf_ar = (2 * pi * r * h) \n    return cursurf_ar \n\nr = 5\nh = 8\n\nprint(\"Curved Surface Area Of Cylinder = \",curvedsurfacearea(r,h)) \n\n\n", "idx": 7484, "target": 0}
{"func": "#75 return dot product of two vectors\ndef dot_product(a: \"Vector1\", b: \"Vector2\"):\n    return sum( e[0]*e[1] for e in zip(a,b) )\n\n\n", "idx": 7485, "target": 0}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\nstudent = json.loads(studentJson)\nif not (student.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(student.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 7486, "target": 0}
{"func": "# write Python program to demonstrate printing of complete multidimensional list row by row. \na = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] \nfor record in a: \n\tprint(record) \n\n", "idx": 7487, "target": 0}
{"func": "# Python program to validate a Gregorian date\n\n\ndef check_date(m, d, y):\n    import datetime\n    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False\n\n\nprint(check_date(11, 11, 2002))\nprint(check_date('11', '11', '2002'))\nprint(check_date(13, 11, 2002))\n\n\n", "idx": 7488, "target": 0}
{"func": "# Write a python program to convert decimal to binary\nDecimal = input(\"Enter Number: \")\nnum = int(Decimal)\nBinary =\"\"\nwhile num>=1:\ni = num%2\nnum = num//2\nBinary +=str(i)\nprint (\"Binary Equivalent of {} is {}\".format(Decimal,Binary[::-1]))\n\n\n", "idx": 7489, "target": 0}
{"func": "# Write a python function to get the volume of a sphere with radius as input\ndef sphere_volume(radius):\n    volume =  4.0/3.0 * 3.14 * radius ** 3\n    return volume    \n\n", "idx": 7490, "target": 0}
{"func": "# write a python function to find the add two numbers and then find the largest among sum and other two inputs\ndef find_the_largest(num1, num2):\n    sum_ = num1+num2\n    if num1 >= sum_ and num1 >= num2:\n        return num1\n    elif num2 >= sum_ and num2 >= num1:\n        return num2\n    else:\n        return sum_\n    \n", "idx": 7491, "target": 0}
{"func": "#67 function counter to store the number of times multiples function called in a dictionary\ndef count_func_dict(fn: \"Function Name\"):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count =+= 1\n        counter_67[fn.__name__] = count\n        return fn(*args, **kwargs)\n    return inner\n\n\n", "idx": 7492, "target": 0}
{"func": "# Write a Python function to interchange first and last elements in a list\ndef swapList(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n\t\n\n\t\n\n", "idx": 7493, "target": 0}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res[key] = val \nprint(\"The dictionary after combination : \" + str(res))\n\n", "idx": 7494, "target": 0}
{"func": "# Pick a random character from a given String\nimport random\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", char)\n\n", "idx": 7495, "target": 0}
{"func": "# 6. python ReLu function\ndef relu_like_activation(l):\n    return[0 if x < 0 else x for x in l]\n\n", "idx": 7496, "target": 0}
{"func": "#41. Python Program to Add Two Matrices using Nested List Comprehension\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 7497, "target": 0}
{"func": "# write a Python program to demonstrate working of Extract Unique values dictionary values \n\ntest_dict = {'gfg' : [5, 6, 7, 8], \n            'is' : [10, 11, 7, 5], \n            'best' : [6, 12, 10, 8], \n            'for' : [1, 2, 5]} \n\nprint(f\"The original dictionary is : {test_dict}\")\n\nres = sorted({ele for val in test_dict.values() for ele in val})\n\nprint(f\"The unique values list is : {res}\")\n\n\n", "idx": 7498, "target": 0}
{"func": "# Write a Python program to sort (ascending) a dictionary by value.\nd = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nprint({k :v for k,v in sorted(d.items(),key = lambda x : x[1])})\n\n", "idx": 7499, "target": 0}
{"func": "# Write a python program to check if a number is an Armstrong number.\nn=int(input(\"Enter any number: \"))\na=list(map(int,str(n)))\nb=list(map(lambda x:x**3,a))\nif(sum(b)==n):\nprint(\"The number is an armstrong number. \")\nelse:\nprint(\"The number isn't an arsmtrong number. \")\n\n", "idx": 7500, "target": 0}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    found = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            found = True\n            break\n    if not found:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 7501, "target": 0}
{"func": "#97 Write a Python program to print all permutations of a given string (including duplicates).\ndef permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_lis\n    \n", "idx": 7502, "target": 0}
{"func": "# Write a Python program to subtract five days from current date\nfrom datetime import date, timedelta\ndt = date.today() - timedelta(5)\nprint('Current Date :',date.today())\nprint('5 days before Current Date :',dt)\n\n", "idx": 7503, "target": 0}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for a in list1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 7504, "target": 0}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\ndef cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity + accelration*time\n\n", "idx": 7505, "target": 0}
{"func": "# Write a Python function to Find Element Occurring Odd Number of Times in a List\n\ndef find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n \n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ans = 0\n \n    for element in alist:\n        ans ^= element\n \n    return ans\n\n", "idx": 7506, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = num1 if num1 > num2 else num2\n    while True:\n        if (bigger % num1 == 0) and (bigger % num2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 7507, "target": 0}
{"func": "# Shuffle a list randomly\nimport random\nlist = [2,5,8,9,12]\nrandom.shuffle(list)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 7508, "target": 0}
{"func": "# write a python function to check whether the number is a Magic number or not\n def isMagic(n): \n    sum = 0\n    \n    while (n > 0 or sum > 9): \n        if (n == 0): \n            n = sum; \n            sum = 0; \n        sum = sum + n % 10; \n        n = int(n / 10); \n        \n    return True if (sum == 1) else False;\n\n", "idx": 7509, "target": 0}
{"func": "# 35 Write a python function that sorts a list of strings by their length in the descending order\ndef sort_by_len(arr):\n    return sorted(arr, reverse=True, key=lambda x: len(x))\n\n\n", "idx": 7510, "target": 0}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            count = count + 1\n    return count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 7511, "target": 0}
{"func": "# 12. python function to return the cubes of a list of numbers\ndef cube(n):\n   return [i*i*i for i in range(n)]\n\n", "idx": 7512, "target": 0}
{"func": "# Write a python function that Capitalize the First Letter of Every Word in the File\n\ndef capitalize(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            l=line.title()\n            print(l)\n\n", "idx": 7513, "target": 0}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):    \n    sum = num1 + num2    \n    return sum\n\n", "idx": 7514, "target": 0}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,height:float)->float:\n    if base and height:\n        return (base*height)/2\n    else:\n        return None\n\n", "idx": 7515, "target": 0}
{"func": "# Write a python program to Implement Binary Search without Recursion and print the key element if found\n\ndef binary_search(alist, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while start < end:\n        mid = (start + end)//2\n        if alist[mid] > key:\n            end = mid\n        elif alist[mid] < key:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 7516, "target": 0}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using closer\n\ndef fib():\n    cache = {1:1, 2:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fib({n})')\n            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)\n        return cache[n]\n    return calc_fib\n\n", "idx": 7517, "target": 0}
{"func": "#84 Write a Python program to find maximum length of consecutive 0\u2019s in a given binary string.\ndef max_consecutive_0(input_str): \n     return  max(map(len,input_str.split('1')))\nstr1 = '111000010000110'\nprint(\"Original string:\" + str1)\nprint(\"Maximum length of consecutive 0\u2019s:\")\n\n", "idx": 7518, "target": 0}
{"func": "# write a python program uses else with for loop\nseq = \"abcde\"\nfor k in seq:\n    if k == \"f\":\n        break\nelse:\n    print(\"f Not Found!\")\n\n\n", "idx": 7519, "target": 0}
{"func": "# Write a function to calculate the simple interest for principal p, rate r and time in years y\ndef get_si(p:float, r:float, t:float)->float:\n    return (p*r*t)/100\n\n", "idx": 7520, "target": 0}
{"func": "# write a Python Program to check if a number is a Perfect number and print the result\nn = 7\nsum1 = 0\nfor i in range(1, n):\n    if(n % i == 0):\n        sum1 = sum1 + i\nif (sum1 == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")\n\n\n\n\n", "idx": 7521, "target": 0}
{"func": "# Define a function that can accept an integer number as input and print the \"It is an even number\" if the number is even, otherwise print \"It is an odd number\".\ndef checkValue(n):\n\tif n%2 == 0:\n\t\tprint \"It is an even number\"\n\telse:\n\t\tprint \"It is an odd number\"\n\t\t\n", "idx": 7522, "target": 0}
{"func": "# class from datetime module \nfrom datetime import datetime, timedelta \n  \n  \n", "idx": 7523, "target": 0}
{"func": "# Write a function that takes number of disks in tower of hanaoi problem and returns the minimum number of steps required\n\ndef hanoi(x):\n    if x == 1:\n        return 1\n    else:\n        return 2*hanoi(x-1) + 1\n\n", "idx": 7524, "target": 0}
{"func": "# Output : paizwlc\ndef mirror_character(word: str, value: int):\n    import string\n    letters = string.ascii_lowercase\n    rev_letter = letters[::-1]\n    dict_char = dict(zip(letters, rev_letter))\n    final_1 = word[0:value]\n    final_2 = []\n    for i in range(value, len(word)):\n        final_2.append(dict_char[word[i]])\n    print(final_1+''.join(final_2))\n\n\n", "idx": 7525, "target": 0}
{"func": "# Write a Python program to Convert following datetime instance into string format\nfrom datetime import datetime\ngiven_date = datetime(2020, 2, 25)\nstring_date = given_date.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(string_date)\n\n\n", "idx": 7526, "target": 0}
{"func": "# write a python program that would print the first n positive integers using a for loop\nn = 62\nfor num in range(n):\n    print(num)\n\n\n", "idx": 7527, "target": 0}
{"func": "# write a python function to repeat a given string n times\ndef repeat_string(string, frequency):\n   return string * frequency\n\n\n", "idx": 7528, "target": 0}
{"func": "# write a python function that returns biggest character in a string\nfrom functools import reduce\n\n\ndef biggest_char(string):\n    if not isinstance(string, str):\n        raise TypeError\n    return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)\n\n\n", "idx": 7529, "target": 0}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res += ele \n  \nres += dig \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 7530, "target": 0}
{"func": "# Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, li))\nprint evenNumbers\n\n", "idx": 7531, "target": 0}
{"func": "# Write a python Program to Flatten and print a List\n\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]\nprint(flatten(a))\n\n", "idx": 7532, "target": 0}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n_recursive(n):\n    if n == 0:\n        return 0\n    return sum_first_n_recursive(n-1) + n\n\n\n", "idx": 7533, "target": 0}
{"func": "# Write a Python Program to print Prime Factors of an Integer\n\nn=24\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(i)\n    i=i+1\n\n\n", "idx": 7534, "target": 0}
{"func": "# Write a function to return the perimeter of a square\ndef cal_perimeter_square(side):\n    return 4*side\n\n", "idx": 7535, "target": 0}
{"func": "# Write a function to merge meeting times given everyone's schedules\n\ndef merge_ranges(meetings):\n    sorted_meetings = sorted(meetings)\n\n    merged_meetings = [sorted_meetings[0]]\n\n    for current_meeting_start, current_meeting_end in sorted_meetings[1:]:\n        last_merged_meeting_start, last_merged_meeting_end = merged_meetings[-1]\n\n        if (current_meeting_start <= last_merged_meeting_end):\n            merged_meetings[-1] = (last_merged_meeting_start,\n                                   max(last_merged_meeting_end,\n                                       current_meeting_end))\n        else:\n            merged_meetings.append((current_meeting_start, current_meeting_end))\n\n    return merged_meetings\n\n\n", "idx": 7536, "target": 0}
{"func": "#23 Write a python program to filter similar case strings and print it\n\nx=[]\nfor i in test_list:\n    if i.islower() or i.isupper():\n       print(x.append(i))\n    \nprint(x) \n\n\n", "idx": 7537, "target": 0}
{"func": "# write a regex pattern in python to print all adverbs and their positions in user input text\nimport re\ntext = input(\"Enter a string: \")\nfor m in re.finditer(r\"\\w+ly\", text):\n    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n\n", "idx": 7538, "target": 0}
{"func": "# write a python function to emulate the behavior of built-in map() function\ndef pad_none(iterable):\n    \"\"\"Returns the sequence elements and then returns None indefinitely.\n    Useful for emulating the behavior of the built-in map() function.\n    \"\"\"\n    from itertools import chain, repeat\n    return chain(iterable, repeat(None))\n\n", "idx": 7539, "target": 0}
{"func": "# True and False in the datetime module\nfrom platform import python_version\nimport datetime\n\nprint(\"Current python version: \", python_version())\nprint('\"datetime.time(0,0,0)\" (Midnight) ->', bool(datetime.time(0,0,0))) # Python version <= 3.4.5 evaluates this statement to False\n\n", "idx": 7540, "target": 0}
{"func": "# write a python function for dice roll asking user for input to continue and randomly give an output.\ndef dice():\n    import random\n    min = 1\n    max = 6\n    roll_again = 'y'\n\n    while roll_again == \"yes\" or roll_again == \"y\":\n        print(\"Rolling the dice...\")\n        print(random.randint(min, max))\n        roll_again = input(\"Roll the dices again?\")\n\n\nfrom cryptography.fernet import Fernet\n\n\n", "idx": 7541, "target": 0}
{"func": "# Generate random Universally unique IDs\nimport uuid\nsafeId = uuid.uuid4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 7542, "target": 0}
{"func": "# display the sorted words\n\nprint(\"The sorted words are:\")\nfor word in words:\n   print(word)\n\n", "idx": 7543, "target": 0}
{"func": "#39 how to remove integer from string in python\ns = '12abcd405'\nresult = ''.join([i for i in s if not i.isdigit()])\n\n", "idx": 7544, "target": 0}
{"func": "#48 write a python program to merge a list of dictionaires\nresult = {}\nfor d in L:\n    result.update(d)\n\n", "idx": 7545, "target": 0}
{"func": "# use anonymous function\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 7546, "target": 0}
{"func": "# Write a python program to Check and print if Expression is Correctly Parenthesized using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\nexp = \"(x+y\"\n \nfor c in exp:\n    if c == '(':\n        s.push(1)\n    elif c == ')':\n        if s.is_empty():\n            is_balanced = False\n            break\n        s.pop()\nelse:\n    if s.is_empty():\n        is_balanced = True\n    else:\n        is_balanced = False\n \nif is_balanced:\n    print('Expression is correctly parenthesized.')\nelse:\n    print('Expression is not correctly parenthesized.')\n\n", "idx": 7547, "target": 0}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\nwhile (number > 0):\n    digit = number % 10\n    number = number // 10\n    print(digit, end=\" \")\n\n", "idx": 7548, "target": 0}
{"func": "#3 write a function to check whether a given date in DD/MM/YYYY format is valid or not\ndef date_validation(inputdate: str):\n    \"\"\"\n    function take input date in DD/MM/YYYY format and check its validation.\n    \"\"\"\n    import datetime\n    dd, mm, year = inputdate.split('/')\n    isValidDate = True\n    try :\n        datetime.datetime(int(year),int(mm), int(dd))\n    except ValueError : \n        isValidDate = False\n    if(isValidDate):\n        print (\"Input Date is Valid\")\n    else:\n        print (\"Input Date is invalid\")\n\n\n", "idx": 7549, "target": 0}
{"func": "#90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.\nfrom itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]\n\nn_list = [1,1,2,3,4,4,5, 1]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nList reflecting the modified run-length encoding from the said list:\")\nprint(modified_encode(n_list))\n\n", "idx": 7550, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    for i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 7551, "target": 0}
{"func": "# Write a program to find the median among three given number\nx=10\ny=20\nz=30\nif y < x and x < z:\n    print(x)\nelif z < x and x < y:\n    print(x)\nelif z < y and y < x:\n    print(y)\nelif x < y and y < z:\n    print(y)\nelif y < z and z < x:\n    print(z)    \nelif x < z and z < y:\n    print(z)\n\n", "idx": 7552, "target": 0}
{"func": "# write a python function to map multiple lists using zip\ndef map_values(*args):\n  return set(zip(*args))\n\n", "idx": 7553, "target": 0}
{"func": "#63 Python Challenges: Check a sequence of numbers is a geometric progression or not\ndef is_geometric(li):\n    if len(li) <= 1:\n        return True\n    # Calculate ratio\n    ratio = li[1]/float(li[0])\n    # Check the ratio of the remaining\n    for i in range(1, len(li)):\n        if li[i]/float(li[i-1]) != ratio: \n            return False\n    return True \n\n", "idx": 7554, "target": 0}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\ndef cal_distance(time:float,speed:float)->float:\n    return time*speed\n\n", "idx": 7555, "target": 0}
{"func": "# Write a Python program to print current time in milliseconds\nimport time\nmilliseconds = int(round(time.time() * 1000))\nprint(milliseconds)\n\n\n", "idx": 7556, "target": 0}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cal_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r for r in res_list])\n\n", "idx": 7557, "target": 0}
{"func": "# Write a Python function to Find the Total Sum of a Nested List Using Recursion\n\ndef sum1(lst):\n    total = 0\n    for element in lst:\n        if (type(element) == type([])):\n            total = total + sum1(element)\n        else:\n            total = total + element\n    return total\n\n", "idx": 7558, "target": 0}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, please write program to print the user name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemailAddress = 'bing@google.com'\npat2 = \"(\\w+)@((\\w+\\.)+(com))\"\nr2 = re.match(pat2,emailAddress)\nprint(r2.group(1))\n\n", "idx": 7559, "target": 0}
{"func": "# Write a python program to print even length words in a string\ndef printWords(s):\ns = s.split(' ')\n\nfor word in s:\nif len(word)%2==0:\nprint(word)\n\ns = \"This is a python language\"\nprintWords(s)\n\n", "idx": 7560, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius*height\n\n", "idx": 7561, "target": 0}
{"func": "# write a program that prints the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n    totalMarks+=mark\n\npercentage = totalMarks/len(markList)  \nprint(f'Total Marks is:{totalMarks},Percentage is:{percentage}')\n\n\n", "idx": 7562, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius*height\n\n", "idx": 7563, "target": 0}
{"func": "# Write a python function to determine if a year is leap year or not\n\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if year % 4 == 0:\n        if year % 400 == 0:\n            leap = True\n        elif year % 100 == 0:\n            leap = False\n        else:\n            leap = True\n    return leap\n\n\t\n", "idx": 7564, "target": 0}
{"func": "# Write a Python function to find the union of two arrays\ndef array_union(A,B):\n\tunion=list(set(A)|set(B))\n\treturn union\n\n\n", "idx": 7565, "target": 0}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flattened =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flattened\n\n", "idx": 7566, "target": 0}
{"func": "# Write a program to check whether a file/path/direcory exists or not\nfile_path = \"path/here\"\nimport os.path\nos.path.exists(file_path)\n\n\n", "idx": 7567, "target": 0}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 7568, "target": 0}
{"func": "# Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by input parameters.\nn=int(input())\nsum=0.0\nfor i in range(1,n+1):\n    sum += float(float(i)/(i+1))\nprint(sum)\n\n", "idx": 7569, "target": 0}
{"func": "#69 write a program to shuffle a deck of card\n\nimport itertools, random\n\ndeck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\nrandom.shuffle(deck)\n\nprint(\"You got:\")\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])\n   \n", "idx": 7570, "target": 0}
{"func": "#86 Write a Python program to find the second smallest number in a list.\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1]\n  \n  \n", "idx": 7571, "target": 0}
{"func": "# write a python function that would reverse the given string\ndef reverse_string(str_to_be_reversed):\n    return str_to_be_reversed[::-1]\n\n\n", "idx": 7572, "target": 0}
{"func": "# Write a lambda function to convert centimeters to inches\n\ncm_to_inch = lambda x: x/2.54\n\n", "idx": 7573, "target": 0}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    return [ele for ele in reversed(lst)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 7574, "target": 0}
{"func": "# Write a Python program to check whether an alphabet is a vowel or consonant\n\nl = input(\"Input a letter of the alphabet: \")\nif l in ('a', 'e', 'i', 'o', 'u'):\n    print(\"%s is a vowel.\" % l)\nelif l == 'y':\n    print(\"Sometimes letter y stand for vowel, sometimes stand for consonant.\")\nelse:\n    print(\"%s is a consonant.\" % l)\n\n", "idx": 7575, "target": 0}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char in str1:\n  count = str1.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 7576, "target": 0}
{"func": "# write a python function to check if the user provided string is palindrome or not a palindrome\n\ndef ifPalindrome(inVar):\n    revInvar = []\n    for _ in range((len(inVar)-1), -1, -1):\n        revInvar.append(inVar[_])\n    if revInvar == inVar:\n        return \"Palindrome\"\n    else:\n        return \"Not a palindrome\"\n\n", "idx": 7577, "target": 0}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nfor key in list(input_dict.keys()):\n  new_key = key[0].upper() + key[1:-1] + key[-1].upper()\n  input_dict[new_key] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 7578, "target": 0}
{"func": "# Write a Python function to Check Whether a Given Year is a Leap Year\n\ndef leapyear_check(year):\n    if(year%4==0 and year%100!=0 or year%400==0):\n        return True\n    else:\n        return False\n\n", "idx": 7579, "target": 0}
{"func": "# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 7580, "target": 0}
{"func": "# write a function to return the square of first N numbers\ndef get_squares(n):\n   return [i*i for i in range(n)]\n\n\n", "idx": 7581, "target": 0}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   used_punctuation = set()\n   for char in sentence:\n      if char in punctuations:\n         used_punctuation.add(char)\n   return used_punctuation\n\n\n", "idx": 7582, "target": 0}
{"func": "# replace with empty string removes the desired char. \nres = [(sub[0].replace(K, ''), sub[1]) for sub in test_list] \n  \n", "idx": 7583, "target": 0}
{"func": "# 30 write a function that accepts two numbers or lists or dictionaries and returns True if the two are equal, and False otherwise\n\n\ndef check_assert(item1, item2):\n    try:\n        assert item1 == item2\n        return True\n    except AssertionError:\n        return False\n\n\n", "idx": 7584, "target": 0}
{"func": "#45 write a program to display the calender\n\nimport calendar  \nyy = int(input(\"Enter year: \"))  \nmm = int(input(\"Enter month: \"))  \n  \nprint(calendar.month(yy,mm))  \n\n", "idx": 7585, "target": 0}
{"func": "#write a Python program to print positive numbers in a list\nlist1 = [11, -21, 0, 45, 66, -93] \nfor num in list1: \n    if num >= 0: \n       print(num, end = \" \") \n\t   \n\t   \n\t   \n", "idx": 7586, "target": 0}
{"func": "# write a function to convert weight from kgs to pounds\n\ndef kgs_to_pounds(weight_kg):\n    return weight_kg * 2.2\n\n", "idx": 7587, "target": 0}
{"func": "# 46 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\nimport requests\n\n\ndef get_encoding(url):\n    data = requests.get(url)\n    return data.encoding\n\n\n", "idx": 7588, "target": 0}
{"func": "# Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case. \n\nclass IOString(object):\n    def __init__(self):\n        self.s = \"\"\n\n    def getString(self):\n        self.s = input()\n    \n    def printString(self):\n        print(self.s.upper())\n\nstrObj = IOString()\nstrObj.getString()\nstrObj.printString()\n\n\n", "idx": 7589, "target": 0}
{"func": "# Write a function to count the number of digits in a number\ndef count_digits(n):\n    return len(str(n))\n\n\n", "idx": 7590, "target": 0}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n(n):\n    return ( n * (n+1) ) // 2\n\n\n", "idx": 7591, "target": 0}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 7592, "target": 0}
{"func": "# Generators are consumed \ngen = (i for i in range(5))\nprint('2 in gen,', 2 in gen)\nprint('3 in gen,', 3 in gen)\nprint('1 in gen,', 1 in gen) \n\n", "idx": 7593, "target": 0}
{"func": "# Driver Code \nif __name__ == '__main__': \n      \n    string = \"HellowWorld\"\n      \n    # Remove nth index element \n    i = 5\n    \n    # Print the new string \n    print(remove(string, i)) \n\n", "idx": 7594, "target": 0}
{"func": "# Write a Python Program to Put Even and Odd elements in a List into Two Different Lists\n\na=[2, 3, 8, 9, 2, 4, 6]\neven=[]\nodd=[]\nfor j in a:\n    if(j%2==0):\n        even.append(j)\n    else:\n        odd.append(j)\nprint(\"The even list\",even)\nprint(\"The odd list\",odd)\n\n", "idx": 7595, "target": 0}
{"func": "#21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate\ndef is_camel_case(s):\n    return s != s.lower() and s != s.upper() and \"_\" not in s\n\n", "idx": 7596, "target": 0}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\ndef sum_of_roots(a:float,c:float):\n    if a:\n        return c/a\n    else:\n        return None\n\n", "idx": 7597, "target": 0}
{"func": "# Write a python function to find all files with a given pattern in a source directory to a different destination directory\nimport glob\nimport os\ndef find_move_files(src_dir_path, dst_dir_path, file_pattern):\n    if(os.path.exists(dst_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    all_png_files = glob.glob(src_dir_path+\"/*\"+file_pattern)\n    if (len(all_png_files) > 0):\n        for file_name in all_png_files:\n            base_file_name=os.path.basename(file_name)\n            os.replace(file_name, os.path.join(dst_dir_path, base_file_name))\n        return \n    else:\n        print(\"No files with matching pattern found\")\n        return\n\n", "idx": 7598, "target": 0}
{"func": "# write a python function to reverse a user provided list or string\n\ndef reverse(itr):\n  return itr[::-1]\n\n", "idx": 7599, "target": 0}
{"func": "# write a python program to make use of enumerate method\n\nfor count, value in enumerate(obj):\n    print(count, value)\n\n", "idx": 7600, "target": 0}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    pi=3.14\n    return (2/3)*pi*(radius**3)\n\n", "idx": 7601, "target": 0}
{"func": "# write a program to print maximum frequency character in a string\n\nstr1 = \"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 7602, "target": 0}
{"func": "# Usge of *args \ndef a_func(*args):\n    print('type of args:', type(args))\n    print('args contents:', args)\n    print('1st argument:', args[0])\na_func(0, 1, 'a', 'b', 'c')\n\n", "idx": 7603, "target": 0}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    pi=3.14\n    return (4/3)*pi*(radius**3)\n\n", "idx": 7604, "target": 0}
{"func": "#68 write a python program to convert List of Dictionaries to List of Lists and print it \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n             {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n             {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\ns=[]\ncount=0\nfor i in test_list:\n    if count<1: \n       s.append(list(i.keys()))\n    s.append(list(i.values()))\n    count+=1\nprint(s) \n\n", "idx": 7605, "target": 0}
{"func": "# write a python class called Person that has a name property\nclass Person:\n   def __init__(self, name):\n      self.name = name\n\n\n", "idx": 7606, "target": 0}
{"func": "# write a python function to get Bitcoin prices after every given 'interval' seconds\ndef get_btc_price(interval=5):\n    import requests\n    import json\n    from time import sleep\n\n    def getBitcoinPrice():\n        URL = \"https://www.bitstamp.net/api/ticker/\"\n        try:\n            r = requests.get(URL)\n            priceFloat = float(json.loads(r.text)[\"last\"])\n            return priceFloat\n        except requests.ConnectionError:\n            print(\"Error querying Bitstamp API\")\n\n    while True:\n        print(\"Bitstamp last price: US $ \" + str(getBitcoinPrice()) + \"/BTC\")\n        sleep(interval)\n\n\n", "idx": 7607, "target": 0}
{"func": "# write a python generator function for generating Fibonacci Numbers \ndef fib(limit): \n    # Initialize first two Fibonacci Numbers  \n    a, b = 0, 1  \n    # One by one yield next Fibonacci Number \n    while a < limit: \n        yield a \n        a, b = b, a + b\n\n", "idx": 7608, "target": 0}
{"func": "# write a Python function to convert number to english\n\ndef num_to_eng(n):\n    if n == 0:\n        return 'zero'\n\n    unit = ('','one','two','three','four','five','six','seven','eight','nine')\n    tens = ('','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety')\n    teen = ('ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen')\n    h, t, u = '', '', ''\n\n    if n//100:\n        h = unit[n//100] + ' hundred'\n        n = n%100\n\n    if n >= 20:\n        t = tens[n//10]\n        n = n%10\n    elif n >= 10:\n        t = teen[n-10]\n        n = 0\n    \n    u = unit[n]\n    \n    return ' '.join(filter(None,[h,t,u]))\n\nprint(num_to_eng(115))\n\n", "idx": 7609, "target": 0}
{"func": "# initializing dictionary list  \ndict_list = [{'for' : 3, 'all' : 7}, {'geeks' : 10}, {'and' : 1, 'CS' : 9}]\n\nfor i in dict_list:\n    test_dict.update(i)\nprint(test_dict) \n\n\n", "idx": 7610, "target": 0}
{"func": "# Write a python function that prints the Contents of a File in Reverse Order\n\ndef reverse_content(filename):\n    for line in reversed(list(open(filename))):\n        print(line.rstrip())\n\n", "idx": 7611, "target": 0}
{"func": "# Write a Python function that returns the ASCII value of the passed in character.\ndef ascii_value_of_character(char):\n    return ord(char)\n\n\n", "idx": 7612, "target": 0}
{"func": "# Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \n\nprint(\"intial_list\", str(ini_tuple)) \nresult = [] \nfor i in ini_tuple: \n    if i[1] <= 100: \n        result.append(i) \nprint (\"Resultant tuple list: \", str(result)) \n\n", "idx": 7613, "target": 0}
{"func": "# Write a Python function to return octal value of a given integer\ndef int_to_oct(a):\n  return oct(a)\n\n\n", "idx": 7614, "target": 0}
{"func": "# Write a python function to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n   \n   \n", "idx": 7615, "target": 0}
{"func": "# 95 write a python function that accepts a binary string and converts it into an equivalent decimal number\n\n\ndef bin2dec(num):\n    return int(num, 2)\n\n\n", "idx": 7616, "target": 0}
{"func": "# Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.\nimport itertools\ndef loan_schedule(principal, interest_rate, annual_payment, tenure):\n    if(tenure <= 0):\n        print(\"Invalid tenure\",tenure)\n        raise ValueError\n    if(interest_rate > 1 or interest_rate < 0):\n        print(\"Invalid interest rate\",interest_rate,\" Expected between 0 and 1\")\n        raise ValueError\n    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]\n    effective_interest_rate = 1+interest_rate\n    return [ val for val in list(itertools.accumulate(cashflows, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]\n\n", "idx": 7617, "target": 0}
{"func": "# write a Python function to find volume of the Pentagonal Prism \n\ndef volume(b, h): \n    return (5 * b * h) / 2\n\na = 5\nb = 3\nh = 7\n\nprint(\"volume =\", volume(b, h)) \n\n", "idx": 7618, "target": 0}
{"func": "# Write a Python program to get the current username using getpass library\nimport getpass\nprint(getpass.getuser())\n\n\n", "idx": 7619, "target": 0}
{"func": "#15.Python program to display all the prime numbers within an interval\n\nlower = 900\nupper = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 7620, "target": 0}
{"func": "# write a python function to calculate age given date of birth\n\nfrom datetime import date \n\ndef calculateAge(birthDate): \n    today = date.today() \n    age = today.year - birthDate.year - \n         ((today.month, today.day) < \n         (birthDate.month, birthDate.day)) \n  \n    return age\n\n", "idx": 7621, "target": 0}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 7622, "target": 0}
{"func": "# write a Python program to get the Cumulative sum of a list\n\nlist1=[10,20,30,40,50]\nnew_list=[] \nj=0\nfor i in range(0,len(list1)):\n    j+=list1[i]\n    new_list.append(j) \n    \nprint(new_list) \n\n", "idx": 7623, "target": 0}
{"func": "# define functions  \ndef add(x, y):  \n   \"\"\"This function adds two numbers\"\"\"\n   return x + y \ndef subtract(x, y): \n   \"\"\"This function subtracts two numbers\"\"\" \n   return x - y \ndef multiply(x, y): \n   \"\"\"This function multiplies two numbers\"\"\" \n   return x * y \ndef divide(x, y): \n   \"\"\"This function divides two numbers\"\"\"  \n   return x / y  \n", "idx": 7624, "target": 0}
{"func": "# write a program to print sum of all even numbers in a list\n\nls = [1,2,3,4,5,6,7,8,10,22]\nsum = 0\nfor i in ls:\n    if i % 2 == 0:\n        sum += i\nprint(sum)\n\n", "idx": 7625, "target": 0}
{"func": "# write a funtion that accepts two lists of equal length and converts them into a dictioinary\ndef list_to_dict(list1, list2):\n  return dict(zip(list1, list2))\n\n", "idx": 7626, "target": 0}
{"func": "#87 clone of orginal list with two functionality i. iterating and sequence\nclass CustomListIter:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = [1,2,3,4]\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n\n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n    def __iter__(self):\n        return self.CustomListIterator(self)\n\n    class CustomListIterator:\n        def __init__(self, other):\n            self.count = 0\n            self.other = other\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.count < len(self.other.list_):\n                self.count += 1\n                return self.other.list_[self.count]\n            else:\n                raise StopIteration\n\n\n", "idx": 7627, "target": 0}
{"func": "# Write a python function to find gcd using eucliean algorithm\n\ndef gcd(a, b):  \n    if a == 0 : \n        return b  \n      \n    return gcd(b%a, a)\n\t\n\n", "idx": 7628, "target": 0}
{"func": "# write a function to rotate string right by a given length  \n\ndef rotate_right(input,d):  \n  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 7629, "target": 0}
{"func": "# write a function to convert list to tuple\ndef list2tuple(l):\n    return tuple(l)\n\n", "idx": 7630, "target": 0}
{"func": "##  Write a python class to welcome \n\nclass Welcome(object):\n\n    # Constructor\n    def __init__(self, name):\n        self.name = name  # Create an instance variable\n\n    # Instance method\n    def welcome(self, up=False):\n        if up:\n            print('Hi, %s!' % self.name.upper())\n        else:\n            print('Hey, %s' % self.name)\n\nw = Welcome('Geeta')           \nw.welcome(up=True)\n\n", "idx": 7631, "target": 0}
{"func": "# Write a python program to Count occurrences of given element in a list\t\ndef countX(lst, x): \n    return lst.count(x)\n\t\n\t\n\t\n", "idx": 7632, "target": 0}
{"func": "# Write a function to repeat M characters of a string N times\n\ndef multTimes(str, m, n):\n    front_len = m\n    if front_len > len(str):\n        front_len = len(str)\n    front = str[:front_len]\n    result = ''\n    for i in range(n):\n        result = result + front\n    return result\nprint (multTimes('Hello', 3, 7))\n\n\n", "idx": 7633, "target": 0}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    pi=3.14\n    return pi*(radius**2)*height\n\n", "idx": 7634, "target": 0}
{"func": "# Output : { 'a':1, 'b':2, 'c':3 }\ndef list_to_dict(l: list):\n    final_dict = {}\n    for i in l:\n        final_dict[i[0]] = i[1]\n    return final_dict\n\n\n", "idx": 7635, "target": 0}
{"func": "# Write a Python Program to print the LCM of Two Numbers\n\ndef lcm(a,b):\n    lcm.multiple=lcm.multiple+b\n    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):\n        return lcm.multiple\n    else:\n        lcm(a, b)\n    return lcm.multiple\nlcm.multiple=0\na=4\nb=7\nif(a>b):\n    LCM=lcm(b,a)\nelse:\n    LCM=lcm(a,b)\n\nprint(LCM)\n\n", "idx": 7636, "target": 0}
{"func": "#60 write a program to Test for Even values dictionary values lists and print it\n\ntest_dict = {\"Gfg\" : [6, 7, 3],  \n             \"is\" :  [8, 10, 12, 16],  \n             \"Best\" : [10, 16, 14, 6]} \n  \n  \nres = dict() \nfor sub in test_dict: \n    flag = 1\n      \n    # checking for even elements \n    for ele in test_dict[sub]: \n        if ele % 2 != 0: \n            flag = 0\n            break\n    # adding True if all Even elements \n    res[sub] = True if flag else False\n  \n", "idx": 7637, "target": 0}
{"func": "# Write a Python program to create a TimeSeries starting \u20182000-01-01\u2019 and 10 weekends (saturdays) after that having random numbers as values\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.random.randint(1,10,10), pd.date_range('2000-01-01', periods=10, freq='W-SAT'))\nprint(ser)\n\n\n", "idx": 7638, "target": 0}
{"func": "# write a python function that takes input radius and return area of circle\ndef findArea(r): \n    PI = 3.142\n    return PI * (r*r);\n\n", "idx": 7639, "target": 0}
{"func": "# Write a program to find the median among three given number\nx=10\ny=20\nz=30\nif y < x and x < z:\n    print(x)\nelif z < x and x < y:\n    print(x)\nelif z < y and y < x:\n    print(y)\nelif x < y and y < z:\n    print(y)\nelif y < z and z < x:\n    print(z)    \nelif x < z and z < y:\n    print(z)\n\n", "idx": 7640, "target": 0}
{"func": "# Write a python function to check if user provided year is a leap year or not\n\ndef is_leap(year):\n  if (year % 4) == 0:\n    if (year % 100) == 0:\n        if (year % 400) == 0:\n            print(f\"{year} is a leap year\")\n        else:\n            print(f\"{year} is not a leap year\")\n    else:\n        print(f\"{year} is a leap year\")\n  else:\n    print(f\"{year} is not a leap year\")\n\n", "idx": 7641, "target": 0}
{"func": "# Write a Python function to Print an Identity Matrix\n\ndef print_identity_matrix(n):\n    for i in range(0,n):\n        for j in range(0,n):\n            if(i==j):\n                print(\"1\",sep=\" \",end=\" \")\n            else:\n                print(\"0\",sep=\" \",end=\" \")\n        print()\n\n", "idx": 7642, "target": 0}
{"func": "# Please write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects=[\"I\", \"You\"]\nverbs=[\"Play\", \"Love\"]\nobjects=[\"Hockey\",\"Football\"]\nfor i in range(len(subjects)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print(sentence)\n\n", "idx": 7643, "target": 0}
{"func": "# (2n \u2212 1)**2 - 2, with n \u2265 1. \ndef carol_number(n):\n    if n >= 0:\n        return (2**n - 1)**2 - 2\n  \n\n", "idx": 7644, "target": 0}
{"func": "# write a python function that returns a dictionary with the area and perimeter of a rectangle\ndef calculate_rect_properties(width, height):\n   return {\n      'perimeter': 2 * (width + height),\n      'area': width * height\n   }\n\n\n", "idx": 7645, "target": 0}
{"func": "# 49 Write a generator that returns True / False randomly\n\nimport random\n\n\ndef generate_tf():\n    rand = random.random()\n    if rand > 0.5:\n        yield True\n    else:\n        yield False\n\n\n", "idx": 7646, "target": 0}
{"func": "# write a python function that takes two parameters, first parameter is a list of dictionary and second is a list of tuples. Append the list of tuples to the list of dictionary\ndef addentry (listname, addlist):\n    for names,ages in addlist:\n            listname.append(addlist)\n    return listname\n    \naddentry([{'1':\"A\"}], [(\"2\", \"B\")])\n\n\n", "idx": 7647, "target": 0}
{"func": "# write a Python Program to Replace all Occurrences of \u2018a\u2019 with $ in a String\ndef replacestring(txt):\n\treturn txt.replace('A','$')\n\t\n\n\t\n", "idx": 7648, "target": 0}
{"func": "# Write a python program to Implement Binary Search with Recursion and print the key element if found\n\ndef binary_search_rec(alist, start, end, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if not start < end:\n        return -1\n \n    mid = (start + end)//2\n    if alist[mid] < key:\n        return binary_search_rec(alist, mid + 1, end, key)\n    elif alist[mid] > key:\n        return binary_search_rec(alist, start, mid, key)\n    else:\n        return mid\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search_rec(alist, 0, len(alist), key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 7649, "target": 0}
{"func": "# Write a Python Program to print all the Divisors of an Integer\n\nn=60\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(i)\n\n\n", "idx": 7650, "target": 0}
{"func": "# check if the number of terms is valid  \nif nterms <= 0:  \n   print(\"Plese enter a positive integer\")  \nelif nterms == 1:  \n   print(\"Fibonacci sequence:\")  \n   print(n1)  \nelse:  \n   print(\"Fibonacci sequence:\")  \n   print(n1,\",\",n2,end=', ')  \n   while count < nterms:  \n       nth = n1 + n2  \n       print(nth,end=' , ')  \n       # update values  \n       n1 = n2  \n       n2 = nth  \n       count += 1  \n       \n", "idx": 7651, "target": 0}
{"func": "#31 function to return speed converer as per user mention data\ndef speed_converter(speed , dist = 'KM', time = 'HR'):\n    if speed < 0 or type(dist) == str or type(time) == str:\n        raise ValueError(\"Invalid Input Format\")\n    else:\n        if dist.upper == 'KM':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'M':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'FT':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        elif dist.upper == 'YRD':\n            if time.upper()  == 'S':\n                return True\n            elif time.upper == 'MS':\n                return True\n            elif time.upper() == 'M':\n                return True\n            elif time.upper() == 'HR':\n                return True\n            elif time.upper() == 'DAY':\n                return True\n            else:\n                raise ValueError(\"Valid Distance Invalid Time\")\n        else:\n            raise ValueError(\"Invalid User Distance Input\")\n\n\n", "idx": 7652, "target": 0}
{"func": "# Write a function to return the perimeter of a square\ndef cal_perimeter_square(side):\n    return 4*side\n\n", "idx": 7653, "target": 0}
{"func": "#21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate\ndef is_camel_case(s):\n    return s != s.lower() and s != s.upper() and \"_\" not in s\n\n", "idx": 7654, "target": 0}
{"func": "# 51. python function for finding softmax output of a vector\n\ndef softmax(x):\n\n  \"\"\"returns the softmax output of a vector\"\"\"\n\n  if(type(x) == int or type(x) == float):\n\n    return 1\n\n  denom = 0\n\n  for i in x:\n\n    denom+=math.exp(i)\n\n  new_vec = []\n\n  for i in x:\n\n    new_vec.append(math.exp(i)/denom)\n\n  return new_vec\n  \n", "idx": 7655, "target": 0}
{"func": "# Write a python function to add 2 iterables a and b such that a is even and b is odd\n\nn=10\na = []\nb = []\n_ = [a.append(i) if i%2==0 else b.append(i) for i in range(n)]\n\ndef add(a,b):\n    return [a+b for a,b in (zip(a,b))]\n\nadd(a,b)\n\n", "idx": 7656, "target": 0}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nwhile (number > 0):\n  remainder = number % 10\n  revs_number = (revs_number * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 7657, "target": 0}
{"func": "# Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10] and print it\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, li))\nprint(evenNumbers)\n\n", "idx": 7658, "target": 0}
{"func": "#8 write a function to remove empty list from a list and print.\ndef remove_empty_list(num1: list):\n    if isinstance(num1, list):\n        modified = list(filter(None, num1))\n        print(modified)\n\n\n", "idx": 7659, "target": 0}
{"func": "#41 how to sort a list in python using lambda\ndata = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]\n\ndata.sort(key=lambda x:x[0])\n\n", "idx": 7660, "target": 0}
{"func": "# Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. \nclass Rectangle(object):\n    def __init__(self, l, w):\n        self.length = l\n        self.width  = w\n\n    def area(self):\n        return self.length*self.width\n\n", "idx": 7661, "target": 0}
{"func": "# Generate a random date between given start and end dates\nimport random\nimport time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, time.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 7662, "target": 0}
{"func": "# write a program to find ceil of a number\nimport math\n\nnumber = 34.564\nce = math.ceil(number)\nprint('Ceil', ce)\n\n\n", "idx": 7663, "target": 0}
{"func": "#27 write a program to check if a string is binary or not \ndef check(string) : \n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        print(\"Yes\") \n    else : \n        print(\"No\") \n          \n", "idx": 7664, "target": 0}
{"func": "# write Python program to demonstrate check if list are identical \n\ntest_list1 = [1, 2, 4, 3, 5] \ntest_list2 = [1, 2, 4, 3, 5] \n\nprint (\"The first list is : \" + str(test_list1)) \nprint (\"The second list is : \" + str(test_list2)) \n\ntest_list1.sort() \ntest_list2.sort() \n\nif test_list1 == test_list2: \n    print (\"The lists are identical\") \nelse : \n    print (\"The lists are not identical\") \n\n\n\n", "idx": 7665, "target": 0}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str1)\n\n", "idx": 7666, "target": 0}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nfor item in sampleList:\n  if(item in countDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 7667, "target": 0}
{"func": "# write a program to count characters surrounding vowels\n\nstr1 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str1) - 1): \n\n    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): \n        res += 1\n  \nif str1[0] not in vow_list and str1[1] in vow_list: \n    res += 1\n  \nif str1[-1] not in vow_list and str1[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 7668, "target": 0}
{"func": "# Check if the key exists or not in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nif \"percentage\" in student:\n    print(\"Key exist in JSON data\")\n    print(student[\"name\"], \"marks is: \", student[\"percentage\"])\nelse:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 7669, "target": 0}
{"func": "# Write a Python function to to find the sum of all digits of a given integer\ndef sum_of_digits(num):\n  if num == 0:\n    return 0\n  else:\n    return num % 10 + sum_of_digits(int(num / 10))\n\n\n", "idx": 7670, "target": 0}
{"func": "# write a python program to print if year is a leap year or not\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n      if (year % 400) == 0:\n         print(\"{0} is a leap year\".format(year))\n      else:\n         print(\"{0} is not a leap year\".format(year))\n   else:\n      print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 7671, "target": 0}
{"func": "# write a python program for implementation of selection sort of list\nA = [64, 25, 12, 22, 11] \n\nfor i in range(len(A)): \n    \n    min_idx = i \n    for j in range(i+1, len(A)): \n        if A[min_idx] > A[j]: \n            min_idx = j \n     \n    A[i], A[min_idx] = A[min_idx], A[i] \n\nprint (f\"Sorted array {A}\") \n\n\n", "idx": 7672, "target": 0}
{"func": "# Please write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint(li)\n\n", "idx": 7673, "target": 0}
{"func": "# Write a python function to generate unique file names in a folder for a given list of file names\n\nfrom collections import Counter\n\ndef getFolderNames(names):\n    seen, res = Counter(), []\n    for name in names:\n        if name in seen:\n            while True:\n                c = f'({seen[name]})'\n                if name + c not in seen:\n                    name += c\n                    break\n                else:\n                    seen[name] += 1\n        seen[name] += 1\n        res.append(name)\n    return res\n\t\n\n", "idx": 7674, "target": 0}
{"func": "#27 write a function to generate and print a random number between 0 and 22\nimport random\nn = random.randint(0,22)\nprint(n)\n\n", "idx": 7675, "target": 0}
{"func": "#57 function to any implementation\ndef any_imp(a):\n   return any(a)\n\n\n", "idx": 7676, "target": 0}
{"func": "# wrie a python  Program to Flatten a List without using Recursion\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]\nprint(flatten(a))\n\n", "idx": 7677, "target": 0}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 7678, "target": 0}
{"func": "#29 print current day in python \nfrom datetime import date\ntoday = date.today()\nprint(\"Today's date:\", today)\n\n", "idx": 7679, "target": 0}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list1[i]*list2[i] for i in range(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 7680, "target": 0}
{"func": "# Write a function that returns a dictionary sorted descending by its values\ndef descending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[1])}\n\n", "idx": 7681, "target": 0}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 7682, "target": 0}
{"func": "# write a python function to swap first and last element of a list \n\ndef swapList(newList): \n    \n    newList[0], newList[-1] = newList[-1], newList[0] \n\n    return newList \n\nnewList = [12, 35, 9, 56, 24] \nprint(swapList(newList)) \n\n\n\n", "idx": 7683, "target": 0}
{"func": "# 22. python program to find if given co-ordinates are inside circle\nfrom random import uniform\nfrom math import sqrt\ndef random_shot(rad):\n    r_x = uniform(-rad, rad)\n    r_y = uniform(-rad, rad)\n\n    if sqrt(r_x**2 + r_y**2) <= rad:\n        is_in_circle = True\n    else:\n        is_in_circle = False\n    \n    return r_x, r_y, is_in_circle\n\n", "idx": 7684, "target": 0}
{"func": "# write Python3 code to demonstrate conversion of list of tuple to list of list using list comprehension + join() \n\ntest_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'), \n                            ('G', 'E', 'E', 'K', 'S')] \nprint (\"The original list is : \" + str(test_list)) \nres = [''.join(i) for i in test_list] \nprint (\"The list after conversion to list of string : \" + str(res)) \n\n\n", "idx": 7685, "target": 0}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str1 = str1.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str1)\n\n", "idx": 7686, "target": 0}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/pressure\n\n", "idx": 7687, "target": 0}
{"func": "# Write a python function to sum variable number of arguments\ndef sum_all(*args):\ntotal = 0\nfor num in args:\ntotal += num\nreturn total\n\n", "idx": 7688, "target": 0}
{"func": "# Write a function to calculate median of a list of numbers given\n\ndef median(pool):\n    copy = sorted(pool)\n    size = len(copy)\n    if size % 2 == 1:\n        return copy[int((size - 1) / 2)]\n    else:\n        return (copy[int(size/2 - 1)] + copy[int(size/2)]) / 2\n\t\t\n\n", "idx": 7689, "target": 0}
{"func": "# write a python function to sort each item in a data structure on one of the keys\ndef sort_list_with_key():\n    animals = [\n        {'type': 'lion', 'name': 'Mr. T', 'age': 7},\n        {'type': 'tiger', 'name': 'scarface', 'age': 3},\n        {'type': 'puma', 'name': 'Joe', 'age': 4}]\n    print(sorted(animals, key=lambda animal: -animal['age']))\n\n\n", "idx": 7690, "target": 0}
{"func": "# Write a python program to Read and print the Contents of a File\n\na=str(input(\"Enter file name .txt extension:\"))\nfile2=open(a,'r')\nline=file2.readline()\nwhile(line!=\"\"):\n    print(line)\n    line=file2.readline()\nfile2.close()\n\n", "idx": 7691, "target": 0}
{"func": "# Write a Python Program to Transpose a Matrix  and print result. \nX = [[1,2],  \n      [4,5],  \n     [7,8]]  \n  \nResult = [[0,0,0],  \n             [0,0,0]]  \n   \nfor i in range(len(X)):  \n   for j in range(len(X[0])):  \n       result[j][i] = X[i][j]  \n  \nfor r in result:  \n   print(r)\n   \n   \n   \n   \n", "idx": 7692, "target": 0}
{"func": "# Write a function that splits the elements of string\ndef split_elements(s:str, seperator)-> list:\n    return s.split(seperator)\n\n", "idx": 7693, "target": 0}
{"func": "# Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10\n\nl=6\nu=9\na=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]\nprint(a)\n\n", "idx": 7694, "target": 0}
{"func": "# 22 write a function that counts the sum of every element in the odd place in a list\n\nfrom functools import reduce\n\n\ndef count_second(lst):\n    return reduce(lambda x, y: x + y, lst[::2])\n\n\n", "idx": 7695, "target": 0}
{"func": "# Write a program to take a string and print all the words and their frequencies\nstring_words = '''This assignment is of 900 marks. Each example if 9 marks.\nIf your example is similar to someone else, then you score less.\nThe formula we will use is 9/(repeated example). That means if 9 people write same example,\nthen you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''\nword_list = string_words.split()\nword_freq = [word_list.count(n) for n in word_list]\nprint(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))\n\n\n", "idx": 7696, "target": 0}
{"func": "# Pick a random character from a given String\nimport random\n\nname = 'pynative'\nchar = random.choice(name)\nprint(\"random char is \", char)\n\n", "idx": 7697, "target": 0}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary and print the result\nd={'A':10,'B':10,'C':239}\ntot=1\nfor i in d:    \n    tot=tot*d[i]\nprint(tot)\n\n\n\n\n", "idx": 7698, "target": 0}
{"func": "# Write a python function which wil return True if list parenthesis used in a input expression is valid, False otherwise\n\ndef isValid(s):\n    stack = []\n    mapping = {')': '(', '}' : '{', ']':'['}\n    for char in s:\n        if char in mapping:                \n            if not stack:\n                return False\n            top = stack.pop()\n            if mapping[char] != top:\n                return False\n        else:\n            stack.append(char)     \n\n    return not stack\n\t\n\t\n\t\n", "idx": 7699, "target": 0}
{"func": "# Python Program to Display the multiplication Table\nnum = 12\nfor i in range(1, 11):\n   print(num, 'x', i, '=', num*i)\n\n", "idx": 7700, "target": 0}
{"func": "# Write a Python function that accepts a measurement value in inches and returns the equivalent in feet\ndef inches_to_feet(inches):\n    if inches < 12:\n        return 0\n    return inches/12\n\n", "idx": 7701, "target": 0}
{"func": "# write a python function shifts and scales all numbers in the given list by the given mean and standard deviation\ndef shift_and_scale(list_of_nums, mean, std):\n    return [ (x-mean) / std for x in list_of_nums ]\n\n\n", "idx": 7702, "target": 0}
{"func": "# Write a python function to implement tower of hanoi\n\ndef hanoi(disks, source, auxiliary, target):\n    if disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n \n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiliary, source, target)\n\n\n", "idx": 7703, "target": 0}
{"func": "# Write a Python function to Find the Total Sum of a Nested List Using Recursion\n\ndef sum1(lst):\n    total = 0\n    for element in lst:\n        if (type(element) == type([])):\n            total = total + sum1(element)\n        else:\n            total = total + element\n    return total\n\n", "idx": 7704, "target": 0}
{"func": "# Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.\ndef max_len_str(s1,s2):\n    len1 = len(s1)\n    len2 = len(s2)\n    if len1>len2:\n        print(s1)\n    elif len2>len1:\n        print(s2)\n    else:\n        print(s1)\n        print(s2)\n\n", "idx": 7705, "target": 0}
{"func": "# Write a python program to Read and print the Contents of a File\n\na=str(input(\"Enter file name .txt extension:\"))\nfile2=open(a,'r')\nline=file2.readline()\nwhile(line!=\"\"):\n    print(line)\n    line=file2.readline()\nfile2.close()\n\n", "idx": 7706, "target": 0}
{"func": "# write a python function to concatenate two integers like string concatenation and return concatenated number as integer\ndef concat_two_numbers(num1, num2):\n    combined_num = str(num1) + str(num2)\n    return int(combined_num)\n\n\n", "idx": 7707, "target": 0}
{"func": "# Write a function that joins elements of list\ndef join_elements(l:list)-> str:\n    return (''.join(str(l)))\n\n", "idx": 7708, "target": 0}
{"func": "# Write a Python function to Count Set Bits in a Number\n\ndef count_set_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n", "idx": 7709, "target": 0}
{"func": "# By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) if i not in (0,4,5)]\nprint li\n\n", "idx": 7710, "target": 0}
{"func": "#52 write a python program to normalize a list of numbers and print the result\na = [2,4,10,6,8,4]\namin, amax = min(a), max(a)\nfor i, val in enumerate(a):\n    a[i] = (val-amin) / (amax-amin)\nprint(a)\n\n", "idx": 7711, "target": 0}
{"func": "# write a python program to create round robin algorithm: \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\ndef roundrobin(*iterables):    \n    from itertools import islice, cycle\n    # Recipe credited to George Sakkis\n    num_active = len(iterables)\n    nexts = cycle(iter(it).__next__ for it in iterables)\n    while num_active:\n        try:\n            for next in nexts:\n                yield next()\n        except StopIteration:\n            # Remove the iterator we just exhausted from the cycle.\n            num_active -= 1\n            nexts = cycle(islice(nexts, num_active))\n\n", "idx": 7712, "target": 0}
{"func": "# write a python function to generate wordcloud on given text or file\nimport os\n\n\ndef get_word(data):\n    if not (isinstance(data, str) or os.path.isfile(data)):\n        raise TypeError(\"Text must be string or a File object.\")\n    from wordcloud import WordCloud, STOPWORDS\n    import matplotlib.pyplot as plt\n    stopwords = set(STOPWORDS)\n    if os.path.isfile(data):\n        with open(data, 'r') as f:\n            data = f.read()\n\n    data = ' '.join(data.lower().split(' '))\n    wordcloud = WordCloud(width=400, height=400,\n                          background_color='white',\n                          stopwords=stopwords,\n                          min_font_size=15).generate(data)\n\n    # plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n\n    plt.show()\n\n\n", "idx": 7713, "target": 0}
{"func": "# write a python code to implement Sigmoid function\nimport math\ndef sigmoid(x):\n  return 1 / (1 + math.exp(-x))\n\n", "idx": 7714, "target": 0}
{"func": "# write a python function that removes all the vowels from the given list of strings and return the list\ndef myfunc(listitems):\n    final=[]\n    for strchar in listitems:\n        for letters in strchar:\n            if letters in ('a','e','i','o','u', 'A','E','I','O','U'):\n                strchar = strchar.replace(letters,\"\")            \n        final.append(strchar) \n    return final\n    \nmyfunc([\"rohan\", \"END\"])\n\n\n", "idx": 7715, "target": 0}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_even_elements(l:list):\n    return sum([i for i in l if i%2==0])\n\n", "idx": 7716, "target": 0}
{"func": "# Write a lambda function to add two numbers\n\nadd = lambda a, b: a+b\n\n", "idx": 7717, "target": 0}
{"func": "# write a python function to return the nth fibonacci number\ndef fib(n):\n   if n <= 1:\n      return n\n   else:\n      return (fib(n-1) + fib(n-2))\n\n\n", "idx": 7718, "target": 0}
{"func": "# write a function to replace vowels with a specific character K\n\ndef replacewith_K(test_str, K): \n\n    vowels = 'AEIOUaeiou'\n    for ele in vowels: \n        test_str = test_str.replace(ele, K) \n  \n    return test_str\n\n", "idx": 7719, "target": 0}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nK = 'Best'\nres = [sub[K] for sub in test_list if K in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 7720, "target": 0}
{"func": "# Write a function to determine longest increasing subsequence of a list of numbers given\n\ndef longest_increaing_subsequence(myList):\n\n    lis = [1] * len(myList)\n\n    elements = [0] * len(myList)\n\n    for i in range (1 , len(myList)):\n        for j in range(0 , i):\n            if myList[i] > myList[j] and lis[i]< lis[j] + 1:\n                lis[i] = lis[j]+1\n                elements[i] = j\n    idx = 0\n\n\n    maximum = max(lis)              \n    idx = lis.index(maximum)\n\n\n    seq = [myList[idx]]\n    while idx != elements[idx]:\n        idx = elements[idx]\n        seq.append(myList[idx])\n\n    return (maximum, reversed(seq))\n\t\n\n", "idx": 7721, "target": 0}
{"func": "# write a Python function to return the volume of the rectangular right wedge \ndef volumeRec(a, b, e, h) : \n    return (((b * h) / 6) * (2 * a + e))\n\na = 2; b = 5; e = 5; h = 6; \nprint(\"Volume = \",volumeRec(a, b, e, h))\n\n", "idx": 7722, "target": 0}
{"func": "# Write a function to calculate Volume of Pentagonal Pyramid  \ndef volumePentagonal(a, b, h): \n    return (0.83) * a * b * h \n  \n", "idx": 7723, "target": 0}
{"func": "# Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\nimport re\ns = raw_input()\nprint re.findall(\"\\d+\",s)\n\n", "idx": 7724, "target": 0}
{"func": "#40 function to print the ascii value of letter\ndef show_ascii():\n    import string\n    letter = string.ascii_letters\n    for i in letter:\n        print(i+\":\"+str(ord(i)))\n\n\n", "idx": 7725, "target": 0}
{"func": "# Write a Python function to check if all items in the following tuple are the same\ndef check_tuple_same(sampleTuple):\n    return all(i == sampleTuple[0] for i in sampleTuple)\n\n\n", "idx": 7726, "target": 0}
{"func": "#53  write a python program to permutations of a given string in python and print the result\nfrom itertools import permutations \nimport string \ns = \"GEEK\"\na = string.ascii_letters \np = permutations(s) \n\nd = [] \nfor i in list(p): \n    if (i not in d): \n        d.append(i) \n        print(''.join(i)) \n\n", "idx": 7727, "target": 0}
{"func": "# write a python program to print if year is a leap year or not\nyear = 2000\nif (year % 4) == 0:\n   if (year % 100) == 0:\n      if (year % 400) == 0:\n         print(\"{0} is a leap year\".format(year))\n      else:\n         print(\"{0} is not a leap year\".format(year))\n   else:\n      print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 7728, "target": 0}
{"func": "# write a python program to do selection sort\n\nA = [64, 25, 12, 22, 11] \n\nfor i in range(len(A)): \n\n    min_idx = i \n    for j in range(i+1, len(A)): \n        if A[min_idx] > A[j]: \n            min_idx = j \n      \n    A[i], A[min_idx] = A[min_idx], A[i] \n\nprint (\"Sorted array\") \nfor i in range(len(A)): \n    print(\"%d\" %A[i])\n    \n", "idx": 7729, "target": 0}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\ndef make_all_positive(nums):\nreturn [num if num > 0 else -num for num in nums]\n\n\n", "idx": 7730, "target": 0}
{"func": "# write a python function that takes two path strings and return the combined path string\nimport os\n\ndef path_join(PARENT_DIR, DIR):\n    joined_path = os.path.join(PARENT_DIR, DIR)\n    return joined_path\npath_join(\"C:/\", \"DATA\")\n\n\n", "idx": 7731, "target": 0}
{"func": "# Write a function to multiplies two lists element wise only if numbers are odd\ndef adds_listoddelements(l1:list, l2:list):\n    return [i*j for i, j in zip(l1,l2) if i*j%2 == 1]\n\n", "idx": 7732, "target": 0}
{"func": "# Write a function to return the perimeter of a triangle\ndef cal_perimeter_triangle(s1,s2,s3):\n    return s1+s2+s3\n\n", "idx": 7733, "target": 0}
{"func": "#76 Write a Python function to converting an integer to a string in any base.\ndef to_string(n,base):\n   conver_tString = \"0123456789ABCDEF\"\n   if n < base:\n      return conver_tString[n]\n   else:\n      return to_string(n//base,base) + conver_tString[n % base\n\n", "idx": 7734, "target": 0}
{"func": "# write a python program that prints the sum of natural numbers up to a given number\nnum = 16\nsum = 0\nwhile (num > 0):\n   sum += num\n   num -= 1\nprint(f'The sum is {sum}')\n\n\n", "idx": 7735, "target": 0}
{"func": "# Write a python program to implement bubble sort and print the result\nfrom random import randint\n\nN = 7\na = []\n\nfor i in range(N):\n    a.append(randint(1, 20))\nprint(a)\n\nfor i in range(N-1):\n    for j in range(N-i-1):\n        if a[j] > a[j+1]:\n            b = a[j]\n            a[j] = a[j+1]\n            a[j+1] = b\n\nprint(a)\n\n", "idx": 7736, "target": 0}
{"func": "# Write a function that returns derivative of sine value of the input\ndef derivative_sin(x:float)-> float:\n    import math\n    return math.cos(x)\n\n", "idx": 7737, "target": 0}
{"func": "# Write a Python function that Given a string and an integer number n, remove characters from a string starting from zero up to n and return a new string\ndef removeChars(str, n):\n  return str[n:]\n\n\n", "idx": 7738, "target": 0}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 7739, "target": 0}
{"func": "# Write a Python function to count occurrence of a word in the given text\ndef text_searcher(text, word):\n    count = 0\n    for w in text.split():\n        if w == word:\n            count = count + 1\n    return count\n\n\n", "idx": 7740, "target": 0}
{"func": "#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.\nfrom itertools import product\ndef all_repeat(str1, rno):\n  chars = list(str1)\n  results = []\n  for c in product(chars, repeat = rno):\n    results.append(c)\n  return results\nprint(all_repeat('xyz', 3))\n\n", "idx": 7741, "target": 0}
{"func": "# Write a python program to find whether a given number is perfect or not and print the result in boolean format(True or False)\nx = int(input(\"Enter any no. \")) \n\ndef perfect_number(n): \n    sum = 0 \n    for x in range(1, n): \n        if n % x == 0: \n            sum += x \n    return sum == n\n\nprint(perfect_number(x))\n\n", "idx": 7742, "target": 0}
{"func": "# write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\nimport random\nprint random.choice([i for i in range(11) if i%2==0])\n\n", "idx": 7743, "target": 0}
{"func": "# Write python function to convert a given string to either lower, upper and capitalize\n\ndef string_opertaion(st,conversion):\n  if(conversion=='lower'):\n    return(st.lower())\n  elif(conversion=='upper'):\n    return(st.upper())\n  else:\n    return(st.capitalize())\n\nstring_opertaion('AwesOME',None)\n\n", "idx": 7744, "target": 0}
{"func": "# Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \ns= raw_input()\nif s==\"yes\" or s==\"YES\" or s==\"Yes\":\n    print \"Yes\"\nelse:\n    print \"No\"\n\n", "idx": 7745, "target": 0}
{"func": "# Python Program to find sum of nested list using Recursion\ntotal = 0\ndef sum_nestedlist(l):\n    global total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(total)\n\n", "idx": 7746, "target": 0}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\n   punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   used_punctuation = set()\n   for char in sentence:\n      if char in punctuations:\n         used_punctuation.add(char)\n   return used_punctuation\n\n\n", "idx": 7747, "target": 0}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,d):\n    k = 9*(10**9)\n    return (k*q1*q2)/(d**2)\n\n", "idx": 7748, "target": 0}
{"func": "# Python program to compute the greatest common divisor (GCD) of two positive integers.\n\ndef gcd(x, y):\n    gcd1 = 1\n\n    if x % y == 0:\n        return y\n\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd1 = k\n            break\n    return gcd1\n\n\nprint(gcd(12, 17))\nprint(gcd(4, 6))\n\n\n", "idx": 7749, "target": 0}
{"func": "# Writing JSON to a file\nimport json\nperson_dict = {\"name\": \"Bob\",\n\"languages\": [\"English\", \"Fench\"],\n\"married\": True,\n\"age\": 32\n}\nwith open('person.txt', 'w') as json_file:\n  json.dump(person_dict, json_file)\n\n", "idx": 7750, "target": 0}
{"func": "#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n                \n", "idx": 7751, "target": 0}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nwhile (number > 0):\n  remainder = number % 10\n  revs_number = (revs_number * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 7752, "target": 0}
{"func": "# write a python function to make permutations from a list with given length\ndef get_permutations(data_list, l=2):\n    return list(permutations(data_list, r=l))\n\n\n", "idx": 7753, "target": 0}
{"func": "# Remove empty strings from the list of strings\nlist1 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for i in (filter(None, list1))]\nprint(resList)\n\n", "idx": 7754, "target": 0}
{"func": "#71 class to show implementation of equality and less than implementation in an class\nclass GqLt:\n    def __init__(self, msg=\"Demo of lt and eq in class\"):\n        self.msg = msg\n\n    def __eq__(self, other):\n        \"\"\"\n        Equality check between two object of same class.\n        It is mandatory to implement __eq__ in class to do equality check.\n        \"\"\"\n        if isinstance(other, GqLt):\n            return \"Code to be written here to match equality check between two object of same class\"\n        else:\n            raise ValueError('Invalid comparison')\n\n    def __lt__(self, other):\n        \"\"\"\n        Less than or greater than check between two objects of same class.\n        It is mandatory to implement __eq__ in class to do equality check.\n        \"\"\"\n        if isinstance(other, GqLt):\n            return \"Code to be written here to match equality check between two object of same class\"\n        else:\n            raise ValueError('Invalid comparison')\n\n\n", "idx": 7755, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Perfect Number\n\ndef perfect_no_check(n):\n    sum1 = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum1 = sum1 + i\n    if (sum1 == n):\n        return True\n    else:\n        return False\n\n", "idx": 7756, "target": 0}
{"func": "#38. Python Program to Find Sum of Natural Numbers Using Recursion\ndef recur_sum(n):\n   if n <= 1:\n       return n\n   else:\n       return n + recur_sum(n-1)\n\n", "idx": 7757, "target": 0}
{"func": "# write a Python program to convert Python objects into JSON strings.\nimport json\npython_dict =  {\"name\": \"David\", \"age\": 6, \"class\":\"I\"}\njson_dict = json.dumps(python_dict, sort_keys=True, indent=4)\nprint(f\"json dict : {json_dict}\")\n\n", "idx": 7758, "target": 0}
{"func": "# Write a function that takes a base and a power and finds the power of the base using recursion.\n\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\nbase=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprint(\"Result:\",power(base,exp))\n\n\n", "idx": 7759, "target": 0}
{"func": "# Write a function that returns the exponential value of the input\ndef exp(x) -> float:\n    import math\n    return math.exp(x)\n\n", "idx": 7760, "target": 0}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(radius):\n    pi = 3.14\n    return 4*pi*(radius**2)\n\n", "idx": 7761, "target": 0}
{"func": "# write a python program to return the biggest character in a string (printable ascii characters)\nfrom functools import reduce\n\ninput_str = 'tsai'\nres = reduce(lambda x, y: x if ord(x) > ord(y) else y, input_str)\nprint(f\"{res}\")\n\n\n", "idx": 7762, "target": 0}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\ndef cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity + accelration*time\n\n", "idx": 7763, "target": 0}
{"func": "# initializing length list \ncus_lens = [5, 3, 2, 3] \n\nres = [] \nstrt = 0\nfor size in cus_lens: \n      \n    # slicing for particular length \n    res.append(test_str[strt : strt + size]) \n    strt += size \n      \n", "idx": 7764, "target": 0}
{"func": "# write a python function to count the occurrences of a value in a list.\n\ndef count_occurrences(lst, val):\n  return lst.count(val)\n\n", "idx": 7765, "target": 0}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=lambda item: item.get(sort_key))\n\n", "idx": 7766, "target": 0}
{"func": "#53 factorial using pythonish \ndef fact_one_line(n):\n    return 1 if n < 2 else n*fact_one_line(n-1)\n\n\n", "idx": 7767, "target": 0}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (pressure*volume)/n*r\n\n", "idx": 7768, "target": 0}
{"func": "# write a python program to extract the file name and extension of a file\nimport os\nfilename, extension = os.path.splitext('/path/to/some/file.ext')\n\n", "idx": 7769, "target": 0}
{"func": "# write a python function to return nth item or a default value\ndef nth(iterable, n, default=None):\n    from itertools import islice\n    return next(islice(iterable, n, None), default)\n\n", "idx": 7770, "target": 0}
{"func": "# Write a function to find the permieter of a rectangle\ndef rectangle_perimeter(l, b):\n    return 2*(l+b)\n\n", "idx": 7771, "target": 0}
{"func": "# write a python program to count the number of each vowels\nip_str = 'Hello, have you tried our tutorial section yet?'\nip_str = ip_str.casefold()\ncount = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}\nprint(count)\n        \n", "idx": 7772, "target": 0}
{"func": "# Write a Python function that shifts the character of strings\n\ndef char_shift(string, shift_count):\n    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''\n    return \"\".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])\n\n", "idx": 7773, "target": 0}
{"func": "# write a function to calculate factorial of number\n\ndef factorial(num):\n    if num == 0:\n        return 1\n    return num * factorial(num - 1)\n\n", "idx": 7774, "target": 0}
{"func": "# Write a function that returns tan value of the input\ndef tan(x:float) -> float:\n    import math\n    return math.tan(x)\n\n", "idx": 7775, "target": 0}
{"func": "#write a python program to implement try catch code\n\ntry:\n    s={5,6}\n    s*3\nexcept Exception as e:\n    print(e)\n\n\n", "idx": 7776, "target": 0}
{"func": "#100 Write a Python class to convert an integer to a roman numeral.\nclass Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n", "idx": 7777, "target": 0}
{"func": "#17 split list into lists of equal length python\n[lst[i:i + n] for i in range(0, len(lst), n)]\n\n", "idx": 7778, "target": 0}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\ndef finder(first_array, second_array):\n    return(sum(first_array) - sum(second_array))\n\nmissing_number = finder(first_array, second_array)\n\nprint(missing_number)\n\n", "idx": 7779, "target": 0}
{"func": "# write a python function to get the absolute value of a number\ndef get_absolute_value(i):\n    return(abs(i))\n\n", "idx": 7780, "target": 0}
{"func": "# Write a program to add an integer and [revious non negative integer\nSolution:\ndef f(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return f(n-1)+f(n-2)\n\n", "idx": 7781, "target": 0}
{"func": "# Define a class which has at least two methods:\nclass InputOutString(object):\n    def __init__(self_):\n        self_.s = \"\"\n\n    def getString(self_):\n        self_.s = input()\n    \n    def printString(self_):\n        print(self_.s.upper())\n\nstrObj = InputOutString()\nstrObj.getString()\nstrObj.printString()\n\n", "idx": 7782, "target": 0}
{"func": "# Write a Python Program to print Those Numbers which are Divisible by 7 and Multiple of 5 in a Given Range of Numbers\t\t\nlower = 1\nlower = 100\nfor i in range (lower,lower+1):\n    if(i%7==0 and i%5==0):\n        print(i)\n\t\t\n\t\t\n\t\t\n", "idx": 7783, "target": 0}
{"func": "# write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    top = 0\n    top = len(li)-1\n    index = -1\n    while top>=top and index==-1:\n        mid = int(math.floor((top+top)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            top = mid+1\n    return index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n", "idx": 7784, "target": 0}
{"func": "# write a python program to take year as input and check if it is a leap year or not\n\nmonth = int(input(\"Enter a year: \"))  \nif (month % 4) == 0:  \n   if (month % 100) == 0:  \n       if (month % 400) == 0:  \n           print(f\"{month} is a leap year\")  \n       else:  \n           print(f\"{month} is not a leap year\")  \n   else:  \n       print(f\"{month} is a leap year\")  \nelse:  \n   print(f\"{month} is not a leap year\")\n   \n", "idx": 7785, "target": 0}
{"func": "# write a program to find exponential of a number\nimport math\n\nnumbers = 3\n\nprint('Exponential', math.exp(numbers))\n\n\n", "idx": 7786, "target": 0}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    discovered = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            discovered = True\n            break\n    if not discovered:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 7787, "target": 0}
{"func": "# Write a Python function to check whether the input letter is a vowel or not\ndef check_vowel_or_not(letter):\n    resulting =  str(letter) in \"aeiou\"\n    return resulting\n\n", "idx": 7788, "target": 0}
{"func": "# write a python function to convert a user provided string to camelcase\n\nfrom re import sub\ndef camel(\u2019):\n  \u2019 = sub(r\"(_|-)+\", \" \", \u2019).title().replace(\" \", \"\")\n  return ''.join([\u2019[0].lower(), \u2019[1:]])\n\n", "idx": 7789, "target": 0}
{"func": "# write a python program to add numbers from two list if first list item is even and second list item is odd.\ndef add_two_lists_even_odd(l1, l2):\n    new_new = []\n    for x, y in zip(l1, l2):\n        if l1%2 == 0 and l2%2 != 0:\n            new_new.append(x+y)\n    return new_new\n\n", "idx": 7790, "target": 0}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres_ = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res_: \n            res_[inner_list] += (inner_dict[inner_list]) \n        else: \n            res_[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res_))\n\n", "idx": 7791, "target": 0}
{"func": "# Write Python Program to print Common Letters in Two Input Strings\t\t\ns2=\"Trump was the American President\"\ns2=\"Who is the American President now?\"\na=list(set(s2)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)\n\t\n\t\n\t\n\t\n", "idx": 7792, "target": 0}
{"func": "# write a python function to calculate compound interest\n\ndef compound_interest(principle, rate, time): \n    Amounts = principle * (pow((1 + rate / 100), time)) \n    CI = Amounts - principle \n    print(f\"Compound interest is {CI}\")\n\n", "idx": 7793, "target": 0}
{"func": "# Remove empty strings from the list of strings\nlist2 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for i in (filter(None, list2))]\nprint(resList)\n\n", "idx": 7794, "target": 0}
{"func": "# write a Python Program to Find the Sum of Natural Numbers\nnum = 16\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sums = 0\n   while(num > 0):\n       sums += num\n       num -= 1\n   print(\"The sum is\", sums)\n\n", "idx": 7795, "target": 0}
{"func": "#27 Write a python program to extract strings with successive alphabets in alphabetical order and print the list\n\nlist1 = ['gfg', 'is', 'best', 'for', 'geeks'] \n\n  \nres_ = [] \nfor i in range(0,len(list1)):\n    for j in range(0,len(list1[i])-1):\n        if ord(list1[i][j+1])- ord(list1[i][j])==1:\n           res_.append(list1[i])\nprint(res_)\n\n", "idx": 7796, "target": 0}
{"func": "#52 write a program to check Armstrong number\n\nnum2 = int(input(\"Enter a number: \"))  \nsum = 0  \ntemp = num2  \n  \nwhile temp > 0:  \n   digit = temp % 10  \n   sum += digit ** 3  \n   temp //= 10  \n  \nif num2 == sum:  \n   print(num2,\"is an Armstrong number\")  \nelse:  \n   print(num2,\"is not an Armstrong number\")  \n   \n", "idx": 7797, "target": 0}
{"func": "#write a python program to print positive numbers in a list\n\nlist2 = [2,4,-5,3,8,-10,-11]\n\nfor i in list2:\n    if i>0:\n        print(i,end=\" \")\n\n", "idx": 7798, "target": 0}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n2)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n2)\n       nth = n2 + n2\n       # update values\n       n2 = n2\n       n2 = nth\n       count += 1\n", "idx": 7799, "target": 0}
{"func": "# 9. python function to add even mubers in a list\ndef add_even_num(l):\n    sums = reduce(lambda a, b: a + b, filter(lambda a: (a % 2 == 0), l))\n    return sums\n\n", "idx": 7800, "target": 0}
{"func": "# Write a lambda function to find the union of two lists\n\nunions = lambda a, b: list(set(a)|set(b))\n\n", "idx": 7801, "target": 0}
{"func": "# 19. python program to compare strings using interning\nimport sys\ndef compare_using_interning(n):\n    A = sys.intern('a long string that is not intered' * 200)\n    b = sys.intern('a long string that is not intered' * 200)\n    for i in range(n):\n        if A is b:\n            pass\n\n", "idx": 7802, "target": 0}
{"func": "# Please write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nlu = [3,6,7,8]\nshuffle(lu)\nprint(lu)\n\n", "idx": 7803, "target": 0}
{"func": "# write a program to find tangent of a number\nimport math\n\nnum2 = 45\nprint(\"Tangent\", math.tan(num2))\n\n\n", "idx": 7804, "target": 0}
{"func": "#Multiply Two Matrices\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresulting = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n\n   for j in range(len(Y[0])):\n\n       for k in range(len(Y)):\n           resulting[i][j] += X[i][k] * Y[k][j]\n\nfor r in resulting:\n   print(r)\n\n", "idx": 7805, "target": 0}
{"func": "#43 write a to time a python script\nfrom datetime import datetime\nstarting = datetime.now()\ndo_something():...\nprint(datetime.now() - starting)\n\n", "idx": 7806, "target": 0}
{"func": "# write  Function to Rotate  the matrix by 180 degree \ndef rotateMatrix(mat): \n    N = 3  \n    u = N - 1;  \n    while(u >= 0): \n        j = N - 1; \n        while(j >= 0): \n            print(mat[u][j], end = \" \"); \n            j = j - 1; \n        print(); \n        u = u - 1; \n  \n", "idx": 7807, "target": 0}
{"func": "# Python Program to Check if a Number is Odd or Even\nnum2 = 100\nif (num2 % 2) == 0:\n   print(\"{0} is Even\".format(num2))\nelse:\n   print(\"{0} is Odd\".format(num2))\n\n", "idx": 7808, "target": 0}
{"func": "# write a program to print even length words in a string\n\nstr2 = \"I am doing fine\"\ns = str2.split(' ')\nfor word in s:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 7809, "target": 0}
{"func": "# write a python program to add two matrices\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nX = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\nresult = [[0,0,0],\n         [0,0,0],\n         [0,0,0]]\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + X[i][j]\nfor r in result:\n   print(r)\n\n", "idx": 7810, "target": 0}
{"func": "# write a program to check if a string is binary or not\n\nstr2=\"01110011 a\"\n\nset1 = set(str2)\n\nif set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 7811, "target": 0}
{"func": "# write a python program to print the number of uppercase and lowercase letters in a string\nsentences = 'The Quick Brown Fox'\nlowercase = 0\nuppercase = 0\nfor c in sentences:\n   if c.isupper():\n      uppercase += 1\n   elif c.islower():\n      lowercase += 1\n   else:\n      pass\nprint(f'Lowercase: {lowercase}, Uppercase: {uppercase}')\n\n\n", "idx": 7812, "target": 0}
{"func": "# write a python function to get symmetric difference between two sets from user.\ndef symmetric_diff_sets():\n    S, m = input(), set(list(map(int, input().split())))\n    N, n = input(), set(list(map(int, input().split())))\n    s = sorted(list(m.difference(n)) + list(n.difference(m)))\n    for i in s:\n        print(i)\n\n\n", "idx": 7813, "target": 0}
{"func": "# Write a Python Program to print the Sum of First N Natural Numbers\n\nn=7\nsum. = 0\nwhile(n > 0):\n    sum.=sum.+n\n    n=n-1\nprint(\"The sum of first n natural numbers is\",sum.)\n\n", "idx": 7814, "target": 0}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\ndef count_blank_space():\n    fname = input(\"file name:\")\n    counts = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            counts += line.counts(' ')\n    return counts\n\n\n", "idx": 7815, "target": 0}
{"func": "# Write a program to copy a given array\nM = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nrows = len(M)\ncol = len(M[0])\n\nMC = []\nwhile len(MC) < rows:\n    MC.append([])\n    while len(MC[-1]) < col:\n        MC[-1].append(0.0)\n\nfor i in range(rows):\n    for j in range(col):\n        MC[i][j] = M[i][j]\n\nprint(\"Copied Array\")\nfor i in range(rows):\n    row = '|'\n    for b in range(col):\n        row = row + ' ' + str(MC[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 7816, "target": 0}
{"func": "# write a program to remove odd numbers from a list using list comprehensions\nsyms = [1, 2, 3, 4, 5, 6, 7, 8]\nno_odd_nums = [i for i in syms if i % 2 == 0]\n\n\n", "idx": 7817, "target": 0}
{"func": "#10. Python Program to Check if a Number is Positive, Negative or 0\nnum2 = float(input(\"Enter a number: \"))\nif num2 > 0:\n   print(\"Positive number\")\nelif num2 == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n #11. Python Program to Check if a Number is Odd or Even\n num2 = int(input(\"Enter a number: \"))\nif (num2 % 2) == 0:\n   print(\"{0} is Even\".format(num2))\nelse:\n   print(\"{0} is Odd\".format(num2))\n\n\n", "idx": 7818, "target": 0}
{"func": "# write a python program to add two list using python zip method\n\nl1=[10, 20, 30]\nl2=[-10, -20, -30]\nl2=[x+y for x, y in zip(l1, l2)]\nprint('added two list:',l2)\n\n", "idx": 7819, "target": 0}
{"func": "#t=tuple()\nfor i in range(0,len(ini_tuple)//n):\n    \u00b4=tuple()\n    for j in range(N,N+n):\n        #print(ini_tuple[j])\n        \u00b4+=(ini_tuple[j],)\n        \n    N=N+n\n    s+=(\u00b4,)    \nprint(s)\n\n", "idx": 7820, "target": 0}
{"func": "# write a Python function to print First n Digits of Pi\n\ndef pi(n):\n  u = 1\n  p = x = 3 * 10 ** (n + 10)\n  while x:\n    x = x * u // ((u + 1) * 4)\n    u += 2\n    p += x // u\n  return '3.' + f\"{p // 10 ** 10}\"[1:]\n\n\nprint(pi(7))\n\n\n", "idx": 7821, "target": 0}
{"func": "# write a python program to filter a list and return words with alphabets only and print it\n \n\nlists = ['sadgas1', 'sasg.as3$', 'hsd', '^atg', 'gaf']\nresult = [item for item in lists if item.isalpha()]\nprint(result)\n\n", "idx": 7822, "target": 0}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    b = 300000\n    return mass * (b**2)\n\n", "idx": 7823, "target": 0}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres_ = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res_: \n            res_[inner_list] += (inner_dict[inner_list]) \n        else: \n            res_[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res_))\n\n", "idx": 7824, "target": 0}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres_ = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res_ = res_ + test_str[idx].upper() \n    else: \n       res_ = res_ + test_str[idx].lower() \nprint(res_)\n\n", "idx": 7825, "target": 0}
{"func": "#write a python function to swap two numbers in a list and return the list\ndef swapPositions(lists, pos1, pos2): \n      \n    lists[pos1], lists[pos2] = lists[pos2], lists[pos1] \n    return lists\n  \n", "idx": 7826, "target": 0}
{"func": "#48 write a python Program to multiply two matrices and print the result\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresulting = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(Y[0])):\n       for k in range(len(Y)):\n           resulting[i][j] += X[i][k] * Y[k][j]\n\nfor r in resulting:\n   print(r)\n   \n", "idx": 7827, "target": 0}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist2 = [11, 5, 17, 18, 23, 50]  \n  \ndel list2[1:5] \n  \nprint(*list2)\n\n\n", "idx": 7828, "target": 0}
{"func": "# Write a python program to Count and print the Number of Words in a Text File\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        phrases = line.split()\n        num_words += len(phrases)\nprint(\"Number of words:\")\nprint(num_words)\n\n", "idx": 7829, "target": 0}
{"func": "# Write a Python program to check a triangle is equilateral, isosceles or scalene.# Note :# An equilateral triangle is a triangle in which all three sides are equal.# A scalene triangle is a triangle that has three unequal sides.# An isosceles triangle is a triangle with (at least) two equal sides.\n\nprint(\"Input lengths of the triangle sides: \")\nx = int(input(\"x: \"))\ny = int(input(\"y: \"))\ny = int(input(\"z: \"))\nif x == y == y:\n print(\"Equilateral triangle\")\nelif x != y != y:\n print(\"Scalene triangle\")\nelse:\n print(\"isosceles triangle\")\n\n", "idx": 7830, "target": 0}
{"func": "# Write a python function to find the area of a circle, whose radius is given\ndef findArea(r): \n    PIs = 3.142\n    return PIs * (r*r)\n\n\n", "idx": 7831, "target": 0}
{"func": "# write a python program to print the difference in days between two dates\nfrom datetime import date\ndate1 = date(2020, 10, 25)\ndate1 = date(2020, 12, 25)\nprint(f'Difference between dates: {(date1 - date1).days}')\n\n\n", "idx": 7832, "target": 0}
{"func": "# Write a lambda function to multiply two numbers\n\nmultiplying = lambda a, b: a*b\n\n", "idx": 7833, "target": 0}
{"func": "# any numbers that come after 237 in the sequence.\n\nnumber = [\n    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,\n    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,\n    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,\n    958, 743, 527\n]\n\nfor x in number:\n    if x == 237:\n        print(x)\n        break;\n    elif x % 2 == 0:\n        print(x)\n\n\n", "idx": 7834, "target": 0}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncounts = 0\n  \nfor i in L: \n    counts += i \n\navg = counts/len(L) \n  \nprint(\"sum = \", counts) \nprint(\"average = \", avg)\n\n", "idx": 7835, "target": 0}
{"func": "# Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nlu = [5,6,77,45,22,12,24]\nlu = [x for x in lu if x%2!=0]\nprint lu\n\n", "idx": 7836, "target": 0}
{"func": "#12. Python Program to Check Leap Year\nmonth = 2000\n\nif (month % 4) == 0:\n   if (month % 100) == 0:\n       if (month % 400) == 0:\n           print(\"{0} is a leap year\".format(month))\n       else:\n           print(\"{0} is not a leap year\".format(month))\n   else:\n       print(\"{0} is a leap year\".format(month))\nelse:\n   print(\"{0} is not a leap year\".format(month))\n\n\n", "idx": 7837, "target": 0}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nhigher = []\nupper = []\nfor char in str1:\n    if char.islower():\n        higher.append(char)\n    else:\n        upper.append(char)\nsorted_string = ''.join(higher + upper)\nprint(sorted_string)\n\n", "idx": 7838, "target": 0}
{"func": "# 87 write a function which accepts a string prints the characters that have even indexes.\ndef every_alternate_char(\u2019):\n    \u2019 = \u2019[::2]\n    return \u2019\n\n\n", "idx": 7839, "target": 0}
{"func": "# Write a python program to print square matrix in Z form\n\narr = [[4, 5, 6, 8],  \n        [1, 2, 3, 1],  \n        [7, 8, 9, 4],  \n        [1, 8, 7, 5]] \n  \nk = len(arr[0]) \n                   \ni=0\nfor j in range(0, k-1): \n    print(arr[i][j], end =\" \")  \n          \nk = 1\nfor i in range(0, k): \n    for j in range(k, 0, -1): \n        if(j==k-k): \n            print(arr[i][j], end = \" \")  \n            break;  \n    k+=1\n  \n\ni=k-1;  \nfor j in range(0, k): \n    print(arr[i][j], end = \" \") \n  \n  \n", "idx": 7840, "target": 0}
{"func": "# write a python function to check external IP address\ndef check_ip():\n    import re\n    import urllib.request as ur\n    url = \"http://checkip.dyndns.org\"\n    with ur.urlopen(url) as u:\n        \u2019 = str(u.read())\n        ip = re.findall(r\"\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\", \u2019)\n        print(\"IP Address: \", ip[0])\n        return ip[0]\n\n\n", "idx": 7841, "target": 0}
{"func": "# initializing i, j  \nu, j = 4, 8\n\ncount=0\nfor k in list1:\n    if k==u and k!=j:\n       count=count+1\n    elif k==j:\n         break;   \n\nprint(count)\n\n\n", "idx": 7842, "target": 0}
{"func": "# Write a Python program to match key values in two dictionaries.\ny = {'key1': 1, 'key2': 3, 'key3': 2}\ny = {'key1': 1, 'key2': 2}\nfor (key, value) in set(y.items()) & set(y.items()):\nprint('%s: %s is present in both x and y' % (key, value))\n\n", "idx": 7843, "target": 0}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    second = seq[0:1]\n    result = restrev + second\n    return result\n\n\n", "idx": 7844, "target": 0}
{"func": "# write a program to add two matrix\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nB = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\nif rowsA != rowsB or colsA != colsB:\n    raise ArithmeticError('Matrices are NOT the same size.')\n\nB = []\nwhile len(B) < rowsA:\n    B.append([])\n    while len(B[-1]) < colsB:\n        B[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        B[i][j] = A[i][j] + B[i][j]\n\nprint(\"Added Array\")\nfor i in range(rowsA):\n    row = '|'\n    for b in range(colsA):\n        row = row + ' ' + str(B[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 7845, "target": 0}
{"func": "# write a python function to find H.C.F of two numbers\ndef compute_hcf(x, y):\n    if x > y:\n        larger = y\n    else:\n        larger = x\n    for i in range(1, larger+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i\n    return hcf\n\n", "idx": 7846, "target": 0}
{"func": "# write a python program to check whether the number is prime\n\nnum2 = 407\nif num2 > 1:\n   for i in range(2,num2):\n       if (num2 % i) == 0:\n           print(num2,\"is not a prime number\")\n           print(i,\"times\",num2//i,\"is\",num2)\n           break\n   else:\n       print(num2,\"is a prime number\")\n       \nelse:\n   print(num2,\"is not a prime number\")\n \n", "idx": 7847, "target": 0}
{"func": "# Output : [(1,1),(2,8),(3,9)]\ndef list_of_tuple( l: list):\n    penultimate = [ (i, pow(i,3)) for i in l]\n    return penultimate\n\n\n", "idx": 7848, "target": 0}
{"func": "# 45 Define a python function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\n\nimport requests\n\n\ndef get_status(url):\n    data__ = requests.get(url)\n    return data__.status_code\n\n\n", "idx": 7849, "target": 0}
{"func": "#44 write a  Python function to find intersection of two sorted arrays \ndef printIntersection(arr1, arr2, m, n): \n    u, j = 0, 0\n    while u < m and j < n: \n        if arr1[u] < arr2[j]: \n            u += 1\n        elif arr2[j] < arr1[u]: \n            j+= 1\n        else: \n            print(arr2[j]) \n            j += 1\n            u += 1\n\narr1 = [1, 2, 4, 5, 6] \narr2 = [2, 3, 5, 7] \nm = len(arr1) \nn = len(arr2) \nprintIntersection(arr1, arr2, m, n) \n\n", "idx": 7850, "target": 0}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        j = char.islower()   \n        if j == True: \n            return True \n    if(j != 1): \n        return False\n\n", "idx": 7851, "target": 0}
{"func": "# Write a Python function to Find if a Number is Prime or Not Prime\n\ndef check(n, divs = None):\n    if divs is None:\n        divs = n - 1\n    while divs >= 2:\n        if n % divs == 0:\n            print(\"Number not prime\")\n            return False\n        else:\n            return check(n, divs-1)\n    else:\n        print(\"Number is prime\")\n        return 'True'\n\n", "idx": 7852, "target": 0}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\n   sums = num1 + num2\n   return not sums % 2\n\n\n", "idx": 7853, "target": 0}
{"func": "# Write a program using list comprehension to print the Fibonacci Sequence in comma separated form with a given n input by console.\ndef f(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return f(n-1)+f(n-2)\nn=int(raw_input())\nvalue = [str(f(x)) for x in range(0, n+1)]\nprint \",\".join(value)\n\n", "idx": 7854, "target": 0}
{"func": "# Write a Python function to add two given lists using map and lambda.\ndef add_two_lists(list_1, list_2):\n    resulting = map(lambda x, y: x + y, list_1, list_2)\n    return resulting\n\n\n", "idx": 7855, "target": 0}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres_ = [sub for sub in test_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res_))\n\n", "idx": 7856, "target": 0}
{"func": "# write a program to check if year is a leap year or not\n\nmonth = int(input(\"Year: \"))\n\nif (month % 4) == 0:\n   if (month % 100) == 0:\n       if (month % 400) == 0:\n           print(\"{0} is a leap year\".format(month))\n       else:\n           print(\"{0} is not a leap year\".format(month))\n   else:\n       print(\"{0} is a leap year\".format(month))\nelse:\n   print(\"{0} is not a leap year\".format(month))\n\n", "idx": 7857, "target": 0}
{"func": "# Write a python program to Implement Binary Search without Recursion and print the key element if found\n\ndef binary_search(alist, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while start < end:\n        mid = (start + end)//2\n        if alist[mid] > key:\n            end = mid\n        elif alist[mid] < key:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindexes = binary_search(alist, key)\nif indexes < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {indexes}.')\n\n\n", "idx": 7858, "target": 0}
{"func": "# Write a Python Program to prints Common Letters in Two Input Strings\n\ns1='python'\ns1='schoolofai'\na=list(set(s1)&set(s1))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 7859, "target": 0}
{"func": "# Write a python function to find the area of a circle, whose radius is given\ndef findArea(r): \n    PIs = 3.142\n    return PIs * (r*r)\n\n", "idx": 7860, "target": 0}
{"func": "# dictionary \nres_ = {key.replace('\"', ''):val for key, val in test_dict.items()} \n      \n", "idx": 7861, "target": 0}
{"func": "# converting to dictionary \nres_ = {sub[0]: sub[1] for sub in res_} \n  \n", "idx": 7862, "target": 0}
{"func": "# Write a function that returns derivative derivative relu value of the input\ndef derivative_relu(y:float) -> float:\n    y = 1 if y > 0 else 0\n    return y\n\n\n", "idx": 7863, "target": 0}
{"func": "# write a function to calculate the sum of digits of a number\n\ndef sum_of_digits(num):\n    sums = 0\n    while(num > 0):\n        sums += num % 10\n        num = num // 10\n    return sums\n\n", "idx": 7864, "target": 0}
{"func": "# 18 write a function to create a linked list with given length and print the list after\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass LList:\n    def __init__(self):\n        self.head = None\n\n\ndef create_linked_list(*args):\n    linked_list = LList()\n    linked_list.head = Node(args[0])\n    cur = linked_list.head\n\n    for i in range(1, len(args)):\n        entry = Node(args[i])\n        cur.next = entry\n        cur = entry\n    return\n\n\n", "idx": 7865, "target": 0}
{"func": "# Write python program to find whether-number-power-two\ndef is_power_of_two(n):\n\"\"\"Return True if n is a power of two.\"\"\"\nif n <= 0:\nreturn False\nelse_:\nreturn n & (n - 1) == 0\n\n\nn = int(input('Enter a number: '))\n\nif is_power_of_two(n):\nprint('{} is a power of two.'.format(n))\nelse_:\nprint('{} is not a power of two.'.format(n))\n\n", "idx": 7866, "target": 0}
{"func": "# write a python program to remove punctuations in a string\n punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n strings = ''.join(e for e in d if e not in punctuations)\n \n", "idx": 7867, "target": 0}
{"func": "# write a program function to check if given words appear together in a list of sentence\n\ndef check(sentence, words): \n    res_ = [all([k in s for k in words]) for s in sentence] \n    return [sentence[i] for i in range(0, len(res_)) if res_[i]]\n\n", "idx": 7868, "target": 0}
{"func": "#write a python program to print the list having sum of digits\nlist1 = [12, 67, 98, 34]\nlist2=[]\nfor i in list1:\n    sums = 0\n    for digit in str(i): \n        sums += int(digit) \n    list2.append(sums)\nprint(list2)\n\n", "idx": 7869, "target": 0}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"IshwarVenugopal\"\n\ndef longest_non_repeat(str):   \n    u=0\n    max_length = 1\n\n    for u,c in enumerate(str):       \n        start_at = u\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n            \n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n\n        print(sub_str)\n        \n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 7870, "target": 0}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    URL = re.findall(regex,string)       \n    return [x[0] for x in URL] \n\n", "idx": 7871, "target": 0}
{"func": "#29 write a python  program to Extract string till first Non-Alphanumeric character and print it\n\ntest_str = 'geeks4g!!!eeks'\n\u2019=''\nfor i in test_str:\n    \n    if i.isalnum()==False:\n       break\n    else:\n      \u2019+=i  \nprint(\u2019)   \n\n", "idx": 7872, "target": 0}
{"func": "#86 Write a Python program to generate groups of five consecutive numbers in a list\nr = [[5*i + j for j in range(1,6)] for i in range(5)]\nprint(r)\n\n", "idx": 7873, "target": 0}
{"func": "# write a python program to check if a number is positive, negative or 0\nnum2 = float(input(\"Enter a number: \"))\nif num2 > 0:\n   print(\"Positive number\")\nelif num2 == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n", "idx": 7874, "target": 0}
{"func": "#30 write a program to check whether the string is a palindrome or not \ndef isPalindrome(\u2019):\n    return \u2019 == \u2019[::-1]\n\u2019 = \"malayalam\"\nans = isPalindrome(\u2019)\n \nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "idx": 7875, "target": 0}
{"func": "# Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits\n\na=2\nb=9\nc=5\nl=[]\nl.append(a)\nl.append(b)\nl.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(l[i],l[j],l[k])\n\n", "idx": 7876, "target": 0}
{"func": "#[all(i) for i in test_list if i>0]\n\nresulting = [i for i in test_list if all(ele >= 0 for ele in i)] \n  \n", "idx": 7877, "target": 0}
{"func": "# printing original dictionary \n\n\nres_ = [] \nfor a, b, c in zip(*test_dict.values()):\n    \n    if a.isdigit() : \n        res_.append((a, b, c)) \n      \n", "idx": 7878, "target": 0}
{"func": "# Write a Python program to find the second smallest number in a list\ndef second_smallest(numbers):\na2, a2 = float('inf'), float('inf')\nfor x in numbers:\nif x <= a2:\na2, a2 = x, a2\nelif x < a2:\na2 = x\nreturn a2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n", "idx": 7879, "target": 0}
{"func": "# Write a python program using list comprehension to produce and print the list ['x', 'xx', 'xxx', 'xxxx', 'y', 'yy', 'yyy', 'yyyy', 'z', 'zz', 'zzz', 'zzzz']\n\ninput_string_list = ['x', 'y', 'z']\nrepeat_count = 4\nlist1 = [input_string_list[i] * (j+1)  for i in range(len(input_string_list)) for j in range(repeat_count) ]\nprint(list1)\n\n\n", "idx": 7880, "target": 0}
{"func": "#78 Write a Python function to find the greatest common divisor (gcd) of two integers.\ndef Recurgcd(a, b):\n\thigh = min(a, b)\n\thigh = max(a, b)\n\n\tif high == 0:\n\t\treturn high\n\telif high == 1:\n\t\treturn 1\n\telse:\n\t\treturn Recurgcd(high, high%high)\n\n", "idx": 7881, "target": 0}
{"func": "# write a python function to convert bcd to decimal\n \n def bcdToDecimal(s):  \n    length = len(s); \n    check = 0; \n    check0 = 0; \n    num2 = 0; \n    sum = 0; \n    mul = 1; \n    rev = 0; \n    for i in range(length - 1, -1, -1): \n        sum += (ord(s[i]) - ord('0')) * mul; \n        mul *= 2; \n        check += 1; \n        if (check == 4 or i == 0): \n            if (sum == 0 and check0 == 0): \n                num2 = 1; \n                check0 = 1; \n            else: \n                num2 = num2 * 10 + sum;          \n            check = 0; \n            sum = 0; \n            mul = 1; \n    while (num2 > 0): \n        rev = rev * 10 + (num2 % 10); \n        num2 //= 10;        \n    if (check0 == 1): \n        return rev - 1;           \n    return rev;  \n\n # write a python function to find all the sexy primes in a given range\n\ndef sexyprime(l, r) : \n    prime=[True] * (r + 1) \n    p = 2\n    while(p * p <= r) : \n        if (prime[p] == True) :  \n            for i in range( p * 2, r+1 ,p) : \n                   prime[i] = False\n        p = p + 1\n    for i in range( l,r - 6 + 1) : \n        if (prime[i] and prime[i + 6]) : \n            print(\"(\", i , \",\", i + 6,\")\", end=\"\") \n            \n # write a python function to check whether the number is a duck number or not\n \ndef check_duck(num2) : \n    n = len(num2)   \n    i = 0\n    while (i < n and num2[i] == '0') : \n        i = i + 1\n    while (i < n) :  \n        if (num2[i] == \"0\") : \n            return True \n        i = i + 1\n    return False\n    \n # write a python function to check whether the given number is a Buzz number or not\n \n def isBuzz(num2) : \n  \n    return (num2 % 10 == 7 or num2 % 7 == 0)  \n  \n # write a python function to check whether the number is a nude number or not\n  \n  def checkDivisbility(num2): \n    digit = 0\n    N = num2 \n    while (num2 != 0): \n        digit = num2 % 10\n        num2 = num2 // 10\n        if (digit == 0 or N % digit != 0): \n            return False\n    return True\n    \n # write a python function to check whether the number is a ugly number or not\n \n def isUgly(n): \n    if (n == 1): \n        return 1\n    if (n <= 0): \n        return 0 \n    if (n % 2 == 0): \n        return (isUgly(n // 2))       \n    if (n % 3 == 0): \n        return (isUgly(n // 3))   \n    if (n % 5 == 0): \n        return (isUgly(n // 5)) \n    return 0\n    \n # write a python function to write a prime number as the sum of two composite numbers\n \n def findNums(n): \n    if (n <= 11): \n        if (n == 8): \n            print(\"4 4\", end = \" \") \n        if (n == 10): \n            print(\"4 6\", end = \" \") \n        else: \n            print(\"-1\", end = \" \") \n    if (n % 2 == 0): \n        print(\"4 \", (n - 4), end = \" \") \n    else: \n        print(\"9 \", n - 9, end = \" \") \n        \n # write a python function to print two composite numbers whose difference is N\n \n def find_composite_nos(n) :  \n    print(9 * n, 8 * n);  \n    \n # write a python function to print N-bonacci series\n \n def bonacciseries(n, m) :  \n    a = [0] * m \n    a[n - 1] = 1 \n    for i in range(n, m) : \n        for j in range(i - n, i) : \n            a[i] = a[i] + a[j]  \n    for i in range(0, m) : \n        print (a[i], end = \" \") \n     \n", "idx": 7882, "target": 0}
{"func": "# write a python program to implement Queue\nfrom collections import deque\n\nclass Queue():\n    '''\n    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and\n    dequeueing in worst-case O(1) time.\n    '''\n\n\n    def __init__(self_, max_size = 10):\n        '''\n        Initialize this queue to the empty queue.\n\n        Parameters\n        ----------\n        max_size : int\n            Maximum number of items contained in this queue. Defaults to 10.\n        '''\n\n        self_._queue = deque(maxlen=max_size)\n\n\n    def enqueue(self_, item):\n        '''\n        Queues the passed item (i.e., pushes this item onto the tail of this\n        queue).\n\n        If this queue is already full, the item at the head of this queue\n        is silently removed from this queue *before* the passed item is\n        queued.\n        '''\n\n        self_._queue.append(item)\n\n\n    def dequeue(self_):\n        '''\n        Dequeues (i.e., removes) the item at the head of this queue *and*\n        returns this item.\n\n        Raises\n        ----------\n        IndexError\n            If this queue is empty.\n        '''\n\n        return self_._queue.pop()\n\n\n", "idx": 7883, "target": 0}
{"func": "# initializing K \nH = 6\n  \nres = []\nfor ele in test_list: \n  \n    # incrementing on testing for digit. \n    if ele.isdigit(): \n        res.append(str(int(ele) + H)) \n    else: \n        res.append(ele) \n  \n", "idx": 7884, "target": 0}
{"func": "# Write a Python function to find the union of two arrays\ndef array_union(A,B):\n\tunions=list(set(A)|set(B))\n\treturn unions\n\n\n", "idx": 7885, "target": 0}
{"func": "# write the list comprehension to pick out only negative integers from a given list \u2018l\u2019.\nl2=[1,2,3,-4,-8]\n\nprint('negative integers:', [x for x in l2 if x<0])\n\n", "idx": 7886, "target": 0}
{"func": "# Write a python program to count the frequency of letters of the string and print the letters in descending order of frequency.\nphrase = input()\ndct = {}\nfor i in phrase:\ndct[i] = dct.get(i,0) + 1\n\ndct = sorted(dct.items(),key=lambda x: (-x[1],x[0]))\nfor i in dct:\nprint(i[0],i[1]\n\n", "idx": 7887, "target": 0}
{"func": "# write a python program to print 5 random vowels\nimport random\nconsonants = ['a', 'e', 'i', 'o', 'u']\nprint([random.choice(consonants) for _ in range(5)])\n\n\n", "idx": 7888, "target": 0}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    3.14159=3.14\n    return 3.14159*radius*slant_height\n\n", "idx": 7889, "target": 0}
{"func": "# write a python function to get 10 best Artists playing on Apple iTunes\ndef get_artists():\n    import requests\n    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'\n    response = requests.get(url)\n    data__ = response.json()\n    for artist_dict in data__['feed']['entry']:\n        artist_name = artist_dict['im:artist']['label']\n        print(artist_name)\n\n\n", "idx": 7890, "target": 0}
{"func": "# By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nlu = [12,24,35,70,88,120,155]\nlu = [x for x in lu if x%5!=0 and x%7!=0]\nprint lu\n\n", "idx": 7891, "target": 0}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \n  \n  \nres_ = {} \nfor i in test_list: \n    for key, value in i.items(): \n  \n        # checking for key presence and updating max \n        if key in res_: \n            res_[key] = max(res_[key], value) \n        else: \n            res_[key] = value \n  \n", "idx": 7892, "target": 0}
{"func": "#5. write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum1 = 12\nnum3 = 14\nif (num1 >= num1) and (num1 >= num3):\n   largest = num1\nelif (num1 >= num1) and (num1 >= num3):\n   largest = num1\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 7893, "target": 0}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndeltas = None\nif date_1 > date_2:\n    deltas = date_1 - date_2\nelse:\n    deltas = date_2 - date_1\nprint(\"Difference is\", deltas.days, \"days\")\n\n", "idx": 7894, "target": 0}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(test_list)) if test_list[idx] % 2 == 0] \n  \n\nres_ = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res_)) \n\n\n", "idx": 7895, "target": 0}
{"func": "#write a python program to remove empty list from list and print it\nlist1 = [2,5,6,[],8,[],[],0]\nlist1=[]\nfor i in list1:\n    if not isinstance(i,list):\n       list1.append(i)\nprint(list1)\n\n", "idx": 7896, "target": 0}
{"func": "# Write a python function to find greatest common divisor\n\ndef greatest_common_divisor(x,y):\n    print(\"For\", x, \"and\", y,\",\" ) \n    l=x%y\n    while l>0:\n        l=x%y\n        if l ==0: \n            print(\"the greatest common divisor is\", y,\".\")\n        else:\n            q=y\n            x=q\n            y=l\n\ngreatest_common_divisor(1071,1029)\n\n", "idx": 7897, "target": 0}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\n\ndef count_blank_space(fname):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            phrases = line.split()\n            for i in phrases:\n                for letter in i:\n                    if(letter.isspace):\n                        k=k+1\n    return k\n\n", "idx": 7898, "target": 0}
{"func": "#43 write a to time a python script\nfrom datetime import datetime\nstarting = datetime.now()\ndo_something():...\nprint(datetime.now() - starting)\n\n", "idx": 7899, "target": 0}
{"func": "# This function computes LCM\ndef compute_lcm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n\nnum2 = 54\nnum2 = 24 \n\nprint(\"The L.C.M. is\", compute_lcm(num2, num2))\n\n", "idx": 7900, "target": 0}
{"func": "#57 Write a Python function to find the single number in a list that doesn't occur twice.\ndef single_number(arr):\n    resulting = 0\n    for i in arr:\n        resulting ^= i\n    return resulting\n\n", "idx": 7901, "target": 0}
{"func": "# write a Python program to create multiple list\n\narg1 = {}\nfor i in range(1, 11):\n    arg1[str(i)] = []\nprint(f'create multiple list:{arg1}')\n\n", "idx": 7902, "target": 0}
{"func": "# write a python program to print current datetime\nfrom datetime import datetime\n\nstill = datetime.still()\nprint(still)\n\n", "idx": 7903, "target": 0}
{"func": "# 26 write a program to calculate the root of a nonlinear equation using Newton's method\n\n\nclass NewtonRaphsonSolver:\n    def __init__(self_, f, x, dfdx, min_tol=1e-3):\n        self_.func = f\n        self_.x = x\n        self_.derivative = dfdx\n        self_.min_tol = min_tol\n\n    def calculate(self_):\n        func_val = self_.func(self_.x)\n        iterations = 0\n        while abs(func_val) > self_.min_tol and iterations < 100:\n            self_.x = self_.x - float(func_val) / self_.derivative(self_.x)\n            func_val = self_.func(self_.x)\n            iterations += 1\n\n        if iterations <= 100:\n            return self_.x\n        else:\n            return None\n\n\ndef f(x):\n\n    return x ** 4 - 16\n\n\ndef dfdx(x):\n    return 4 * x ** 3\n\n\nnrs = NewtonRaphsonSolver(f, 10, dfdx)\nprint(nrs.calculate())\n\n", "idx": 7904, "target": 0}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres_ = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res_))\n\n", "idx": 7905, "target": 0}
{"func": "#10 write a program to accept a string if it contains all vowels\ndef check(strings): \n  if len(set(strings).intersection(\"AEIOUaeiou\"))>=5: \n    return ('accepted') \n  else: \n    return (\"not accepted\") \n  \nif __name__==\"__main__\": \n  strings=\"helloworld\"\n  print(check(strings)) \n  \n\n", "idx": 7906, "target": 0}
{"func": "# Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\n\u2019 = input()\nwords = [word for word in \u2019.split(\" \")]\nprint(\" \".join(sorted(list(set(words)))))\n\n\n", "idx": 7907, "target": 0}
{"func": "#Write a function to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > arr[h]:\n        \u00b4 = arr[l]\n        arr[l] = arr[h]\n        arr[h] = \u00b4\n    if h - l + 1 > 2:\n        \u00b4 = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - \u00b4))\n        stoogesort(arr, l + \u00b4, (h))\n        stoogesort(arr, l, (h - \u00b4))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end = '')\n\n", "idx": 7908, "target": 0}
{"func": "#39. Python Program to Find Factorial of Number Using Recursion\ndef recur_factorial(n):\n   if n == 1:\n       return n\n   else:\n       return n*recur_factorial(n-1)\n\nnum2 = 7\n\n", "idx": 7909, "target": 0}
{"func": "# Write a python program to Implement Gnome sort and print the sorted list for the below list\n\ndef gnome_sort(alist):\n    for pos2 in range(1, len(alist)):\n        while (pos2 != 0 and alist[pos2] < alist[pos2 - 1]):\n            alist[pos2], alist[pos2 - 1] = alist[pos2 - 1], alist[pos2]\n            pos2 = pos2 - 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ngnome_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 7910, "target": 0}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ndef throws():\nreturn 5/0\n\ntry:\nthrows()\nexcept ZeroDivisionError:\nprint (\"division by zero!\")\nexcept Exception, err:\nprint ('Caught an exception')\nfinallly:\nprint ('In finally block for cleanup')\n\n", "idx": 7911, "target": 0}
{"func": "# Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\nlu = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = filter(lambda x: x%2==0, lu)\nprint(evenNumbers)\n\n", "idx": 7912, "target": 0}
{"func": "#9 write a program to find the frequency of words present in a string  \n  \ntest_str = 'times of india times new india express'\nprint(\"The original string is : \" + str(test_str)) \n\nres_ = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency : \" + str(res_))\n\n", "idx": 7913, "target": 0}
{"func": "#33. Python Program to Find LCM\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           gcd = greater\n           break\n       greater += 1\n\n   return gcd\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 7914, "target": 0}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res_ = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  return res_\n\n", "idx": 7915, "target": 0}
{"func": "# write a Python function to find area of an Ellipse. \n\ndef findArea(a, b): \n    \n    Area_ = 3.142 * a * b ; \n\n    print(\"Area:\", round(Area_, 2)); \n\na = 5; \nb = 4; \n\nfindArea(a, b)\n\n\n", "idx": 7916, "target": 0}
{"func": "# 39. write a Python program to reverse a linked list \n\nclass Node: \n\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\nclass LinkedList: \n\n    def __init__(self): \n        self.head = None\n\n    def reverse(self): \n        prev = None\n        currrent = self.head \n        while(currrent is not None): \n            next = currrent.next\n            currrent.next = prev \n            prev = currrent \n            currrent = next\n        self.head = prev \n        \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n\n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data)\n            temp = temp.next\n\n\nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n", "idx": 7917, "target": 0}
{"func": "# Write a python program for a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\nbottom = 0\nbottom = len(li)-1\nindex = -1\nwhile bottom>=bottom and index==-1:\nmid = int(math.floor((bottom+bottom)/2.0))\nif li[mid]==element:\nindex = mid\nelif li[mid]>element:\nbottom = mid-1\nelse:\nbottom = mid+1\n\nreturn index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n", "idx": 7918, "target": 0}
{"func": "# write a python program which takes user input tuple and prints length of each tuple element\nuserInput = input(\"Enter a tuple:\")\ny = map(lambda y:len(y), tuple(y.strip() for y in userInput.split(',')))\nprint(list(y))\n\n", "idx": 7919, "target": 0}
{"func": "#33 write a program to reverse words of string  \n  \ndef rev_sentence(sentence):  \n    phrases = sentence.split(' ')  \n    reverse_sentence = ' '.join(reversed(phrases))  \n    return reverse_sentence  \n  \nif __name__ == \"__main__\":  \n    input = 'have a good day'\n    print (rev_sentence(input)) \n    \n", "idx": 7920, "target": 0}
{"func": "# Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    bottom = len(li)-1\n    index = -1\n    while bottom>=bottom and index==-1:\n        mid = int(math.floor((bottom+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            bottom = mid-1\n        else:\n            bottom = mid+1\n\n    return index\n\n", "idx": 7921, "target": 0}
{"func": "#5. write a program to find and print the largest among three numbers\n\nnum1 = 10\nnum2 = 12\nnum3 = 14\nif (num1 >= num2) and (num1 >= num3):\n   biggest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   biggest = num2\nelse:\n   biggest = num3\nprint(f'largest:{biggest}')\n\n\n", "idx": 7922, "target": 0}
{"func": "# Write a Python function to compute simple interest\ndef simple_interest(p,t,r): \n    s\u0103_mi = (p * t * r)/100\n    return s\u0103_mi \n\t\n\t\n\t\n", "idx": 7923, "target": 0}
{"func": "#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm\ndef compute_hcf(y, y):\n   while(y):\n       y, y = y, y % y\n   return y\n\n", "idx": 7924, "target": 0}
{"func": "# Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat\n\na=['the', 'tsai', 'python' ,'a' ,'the', 'a']\nb=[]\ncount=0\nb='a'\nn=3\nfor i in a:\n    if(i==b):\n        count=count+1\n        if(count!=n):\n            b.append(i)\n    else:\n        b.append(i)\nif(count==0):\n    print(\"Item not found \")\nelse: \n    print(\"The number of repetitions is: \",count)\n    print(\"Updated list is: \",b)\n    print(\"The distinct elements are: \",set(a))\n\n\n", "idx": 7925, "target": 0}
{"func": "#10 write a python program to construct equidigit tuple and print them\n\nlist2 = [5654, 223, 982143, 34, 1021]\n\nlist2 = [] \nfor sub in list2: \n      \n    # getting mid element \n    mid_idx = len(str(sub)) // 2\n      \n    # slicing Equidigits \n    el1 = str(sub)[:mid_idx] \n    el2 = str(sub)[mid_idx:] \n      \n    list2.append((int(el1), int(el2))) \n  \n", "idx": 7926, "target": 0}
{"func": "# Write a Python function to calculate factorial of a given no using closer\n\ndef fact():\n    caches = {0:1, 1:1}\n\n    def calc_fib(n):\n        if n not in caches:\n            print(f'Calculating fact({n})')\n            caches[n] = calc_fib(n - 1) * n\n        return caches[n]\n    return calc_fib\n\n", "idx": 7927, "target": 0}
{"func": "# nonlocal keyword comes in handy \ndef outer():\n    y = 1\n    print('outer before:', y)\n\n    def inner():\n        nonlocal y\n        y = 2\n        print(\"inner:\", y)\n    inner()\n    print(\"outer after:\", y)\nouter()\n\n", "idx": 7928, "target": 0}
{"func": "#33. Python Program to Find LCM\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum1 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num1))\n\n", "idx": 7929, "target": 0}
{"func": "#67 Write a Python function to the push the first number to the end of a list.\ndef move_last(num_list):\n    A = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(A)\n    return(x)\n\n", "idx": 7930, "target": 0}
{"func": "#85 Write a Python program that iterate over elements repeating each as many times as its count.\nfrom collections import Counter\nb = Counter(p=4, q=2, r=0, s=-2)\nprint(list(b.elements()))\n\n", "idx": 7931, "target": 0}
{"func": "#14.Write a Python Program to check if a number is prime or not\n\nnum2 = 407\n\n\nif num2 > 1:\n   # check for factors\n   for i in range(2,num2):\n       if (num2 % i) == 0:\n           print(num2,\"is not a prime number\")\n           print(i,\"times\",num2//i,\"is\",num2)\n           break\n   else:\n       print(num2,\"is a prime number\")\n       \nelse:\n   print(num2,\"is not a prime number\")\n\n", "idx": 7932, "target": 0}
{"func": "# write a Python program to find the minute at which the minute hand and hour hand coincide \n\ndef find_time(h1): \n\n    phi = 30 * h1 \n    print(\"(\", end = \"\") \n    print((phi * 2),\"/ 11) minutes\") \n\nh1 = 3\nfind_time(h1) \n\n\n", "idx": 7933, "target": 0}
{"func": "# Write a Python function to check whether a number is a power of another number or not\ndef power_checker(a,b):\n\timport math\n\ts=math.log(a,b)\n\tn=round(s)\n\tif (b**n)==a:\n\t    return f'{a} is the power of {b}.'\n\telse:\n\t    return f'{a} is NOT the power of {b}.'\n\n\n", "idx": 7934, "target": 0}
{"func": "# write a python program to flip a coin 100 times and print number of heads and tails\nimport random\nheads = 0\ntail = 0\nfor i in range(100):\n   if(random.choice([True, False])):\n      heads += 1\n   else:\n      tail += 1\nprint(f'{heads} heads, {tail} tails')\n\n\n", "idx": 7935, "target": 0}
{"func": "# write a python function to calculate factorial of a given number\ndef factorial(n):\n    facts = 1\n    for num in range(2, n + 1):\n        facts = facts * num\n    return(facts)\n", "idx": 7936, "target": 0}
{"func": "#93 write a program to find sum of all digits of a number\n\ndef sumDigits(num):\n  if num == 0:\n    return 0\n  else:\n    return num % 10 + sumDigits(int(num / 10))\n\ny = 0\nprint(\"Number: \", y)\nprint(\"Sum of digits: \", sumDigits(y))\nprint()\n\n", "idx": 7937, "target": 0}
{"func": "# Compute the product of every pair of numbers from two lists\nlist2 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for a in list2 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 7938, "target": 0}
{"func": "# By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nlu = [12,24,35,70,88,120,155]\nlu = [x for (i,x) in enumerate(lu) if i%2!=0]\nprint lu\n\n", "idx": 7939, "target": 0}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentences = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word in sentences.split(' ') if len(word) >= minlength]\n\n\n", "idx": 7940, "target": 0}
{"func": "# Write a python program to remove punctuations from a sentence\n\npunctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuation:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n\n", "idx": 7941, "target": 0}
{"func": "# write a python function to bubblesort an array\n \n def bubbleSort(arr): \n    k = len(arr) \n\n    for i in range(k-1): \n        for j in range(0, k-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n\n", "idx": 7942, "target": 0}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\ndef printDict():\n\tl=dict()\n\tfor i in range(1,21):\n\t\tl[i]=i**2\n\tprint l\n\t\t\n", "idx": 7943, "target": 0}
{"func": "# write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using all() + list comprehension + isdigit() \ntest_list = [(\"45\", \"86\"), (\"Gfg\", \"1\"), (\"98\", \"10\"), (\"Gfg\", \"Best\")] \nprint(\"The original list is : \" + str(test_list)) \nres_ = [sub for sub in test_list if all(ele.isdigit() for ele in sub)] \nprint(\"Filtered Tuples : \" + str(res_)) \n\n", "idx": 7944, "target": 0}
{"func": "# Write a python program to Check and print if string is palindrome using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\nnon_text = \"ABA\"\n \nfor character in non_text:\n    s.push(character)\n \nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n \nif non_text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')\n\n", "idx": 7945, "target": 0}
{"func": "# Write a python function to check the strength of user provided password\n\ndef check_password_strength(password):\n  import re \n  flags = 0\n  while True:   \n      if (len(password)<8): \n          flags = -1\n          break\n      elif not re.search(\"[a-z]\", password): \n          flags = -1\n          break\n      elif not re.search(\"[A-Z]\", password): \n          flags = -1\n          break\n      elif not re.search(\"[0-9]\", password): \n          flags = -1\n          break\n      elif not re.search(\"[_@$]\", password): \n          flags = -1\n          break\n      elif re.search(\"\\s\", password): \n          flags = -1\n          break\n      else: \n          flags = 0\n          print(\"Strong Password\") \n          break  \n  if flags ==-1: \n      print(\"Weak Password\")\n\n", "idx": 7946, "target": 0}
{"func": "# Remove empty strings from the list of strings\nlist2 = [\"Mike\", \"\", \"Emma\", \"Kelly\", \"\", \"Brad\"]\nresList = [i for i in (filter(None, list2))]\nprint(resList)\n\n", "idx": 7947, "target": 0}
{"func": "# write a python function to locate the leftmost value exactly equal to x\ndef index(a, x):\n    from bisect import bisect_left    \n    u = bisect_left(a, x)\n    if u != len(a) and a[u] == x:\n        return u\n    raise ValueError\n\n", "idx": 7948, "target": 0}
{"func": "# write a python function to convert a number from binary to decimal\n \n def binaryToDecimal(n):\n    num = n;\n    dec_value = 0;\n    bases = 1;  \n    temp = num;\n    while(temp):\n        last_digit = temp % 10;\n        temp = int(temp / 10);\n         \n        dec_value += last_digit * bases;\n        bases = bases * 2;\n    return dec_value;\n    \n", "idx": 7949, "target": 0}
{"func": "#55 write a  program to find LCM\n\ndef gcd(x, y):  \n   if x > y:  \n       greater = x  \n   else:  \n       greater = y  \n  while(True):  \n       if((greater % x == 0) and (greater % y == 0)):  \n           gcd = greater  \n           break  \n       greater += 1  \n   return gcd  \n  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \nprint(\"The L.C.M. of\", num1,\"and\", num2,\"is\", gcd(num1, num2)) \n\n", "idx": 7950, "target": 0}
{"func": "#17. Python Program to Display the multiplication Table\nnum2 = 12\n\nfor i in range(1, 11):\n   print(num2, 'x', i, '=', num2*i)\n\n\n", "idx": 7951, "target": 0}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \n\nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \n\nprint(\"intial_list\", str(ini_tuple))\nresulting = [i for i in ini_tuple if i[1] <= 100] \nprint (\"Resultant tuple list: \", str(resulting)) \n\n\n", "idx": 7952, "target": 0}
{"func": "# We have to use the global keyword!\n\ndef my_func():\n    global var1\n    print(var1)  # want to access global variable\n    var1 = 'locally changed'  # changes the gobal variable\nvar1 = 'global'\nmy_func()\nprint(var1)\n\n", "idx": 7953, "target": 0}
{"func": "#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    u = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n\n    while True:\n        for a in factors:\n            if u % a != 0:\n                u += n\n                break\n            if (a == factors[-1] and u % a == 0):\n                return u\n                \n", "idx": 7954, "target": 0}
{"func": "#Write a Python program to find the area and perimeter of a right-angled triangle and print the perimeter and area.\n\nimport math \n\nAB = input(\"Length of the first leg: \") \n12V = input(\"Length of the second leg: \") \nAB = float(AB) \n12V = float(12V) \n\nBC = math.sqrt(AB  2 + 12V  2) S = (AB * 12V) / 2\n\nP = AB + 12V + BC \nprint(\"Area of the triangle: %.2f\" % S)\nprint(\"Perimeter of the triangle: %.2f\" % P) \n\n", "idx": 7955, "target": 0}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres_ = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res_[key] = val \nprint(\"The dictionary after combination : \" + str(res_))\n\n", "idx": 7956, "target": 0}
{"func": "#7 write a  program to remove empty tuples from a list of tuples \ndef Remove(tuple): \n    tuple = filter(None, tuple) \n    return tuple \n  \n", "idx": 7957, "target": 0}
{"func": "# checking for pair sum \nres_ = [ele for ele in test_list if pair_sum(ele, k)] \n  \n", "idx": 7958, "target": 0}
{"func": "# write a program to remove the duplicate words \ns = \"Hello world Hello\"\nr = s.split() \nk = [] \nfor i in r: \n    if (s.count(i)>1 and (i not in k)or s.count(i)==1): \n        k.append(i) \nprint(' '.join(k)) \n\n\n", "idx": 7959, "target": 0}
{"func": "#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.\ndef three_Sum(num):\n    if len(num)<3: return []\n    num.sort()\n    result=[]\n    for i in range(len(num)-2):\n        left=i+1\n        righ=len(num)-1\n        if i!=0 and num[i]==num[i-1]:continue\n        while left<righ:\n            if num[left]+num[righ]==-num[i]:\n                result.append([num[i],num[left],num[righ]])\n                left=left+1\n                righ=righ-1\n                while num[left]==num[left-1] and left<righ:left=left+1\n                while num[righ]==num[righ+1] and left<righ: righ=righ-1\n            elif num[left]+num[righ]<-num[i]:\n                left=left+1\n            else:\n                righ=righ-1\n    return result\n\n", "idx": 7960, "target": 0}
{"func": "# Write a program to print the multiplication table of a given number\n\nnum2 = 9\nfor i in range(1, 11):\n   print(f\"{num2} x {i} = {num2*i}\")\n\n\n", "idx": 7961, "target": 0}
{"func": "# write a python program to define a decorator to cache property\n\nclass PropertyCache(object):\n    \"\"\" a decorator to cache property\n    \"\"\"\n\n    def __init__(self_, func):\n        self_.func = func\n\n    def __get__(self_, obj, cls):\n        if not obj:\n            return self_\n        value = self_.func(obj)\n        setattr(obj, self_.func.__name__, value)\n        return value\n        \n\nclass Foo:\n    def __init__(self_):\n        self_._property_to_be_cached = 'result'\n\n    @PropertyCache\n    def property_to_be_cached(self_):\n        print('compute')\n        return self_._property_to_be_cached\n    \ntest = Foo()\n\nprint(test.property_to_be_cached)\nprint(test.property_to_be_cached)\n\n\n", "idx": 7962, "target": 0}
{"func": "# Write a python program using a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef printDict():\nl=dict()\nl[1]=1\nl[2]=2**2\nl[3]=3**2\nprint (l)\nprintDict()\n\n", "idx": 7963, "target": 0}
{"func": "# Python program to get a string which is n (non-negative integer) copies of a given string.\ndef larger_string(string1, n):\n    resulting = \"\"\n    for i in range(n):\n        resulting = resulting + string1\n    return resulting\n\n\nprint(larger_string('abc', 2))\nprint(larger_string('.py', 3))\n\n\n", "idx": 7964, "target": 0}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstarting=0\nresult = []\nwhile starting < len(input_array):\n    end = starting \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=starting:\n        result.append(\"{0}-->{1}\".format(input_array[starting], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[starting]))\n        print(result)\n    starting = end+1\n\nprint(result)\n\n", "idx": 7965, "target": 0}
{"func": "#82 Write a Python program to count number of substrings with same first and last characters of a given string.\ndef no_of_substring_with_equalEnds(str1): \n\tresulting = 0; \n\tn = len(str1); \n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (str1[i] == str1[j]): \n\t\t\t\tresulting = resulting + 1\n\treturn resulting\n \n", "idx": 7966, "target": 0}
{"func": "#52 write a python program to normalize a list of numbers and print the result\na = [2,4,10,6,8,4]\nhamin, amax = min(a), max(a)\nfor i, val in enumerate(a):\n    a[i] = (val-hamin) / (amax-hamin)\nprint(a)\n\n", "idx": 7967, "target": 0}
{"func": "# Write a function that returns derivative derivative relu value of the input\ndef derivative_relu(y:float) -> float:\n    y = 1 if y > 0 else 0\n    return y\n\n\n", "idx": 7968, "target": 0}
{"func": "# This function computes GCD \ndef compute_gcd(y, y):\n\n   while(y):\n       y, y = y, y % y\n   return y\n\n", "idx": 7969, "target": 0}
{"func": "# write a program to print the nth fibonacci number\nn2 = 1\nn2 = 1\nn = 5\nfor _ in range(n):\n   n2, n2 = n2, n2 + n2\nprint(n2)\n\n\n", "idx": 7970, "target": 0}
{"func": "# write a Python function that takes list of tuples as input and sort those alphabetically\ndef SortTuple(tup): \n      \n    k = len(tup) \n      \n    for i in range(k): \n        for j in range(k-i-1): \n              \n            if tup[j][0] > tup[j + 1][0]: \n                tup[j], tup[j + 1] = tup[j + 1], tup[j] \n                  \n    return tup \n\n", "idx": 7971, "target": 0}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnumbers = secrets.randbelow(30)\nprint(numbers)\n\n", "idx": 7972, "target": 0}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres_ = 1\nfor ele in test_list: \n    try: \n        res_ *= int(ele) \n    except : \n        pass\nprint(\"Product of integers in list : \" + str(res_))\n\n\n", "idx": 7973, "target": 0}
{"func": "# Python program to find the digits which are absent in a given mobile number.\ndef absent_digits(k):\n    all_nums = set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    k = set([int(i) for i in k])\n    k = k.symmetric_difference(all_nums)\n    k = sorted(k)\n    return k\n\n\nprint(absent_digits([9, 8, 3, 2, 2, 0, 9, 7, 6, 3]))\n\n\n\n\n", "idx": 7974, "target": 0}
{"func": "# Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. \nfreqs = {}   # frequency of words in text\nline = input()\nfor word in line.split():\n    freqs[word] = freqs.get(word,0)+1\n\nwords = freqs.keys()\nwords.sort()\n\nfor w in words:\n    print(\"%s:%d\" % (w,freqs[w]))\n\n", "idx": 7975, "target": 0}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres_ = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res_ = res_ + test_str[idx].upper() \n    else: \n       res_ = res_ + test_str[idx].lower() \nprint(res_)\n\n", "idx": 7976, "target": 0}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (n*l*temp)/volume\n\n", "idx": 7977, "target": 0}
{"func": "# Write a python function to print powers of 2, for given number of terms\ndef two_power(terms):\n    resulting = list(map(lambda x: 2 ** x, range(terms)))\n\n    print(f\"The total terms are: {terms}\")\n    for i in range(terms):\n       print(f\"2^{i} = {resulting[i]}\")\n\n\n", "idx": 7978, "target": 0}
{"func": "# Write a function which Given a keyboard layout in XY plane, where each English uppercase letter is located at some coordinate, say (0,0) for A, return the minimum total distance to type such string using only two fingers. The distance distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. \n\nfrom functools import lru_cache\n\ndef minimumDistance(word):\n    def getDist(a, b):\n        if a==-1 or b==-1:\n            return 0\n        else:\n            u = ord(a) - ord('a')\n            j = ord(b) - ord('b')\n            dist = abs(u//6 - j//6) + abs(u%6 - j%6)\n            return dist\n            \n    @lru_cache(maxsize=None)\n    def getMinDist(l, r, k):\n        if k==len(word):\n            return 0\n        next = word[k].lower()\n        ret = min(getMinDist(next,r,k+1)+getDist(l,next), getMinDist(l,next,k+1)+getDist(r,next))\n        return ret\n            \n    return(getMinDist(-1,-1,0))\n\n\t\n", "idx": 7979, "target": 0}
{"func": "#27 write a function to generate and print a random number between 0 and 22\nimport random\nk = random.randint(0,22)\nprint(k)\n\n", "idx": 7980, "target": 0}
{"func": "# Write a python program to Implement Bubble sort and print the sorted list for the below list\n\ndef bubble_sort(elist):\n    for i in range(len(elist) - 1, 0, -1):\n        no_swap = True\n        for j in range(0, i):\n            if elist[j + 1] < elist[j]:\n                elist[j], elist[j + 1] = elist[j + 1], elist[j]\n                no_swap = False\n        if no_swap:\n            return\n \n \nelist = [2, 3, 5, 6, 4, 5]\nbubble_sort(elist)\nprint('Sorted list: ', end='')\nprint(elist)\n\n", "idx": 7981, "target": 0}
{"func": "# Write a Python function that takes the age and return the age in days.\ndef calc_age(age):\n    calculations = age*365\n    return calculations\n\n", "idx": 7982, "target": 0}
{"func": "# Write a function to return the area of a rhombus\ndef area(d1, a): \n    d1 = (4*(a**2) - d1**2)**0.5\n    area = 0.5 * d1 * d1 \n    return(area) \n\n", "idx": 7983, "target": 0}
{"func": "# Write a python program to Implement Shell sort and print the sorted list for the below list\n\ndef gaps(size):\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**k - 1\n \n \ndef shell_sort(alist):\n    def insertion_sort_with_gap(gap):\n        for i in range(gap, len(alist)):\n            temp = alist[i]\n            k = i - gap\n            while (k >= 0 and temp < alist[k]):\n                alist[k + gap] = alist[k]\n                k = k - gap\n            alist[k + gap] = temp\n \n    for g in gaps(len(alist)):\n        insertion_sort_with_gap(g)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nshell_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 7984, "target": 0}
{"func": "# Write a function to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    hole = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        hole[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        while hole[count] > 0:\n            hole[count] -= 1\n            a[i] = count + my_min\n            i += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor i in range(0, len(a)):\n    print(a[i], end=\" \")\n\n\n\n", "idx": 7985, "target": 0}
{"func": "# write a program to print the current date and time\nfrom datetime import datetime\nstill = datetime.still()\nprint(still)\n\n\n", "idx": 7986, "target": 0}
{"func": "# write a python function that returns the gcd of two numbers\ndef gcd(x, y):\n   if x > y:\n      larger = y\n   else:\n      larger = x\n\n   for i in range(1, larger + 1):\n      if((x % i == 0) and (y % i == 0)):\n         gcd = i\n   \n   return gcd\n\n\n", "idx": 7987, "target": 0}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    h = 9.8\n    return (mass*h*height)\n\n", "idx": 7988, "target": 0}
{"func": "#60 Write a function program to reverse the digits of an integer.\ndef reverse_integer(x):\n        signs = -1 if x < 0 else 1\n        x *= signs\n\n        # Remove leading zero in the reversed integer\n        while x:\n            if x % 10 == 0:\n                x /= 10\n            else:\n                break\n\n        # string manipulation\n        x = str(x)\n        lst = list(x)  # list('234') returns ['2', '3', '4']\n        lst.reverse()\n        x = \"\".join(lst)\n        x = int(x)\n        return signs*x\n\n", "idx": 7989, "target": 0}
{"func": "# write a python program to check if a number is a prime number\nnum2 = int(input(\"Enter a number: \"))\n\nif num2 > 1:\n   for i in range(2,num2):\n       if (num2 % i) == 0:\n           print(num2,\"is not a prime number\")\n           print(i,\"times\",num2//i,\"is\",num2)\n           break\n   else:\n       print(num2,\"is a prime number\")\nelse:\n   print(num2,\"is not a prime number\")\n\n", "idx": 7990, "target": 0}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres_ = dict() \nfor ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val = int(str(ele)[mid_idx:]) \n  \n    res_[key] = val \n  \nprint(\"Constructed Dictionary : \" + str(res_)) \n\n", "idx": 7991, "target": 0}
{"func": "# Write a program that accepts a sentence and calculate the number of letters and digits.\ns = input()\nl={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\n    if c.isdigit():\n        l[\"DIGITS\"]+=1\n    elif c.isalpha():\n        l[\"LETTERS\"]+=1\n    else:\n        pass\nprint(\"LETTERS\", l[\"LETTERS\"])\nprint(\"DIGITS\", l[\"DIGITS\"])\n\n", "idx": 7992, "target": 0}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flatted =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flatted\n\n", "idx": 7993, "target": 0}
{"func": "# write a python program to expain local and global scope\n\ndef f1():\n    y = 'enclosing'\n    def g():\n        y = 'local'\n        return y\n    y=g()\n    return y\nobj2 = f1()\nprint('explain local scope:',obj2)\n\n", "idx": 7994, "target": 0}
{"func": "# Write a python Class to calculate area of a rectangle and print the area\n\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.length\na=6\nc=4\nobj=rectangle(a,c)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 7995, "target": 0}
{"func": "# write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\ndef EvenGenerator(k):\n    i=0\n    while i<=k:\n        if i%2==0:\n            yield i\n        i+=1\nk=int(raw_input())\nvalues = []\nfor i in EvenGenerator(k):\n    values.append(str(i))\nprint \",\".join(values)\n\n", "idx": 7996, "target": 0}
{"func": "# write a python program to calculate the sum of numbers using reduce and print it\nfrom functools import reduce\nsyms = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\ntotal_sum = reduce(lambda a, b: a + b, syms)\nprint(f'Sum: {total_sum}')\n\n\n", "idx": 7997, "target": 0}
{"func": "# 18. python program to compare strings\ndef compare_using_equals(n):\n    a = 'a long string that is not intered' * 200\n    c = 'a long string that is not intered' * 200\n    for i in range(n):\n        if a == c:\n            pass\n\n", "idx": 7998, "target": 0}
{"func": "# write a Python program to print all the prime numbers within an interval\nlower = 900\nlower = 1000\nprint(\"Prime numbers between\", lower, \"and\", lower, \"are:\")\nfor num in range(lower, lower + 1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\t\t   \n\n\t\t   \n", "idx": 7999, "target": 0}
{"func": "# write a python function to insert an element into sorted python list\n\ndef insert(lists, n): \n      \n    for i in range(len(lists)): \n        if lists[i] > n: \n            index = i \n            break\n      \n \n    lists = lists[:i] + [n] + lists[i:] \n    return lists\n\n", "idx": 8000, "target": 0}
{"func": "# - sign for descended values, omit if low-high sorting required \nres_ = {val[0] : val[1] for val in sorted(test_dict.items(), key = lambda x: (-x[1],x[0]))} \n  \n", "idx": 8001, "target": 0}
{"func": "# write Python code to demonstrate to remove the tuples if certain criteria met \nini_tuple = [('b', 100), ('c', 200), ('c', 45), \n                        ('d', 876), ('e', 75)] \nprint(\"intial_list\", str(ini_tuple)) \nresulting = list(filter(lambda x: x[1] <= 100, ini_tuple)) \nprint (\"Resultant tuple list: \", str(resulting)) \n\n\n", "idx": 8002, "target": 0}
{"func": "#Write a function to convert Kilometers to Miles\ndef Kilometers_to_Miles(km):\n    conv_fac = 0.621371\n    kilometers = km * conv_fac\n    return kilometers\n\n9. \n", "idx": 8003, "target": 0}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\nstudents = json.loads(studentJson)\nif not (students.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(students.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 8004, "target": 0}
{"func": "# Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\ndef printList():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint lu\n\t\t\n", "idx": 8005, "target": 0}
{"func": "# Write a python program to program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1\ndef f(k):\nif k == 0 :\nreturn 0\nelse:\nreturn f(k-1)+100\nk = int(input(\"Enter Number: \"))\nprint(\"f(n-1)+100 = \", f(k))\n\n", "idx": 8006, "target": 0}
{"func": "# write a python function to Count the Number of Digits in a Number\ndef count_digits():\n    n = int(input(\"Enter number:\"))\n    counts = 0\n    while n > 0:\n        counts = counts + 1\n        n = n // 10\n    return counts\n\n\n", "idx": 8007, "target": 0}
{"func": "#57 Write a Python function to find the single number in a list that doesn't occur twice.\ndef single_number(arr):\n    resulting = 0\n    for i in arr:\n        resulting ^= i\n    return resulting\n\n", "idx": 8008, "target": 0}
{"func": "# Write a function to Find the size of a Tuple in Python without garbage values\nTuples = (10,20)\ndef sizeOfTuple(tup):\n  return f'Size of Tuple: {str(Tuples.__sizeof__())} bytes' \n\n", "idx": 8009, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Perfect Number\n\ndef perfect_no_check(n):\n    sum. = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum. = sum. + i\n    if (sum. == n):\n        return True\n    else:\n        return False\n\n", "idx": 8010, "target": 0}
{"func": "# Given a string, return the sum and average of the digits that appear in the string, ignoring all other characters\nimport re\n\ninputStr = \"English = 78 Science = 83 Math = 68 History = 65\"\nmarkList = [int(num) for num in re.findall(r'\\b\\d+\\b', inputStr)]\ntotalMarks = 0\nfor mark in markList:\n  totalMarks+=mark\n\npercentages = totalMarks/len(markList)  \nprint(\"Total Marks is:\", totalMarks, \"Percentage is \", percentages)\n\n", "idx": 8011, "target": 0}
{"func": "#55 Write a Python function to check if a number is a power of a given base.\nimport math\n\ndef isPower (n, base):\n    if base == 1 and n != 1:\n        return False\n    if base == 1 and n == 1:\n        return True\n    if base == 0 and n != 1:\n        return False\n    powers = int (math.log(n, base) + 0.5)\n    return base ** powers == n\n\n", "idx": 8012, "target": 0}
{"func": "#54 Write a Python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = n // 2\n    x = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in x: return False\n        x.add(x)\n    return True\n\n", "idx": 8013, "target": 0}
{"func": "# Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File\ndef count_letter(fname, l):\n    j = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter==l):\n                        j=j+1\n    return j\n\n", "idx": 8014, "target": 0}
{"func": "# write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list\ndef divisible_sum_pairs(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 1):\n        k = i + 1\n        while k < n:\n            if ((arr[i] + arr[k]) % k) == 0:\n                count += 1\n            k += 1\n    return count\n\n\nimport math\n\n\n", "idx": 8015, "target": 0}
{"func": "#23 write a program to print even length words in a string  \n  \ndef printWords(\u2019): \n    \u2019 = \u2019.split(' ')  \n    for word in \u2019:  \n        if len(word)%2==0: \n            print(word)  \n", "idx": 8016, "target": 0}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        j = char.isupper()   \n        if j == True: \n            return True\n    if(j != 1): \n        return False\n\n", "idx": 8017, "target": 0}
{"func": "# write  Function to left rotate n by d bits \ndef leftRotate(k, d): \n    INT_BITS = 32\n    return (k << d)|(k >> (INT_BITS - d)) \n\n\nk = 16\nd = 2\n\nprint(\"Left Rotation of\",k,\"by\",d,\"is\",end=\" \") \nprint(leftRotate(k, d)) \n\n", "idx": 8018, "target": 0}
{"func": "# Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is\n\ndate=\"20/04/2021\"\ndcfldd,mm,yy=date.split('/')\ndcfldd=int(dcfldd)\nmm=int(mm)\nyy=int(yy)\nif(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):\n    max1=31\nelif(mm==4 or mm==6 or mm==9 or mm==11):\n    max1=30\nelif(yy%4==0 and yy%100!=0 or yy%400==0):\n    max1=29\nelse:\n    max1=28\nif(mm<1 or mm>12):\n    print(\"Date is invalid.\")\nelif(dcfldd<1 or dcfldd>max1):\n    print(\"Date is invalid.\")\nelif(dcfldd==max1 and mm!=12):\n    dcfldd=1\n    mm=mm+1\n    print(\"The incremented date is: \",dcfldd,mm,yy)\nelif(dcfldd==31 and mm==12):\n    dcfldd=1\n    mm=1\n    yy=yy+1\n    print(\"The incremented date is: \",dcfldd,mm,yy)\nelse:\n    dcfldd=dcfldd+1\n    print(\"The incremented date is: \",dcfldd,mm,yy)\n\n\n", "idx": 8019, "target": 0}
{"func": "# write a python program to add and square a range of number\ny = [i**+1 for i in range(3)]; print(y)\n\n", "idx": 8020, "target": 0}
{"func": "# write Program to demonstrate conditional operator \na, b = 10, 20\nmins = a if a < b else b \nprint(mins) \n\n", "idx": 8021, "target": 0}
{"func": "# change this value for a different result\nnum2 = 16\n\nif num2 < 0:\n   print(\"Enter a positive number\")\nelse:\n   print(\"The sum is\",recur_sum(num2))\n\n\n", "idx": 8022, "target": 0}
{"func": "# Write a Python program to remove and print every third number from a list of numbers until the list becomes empty.\nnum2 = [10,20,30,40,50,60,70,80,90]\nlen_list = len(num2)\nposition = 3 - 1\nidx = 0\nwhile len_list > 0:\n    idx = (idx+position) % len_list\n    print(num2.pop(idx))\n    len_list-=1 \n\t\n\t\n\t\n", "idx": 8023, "target": 0}
{"func": "# write a python program to convert lower case to upper for list of elements\n\ny = ['ab', 'cd']\nfor i in y:\n    print(i.upper())\n\n", "idx": 8024, "target": 0}
{"func": "# write a python function to Check if a Substring is Present in a Given String\ndef checksubstring(string,sub_string):\n\tif(string.find(sub_str)==-1):\n      return False\n\telse_:\n\t\treturn True\n\t\t\n\t\t\n\t\t\n", "idx": 8025, "target": 0}
{"func": "# Write a python program to uppercase strings using lambda and map\npeoples = [\"Darcy\", \"Christina\", \"Diana\"]\npeeps = list(map(lambda name: name.upper(), peoples))\nprint(peeps)\n\n", "idx": 8026, "target": 0}
{"func": "# Write a python program to digit sum of a number\nDigits = input(\"Enter a number: \")\nsums = int(Digits[0])\nnumber = Digits[0]\nfor i in Digits[1::]:\nsums+= int(i)\nnumber +=\" + {}\".format(i)\nprint(\"Sum of {} is {}\".format(number,sums))\n\n\n", "idx": 8027, "target": 0}
{"func": "# Write a Python program to sort a list of tuples by second Item\ndef Sort_Tuple(oan):  \n\n    return(sorted(oan, key = lambda x: x[1]))   \n  \noan = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]  \n\nprint(Sort_Tuple(oan)) \n\n", "idx": 8028, "target": 0}
{"func": "# write a python program that takes input an integer and find sum of series with cubes of first n natural numbers using list comprehension which ta\nE = int(input(\"Enter Integer \"))\nlst = [i**3 for i in range(1, E + 1)]\nprint(sum(lst)) \n\n", "idx": 8029, "target": 0}
{"func": "#95 write a program to Remove leading zeros from an IP address\n\nimport re\ndef removeLeadingZeros(IP):\n    modified_ip = re.sub(regex, '.', IP)\n    print(modified_ip)\n\n\nif __name__ == '__main__' : \n\t\n\tIP = \"216.08.094.196\"\n\tremoveLeadingZeros(IP)\n\n", "idx": 8030, "target": 0}
{"func": "#66 Write a Python function to push all zeros to the end of a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    y = [ i for i in num_list if i != 0]\n    y.extend(a)\n    return(y)\n\n", "idx": 8031, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Prime Number\n\ndef prime_no_check(a):\n    j=0\n    for i in range(2,a//2+1):\n        if(a%i==0):\n            j=j+1\n    if(j<=0):\n        return True\n    else:\n        return False\n\n", "idx": 8032, "target": 0}
{"func": "# Write a Python Program to Remove the Characters of Odd Index Values in a String\n\ndef modify(string):  \n    penultimate = \"\"   \n    for i in range(len(string)):  \n        if i % 2 == 0:  \n            penultimate = penultimate + string[i]  \n    return penultimate\n\n", "idx": 8033, "target": 0}
{"func": "# write a python program to input a number and check whether a given number is a palindrome.\n\nk=int(input(\"Enter number:\"))\ntemp=k\nrev=0\nwhile(k>0):\n    dig=k%10\n    rev=rev*10+dig\n    k=k//10\nif(temp==rev):\n    print(\"The number is a palindrome!\")\nelse:\n    print(\"The number isn't a palindrome!\")\n    \n", "idx": 8034, "target": 0}
{"func": "# write a function to check if a number is perfect square or not\nimport math\ndef checksquare(num):\n    y = int(math.sqrt(num))\n    if y * y == num:\n        return True\n    return False\n\n", "idx": 8035, "target": 0}
{"func": "# write a python class that defines a Tree and add child\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.parent = None\n        self.children =[]\n    \n    def add_child(self, non_child):\n        non_child.parent = self\n        self.children.append(non_child)\n\nt = TreeNode(\"Arun\")\nt.add_child(TreeNode(\"Shruthi\"))\n\n\n", "idx": 8036, "target": 0}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nH = 'Best'\nres = [sub[H] for sub in test_list if H in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 8037, "target": 0}
{"func": "# Write a python class to implement PriorityQueue\n\nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n\n    def isEmpty(self):\n        return len(self.queue) == []\n\n\n    def insert(self, data):\n        self.queue.append(data)\n\n\n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            items = self.queue[max]\n            del self.queue[max]\n            return items\n        except IndexError:\n            print()\n            exit()\n\t\t\t\n\n\t\t\n\t\t\t\n  \n", "idx": 8038, "target": 0}
{"func": "# write a python program to check and print if a number is prime\nnum2 = 407\nif num2 > 1:\n   for i in range(2,num2):\n      if (num2 % i) == 0:\n         print(num2,\"is not a prime number\")\n         break\n   else:\n      print(num2,\"is a prime number\")\nelse:\n   print(num2,\"is not a prime number\")\n\n\n", "idx": 8039, "target": 0}
{"func": "# write Python3 code to demonstrate list slicing from K to end using None \ntest_list = [5, 6, 2, 3, 9] \nK = 2\nres_ = test_list[K : None] \nprint (f\"The sliced list is :{str(res_)} \"  ) \n\n", "idx": 8040, "target": 0}
{"func": "# write a python program that prints the area of a circle\nimport math\nradii = 5\nprint(f'Area: {math.pi * radii * radii}')\n\n\n", "idx": 8041, "target": 0}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist2 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist2 = [ele for ele in list2 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list2)\n\n\n", "idx": 8042, "target": 0}
{"func": "# write a python program to create a directory named path\npaths = 'test'\nimport os\nos.mkdir(paths)\n\n", "idx": 8043, "target": 0}
{"func": "# Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.\ndef no_notes(a):\n  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n  y = 0\n  for i in range(9):\n    q = Q[i]\n    y += int(a / q)\n    a = int(a % q)\n  if a > 0:\n    y = -1\n  return y\n\n\n", "idx": 8044, "target": 0}
{"func": "# write a python program to check whether a person is eligible to vote or not\n\nage=23\nif age>=18:\n        statuses=\"Eligible\"\nelse:\n    statuses=\"Not Eligible\"\nprint(\"You are \",statuses,\" for Vote.\")\n\n", "idx": 8045, "target": 0}
{"func": "# Pick a random character from a given String\nimport random\n\nname = 'pynative'\nchars = random.choice(name)\nprint(\"random char is \", chars)\n\n", "idx": 8046, "target": 0}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres = '' \ndigging = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        digging += ele \n    else: \n        res += ele \n  \nres += digging \n\nprint(\"Strings after digits at end : \" + str(res))\n\n", "idx": 8047, "target": 0}
{"func": "# Write a Python program to find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 and print the result.\n\nsv = []\nfor x in range(1500, 2700):\n    if (x%7==0) and (x%5==0):\n        sv.append(str(x))\nprint(\"\\n\".join(sv))\n\n", "idx": 8048, "target": 0}
{"func": "# write a python program that takes input a list and square root every term using list comprehension\n\ns2 = eval(input(\"Enter list \"))\nprint([i**0.5 for i in s2])\n\n", "idx": 8049, "target": 0}
{"func": "# Write a Python function to Count and print the Number of Vowels Present in a String using Sets\n\ndef count_vowels(s):\n    count = 0\n    consonants = set(\"aeiou\")\n    for letter in s:\n        if letter in consonants:\n            count += 1\n    return count\n\n", "idx": 8050, "target": 0}
{"func": "# write a python program to count the number of lower case in a string\n\nstring=\"This is a very good place to Visit\"\ncounts=0\nfor i in string:\n      if(i.islower()):\n            counts=counts+1\nprint(f\"The number of lowercase characters is:{counts}\")\n\n", "idx": 8051, "target": 0}
{"func": "# By using list comprehension, please write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nlu = [12,24,35,70,88,120,155]\nlu = [x for (i,x) in enumerate(lu) if i not in (0,4,5)]\nprint(lu)\n\n", "idx": 8052, "target": 0}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres_ = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res_))\n\n", "idx": 8053, "target": 0}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    counts = {} \n      \n    for word in str1.split(): \n        counts[word] = counts.get(word, 0) + 1\n      \n    for word in str2.split(): \n        counts[word] = counts.get(word, 0) + 1\n  \n    return [word for word in counts if counts[word] == 1]\n\n", "idx": 8054, "target": 0}
{"func": "# 17 write a function to initialize a linked list\n\n\nclass Cell:\n    def __init__(self_, val):\n        self_.val = val\n        self_.next = None\n\n\nclass LinkedList:\n    def __init__(self_):\n        self_.head = None\n\n\n", "idx": 8055, "target": 0}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumbers = 7536\nwhile (numbers > 0):\n    digit = numbers % 10\n    numbers = numbers // 10\n    print(digit, end=\" \")\n\n", "idx": 8056, "target": 0}
{"func": "# initializing prefix  \ntemp = \"Pro\"\n\nl={}\nfor key,value in test_dict.items():\n    l.update({temp+key:value})\nprint(l)\n\n\n", "idx": 8057, "target": 0}
{"func": "# write a generator function in python to generate infinite square of numbers using yield\ndef nextSquare(): \n    u = 1;  \n    # An Infinite loop to generate squares  \n    while True: \n        yield u*u                 \n        u += 1\n\n", "idx": 8058, "target": 0}
{"func": "# write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nlu = [3,6,7,8]\nshuffle(lu)\nprint lu\n\n", "idx": 8059, "target": 0}
{"func": "# Write a Python function that calculate area of a equilateral polygon\n\nimport math\ndef area(no_of_sides, circumradius):\n    side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)\n    apothegms = circumradius * math.cos(math.pi / no_of_sides)\n    return no_of_sides / 2 * side_length * apothegms\n\n", "idx": 8060, "target": 0}
{"func": "# write a python program to print all the prime numbers within an interval\n\nhigher = 900\nupper = 1000\n\nprint(\"Prime numbers between\", higher, \"and\", upper, \"are:\")\n\nfor num in range(higher, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 8061, "target": 0}
{"func": "# write a Python function to Remove all duplicates from a given string\ndef removeDuplicate(str): \n    \u2019=set(str) \n    \u2019=\"\".join(\u2019) \n    print(\"Without Order:\",\u2019) \n    t=\"\" \n    for i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n    print(\"With Order:\",t) \n    \nstr1=\"geeksforgeeks\"\nremoveDuplicate(str1) \n\n\n", "idx": 8062, "target": 0}
{"func": "# function to obtain the time in minutes form \ndef difference(h1, m1, h2, m2): \n      \n    # convert h1 : m1 into minutes \n    t1 = h1 * 60 + m1 \n      \n    # convert h2 : m2 into minutes  \n    t2 = h2 * 60 + m2 \n      \n    if (t1 == t2):  \n        print(\"Both are same times\") \n        return \n    else: \n          \n        # calculating the difference \n        diff = t2-t1 \n          \n    # calculating hours from difference \n    h = (int(diff / 60)) % 24\n      \n    # calculating minutes from difference \n    l = diff % 60\n  \n    print(h, \":\", l) \n  \n", "idx": 8063, "target": 0}
{"func": "# 31. Python Program to find Diameter, Circumference, and Area Of a Circle\nimport math\n\ndef find_Diameter(radius):\n    return 2 * radius\n\ndef find_Circumference(radius):\n    return 2 * math.pi * radius\n\ndef find_Area(radius):\n    return math.pi * radius * radius\n\nl = float(input(' Please Enter the radius of a circle: '))\n\ndiameter = find_Diameter(l)\ncircumference = find_Circumference(l)\narea = find_Area(l)\n\nprint(\"\\n Diameter Of a Circle = %.2f\" %diameter)\nprint(\" Circumference Of a Circle = %.2f\" %circumference)\nprint(\" Area Of a Circle = %.2f\" %area)\n\n", "idx": 8064, "target": 0}
{"func": "# write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit import Timer\n\u00b4 = Timer(\"for i in range(100):1+1\")\nprint \u00b4.timeit()\n\n", "idx": 8065, "target": 0}
{"func": "#78 Write a Python function to find the greatest common divisor (gcd) of two integers.\ndef Recurgcd(a, b):\n\tlow = min(a, b)\n\tlow = max(a, b)\n\n\tif low == 0:\n\t\treturn low\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn Recurgcd(low, low%low)\n\n", "idx": 8066, "target": 0}
{"func": "# Write a Python program to find the total number of letters and digits in a given string\nstr2='TestStringwith123456789'\nno_of_letters, no_of_digits = 0,0\nfor c in str2:\n  no_of_letters += c.isalpha()\n  no_of_digits += c.isnumeric()\n\nprint(no_of_letters)\nprint(no_of_digits)\n\n\n", "idx": 8067, "target": 0}
{"func": "#87 write a program Tower of Hanoi \n\ndef hanoi(y):\n    global repN\n    repN += 1\n    if y == 1:\n        return 2\n    \n    else:\n        return 3*hanoi(y-1) + 2\n    \ny = int(input(\"ENTER THE NUMBER OF DISKS: \"))\n\nglobal repN\nrepN =0\n\nprint('NUMBER OF STEPS: ', hanoi(y), ' :', repN)\n\n", "idx": 8068, "target": 0}
{"func": "# write a python function to return random selection from itertools.product(*args, **kwds)\ndef random_product(*args, repeat=1):\n    import random\n    pool = [tuple(pool) for pool in args] * repeat\n    return tuple(map(random.choice, pool))\n\n", "idx": 8069, "target": 0}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (pressure*volume)/n*l\n\n", "idx": 8070, "target": 0}
{"func": "# Generate a list by list comprehension\nlists = [x for x in range(10)]\nprint(f\"List Generated by list comprehension:{lists}\")\n\n", "idx": 8071, "target": 0}
{"func": "# Write a function for vertical concatenating of a matrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    E = 0\n    while E != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[E]\n            except IndexError: pass\n        res.append(temp)\n        E = E + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 8072, "target": 0}
{"func": "# Write a program which can compute the factorial of a given numbers. The results should be printed in a comma-separated sequence on a single line. \ndef fact(y):\n    if y == 0:\n        return 1\n    return y * fact(y - 1)\ny=int(raw_input())\nprint fact(y)\n\n", "idx": 8073, "target": 0}
{"func": "#14 Write a python program to find elements with the same index and print them\n\nlist2 = [3, 1, 2, 5, 4, 10, 6, 9] \n \nlist2 = [] \nfor idx, ele in enumerate(list2): \n    if idx == ele: \n        list2.append(ele) \n  \n", "idx": 8074, "target": 0}
{"func": "# write a  program to get the matched elements from two list \na = [1, 2, 3, 4, 5]\nc = [9, 8, 7, 6, 5]\n[i for i, j in zip(a, c) if i != j]\n\n\n", "idx": 8075, "target": 0}
{"func": "# write a python function to sort a list of tuples by the second Item \n  \ndef Sort_Tuple(tup):  \n      \n    # getting length of list of tuples \n    th = len(tup)  \n    for i in range(0, th):  \n          \n        for j in range(0, th-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n  \n", "idx": 8076, "target": 0}
{"func": "# illustrate the test for equality (==) vs. identity (is)\na = 'hello world!'\nc = 'hello world!'\nprint('a is b,', a is c)\nprint('a == b,', a == c)\n\n", "idx": 8077, "target": 0}
{"func": "# write Python Program to Read the Contents of a File\na=str(input(\"Enter the name of the file with .txt extension:\"))\nfile2=open(a,'r')\nlines=file2.readline()\nwhile(lines!=\"\"):\n    print(lines)\n    lines=file2.readline()\nfile2.close()\t\n\n\n\n", "idx": 8078, "target": 0}
{"func": "# Write a Python function to find the N-th number which is both square and cube\ndef nth_sq_and_cube(N):\n\tD = N**6\n\treturn D\n\n\n", "idx": 8079, "target": 0}
{"func": "# By using list comprehension, please write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nlu = [12,24,35,24,88,120,155]\nlu = [x for x in lu if x!=24]\nprint(lu)\n\n", "idx": 8080, "target": 0}
{"func": "#23 how to check nth prime in python\ny=int(input())\nn,c=1,0\nwhile(c<y):\n    n+=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            break\n    if(i==n):\n        c=c+1\n\n", "idx": 8081, "target": 0}
{"func": "#58 Write a Python function to find the single element in a list where every element appears three times except for one.\ndef single_number(arr):\n    those, twos = 0, 0\n    for x in arr:\n        those, twos = (those ^ x) & ~twos, (those & x) | (twos & ~x)\n    assert twos == 0\n    return those\n\n", "idx": 8082, "target": 0}
{"func": "# write a python program for creating the thread\nimport threading\nfrom threading import Thread\nimport time\n\ndef print_time( threadName, delay):\n    counts = 0\n    while counts < 5:\n        time.sleep(delay)\n        counts += 1\n        print(\"%s: %s\" % ( threadName, time.ctime(time.time()) ))\n\n", "idx": 8083, "target": 0}
{"func": "# write a python function to use a predicate and return entries particition into false entries and true entries\ndef partition(pred, iterable):\n    from itertools import filterfalse, tee\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t2, t2 = tee(iterable)\n    return filterfalse(pred, t2), filter(pred, t2)\n\n", "idx": 8084, "target": 0}
{"func": "# input age\nage = int(input(\"Enter Age : \"))\n\nif age>=18:\n        statuses=\"Eligible\"\nelse:\n    statuses=\"Not Eligible\"\n\nprint(\"You are \",statuses,\" for Vote.\")\n\n", "idx": 8085, "target": 0}
{"func": "# write a python function to get the most common word in text\ndef most_common(text):\n    b = Counter(text)\n    return b.most_common(1)\n\n\n", "idx": 8086, "target": 0}
{"func": "# write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.\ndef min_max():\n    syms = [int(x) for x in input().strip().split(' ')]\n    print(sum(syms) - max(syms), sum(syms) - min(syms))\n\n\n", "idx": 8087, "target": 0}
{"func": "# Write a python function to get the volume of a prism with base area & height as input\ndef prism_volume(base_area, height):\n    volumes = base_area * height\n    return volumes\n\n", "idx": 8088, "target": 0}
{"func": "# write a python function to return words in a sentence in sorted order\ndef get_sorted_words(sentence):\n   phrases = [word for word in sentence.split()]\n   phrases.sort()\n   return phrases\n\n\n", "idx": 8089, "target": 0}
{"func": "# write a Python code demonstrate the working of sorted() with lambda\n\nlise = [{ \"name\" : \"Nandini\", \"age\" : 20}, \n{ \"name\" : \"Manjeet\", \"age\" : 20 },\n{ \"name\" : \"Nikhil\" , \"age\" : 19 }]\n\nprint (\"The list printed sorting by age: \")\nprint (sorted(lise, key = lambda i: i['age']))\nprint (\"\\r\")\n\n", "idx": 8090, "target": 0}
{"func": "# write a Python function to find surface area of the Pentagonal Prism \n\ndef surfaceArea(a, b, g): \n    return 5 * a * b + 5 * b * g \n\na = 5\nb = 3\ng = 7\n\nprint(\"surface area =\", surfaceArea(a, b, g))\n\n", "idx": 8091, "target": 0}
{"func": "# write a python program to add two matrices and print them\nY = [[1,2,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[9,8,7],\n    [6,5,4],\n    [3,2,1]]\n\nresult = [[Y[i][j] + Y[i][j]  for j in range\n(len(Y[0]))] for i in range(len(Y))]\n\nfor r in result:\n    print(r)\n\n", "idx": 8092, "target": 0}
{"func": "# Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list\n\ndef cocktail_shaker_sort(elist):\n    def swap(i, j):\n        elist[i], elist[j] = elist[j], elist[i]\n \n    upper = len(elist) - 1\n    lower = 0\n \n    no_swap = False\n    while (not no_swap and upper - lower > 1):\n        no_swap = True\n        for j in range(lower, upper):\n            if elist[j + 1] < elist[j]:\n                swap(j + 1, j)\n                no_swap = False\n        upper = upper - 1\n \n        for j in range(upper, lower, -1):\n            if elist[j - 1] > elist[j]:\n                swap(j - 1, j)\n                no_swap = False\n        lower = lower + 1\n \n \nelist = [2, 3, 5, 6, 4, 5]\ncocktail_shaker_sort(elist)\nprint('Sorted list: ', end='')\nprint(elist)\n\n", "idx": 8093, "target": 0}
{"func": "# write a python function to count number of vowels in a string\ndef count_vowels(text):\n    r = set('aeiou')\n    for i in r:\n        print(f'\\n {i} occurs {text.count(i)} times')\n\n\n", "idx": 8094, "target": 0}
{"func": "#s=[]\n\u2019=list(set(l))\nprint(\" \".join(i for i in \u2019))\n\n\n", "idx": 8095, "target": 0}
{"func": "# Write a python function to get the volume of a cube with side as input\ndef cube_volume(side):\n    volumes = side ** 3\n    return volumes \n\n", "idx": 8096, "target": 0}
{"func": "# Write a python program to return dict with {student:highest score} USING MAP+LAMBDA\nmidterms = [80, 91, 78]\nfinals = [98, 89, 53]\nstudents__and = ['dan', 'ang', 'kate']\nfinal_grades = dict(zip(students__and,map(lambda pair: max(pair),zip(midterms, finals))))\n\n", "idx": 8097, "target": 0}
{"func": "# Write a python program to Count the Occurrences of a Word in a Text File\n\nlname = input(\"Enter file name: \")\nword='the'\nk = 0\n \nwith open(lname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(f\"Frequency of Occurrences of the word {a} is:\")\nprint(k)\n\n", "idx": 8098, "target": 0}
{"func": "#84 Write a Python program to find maximum length of consecutive 0\u2019s in a given binary string.\ndef max_consecutive_0(input_str): \n     return  max(map(len,input_str.split('1')))\nstr2 = '111000010000110'\nprint(\"Original string:\" + str2)\nprint(\"Maximum length of consecutive 0\u2019s:\")\n\n", "idx": 8099, "target": 0}
{"func": "# write a Python Program to print all the Divisors of an Integer\nk = 20\nprint(\"The divisors of the number are:\")\nfor i in range(1,k+1):\n    if(k%i==0):\n        print(i)\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "idx": 8100, "target": 0}
{"func": "# Write a python program to implement Tic Tac Toe game and print the results\n\n\nimport random\nimport sys\nboard=[i for i in range(0,9)]\nplayer, computer = '',''\n\nmoves=((1,7,3,9),(5,),(2,4,6,8))\n\nwinners=((0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6))\n\ntab=range(1,10)\ndef print_board():\n    x=1\n    for i in board:\n        end = ' | '\n        if x%3 == 0:\n            end = ' \\n'\n            if i != 1: end+='---------\\n';\n        chars=' '\n        if i in ('X','O'): chars=i;\n        x+=1\n        print(chars,end=end)\ndef select_char():\n    chars=('X','O')\n    if random.randint(0,1) == 0:\n        return chars[::-1]\n    return chars\ndef can_move(brd, player, move):\n    if move in tab and brd[move-1] == move-1:\n        return True\n    return False\ndef can_win(brd, player, move):\n    places=[]\n    x=0\n    for i in brd:\n        if i == player: places.append(x);\n        x+=1\n    win=True\n    for tup in winners:\n        win=True\n        for ix in tup:\n            if brd[ix] != player:\n                win=False\n                break\n        if win == True:\n            break\n    return win\n\ndef make_move(brd, player, move, undo=False):\n    if can_move(brd, player, move):\n        brd[move-1] = player\n        win=can_win(brd, player, move)\n        if undo:\n            brd[move-1] = move-1\n        return (True, win)\n    return (False, False)\n\ndef computer_move():\n    move=-1\n    for i in range(1,10):\n        if make_move(board, computer, i, True)[1]:\n            move=i\n            break\n    if move == -1:\n        for i in range(1,10):\n            if make_move(board, player, i, True)[1]:\n                move=i\n                break\n    if move == -1:\n        for tup in moves:\n            for mv in tup:\n                if move == -1 and can_move(board, computer, mv):\n                    move=mv\n                    break\n    return make_move(board, computer, move)\ndef space_exist():\n    return board.count('X') + board.count('O') != 9\nplayer, computer = select_char()\nprint('Player is [%s] and computer is [%s]' % (player, computer))\nresult='%%% Deuce ! %%%'\nwhile space_exist():\n    print_board()\n    print('#Make your move ! [1-9] : ', end='')\n    move = int(input())\n    moved, won = make_move(board, player, move)\n    if not moved:\n        print(' >> Invalid number ! Try again !')\n        continue\n \n    if won:\n        result='*** Congratulations ! You won ! ***'\n        break\n    elif computer_move()[1]:\n        result='=== You lose ! =='\n        break;\nprint_board()\nprint(result)\n\n\n", "idx": 8101, "target": 0}
{"func": "# write a python function to convert iterable to pairwise iterable\ndef pairwise(iterable):\n    from itertools import tee\n    A, b = tee(iterable)\n    next(b, None)\n    return zip(A, b)\n\n", "idx": 8102, "target": 0}
{"func": "# Write a Python Program to Remove the nth Index Character from a Non-Empty String\n\ndef remove(string, n):  \n      first = string[:n]   \n      next = string[n+1:]  \n      return first + next\n\n", "idx": 8103, "target": 0}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    resulting = 1\n    for x in myList:\n         resulting = resulting * x \n    return resulting \n     \n\n\n\n", "idx": 8104, "target": 0}
{"func": "# write a python class to instantiate an object with two string attributes and write a function to return the list of attributes\nclass Myclass:  \n    def __init__(self_, attr1, attr2):\n        self_.attr1 = attr1\n        self_.attr2 = attr2\n\n    def get_attributes_list(self_):  \n         return [self_.attr1, self_.attr2]\ndress = Myclass(\"pant\",\"shirt\")\ndress.get_attributes_list()\n\n\n", "idx": 8105, "target": 0}
{"func": "# write a python function to find URLs in a string\n\nimport re \n  \ndef Find(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    URL = re.findall(regex,string)       \n    return [x[0] for x in URL]\n\n", "idx": 8106, "target": 0}
{"func": "# Write a function that strips every vowel from a string provided\ndef strip_vowels(input_str:str)->str:\n\n    consonants = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]\n    return ''.join(list(filter(lambda x: x not in consonants, input_str)))\n\n", "idx": 8107, "target": 0}
{"func": "# local scope representation\ny = 0\ndef in_func():\n    y = 1\n    print('in_func:', y)\n\n", "idx": 8108, "target": 0}
{"func": "# write a python program to multiply two list with list comprehensive\nl1=[1,2,3]\nl1=[4,5,6]\nprint([x*y for x in l1 for y in l1])\n\n", "idx": 8109, "target": 0}
{"func": "# Write a Python Program that Prints which Letters are in the First String but not in the Second\n\ns1='python'\ns1='schoolofai'\na=list(set(s1)-set(s1))\nprint(\"The letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 8110, "target": 0}
{"func": "# Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\ndef not_poor(str1):\n  snot = str1.find('not')\n  poort = str1.find('poor')\n  \n\n  if poort > snot and snot>0 and poort>0:\n    str1 = str1.replace(str1[snot:(poort+4)], 'good')\n    return str1\n  else:\n    return str1\n\n", "idx": 8111, "target": 0}
{"func": "# Python program to access function iside function\ndef test(a):\n    def add(b):\n        nonlocal a\n        a += 1\n        return a + b\n\n    return add\n\n\nfunc_ = test(4)\nprint(func_(4))\n\n\n", "idx": 8112, "target": 0}
{"func": "# write a python program to print sum of natural numbers up to num\n\nnum2 = 16\n\nif num2 < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   while(num2 > 0):\n       sum += num2\n       num2 -= 1\n   print(\"The sum is\", sum)\n\n\n", "idx": 8113, "target": 0}
{"func": "# Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort\n\nA=[2, 3, 8, 9, 2, 4, 6]\nfor i in range(0,len(A)):\n    for j in range(0,len(A)-i-1):\n        if(A[j]>A[j+1]):\n            temp=A[j]\n            A[j]=A[j+1]\n            A[j+1]=temp \n\n", "idx": 8114, "target": 0}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nset2 = set(str1)\n\nif set2 == {'0','1'} or set2 == {'0'} or set2 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 8115, "target": 0}
{"func": "# Write a Python program to validate an Email \nimport re \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check(e_mail):\n  if(re.search(regex,e_mail)):\n    print(\"Valid Email\")\n  else:\n    print(\"Invalid Email\")\n\ne_mail = \"ishwarraja@gmail.com\"\ncheck(e_mail)\n\n", "idx": 8116, "target": 0}
{"func": "# Python program to print sum of digits of a 4 digit number\ndef sumofdigits(num):\n    y = num // 1000\n    x1 = (num - y * 1000) // 100\n    x2 = (num - y * 1000 - x1 * 100) // 10\n    x3 = num - y * 1000 - x1 * 100 - x2 * 10\n    print(\"The sum of digits in the number is\", y + x1 + x2 + x3)\n\n\nsumofdigits(3456)\n\n\n", "idx": 8117, "target": 0}
{"func": "# Write a python program to check if a number is a Perfect number.\nk = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in range(1, k):\nif(k % i == 0):\nsum1 = sum1 + i\nif (sum1 == k):\nprint(\"The number is a Perfect number!\")\nelse:\nprint(\"The number is not a Perfect number!\")\n\n", "idx": 8118, "target": 0}
{"func": "# write Python Program to Count the Number of Lines in a Text File\nlname = input(\"Enter file name: \")\nnum_lines = 0\nwith open(lname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n\n\n", "idx": 8119, "target": 0}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstrings = \"are\"\nif (string.find(substrings) == -1): \n    print(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 8120, "target": 0}
{"func": "# Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalue = raw_input()\nnumbers = [x for x in value.split(\",\") if int(x)%2!=0]\nprint \",\".join(numbers)\n\n", "idx": 8121, "target": 0}
{"func": "# Write a python program to find and print sum of series with cubes of first n natural numbers \n\nn = 10\nsums = 0\nfor i in range(1, n+1): \n    sums += i**3\n\nprint(f\"{sums}\")\n\n\n", "idx": 8122, "target": 0}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnumbers = secrets.randbelow(30)\nprint(numbers)\n\n", "idx": 8123, "target": 0}
{"func": "#48 write a python Program to multiply two matrices and print the result\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nX = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(X[0])):\n       for k in range(len(X)):\n           result[i][j] += X[i][k] * X[k][j]\n\nfor r in result:\n   print(r)\n   \n", "idx": 8124, "target": 0}
{"func": "#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.\nsyms = []\n\nfor i in range(3):\n\n    syms.append([])\n\n    for j in range(2):\n\n        syms[i].append(0)\nprint(\"Multidimensional list:\")\nprint(syms)\n\n", "idx": 8125, "target": 0}
{"func": "# initializing K \nH = 2\n\nl=[]\nfor i in test_list:\n    #for j in i:\n    s=tuple()\n    s+=i[H:len(i)-H]\n    l.append((s))\nprint(l)\n\n", "idx": 8126, "target": 0}
{"func": "#81 generate intereger random number between user choice\ndef gen_ran_int_number(lower, upper):\n    import random\n    penultimate = [ random.randint(lower, upper) for _ in range(10) ]\n    return penultimate\n\n\n", "idx": 8127, "target": 0}
{"func": "# write a python program which takes list as an input and calculate sum of given list of numbers \nlst = eval(input(\"Enter list : \"))\nmean = 0\nsums = 0\nfor i in lst:\n    sums  = sums + i\nprint(\" The mean of given list is :\", sums)\n\n", "idx": 8128, "target": 0}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in zip(*test_dict.values()):\n  res_ = 1 \n  for ele in x: \n      res_ *= ele\n  prod_list.append(res_)\nres_ = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res_))\n\n", "idx": 8129, "target": 0}
{"func": "# function to Convert Binary to Gray Code\ndef binary_to_gray(k):\n    k = int(k, 2) \n    k ^= (k >> 1)\n    return bin(k)[2:]\n\n", "idx": 8130, "target": 0}
{"func": "# write a python python program to find the L.C.M. of two input number\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum1 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num1))\n\n", "idx": 8131, "target": 0}
{"func": "# Write a Python program to sort (Descending) a dictionary by value.\nl = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nprint({k :v for k,v in sorted(l.items(),key = lambda x : x[1],reverse = True)})\n\n", "idx": 8132, "target": 0}
{"func": "# Write a Python program to print the calendar of any given year\nimport calendar\nmonth=2020\nprint(calendar.calendar(month))\n\n\n", "idx": 8133, "target": 0}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresulting = org[:]\nsteps = 3\n\nfor idx,num in enumerate(org):\n    if idx+steps < len(org):\n        resulting[idx+steps] = org[idx]\n    else:\n        resulting[idx+steps-len(org)] = org[idx]\n\nprint(resulting)\n\n", "idx": 8134, "target": 0}
{"func": "# Write a program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1\ndef f(k):\n    if k==0:\n        return 0\n    else:\n        return f(k-1)+100\nk=int(raw_input())\nprint f(k)\n\n", "idx": 8135, "target": 0}
{"func": "# Write a python function to generate permuations of a list of given numbers\n\ndef permute(syms):\n    def backtrack(first = 0):\n        if first == n:        \n            output.append(syms[:])\n        for i in range(first, n):\n            syms[first], syms[i] = syms[i], syms[first]\n\n            backtrack(first + 1)\n\n            syms[first], syms[i] = syms[i], syms[first]\n         \n    n = len(syms)\n    output = []\n    backtrack()\n    return output\n\n\t\n", "idx": 8136, "target": 0}
{"func": "# Write a Python program to print euclidean distance between two array/ vectors\nimport numpy as np\nA = np.array([78, 84, 87, 91, 76])\nb = np.array([92, 83, 91, 79, 89])\ndist = np.linalg.norm(A-b)\nprint('Differnce in performance between A and B : ', dist)\n\n\n", "idx": 8137, "target": 0}
{"func": "# Write a Python program to get the frequency of the elements in a list\nimport collections\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\nprint(\"Original List : \",my_list)\nf12 = collections.Counter(my_list)\nprint(\"Frequency of the elements in the List : \",f12)\n\n", "idx": 8138, "target": 0}
{"func": "# Write a Python function to \ndef binary_palindrome(n):\n\ts=int(bin(n)[2:])\n\tl=str(s)[::-1]\n\tif int(l)==s:\n\t    return \"The binary representation of the number is a palindrome.\"\n\telse:\n\t    return \"The binary representation of the number is NOT a palindrome.\"\n\n\n", "idx": 8139, "target": 0}
{"func": "#77 show all local values while one function is running\ndef show_local():\n    import math\n    A = 10\n    b = 'Hello There'\n    print(locals())\n\n\n", "idx": 8140, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\ndef printList():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint lu[:5]\n\t\t\n", "idx": 8141, "target": 0}
{"func": "# Write a python function which accepts or discard only string ending with alphanumeric character\n\nimport re \n  \n\nregexps = '[a-zA-z0-9]$'\n      \ndef check(string):\n    if(re.search(regexps, string)):  \n        print(\"Accept\")          \n    else:  \n        print(\"Discard\") \n\n\n", "idx": 8142, "target": 0}
{"func": "# write a python function to find the factorial of the user provided number and print the result\ndef findfactorial(num):\n    factorials = 1\n    if num < 0:\n        print(\"Sorry, factorial does not exist for negative numbers\")\n    elif num == 0:\n        print(\"The factorial of 0 is 1\")\n    else:\n        for i in range(1,num+1):\n            factorials = factorials*i\n        print(\"The factorial of\",num,\"is\",factorials)\n        \nfindfactorial(3)        \n\n6.\n", "idx": 8143, "target": 0}
{"func": "# Write a function to remove empty list from a list using list comprehension\ndef removeEmptyList(li):\n  res_ = [ele for ele in li if ele != []] \n  return res_\n\n\n", "idx": 8144, "target": 0}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\ndef print_dict_keys_val_3():\n\tl=dict()\n\tfor i in range(1,21):\n\t\tl[i]=i**2\n\tfor (k,v) in l.items():\t\n\t\tprint(v)\n\n", "idx": 8145, "target": 0}
{"func": "# write a python program to find the sequences of one upper case letter followed by lower case letters.\n\n\nimport re\nnon_text=\"Albert\"\npatterns = '[A-Z]+[a-z]+$'\nif re.search(patterns, non_text):\n  print('Found a match!')\nelse:\n  print('Not matched!')\n\n", "idx": 8146, "target": 0}
{"func": "# write a python program to call different functions based on condition with same arguments \ndef product(a, c):\n    return a * c\n\ndef subtract(a, c):\n    return a - c\n\nc = True\nprint((product if c else subtract)(1, 1))\n\n\n", "idx": 8147, "target": 0}
{"func": "# Write a Python Program to print the Reverse a Given Number\n\nn=1023\nrevs=0\nwhile(n>0):\n    dig=n%10\n    revs=revs*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",revs)\n\n", "idx": 8148, "target": 0}
{"func": "#Write a function to find the  difference between two times\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t1 = h2 * 60 + m2\n    if (t1 == t1):\n        print(\"Both are same times\")\n        return\n    else:\n        diff = t1 - t1\n    h = (int(diff / 60)) % 24\n    m = diff % 60\n    print(h, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 8149, "target": 0}
{"func": "# write a python function to map a numeric lookup using bisect\ndef grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n    from bisect import bisect\n    u = bisect(breakpoints, score)\n    return grades[u]\n\n", "idx": 8150, "target": 0}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    3.14159=3.14\n    return (2/3)*3.14159*(radius**3)\n\n", "idx": 8151, "target": 0}
{"func": "# write a python program to remove punctuations from a string\n\npunctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = \"Hello!!!, she said ---and went.\"\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuation:\n       no_punct = no_punct + char\n\n", "idx": 8152, "target": 0}
{"func": "# write a python function to random select from itertools.combinations(iterable, r)\ndef random_combination(iterable, r):\n    import random\n    pool = tuple(iterable)\n    k = len(pool)\n    indices = sorted(random.sample(range(k), r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 8153, "target": 0}
{"func": "# Write a Python Program to test and print Collatz Conjecture for a Given Number\n\ndef collatz(k):\n    while k > 1:\n        print(k, end=' ')\n        if (k % 2):\n            # n is odd\n            k = 3*k + 1\n        else:\n            # n is even\n            k = k//2\n    print(1, end='')\n\n", "idx": 8154, "target": 0}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    3.14159 = 3.14\n    return 2*3.14159*r\n\n", "idx": 8155, "target": 0}
{"func": "# Write a python program to program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\nnum = int (input (\"Enter Number: \"))\nsums = 0\nfor i in range(num+1):\nsums += float(i/(i+1))\nprint (\"Sum: {:.2f}\".format(sums))\n\n", "idx": 8156, "target": 0}
{"func": "# Disassembler \nimport dis\ndef hello1_func():\n    \u2019 = 'Hello'\n    return \u2019\ndis.dis(hello1_func)\n\n", "idx": 8157, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\ndef printList():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint lu[-5:]\n\t\t\n", "idx": 8158, "target": 0}
{"func": "# write a python function to calculate the greatest common divisor (GCD) of two user provided positive integers. \n\ndef lcm(num1, num2):\n    lcm = 1  \n    if num1 % num2 == 0:\n        return num2\n    for k in range(int(num2 / 2), 0, -1):\n        if num1 % k == 0 and num2 % k == 0:\n            lcm = k\n            break  \n    return lcm\n\n", "idx": 8159, "target": 0}
{"func": "# Write a Python Program Print Restaurant Menu using Class given menu and cost as list\n\nclass Food(object):\n    def __init__(self_, name, price):\n        self_.name = name\n        self_.price = price\n    \n    def getprice(self_):\n        return self_.price\n    \n    def __str__(self_):\n        return self_.name + ' : ' + str(self_.getprice())\n    \ndef buildmenu(names, costs):\n    menu = []\n    for i in range(len(names)):\n        menu.append(Food(names[i], costs[i]))\n    return menu\n\nnames = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']\n\ncosts = [250, 150, 180, 70, 65, 55, 120, 350]\n\nFoods = buildmenu(names, costs)\n\nn = 1\nfor el in Foods:\n    print(n,'. ', el)\n    n = n + 1\n\n", "idx": 8160, "target": 0}
{"func": "#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm\ndef compute_hcf(y, y):\n   while(y):\n       y, y = y, y % y\n   return y\n\n", "idx": 8161, "target": 0}
{"func": "# Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\ns = raw_input()\nl={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in s:\n    if c.isupper():\n        l[\"UPPER CASE\"]+=1\n    elif c.islower():\n        l[\"LOWER CASE\"]+=1\n    else:\n        pass\nprint \"UPPER CASE\", l[\"UPPER CASE\"]\nprint \"LOWER CASE\", l[\"LOWER CASE\"]\n\n", "idx": 8162, "target": 0}
{"func": "# write a Python function to print even length words in a string \n\ndef printWords(\u2019): \n    \u2019 = \u2019.split(' ') \n\n    for word in \u2019: \n        if len(word)%2==0: \n            print(word) \n\n\u2019 = \"i am muskan\"\nprintWords(\u2019) \n\n", "idx": 8163, "target": 0}
{"func": "# Write a python program to implement a Stack using One Queue\n\nclass Stack:\n    def __init__(self):\n        self.q = Queue()\n \n    def is_empty(self):\n        return self.q.is_empty()\n \n    def push(self, data):\n        self.q.enqueue(data)\n \n    def pop(self):\n        for _ in range(self.q.get_size() - 1):\n            dequeued = self.q.dequeue()\n            self.q.enqueue(dequeued)\n        return self.q.dequeue()\n \n \nclass Queue:\n    def __init__(self):\n        self.items = []\n        self.size = 0\n \n    def is_empty(self):\n        return self.items == []\n \n    def enqueue(self, data):\n        self.size += 1\n        self.items.append(data)\n \n    def dequeue(self):\n        self.size -= 1\n        return self.items.pop(0)\n \n    def get_size(self):\n        return self.size\n \n \n\u2019 = Stack()\n \nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'push':\n        \u2019.push(int(do[1]))\n    elif operation == 'pop':\n        if \u2019.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', \u2019.pop())\n    elif operation == 'quit':\n        break\n\n", "idx": 8164, "target": 0}
{"func": "# write a python function to find the number of times every day occurs in a Year and print them\nimport datetime  \nimport calendar \n   \ndef day_occur_time(year): \n    days = [ \"Monday\", \"Tuesday\", \"Wednesday\",   \n           \"Thursday\",  \"Friday\", \"Saturday\",  \n           \"Sunday\" ] \n    L = [52 for i in range(7)] \n\n    pos2 = -1\n    day = datetime.datetime(year, month = 1, day = 1).strftime(\"%A\") \n    for i in range(7): \n        if day == days[i]: \n            pos2 = i \n    if calendar.isleap(year): \n        L[pos2] += 1\n        L[(pos2+1)%7] += 1       \n    else: \n        L[pos2] += 1\n\n    for i in range(7): \n        print(days[i], L[i])\n\n", "idx": 8165, "target": 0}
{"func": "# write a python function to return the number of lines in a file\ndef count_lines(filename):\n   with open(filename, 'r') as f:\n      content = f.read().split('\\n')\n      return len(content)\n\n\n", "idx": 8166, "target": 0}
{"func": "# write a python program to print the divisors of a integer\nnum2 = int(input(\"Please enter a integer \"))\nmid = int(num2 / 2)\nprint(\"The divisiors of \",num2,\" are :\" )\nfor a in range(2,mid + 1):\n    if num2 % a == 0:\n        print(a, end = ' ')\nelse :\n    print()\n    print(\"-End-\")\n    \n", "idx": 8167, "target": 0}
{"func": "# write a python function to find the URL from an input string using the regular expression\nimport re \ndef Find(string): \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    URL = re.findall(regex,string)       \n    return [x[0] for x in URL] \n      \n", "idx": 8168, "target": 0}
{"func": "# write a python function that takes two lists and combines them without any duplicates and return the list\ndef combine_lists(L1, L1):\n    return L1 + [items for items in L1 if items not in L1]\n\nL1 = [1,2,3]\nL1 = [2,4,3]\n\ncombine_lists(L1,L1)\n\n\n", "idx": 8169, "target": 0}
{"func": "# Write a Python function to compute compound interest\t\ndef compound_interest(principle, rate, time):  \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CIs = Amount - principle \n    return CIs\n\t\n\n\t\n", "idx": 8170, "target": 0}
{"func": "# write a python function to generate 4 digit OTP\n\nimport math, random \ndef generateOTP() : \n    digit = \"0123456789\"\n    OTP = \"\" \n    for i in range(4) : \n        OTP += digit[math.floor(random.random() * 10)] \n    return OTP\n\n", "idx": 8171, "target": 0}
{"func": "# write a python program to add and print two user defined list using map\ninput_string = input(\"Enter a list element separated by space \")\nlist1  = input_string.split()\ninput_string = input(\"Enter a list element separated by space \")\nlist1  = input_string.split()\nlist1 = [int(i) for i in list1] \nlist1 = [int(i) for i in list1] \nresult = map(lambda x, y: x + y, list1, list1) \nprint(list(result))\n\n", "idx": 8172, "target": 0}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum2 = 4\nnum2 = 30\nmyval = [i for i in range(num2, num2, 2)]\nprint(myval)\n\n", "idx": 8173, "target": 0}
{"func": "# Write a python program to make a recursive function to get the sum\ndef rec(k):\nif k == 0:\nreturn k\nreturn rec(k-1) + k\nk = int(input())\nsum = rec(k)\nprint(sum)\n\n", "idx": 8174, "target": 0}
{"func": "#13 write a program to convert into dictionary \ndef Convert(tup, di): \n    for a, b in tup: \n        di.setdefault(a, []).append(b) \n    return di \n      \ntups = [(\"A\", 10), (\"B\", 20), (\"C\", 30),  \n     (\"D\", 40), (\"E\", 50), (\"F\", 60)] \ndictionaries = {} \nprint (Convert(tups, dictionaries)) \n\n\n", "idx": 8175, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    3.14159=3.14\n    return 3.14159*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 8176, "target": 0}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    3.14159=3.14\n    return 3.14159*radius*slant_height\n\n", "idx": 8177, "target": 0}
{"func": "#47 write a python function to print lcm of n numbers python\nimport math\n\ndef LCMofArray(a):\n  gcd = a[0]\n  for i in range(1,len(a)):\n    gcd = gcd*a[i]//math.gcd(gcd, a[i])\n  return gcd\n\narr1 = [1,2,3]\nprint(\"LCM of arr1 elements:\", LCMofArray(arr1))\n\n", "idx": 8178, "target": 0}
{"func": "# Write a python program to print a given string without spaces\n\n\u2019 = \"I love India   now I will be printed without any space\"\nfor i in \u2019:\n    if i==' ': continue\n    print(i,end='')\n\n", "idx": 8179, "target": 0}
{"func": "# write a python function to compute the lcm of two numbers\n def lcm(x, y):\n\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n   \n # write a python function to check whether the number is an Armstrong number or not\n def Armstrong(num):\n    sums = 0\n    temp = num\n    while temp > 0:\n       digit = temp % 10\n       sums += digit ** 3\n       temp //= 10\n   \n    if num == sums:\n       print(num,\"is an Armstrong number\")\n    else:\n       print(num,\"is not an Armstrong number\")\n       \n # write a python function to check whether the string is a palindrome or not\n def palindrome(my_str):\n    my_str = my_str.casefold()\n    rev_str = reversed(my_str)\n    if list(my_str) == list(rev_str):\n       print(\"The string is a palindrome.\")\n    else:\n       print(\"The string is not a palindrome.\")\n \n", "idx": 8180, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       resulting[i][j] = X[i][j] + Y[i][j]\n\nfor r in resulting:\n   print(r)\n\n", "idx": 8181, "target": 0}
{"func": "# write a python program to print the sum of first n numbers\nn = 10\nsums = 0\nwhile n > 0:\n   sums += n\n   n -= 1\nprint(sums)\n\n\n", "idx": 8182, "target": 0}
{"func": "#46 write a program to check if the year is a leap year\n\nmonth = int(input(\"Enter a year: \"))  \nif (month % 4) == 0:  \n   if (month % 100) == 0:  \n       if (month % 400) == 0:  \n           print(\"{0} is a leap year\".format(month))  \n       else:  \n           print(\"{0} is not a leap year\".format(month))  \n   else:  \n       print(\"{0} is a leap year\".format(month))  \nelse:  \n   print(\"{0} is not a leap year\".format(month))  \n   \n", "idx": 8183, "target": 0}
{"func": "# Write a python program to Implement Counting sort and print the sorted list for the below list\n\ndef counting_sort(alist, largest):\n    b = [0]*(largest + 1)\n    for i in range(len(alist)):\n        b[alist[i]] = b[alist[i]] + 1\n \n    b[0] = b[0] - 1 \n    for i in range(1, largest + 1):\n        b[i] = b[i] + b[i - 1]\n \n    result = [None]*len(alist)\n \n    for x in reversed(alist):\n        result[b[x]] = x\n        b[x] = b[x] - 1\n \n    return result\n \n \nalist = [2, 3, 5, 6, 4, 5]\nk = max(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 8184, "target": 0}
{"func": "# Write a lambda function to to give character grom it's ascii value\n\nnon_ascii = lambda a: chr(a)\n\n", "idx": 8185, "target": 0}
{"func": "# write a program to strips every vowel from a string provided \n\nconsonants = ('a', 'e', 'i', 'o', 'u')\ninput_string = \"awesome\"\n' '.join([x for x in input_string.lower() if x not in consonants])\n\n", "idx": 8186, "target": 0}
{"func": "#69 Write a Python function to add two binary numbers.\ndef add_binary_nums(y,y):\n        max_len = max(len(y), len(y))\n\n        y = y.zfill(max_len)\n        y = y.zfill(max_len)\n\n        result = ''\n        carry = 0\n\n        for i in range(max_len-1, -1, -1):\n            r = carry\n            r += 1 if y[i] == '1' else 0\n            r += 1 if y[i] == '1' else 0\n            result = ('1' if r % 2 == 1 else '0') + result\n            carry = 0 if r < 2 else 1       \n\n        if carry !=0 : result = '1' + result\n\n        return result.zfill(max_len)\n\n", "idx": 8187, "target": 0}
{"func": "# Write a python function to convert hours to either mins or seconds\n\ndef convert_to_minutes(num_hours):\n    '''(int) -> int\n    Return the number of minutes there are in\n    num_hours hours.\n    '''\n    minutes = num_hours * 60\n    return minutes\n\ndef convert_to_seconds(num_hours):\n    '''(int) -> int\n    Return the number of seconds there are in \n    num_hours hours.\n    '''\n    minutes = convert_to_minutes(num_hours)\n    minutes = minutes * 60\n    return minutes\n\n\nmin = convert_to_minutes(1)\nprint(min)\n\nminutes = convert_to_seconds(1)\nprint(minutes)\n\n", "idx": 8188, "target": 0}
{"func": "# write a python program to use python lambda function\nlambs = lambda x: x ** 3\nprint(lambs(5))\n\n", "idx": 8189, "target": 0}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    3.14159 = 3.14\n    return 3.14159*r**2\n\n", "idx": 8190, "target": 0}
{"func": "# write a python program to input a string from user and count vowels in a string and print the output\n\nstr1 = input(\"Please Enter Your Own String : \")\nconsonants = 0\n \nfor i in str1:\n    if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'A'\n       or i == 'E' or i == 'I' or i == 'O' or i == 'U'):\n        consonants = consonants + 1\n \nprint(\"Total Number of Vowels in this String = \", consonants)\n\n", "idx": 8191, "target": 0}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \ndef find_urls(string): \n   \n    regexps = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regexps,string)       \n    return [x[0] for x in url] \n\n", "idx": 8192, "target": 0}
{"func": "# 14 write a function to perform insertion sort on an arary\n\n\ndef sort_insertion(arr):\n    for i in range(1, len(arr)):\n        tmp = arr[i]\n\n        k = i\n        while (k > 0) & (tmp < arr[k - 1]):\n            arr[k] = arr[k - 1]\n            k = k - 1\n        arr[k] = tmp\n    return arr\n\n\n", "idx": 8193, "target": 0}
{"func": "# write a python function to validate the email \n\nimport re \nregexps = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'      \ndef check(email):  \n    if(re.search(regexps,email)):  \n        print(\"Valid Email\")         \n    else:  \n        print(\"Invalid Email\")\n\n", "idx": 8194, "target": 0}
{"func": "# write a python program which prints a random number\nimport random\nk = random.random()\nprint(k) \n\n", "idx": 8195, "target": 0}
{"func": "# write a python function to get symmetric difference between two sets from user.\ndef symmetric_diff_sets():\n    M, m = input(), set(list(map(int, input().split())))\n    E, n = input(), set(list(map(int, input().split())))\n    s = sorted(list(m.difference(n)) + list(n.difference(m)))\n    for i in s:\n        print(i)\n\n\n", "idx": 8196, "target": 0}
{"func": "# write Python program to demonstrate working of Get next key in Dictionary \n\ntest_dict = {'gfg' : 1, 'is' : 2, 'best' : 3} \n\nprint(f\"The original dictionary is : {test_dict}\") \n\ntest_key = 'is'\n\ntemp = list(test_dict)\ntry: \n    res_ = temp[temp.index(test_key) + 1] \nexcept (ValueError, IndexError): \n    res_ = None\n\nprint(f\"The next key is : {res_}\") \n\n\n", "idx": 8197, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Strong Number\n\ndef strong_no_check(num2):\n    sum1=0\n    temp=num2\n    while(num2):\n        i=1\n        f=1\n        r=num2%10\n        while(i<=r):\n            f=f*i\n            i=i+1\n        sum1=sum1+f\n        num2=num2//10\n    if(sum1==temp):\n        return True\n    else:\n        return False\n\n", "idx": 8198, "target": 0}
{"func": "# Define a custom exception class which takes a string message as attribute.\nclass MyError(Exception):\n    def __init__(self, msg):\n        self.msg = msg\nerrors = MyError(\"something wrong\")\n\n", "idx": 8199, "target": 0}
{"func": "# Write a Python program to check/test multiple variables against a value\nA = 10\nb = 20\nc = 30\nif 10 in {A, b, c}:\n  print(\"True\")\nelse:\n  print(\"False\")  \n\n\n", "idx": 8200, "target": 0}
{"func": "# Write a python program to Implement Heapsort and print the sorted list for the below list\n\ndef heapsort(elist):\n    build_max_heap(elist)\n    for i in range(len(elist) - 1, 0, -1):\n        elist[0], elist[i] = elist[i], elist[0]\n        max_heapify(elist, index=0, size=i)\n \ndef parent(i):\n    return (i - 1)//2\n \ndef left(i):\n    return 2*i + 1\n \ndef right(i):\n    return 2*i + 2\n \ndef build_max_heap(elist):\n    length = len(elist)\n    start = parent(length - 1)\n    while start >= 0:\n        max_heapify(elist, index=start, size=length)\n        start = start - 1\n \ndef max_heapify(elist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and elist[l] > elist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and elist[r] > elist[largest]):\n        largest = r\n    if (largest != index):\n        elist[largest], elist[index] = elist[index], elist[largest]\n        max_heapify(elist, largest, size)\n \n \nelist = [2, 3, 5, 6, 4, 5]\nheapsort(elist)\nprint('Sorted list: ', end='')\nprint(elist)\n\n", "idx": 8201, "target": 0}
{"func": "#8. python function to identify profane words\ndef profane_filter(str):\n    profane_word_url = \"https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt\"\n    files = urllib.request.urlopen(profane_word_url)\n    for line in files:\n        decoded_line = line.decode(\"utf-8\")\n    return decoded_line\n    str = re.findall(r'\\w+', str)\n    return [i for i in str if i in decoded_line]\n\n", "idx": 8202, "target": 0}
{"func": "# Write a python Program to Flatten and print a List\n\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflattens=lambda l: sum(map(flattens,l),[]) if isinstance(l,list) else [l]\nprint(flattens(a))\n\n", "idx": 8203, "target": 0}
{"func": "# Write a function that will convert a string into camelCase\n\nfrom re import sub\ndef camelCase(strings):\n  strings = sub(r\"(_|-)+\", \" \", strings).title().replace(\" \", \"\")\n  return strings[0].lower() + strings[1:]\n\n\n", "idx": 8204, "target": 0}
{"func": "# Write a Python function to check whether a number is a power of another number or not\ndef power_checker(a,b):\n\timport math\n\t\u2019=math.log(a,b)\n\tp=round(\u2019)\n\tif (b**p)==a:\n\t    return f'{a} is the power of {b}.'\n\telse:\n\t    return f'{a} is NOT the power of {b}.'\n\n\n", "idx": 8205, "target": 0}
{"func": "# write a python program to find the factorial of a number provided by the user.\nnum2 = int(input(\"Enter a number: \"))\n\nfactorial = 1\n\nif num2 < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num2 == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num2 + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num2,\"is\",factorial)\n\n", "idx": 8206, "target": 0}
{"func": "# Write a Python program to count the number of even and odd numbers from a series of numbers.\n\nnumber = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\ncount_odd = 0\ncount_even = 0\nfor x in number:\n        if not x % 2:\n    \t     count_even+=1\n        else:\n    \t     count_odd+=1\n             \n", "idx": 8207, "target": 0}
{"func": "# write a python function to return mean of a list of numbers\n\ndef mean(list):\n    sums = 0\n    for num in list:\n        sums += num\n    return sums / len(list)\n\n", "idx": 8208, "target": 0}
{"func": "# Write a function that generates fibbonacci series\ndef Fibonacci(n:int)-> int:\n    if n==1:\n        Fibonacci = 0\n    elif n==2:\n        Fibonacci = 1\n    else:\n        Fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    return Fibonacci\n\n\n", "idx": 8209, "target": 0}
{"func": "# write a program to print the sine value of a number\nimport math\nnum2 = 3\nprint(math.sin(num2))\n\n", "idx": 8210, "target": 0}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres_ =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres_[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res_))\n\n", "idx": 8211, "target": 0}
{"func": "# Write a python program to find and print product of two matrices\n\nA = [[12, 7, 3], \n    [4, 5, 6], \n    [7, 8, 9]]   \n  \nC = [[5, 8, 1, 2], \n    [6, 7, 3, 0], \n    [4, 5, 9, 1]] \n      \nresult = [[0, 0, 0, 0], \n        [0, 0, 0, 0], \n        [0, 0, 0, 0]] \n  \n\nfor i in range(len(A)): \n    for j in range(len(C[0])): \n        for k in range(len(C)): \n            result[i][j] += A[i][k] * C[k][j] \n  \nfor r in result: \n    print(r) \n\t\n\t\n", "idx": 8212, "target": 0}
{"func": "# Write a python program to Implement Bucket sort and print the sorted list for the below list\n\ndef bucket_sort(alist):\n    largest = max(alist)\n    length = len(alist)\n    size = largest/length\n \n    buckets = [[] for _ in range(length)]\n    for i in range(length):\n        j = int(alist[i]/size)\n        if j != length:\n            buckets[j].append(alist[i])\n        else:\n            buckets[length - 1].append(alist[i])\n \n    for i in range(length):\n        insertion_sort(buckets[i])\n \n    resulting = []\n    for i in range(length):\n        resulting = resulting + buckets[i]\n \n    return resulting\n \ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\nsorted_list = bucket_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 8213, "target": 0}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    3.14159=3.14\n    return (4/3)*3.14159*(radius**3)\n\n", "idx": 8214, "target": 0}
{"func": "# Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.\ndef add_string(str1):\n  lenght = len(str1)\n\n  if lenght > 2:\n    if str1[-3:] == 'ing':\n      str1 += 'ly'\n    else:\n      str1 += 'ing'\n\n  return str1\n\n", "idx": 8215, "target": 0}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digits = temp % 10\n   sum += digits ** 3\n   temp //= 10\n\n", "idx": 8216, "target": 0}
{"func": "#  write a python program to check string istitle\nstr2 = 'Hello!2@#World'\nif str2.istitle():\n    print('Yes string is title')\n\n", "idx": 8217, "target": 0}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char in str1:\n  counts = str1.counts(char)\n  countDict[char]=counts\nprint(countDict)\n\n", "idx": 8218, "target": 0}
{"func": "#4 add a string to each element of a list python\nmy_list = ['foo', 'fob', 'faz', 'funk']\nstring = 'bar'\nlist1 = list(map(lambda orig_string: orig_string + string, my_list))\n\n", "idx": 8219, "target": 0}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        j = char.isupper()   \n        if j == True: \n            return True\n    if(j != 1): \n        return False\n\n", "idx": 8220, "target": 0}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    k = len(a) \n    flag = 0\n      \n    if k%2: \n        mid = k//2 +1\n    else: \n        mid = k//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < k): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 8221, "target": 0}
{"func": "# write a python program to reverse user provided number \n\nk = 4562; \nrev = 0\nwhile(k > 0): \n    a = k % 10\n    rev = rev * 10 + a \n    k = k // 10   \nprint(rev)\n\n", "idx": 8222, "target": 0}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntargets = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    for j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 8223, "target": 0}
{"func": "# iterating each dictionary for similar key's value \nfor key in keys: \n    flags = 1\n    for ele in test_list: \n  \n        # checking for similar values \n        if test_list[0][key] != ele[key]: \n            flags = 0\n            break\n  \n    if flags: \n        res.append(key) \n  \n", "idx": 8224, "target": 0}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres_ = calculateSum(10)\nprint(res_)\n\n", "idx": 8225, "target": 0}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstarting=0\nresult = []\nwhile starting < len(input_array):\n    end = starting \n    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):\n        end = end + 1\n    if end!=starting:\n        result.append(\"{0}-->{1}\".format(input_array[starting], input_array[end]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[starting]))\n        print(result)\n    starting = end+1\n\nprint(result)\n\n", "idx": 8226, "target": 0}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    resulting = 1\n    for x in myList:\n         resulting = resulting * x \n    return resulting \n     \n\n\n\n", "idx": 8227, "target": 0}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    counts = {} \n      \n    for word in str1.split(): \n        counts[word] = counts.get(word, 0) + 1\n      \n    for word in str2.split(): \n        counts[word] = counts.get(word, 0) + 1\n  \n    return [word for word in counts if counts[word] == 1]\n\n", "idx": 8228, "target": 0}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (pressure*volume)/n*l\n\n", "idx": 8229, "target": 0}
{"func": "# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choices = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choices in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choices == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choices == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choices == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choices == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n\n", "idx": 8230, "target": 0}
{"func": "# Write a Python class that will initiate a number, input a number and print the number\nclass Number:\n\tdef __init__(self_, num):\n\t\tself_.num = num\n\n\tdef inputNum(self_):\n\t\tself_.num = int(input(\"Enter an integer number: \"))\n\n\tdef printNum(self_):\n\t\tprint(self_.num)\n\n\n", "idx": 8231, "target": 0}
{"func": "# Counting total alphanumeric in a string\nstr2 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str2)):\n  char = str2[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 8232, "target": 0}
{"func": "# Write a python function to create an argument parser that takes inputs as program name and description of program and filename as inputs for variable length of args\nimport argparse\ndef create_parser(prog_name, prog_description, arg_name):\n    parsers = argparse.ArgumentParser(prog = prog_name, description = prog_description)\n    parsers.add_argument(arg_name, nargs='+')\n    #args = parser.parse_args()\n    return parsers\n\n", "idx": 8233, "target": 0}
{"func": "# Write a program to find common divisors between two numbers in a given pair\ndef ngcd(x, y):\n    u=1\n    while(u<=x and u<=y):\n        if(x%u==0 and y%u == 0):\n            gcd=u\n        u+=1\n    return gcd\ndef num_comm_div(x, y):\n  n = ngcd(x, y)\n  result = 0\n  z = int(n**0.5)\n  u = 1\n  while( u <= z ):\n    if(n % u == 0):\n      result += 2 \n      if(u == n/u):\n        result-=1\n    u+=1\n  return result\n\n", "idx": 8234, "target": 0}
{"func": "# write a python function to find nCr\n \n def nCr(n, r): \n\n    def fact(n): \n        res_ = 1\n        for i in range(2, n+1): \n            res_ = res_ * i \n        return res_\n    \n    return (fact(n) / (fact(r)  \n                * fact(n - r)))\n\n", "idx": 8235, "target": 0}
{"func": "# write a python function to subtract two user provided numbers and return the result\ndef sub_two_numbers(num1, num2):\n    sub_sub = num1 - num2\n    return sub_sub\n\n", "idx": 8236, "target": 0}
{"func": "# write a python program to print the factorial of number\nnum2 = int(input(\"Please enter a number \"))\nfact = 1\na = 1\nwhile a <= num2 :\n    fact *= a\n    a += 1\nprint(\"The factorial of \",num2, \" is \",fact)\n\n", "idx": 8237, "target": 0}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    3.14159=3.14\n    return (2/3)*3.14159*(radius**3)\n\n", "idx": 8238, "target": 0}
{"func": "# Write a Python program to check a list is empty or not\nr = []\nif not r:\nprint(\"List is empty\")\n\n", "idx": 8239, "target": 0}
{"func": "#81 Write a Python program to convert a given Bytearray to Hexadecimal string.\ndef bytearray_to_hexadecimal(list_val):\n     resulting = ''.join('{:02x}'.format(x) for x in list_val)  \n     return(resulting)\n     \n\n", "idx": 8240, "target": 0}
{"func": "# Write a python program to Implement Radix sort and print the sorted list for the below list\n\ndef radix_sort(elist, base=10):\n    if elist == []:\n        return\n \n    def key_factory(digit, base):\n        def key(elist, index):\n            return ((elist[index]//(base**digit)) % base)\n        return key\n    largest = max(elist)\n    exp = 0\n    while base**exp <= largest:\n        elist = counting_sort(elist, base - 1, key_factory(exp, base))\n        exp = exp + 1\n    return elist\n \ndef counting_sort(elist, largest, key):\n    c = [0]*(largest + 1)\n    for i in range(len(elist)):\n        c[key(elist, i)] = c[key(elist, i)] + 1\n \n    c[0] = c[0] - 1\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(elist)\n    for i in range(len(elist) - 1, -1, -1):\n        result[c[key(elist, i)]] = elist[i]\n        c[key(elist, i)] = c[key(elist, i)] - 1\n \n    return result\n \nelist = [2, 3, 5, 6, 4, 5]\nsorted_list = radix_sort(elist)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 8241, "target": 0}
{"func": "# write a python program to sort using list comprehensive\npair = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\npair.sort(key=lambda pair: pair[1])\nprint(pair)\n\n", "idx": 8242, "target": 0}
{"func": "# Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. \nclass Circle(object):\n    def __init__(self_, r):\n        self_.radius = r\n\n    def area(self_):\n        return self_.radius**2*3.14\n\n", "idx": 8243, "target": 0}
{"func": "#67 write a program to multiply two matrices using nested loops\n\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\nresulting = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n\nfor i in range(len(X)):\n\n   for j in range(len(Y[0])):\n\n       for k in range(len(Y)):\n           resulting[i][j] += X[i][k] * Y[k][j]\n\nfor r in resulting:\n   print(r)   \n   \n", "idx": 8244, "target": 0}
{"func": "# write a python program that prints the sum of natural numbers up to a given number\nnum2 = 16\nsum = 0\nwhile (num2 > 0):\n   sum += num2\n   num2 -= 1\nprint(f'The sum is {sum}')\n\n\n", "idx": 8245, "target": 0}
{"func": "#98 write a program to reverse a string that contains digits in Python\n\ndef reverse(n):\n    s=str(n) \n    p=s[::-1]\n    return p \n\nnum2 = int(input('Enter a positive value: '))\nprint('The reverse integer:',reverse(num2))\n\n", "idx": 8246, "target": 0}
{"func": "# write a Python Recursive function to solve the tower of hanoi \n  \ndef TowerOfHanoi(k , source, destination, auxiliary): \n    if k==1: \n        print(\"Move disk 1 from source\",source,\"to destination\",destination)\n        return\n    TowerOfHanoi(k-1, source, auxiliary, destination) \n    print(\"Move disk\",k,\"from source\",source,\"to destination\",destination)\n    TowerOfHanoi(k-1, auxiliary, destination, source) \n          \nk = 4\nTowerOfHanoi(k,'A','B','C')\n\n\n", "idx": 8247, "target": 0}
{"func": "# 42 write a python program that converts lower case letters to uppercase and vice versa\ndef flip_case(\u2019):\n    \u2019 = [int(ord(x)) for x in \u2019]\n    \u2019 = [x - 32 if x >= 97 else x + 32 for x in \u2019]\n    \u2019 = [chr(x) for x in \u2019]\n    return \"\".join(\u2019)\n\n\n", "idx": 8248, "target": 0}
{"func": "# Write a Python function to print the root of the quadratic equation\ndef quadratic_root(A,B,C):\n\timport math\n\td=((B**2)-4*A*C)\n\n\tif d>=0:\n\t    s=(-B+(d)**0.5)/(2*A)\n\t    n=(-B-(d)**0.5)/(2*A)\n\t    print(math.floor(s),math.floor(n))\n\telse:\n\t    print('The roots are imaginary')\n\n\n", "idx": 8249, "target": 0}
{"func": "# Write a lambda function that gives True if the input number is even otherwise False\n\njust = lambda a: True if a%2 == 0 else False\n\n", "idx": 8250, "target": 0}
{"func": "#94 write a program to remove matching tuples and print it\n\ntest_list1 = [('Early', 'morning'), ('is','good'), ('for', 'Health')] \ntest_list2 = [('Early', 'morning'), ('is','good')] \n\nr=[]\nfor i in range(0,len(test_list1)):\n    for j in range(0,len(test_list2)):\n        if test_list1[i]  not in test_list2:\n           #continue\n           r.append(test_list1[i])\n           break\nprint(r) \n\n", "idx": 8251, "target": 0}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninputs = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for d in inputs for key, value in d.items()}\n\n", "idx": 8252, "target": 0}
{"func": "# Write a function to calculate simple interest, given p, r, t\ndef simp_int(p, r, t):\n    interst = (p*r*t)/100\n    return interst\n\n\n", "idx": 8253, "target": 0}
{"func": "# initializing updict \nupdict = {\"Gfg\"  : 10, \"Best\" : 17} \nl={}\nfor key in test_dict.keys():\n     if key in updict:\n        l.update({key:updict[key]})\n     else:\n        l.update({key:test_dict[key]})\nprint(l)       \n\n\n", "idx": 8254, "target": 0}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist1 = [5, 6, 7] \nfinal = [a+b for a in list1 for b in list1]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 8255, "target": 0}
{"func": "# write a python program to check name exists in given list\nnames1 = ['Amir', 'Bala', 'Chales']\nfor n in names1:\n    names = n.lower()\n    if 'amir' == names:\n        print('Yes name exists:',names)\n    else:\n        print('No')\n\n", "idx": 8256, "target": 0}
{"func": "# Write a Python Program to print the Factorial of a Number\nnum = 7\nfactorials = 1\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorials = factorials*i\n   print(\"The factorial of\",num,\"is\",factorials)\n   \n\n   \n\n", "idx": 8257, "target": 0}
{"func": "# write a python program to create multiplication table of 5\n\nk=5\nfor i in range(1,11):\n   print(k,'x',i,'=',k*i)\n\n", "idx": 8258, "target": 0}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res_ = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  return res_\n\n", "idx": 8259, "target": 0}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\ndef printDict():\n\tl=dict()\n\tfor i in range(1,21):\n\t\tl[i]=i**2\n\tfor k in l.keys():\t\n\t\tprint k\n\t\t\n", "idx": 8260, "target": 0}
{"func": "# Write a python function which determines if binary representation of a number is palindrome\n\ndef binaryPallindrome(num): \n     binaries = bin(num) \n     binaries = binaries[2:] \n     return binaries == binaries[-1::-1] \n\t \n\t \n", "idx": 8261, "target": 0}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist2 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) for val in list2] \n  \nprint(res) \n\n", "idx": 8262, "target": 0}
{"func": "# Write a python function to calculate number of days between two dates using datetime module\nfrom datetime import date\ndef day_diff(date1, date2):\n    dif = date1 - date2\n    return dif.days\n\n", "idx": 8263, "target": 0}
{"func": "# write a Python program to count the number of even and odd numbers from a series of numbers and print the result\n\nx = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nodd = just = 0\nfor i in x:\n    if i % 2 == 0:\n        just = just + 1\n    else:\n        odd = odd + 1\n        \nprint(\"Even Numbers are: \", just)\nprint(\"Odd Numbers are: \", odd)\n\n", "idx": 8264, "target": 0}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\ndef count_blank_space():\n    lname = input(\"file name:\")\n    count = 0\n    with open(lname, 'r') as f:\n        for line in f:\n            count += line.count(' ')\n    return count\n\n\n", "idx": 8265, "target": 0}
{"func": "# write a python program to print all Prime numbers in an Interval\nstart = 11\nends = 25\n \nfor i in range(start,ends):\n  if i>1:\n    for j in range(2,i):\n        if(i % j==0):\n            break\n    else:\n        print(i)\n\n", "idx": 8266, "target": 0}
{"func": "#\n\nimport os\nimport nltk\nimport string\nfrom collections import Counter\nfrom itertools import permutations, combinations, combinations_with_replacement\n\nletter = string.ascii_lowercase\n\n\n", "idx": 8267, "target": 0}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum2 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num2, num2))\n\n\n", "idx": 8268, "target": 0}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nk = 1234511\nprint(sumDigits(k))\n\n", "idx": 8269, "target": 0}
{"func": "# Write a program to print all the even numbers in a range\n\nr3, r2 = 1, 28\n\nfor _ in range(r3, r2+1):\n  if _%2 == 0:\n    print(_)\n\n", "idx": 8270, "target": 0}
{"func": "#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.\ndef odd_occurrence(arr):\n \n    # Initialize result\n    resulting = 0\n     \n    # Traverse the array\n    for element in arr:\n        # XOR\n        resulting = resulting ^ element\n \n    return resulting\n\n", "idx": 8271, "target": 0}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist2 = [11, 5, 17, 18, 23, 50]  \n  \ndel list2[1:5] \n  \nprint(*list2)\n\n\n", "idx": 8272, "target": 0}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\nsums = num1 + num2\nreturn not sums % 2\n\n\n", "idx": 8273, "target": 0}
{"func": "# Write a function that takes a base and a power and finds the power of the base using recursion.\n\ndef power(bases,exp):\n    if(exp==1):\n        return(bases)\n    if(exp!=1):\n        return(bases*power(bases,exp-1))\nbases=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprint(\"Result:\",power(bases,exp))\n\n\n", "idx": 8274, "target": 0}
{"func": "# Write a python program to print a list after removing elements from index 1 to 4\n\nlist2 = [11, 5, 17, 18, 23, 50]  \n  \ndel list2[1:5] \n  \nprint(*list2)\n\n\n", "idx": 8275, "target": 0}
{"func": "# Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\nn=int(raw_input())\nsums=0.0\nfor i in range(1,n+1):\n    sums += float(float(i)/(i+1))\nprint sums\n\n", "idx": 8276, "target": 0}
{"func": "# write a python function to calculate the age with the user provided date of birth\n\nfrom datetime import date\ndef calculate_age(dtob):\n    yesterday = date.yesterday()\n    return yesterday.year - dtob.year - ((yesterday.month, yesterday.day) < (dtob.month, dtob.day))\n\n", "idx": 8277, "target": 0}
{"func": "# Initialize K  \nH = 5\n\nfor key,value in test_dict.items():\n    test_dict.update({key:value-H})\nprint(test_dict) \n\n\n", "idx": 8278, "target": 0}
{"func": "# Write a Python program to detect the number of local variables declared in a function.\ndef abc():\nx = 1\nx = 2\nstr1= \"w3resource\"\n\nprint(abc.__code__.co_nlocals)\n\n\n", "idx": 8279, "target": 0}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sums = num1 + num2\n    return sums\n\n\n", "idx": 8280, "target": 0}
{"func": "# Given a sorted integer array without duplicates, return the summary of its ranges.\ninput_array = [0,1,2,4,5,7]\nstart=0\nresult = []\nwhile start < len(input_array):\n    ends = start \n    while ends+1<len(input_array) and ((input_array[ends+1] - input_array[ends]) == 1):\n        ends = ends + 1\n    if ends!=start:\n        result.append(\"{0}-->{1}\".format(input_array[start], input_array[ends]))\n        print(result)\n    else:\n        result.append(\"{0}\".format(input_array[start]))\n        print(result)\n    start = ends+1\n\nprint(result)\n\n", "idx": 8281, "target": 0}
{"func": "#32. Write a python program to find HCf or GCD using euclidian Algorithm\ndef compute_hcf(y, y):\n   while(y):\n       y, y = y, y % y\n   return y\n\n", "idx": 8282, "target": 0}
{"func": "# generates key:value pair for each item \ndictionaries = dict(subString.split(\"=\") for subString in str.split(\";\")) \n  \n", "idx": 8283, "target": 0}
{"func": "# write a program to find and print the smallest among three numbers\nnum2 = 100\nnum2 = 200\nnum3 = 300\nif (num2 <= num2) and (num2 <= num3):\n    smallest = num2\nelif (num2 <= num2) and (num2 <= num3):\n    smallest = num2\nelse:\n    smallest = num3\nprint(f'smallest:{smallest}')\n\n", "idx": 8284, "target": 0}
{"func": "# Write a program to accept a number and print inverted star pattern\n\nk=int(input(\"Enter number of rows: \"))\nfor i in range (k,0,-1):\n    print((k-i) * ' ' + i * '*')\n\t\n\t\n", "idx": 8285, "target": 0}
{"func": "#random choice \nfrom random import choice\n\nA, b, c = float, int, str\nfor i in range(5):\n    j = choice([A,b,c])(i)\n    print(j, type(j))\n\n\n", "idx": 8286, "target": 0}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr1 = \"Apple\"\ncountDict = dict()\nfor char in str1:\n  counts = str1.counts(char)\n  countDict[char]=counts\nprint(countDict)\n\n", "idx": 8287, "target": 0}
{"func": "# Write a python program to check and print if the password is valid or not not with given rules 1. Minimum 8 characters.2. The alphabets must be between [a-z] 3.  At least one alphabet should be of Upper Case [A-Z] 4.  At least 1 number or digit between [0-9]. 5. At least 1 character from [ _ or @ or $ ].\n\nimport re \npassword = \"R@m@_f0rtu9e$\"\nflags = 0\nwhile True:   \n    if (len(password)<8): \n        flags = -1\n        break\n    elif not re.search(\"[a-z]\", password): \n        flags = -1\n        break\n    elif not re.search(\"[A-Z]\", password): \n        flags = -1\n        break\n    elif not re.search(\"[0-9]\", password): \n        flags = -1\n        break\n    elif not re.search(\"[_@$]\", password): \n        flags = -1\n        break\n    elif re.search(\"\\s\", password): \n        flags = -1\n        break\n    else: \n        flags = 0\n        print(\"Valid Password\") \n        break\n  \nif flags ==-1: \n    print(\"Not a Valid Password\") \n\t\n\t\n\t\n", "idx": 8288, "target": 0}
{"func": "# write a python function to return random selection from itertools.product(*args, **kwds)\ndef random_product(*args, repeat=1):\n    import random\n    pool = [tuple(pool) for pool in args] * repeat\n    return tuple(map(random.choice, pool))\n\n", "idx": 8289, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       resulting[i][j] = X[i][j] + Y[i][j]\n\nfor r in resulting:\n   print(r)\n\n", "idx": 8290, "target": 0}
{"func": "# Write a python program using a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalues = raw_input()\nnumber = [x for x in values.split(\",\") if int(x)%2!=0]\nprint (\",\".join(number))\n\n\n", "idx": 8291, "target": 0}
{"func": "# Write a python function to Compute LCM of two input number\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           gcd = greater\n           break\n       greater += 1\n   return gcd\n\n   \n   \n\n", "idx": 8292, "target": 0}
{"func": "# choose the smaller number\n    if x > y:\n        larger = y\n    else:\n        larger = x\n    for i in range(1, larger+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 8293, "target": 0}
{"func": "#26 write a program to check if a string contains any special character \n  \nimport re \ndef run(string): \n  \n    regexps = re.compile('[@_!#$%^&*()<>?/\\|}{~:]') \n      \n    if(regexps.search(string) == None): \n        print(\"String is accepted\") \n          \n    else: \n        print(\"String is not accepted.\") \n      \n  \nif __name__ == '__main__' : \n      \n    # Enter the string \n    string = \"Hello@World\"\n      \n    # calling run function  \n    run(string) \n    \n", "idx": 8294, "target": 0}
{"func": "#80 write a Python program to print the roots of a quadratic equation\nimport math\na = float(input(\"Enter the first coefficient: \"))\nb = float(input(\"Enter the second coefficient: \"))\nb = float(input(\"Enter the third coefficient: \"))\nif (a!=0.0):\n    d = (bb)-(4ac) \n    if (d==0.0):\n        print(\"The roots are real and equal.\") \n        r = -b/(2a)\n        print(\"The roots are \", r,\"and\", r)\n    elif(d>0.0):\n        print(\"The roots are real and distinct.\")\n        r1 = (-b+(math.sqrt(d)))/(2a) \n        r2 = (-b-(math.sqrt(d)))/(2a)\n        print(\"The root1 is: \", r1)\n        print(\"The root2 is: \", r2)\n    else:\n        print(\"The roots are imaginary.\")\n        rp = -b/(2a) ip = math.sqrt(-d)/(2a)\n        print(\"The root1 is: \", rp, \"+ i\",ip)\n        print(\"The root2 is: \", rp, \"- i\",ip)\nelse:\n    print(\"Not a quadratic equation.\"\n\n", "idx": 8295, "target": 0}
{"func": "# write a python program to print a matrix as output\nmatrix_matrix = [[1, 2, 3, 4],\n       [4, 5, 6, 7],\n       [8, 9, 10, 11],\n       [12, 13, 14, 15]]\n \nfor i in range(0, 4):\n    print(matrix_matrix[i][1], end = \" \")\n\n", "idx": 8296, "target": 0}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l1, l2):\n    new_list = []\n    i = 0\n    k = 0\n    l1_len = len(l1)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (k <= l2_len-1):\n        if l1[i] < l2[k]:\n            new_list.append(l1[i])\n            i +=1\n        else:\n            new_list.append(l2[k])\n            k +=1\n    if i <= (l1_len-1):\n        new_list += l1[i:]\n    if k <= (l2_len-1):\n        new_list += l2[k:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l1, l2 ) )\n    return final_list\n\n", "idx": 8297, "target": 0}
{"func": "#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.\ndef collatz_sequence(y):\n    num_seq = [y]\n    if y < 1:\n       return []\n    while y > 1:\n       if y % 2 == 0:\n         y = y / 2\n       else:\n         y = 3 * y + 1\n       num_seq.append(y)    \n    return num_seq\n\n", "idx": 8298, "target": 0}
{"func": "# write a Python function to convert binary to Gray codeword\ndef binary_to_gray(k):\n    k = int(k, 2)\n    k ^= (k >> 1)\n    return bin(k)[2:]\n \n \n \n", "idx": 8299, "target": 0}
{"func": "# Given a decimal number N, write python functions check and print if a number has consecutive zeroes or not after converting the number to its K-based notation.\n\ndef hasConsecutiveZeroes(N, K): \n    y = toK(N, K) \n    if (check(y)): \n        print(\"Yes\") \n    else: \n        print(\"No\") \n  \ndef toK(N, K): \n  \n    w = 1\n    s = 0\n    while (N != 0): \n        r = N % K \n        N = N//K \n        s = r * w + s \n        w *= 10\n    return s \n  \ndef check(N): \n\n    fl = False\n    while (N != 0): \n        r = N % 10\n        N = N//10\n  \n        if (fl == True and r == 0): \n            return False\n        if (r > 0): \n            fl = False\n            continue\n        fl = True\n    return True\n\t\n\t\n", "idx": 8300, "target": 0}
{"func": "#4. write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sums = num1 + num2\n    return sums\n\n\n", "idx": 8301, "target": 0}
{"func": "# using len() + any() \nres_ = any(len(ele) == 0 for ele in list1) \n  \n", "idx": 8302, "target": 0}
{"func": "# write a python lambda function to add three numbers\n y = lambda a, b, c : a + b + c\n print(y(5, 6, 2))\n \n", "idx": 8303, "target": 0}
{"func": "# Write a python program that accepts a sentence and calculate the number of letters and digits.\n\u2019 = raw_input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in \u2019:\nif c.isdigit():\nd[\"DIGITS\"]+=1\nelif c.isalpha():\nd[\"LETTERS\"]+=1\nelse:\npass\nprint (\"LETTERS\", d[\"LETTERS\"])\nprint (\"DIGITS\", d[\"DIGITS\"])\n\n", "idx": 8304, "target": 0}
{"func": "# Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.\nvalue = input()\nnumbers = [x for x in value.split(\",\") if int(x)%2!=0]\nprint(\",\".join(numbers))\n\n\n", "idx": 8305, "target": 0}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn=int(raw_input())\nl=dict()\nfor i in range(1,n+1):\n    l[i]=i*i\nprint l\n\n", "idx": 8306, "target": 0}
{"func": "# 13  write a function to calculate the mean of an array\n\n\ndef calc_mean(arr):\n    sums = 0\n    for i in range(len(arr)):\n        sums += arr[i]\n    return sums / len(arr)\n\n\n", "idx": 8307, "target": 0}
{"func": "# Write a Python function to Find the Sum of Cosine Series\n\ndef cosine(x,n):\n    cosx = 1\n    signs = -1\n    for i in range(2, n, 2):\n        pi=22/7\n        y=x*(pi/180)\n        cosx = cosx + (signs*(y**i))/math.factorial(i)\n        signs = -signs\n    return cosx\n\n", "idx": 8308, "target": 0}
{"func": "#python program to implement stooge sort\ndef stoogesort(arr, l, h):\n    if l >= h:\n        return\n    if arr[l] > arr[h]:\n        \u00b4 = arr[l]\n        arr[l] = arr[h]\n        arr[h] = \u00b4\n    if h - l + 1 > 2:\n        \u00b4 = (int)((h - l + 1) / 3)\n        stoogesort(arr, l, (h - \u00b4))\n        stoogesort(arr, l + \u00b4, (h))\n        stoogesort(arr, l, (h - \u00b4))\n\narr = [2, 4, 5, 3, 1]\nn = len(arr)\nstoogesort(arr, 0, n - 1)\nfor i in range(0, n):\n    print(arr[i], end= \\' \\')\n\n", "idx": 8309, "target": 0}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n1\n       # update values\n       n1 = n1\n       n1 = nth\n       count += 1\n", "idx": 8310, "target": 0}
{"func": "# breakdown the string into a list of words\nphrases = [word.lower() for word in my_str.split()]\n\n", "idx": 8311, "target": 0}
{"func": "#53 write a program to find Armstrong number in an interval\n\nhigher = int(input(\"Enter lower range: \"))  \nupper = int(input(\"Enter upper range: \"))  \n  \nfor num in range(higher,upper + 1):  \n   sum = 0  \n   temp = num  \n   while temp > 0:  \n       digit = temp % 10  \n       sum += digit ** 3  \n       temp //= 10  \n       if num == sum:  \n            print(num)  \n            \n", "idx": 8312, "target": 0}
{"func": "# write a python function to Check if a given string is binary string or not\ndef check(string) :  \n    \u2019 = {'0', '1'} \n    if \u2019 == p or p == {'0'} or p == {'1'}: \n        return True \n    else : \n        return False\n\t\t\n\t\t\n\t\t\n", "idx": 8313, "target": 0}
{"func": "# Write a python function to find out the occurence of \"i\" element before first \"j\" in the list\n\ndef firstOccurence(arr, i,j):\n  res_ = 0\n  for k in arr:         \n      if k == j: \n          break\n      if k == i: \n          res_ += 1\n  return res_\n\n\n", "idx": 8314, "target": 0}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    3.14159 = 3.14\n    return 2*3.14159*(radius**2)\n\n", "idx": 8315, "target": 0}
{"func": "# write  a python program to print element with maximum values from a list\n\nlist2 = [\"gfg\", \"best\", \"for\", \"geeks\"] \n   \ns=[]\nfor i in list2:\n    count=0  \n    for j in i:\n        if j in ('a','e','i','o','u'):\n           count=count+1\n    s.append(count)\nprint(s)    \nif  count== max(s):      \n    print(list2[s.index(max(s))])\n\n", "idx": 8316, "target": 0}
{"func": "# write a python program to drop microseconds from datetime.\n\nimport datetime\ndV = datetime.datetime.today().replace(microsecond=0)\ndV\n\n", "idx": 8317, "target": 0}
{"func": "# By using list comprehension, write a program generate a 3*5*8 3D array whose each element is 0.\narrays = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]\nprint arrays\n\n", "idx": 8318, "target": 0}
{"func": "#30 get rid of all null values in array python\nslist = [1, 2, 3, '', 4]\nslist = [i for i in slist if i]\n\n", "idx": 8319, "target": 0}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndeltas = None\nif date_1 > date_2:\n    deltas = date_1 - date_2\nelse:\n    deltas = date_2 - date_1\nprint(\"Difference is\", deltas.days, \"days\")\n\n", "idx": 8320, "target": 0}
{"func": "# initializing K  \nK = 2\nl={}\nfor i in test_list:\n    l.update({i[K-1]:[i]})\nprint(l) \n\n\n", "idx": 8321, "target": 0}
{"func": "# 89 Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads, numlegs):\n    ns = \"No solutions!\"\n    for i in range(numheads + 1):\n        k = numheads - i\n        if 2 * i + 4 * k == numlegs:\n            return i, k\n    return ns, ns\n\n\n", "idx": 8322, "target": 0}
{"func": "#83 Write a Python program to move all spaces to the front of a given string in single traversal.\ndef moveSpaces(str1): \n    no_spaces = [char for char in str1 if char!=' ']   \n    space= len(str1) - len(no_spaces)\n    resulting = ' '*space    \n    return resulting + ''.join(no_spaces)\n\n", "idx": 8323, "target": 0}
{"func": "# Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. \nfreqs = {}  \nline = raw_input()\nfor word in line.split():\n    freqs[word] = freqs.get(word,0)+1\nwords = freqs.keys()\nwords.sort()\nfor w in words:\n    print \"%s:%d\" % (w,freqs[w])\n\n", "idx": 8324, "target": 0}
{"func": "# write a python program to find string in a list and print it\nlist1 = [1, 2.0, 'have', 'a', 'nice', 'day'] \n\n\u2019 = 'nice'\nfor i in list1:\n    if i == \u2019:\n       print(f'{\u2019} is  present in the list')\n\n\n", "idx": 8325, "target": 0}
{"func": "# write a python function to collect data into fixed-length chunks or blocks\ndef grouper(iterable, n, fillvalue=None):\n    from itertools import zip_longest\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args1 = [iter(iterable)] * n\n    return zip_longest(*args1, fillvalue=fillvalue)\n\n", "idx": 8326, "target": 0}
{"func": "# write a python function to combine three lists of equal lengths into a nested dictionary and return it \ndef lists_to_dict(test_list1, test_list2, test_list3):\n  res_ = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] \n  return res_\n\n", "idx": 8327, "target": 0}
{"func": "# printing original tuples list \nprint(\"The original list : \" + str(test_list)) \n\u2019=''\nfor i in test_list:\n    for j in i:\n        \u2019+=' '+j+' '\nprint(f' string after flattening is {\u2019}')\n\n", "idx": 8328, "target": 0}
{"func": "#100 Write a Python class to convert an integer to a roman numeral.\nclass Solution:\n    def int_to_Roman(self, num):\n        val2 = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val2[i]):\n                roman_num += syb[i]\n                num -= val2[i]\n            i += 1\n        return roman_num\n\n", "idx": 8329, "target": 0}
{"func": "# 26. Python Program to find Largest and Smallest Number in a List \n\nNumList = []\nNumber = int(input(\"Please enter the Total Number of List Elements: \"))\nfor i in range(1, Number + 1):\n    value = int(input(\"Please enter the Value of %d Element : \" %i))\n    NumList.append(value)\n\nsmallest = biggest = NumList[0]\n\nfor j in range(1, Number):\n    if(smallest > NumList[j]):\n        smallest = NumList[j]\n        min_position = j\n    if(biggest < NumList[j]):\n        biggest = NumList[j]\n        max_position = j\n\nprint(\"The Smallest Element in this List is : \", smallest)\nprint(\"The Index position of Smallest Element in this List is : \", min_position)\nprint(\"The Largest Element in this List is : \", biggest)\nprint(\"The Index position of Largest Element in this List is : \", max_position)\n\n", "idx": 8330, "target": 0}
{"func": "# Write a python function to find minimum edit distance between words given\n\ndef minDistance(word1, word2):\n    m = len(word1)\n    n = len(word2)\n\n    if m*n == 0:\n        return m + n\n\n    d = [ [0] * (n + 1) for _ in range(m+1)]\n    for i in range(m+1):\n        d[i][0] = i\n\n    for j in range(n+1):\n            d[0][j] = j\n\n    for i in range(m+1):\n        for j in range(n+1):\n            left = d[i-1][j] + 1\n            up = d[i][j-1] + 1\n            left_down = d[i-1][j-1]\n            if word1[i-1] != word2[j-1]:\n                left_down += 1\n            d[i][j] = min(left, up, left_down)\n\n    return d[m][n]\n\t\n\t\n", "idx": 8331, "target": 0}
{"func": "# Write a python function that Capitalize the First Letter of Every Word in the File\n\ndef capitalize(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            r=line.title()\n            print(r)\n\n", "idx": 8332, "target": 0}
{"func": "#65 function to attach counter to function\ndef attach_counter(fn: \"Function\"):\n    counts = 0\n    def inner(*args, **kwargs):\n        nonlocal counts\n        counts += 1\n        return fn(*args, **kwargs)\n    return inner\n\n\n\n", "idx": 8333, "target": 0}
{"func": "# write a python function to create two threads and start and join the two threads \nimport threading \n  \ndef print_cube(num): \n    print(\"Cube: {}\".format(num * num * num)) \n    \nt2 = threading.Thread(target=print_cube, args=(10,)) \nt2 = threading.Thread(target=print_cube, args=(10,)) \n\nt2.start() \n\nt2.start() \n\nt2.join()\nt2.join()\n\n\n", "idx": 8334, "target": 0}
{"func": "# write Python Program to Count the Number of Words in a Text File\nlname = input(\"Enter file name: \")\nnum_words = 0\nwith open(lname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n\n\n", "idx": 8335, "target": 0}
{"func": "# Write a Python function that accepts a string and calculate the number of upper case letters and lower case letters\ndef string_test(s):\nl={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\nfor c in s:\nif c.isupper():\nl[\"UPPER_CASE\"]+=1\nelif c.islower():\nl[\"LOWER_CASE\"]+=1\nelse:\npass\nprint (\"Original String : \", s)\nprint (\"No. of Upper case characters : \", l[\"UPPER_CASE\"])\nprint (\"No. of Lower case Characters : \", l[\"LOWER_CASE\"])\n\nstring_test('The quick Brow Fox')\n\n", "idx": 8336, "target": 0}
{"func": "# Write a function to find sum of nested list using Recursion\nsub_total = 0\ndef sum_nestedlist(l):\n    global sub_total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            sub_total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(sub_total)\n\n", "idx": 8337, "target": 0}
{"func": "#20 how to check if a list is a subset of another list\nif(all(x in test_list for x in sub_list)): \n    flags = True\n\n", "idx": 8338, "target": 0}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    phrases = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(phrases))  \n  \n    return reverse_sentence \n\n", "idx": 8339, "target": 0}
{"func": "# write a program to find and print the smallest among three numbers\nnum1 = 10\nnum1 = 12\nnum3 = 14\nif (num1 <= num1) and (num1 <= num3):\n   smallest = num1\nelif (num1 <= num1) and (num1 <= num3):\n   smallest = num1\nelse:\n   smallest = num3\nprint(f'smallest:{smallest}')\n\n\n", "idx": 8340, "target": 0}
{"func": "# use anonymous function\nresulting = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",resulting[i])\n\n", "idx": 8341, "target": 0}
{"func": "#55 Write a Python function to check if a number is a power of a given base.\nimport math\n\ndef isPower (n, base):\n    if base == 1 and n != 1:\n        return False\n    if base == 1 and n == 1:\n        return True\n    if base == 0 and n != 1:\n        return False\n    powers = int (math.log(n, base) + 0.5)\n    return base ** powers == n\n\n", "idx": 8342, "target": 0}
{"func": "#35 write a program to find the most frequent element in a list \n  \ndef most_frequent(List): \n    counters = 0\n    num = List[0] \n      \n    for i in List: \n        curr_frequency = List.count(i) \n        if(curr_frequency> counters): \n            counters = curr_frequency \n            num = i \n  \n    return num \n  \nList = [2, 1, 2, 2, 1, 3] \nprint(most_frequent(List)) \n\n", "idx": 8343, "target": 0}
{"func": "#Write a function to get list of profanity words from Google profanity URL\ndef profanitytextfile():\n    URL = \"https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt\"\n    html = urlopen(URL).read()\n    soup = BeautifulSoup(html, features=\"html.parser\")\n\n    textlist = []\n    table = soup.find('table')\n    trs = table.find_all('tr')\n    for tr in trs:\n        tds = tr.find_all('td')\n        for td in tds:\n            textlist.append(td.text)\n    return textlist\n\n", "idx": 8344, "target": 0}
{"func": "# write a python print to return the first n fibonacci numbers\n\ndef fibonacci(n):\n    A, b = 0, 1\n    print(A)\n    print(b)\n    for i in range(n - 2):\n        print(A + b)\n        A, b = b, A + b\n\n", "idx": 8345, "target": 0}
{"func": "# Write a function to count the number of carry operations for each of a set of addition problems\ndef carry_number(x, y):\n  f12 = 0\n  if(x == 0 and y == 0):\n    return 0\n  z = 0  \n  for i in reversed(range(10)):\n      z = x%10 + y%10 + z\n      if z > 9:\n        z = 1\n      else:\n        z = 0\n      f12 += z\n      x //= 10\n      y //= 10\n  if f12 == 0:\n    return \"No carry operation.\"\n  elif f12 == 1:\n    return f12\n  else:\n    return f12\n\n", "idx": 8346, "target": 0}
{"func": "# write a Python program to demonstrate working of Convert List to Single valued Lists in Tuple \n\ntest_list = [6, 8, 4, 9, 10, 2] \n\nprint(f\"The original list is : {test_list}\") \n\nres_ = tuple([ele] for ele in test_list)  \n\nprint(f\"Tuple after conversion : {res_}\") \n\n\n", "idx": 8347, "target": 0}
{"func": "# write a python function to calcuate the easter date using Gauss's Algorithm\n\n def gaussEaster(Y):\n    A = Y % 19\n    B = Y % 4\n    C = Y % 7\n\n    P = int(Y / 100)\n    Q = int((13 + 8 * P) / 25)\n    M = (15 - Q + P - P // 4) % 30\n    N = (4 + P - P // 4) % 7\n    D = (19 * A + M) % 30\n    E = (2 * B + 4 * C + 6 * D + N) % 7\n    days = (22 + D + E)\n    if ((D == 29) and (E == 6)):\n        print(Y, \"-04-19\")\n        return\n    elif ((D == 28) and (E == 6)):\n        print(Y, \"-04-18\")\n        return\n\n    else:\n        if (days > 31):\n            print(Y, \"-04-\", (days - 31))\n            return\n\n        else:\n            print(Y, \"-03-\", days)\n            return\n\n #write a python function to print the pascal's triangle\n \n def printPascal(n):  \n  \n    for line in range(1, n + 1):  \n        C = 1; \n        for i in range(1, line + 1):   \n            print(C, end = \" \");  \n            C = int(C * (line - i) / i);  \n        print(\"\");\n\n #write a python function to print Hosoya's triangle of height 'n'\n\n def printHosoya(n): \n    dp = [[0 for i in range(n)]  \n             for i in range(n)] \n               \n    dp[0][0] = dp[1][0] = dp[1][1] = 1\n    for i in range(2, n): \n        for j in range(n):  \n            if (i > j): \n                dp[i][j] = (dp[i - 1][j] + \n                            dp[i - 2][j]) \n            else: \n                dp[i][j] = (dp[i - 1][j - 1] +\n                            dp[i - 2][j - 2]) \n    for i in range(n): \n        for j in range(i + 1): \n            print(dp[i][j], end = ' ') \n        print() \n  \n  #write a python function to print Floyd's triangle\n  \n  def loydTriangle(n):   \n    val = 1\n    for i in range(1, n + 1): \n  \n        for j in range(1, i + 1): \n            print(val, end = \" \") \n            val += 1       \n        print(\"\") \n        \n #write a python function to print reverese Floyd's triangle\n \n def printReverseFloyd(n): \n  \n    curr_val = int(n*(n + 1)/2) \n    for i in range(n + 1, 1, -1): \n        for j in range(i, 1, -1): \n            print(curr_val, end =\"  \") \n            curr_val -= 1       \n        print(\"\") \n        \n # write a python function to print fibonacci series in the reverse order\n  \n def reverseFibonacci(n): \n   \n    A = [0] * n  \n    A[0] = 0 \n    A[1] = 1   \n    for i in range(2, n):   \n        A[i] = A[i - 2] + A[i - 1]  \n    for i in range(n - 1, -1 , -1):    \n        print(A[i],end=\" \")  \n        \n # write a python function to print Leibniz Harmonic triangle\n \ndef LeibnizHarmonicTriangle(n): \n    C = [[0 for x in range(n + 1)]  \n            for y in range(n + 1)]; \n    for i in range(0, n + 1): \n        for j in range(0, min(i, n) + 1): \n            if (j == 0 or j == i): \n                C[i][j] = 1;  \n            else: \n                C[i][j] = (C[i - 1][j - 1] + \n                           C[i - 1][j]);  \n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(\"1/\", end = \"\"); \n            print(i * C[i - 1][j - 1],  \n                           end = \" \"); \n        print(); \n\n # write a python function to check whether the given series is in Arithematic progression\n \n def checkIsAP(arr, n): \n    if (n == 1): return True\n    arr.sort() \n    d = arr[1] - arr[0] \n    for i in range(2, n): \n        if (arr[i] - arr[i-1] != d): \n            return False\n  \n    return True\n \n  # write a python function to check whether the given series is in harmonic progression\n  \ndef is_geometric(li): \n    if len(li) <= 1: \n        return True\n    ratio = li[1]/float(li[0]) \n    for i in range(1, len(li)): \n        if li[i]/float(li[i-1]) != ratio:  \n            return False\n    return True\n\n  # write a python function to find the area of a circumscribed circle of an equilateral triangle\n  \n   def area_cicumscribed(A): \n    return (A * A * (3.14159265 / 3)) \n    \n  # write a python function to find the side of a octogon inscribed in a square\n  \n  def octaside(A): \n    if A < 0: \n        return -1\n    s = A / (1.414 + 1) \n    return s \n  \n # write a python program to find the area of enneagon\n  \n  length = 6\n  Nonagon_area = 6.1818 * (length ** 2)  \n  print(\"Area of regular Nonagon is = \", Nonagon_area) \n  \n # write a python function to find the day of the week given the date\n \n def dayofweek(d, m, y): \n    t = [ 0, 3, 2, 5, 0, 3, \n          5, 1, 4, 6, 2, 4 ] \n    y -= m < 3\n    return (( y + int(y / 4) - int(y / 100) \n             + int(y / 400) + t[m - 1] + d) % 7) \n  \n  # write a python function to calculate the MDAS factorial of a number\n  \n def MDAS_Factorial( N ):   \n    if N <= 2: \n        return N \n    if N <= 4: \n        return N + 3      \n    if (N - 4) % 4 == 0: \n        return N + 1\n    elif (N - 4) % 4 <= 2: \n         return N + 2\n    else: \n         return N - 1\n         \n # write a python function to find the nth pronic number\n \n def findRectNum(n): \n    return n*(n + 1) \n \n #write a python function to find the sum of N pronic numbers\n\n def calculateSum(N): \n  \n    return (N * (N - 1) // 2 + \n            N * (N - 1) * (2 * \n                 N - 1) // 6); \n  \n  #write a python function to find the sum of first N even numbers\n  \n  def evensum(n): \n    curr = 2\n    sum = 0\n    i = 1 \n    while i <= n: \n        sum += curr  \n        curr += 2\n        i = i + 1\n    return sum\n    \n # write a python function to check whether a number can be written as a sum of 3 primes (Goldbach Weak Coonjecture)\n \n def check(n): \n  if n % 2 == 1 and n > 5: \n    print('YES') \n  else: \n    print('NO') \n\n # write a python function to find the nth perrin number\n \n def per(n): \n  \n    if (n == 0): \n        return 3; \n    if (n == 1): \n        return 0; \n    if (n == 2): \n        return 2; \n    return per(n - 2) + per(n - 3); \n    \n # write a python function to find the betrothed numbers smaller than n\n  \ndef BetrothedNumbers(n) : \n      \n    for num1 in range (1,n) :  \n        sum1 = 1    \n        i = 2\n        while i * i <= num1 : \n            if (num1 % i == 0) : \n                sum1 = sum1 + i \n                if (i * i != num1) : \n                    sum1 += num1 / i \n            i =i + 1\n        if (sum1 > num1) : \n              \n            num2 = sum1 - 1\n            sum2 = 1\n            j = 2\n            while j * j <= num2 : \n                if (num2 % j == 0) : \n                    sum2 += j \n                    if (j * j != num2) : \n                        sum2 += num2 / j \n                j = j + 1\n            if (sum2 == num1+1) : \n                print ('('+str(num1)+', '+str(num2)+')') \n                \n # write a python function to implement linear extrapolation\n \n def extrapolate(d, x): \n    y = (d[0][1] + (x - d[0][0]) / \n        (d[1][0] - d[0][0]) * \n        (d[1][1] - d[0][1]));    \n    return y;  \n\n # write a python function to print the collatz sequence\n \n def printCollatz(n): \n    while n != 1: \n        print(n, end = ' ') \n        if n & 1: \n            n = 3 * n + 1\n        else: \n            n = n // 2  \n    print(n) \n    \n # write a python function to print the newman-conway sequence\n \n def sequence(n): \n    f = [0, 1, 1] \n    print(f[1], end=\" \"), \n    print(f[2], end=\" \"), \n    for i in range(3,n+1): \n        f.append( f[f[i - 1]] + f[i - f[i - 1]]) \n        print(f[i], end=\" \"), \n     \n #write a python function to find the nth term in a padovan's sequence\n\n", "idx": 8348, "target": 0}
{"func": "# Write a Python function to find the number of zeros at the end of a factorial of a given positive number.\ndef factendzero(n):\n  y = n // 5\n  y = y \n  while y > 0:\n    y /= 5\n    y += int(y)\n  return y\n\n\n", "idx": 8349, "target": 0}
{"func": "# Write a program that calculates and prints the value according to the given formula: Q = Square root of [(2 * C * D)/H]\nimport math\nc=50\ng=30\nvalue = []\nitems=[x for x in raw_input().split(',')]\nfor d in items:\n    value.append(str(int(round(math.sqrt(2*c*float(d)/g)))))\nprint ','.join(value)\n\n", "idx": 8350, "target": 0}
{"func": "# Define a class, which have a class parameter and have a same instance parameter.\nclass Person:    \n    name = \"Person\"\n    def __init__(self, name = None):\n        self.name = name\njeffrey = Person(\"Jeffrey\")\nprint \"%s name is %s\" % (Person.name, jeffrey.name)\nnicola = Person()\nnicola.name = \"Nico\"\nprint \"%s name is %s\" % (Person.name, nicola.name)\n\n", "idx": 8351, "target": 0}
{"func": "# write a python function to map a numeric lookup using bisect\ndef grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n    from bisect import bisect\n    u = bisect(breakpoints, score)\n    return grades[u]\n\n", "idx": 8352, "target": 0}
{"func": "# Write a Python program to get the last day of a specified year and month.\nimport calendar\nyear = 2020\nweek = 12 \nprint(calendar.monthrange(year, week)[1])\n\n", "idx": 8353, "target": 0}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datetime \nstr2 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str2,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 8354, "target": 0}
{"func": "# write a  program to get th ematched elemnets from two list \nA = [1, 2, 3, 4, 5]\nb = [9, 8, 7, 6, 5]\n[i for i, j in zip(A, b) if i == j]\n\n\n", "idx": 8355, "target": 0}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    3.14159=3.14\n    return 3.14159*(radius**2)*height\n\n", "idx": 8356, "target": 0}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (n*l*temp)/pressure\n\n", "idx": 8357, "target": 0}
{"func": "# write a python function to calculate simple Interest\ndef simple_interest(p,t,r): \n   \n    s\u0103_mi = (p * t * r)/100\n    return s\u0103_mi \n\n", "idx": 8358, "target": 0}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres_ = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res_ += ele \n  \nres_ += dig \n\nprint(\"Strings after digits at end : \" + str(res_))\n\n", "idx": 8359, "target": 0}
{"func": "# write Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using dictionary comprehension + enumerate() \n\ntest_list = [{\"Gfg\" : 3, 4 : 9}, {\"is\": 8, \"Good\" : 2}, {\"Best\": 10, \"CS\" : 1}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres_ = {idx : val for idx, val in enumerate(test_list)} \nprint(\"The constructed dictionary : \" + str(res_)) \n\n", "idx": 8360, "target": 0}
{"func": "# Write a python Class to print All Possible Subsets from a Set of Distinct Integers\n\nclass sub:  \n    def f1(self, s1):  \n        return self.f2([], sorted(s1))  \n \n    def f2(self, curr, s1):  \n        if s1:  \n            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  \n        return [curr]  \nA=[2, 3, 5, 6, 4, 5]\n\nprint(\"Subsets: \")\nprint(sub().f1(A))\n\n", "idx": 8361, "target": 0}
{"func": "# write a python program to explain the generator\ndef f11(x):\n    yield x+1\nh=f11(8)\nprint(next(h))\n\n", "idx": 8362, "target": 0}
{"func": "# Write a python program to Implement Quicksort and print the sorted list for the below list\n\ndef quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n \n \ndef partition(alist, start, end):\n    pivot = alist[start]\n    u = start + 1\n    j = end - 1\n \n    while True:\n        while (u <= j and alist[u] <= pivot):\n            u = u + 1\n        while (u <= j and alist[j] >= pivot):\n            j = j - 1\n \n        if u <= j:\n            alist[u], alist[j] = alist[j], alist[u]\n        else:\n            alist[start], alist[j] = alist[j], alist[start]\n            return j\n \n \nalist = [2, 3, 5, 6, 4, 5]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 8363, "target": 0}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included). The numbers obtained should be printed in a comma-separated sequence on a single line.\nr=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        r.append(str(i))\nprint ','.join(r)\n\n", "idx": 8364, "target": 0}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    3.14159 = 3.14\n    return 2*3.14159*(radius**2)\n\n", "idx": 8365, "target": 0}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\nA = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in A.items():\n    print(k, v)\n\n\n", "idx": 8366, "target": 0}
{"func": "#54 write a  program to find the sum of natural numbers\n\nnum2 = int(input(\"Enter a number: \"))  \n  \nif num2 < 0:  \n   print(\"Enter a positive number\")  \nelse:  \n   sum = 0  \n   # use while loop to iterate un till zero  \n   while(num2 > 0):  \n       sum += num2  \n       num2 -= 1  \n   print(\"The sum is\",sum)  \n\n", "idx": 8367, "target": 0}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n2)\nelse:\n   while count < nterms:\n       #print(n1)\n       fab_list.append(n2)\n       nth = n2 + n2\n       # update values\n       n2 = n2\n       n2 = nth\n       count += 1\n\nfn = lambda x: \"FIBONACCI\" if x in fab_list else \"NOT_FIBONACCI\"\n\nprint(\"Given number is\",fn(20))\n\n", "idx": 8368, "target": 0}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr2 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str2) - N + 1): \n\n    if (len(set(str2[idx: idx + N])) == K): \n        res.append(str2[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 8369, "target": 0}
{"func": "# Write a Python function that takes two lists and returns True if they have at least one common member\ndef common_data(list1, list2):\nresulting = False\nfor x in list1:\nfor y in list2:\nif x == y:\nresulting = True\nreturn resulting\nprint(common_data([1,2,3,4,5], [5,6,7,8,9]))\n\n", "idx": 8370, "target": 0}
{"func": "# write a python function to compute gcd\ndef compute_gcd(y, y):\n\n   while(y):\n       y, y = y, y % y\n   return y\n\n", "idx": 8371, "target": 0}
{"func": "# write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\nimport zlib\ns = 'hello world!hello world!hello world!hello world!'\n\u00b4 = zlib.compress(s)\nprint \u00b4\nprint zlib.decompress(\u00b4)\n\n", "idx": 8372, "target": 0}
{"func": "# Calculate the sum of three given numbers, if the values are equal then return thrice of their sum\ndef sum_thrice(x, y, z):\n    sum. = x + y + z\n    if x == y == z:\n        sum. = sum. * 3\n    return sum.\n\n\nprint(sum_thrice(1, 2, 3))\nprint(sum_thrice(3, 3, 3))\n\n\n", "idx": 8373, "target": 0}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres_ = [] \nfor sub in test_list:                                            \n    if res_ and res_[-1][0] == sub[0]:               \n        res_[-1].extend(sub[1:])                         \n    else: \n        res_.append([ele for ele in sub])      \nres_ = list(map(tuple, res_)) \n  \nprint(\"The extracted elements : \" + str(res_))\n\n\n", "idx": 8374, "target": 0}
{"func": "#51 write a python function to find a missing number in a list of consecutive natural numbers\ndef getMissingNo(A): \n    k = len(A) \n    total = (k + 1)*(k + 2)/2\n    sum_of_A = sum(A) \n    return total - sum_of_A \n\n", "idx": 8375, "target": 0}
{"func": "# Write a function to remove empty list from a list using list comprehension\ndef removeEmptyList(li):\n  res_ = [ele for ele in li if ele != []] \n  return res_\n\n\n", "idx": 8376, "target": 0}
{"func": "# write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence\ndef sort_and_merge(l2, l2):\n    new_list = []\n    i = 0\n    j = 0\n    l1_len = len(l2)\n    l2_len = len(l2)\n    while (i <= l1_len-1) and (j <= l2_len-1):\n        if l2[i] < l2[j]:\n            new_list.append(l2[i])\n            i +=1\n        else:\n            new_list.append(l2[j])\n            j +=1\n    if i <= (l1_len-1):\n        new_list += l2[i:]\n    if j <= (l2_len-1):\n        new_list += l2[j:]\n    return new_list\n\ndef recursive_merge_sort(list_to_be_sorted):\n    final_list = []\n    first = 0\n    last = len(list_to_be_sorted)\n    if last <= 1:\n        final_list.extend( list_to_be_sorted )\n    else:\n        mid = last // 2\n        l2 = recursive_merge_sort( list_to_be_sorted[:mid] )\n        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )\n        final_list.extend( sort_and_merge( l2, l2 ) )\n    return final_list\n\n", "idx": 8377, "target": 0}
{"func": "# write a python function which takes two list of same length as input and return a dictionary with one as keys and other as values.\n\nkeys = eval(input(\"Enter key list : \"))\nvalue = eval(input(\"Enter value list : \"))\ndef fn(keys, value):\n    return { keys[i] : value[i] for i in range(len(keys)) }\n\n", "idx": 8378, "target": 0}
{"func": "# Write a Python program that accepts a string and calculate the number of digits and letters and print them\n\ny = input(\"Enter a string! \")\nd=l=0\nfor c in y:\n    if c.isdigit():\n        d = d + 1\n    elif c.isalpha():\n        l = l + 1\n    else:\n        pass\nprint(\"Letters: \", l)\nprint(\"Digits: \", d)\n\n", "idx": 8379, "target": 0}
{"func": "# write a python program that takes two integers as input and check if the first number is divisible by other\n\nnum2 = int(input(\"Enter first number :\"))\nnum2 = int(input(\"Enter second number :\"))\nremainder  = num2 % num2\nif remainder == 0:\n    print(num2 ,\" is divisible by \",num2)\nelse :\n    print(num2 ,\" is not divisible by \",num2)\n    \n", "idx": 8380, "target": 0}
{"func": "# Write a function that will convert a string into camelCase\n\nfrom re import sub\ndef camelCase(strings):\n  strings = sub(r\"(_|-)+\", \" \", strings).title().replace(\" \", \"\")\n  return strings[0].lower() + strings[1:]\n\n\n", "idx": 8381, "target": 0}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\nclass CircleArea:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius * self.radius\n\n\nr = 2\narg1 = CircleArea(r)\nprint(\"Area of circle:\", arg1.area())\n\n\n", "idx": 8382, "target": 0}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum2 = 4\nnum2 = 30\nmyval = [i for i in range(num2, num2, 2)]\nprint(myval)\n\n", "idx": 8383, "target": 0}
{"func": "# write Python program to find Mathematical Median of Cumulative Records \n\ntest_list = [(1, 4, 5), (7, 8), (2, 4, 10)] \n\nprint(\"The original list : \" + str(test_list)) \n\n\nres_ = [] \nfor sub in test_list : \n    for ele in sub : \n        res_.append(ele) \nres_.sort() \nmid = len(res_) // 2\nres_ = (res_[mid] + res_[~mid]) / 2\n\nprint(\"Median of Records is : \" + str(res_)) \n\n", "idx": 8384, "target": 0}
{"func": "# write a python function to reverse user provided list and return the result\ndef reverselist(inlist):    \n    inlist = inlist[::-1] \n    return inlist\n\nresulting = reverselist([1,2])\n\n5.\n", "idx": 8385, "target": 0}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres_ = [(sub[1], sub[0]) for sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res_)) \n\n", "idx": 8386, "target": 0}
{"func": "#70 write a program to display the powers of 2 using anonymous function\n\nterms_ = 10\nresult = list(map(lambda x: 2 ** x, range(terms_)))\n\nprint(\"The total terms are:\",terms_)\nfor i in range(terms_):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n", "idx": 8387, "target": 0}
{"func": "# write a python program to input a Number N from user and print Odd Numbers from 1 to N\n\nminimum = int(input(\" Please Enter any Maximum Value : \"))\n\nfor number in range(1, minimum + 1):\n    if(number % 2 != 0):\n        print(\"{0}\".format(number))\n        \n", "idx": 8388, "target": 0}
{"func": "# Write a Python Program to Convert Binary to Gray Code\n\ndef binary_to_gray(k):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    k = int(k, 2)\n    k ^= (k >> 1)\n\n    return bin(k)[2:]\n\n", "idx": 8389, "target": 0}
{"func": "# Write a python function to remove all the even numbers from a list and return the remaining list\n\ndef remove_even(my_list):\n    resulting = list(filter(lambda x: (x % 2 != 0), my_list))\n    return resulting\n\n\n", "idx": 8390, "target": 0}
{"func": "# write a python program that takes input a list and squares every term using list comprehension\ns2 = eval(input(\"Enter list \"))\nprint([i**2 for i in s2])\n\n", "idx": 8391, "target": 0}
{"func": "#43 function to print yesterday and tomorrow date\ndef tmrw_yest_time()\n    import datetime\n    yesterday = datetime.datetime.now() - datetime.timedelta(1)\n    tmw = datetime.datetime.now() + datetime.timedelta(1)\n    print( yesterday, tmw )\n\n\n", "idx": 8392, "target": 0}
{"func": "# Write a python function to find uncommon words between two sentences given\n\ndef UncommonWords(A, B): \n    counts = {} \n    for word in A.split(): \n        counts[word] = counts.get(word, 0) + 1\n    for word in B.split(): \n        counts[word] = counts.get(word, 0) + 1\n  \n    return [word for word in counts if counts[word] == 1]\n\t\n\t\n", "idx": 8393, "target": 0}
{"func": "# Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\nlu = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = filter(lambda x: x%2==0, lu)\nprint evenNumbers\n\n", "idx": 8394, "target": 0}
{"func": "# write a python funtion to implement a counter to record how many time the word has been repeated using closure concept\ndef word_counter():\n    counters = {}\n    def count(word):\n        counters[word] = counters.get(word, 0) + 1\n        return counters[word]\n    return count\n\n", "idx": 8395, "target": 0}
{"func": "# Write a python function to generate  Euclid Number Series(2, 3, 7, 31, 211, 2311, 30031)\nfrom math import sqrt\nfrom itertools import count, islice\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n)-1)))\n\ndef euclid_numbers(n):\n    products = 1\n    if n > 3:\n        for i in range(n):\n            if is_prime(i):\n                products = products * i\n                yield products\n                \n         \n         \n", "idx": 8396, "target": 0}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist2 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list2: \n    if ele % 2 == 0: \n        list2.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list2) \n\n", "idx": 8397, "target": 0}
{"func": "# Write a python function that Print all the Numbers Present in the Text File\n\ndef print_number(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            phrases = line.split()\n            for i in phrases:\n                for letter in i:\n                    if(letter.isdigit()):\n                        print(letter)\n\n\n", "idx": 8398, "target": 0}
{"func": "#63 custom logging along with counter\ndef custom_counter_log():\n    \"\"\"\n    An implementation of closures\n    \"\"\"\n    y = 0\n    dt = datetime.now()\n    def inner():\n       nonlocal y\n       y += 1\n       print(f' Switch or button is called {y} at {dt}')\n     return inner\n\n", "idx": 8399, "target": 0}
{"func": "# Write a python program to perform Vertical Concatenation in Matrix  \n  \ntest_list = [[\"India\", \"good\"], [\"is\", \"for\"], [\"Best\"]] \nprint(\"The original list : \" + str(test_list)) \nres_ = [] \nN = 0\nwhile N != len(test_list): \n    temp = '' \n    for idx in test_list:       \n\n        try: temp = temp + idx[N] \n        except IndexError: pass\n    res_.append(temp) \n    N = N + 1\n  \nres_ = [ele for ele in res_ if ele] \n  \nprint(\"List after column Concatenation : \" + str(res_)) \n\n\n", "idx": 8400, "target": 0}
{"func": "# write Python program to demonstrate ternary operator using tuples, Dictionary and lambda\nA, b = 10, 20\nprint( (b, A) [A < b] ) \nprint({True: A, False: b} [A < b]) \nprint((lambda: b, lambda: A)[A < b]()) \n\n", "idx": 8401, "target": 0}
{"func": "# write a program to find and print the largest among three numbers\nnum1 = 123\nnum1 = 125\nnum3 = 148\nif (num1 >= num1) and (num1 >= num3):   \n    largest = num1\nelif (num1 >= num1) and (num1 >= num3):   \n    largest = num1\nelse:   largest = num3\nprint(f'largest:{largest}')\n\n", "idx": 8402, "target": 0}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,d):\n    j = 9*(10**9)\n    return (j*q1*q2)/(d**2)\n\n", "idx": 8403, "target": 0}
{"func": "# 78 By using list comprehension, write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nlu = [12, 24, 35, 70, 88, 120, 155]\nlu = [x for (i, x) in enumerate(lu) if i % 2 != 0]\nprint(lu)\n\n", "idx": 8404, "target": 0}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nk = 1234511\nprint(sumDigits(k))\n\n", "idx": 8405, "target": 0}
{"func": "# 93 write a python function to find One's compliment of a number\n\nimport math\n\n\ndef OnesComplement(num):\n    pieces = int(math.floor(math.log(num) / math.log(2)) + 1)\n    return ((1 << pieces) - 1) ^ num\n\n\n", "idx": 8406, "target": 0}
{"func": "# write a python program to sort a dictionary by its values and print the sorted dictionary with 'key' argument.\n\nl = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}\nprint(sorted(l.items(), key=lambda x: x[1]))\n\n\n", "idx": 8407, "target": 0}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres_ = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency: \" + str(res_))\n\n", "idx": 8408, "target": 0}
{"func": "# Write a python program to print sum of number digits in List\ntest_list = [12, 67, 98, 34] \nres = [] \nfor ele in test_list: \n    sums = 0\n    for digit in str(ele): \n        sums += int(digit) \n    res.append(sums) \nprint (\"List Integer Summation : \" + str(res)) \n\n\n\n", "idx": 8409, "target": 0}
{"func": "# write a python function to find the number of (i, j) pairs where i<j and ar[i]+ar[j] is divisible by k in a data list\ndef divisible_sum_pairs(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 1):\n        k = i + 1\n        while k < n:\n            if ((arr[i] + arr[k]) % k) == 0:\n                count += 1\n            k += 1\n    return count\n\n\nimport math\n\n\n", "idx": 8410, "target": 0}
{"func": "#  Write a python function to generate a random password\n\nimport random\n\nLOWERCASE_CHARS = tuple(map(chr, range(ord('a'), ord('z')+1)))\nUPPERCASE_CHARS = tuple(map(chr, range(ord('A'), ord('Z')+1)))\nDIGITS = tuple(map(str, range(0, 10)))\nSPECIALS = ('!', '@', '#', '$', '%', '^', '&', '*')\n\nSEQUENCE = (LOWERCASE_CHARS,\n            UPPERCASE_CHARS,\n            DIGITS,\n            SPECIALS,\n            )\n\ndef generate_random_password(total, sequences):\n    l = _generate_random_number_for_each_sequence(total, len(sequences))\n\n    password = []\n    for (population, k) in zip(sequences, l):\n        n = 0\n        while n < k:\n            position = random.randint(0, len(population)-1)\n            password += population[position]\n            n += 1\n    random.shuffle(password)\n    \n    while _is_repeating(password):\n        random.shuffle(password)\n        \n    return ''.join(password)\n\ndef _generate_random_number_for_each_sequence(total, sequence_number):\n    \"\"\" Generate random sequence with numbers (greater than 0).\n        The number of items equals to 'sequence_number' and\n        the total number of items equals to 'total'\n    \"\"\"\n    current_total = 0\n    l = []\n    for n in range(sequence_number-1, 0, -1):\n        current = random.randint(1, total - current_total - n)\n        current_total += current\n        l.append(current)\n    l.append(total - sum(l))\n    random.shuffle(l)\n\n    return l\n\ndef _is_repeating(password):\n    \"\"\" Check if there is any 2 characters repeating consecutively \"\"\"\n    n = 1\n    while n < len(password):\n        if password[n] == password[n-1]:\n            return True\n        n += 1\n    return False\n\nif __name__ == '__main__':\n    print(generate_random_password(random.randint(6, 30), SEQUENCE))\n\n", "idx": 8411, "target": 0}
{"func": "# write Python program to illustrate  enumerate function in loops \nl2 = [\"eat\",\"sleep\",\"repeat\"] \n\nfor count,ele in enumerate(l2,100): \n    print (count,ele )\n\n", "idx": 8412, "target": 0}
{"func": "# Define a class which has at least two methods: getString: to get a string from console input\nclass InputOutString(object):\n    def __init__(self_):\n        self_.s = \"\"\n    def getString(self_):\n        self_.s = raw_input()\nstrObj = InputOutString()\nstrObj.getString()\n", "idx": 8413, "target": 0}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist2 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list2: \n    if ele % 2 == 0: \n        list2.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list2) \n\n", "idx": 8414, "target": 0}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,d):\n    j = 9*(10**9)\n    return (j*q1*q2)/(d**2)\n\n", "idx": 8415, "target": 0}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    3.14159=3.14\n    return 2*3.14159*radius**2*+2*3.14159*radius*height\n\n", "idx": 8416, "target": 0}
{"func": "# write a python function to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           gcd = greater\n           break\n       greater += 1\n\n   return gcd\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n\n", "idx": 8417, "target": 0}
{"func": "# Python program to implement Pigeonhole Sort */\ndef pigeonhole_sort(A):\n    my_min = min(A)\n    my_max = max(A)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in A:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    i = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            A[i] = count + my_min\n            i += 1\nA = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(A)\nfor i in range(0, len(A)):\n    print(A[i], end=\" \")\n\n\n\n", "idx": 8418, "target": 0}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \ncounts=0\nfor i in test_list:\n    if isinstance(i,dict):\n       counts=counts+1\nprint(counts)    \n\n\n", "idx": 8419, "target": 0}
{"func": "# write a python function to find all the substrings of given string that contains 2 or more vowels. Also, these substrings must lie in between 2 consonants and should contain vowels only.\ndef find_substr():\n    import re\n    v = \"aeiou\"\n    b = \"qwrtypsdfghjklzxcvbnm\"\n    m = re.findall(r\"(?<=[%s])([%s]{2,})[%s]\" % (b, v, b), input(), flags=re.I)\n    print('\\n'.join(m or ['-1']))\n\n\n", "idx": 8420, "target": 0}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\n    def __init__(self_):\n        pass\n\n    def area(self_):\n        return 0\n\nclass Square(Shape):\n    def __init__(self_, l):\n        Shape.__init__(self_)\n        self_.length = l\n\n    def area(self_):\n        return self_.length*self_.length\n\n", "idx": 8421, "target": 0}
{"func": "# write a Python program to reverse a linked list \n\nclass Node: \n\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\nclass LinkedList: \n\n    def __init__(self): \n        self.head = None\n\n    def reverse(self): \n        prev = None\n        currrent = self.head \n        while(currrent is not None): \n            next = currrent.next\n            currrent.next = prev \n            prev = currrent \n            currrent = next\n        self.head = prev \n        \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n\n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data)\n            temp = temp.next\n\n\nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n\n", "idx": 8422, "target": 0}
{"func": "# write a program to sort a nested dictionary by a key and print the sorted dictionary \ntest_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, \n             'Akshat' : {'roll' : 54, 'marks' : 12},  \n             'Akash' : { 'roll' : 12, 'marks' : 15}} \nsort_key = 'marks'\nres_ = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) \nprint(\"The sorted dictionary by marks is : \" + str(res_))\n\n", "idx": 8423, "target": 0}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres_ = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res_: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res_.add(ele)\n\nres_ = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res_))\n\n", "idx": 8424, "target": 0}
{"func": "# Write a Python Program to Count and print Number of Lowercase Characters in a String\n\nstrings='This is an Assignment'\ncount=0\nfor i in strings:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n", "idx": 8425, "target": 0}
{"func": "# 74 write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\n\nlu = [3, 6, 7, 8]\nshuffle(lu)\nprint(lu)\n\n", "idx": 8426, "target": 0}
{"func": "# write a python program which takes an integer N as input and add the odd numbers up to N and print the result\n\nE = int(input(\"Enter Number : \"))\nsum = 0\ni = 1\nwhile i <= E:\n    sum = sum + i\n    i = i + 2\nprint(sum)\n\n", "idx": 8427, "target": 0}
{"func": "# Write a python program to Implement Merge sort and print the sorted list for the below list\n\ndef merge_sort(elist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        mid = (start + end)//2\n        merge_sort(elist, start, mid)\n        merge_sort(elist, mid, end)\n        merge_list(elist, start, mid, end)\n \ndef merge_list(elist, start, mid, end):\n    left = elist[start:mid]\n    right = elist[mid:end]\n    k = start\n    i = 0\n    j = 0\n    while (start + i < mid and mid + j < end):\n        if (left[i] <= right[j]):\n            elist[k] = left[i]\n            i = i + 1\n        else:\n            elist[k] = right[j]\n            j = j + 1\n        k = k + 1\n    if start + i < mid:\n        while k < end:\n            elist[k] = left[i]\n            i = i + 1\n            k = k + 1\n    else:\n        while k < end:\n            elist[k] = right[j]\n            j = j + 1\n            k = k + 1\n \n \nelist = [2, 3, 5, 6, 4, 5]\nmerge_sort(elist, 0, len(elist))\nprint('Sorted list: ', end='')\nprint(elist)\n\n", "idx": 8428, "target": 0}
{"func": "# Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row/column/subbox must contain the digits 1-9 without repetition.\n\ndef isValidSudoku(board):\n    rows = [{} for i in range(9)]\n    column = [{} for i in range(9)]\n    boxes = [{} for i in range(9)]\n        \n    for i in range(9):\n        for j in range(9):\n            num = board[i][j]\n            if num != '.':\n                num = int(num)\n                box_index = (i//3)*3 + (j//3)\n                rows[i][num] = rows[i].get(num, 0) + 1\n                column[j][num] = column[j].get(num, 0) + 1\n                boxes[box_index][num] = boxes[box_index].get(num, 0) + 1       \n                if rows[i][num] > 1 or column[j][num] > 1 or boxes[box_index][num] > 1:\n                    print(\" i= {0} j = {1} box_index ={2}\".format(i,j,box_index))\n                    print(\"rows[i]: \", rows[i])\n                    print(\"columnns[j]: \", column[j])\n                    print(\"boxes[box_index]: \", boxes[box_index])\n                    return False\n                    \n    return True\n\t\n\t\n", "idx": 8429, "target": 0}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres_ = dict() \nfor idx in range(len(keys1)): \n\tres_[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res_))\n\n", "idx": 8430, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    3.14159=3.14\n    return 2*3.14159*radius*height\n\n", "idx": 8431, "target": 0}
{"func": "# Write a Python Program to print the Number of Times a Particular Number Occurs in a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nj=0\nnum=int(input(\"Enter the number to be counted:\"))\nfor j in a:\n    if(j==num):\n        j=j+1\nprint(\"Number of times\",num,\"appears is\",j)\n\n", "idx": 8432, "target": 0}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  chars = str1[i]\n  if(chars.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 8433, "target": 0}
{"func": "# Write a Python Program to Count and print Number of Lowercase Characters in a String\n\nstring='This is an Assignment'\ncounts=0\nfor i in string:\n      if(i.islower()):\n            counts=counts+1\nprint(\"The number of lowercase characters is:\")\nprint(counts)\n\n", "idx": 8434, "target": 0}
{"func": "# write a python program  to convert list of tuples into list \n\nlt = [('English', 2), ('Maths', 4), ('Science', '6')] \noff = [item for t in lt for item in t]  \nprint(off)\n\n", "idx": 8435, "target": 0}
{"func": "# Write a python program to implement Dequeue\n\nclass Dequeue:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def append(self, data):\n        self.items.append(data)\n \n    def append_left(self, data):\n        self.items.insert(0, data)\n \n    def pop(self):\n        return self.items.pop()\n \n    def pop_left(self):\n        return self.items.pop(0)\n \n \nk = Dequeue()\nprint('Menu')\nprint('append <value>')\nprint('appendleft <value>')\nprint('pop')\nprint('popleft')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'append':\n        k.append(int(do[1]))\n    elif operation == 'appendleft':\n        k.append_left(int(do[1]))\n    elif operation == 'pop':\n        if k.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from right: ', k.pop())\n    elif operation == 'popleft':\n        if k.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from left: ', k.pop_left())\n    elif operation == 'quit':\n        break\n\n", "idx": 8436, "target": 0}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).\n\nr=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        r.append(str(i))\n\n\n", "idx": 8437, "target": 0}
{"func": "# result is 3x4\nresulting = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]\n\nfor r in resulting:\n   print(r)\n\n\n", "idx": 8438, "target": 0}
{"func": "# Write a python function to find and print if a email address given is valid or not\n\nimport re \n  \nregexps = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check(email):   \n    if(re.search(regexps,email)):  \n        print(\"Valid Email\")  \n          \n    else:  \n        print(\"Invalid Email\")\t\n\t\t\n\t\t\n", "idx": 8439, "target": 0}
{"func": "#50 write a python function to find the median on an array of numbers\ndef median(arr):\n  \n  if len(arr) == 1:\n    return arr[0]\n    \n  else:\n    arr = sorted(arr)\n    A = arr[0:round(len(arr)/2)]\n    b = arr[len(A):len(arr)]\n    if len(arr)%2 == 0:\n      return (A[len(A)-1]+b[0])/2\n    else:\n      return A[len(A)-1]\n\n", "idx": 8440, "target": 0}
{"func": "# write a program to print the nth fibonacci number\nn1 = 1\nn1 = 1\nn = 5\nfor _ in range(n):\n   n1, n1 = n1, n1 + n1\nprint(n1)\n\n\n", "idx": 8441, "target": 0}
{"func": "#15 write a program to Remove Tuples of Length K Using list comprehension \n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nprint(\"The original list : \" + str(test_list)) \nH = 1\nres = [ele for ele in test_list if len(ele) != H] \nprint(\"Filtered list : \" + str(res)) \n\n", "idx": 8442, "target": 0}
{"func": "#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.\n\nsize = int(input(\"Input the size of the matrix: \"))\nmatrix_matrix = [[0] * size for row in range(0, size)]\nfor x in range(0, size):\n\n    line = list(map(int, input().split()))\n\n    for y in range(0, size):\n        matrix_matrix[x][y] = line[y]\n\nmatrix_sum_diagonal = sum(matrix_matrix[size - i - 1][size - i - 1] for i in range(size))\n\n", "idx": 8443, "target": 0}
{"func": "# Addition of two vector\nv2 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i in range(len(v2)):\n  s1[i] = v2[i] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 8444, "target": 0}
{"func": "# Reusing global variable names and UnboundLocalErrors\ndef my_func():\n    print(var1)\nvar1 = 'global'\nmy_func()\n\n", "idx": 8445, "target": 0}
{"func": "# Write a python function to generate Lucas Numbers (2, 1, 3, 4, 7, 11, 18...)\ndef lucas_numbers(n):\n    second, second = 2,1\n    for _ in range(n):\n        second, second = second, second+second\n    return second\n            \n", "idx": 8446, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       resulting[i][j] = X[i][j] + Y[i][j]\n\nfor r in resulting:\n   print(r)  \n\n", "idx": 8447, "target": 0}
{"func": "# Write a Python program to print unique triplets whose three elements gives the sum of zero from an array of n integers.\nnum = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]\nlen_list = len(num)\ntrips = []\nfor i in range(len_list):\n    if i+3 > len_list:\n        break\n    quadruplets = num[i:i+3]\n    if len(set(quadruplets))==3:\n        if sum(quadruplets) == 0:\n            trips.append(quadruplets)\nprint(trips)\n\n\n\n", "idx": 8448, "target": 0}
{"func": "# 76 Write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nlu = [5, 6, 77, 45, 22, 12, 24]\nlu = [x for x in lu if x % 2 != 0]\nprint(lu)\n\n", "idx": 8449, "target": 0}
{"func": "# Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given\ndef compound_interest(p,r,t):\n    ai = p * (pow((1 + r / 100), t)) \n    return ai\n\n\n", "idx": 8450, "target": 0}
{"func": "# write a python function to find leftmost value greater than x\ndef find_gt(a, x):\n    from bisect import bisect_right \n    u = bisect_right(a, x)\n    if u != len(a):\n        return a[u]\n    raise ValueError\n\n", "idx": 8451, "target": 0}
{"func": "# write a program to find sum of elements in list\nsub_total = 0\nprint(f'sum: {sum([sub_total + x for x in [1, 2, 3, 4, 5]])}')\n\n\n", "idx": 8452, "target": 0}
{"func": "# write a Python function to convert Gray code to binary \ndef gray_to_binary(k):\n    k = int(k, 2) # convert to int\n    mask = k\n    while mask != 0:\n        mask >>= 1\n        k ^= mask\n    return bin(k)[2:]\n\t\n\t\n\t\n", "idx": 8453, "target": 0}
{"func": "# write a Python function to find time for a given angle. \n\ndef calcAngle(hh, mm): \n\n    hour_angle = 0.5 * (hh * 60 + mm) \n    minute_angle = 6 * mm \n\n    angles = abs(hour_angle - minute_angle) \n\n    angles = min(360 - angles, angles) \n\n    return angles \n\ndef printTime(theta): \n\n    for hh in range(0, 12): \n        for mm in range(0, 60): \n            if (calcAngle(hh, mm)==theta): \n                print(hh, \":\", mm, sep = \"\") \n                return\n            \n    print(\"Input angle not valid.\") \n    return\n\ntheta = 90.0\nprintTime(theta) \n\n", "idx": 8454, "target": 0}
{"func": "# The numbers obtained should be printed in a comma-separated sequence on a single line.\n\nr=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        r.append(str(i))\n\nprint(','.join(r))\n\n\n", "idx": 8455, "target": 0}
{"func": "# Write a function to Get Kth Column of Matrix\ndef kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    H =k\n    res = list(zip(*test_list))[H]\n    print(\"The Kth column of matrix is : \" + str(res))\n\n", "idx": 8456, "target": 0}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict)) \ns=[]\na=0\nk=[]\nfor key,value in test_dict.items():\n    s.append(len(value))\n    k.append(key)\nl=[]\nprint(s)\nprint(k) \nfor k,z in zip(k,s):\n      if z==min(s):\n         l.append(k)\nprint(l) \n\n\n", "idx": 8457, "target": 0}
{"func": "# take input from the user  \nprint(\"Select operation.\")  \nprint(\"1.Add\")  \nprint(\"2.Subtract\")  \nprint(\"3.Multiply\")  \nprint(\"4.Divide\")  \n  \nchoice = input(\"Enter choice(1/2/3/4):\")  \n  \nnum2 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \n  \nif choice == '1':  \n   print(num2,\"+\",num2,\"=\", add(num2,num2))  \n  \nelif choice == '2':  \n   print(num2,\"-\",num2,\"=\", subtract(num2,num2))  \n  \nelif choice == '3':  \n   print(num2,\"*\",num2,\"=\", multiply(num2,num2))  \nelif choice == '4':  \n   print(num2,\"/\",num2,\"=\", divide(num2,num2))  \nelse:  \n   print(\"Invalid input\")    \n   \n", "idx": 8458, "target": 0}
{"func": "# write a python function to Count the Number of Digits in a Number\ndef count_digits():\n    k = int(input(\"Enter number:\"))\n    count = 0\n    while k > 0:\n        count = count + 1\n        k = k // 10\n    return count\n\n\n", "idx": 8459, "target": 0}
{"func": "#33 function insert at the begining of dictionary\ndef dict_in_at_begin(orgin: dict, new_: dict):\n    penultimate = {**new_, **origin}\n    return penultimate\n\n\n", "idx": 8460, "target": 0}
{"func": "# Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads,numlegs):\n    fs='No solutions!'\n    for i in range(numheads+1):\n        j=numheads-i\n        if 2*i+4*j==numlegs:\n            return i,j\n    return fs,fs\n\n\n", "idx": 8461, "target": 0}
{"func": "# write Python Program to Multiply Two Matrices and print result.\nX = [[1,2,3],  \n       [4,5,6],  \n       [7,8,9]]  \n  \nY = [[10,11,12],  \n      [13,14,15],  \n      [16,17,18]]  \n\t  \nresulting = [[0,0,0],  \n               [0,0,0],  \n              [0,0,0]]   \nfor i in range(len(X)):  \n   for j in range(len(Y[0])):  \n       for k in range(len(Y)):  \n           resulting[i][j] += X[i][k] * Y[k][j]  \nfor r in resulting:  \n   print(r)  \n   \n   \n   \n", "idx": 8462, "target": 0}
{"func": "# write a python program to find difference between elements of two lists and print it\n\nl1 = [1, 2, 3, 4]\nl2 = [5, 8, 7, 0]\n\nres_ = []\nfor i in range(len(l1)):\n    res_.append(l1[i] - l2[i])\n\nprint(res_)\n\n", "idx": 8463, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    larger = num1 if num1 < num2 else num2\n    for i in range(1, larger+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 8464, "target": 0}
{"func": "# Write a python class Shape and Sub class Square:\nclass Shape():\ndef __init__(self_,length = 0):\nself_.length = length\ndef Area(self_):\nprint(\"Area of Shape is 0\")\nclass Square (Shape):\ndef __init__(self_,length = 0):\nself_.length = length\ndef Area(self_):\nself_.area = self_.length*self_.length\nprint(\"Area of a Square is: {}\".format(self_.area))\ns1 = Square(2)\ns1.Area()\n\n", "idx": 8465, "target": 0}
{"func": "# 79 By using list comprehension, write a program generate a 3*5*8 3D array whose each element is 0.\narrays = [[[0 for col in range(8)] for col in range(5)] for row in range(3)]\nprint(arrays)\n\n", "idx": 8466, "target": 0}
{"func": "# Write a function to reverse a string\n\ndef revStr(num2):\n  num2 = num2[::-1]\n  return num2\n\n", "idx": 8467, "target": 0}
{"func": "# Write a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef putNumbers(n):\n    i = 0\n    while i<n:\n        k=i\n        i=i+1\n        if k%7==0:\n            yield k\n\nfor i in reverse(100):\n    print(i)\n\n", "idx": 8468, "target": 0}
{"func": "# Write a Python program to count the elements in a list until an element is a tuple\nnum2 = [10,20,30,(10,20),40]\nctr = 0\nfor n in num2:\nif isinstance(n, tuple):\nbreak\nctr += 1\nprint(ctr)\n\n", "idx": 8469, "target": 0}
{"func": "#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).\ndef reverse_Bits(n):\n        resulting = 0\n        for i in range(32):\n            resulting <<= 1\n            resulting |= n & 1\n            n >>= 1\n        return resulting\n    \n", "idx": 8470, "target": 0}
{"func": "#13. Python Program to Find the Largest Among Three Numbers\n\nnum1 = 10\nnum1 = 14\nnum3 = 12\n\nif (num1 >= num1) and (num1 >= num3):\n   largest = num1\nelif (num1 >= num1) and (num1 >= num3):\n   largest = num1\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 8471, "target": 0}
{"func": "# write Python3 code to demonstrate working of Extract Tuples with all Numeric Strings Using lambda + filter() + isdigit() \ntest_list = [(\"45\", \"86\"), (\"Gfg\", \"1\"), (\"98\", \"10\"), (\"Gfg\", \"Best\")] \nprint(\"The original list is : \" + str(test_list)) \nres_ = list(filter(lambda sub : all(ele.isdigit() for ele in sub), test_list)) \nprint(\"Filtered Tuples : \" + str(res_)) \n\n", "idx": 8472, "target": 0}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\nA = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in A.items():\n    print(k, v)\n\n\n", "idx": 8473, "target": 0}
{"func": "#88 write a class that act like squares and should print the squares of values and and cuustom sequence type.\nclass Square:\n    def __init__(self_, n):\n        self_.n = n\n\n    def __iter__(self_):\n        return self_.show_sq(self_.n)\n\n    @staticmethod\n    def show_sq(n):\n         for i in range(n):\n             yield i**2\n\n    def __getitem__(self_, i):\n       if isinstance(i, int):\n            if i < = self_.n:\n                print(i**2)\n            else:\n                raise ValueError('Index out of bound')\n\n\n", "idx": 8474, "target": 0}
{"func": "# write a python program to replace blank space to 1\nmy_string = 'balaji'\nj = [print(i) for i in my_string if i not in \"aeiou\"]\nprint('Not a vowel',j)\n\n", "idx": 8475, "target": 0}
{"func": "# write a python program to convert a list of values in kilometers to feet\n kilometre = [39.2, 36.5, 37.3, 37.8]\n feet = map(lambda x: float(3280.8399)*x, kilometre)\n print(list(feet))\n \n", "idx": 8476, "target": 0}
{"func": "# Write a function to remove a given date type elements from a list.\n\ndef removeDataType(li,dType):\n    res_ = []\n    for i in li:\n        if not isinstance(i, dType):\n            res_.append(i)\n    return res_\n\n\n", "idx": 8477, "target": 0}
{"func": "#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.\nl = range(1, 201)\na = sum(l)\nprint (a * a - sum(i*i for i in l))\n\n", "idx": 8478, "target": 0}
{"func": "#Write a function to print all time when angle between hour hand and minute\ndef printTime(phi):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == phi):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\nphi = 90.0\nprintTime(phi)\n\n", "idx": 8479, "target": 0}
{"func": "# Python program to compute sum of digits in number\ndef sumDigits(no):  \n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   \nk = 1234511\nprint(sumDigits(k))\n\n", "idx": 8480, "target": 0}
{"func": "# Write a python program that maps list of words into a list of integers representing the lengths of the corresponding words\n\nth = [\"ab\",\"cde\",\"erty\"]\nlength_list = list(map((lambda element: len(element)), th))\nprint(str(length_list))\n\n\n", "idx": 8481, "target": 0}
{"func": "# write a program to print difference in between today and given date\n\nimport datetime\ndd = int(input(\"date: \"))\nmm = int(input(\"month: \"))\nyy = int(input(\"year: \"))\nA = datetime.date(yy,mm,dd)\nx = date.today()\nprint(x-A)\n\n", "idx": 8482, "target": 0}
{"func": "# Write a Python function to Find the Sum of Sine Series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        signs = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*signs\n    return sine\n\n", "idx": 8483, "target": 0}
{"func": "# write a python program to check if year is a leap year or not\n\nmonth = 2004\nif (month % 4) == 0:\n   if (month % 100) == 0:\n       if (month % 400) == 0:\n           print(f\"{month} is a leap year\")\n       else:\n           print(f\"{month} is not a leap year\")\n   else:\n      print(f\"{month} is a leap year\")\nelse:\n   print(f\"{month} is not a leap year\")\n\n", "idx": 8484, "target": 0}
{"func": "# Write a function, which will find all such numbers between 1000 to 9999 that each digit of the number is an even number.\n\nvalues = []\nfor i in range(1000, 9999):\n  \u2019 = str(i)\n  if (int(\u2019[0])%2==0) and (int(\u2019[1])%2==0) and (int(\u2019[2])%2==0) and (int(\u2019[3])%2==0):\n      values.append(\u2019)\n\n\n", "idx": 8485, "target": 0}
{"func": "# Write a Python program to sort a tuple by its float element.\nprices = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\nprint( sorted(prices, key=lambda x: float(x[1]), reverse=True))\n\n", "idx": 8486, "target": 0}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            areas = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(areas,2)\n        else:\n            return None\n    return None\n\n", "idx": 8487, "target": 0}
{"func": "#34. write a Python function to Find LCM and returb the value\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           gcd = greater\n           break\n       greater += 1\n\n   return gcd\n\n", "idx": 8488, "target": 0}
{"func": "# write a python function to calculate the least common multiple (LCM) of two user provided positive integers.\n\ndef lcm(num1, num2):\n   if num1 > num2:\n       y = num1\n   else:\n       y = num2\n   while(True):\n       if((y % num1 == 0) and (y % num2 == 0)):\n           lcm = y\n           break\n       y += 1\n   return lcm\n\n", "idx": 8489, "target": 0}
{"func": "# Write a python function to remove duplicate words from a given string\ndef remove_duplicate_words(strings):\n    strings = strings.strip().split()\n    return ' '.join(set(strings))\n    \n    \n", "idx": 8490, "target": 0}
{"func": "#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.\nk = 0\nfor i in range(1,500):\n     if not i % 5 or not i % 3:\n         k = k + i\nprint(k)\n\n", "idx": 8491, "target": 0}
{"func": "#  Write a python function get unique value from tuple\n\ndef unique_values(v):\n    return(list(set(v)))\n\n\u00b4=[(1,2),(3,4),(4,3),(1,2)]\n\nunique_values(\u00b4)\n\n", "idx": 8492, "target": 0}
{"func": "# You are given a string. Split the string on a \" \" (space) delimiter and join using a - hyphen.\ndef word_join(s):\n    phrases = s.split(' ')\n    return '-'.join(phrases)\n\n\nprint(word_join(\"This is 17B Assignment\"))\n\n\n", "idx": 8493, "target": 0}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(th): \n    return [ele for ele in reversed(th)] \n      \nth = [10, 11, 12, 13, 14, 15] \nprint(Reverse(th)) \n\n", "idx": 8494, "target": 0}
{"func": "# write a Python Program to Check if a Number is Positive, Negative or 0\nnum2 = 10\nif num2 > 0:\n   print(\"Positive number\")\nelif num2 == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n", "idx": 8495, "target": 0}
{"func": "# write a Python function To Calculate Total Surface Area of Cylinder \ndef totalsurfacearea(l, h): \n    tsurf_ar = (2 * pi * l * h) + (2 * pi * l * l) \n    return tsurf_ar \n\nl = 5\nh = 8\n\nprint(\"Total Surface Area Of Cylinder = \",totalsurfacearea(l,h)) \n\n", "idx": 8496, "target": 0}
{"func": "# Write a python function to count the number of Words in a Text File\ndef check_words():\n    fname = input(\"file name: \")\n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            phrases = line.split()\n            num_words += len(phrases)\n    print(\"Number of words = \", num_words)\n\n\n", "idx": 8497, "target": 0}
{"func": "# write Python3 code to demonstrate Remove Rear K characters from String List using list comprehension + list slicing \n\ntest_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] \n\nprint(\"The original list : \" + str(test_list)) \n\nH = 4\n\nres = [sub[ : len(sub) - H] for sub in test_list] \n\nprint(\"The list after removing last characters : \" + str(res)) \n\n\n", "idx": 8498, "target": 0}
{"func": "#43. Python Program to Transpose a Matrix using Nested List Comprehension\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresulting = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]\n\nfor r in resulting:\n   print(r)\n\n\n", "idx": 8499, "target": 0}
{"func": "# Write a function to determine whether a given number is even or odd recursively\n\ndef check(k):\n    if (k < 2):\n        return (k % 2 == 0)\n    return (check(k - 2))\nk=int(input(\"Enter number:\"))\nif(check(k)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")\n\n\n", "idx": 8500, "target": 0}
{"func": "#3 add 1 to all elements in list python\nth = [1,2,3]\nlist(map(lambda x:x+1, th))\n\n", "idx": 8501, "target": 0}
{"func": "# Shuffle a list randomly\nimport random\nlists = [2,5,8,9,12]\nrandom.shuffle(lists)\nprint (\"Printing shuffled list \", lists)\n\n", "idx": 8502, "target": 0}
{"func": "# we have to be careful if we use a variable name that occurs in the global scope, and we want to access it in the local function scope if we want to reuse this name:\ndef my_func():\n    print(var1)  # want to access global variable\n    var1 = 'locally changed'  # but Python thinks we forgot to define the local variable!\n\nvar1 = 'global'\nmy_func()\n\n", "idx": 8503, "target": 0}
{"func": "#100 write a program to input a string and find total number of letters and digits\n\nprint(\"Input a string: \")\nstr2 = input()\n\nno_of_letters, no_of_digits = 0,0\n\nfor c in str2:\n    if (c>='a' and c<='z') or (c>='A' and c<='Z'):\n        no_of_letters += 1\n    if c>='0' and c<='9':\n        no_of_digits += 1\n\nprint(\"Input string is: \", str2)\nprint(\"Total number of letters: \", no_of_letters)\nprint(\"Total number of digits: \", no_of_digits)\n\n", "idx": 8504, "target": 0}
{"func": "# Write a python function to find out the occurence of \"i\" element before first \"j\" in the list\n\ndef firstOccurence(arr, i,j):\n  res_ = 0\n  for k in arr:         \n      if k == j: \n          break\n      if k == i: \n          res_ += 1\n  return res_\n\n\n", "idx": 8505, "target": 0}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist2 = [1, 2, 5, 6] \n \nres = [(val, pow(val, 3)) for val in list2] \n  \nprint(res) \n\n", "idx": 8506, "target": 0}
{"func": "# write a python program to transpose a matrix using a nested loop\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresulting = [[0,0,0],\n         [0,0,0]]\n\nfor i in range(len(X)):\n   for j in range(len(X[0])):\n       resulting[j][i] = X[i][j]\n\nfor r in resulting:\n   print(r)\n\n\n\n", "idx": 8507, "target": 0}
{"func": "#72 class to show as how to make the class as callable\nclass CallShow:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self_, msg = 'Demo class to show how to make class object as callable'):\n        self_.msg = msg\n\n    def __call__(self_):\n        \"\"\"\n        to make object as callable the class should have __call__ in it\n        \"\"\"\n        return f\"Code to be writen here above to act as per accling object of call\"\n\n\n", "idx": 8508, "target": 0}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\nu = 0\nwhile u < len(org_intervals)-1:\n    if org_intervals[u+1][0] < org_intervals[u][1]:\n        org_intervals[u][1]=org_intervals[u+1][1]\n        del org_intervals[u+1]\n        u = u - 1\n    u = u + 1\nprint(org_intervals)\n\n", "idx": 8509, "target": 0}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  chars = str1[i]\n  if(chars.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 8510, "target": 0}
{"func": "#16. Python program to find the factorial of a number.\nnum2 = 7\nfactorial = 1\n\nif num2 < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num2 == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num2 + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num2,\"is\",factorial)\n\n\n", "idx": 8511, "target": 0}
{"func": "# write a python program to read and print contents of a file\n\nfilepage = 'data.txt'\nwith open(filepage, 'r') as file:\n    data = file.read()\n    print(f'Data: {data}')\n\n", "idx": 8512, "target": 0}
{"func": "# Write a function pow(x, n), which calculates x raised to the power n \n\ndef myPow(x, n):\n    def pow(y, n):\n        if n == 0:\n            return 1.0\n        else:\n            partial = pow(x, n//2)\n            resulting = partial * partial\n            if n%2 == 1:\n                resulting *= x\n            return resulting\n           \n  \n    if n >= 0:\n        return pow(x, n)\n    else:\n        return 1/ pow(x, -n)\n\n\t\t\n", "idx": 8513, "target": 0}
{"func": "# write a python function to load pickle data from a file\ndef load_pickle_data(pickle_file):\n  import pickle\n  with open(pickle_file, 'rb') as f:\n      data__ = pickle.load(f)\n  return data__\n\n", "idx": 8514, "target": 0}
{"func": "# Write a Python function to multiply all values in the list\ndef multiplyList(myList) :\n    resulting = 1\n    for x in myList:\n         resulting = resulting * x \n    return resulting \n\n\t\n\t\n", "idx": 8515, "target": 0}
{"func": "# count the vowels\ncounts = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}\n\nprint(counts)\n\n", "idx": 8516, "target": 0}
{"func": "# Write a Python class that will initiate a number, input a number and print the number\nclass Number:\n\tdef __init__(self_, num):\n\t\tself_.num = num\n\n\tdef inputNum(self_):\n\t\tself_.num = int(input(\"Enter an integer number: \"))\n\n\tdef printNum(self_):\n\t\tprint(self_.num)\n\n\n", "idx": 8517, "target": 0}
{"func": "# Write a Python program to count and display the vowels of a given text\n\ndef vowel(text):\nconsonants = \"aeiuoAEIOU\"\nprint(len([letter for letter in text if letter in consonants]))\nprint([letter for letter in text if letter in consonants])\nvowel('zekelabs')\n\n", "idx": 8518, "target": 0}
{"func": "# This function computes GCD \ndef compute_gcd(y, y):\n\n   while(y):\n       y, y = y, y % y\n   return y\n\n", "idx": 8519, "target": 0}
{"func": "# Write a Python Program to Print an Identity Matrix\nk = 3\nfor i in range(0,k):\n    for j in range(0,k):\n        if(i==j):\n            print(\"1\",sep=\" \",end=\" \")\n        else:\n            print(\"0\",sep=\" \",end=\" \") \t\n\t\t\t\n\t\t\t\n\t\n\t\t\t\n", "idx": 8520, "target": 0}
{"func": "# write a python program to get indexes starting at a specified number for each element in a list using enumerate\n  \n  l2 = [\"eat\",\"sleep\",\"repeat\"] \n  for count,ele in enumerate(l2,100): \n      print (count,ele )\n      \n", "idx": 8521, "target": 0}
{"func": "# Python program to compute distance between two points\ndef points(x1, x2):\n    import math\n    p1 = list(x1)\n    p2 = list(x2)\n    distances = math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))\n    print(distances)\n\n\npoints((2, 3), (4, 5))\n\n\n", "idx": 8522, "target": 0}
{"func": "# initializing type \ntarg_type = int\n  \nres_ = [] \nfor key, val in test_dict.items(): \n  \n    # checking for values datatype \n    if isinstance(val, targ_type): \n        res_.append(key) \n  \n", "idx": 8523, "target": 0}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres_ = calculateSum(10)\nprint(res_)\n\n", "idx": 8524, "target": 0}
{"func": "# write Python Program to print the Sum of 10 Natural Numbers\nnum2 = 10\nif num2 < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num2 > 0):\n       sum += num2\n       num2 -= 1\n   print(\"The sum is\", sum)\n   \n\n   \n   \n", "idx": 8525, "target": 0}
{"func": "#15.Python program to display all the prime numbers within an interval\n\nhigher = 900\nupper = 1000\n\nprint(\"Prime numbers between\", higher, \"and\", upper, \"are:\")\n\nfor num in range(higher, upper + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 8526, "target": 0}
{"func": "# Write a Python program to shuffle and print a deck of card\n\nimport itertools, random\n\ndecks = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\n\nrandom.shuffle(decks)\n\nprint(\"You got:\")\nfor i in range(5):\n   print(decks[i][0], \"of\", decks[i][1])\n\n   \n   \n", "idx": 8527, "target": 0}
{"func": "# write a python function to find the volume of tetraheadron\n\n def vol_tetra(side): \n    volumes = (side ** 3 / (6 * 1.414)) \n    return round(volumes, 2)\n \n", "idx": 8528, "target": 0}
{"func": "# write a python program to print the number of uppercase and lowercase letters in a string\nsentence = 'The Quick Brown Fox'\nlowercase = 0\nupper_case = 0\nfor c in sentence:\n   if c.isupper():\n      upper_case += 1\n   elif c.islower():\n      lowercase += 1\n   else:\n      pass\nprint(f'Lowercase: {lowercase}, Uppercase: {upper_case}')\n\n\n", "idx": 8529, "target": 0}
{"func": "# Using max() + lambda \nres_ = max(test_dict.items(), key = lambda ele: ele[1][tup_idx])\n", "idx": 8530, "target": 0}
{"func": "# Write a program to convert dictionary into JSON\nimport json\ndata__ = {\"key1\" : \"value1\", \"key2\" : \"value2\"}\njsonData = json.dumps(data__)\nprint(jsonData)\n\n", "idx": 8531, "target": 0}
{"func": "#Write a function to print all time when angle between hour hand and minute\ndef printTime(phi):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == phi):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\nphi = 90.0\nprintTime(phi)\n\n\n\n", "idx": 8532, "target": 0}
{"func": "# write a python function to locate the rightmost value less than x \ndef find_lt(a, x):\n    from bisect import bisect_left  \n    u = bisect_left(a, x)\n    if u:\n        return a[u-1]\n    raise ValueError\n\n", "idx": 8533, "target": 0}
{"func": "# 96 write a python function that takes a number and returns an array of the number duplicated n times\n\n\ndef duplicate_array(num2, n):\n    num2 = [num2] * n\n    return num2\n\n\n", "idx": 8534, "target": 0}
{"func": "# write a python function to find leftmost item greater than or equal to x\ndef find_ge(a, x):\n    from bisect import bisect_left \n    u = bisect_left(a, x)\n    if u != len(a):\n        return a[u]\n    raise ValueError\n\n", "idx": 8535, "target": 0}
{"func": "# Counting total alphanumeric in a string\nstr2 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str2)):\n  char = str2[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 8536, "target": 0}
{"func": "# write a python function to remove vowels from a string\ndef vowel_remover(text):\n    strings = \"\"\n    for l in text:\n        if l.lower() != \"a\" and l.lower() != \"e\" and l.lower() != \"i\" and l.lower() != \"o\" and l.lower() != \"u\":\n            strings += l\n    return strings\n\n", "idx": 8537, "target": 0}
{"func": "#80 write a Python program to print the roots of a quadratic equation\nimport math\na = float(input(\"Enter the first coefficient: \"))\nb = float(input(\"Enter the second coefficient: \"))\nc = float(input(\"Enter the third coefficient: \"))\nif (a!=0.0):\n    d = (bb)-(4ac) \n    if (d==0.0):\n        print(\"The roots are real and equal.\") \n        r = -b/(2a)\n        print(\"The roots are \", r,\"and\", r)\n    elif(d>0.0):\n        print(\"The roots are real and distinct.\")\n        r1 = (-b+(math.sqrt(d)))/(2a) \n        r2 = (-b-(math.sqrt(d)))/(2a)\n        print(\"The root1 is: \", r1)\n        print(\"The root2 is: \", r2)\n    else:\n        print(\"The roots are imaginary.\")\n        rp = -b/(2a) IP = math.sqrt(-d)/(2a)\n        print(\"The root1 is: \", rp, \"+ i\",IP)\n        print(\"The root2 is: \", rp, \"- i\",IP)\nelse:\n    print(\"Not a quadratic equation.\"\n\n", "idx": 8538, "target": 0}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary\n\ndef mul_dict(d):\n    hoog=1\n    for i in d:    \n        hoog=hoog*d[i]\n    return hoog\n\n", "idx": 8539, "target": 0}
{"func": "# write a python program to find the average of list of numbers provided as input by user\nn=int(input(\"Enter the number of elements to be inserted: \"))\nA=[]\nfor i in range(0,n):\n    elem=int(input(\"Enter element: \"))\n    A.append(elem)\navg=sum(A)/n\nprint(\"Average of elements in the list\",round(avg,2))\n\n", "idx": 8540, "target": 0}
{"func": "# write a python Program to Determine all Pythagorean Triplets in the Range\nlimit= 50\nb=0\nm=2\nwhile(b<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        b=m*m+n*n\n        if(b>limit):\n            break\n        if(a==0 or b==0 or b==0):\n            break\n        print(a,b,b)\n    m=m+1\n\n", "idx": 8541, "target": 0}
{"func": "# write a program to find absoluute number of a given number\nimport math\n\nnumber = 34.564\nba = math.fabs(number)\nprint('Fabs', ba)\n\n\n", "idx": 8542, "target": 0}
{"func": "# Write a Python function that returns the integer obtained by reversing the digits of the given integer\ndef reverse(n):\n    s=str(n) \n    n=s[::-1]\n    return n \n\n\n", "idx": 8543, "target": 0}
{"func": "# Write a Python program to compute the autocorrelations for first 10 lags of a numeric series\nimport pandas as pd\nimport numpy as np\nestar = pd.Series(np.arange(20) + np.random.normal(1, 10, 20))\nautocorrelations = [estar.autocorr(i).round(2) for i in range(11)]\nprint(autocorrelations[1:])\n\n", "idx": 8544, "target": 0}
{"func": "# performing rotate \nres_ = [test_dict[(i - K) % len(test_dict)] \n       for i, x in enumerate(test_dict)] \n  \n", "idx": 8545, "target": 0}
{"func": "#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.\nsyms = []\n\nfor i in range(3):\n\n    syms.append([])\n\n    for j in range(2):\n\n        syms[i].append(0)\nprint(\"Multidimensional list:\")\nprint(syms)\n\n", "idx": 8546, "target": 0}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    3.14159=3.14\n    return (4/3)*3.14159*(radius**3)\n\n", "idx": 8547, "target": 0}
{"func": "# Write a python program to Count the Occurrences of a Word in a Text File\n\nfname = input(\"Enter file name: \")\nphrase='the'\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==phrase):\n                k=k+1\nprint(f\"Frequency of Occurrences of the word {a} is:\")\nprint(k)\n\n", "idx": 8548, "target": 0}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    counts = 0\n    for ele in lst: \n        if (ele == x): \n            counts = counts + 1\n    return counts \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 8549, "target": 0}
{"func": "# write a python function to load pickle data from a file\ndef load_pickle_data(pickle_file):\n  import pickle\n  with open(pickle_file, 'rb') as f:\n      data__ = pickle.load(f)\n  return data__\n\n", "idx": 8550, "target": 0}
{"func": "# Write a python function that Counts the Number of Blank Spaces in a Text File\n\ndef count_blank_space(fname):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            phrases = line.split()\n            for i in phrases:\n                for letter in i:\n                    if(letter.isspace):\n                        k=k+1\n    return k\n\n", "idx": 8551, "target": 0}
{"func": "# write Python3 code to demonstrate Remove Rear K characters from String List using map() + lambda \n\ntest_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 4\n\nres_ = list(map(lambda i: i[ : (len(i) - K)], test_list)) \n\nprint(\"The list after removing last characters : \" + str(res_)) \n\n\n\n", "idx": 8552, "target": 0}
{"func": "# write a python program that would print the first n positive integers using a for loop\nk = 62\nfor num in range(k):\n    print(num)\n\n\n", "idx": 8553, "target": 0}
{"func": "# Check if there is a value for a key in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Ishwar Venugopal\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"ishwarraja@gmail.com\"\n}\"\"\"\nstudents = json.loads(studentJson)\nif not (students.get('email') is None):\n     print(\"value is present for given JSON key\")\n     print(students.get('email'))\nelse:\n    print(\"value is not present for given JSON key\")\n\n", "idx": 8554, "target": 0}
{"func": "# write a python program to make increment on each call of method using lambda function\ndef make_incrementor(n):\n    return lambda x: x + n\nr = make_incrementor(42)\nr(0)\nprint(r(1))\n\n", "idx": 8555, "target": 0}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlenght = len(sampleList)\nchunkSize  = int(lenght/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += lenght - chunkSize\n\n", "idx": 8556, "target": 0}
{"func": "# write Python3 code to demonstrate working of  Merge Python key values to list  Using setdefault() + loop \n\ntest_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, \n            {'it' : 5, 'is' : 7, 'best' : 8}, \n            {'CS' : 10}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres_ = {} \nfor sub in test_list: \n    for key, val in sub.items(): \n        res_.setdefault(key, []).append(val) \n\nprint(\"The merged values encapsulated dictionary is : \" + str(res_)) \n\n\n", "idx": 8557, "target": 0}
{"func": "# Write a function to return the surface area of a hemi-sphere\ndef cal_area_hemisphere(radius):\n    3.14159 = 3.14\n    return 2*3.14159*(radius**2)\n\n", "idx": 8558, "target": 0}
{"func": "# 20 write a function which returns the count of each token in a given sentence as a dictionary\n\nfrom collections import Counter\n\n\ndef count_tokens(send):\n    send = list(send)\n    return dict(Counter(send))\n\n\n", "idx": 8559, "target": 0}
{"func": "# write a python program to check if the list is empty\n\nr = []\nif not r:\n  print(\"List is empty\")\nelse:\n  print(\"List is not empty\")\n\n", "idx": 8560, "target": 0}
{"func": "#79 class to show implementation of custom sequence of list\nclass CustomList:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = [1,2,3,4]\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, u):\n        if isinstance(u, int):\n            if u<0:\n                u = len(self.list_) + u\n            \n            if u<0 or u>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[u]\n\n\n", "idx": 8561, "target": 0}
{"func": "# write a program to find factorinal of a number\nimport math\n\nnumber = 8\nba = math.factorial(number)\nprint('Factorial', ba)\n\n", "idx": 8562, "target": 0}
{"func": "#20 how to check if a list is a subset of another list\nif(all(x in test_list for x in sub_list)): \n    flags = True\n\n", "idx": 8563, "target": 0}
{"func": "# Write a function to determine whether a given number is even or odd recursively\n\ndef check(k):\n    if (k < 2):\n        return (k % 2 == 0)\n    return (check(k - 2))\nk=int(input(\"Enter number:\"))\nif(check(k)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")\n\n\n", "idx": 8564, "target": 0}
{"func": "# write a python program to calculate the time taken\n\nfrom time import localtime\n\nactivites = {8: 'Sleeping',\n              9: 'Commuting',\n              17: 'Working',\n              18: 'Commuting',\n              20: 'Eating',\n              22: 'Resting' }\n\ntime_now = localtime()\nhour = time_now.tm_hour\n\nfor activity_time in sorted(activites.keys()):\n    if hour < activity_time:\n        print (activites[activity_time])\n        break\nelse:\n    print ('Unknown, AFK or sleeping!')\n\n\n", "idx": 8565, "target": 0}
{"func": "# 5. python function to strip vowels from a string\ndef strip_vowel_str(str):\n    consonants = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join([x for x in str if x not in consonants])\n\n", "idx": 8566, "target": 0}
{"func": "# Write a Python function for Binary Search\ndef binary_search(l, num_find):\n    '''\n    This function is used to search any number.\n    Whether the given number is present in the\n    list or not. If the number is present in list\n    the list it will return TRUE and FALSE otherwise.\n    '''\n    start = 0\n    end = len(l) - 1\n    mid_late = (start + end) // 2\n    found = False\n    position = -1\n    while start <= end:\n        if l[mid_late] == num_find:\n            found = True\n            position = mid_late\n            break\n        if num_find > l[mid_late]:\n            start = mid_late + 1\n            mid_late = (start + end) // 2\n        else:\n            end = mid_late - 1\n            mid_late = (start + end) // 2\n    return (found, position)\n\n\n", "idx": 8567, "target": 0}
{"func": "# Write a python program to Count Numbers, Alphabets, and Special Character\nText = input (\"Enter Text: \")\nletters, number, spaces , special = 0,0,0,0\nfor i in Text:\nif i.isalpha():\nletters+=1\nelif i.isspace():\nspaces +=1\nelif i.isnumeric():\nnumber +=1\nelse:\nspecial+=1\nprint(\" Alphabets = {} \\n Numbers = {} \\n Space = {} \\n Special Chracter = {}\".format(letters,number,spaces,special))\n\n", "idx": 8568, "target": 0}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres_ = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res_[key] = val \nprint(\"The dictionary after combination : \" + str(res_))\n\n", "idx": 8569, "target": 0}
{"func": "# Write a Python Program to Put Even and Odd elements in a List into Two Different Lists\n\nA=[2, 3, 8, 9, 2, 4, 6]\neven=[]\nodd=[]\nfor j in A:\n    if(j%2==0):\n        even.append(j)\n    else:\n        odd.append(j)\nprint(\"The even list\",even)\nprint(\"The odd list\",odd)\n\n", "idx": 8570, "target": 0}
{"func": "# Write a Python program to Calculate the sum of the digits of a random three-digit number and print the result.\n\nimport random \n\nn = random() * 900 + 100 \nn = int(n) \nprint(n) \n\na = n // 100 \nb = (n // 10) % 10 \nb = n % 10 \n\nprint(a + b + b)\n\n", "idx": 8571, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Strong Number\n\ndef strong_no_check(num):\n    sum1=0\n    temp=num\n    while(num):\n        i=1\n        r=1\n        r=num%10\n        while(i<=r):\n            r=r*i\n            i=i+1\n        sum1=sum1+r\n        num=num//10\n    if(sum1==temp):\n        return True\n    else:\n        return False\n\n", "idx": 8572, "target": 0}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            r_g = i \n    return r_g\n\n", "idx": 8573, "target": 0}
{"func": "# write a python program to find sum of natural numbers up to a 16\n\nnum2 = 16\nif num2 < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num2 > 0):\n       sum += num2\n       num2 -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 8574, "target": 0}
{"func": "# initializing Dictionary \ntest_dict = {'geeks' : 1, 'best': 6} \nr=test_str.split()\nprint(r)\ns=''\nfor i in r:\n    if i in test_dict:\n       r.remove(i)\nprint(\" \".join(i for i in r))\n\n\n", "idx": 8575, "target": 0}
{"func": "# Please write a function using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\ndef EvenGenerator(n):\n    u=0\n    while u<=n:\n        if u%2==0:\n            yield u\n        u+=1\n\n", "idx": 8576, "target": 0}
{"func": "# write a python program to print only digit or only apha charac in a given list\nr=[\"good\", \"oh!\", \"excellent!\", \"#450\"]\nprint([n for n in r if n.isalpha() or n.isdigit()])\n\n", "idx": 8577, "target": 0}
{"func": "# 85 write a program which count and print the numbers of each character in a string\ndic = {}\n\u2019 = \"JRR Tolkien\"\nfor \u2019 in \u2019:\n    dic[\u2019] = dic.get(\u2019, 0) + 1\nprint(\"\\n\".join([\"%s,%s\" % (k, v) for k, v in dic.items()]))\n\n", "idx": 8578, "target": 0}
{"func": "#Write a fucntion to convert Fahrenheit to Celsius\ndef Fahrenheit_to_Celsius(f):\n    celcius = (f - 32) / 1.8\n    return celcius\n\n12.\n", "idx": 8579, "target": 0}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\n\nclass CircleArea():\n    def __init__(self_,radius):\n        self_.radius=radius\n    def area(self_):\n        return 3.14 * self_.radius * self_.radius\na=6\nobj=CircleArea(a)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 8580, "target": 0}
{"func": "# Python program that accepts an integer (n) and computes the value of n+nn+nnn.\n\ndef custom(n):\n    a = n\n    n1 = int(\"%s\" % a)\n    n1 = int(\"%s%s\" % (a, a))\n    n3 = int(\"%s%s%s\" % (a, a, a))\n    return n1 + n1 + n3\n\n\nprint(custom(20))\n\n\n", "idx": 8581, "target": 0}
{"func": "# write a Python program to calculate number of days between two dates.\nfrom datetime import date\nf_date = date(2019, 4, 15) # YYYY/MM/DD\nl_date = date(2020, 4, 15) # YYYY/MM/DD\ndeltas = l_date - f_date\nprint(f'No of days between {f_date} and {l_date} is:{deltas.days}')\n\n", "idx": 8582, "target": 0}
{"func": "# 15 write a function to implement a binary tree\n\n\nclass BinTree:\n    def __init__(self_, key):\n        self_.left = None\n        self_.right = None\n        self_.val = key\n\n\n", "idx": 8583, "target": 0}
{"func": "# Write a python to find LCM of two numbers\nA=int(input(\"Enter the first number:\"))\nb=int(input(\"Enter the second number:\"))\nif(A>b):\nmin1=A\nelse:\nmin1=b\nwhile(1):\nif(min1%A==0 and min1%b==0):\nprint(\"LCM is:\",min1)\nbreak\nmin1=min1+1\n\n", "idx": 8584, "target": 0}
{"func": "# Write a Python program to access a function inside a function\ndef test(a):\ndef add(b):\nnonlocal a\na += 1\nreturn a+b\nreturn add\nfunc_= test(4)\nprint(func_(4))\n\n", "idx": 8585, "target": 0}
{"func": "# write a python program that prints the circumference of a circle\nimport math\nradii = 10\nprint(f'Area: {2 * math.pi * radii}')\n\n\n", "idx": 8586, "target": 0}
{"func": "# write a  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda \n \ntest_list = [{\"Gfg\" : [6, 7, 8], \"is\" : 9, \"best\" : 10}, \n            {\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19}, \n            {\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}] \nprint(\"The original list : \" + str(test_list)) \nH = \"Gfg\"\nidx = 2\nres = sorted(test_list, key = lambda ele: ele[H][idx]) \nprint(\"The required sort order : \" + str(res)) \n\n", "idx": 8587, "target": 0}
{"func": "# Write a program to perform Consecutive prefix overlap concatenation Using endswith() + join() + list comprehension + zip() + loop \n  \ndef help_fnc(i, j): \n    for ele in range(len(j), -1, -1): \n        if i.endswith(j[:ele]): \n            return j[ele:] \n  \n\ntest_list = [\"India\", \"gone\", \"new\", \"best\"] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres_ = ''.join(help_fnc(i, j) for i, j in zip([''] + \n                           test_list, test_list)) \n  \nprint(\"The resultant joined string : \" + str(res_)) \n\n\n", "idx": 8588, "target": 0}
{"func": "# write a python program to print transpose a matrix and print\nY = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\nfor i in range(len(Y)):\n   for j in range(len(Y[0])):\n       result[j][i] = Y[i][j]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 8589, "target": 0}
{"func": "# write a python program for basic HTML parser\nfrom html.parsers import HTMLParser\n\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(tag)\n        for attr in attrs:\n            print(\"->\", attr[0], \">\", attr[1])\n\n\nparsers = MyHTMLParser()\n\nfor i in range(int(input())):\n    parsers.feed(input())\n\n\n", "idx": 8590, "target": 0}
{"func": "# Please write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\nimport zlib\ns = b'hello world!hello world!hello world!hello world!'\n\u00b4 = zlib.compress(s)\nprint(\u00b4)\nprint(zlib.decompress(\u00b4))\n\n", "idx": 8591, "target": 0}
{"func": "#68 write a function to unpack tuple of minimum 2 value to unlimited length int first two and rest\ndef unpack_tuple(tup):\n    A, b , *c = tup\n    return A , b, c\n\n\n\n", "idx": 8592, "target": 0}
{"func": "# Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given\ndef simple_interest(p,r,t):\n    s\u0103_mi = (p*r*t)/100\n    return s\u0103_mi\n\n\n", "idx": 8593, "target": 0}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\ndef print_dict_keys_val_4():\n\tl=dict()\n\tfor i in range(1,21):\n\t\tl[i]=i**2\n\tfor k in l.keys():\t\n\t\tprint(k)\n\n\n", "idx": 8594, "target": 0}
{"func": "# 81 By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nlu = [12, 24, 35, 24, 88, 120, 155]\nlu = [x for x in lu if x != 24]\nprint(lu)\n\n", "idx": 8595, "target": 0}
{"func": "# write Python code to convert radian to degree \ndef Convert(radian): \n    3.14159 = 3.14159\n    degree = radian * (180/3.14159) \n    return degree \nradian = 5\nprint(\"degree =\",(Convert(radian))) \n\n", "idx": 8596, "target": 0}
{"func": "# Write a function to find sum of nested list using Recursion\nsub_total = 0\ndef sum_nestedlist(l):\n    global sub_total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            sub_total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(sub_total)\n\n", "idx": 8597, "target": 0}
{"func": "# Arrange string characters such that lowercase letters should come first\nstr1 = \"PyNaTive\"\nlower = []\nlower = []\nfor char in str1:\n    if char.islower():\n        lower.append(char)\n    else:\n        lower.append(char)\nsorted_string = ''.join(lower + lower)\nprint(sorted_string)\n\n", "idx": 8598, "target": 0}
{"func": "# write a list comprehension for number and its cube \nr=[1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint([x**3 for x in r])\n\n", "idx": 8599, "target": 0}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letter = string.ascii_letters\n    return ''.join(random.choice(letter) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 8600, "target": 0}
{"func": "# write a python function that takes a list of elements and n as input, extract and append first n characters and last n characters of each string and return the resultant list\ndef nchar (list2,no):\n    return [items[:no]+items[-no:] for items in list2]\nlist2 = [\"ROHAN\", \"END\"]\nnchar(list2, 3)\n\n\n", "idx": 8601, "target": 0}
{"func": "# write a python program which takes input a number N and print first N elements of fibonacci series\n\nN = int(input(\"Please enter a number \"))\nsecond = 0\nsecond = 1\nprint(second)\nprint(second)\nfor a in range(1,N-1):\n    third = second + second\n    print(third)\n    second,second = second , third\n    \n", "idx": 8602, "target": 0}
{"func": "# write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    top = 0\n    top = len(li)-1\n    index = -1\n    while top>=top and index==-1:\n        mid = int(math.floor((top+top)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            top = mid+1\n    return index\n\n", "idx": 8603, "target": 0}
{"func": "# Write a Python program to find the positions of numbers that are multiples of 3 from a series\nimport pandas as pd\nimport numpy as np\nestar = pd.Series(np.random.randint(1, 10, 7))\nprint(np.argwhere(estar.values % 3 == 0))\n\n", "idx": 8604, "target": 0}
{"func": "# write a python program to print the sum of first n numbers\nk = 10\nsum = 0\nwhile k > 0:\n   sum += k\n   k -= 1\nprint(sum)\n\n\n", "idx": 8605, "target": 0}
{"func": "# By using list comprehension, please write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nlu = [12,24,35,70,88,120,155]\nlu = [x for x in lu if x%5!=0 and x%7!=0]\nprint(lu)\n\n", "idx": 8606, "target": 0}
{"func": "# Write a python program to generate a random number between 1 and 9 (including 1 and 9) and Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right.\nimport random\nimport math\n\ny = math.floor((random.random() * 10) + 1)\nguess=0\nwhile guess != y:\n    guess = int(input(\"Guess a number: \"))\n    if(guess == y):\n        print(\"you got It!\")\n        print(\"Number is \", y)\n        break\n    elif(guess>y):\n        print(\"You Guesses too high!\")\n    else:\n        print(\"You guessed too low!\")\n\n", "idx": 8607, "target": 0}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random import shuffle\nslist = [1, 2, 3, 4, 5]\nshuffle(slist)\nprint(slist)\n\n\n", "idx": 8608, "target": 0}
{"func": "#45 write a python program to Count if dictionary position equals key or value and print it\n\ntest_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5} \n  \n\n  \nres_ = 0\ntest_dict = list(test_dict.items()) \nfor idx in range(0, len(test_dict)): \n  \n    # checking for key or value equality \n    if idx == test_dict[idx][0] or idx == test_dict[idx][1]: \n        res_ += 1\n  \n", "idx": 8609, "target": 0}
{"func": "# Write a python function to remove the duplicate items from a List and return the modified data list\ndef remove_duplicates(data):\n    c = Counter(data)\n    s = set(data)\n    for item in s:\n        counts = c.get(item)\n        while counts > 1:\n            data.pop(item)\n            counts -= 1\n    return data\n\n\n", "idx": 8610, "target": 0}
{"func": "# Usage of while\nu = 0\nwhile u < 2:\n    print(u)\n    u += 1\nelse:\n    print('in else')\n\n", "idx": 8611, "target": 0}
{"func": "# write a python function to return random selection from itertools.permutations(iterable, r)\ndef random_permutation(iterable, r=None):\n    import random\n    pools = tuple(iterable)\n    r = len(pools) if r is None else r\n    return tuple(random.sample(pools, r))\n\n", "idx": 8612, "target": 0}
{"func": "# write a python function to Count the Number of Words in a Text File and print it\ndef word_count(fname) : \n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            phrases = line.split()\n            num_words += len(phrases)\n    print(num_words)\n\n", "idx": 8613, "target": 0}
{"func": "# Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).\n\nr=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        r.append(str(i))\n\n\n", "idx": 8614, "target": 0}
{"func": "# write a python function to count the occurrence of a given word in a given file\ndef check_word_count(word, file):\n    if not os.path.isfile(file):\n        raise FileNotFoundError\n    if not isinstance(word, str):\n        raise TypeError\n\n    with open(file, 'r') as f:\n        line = f.readlines()\n        words = [l.strip().split(' ') for l in line]\n        words = [word for sublist in words for word in sublist]\n        c = Counter(words)\n    return c.get(word, 0)\n\n\n", "idx": 8615, "target": 0}
{"func": "# Write a Python function for Binary Search\ndef binary_search(l, num_find):\n    '''\n    This function is used to search any number.\n    Whether the given number is present in the\n    list or not. If the number is present in list\n    the list it will return TRUE and FALSE otherwise.\n    '''\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    discovered = False\n    position = -1\n    while start <= end:\n        if l[mid] == num_find:\n            discovered = True\n            position = mid\n            break\n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n    return (discovered, position)\n\n\n", "idx": 8616, "target": 0}
{"func": "# write a python program to find index of min element\nth = [40, 10, 20, 30]\n\ndef minIndex(th):\n    return min(range(len(th)), key=th.__getitem__)\nprint(minIndex(th))\n\n", "idx": 8617, "target": 0}
{"func": "# Write a Python Program to Sort the List According to the Second Element in Sublist\n\nA=[['A',34],['B',21],['C',26]]\nfor i in range(0,len(A)):\n    for j in range(0,len(A)-i-1):\n        if(A[j][1]>A[j+1][1]):\n            temp=A[j]\n            A[j]=A[j+1]\n            A[j+1]=temp\n\n\n", "idx": 8618, "target": 0}
{"func": "# Write a python program to Accept the String and print the words composed of digits only\nTexts = input (\"Enter Text: \")\nDigits = \"\"\nfor i in Texts:\nif i.isnumeric():\nDigits +=i+\" \"\nprint(\"Digits used in given strings are: {}\".format(Digits))\n\n", "idx": 8619, "target": 0}
{"func": "# write a python program to input a number to test and print if it is a prime number\n\nnum = int(input(\"Enter number :\"))\nlim = int(num/2) + 1\nfor i in range(2,lim):\n    rems = num % i\n    if rems == 0 :\n        print(num,\"is not a prime number\")\n        break\nelse:\n    print(num,\"is a prime number\")\n    \n", "idx": 8620, "target": 0}
{"func": "# Write a Python Program to Accept Three Digits and Print all Possible Combinations from the Digits\n\na=2\nb=9\nc=5\nl=[]\nl.append(a)\nl.append(b)\nl.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(l[i],l[j],l[k])\n\n", "idx": 8621, "target": 0}
{"func": "#  Write a program to check your external ip address\n\nimport re\nimport requests\n\nurl = \"http://checkip.dyndns.org\"\nrequest = requests.get(url)\ncleanable = request.text.split(': ', 1)[1]\nyour_ip = cleanable.split('</body></html>', 1)[0]\n\nprint(\"your IP Address is: \",  your_ip)\n\n", "idx": 8622, "target": 0}
{"func": "#  Fibonacci series up to 100\nk = 100\nresult = []\na, b = 0 , 1\nwhile b < k:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 8623, "target": 0}
{"func": "# write a python program which takes list as an input and find frequency of all elements in list \nth = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i in th:\n    sum  = sum + i\nprint(\" The mean of given list is :\", sum)\n\n", "idx": 8624, "target": 0}
{"func": "# Write a program to print the powers of 2 using anonymous function\n\nterms = 10\n\nresulting = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",resulting[i])\n   \n\n   \n", "idx": 8625, "target": 0}
{"func": "# Write a python function to count the number of Words in a Text File\ndef check_words():\n    fname = input(\"file name: \")\n    num_words = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            phrases = line.split()\n            num_words += len(phrases)\n    print(\"Number of words = \", num_words)\n\n\n", "idx": 8626, "target": 0}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres_ = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res_: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res_.add(ele)\n\nres_ = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res_))\n\n", "idx": 8627, "target": 0}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres_ = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res_)\n\n", "idx": 8628, "target": 0}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    3.14159 = 3.14\n    return 3.14159*r**2\n\n", "idx": 8629, "target": 0}
{"func": "# Write a function that generates fibbonacci series\ndef Fibonacci(n:int)-> int:\n    if n==1:\n        Fibonacci = 0\n    elif n==2:\n        Fibonacci = 1\n    else:\n        Fibonacci = Fibonacci(n-1) + Fibonacci(n-2)\n    return Fibonacci\n\n\n", "idx": 8630, "target": 0}
{"func": "# write a Python function to find sum of all items in a Dictionary \n\ndef returnSum(dict): \n    \n    sums = 0\n    for i in dict.values(): \n        sums = sums + i \n    \n    return sums\n\ndict = {'a': 100, 'b':200, 'c':300} \nprint(\"Sum :\", returnSum(dict)) \n\n\n", "idx": 8631, "target": 0}
{"func": "# reconverting to dictionary \nres_ = {sub[0]: sub[1] for sub in res_} \n  \n", "idx": 8632, "target": 0}
{"func": "# Write a Python function that returns the values   of the largest and second largest elements in the passed list.\ndef max2(x):\n    if x[0] > x[1]:\n        m1,sq.m = (x[0],x[1])\n    else:\n        m1,sq.m = (x[1],x[0])\n\n    for i in range(2, len(x)):\n        if x[i] > m1:\n            sq.m = m1\n            m1 = x[i]\n        elif x[i] > sq.m:\n            sq.m = x[i]\n    return m1,sq.m\n\n", "idx": 8633, "target": 0}
{"func": "# Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \ndef printTuple():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint tuple(lu)\n\t\t\n", "idx": 8634, "target": 0}
{"func": "# write a python program to count the number of each vowels in a given text\n\n\nvowels = 'aeiou'\nnon_text = 'Hello, have you tried our tutorial section yet?'\nnon_text = non_text.casefold()\ncount = {}.fromkeys(vowels,0)\nfor char in non_text:\n   if char in count:\n       count[char] += 1\nprint(count)\n\n", "idx": 8635, "target": 0}
{"func": "# write a program to create print array in beautiful format\na = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nfor i in a:\n    rows = '|'\n    for b in i:\n        rows = rows + ' ' + str(b)\n    print(rows + ' ' + '|')\n\n\n", "idx": 8636, "target": 0}
{"func": "# Write a Python function that takes a list and returns a new list with unique elements of the first list\ndef unique_list(l):\ny = []\nfor a in l:\nif a not in y:\ny.append(a)\nreturn y\n\nprint(unique_list([1,2,3,3,3,3,4,5]))\n\n", "idx": 8637, "target": 0}
{"func": "# Write a Python function for Program to find area of a circle\ndef findArea(r): \n    PIs = 3.142\n    return PIs * (r*r)\n\n\n\n", "idx": 8638, "target": 0}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str1 = string[i + 1: ] \n      \n    return str1 + str1 \n\n", "idx": 8639, "target": 0}
{"func": "# Python reuses objects for small integers - use \"==\" for equality, \"is\" for identity\na = 1\nb = 1\nprint('a is b', bool(a is b))\nc = 999\nl = 999\nprint('c is d', bool(c is l))\n\n", "idx": 8640, "target": 0}
{"func": "#8 write a program to break a list into chunks of size N\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]  \nn = 4 \ny = [l[i:i + n] for i in range(0, len(l), n)]  \nprint(y)\n\n", "idx": 8641, "target": 0}
{"func": "# write a python function to check if a string contains a vowel or not\n\ndef check_vowel(string):\n    consonants = ['a', 'e', 'i', 'o', 'u']\n    for vowel in consonants:\n        if vowel in string:\n            return True\n    return False\n\n", "idx": 8642, "target": 0}
{"func": "# print the result of .\ndef hashing(num):\n    S = tuple([int(i) for i in num.split()])\n    return hash(S)\n\n\nprint(hashing(23456))\n\n\n", "idx": 8643, "target": 0}
{"func": "# write a function to find the sum of Sine series\n\nimport math\ndef sin(x,n):\n    cosine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        cosine = cosine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return cosine\n\n\n", "idx": 8644, "target": 0}
{"func": "# Write a Python Program to Print the Pascal\u2019s triangle for n number of rows given by the user\n\nn=10\nA=[]\nfor i in range(n):\n    A.append([])\n    A[i].append(1)\n    for j in range(1,i):\n        A[i].append(A[i-1][j-1]+A[i-1][j])\n    if(n!=0):\n        A[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(A[i][j]),end=\" \",sep=\" \")\n    print()\n\n", "idx": 8645, "target": 0}
{"func": "# write a program that adds corresponding elements in two lists and prints a new list\nlist2 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nsum_list = [a+b for (a,b) in zip(list2, list2)]\nprint(sum_list)\n\n\n", "idx": 8646, "target": 0}
{"func": "# write a python function to obtain the square root of a number\n \n def squareRoot(n): \n        y = n \n        y = 1\n        e = 0.000001\n        while(y - y > e):  \n            y = (y + y)/2\n            y = n / y   \n        return y \n\n", "idx": 8647, "target": 0}
{"func": "#60 Write a function program to reverse the digits of an integer.\ndef reverse_integer(y):\n        sign = -1 if y < 0 else 1\n        y *= sign\n\n        # Remove leading zero in the reversed integer\n        while y:\n            if y % 10 == 0:\n                y /= 10\n            else:\n                break\n\n        # string manipulation\n        y = str(y)\n        lst = list(y)  # list('234') returns ['2', '3', '4']\n        lst.reverse()\n        y = \"\".join(lst)\n        y = int(y)\n        return sign*y\n\n", "idx": 8648, "target": 0}
{"func": "# write a python function to find simple interest for given principal amount, time and rate of interest. \n\n\ndef simple_interest(p,t,r): \n    print('The principal is', p) \n    print('The time period is', t) \n    print('The rate of interest is',r) \n    \n    s\u0103_mi = (p * t * r)/100\n    \n    print('The Simple Interest is', s\u0103_mi) \n    return s\u0103_mi \n\nsimple_interest(8, 6, 8) \n\n\n\n", "idx": 8649, "target": 0}
{"func": "#5 write a function to print the count of divisor using list comprehension\ndef divisor_using_list(num: int):\n    \"\"\"\n    function to count the number of divisor using list comprehension.\n    \"\"\"\n    if isinstance(num, int):\n        counts = [i for i in range(1,num+1) if not num%i]\n        print(f'Number of divisor is {counts}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 8650, "target": 0}
{"func": "# write a python program to print week number from a date\nimport datetime\nprint(datetime.date(2015, 6, 16).isocalendar()[1])\n\nfrom datetime import date, timedelta\n\ndef all_sundays(year):\n       dV = date(year, 1, 1)\n       dV += timedelta(days = 6 - dV.weekday())\n       while dV.year == year:\n          yield dV\n          dV += timedelta(days = 7)\n\nfor s in all_sundays(2020):\n    print(s)\n\n", "idx": 8651, "target": 0}
{"func": "# Write a function that returns relu value of the input\ndef relu(y:float) -> float:\n    y = 0 if y < 0 else y\n    return y\n\n", "idx": 8652, "target": 0}
{"func": "# Write a Python Program to print the LCM of Two Numbers\n\ndef lcm(A,b):\n    lcm.multiple=lcm.multiple+b\n    if((lcm.multiple % A == 0) and (lcm.multiple % b == 0)):\n        return lcm.multiple\n    else:\n        lcm(A, b)\n    return lcm.multiple\nlcm.multiple=0\nA=4\nb=7\nif(A>b):\n    LCM=lcm(b,A)\nelse:\n    LCM=lcm(A,b)\n\nprint(LCM)\n\n", "idx": 8653, "target": 0}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list1):\n    list1 = [1, 2]\n    list1 = [3, 4]\n    return list1.extend(list1)\n\n\n", "idx": 8654, "target": 0}
{"func": "#21. Python Program to Find Armstrong Number in an Interval\nhigher = 100\nupper = 2000\n\nfor num in range(higher, upper + 1):\n\n   # order of number\n   order = len(str(num))\n    \n   # initialize sum\n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   if num == sum:\n       print(num)\n", "idx": 8655, "target": 0}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninputs = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for d in inputs for key, value in d.items()}\n\n", "idx": 8656, "target": 0}
{"func": "#39. Python Program to Find Factorial of Number Using Recursion\ndef recur_factorial(n):\n   if n == 1:\n       return n\n   else:\n       return n*recur_factorial(n-1)\n\nnum2 = 7\n\n", "idx": 8657, "target": 0}
{"func": "# Using list comprehension \nres_ =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres_ = res_ +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \n", "idx": 8658, "target": 0}
{"func": "# write a program to find log of a number\nimport math\n\nnum2 = 5\nbase = 7\n\nprint(\"Log_x_b\", math.log(num2, base))\n\n\n", "idx": 8659, "target": 0}
{"func": "# write a python program to sort a list of tuples using Lambda.\n\nmark = [('Computer Science', 88), ('Physics', 90), ('Maths', 97), ('Chemistry', 82)]\nprint(\"Original list of tuples:\")\nprint(mark)\nmark.sort(key = lambda x: x[1])\nprint(\"\\nSorting the List of Tuples:\")\nprint(mark)\n\n", "idx": 8660, "target": 0}
{"func": "# write Python code to convert string to list character-wise \ndef Convert_3(string): \n    list2=[] \n    list2[:0]=string \n    return list2 \n\nstr1=\"ABCD\"\nprint(Convert(str1)) \n\n", "idx": 8661, "target": 0}
{"func": "# result is 3x4\nresulting = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]\n\nfor r in resulting:\n   print(r)\n\n\n", "idx": 8662, "target": 0}
{"func": "# Write a function to check and print if a string starts with a substring using regex in Python\n\nimport re \n  \n  \ndef find(string, sample) :    \n\n  if (sample in string): \n  \n      x = \"^\" + sample \n  \n      x = re.search(x, string) \n  \n      if x : \n          print(\"string starts with the given substring\") \n  \n      else : \n          print(\"string doesn't start with the given substring\") \n  \n  else : \n      print(\"entered string isn't a substring\") \n\t  \n\t  \n", "idx": 8663, "target": 0}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    phrases = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(phrases))  \n  \n    return reverse_sentence \n\n", "idx": 8664, "target": 0}
{"func": "#70 class to print user defined message whenever object of class is called is called.\nclass User:\n    def __init__(self_, msg=\"Demo of custom message by repr and str in class\"):\n        self_.msg = msg\n\n    def __repr__(self_):\n        return f\"Object of User class is called with parameter {self_.msg}\"\n\n    def __str__(self_):\n        return f\"Object of User class is called with parameter {self_.msg}\"\n\n\n\n", "idx": 8665, "target": 0}
{"func": "# write a python program to check and print if a number is prime\nnum2 = 407\nif num2 > 1:\n   for i in range(2,num2):\n      if (num2 % i) == 0:\n         print(num2,\"is not a prime number\")\n         break\n   else:\n      print(num2,\"is a prime number\")\nelse:\n   print(num2,\"is not a prime number\")\n\n\n", "idx": 8666, "target": 0}
{"func": "# initializing string  \ntest_str = \"HellowWorld\"\n\nprint(\"The original string is : \" + test_str) \nres_ = ', '.join(test_str[i:i + 2] for i in range(0, len(test_str), 2)) \n \nprint(\"The string after inserting comma after every character pair : \" + res_) \n\n", "idx": 8667, "target": 0}
{"func": "# write a program to compute the count of each word in a sentence and print it\nword_freq = {}\nlines = 'how many how words does this many have'\nfor word in lines.split():\n   word_freq[word] = word_freq.get(word, 0) + 1\nprint(word_freq)\n\n\n", "idx": 8668, "target": 0}
{"func": "# write a Python function to Determine all Pythagorean Triplets in the Range\ndef findpythagoreantriplets(limit):\n\tb=0\n\tm=2\n\twhile(b<limit):\n\t\tfor n in range(1,m+1):\n\t\t\ta=m*m-n*n\n\t\t\tb=2*m*n\n\t\t\tb=m*m+n*n\n\t\t\tif(b>limit):\n\t\t\t\tbreak\n\t\t\tif(a==0 or b==0 or b==0):\n\t\t\t\tbreak\n\t\t\tprint(a,b,b)\n\t\tm=m+1\n\t\t\n\t\t\n\t\t\n", "idx": 8669, "target": 0}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres_ = [ele for ele in test_list if str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res_))\n\n\n", "idx": 8670, "target": 0}
{"func": "# Write a Python function that returns the integer obtained by reversing the digits of the given integer\ndef reverse(n):\n    s=str(n) \n    n=s[::-1]\n    return n \n\n\n", "idx": 8671, "target": 0}
{"func": "# write a python program to check if the number is an Armstrong number or not\n\nnum = 663\nsums = 0\n\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sums += digit ** 3\n   temp //= 10\n\nif num == sums:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 8672, "target": 0}
{"func": "# write a python function to multiply two user provided numbers and return the result\ndef mul_two_numbers(num1, num2):\n    ati = num1 * num2\n    return ati\n\n", "idx": 8673, "target": 0}
{"func": "# write a python program  to Shuffle Deck of Cards\nimport itertools, random\ndecks = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\nrandom.shuffle(decks)\nprint(decks)\n\n", "idx": 8674, "target": 0}
{"func": "# Write a recursive function to calculate the sum of numbers from 0 to 10\ndef calculateSum(num):\n    if num:\n        return num + calculateSum(num-1)\n    else:\n        return 0\nres_ = calculateSum(10)\nprint(res_)\n\n", "idx": 8675, "target": 0}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict)) \nlist2=list(test_dict.values())\nprint(list2)\ns=\"\".join(i for i in list2)\nprint(f'Summation of string values is {len(s)}')\n\n\n", "idx": 8676, "target": 0}
{"func": "# driver code \nif __name__ == \"__main__\" : \n  \n    strings = \"101010000111\"\n    check(strings) \n   \n", "idx": 8677, "target": 0}
{"func": "# Write a Python program to get the Fibonacci series between 0 to 50.\ny,y=0,1\nwhile y<50:\nprint(y)\ny,y = y,y+y\n\n", "idx": 8678, "target": 0}
{"func": "# Write a program to extract and print digits of a number in reverse order. The number is input from user.\n\nnum = int(input(\"Enter a number with multiple digit: \"))\nn=0\nwhile num>0:\n    A = num%10\n    num = num - A\n    num = num/10\n    print(int(A),end=\"\")\n    n = n + 1\n\n", "idx": 8679, "target": 0}
{"func": "# Write a python Class to calculate Perimeter of a circle and print the vale for a radius\n\nclass CirclePerimeter():\n    def __init__(self_,radius):\n        self_.radius=radius\n    def perimeter(self_):\n        return 2 * 3.14 * self_.radius\na=6\nobj=CirclePerimeter(a)\nprint(\"Perimeter of rectangle:\",obj.perimeter())\n\n", "idx": 8680, "target": 0}
{"func": "# Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \n\u2019= input()\nif \u2019==\"yes\" or \u2019==\"YES\" or \u2019==\"Yes\":\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "idx": 8681, "target": 0}
{"func": "# write a Python function to remove empty tuples from a list of tuples function to remove empty tuples using filter \ndef Remove(tuple): \n    tuple = filter(None, tuple) \n    return tuple \n  \ntuple = [(), ('ram','15','8'), (), ('laxman', 'sita'),  \n          ('krishna', 'akbar', '45'), ('',''),()] \nprint(Remove(tuple)) \n\n", "idx": 8682, "target": 0}
{"func": "# write a python function to find leftmost item greater than or equal to x\ndef find_ge(a, x):\n    from bisect import bisect_left \n    u = bisect_left(a, x)\n    if u != len(a):\n        return a[u]\n    raise ValueError\n\n", "idx": 8683, "target": 0}
{"func": "# Write a Python program to convert the index of a series into a column of a dataframe\nimport pandas as pd\nimport numpy as np\nmylist = list('abcedfghijklmnopqrstuvwxyz')\nmyarr = np.arange(26)\nmydict = dict(zip(mylist, myarr))\nestar = pd.Series(mydict)\ndf = estar.to_frame().reset_index()\nprint(df.head())\n\n\n", "idx": 8684, "target": 0}
{"func": "# Write Python Program to Find the Area of a Rectangle Using Classes\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.length\nA=15\nb=10\nobj=rectangle(A,b)\nprint(\"Area of rectangle:\",obj.area())\n\n\n\n", "idx": 8685, "target": 0}
{"func": "# write a python function that returns True if the product of two provided numbers is even\ndef is_prod_even(num1, num2):\n   prods = num1 * num2\n   return not prods % 2\n\n\n", "idx": 8686, "target": 0}
{"func": "# Write a Python function to Count Set Bits in a Number\n\ndef count_set_bits(n):\n    counts = 0\n    while n:\n        n &= n - 1\n        counts += 1\n    return counts\n\n", "idx": 8687, "target": 0}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres_ =[{} for idx in range(len(test_list))] \nidx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres_[idx][key] = ele \n\t\t\tidx += 1\n\t\tidx = 0\nprint(\"Records after conversion : \" + str(res_))\n\n", "idx": 8688, "target": 0}
{"func": "# printing original string \nprint(\"The original string is : \" + str(test_str))\n\u2019=''\nr=''\nfor i in test_str:\n    if i.isdigit():\n      \u2019=\u2019+i\n    else:\n      r=r+i \nprint(r+\u2019)\n\n", "idx": 8689, "target": 0}
{"func": "# write a program to print even length words in a string\n\nstr2 = \"I am doing fine\"\ns = str2.split(' ')\nfor word in s:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 8690, "target": 0}
{"func": "# Write a python program to check if a number is positive or negative\nnum2 = 15\nif num2 > 0:\n   print(f\"Positive number\")\nelif num2 == 0:\n   print(f\"Zero\")\nelse:\n   print(f\"Negative number\")\n   \n   \n   \n", "idx": 8691, "target": 0}
{"func": "# Write a program to find the factorial of a number\nnum = 13\nfactorials = 1\n\nif num < 0:\n   print(\"No factorials for negative numbers!\")\n\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\n\nelse:\n   for i in range(1,num + 1):\n       factorials = factorials*i\n   print(f\"The factorial of {num} is {factorials}\")\n\n\n", "idx": 8692, "target": 0}
{"func": "# message to the user.\ndef check_number(num):\n    mods = num % 2\n    if mods > 0:\n        return \"This is an odd number.\"\n    else:\n        return \"This is an even number.\"\n\n\nprint(check_number(5))\n\n\n", "idx": 8693, "target": 0}
{"func": "# Write a function to get nth element of the fibonacci series\ndef fibonacci_nth(n):\n    a = 0\n    b = 1\n    \n    if n <= 0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return a\n    elif n==1: \n        return 1\n    else: \n        for i in range(2, n):\n            b = a + b\n            a, b = b, b\n        return b\n\t\t\n\t\t\n", "idx": 8694, "target": 0}
{"func": "# Write a Python function that will accept the base and height of a triangle and compute the area.\ndef triangle_area(base, height):\n    areas = base*height/2\n    return areas\n\n\n", "idx": 8695, "target": 0}
{"func": "#86 show class of custom sequence type ,iter , iterables and iterator using example of tuple\nclass CustomTupleIter:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self_):\n        self_.list_ = (1,2,3,4)\n\n    def __len__(self_):\n        return len(self_.list_)\n\n    def __getitem__(self_, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self_.list_) + i\n\n            if i<0 or i>=len(self_.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self_.list_[i]\n\n    def __iter__(self_):\n        return self_.CustomTupleIterator(self_)\n\n    class CustomTupleIterator:\n        def __init__(self_, other):\n            self_.count = 0\n            self_.other = other\n\n        def __iter__(self_):\n            return self_\n\n        def __next__(self_):\n            if self_.count < len(self_.other.list_):\n                self_.count += 1\n                return self_.other.list_[self_.count]\n            else:\n                raise StopIteration\n\n\n", "idx": 8696, "target": 0}
{"func": "# write a python function to inherit a parent class person in a child class Student\nclass Person:\n    def __init__(self_, fname, lname):\n        self_.firstname = fname\n        self_.lastname = lname\n\n    def printname(self_):\n        print(self_.firstname, self_.lastname)\n\nclass Student(Person):\n    pass\n\n\n", "idx": 8697, "target": 0}
{"func": "# Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\nvalues = []\nfor i in range(1000, 3001):\n    \u2019 = str(i)\n    if (int(\u2019[0])%2==0) and (int(\u2019[1])%2==0) and (int(\u2019[2])%2==0) and (int(\u2019[3])%2==0):\n        values.append(\u2019)\nprint \",\".join(values)\n\n", "idx": 8698, "target": 0}
{"func": "#Write a function to find the  difference between two times\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    g = (int(diff / 60)) % 24\n    m = diff % 60\n    print(g, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 8699, "target": 0}
{"func": "# 13. python function to find the average of given numbers\ndef average():\n    number = []\n    def add(number):\n        number.append(number)\n        total = sum(number)\n        count = len(number)\n        return total/count\n    return add\na = average()\na(10)\na(20)\na(45)\n\n", "idx": 8700, "target": 0}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersections = firstSet.intersections(secondSet)\nfor item in intersections:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 8701, "target": 0}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    th = len(tup)  \n    for i in range(0, th):  \n          \n        for j in range(0, th-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 8702, "target": 0}
{"func": "# 34. Python Program to Map two lists into a Dictionary\n\nkey = ['name', 'age', 'job']\nvalues = ['John', 25, 'Developer']\n\nmyDict = {k: v for k, v in zip(key, values)}\nprint(\"Dictionary Items  :  \",  myDict)\n\n", "idx": 8703, "target": 0}
{"func": "# Write a python function to find and print longest continous odd sequence of a list of numbers given\n\ndef longest_continuous_odd_subsequence(array):\n    final_list = []\n    temp_list = []\n    for i in array:\n        if i%2 == 0:\n            if temp_list != []:\n                final_list.append(temp_list)\n            temp_list = []\n        else:\n            temp_list.append(i)\n\n    if temp_list != []:\n        final_list.append(temp_list)\n\n    resulting = max(final_list, key=len)\n    print(resulting)\n\t\n\n\n", "idx": 8704, "target": 0}
{"func": "# write a python function to convert a list of characters to a string\n\n def convert(s): \n     str2 = \"\" \n     return(str2.join(s)) \n\n", "idx": 8705, "target": 0}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sums = num1 + num2\n    return sums\n\n", "idx": 8706, "target": 0}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list2, list2):\n    list2 = [1, 2]\n    list2 = [3, 4]\n    return list2.extend(list2)\n\n\n", "idx": 8707, "target": 0}
{"func": "# The results should be printed in a comma-separated sequence on a single line.\ndef fact(y):\n    if y == 0:\n        return 1\n    return y * fact(y - 1)\n\ny=int(input())\nprint(fact(y))\n\n", "idx": 8708, "target": 0}
{"func": "# Write a Python function to Find if a Number is Prime or Not Prime\n\ndef check(n, divs = None):\n    if divs is None:\n        divs = n - 1\n    while divs >= 2:\n        if n % divs == 0:\n            print(\"Number not prime\")\n            return False\n        else:\n            return check(n, divs-1)\n    else:\n        print(\"Number is prime\")\n        return 'True'\n\n", "idx": 8709, "target": 0}
{"func": "# Generate a list by list comprehension\nlists = [x for x in range(10)]\nprint(f\"List Generated by list comprehension:{lists}\")\n\n", "idx": 8710, "target": 0}
{"func": "# Write a Python Program to Print all Pythagorean Triplets in the Range\n\nlimit=10\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        A=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(A==0 or b==0 or c==0):\n            break\n        print(A,b,c)\n    m=m+1\n\n", "idx": 8711, "target": 0}
{"func": "# Write a function to generate permutation of list of numbers\n\ndef permute(syms):\n    def backtrack(first = 0):\n        if first == n:      \n            output.append(syms[:])\n        for i in range(first, n):\n            syms[first], syms[i] = syms[i], syms[first]            \n            backtrack(first + 1)\n\n            syms[first], syms[i] = syms[i], syms[first]\n \n        \n    n = len(syms)\n    output = []\n    backtrack()\n    return output\n\t\n        \n", "idx": 8712, "target": 0}
{"func": "# write a python function to find leftmost value greater than x\ndef find_gt(a, x):\n    from bisect import bisect_right \n    u = bisect_right(a, x)\n    if u != len(a):\n        return a[u]\n    raise ValueError\n\n", "idx": 8713, "target": 0}
{"func": "# Write a Python program to find the second largest number in a list.\ndef second_largest(numbers):\ncount = 0\nn2 = n2 = float('-inf')\nfor x in numbers:\ncount += 1\nif x > n2:\nif x >= n2:\nn2, n2 = x, n2\nelse:\nn2 = x\nreturn n2 if count >= 2 else None\n\nprint(second_largest([1, 2, -8, -2, 0]))\n\n", "idx": 8714, "target": 0}
{"func": "# write a python program to multiply two matrices\n\n\nY = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\nfor i in range(len(Y)):\n   for j in range(len(Y[0])):\n       for k in range(len(Y)):\n           result[i][j] += Y[i][k] * Y[k][j]\nfor r in result:\n   print(r)\n\n", "idx": 8715, "target": 0}
{"func": "# write a python program to implement Queue\nfrom collections import deque\n\nclass Queue():\n    '''\n    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and\n    dequeueing in worst-case O(1) time.\n    '''\n\n\n    def __init__(self_, max_size = 10):\n        '''\n        Initialize this queue to the empty queue.\n\n        Parameters\n        ----------\n        max_size : int\n            Maximum number of items contained in this queue. Defaults to 10.\n        '''\n\n        self_._queue = deque(maxlen=max_size)\n\n\n    def enqueue(self_, item):\n        '''\n        Queues the passed item (i.e., pushes this item onto the tail of this\n        queue).\n\n        If this queue is already full, the item at the head of this queue\n        is silently removed from this queue *before* the passed item is\n        queued.\n        '''\n\n        self_._queue.append(item)\n\n\n    def dequeue(self_):\n        '''\n        Dequeues (i.e., removes) the item at the head of this queue *and*\n        returns this item.\n\n        Raises\n        ----------\n        IndexError\n            If this queue is empty.\n        '''\n\n        return self_._queue.pop()\n\n\n", "idx": 8716, "target": 0}
{"func": "# write a python function to return powerset of iterable\ndef powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    from itertools import chain, combinations\n    \u2019 = list(iterable)\n    return chain.from_iterable(combinations(\u2019, r) for r in range(len(\u2019)+1))\n\nlist(powerset([1,2,3]))\n\n", "idx": 8717, "target": 0}
{"func": "# write a python function to count the occurrence of a given word in a given file\ndef check_word_count(word, file):\n    if not os.path.isfile(file):\n        raise FileNotFoundError\n    if not isinstance(word, str):\n        raise TypeError\n\n    with open(file, 'r') as f:\n        lines = f.readlines()\n        phrases = [l.strip().split(' ') for l in lines]\n        phrases = [word for sublist in phrases for word in sublist]\n        c = Counter(phrases)\n    return c.get(word, 0)\n\n\n", "idx": 8718, "target": 0}
{"func": "# 77 By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\nlu = [12, 24, 35, 70, 88, 120, 155]\nlu = [x for x in lu if x % 5 != 0 and x % 7 != 0]\nprint(lu)\n\n", "idx": 8719, "target": 0}
{"func": "# write a program to remove even numbers from a list using list comprehensions\nsyms = [1, 2, 3, 4, 5, 6, 7, 8]\nno_even_nums = [i for i in syms if i % 2 == 1]\n\n\n", "idx": 8720, "target": 0}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random import shuffle\nslist = [1, 2, 3, 4, 5]\nshuffle(slist)\nprint(slist)\n\n\n", "idx": 8721, "target": 0}
{"func": "# Write a program to print the sum of squares of first n natural numbers\nk = 21\nsum_n = 0\nfor i in range(1, k+1):\n    sum_n += i**2\nprint(sum_n)\n\n\n", "idx": 8722, "target": 0}
{"func": "# Counting total Upper Case in a string\nstr2 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str2)):\n  char = str2[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 8723, "target": 0}
{"func": "#Union\ndef union_of_sets(Set1, Set2):\n    resulting = Set1 | Set2\n    return resulting\n\n\n", "idx": 8724, "target": 0}
{"func": "# Write a python program to implement Rock, paper, scissor game and print the results\n\nimport random\nimport os\nimport re\nos.system('cls' if os.name=='nt' else 'clear')\nwhile (1 < 2):\n    print(\"\\n\")\n    print(\"Rock, Paper, Scissors - Shoot!\")\n    userChoice = input(\"Choose your weapon [R]ock], [P]aper, or [S]cissors: \")\n    if not re.match(\"[SsRrPp]\", userChoice):\n        print(\"Please choose a letter:\")\n        print(\"[R]ock, [S]cissors or [P]aper.\")\n        continue\n    print(\"You chose: \" + userChoice)\n    choice = ['R', 'P', 'S']\n    opponenetChoice = random.choice(choice)\n    print(\"I chose: \" + opponenetChoice)\n    if opponenetChoice == str.upper(userChoice):\n        print(\"Tie! \")\n    #if opponenetChoice == str(\"R\") and str.upper(userChoice) == \"P\"\n    elif opponenetChoice == 'R' and userChoice.upper() == 'S':      \n        print(\"Scissors beats rock, I win! \")\n        continue\n    elif opponenetChoice == 'S' and userChoice.upper() == 'P':      \n        print(\"Scissors beats paper! I win! \")\n        continue\n    elif opponenetChoice == 'P' and userChoice.upper() == 'R':      \n        print(\"Paper beat rock, I win! \")\n        continue\n    else:       \n        print(\"You win!\")\n\t\t\n\t\t\n", "idx": 8725, "target": 0}
{"func": "#78 class to show implementation of static method\nclass Mathematics:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self_, msg=\"Demo class of Mathematics\"):\n        self_.msg = msg\n\n    def __str__(self_):\n        return f' String representation of an object'\n\n    def __repr__(self_):\n        return f' repr representation of an object with parameter {self_.msg}'\n\n    @staticmethod\n    def addition(a: \"Variable1\", b: 'Variable2'):\n        \"\"\"\n        @staticmethod makes the mtethod of class as static method.\n        It is always recommended to metion it via decorator.\n        \"\"\"\n        return a+b\n\n\n", "idx": 8726, "target": 0}
{"func": "# write a python generator function for generating Fibonacci Numbers \ndef fib(limit): \n    # Initialize first two Fibonacci Numbers  \n    A, b = 0, 1  \n    # One by one yield next Fibonacci Number \n    while A < limit: \n        yield A \n        A, b = b, A + b\n\n", "idx": 8727, "target": 0}
{"func": "#17. Python Program to Display the multiplication Table\nnum2 = 12\n\nfor i in range(1, 11):\n   print(num2, 'x', i, '=', num2*i)\n\n\n", "idx": 8728, "target": 0}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        \u2019 = (a+b+c)/2\n        if \u2019>a and \u2019>b and \u2019>c:\n            area = (\u2019*(\u2019-a)*(\u2019-b)*(\u2019-c))**(1/2)\n            return round(area,2)\n        else:\n            return None\n    return None\n\n", "idx": 8729, "target": 0}
{"func": "# write a python program to count the number of each vowel and print them\nconsonants = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\nip_str = ip_str.casefold()\n\ncount = {}.fromkeys(consonants,0)\n\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n\n\n", "idx": 8730, "target": 0}
{"func": "# write a python function to check whether the given number is fibonacci or not\ndef fiboacci_number_check(n):\n    if(isinstance(n,int)):\n        resulting = list(filter(lambda num : int(math.sqrt(num)) * int(math.sqrt(num)) == num, [5*n*n + 4,5*n*n - 4] ))\n        return bool(resulting) \n    else:\n        raise TypeError(\"Input should be of type Int\") \n\n", "idx": 8731, "target": 0}
{"func": "# Write a Python Program to print the Reverse a Given Number\n\nk=1023\nrev=0\nwhile(k>0):\n    dig=k%10\n    rev=rev*10+dig\n    k=k//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 8732, "target": 0}
{"func": "# write a function to reverse words of string\n\ndef rev_sentence(sentence):  \n  \n    phrases = sentence.split(' ')  \n  \n    reverse_sentence = ' '.join(reversed(phrases))  \n  \n    return reverse_sentence \n\n", "idx": 8733, "target": 0}
{"func": "# Write a function to remove and print every third number from a list of numbers until the list becomes empty\ndef remove_nums(int_list):\n  position = 3 - 1 \n  ctx = 0\n  len_list = (len(int_list))\n  while len_list>0:\n    ctx = (position+ctx)%len_list\n    print(int_list.pop(ctx))\n    len_list -= 1\n\n\n", "idx": 8734, "target": 0}
{"func": "#80 write a program to print EVEN length words of a string \nstr1 = \"Python is a programming language\"\n\nwords = list(str1.split(' '))\n\nprint \"str: \", str1\nprint \"list converted string: \", words\nprint \"EVEN length words:\"\nfor W in words:\n\tif(len(W)%2==0 ):\n\t\tprint W\n        \n", "idx": 8735, "target": 0}
{"func": "# Bubble sort in python\nlist2 = [1, 5, 3, 4]\n\nfor i in range(len(list2)-1):\n  for j in range(i+1,len(list2)):\n    if(list2[i] > list2[j]):\n      temp = list2[i]\n      list2[i] = list2[j]\n      list2[j] = temp\nprint(\"Bubble Sorted list: \",list2)\n\n", "idx": 8736, "target": 0}
{"func": "# Write a python function to extract even length words in String\ndef findevenlenthwords(test_str):\n\tres_ = [] \n\tfor ele in test_str.split(): \n\t\tif len(ele) % 2 == 0: \n\t\t\tres_.append(ele)  \n\treturn res_\n\t\n\t\n\t\n", "idx": 8737, "target": 0}
{"func": "# Write a Python Program to Convert Gray Code to Binary\n\ndef gray_to_binary(n):\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\n    n = int(n, 2)\n \n    masks = n\n    while masks != 0:\n        masks >>= 1\n        n ^= masks\n\n    return bin(n)[2:]\n\n", "idx": 8738, "target": 0}
{"func": "# Write a python function to replace all the spaces in an entered string with a hyphen \"-\"\ndef replacetext(strings):\n    strings = strings.replace(\" \", \"-\")\n    return strings\n\t\n\t\n\t\n", "idx": 8739, "target": 0}
{"func": "# Python program to reverse the string\ndef string_reverse(str1):\n    rstr1 = ''\n    indexes = len(str1)\n    while indexes > 0:\n        rstr1 += str1[indexes - 1]\n        indexes = indexes - 1\n    return rstr1\n\n\nprint(string_reverse('1234abcd'))\n\n\n", "idx": 8740, "target": 0}
{"func": "#4. write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sums = num1 + num2\n    return sums\n\n\n", "idx": 8741, "target": 0}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\nclass CircleArea:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius * self.radius\n\n\nr = 2\narg1 = CircleArea(r)\nprint(\"Area of circle:\", arg1.area())\n\n\n", "idx": 8742, "target": 0}
{"func": "# write a python function which takes sentence as input and remove vowels from a sentence\n\nsentence = input(\"Enter a sentence : \")\n\ndef fn(sentence):\n    consonants = 'aeiou'\n    return ''.join([ l for l in sentence if l not in consonants])\n\n", "idx": 8743, "target": 0}
{"func": "# write a Python function to check if a string is binary or not \n\ndef check2(strings) : \n\n    t = '01'\n\n    count = 0\n    for char in strings : \n\n        if char not in t : \n            count = 1\n            break\n        else : \n            pass\n    if count : \n        print(\"No, string is not binary\") \n    else : \n        print(\"Yes, string is binary\") \n\nstrings = \"001021010001010\"\n\ncheck2(strings) \n\n", "idx": 8744, "target": 0}
{"func": "# write a python program that prints the circumference of a circle\nimport math\nradii = 10\nprint(f'Area: {2 * math.pi * radii}')\n\n\n", "idx": 8745, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef hcf(num1, num2):\n    larger = num1 if num1 < num2 else num2\n    for i in range(1, larger+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n    return hcf\n\n\n", "idx": 8746, "target": 0}
{"func": "#41 how to sort a list in python using lambda\ndata__ = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]\n\ndata__.sort(key=lambda x:x[0])\n\n", "idx": 8747, "target": 0}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    h = 9.8\n    return (mass*h*height)\n\n", "idx": 8748, "target": 0}
{"func": "# Write a function which Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers Return True if its possible otherwise return False\n\nimport collections\ndef isPossibleDivide(nums, k):\n \n    l = collections.Counter(nums)\n    for num in sorted(l.keys()):\n        if num in l:\n            for i in range(k - 1, -1, -1):\n                l[num + i] -= l[num] \n                if l[num + i] == 0:\n                    del l[num + i]\n                if l[num + i] < 0:\n                    return False\n\n    return (True if not l else False)\n\t\n\t\n", "idx": 8749, "target": 0}
{"func": "# Write a Python function to print whether the given Date is valid or not\ndef date_validator(d,m,y):\n\timport datetime \n\ttry:\n\t\t\u2019=datetime.date(y,m,d)\n\t\tprint(\"Date is valid.\")\n\texcept ValueError: \n\t\tprint(\"Date is invalid.\")\n\n\n", "idx": 8750, "target": 0}
{"func": "# Write a Python program to create one-hot encodings of a categorical variable\nimport pandas as pd\nimport numpy as np\nmf = pd.DataFrame(np.arange(25).reshape(5,-1), columns=list('abcde'))\ndf_onehot = pd.concat([pd.get_dummies(mf['a']), mf[list('bcde')]], axis=1)\nprint(df_onehot)\n\n\n", "idx": 8751, "target": 0}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist2 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list2: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 8752, "target": 0}
{"func": "# write a python function to generate 6 digit OTP\n\nimport math, random \ndef generateOTP() :  \n    digits = \"0123456789\"\n    OTPs = \"\" \n    for i in range(6) : \n        OTPs += digits[math.floor(random.random() * 10)]  \n    return OTPs\n\n", "idx": 8753, "target": 0}
{"func": "# Write a function to calculate compound interest, given p, r, t\ndef comp_int(p, r, t):\n    amounts = p * (1 + (r/100))**t\n    interest = amounts - p\n    return interest\n\n\n", "idx": 8754, "target": 0}
{"func": "# write a python function to get HTML code for a given URL\ndef get_html(url=\"http://www.python.org\"):\n    import urllib.request\n\n    r0 = urllib.request.urlopen(url)\n    mybytes = r0.read()\n    mystr = mybytes.decode(\"utf8\")\n    r0.close()\n    print(mystr)\n\n\n", "idx": 8755, "target": 0}
{"func": "# Write a Python program to print rank of an array/ matrix\nimport numpy as np\nB = np.array([[4,5,8], [7,1,4], [5,5,5], [2,3,6]])\nprint(\"Rank of the matrix A: \", np.linalg.matrix_rank(B))\n\n\n", "idx": 8756, "target": 0}
{"func": "# write a function to multiply all the numbers in a list\ndef multiply_all(a_list):\n    products = 1\n    for i in a_list:\n        products *= i\n    return products\n\n", "idx": 8757, "target": 0}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list1):\n   list1 = [1, 2, 3]\n   list1 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, list1):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 8758, "target": 0}
{"func": "# write a python function to read a CSV file and print its content\ndef read_csv(filename):\n    import csv\n    with open(filename, newline='') as f:\n        readers = csv.readers(f)\n        for row in readers:\n            print(row)\n\n", "idx": 8759, "target": 0}
{"func": "# write a python program to demonstarate working of map\n  \n  def addition(n): \n    return n + n   \n  numbers = (1, 2, 3, 4) \n  resulting = map(addition, numbers) \n  print(list(resulting)) \n  \n", "idx": 8760, "target": 0}
{"func": "# 36. Recursive Python function to solve the tower of hanoi  \ndef TowerOfHanoi(k , source, destination, auxiliary): \n    if k==1: \n        print \"Move disk 1 from source\",source,\"to destination\",destination \n        return\n    TowerOfHanoi(k-1, source, auxiliary, destination) \n    print \"Move disk\",k,\"from source\",source,\"to destination\",destination \n    TowerOfHanoi(k-1, auxiliary, destination, source) \n\nk = 4\nTowerOfHanoi(k,'A','B','C') \n\nPython 3 program to find time for a \n", "idx": 8761, "target": 0}
{"func": "# Write a python program to generate and print all sentences where subject is in[\"Americans\", \"Indians\"] and verb is in [\"Play\", \"watch\"] and the object is in [\"Baseball\",\"cricket\"]\n\nsubjects_=[\"Americans\",\"Indians\"]\nverbs=[\"play\",\"watch\"]\nobjects=[\"Baseball\",\"Cricket\"]\nsentence_list = [subject + \" \" + verb + \" \" + object + \".\" for subject in subjects_ for verb in verbs for object in objects]\nfor sentence in sentence_list:\n    print(sentence)\n\t\n\t\n", "idx": 8762, "target": 0}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  chars = str1[i]\n  if(chars.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 8763, "target": 0}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef print_dict_keys_val_1():\n    l=dict()\n    l[1]=1\n    l[2]=2**2\n    l[3]=3**2\n    print(l)\n        \n", "idx": 8764, "target": 0}
{"func": "# write a python function that returns True if the product of two provided numbers is even\ndef is_prod_even(num1, num2):\n   prods = num1 * num2\n   return not prods % 2\n\n\n", "idx": 8765, "target": 0}
{"func": "#48 write a program to print all prime numbers between an interval\n\nhigher = int(input(\"Enter lower range: \"))  \nupper = int(input(\"Enter upper range: \"))  \n  \nfor num in range(higher,upper + 1):  \n   if num > 1:  \n       for i in range(2,num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           print(num)  \n           \n", "idx": 8766, "target": 0}
{"func": "# Counting total Digits in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  chars = str1[i]\n  if(chars.isdigit()):\n    digitCount += 1\nprint('Number of digits: ',digitCount)\n\n", "idx": 8767, "target": 0}
{"func": "#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.\ndef is_arithmetic(l):\n    deltas = l[1] - l[0]\n    for index in range(len(l) - 1):\n        if not (l[index + 1] - l[index] == deltas):\n             return False\n    return True\n\n", "idx": 8768, "target": 0}
{"func": "# write a python program to print the difference in days between two dates\nfrom datetime import date\ndate1 = date(2020, 10, 25)\ndate1 = date(2020, 12, 25)\nprint(f'Difference between dates: {(date1 - date1).days}')\n\n\n", "idx": 8769, "target": 0}
{"func": "# Write a python Class to calculate Perimeter of a circle and print the vale for a radius\n\nclass CirclePerimeter():\n    def __init__(self,radius):\n        self.radius=radius\n    def perimeter(self):\n        return 2 * 3.14 * self.radius\na=6\narg1=CirclePerimeter(a)\nprint(\"Perimeter of rectangle:\",arg1.perimeter())\n\n", "idx": 8770, "target": 0}
{"func": "# Write a Python Program to Check and print if a given year is a Leap Year\nmonth = 2000\nif (month % 4) == 0:\n   if (month % 100) == 0:\n       if (month % 400) == 0:\n           print(f\"{month} is a leap year\")\n       else:\n           print(f\"{month} is not a leap year\")\n   else:\n       print(f\"{month} is a leap year\")\nelse:\n   print(f\"{month} is not a leap year\")\n   \n\n   \n\n", "idx": 8771, "target": 0}
{"func": "#24 convert string to intern string\ndef str_to_intern_str(a):\n    import sys\n    c = sys.intern(a)\n    if a is c:\n        print('Sentence is interned')\n    else:\n        raise ValueError('This should not happen')\n\n\n", "idx": 8772, "target": 0}
{"func": "# No problem to use the same variable name in the local scope without affecting the local counterpart:\ndef my_func():\n    var1 = 'locally changed'\nvar1 = 'global'\nmy_func()\nprint(var1)\n\n", "idx": 8773, "target": 0}
{"func": "# write a python program that takes input a list and cube every term using list comprehension\n\ns2 = eval(input(\"Enter list \"))\nprint([i**3 for i in s2])\n\n", "idx": 8774, "target": 0}
{"func": "# Write a program to print inverted star pattern for the given number\n\nk=11\n\nfor i in range (k, 0, -1): \n    print((k-i) * ' ' + i * '*') \n\t\n\n\t\n", "idx": 8775, "target": 0}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres_ = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res_))\n\n", "idx": 8776, "target": 0}
{"func": "# Write a Python function to check whether a person is eligible for voting or not based on their age\ndef vote_eligibility(age):\n\tif age>=18:\n\t    statuses=\"Eligible\"\n\telse:\n\t    statuses=\"Not Eligible\"\n\treturn statuses\n\n\n", "idx": 8777, "target": 0}
{"func": "# 83 With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate(li):\n    newli = []\n    seeen = set()\n    for item in li:\n        if item not in seeen:\n            seeen.add(item)\n            newli.append(item)\n    return newli\n\n\nli = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]\nprint(removeDuplicate(li))\n\n", "idx": 8778, "target": 0}
{"func": "# write a python program to replace blank space to 1\ndef f12(x):\n    yield x+1\n    print(\"test\")\n    yield x+2\nh=f12(9)\nprint(next(h))\n\n", "idx": 8779, "target": 0}
{"func": "#5 write a program to print negative Numbers in given range \nstarting, end = -4, 19\nfor num in range(starting, end + 1): \n    if num < 0: \n        print(num, end = \" \") \n        \n", "idx": 8780, "target": 0}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using class\n\nclass Fib:\n    def __init__(self_):\n        self_.cache = {1:1, 2:1}\n\n    def fib(self_, n):\n        if n not in self_.cache:\n            print(f'Calculating fib({n})')\n            self_.cache[n] = self_.fib(n-1) + self_.fib(n-2)\n        return self_.cache[n]\n\n", "idx": 8781, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    larger = num1 if num1 > num2 else num2\n    while True:\n        if (larger % num1 == 0) and (larger % num2 == 0):\n            break\n        larger += 1\n    return larger\n\n\n", "idx": 8782, "target": 0}
{"func": "# write a python program to print a dictionary where the keys are numbers between 1 and 10 (both included) and the values are square of keys.\n\nl=dict()\nfor x in range(1,11):\n    l[x]=x**2\nprint(l)\n\n", "idx": 8783, "target": 0}
{"func": "# initializing range \nu, j = 2, 5\nr=''\nfor z in test_list:\n    r += z[u:j] \nprint(r)\n\n", "idx": 8784, "target": 0}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flatted =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flatted\n\n", "idx": 8785, "target": 0}
{"func": "# 23 write a function to calculate the residual sum of squares between two lists of the same size\n\n\ndef rss(lst1, lst2):\n    dif = [lst1[x] - lst2[x] for x in range(len(lst1))]\n    return sum(list(map(lambda x: x ** 2, dif)))\n\n\n", "idx": 8786, "target": 0}
{"func": "# write a python program to accept three distinct digits and prints all possible combinations from the digits.\n\na=int(input(\"Enter first number:\"))\nb=int(input(\"Enter second number:\"))\nc=int(input(\"Enter third number:\"))\nl=[]\nl.append(a)\nl.append(b)\nl.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(l[i],l[j],l[k])\n\n", "idx": 8787, "target": 0}
{"func": "# Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\n\u2019 = raw_input()\nwords = [word for word in \u2019.split(\" \")]\nprint \" \".join(sorted(list(set(words))))\n\n", "idx": 8788, "target": 0}
{"func": "# Write a Python program to keep only top 2 most frequent values as it is and replace everything else as \u2018Other\u2019 in a series\nimport pandas as pd\nimport numpy as np\nnp.random.RandomState(100)\nestar = pd.Series(np.random.randint(1, 5, [12]))\nestar[~estar.isin(estar.value_counts().index[:2])] = 'Other'\nprint(estar)\n\n\n", "idx": 8789, "target": 0}
{"func": "# Write a Python program to create the multiplication table (from 1 to 10) of a number.\nk = int(input(\"Input a number: \"))\nfor i in range(1,11):\nprint(k,'x',i,'=',k*i)\n\n", "idx": 8790, "target": 0}
{"func": "# Write a function to implement Pigeonhole Sort */\ndef pigeonhole_sort(a):\n    my_min = min(a)\n    my_max = max(a)\n    size = my_max - my_min + 1\n    holes = [0] * size\n    for x in a:\n        assert type(x) is int, \"integers only please\"\n        holes[x - my_min] += 1\n    u = 0\n    for count in range(size):\n        while holes[count] > 0:\n            holes[count] -= 1\n            a[u] = count + my_min\n            u += 1\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end=\" \")\npigeonhole_sort(a)\nfor u in range(0, len(a)):\n    print(a[u], end=\" \")\n\n\n\n", "idx": 8791, "target": 0}
{"func": "# Addition of two vector\nv2 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i in range(len(v2)):\n  s1[i] = v2[i] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 8792, "target": 0}
{"func": "# Write a python program to print a list of tuples from given list having number and its cube in each tuple \n  \nlist1 = [1, 2, 5, 6] \n \nres_ = [(val, pow(val, 3)) for val in list1] \n  \nprint(res_) \n\n", "idx": 8793, "target": 0}
{"func": "# write a python program to print prime factors of user provided number\n\nimport math \ndef primeFactors(k): \n\twhile k % 2 == 0: \n\t\tprint(2), \n\t\tk = k / 2\n\tfor i in range(3,int(math.sqrt(k))+1,2): \n\t\twhile k % i== 0: \n\t\t\tprint(i), \n\t\t\tk = k / i \n\tif k > 2: \n\t\tprint(k)\n\n", "idx": 8794, "target": 0}
{"func": "#96 write a program for binary search\n\ndef binary_search(l, num_find):\n\n    start = 0\n    end = len(l) - 1\n    mid = (start + end) // 2\n    \n    found = False\n    positions = -1\n\n    while start <= end:\n        if l[mid] == num_find:\n            found = True\n            positions = mid\n            break\n        \n        if num_find > l[mid]:\n            start = mid + 1\n            mid = (start + end) // 2\n        else:\n            end = mid - 1\n            mid = (start + end) // 2\n\n    return (found, positions)\n\nif __name__=='__main__':\n    \n    l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    num = 6\n    found = binary_search(l, num)\n    if found[0]:\n        print('Number %d found at position %d'%(num, found[1]+1))\n    else:\n        print('Number %d not found'%num)\n        \n", "idx": 8795, "target": 0}
{"func": "# write a Python function to find the Area of Icosahedron \n\ndef findArea(a): \n  \n    areas = 5 * 3 ** 0.5 * a * a \n    return areas \n\na = 5\nprint(\"Area: \" , findArea(a)) \n\n", "idx": 8796, "target": 0}
{"func": "# Write a python program to sort alphabetically the words form a string provided by the user \t\ndef sortwords(my_str):\n\tphrases = my_str.split()\n\tphrases.sort()\n\treturn ' '.join(phrases)\n\n\n\n\n", "idx": 8797, "target": 0}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(radius):\n    3.14159 = 3.14\n    return 4*3.14159*(radius**2)\n\n", "idx": 8798, "target": 0}
{"func": "# Given an array of integers, return indices of the two numbers such that they add up to a specific target.\ninput_array = [2, 7, 11, 15]\ntargets = 26\nresult = []\n\nfor i, num in enumerate(input_array):\n    for j in range(i+1, len(input_array)):\n        print(i,j)\n\n", "idx": 8799, "target": 0}
{"func": "#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.\ndef checkSubset(input_list1, input_list2): \n    return all(map(input_list1.__contains__, input_list2)) \n      \n\nlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \nlist1 = [[1, 3],[13,15,17]]   \nprint(\"Original list:\")\nprint(list1)\nprint(list1)\nprint(\"\\nIf the one of the said list is a subset of another.:\")\nprint(checkSubset(list1, list1))\n\n", "idx": 8800, "target": 0}
{"func": "# Write a Python function to calculate factorial of a given no using class\n\nclass Fact:\n    def __init__(self_):\n        self_.cache = {0:1, 1:1}\n\n    def fact(self_, n):\n        if n not in self_.cache:\n            self_.cache[n] = self_.fact(n-1) * n\n        return self_.cache[n]\n\n", "idx": 8801, "target": 0}
{"func": "# Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.\ndef no_notes(a):\n  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n  y = 0\n  for i in range(9):\n    q = Q[i]\n    y += int(a / q)\n    a = int(a % q)\n  if a > 0:\n    y = -1\n  return y\n\n\n", "idx": 8802, "target": 0}
{"func": "# generating a reliable secure random number\nimport secrets\nprint(\"Random integer number generated using secrets module is \")\nnumbers = secrets.randbelow(30)\nprint(numbers)\n\n", "idx": 8803, "target": 0}
{"func": "# Alternate cases in String \ntest_str = \"geeksforgeeks\"\nres_ = \"\" \nfor idx in range(len(test_str)): \n    if not idx % 2 : \n       res_ = res_ + test_str[idx].upper() \n    else: \n       res_ = res_ + test_str[idx].lower() \nprint(res_)\n\n", "idx": 8804, "target": 0}
{"func": "# Counting total alphanumeric in a string\nstr2 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str2)):\n  char = str2[i]\n  if(char.isalpha()):\n    digitCount += 1\nprint('Number of alphanumeric: ',digitCount)\n\n", "idx": 8805, "target": 0}
{"func": "# Write a Python function to find the number of zeros at the end of a factorial of a given positive number.\ndef factendzero(n):\n  y = n // 5\n  y = y \n  while y > 0:\n    y /= 5\n    y += int(y)\n  return y\n\n\n", "idx": 8806, "target": 0}
{"func": "# write a program to print even length words in a string\n\nstr1 = \"I am doing fine\"\n\u2019 = str1.split(' ')\nfor word in \u2019:  \n    if len(word)%2==0: \n        print(word)  \n\n", "idx": 8807, "target": 0}
{"func": "# Write a python program to Check and print if string is palindrome using Stack\n\nclass Stack:\n    def __init__(self_):\n        self_.items = []\n \n    def is_empty(self_):\n        return self_.items == []\n \n    def push(self_, data):\n        self_.items.append(data)\n \n    def pop(self_):\n        return self_.items.pop()\n \n \ns = Stack()\ntext = \"ABA\"\n \nfor character in text:\n    s.push(character)\n \nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n \nif text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')\n\n", "idx": 8808, "target": 0}
{"func": "# Write a python program to reverse a string\ns = \"i like this program very much\"\nphrases = s.split(' ')\nstring =[]\nfor word in phrases:\n    string.insert(0, word)\n \nprint(\"Reversed String:\")\nprint(\" \".join(string))\n\n\n\n", "idx": 8809, "target": 0}
{"func": "# By using list comprehension, write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\nlu = [12,24,35,24,88,120,155]\nlu = [x for x in lu if x!=24]\nprint lu\n\n", "idx": 8810, "target": 0}
{"func": "# Write a python function to get the volume of a cylinder with radius & height as input\ndef cylinder_volume(radius, height):\n    volumes = 3.14 * (radius ** 2) * height\n    return volumes\n\n", "idx": 8811, "target": 0}
{"func": "# Write a Python program to fill an intermittent time series so all missing dates show up with values of previous non-missing date\nimport pandas as pd\nimport numpy as np\nestar = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))\nprint(estar.resample('D').ffill())\n\n\n", "idx": 8812, "target": 0}
{"func": "# write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.\ntest_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, \n             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, \n             {'tsai' : [7, 5], 'best' : [5, 7]}] \nres_ = dict() \nfor inner_dict in test_list: \n    for inner_list in inner_dict: \n        if inner_list in res_: \n            res_[inner_list] += (inner_dict[inner_list]) \n        else: \n            res_[inner_list] = inner_dict[inner_list]  \nprint(\"The concatenated dictionary : \" + str(res_))\n\n", "idx": 8813, "target": 0}
{"func": "#64 write a program to print all disarium numbers between 1 and 100\n\ndef calculateLength(n):    \n    length = 0;    \n    while(n != 0):    \n        length = length + 1;    \n        n = n//10;    \n    return length;    \n   \ndef sumOfDigits(num):    \n    rem = sum = 0;    \n    len = calculateLength(num);    \n        \n    while(num > 0):    \n        rem = num%10;    \n        sum = sum + (rem**len);    \n        num = num//10;    \n        len = len - 1;    \n    return sum;    \n      \nresulting = 0;    \n     \nprint(\"Disarium numbers between 1 and 100 are\");    \nfor i in range(1, 101):    \n    resulting = sumOfDigits(i);    \n        \n    if(resulting == i):    \n        print(i),  \n        \n", "idx": 8814, "target": 0}
{"func": "# Python program to find the  difference between two times\n\ndef difference(h1, m1, h2, m2):\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n    if (t1 == t2):\n        print(\"Both are same times\")\n        return\n    else:\n        diff = t2 - t1\n    g = (int(diff / 60)) % 24\n    m = diff % 60\n    print(g, \":\", m)\ndifference(7, 20, 9, 45)\ndifference(15, 23, 18, 54)\ndifference(16, 20, 16, 20)\n\n\n", "idx": 8815, "target": 0}
{"func": "#13. Python Program to Find the Largest Among Three Numbers\n\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) and (num1 >= num3):\n   biggest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   biggest = num2\nelse:\n   biggest = num3\n\nprint(\"The largest number is\", biggest)\n\n", "idx": 8816, "target": 0}
{"func": "# Removal all the characters other than integers from string\nstr2 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item in str2 if item.isdigit()])\nprint(res)\n\n", "idx": 8817, "target": 0}
{"func": "# Write a function that strips every vowel from a string provided\ndef strip_vowels(input_str:str)->str:\n\n    consonants = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]\n    return ''.join(list(filter(lambda x: x not in consonants, input_str)))\n\n", "idx": 8818, "target": 0}
{"func": "# write a python program to Check Leap Year\nmonth = 2000\nif (month % 4) == 0:\n   if (month % 100) == 0:\n       if (month % 400) == 0:\n           print(f\"{month} is a leap year\")\n       else:\n           print(f\"{month} is not a leap year\")\n   else:\n       print(f\"{month} is a leap year\")\nelse:\n   print(f\"{month} is not a leap year\")\n\n", "idx": 8819, "target": 0}
{"func": "# write a Python function to Find HCF of two numbers\ndef r_g(x, y):  \n   if x > y:  \n       smaller = y  \n   else:  \n       smaller = x  \n   for i in range(1,smaller + 1):  \n       if((x % i == 0) and (y % i == 0)):  \n           r_g = i  \n   return r_g  \n   \n   \n   \n", "idx": 8820, "target": 0}
{"func": "# Write a python function to remove all digits and underscores from a Unicode strings\nimport re\ndef extract_unicode(my_string):\n    regexps = re.compile(r'[^\\W\\d_]+', re.UNICODE)    \n    return regexps.findall(my_string)\n\n", "idx": 8821, "target": 0}
{"func": "#4 write a program to print Even Numbers in a List \nlist2 = [10, 21, 4, 45, 66, 93] \nfor num in list2: \n    if num % 2 == 0: \n       print(num, end = \" \") \n       \n", "idx": 8822, "target": 0}
{"func": "# 29 write a program to sort a list using bubblesort\n\n\ndef bubblesort(arr):\n    k = len(arr)\n\n    for i in range(k - 1):\n        for j in range(k - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\n\nprint(bubblesort([1, 33, 192, 21, 0]))\n\n", "idx": 8823, "target": 0}
{"func": "# Write a python function to extract URLs from a sentence\n\nimport re \n  \ndef FindUrls(string): \n    regexps = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regexps,string)       \n    return [x[0] for x in url] \n\t\n\t\n", "idx": 8824, "target": 0}
{"func": "# Counting total lower Case in a string\nstr1 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  chars = str1[i]\n  if(chars.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 8825, "target": 0}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres_ =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres_ = res_ +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res_))\n\n", "idx": 8826, "target": 0}
{"func": "# Python program to count number 4 in the given list\ndef list_count_4(nums):\n    counts = 0\n    for num in nums:\n        if num == 4:\n            counts = counts + 1\n\n    return counts\n\n\nprint(list_count_4([1, 4, 6, 7, 4]))\nprint(list_count_4([1, 4, 6, 4, 7, 4]))\n\n\n", "idx": 8827, "target": 0}
{"func": "# Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nlines = []\nwhile True:\n    \u2019 = input()\n    if \u2019:\n        lines.append(\u2019.upper())\n    else:\n        break;\n\nfor sentence in lines:\n    print(sentence)\n\n\n", "idx": 8828, "target": 0}
{"func": "# Define a class, which has a class parameter and have a same instance parameter.\nclass Person:\n    name = \"Person\"\n    \n    def __init__(self_, name = None):\n        self_.name = name\n\n", "idx": 8829, "target": 0}
{"func": "# write a python function for binary search\n\ndef binary_search(arr, low, high, x): \n    if high >= low: \n  \n        mid_late = (high + low) // 2\n        if arr[mid_late] == x: \n            return mid_late \n        elif arr[mid_late] > x: \n            return binary_search(arr, low, mid_late - 1, x) \n\n        else: \n            return binary_search(arr, mid_late + 1, high, x) \n    else: \n        return -1\n \n", "idx": 8830, "target": 0}
{"func": "# write a python function to generate wordcloud on given text or file\nimport os\n\n\ndef get_word(data):\n    if not (isinstance(data, str) or os.path.isfile(data)):\n        raise TypeError(\"Text must be string or a File object.\")\n    from wordcloud import WordCloud, STOPWORDS\n    import matplotlib.pyplot as plt\n    stopword = set(STOPWORDS)\n    if os.path.isfile(data):\n        with open(data, 'r') as f:\n            data = f.read()\n\n    data = ' '.join(data.lower().split(' '))\n    wordcloud = WordCloud(width=400, height=400,\n                          background_color='white',\n                          stopword=stopword,\n                          min_font_size=15).generate(data)\n\n    # plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n\n    plt.show()\n\n\n", "idx": 8831, "target": 0}
{"func": "# Write a Python Program to Check if a Number is an Armstrong Number\n\ndef amstrong_check(n):\n    A=list(map(int,str(n)))\n    b=list(map(lambda x:x**3,A))\n    if(sum(b)==n):\n        return True\n    else:\n        return False\n\n", "idx": 8832, "target": 0}
{"func": "# Write a Python program to Check Divisibility of 2 numbers\nnominator = int (input (\"Enter Nominator: \"))\ndenominators = int (input (\"Enter Denominator: \"))\nif nominator % denominators == 0:\nprint(\"{} is completely Divisible by {}\".format(nominator, denominators))\nelse:\nprint (\"{} is not completely Divisible by {}\".format(nominator, denominators))\n\n", "idx": 8833, "target": 0}
{"func": "# Write a python program to check and print if the number is a perfect number\n\nk = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in range(1, k):\n    if(k % i == 0):\n        sum1 = sum1 + i\nif (sum1 == k):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")\n\t\n\t\n", "idx": 8834, "target": 0}
{"func": "#19 Write a python function to remove i'th character from a string\n\ndef remove(string, i):  \n  \n    # Characters before the i-th indexed \n    # is stored in a variable a \n    a = string[ : i]  \n      \n    # Characters after the nth indexed \n    # is stored in a variable b \n    c = string[i + 1: ] \n      \n    # Returning string after removing \n    # nth indexed character. \n    return a + c \n\n", "idx": 8835, "target": 0}
{"func": "# write a Python function to convert Fraction to Mixed Number\n\ndef reduce_frac(k, d):\n    for i in range(min(k, d), 0, -1):\n        if not k%i and not d%i:\n            return '{}/{}'.format(k//i, d//i)\n\ndef mixed_number(frac):\n    k, d = map(int, frac.lstrip('-').split('/'))\n    sign = '-' if frac.startswith('-') else ''\n\n    if not k%d:\n        return sign + str(k//d)\n    k, r = divmod(k, d)\n    return sign + '{} {}'.format(k, reduce_frac(r, d)).lstrip('0 ')\n\n\nprint(mixed_number(\"5/4\"))\n\n\n", "idx": 8836, "target": 0}
{"func": "# values() extracting dictionary values \nres_ = [sub for sub in test_list if sorted( \n    list(sub.values())) == list(sub.values())] \n  \n", "idx": 8837, "target": 0}
{"func": "# write a python function to remove all punctuation from a string\ndef remove_punctuations(sentence):\n   punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   no_punct = ''\n   for char in sentence:\n      if char not in punctuation:\n         no_punct = no_punct + char\n   return no_punct\n\n\n\n", "idx": 8838, "target": 0}
{"func": "# Write a python function Split a given file path into filename and parent directory\ndef split_filename(input_file_name):\n    if( isinstance(input_file_name,str) ==False ):\n        raise TypeError\n    token = input_file_name.split(\"/\")\n    return \"/\".join(token[:-1]),token[-1]\n\n", "idx": 8839, "target": 0}
{"func": "# write a python program to print the command line arguements given to a file\n\nimport sys\nargs1 = sys.argv \nprint(args1)\n\n", "idx": 8840, "target": 0}
{"func": "# Choose given number of elements from the list with different probability\nimport random\nnum2 =5\nnumberList = [111, 222, 333, 444, 555]\nprint(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num2))\n\n", "idx": 8841, "target": 0}
{"func": "#88 Write a Python fuction to print the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\ndict = {'a':1, 'b': {'c': {'d': {}}}}\nprint(dict_depth(dict))\n\n", "idx": 8842, "target": 0}
{"func": "#python program for vertical concatenating of mqatrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res_ = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            except IndexError: pass\n        res_.append(temp)\n        N = N + 1\n    res_ = [ele for ele in res_ if ele]\n    print(\"List after column Concatenation : \" + str(res_))\nvertical_concatenation()\n\n\n", "idx": 8843, "target": 0}
{"func": "# Write a Python program to calculate the hypotenuse of a right angled triangle using math library\n\nfrom math import sqrt\nprint(\"Input lengths of shorter triangle sides:\")\ndef hypotenuse(side1, side2):\n    hypo_ = sqrt(side1**2 + side2**2)\n    return hypo_\n\n", "idx": 8844, "target": 0}
{"func": "# write a python program which takes input a list and prints the standard deviation of elements within the list\nmeand = sum(s1) / len(s1) \nvariance = sum([((x - meand) ** 2) for x in s1]) / len(s1) \nres = variance ** 0.5\nprint(\"Standard deviation of sample is : \" + str(res)) \n\n", "idx": 8845, "target": 0}
{"func": "# Write a Python program to find the greatest common divisor (GCD)(Euclidean algorithm) and print the result.\n\na = int(input())\nc = int(input())\n\nwhile a != 0 and c != 0:\n    if a > c:\n        a %= c\n    else:\n        c %= a\n\ngcd = a + c\nprint(gcd)\n\n", "idx": 8846, "target": 0}
{"func": "# use anonymous function to filter\nresulting = list(filter(lambda x: (x % 13 == 0), my_list))\n\n", "idx": 8847, "target": 0}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlength = [str(len(word)) for word in words]\nprint(' '.join(length))\n\n\n", "idx": 8848, "target": 0}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \nnon_text = str1.split(\" \") \n      \nfor x in non_text: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 8849, "target": 0}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumber = 7536\nwhile (number > 0):\n    digits = number % 10\n    number = number // 10\n    print(digits, end=\" \")\n\n", "idx": 8850, "target": 0}
{"func": "# Write a Python function to count occurrence of a word in the given text\ndef text_searcher(text, word):\n    counts = 0\n    for w in text.split():\n        if w == word:\n            counts = counts + 1\n    return counts\n\n\n", "idx": 8851, "target": 0}
{"func": "# write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.\ndef NumGenerator(n):\n    for i in range(n+1):\n        if i%5==0 and i%7==0:\n            yield i\nn=int(raw_input())\nvalue = []\nfor i in NumGenerator(n):\n    value.append(str(i))\nprint \",\".join(value)\n\n", "idx": 8852, "target": 0}
{"func": "# write a Python function to find the volume of Icosahedron \n\ndef findVolume(A): \n      \n    volume = ((5 / 12) * \n              (3 + 5 ** 0.5) * \n               A * A * A) \n    return volume \n\nA = 5\n\nprint(\"Volume: \" , findVolume(A)) \n\n\n", "idx": 8853, "target": 0}
{"func": "#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.\ndef digits_sum():\n\tk = 2**20\n\tans = sum(int(c) for c in str(k))\n\treturn str(ans)\n\n", "idx": 8854, "target": 0}
{"func": "# write a python function to return the factors of a number\ndef get_factors(num):\n   factor = []\n   for i in range(1, num + 1):\n      if num % i == 0:\n         factor.append(i)\n   return factor\n\n\n", "idx": 8855, "target": 0}
{"func": "# Write a Python Program to Print the Pascal\u2019s triangle for n number of rows given by the user\n\nk=10\na=[]\nfor i in range(k):\n    a.append([])\n    a[i].append(1)\n    for j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(k!=0):\n        a[i].append(1)\nfor i in range(k):\n    print(\"   \"*(k-i),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()\n\n", "idx": 8856, "target": 0}
{"func": "# write a python function to check external IP address\ndef check_ip():\n    import re\n    import urllib.request as ur\n    URL = \"http://checkip.dyndns.org\"\n    with ur.urlopen(URL) as u:\n        s = str(u.read())\n        ip = re.findall(r\"\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\", s)\n        print(\"IP Address: \", ip[0])\n        return ip[0]\n\n\n", "idx": 8857, "target": 0}
{"func": "# Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\ndef solve(numheads,numlegs):\n    fs='No solutions!'\n    for i in range(numheads+1):\n        j=numheads-i\n        if 2*i+4*j==numlegs:\n            return i,j\n    return fs,fs\n\n\n", "idx": 8858, "target": 0}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\nu = 0\nwhile u < len(org_intervals)-1:\n    if org_intervals[u+1][0] < org_intervals[u][1]:\n        org_intervals[u][1]=org_intervals[u+1][1]\n        del org_intervals[u+1]\n        u = u - 1\n    u = u + 1\nprint(org_intervals)\n\n", "idx": 8859, "target": 0}
{"func": "# write a Python program to Break a list into chunks of size N in Python\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 4\ny = [l[i:i + n] for i in range(0, len(l), n)] \nprint(y) \n\n", "idx": 8860, "target": 0}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(height,radius):\n    3.14159=3.14\n    return 3.14159*(radius**2)*height/3\n\n", "idx": 8861, "target": 0}
{"func": "# write a program to print maximum frequency character in a string\n\nstr2 = \"watch the match\"\nall_freq = {} \nfor i in str2: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 8862, "target": 0}
{"func": "# Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\ndef printList():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint(lu)\n\n", "idx": 8863, "target": 0}
{"func": "# write a python function to count number of vowels in a string\ndef count_vowels(text):\n    r = set('aeiou')\n    for i in r:\n        print(f'\\n {i} occurs {text.count(i)} times')\n\n\n", "idx": 8864, "target": 0}
{"func": "# Write a python function which takes a list of non negative numbers and target sum S, two operations (+, -) how many different ways target sum is achived re\n\ndef findTargetSumWays(nums, S):\n    counts = 0\n    def calculate(nums, i, sum, S):\n        nonlocal counts\n        if i == len(nums):\n            if sum == S:\n                counts += 1\n        else:\n            calculate(nums, i+1, sum+ nums[i], S)\n            calculate(nums, i+1, sum- nums[i], S)\n            \n    calculate(nums, 0, 0, S) \n    return counts\n\t\n\t\n\t\n\t\n", "idx": 8865, "target": 0}
{"func": "# write a python program to print the factorial of a number\nnum2 = 5\nfact = 1\nwhile num2 > 0:\n   fact *= num2\n   num2 -= 1\nprint(fact)\n\n\n", "idx": 8866, "target": 0}
{"func": "# A recursive function to find nth catalan number \ndef catalan(n): \n    # Base Case \n    if n <= 1: \n        return 1\n  \n    # Catalan(n) is the sum  \n    # of catalan(i)*catalan(n-i-1) \n    res_ = 0\n    for i in range(n): \n        res_ += catalan(i) * catalan(n-i-1) \n  \n    return res_ \n  \n", "idx": 8867, "target": 0}
{"func": "# Write a Python program to convert a list of tuples into a dictionary.\nr = [(\"x\", 1), (\"x\", 2), (\"x\", 3), (\"y\", 1), (\"y\", 2), (\"z\", 1)]\nd = {}\nfor a, b in r:\n    d.setdefault(a, []).append(b)\nprint(d)\n\n\n", "idx": 8868, "target": 0}
{"func": "# write a python program to input a number and find the smallest divisor of an integer. \n \nk=int(input(\"Enter an integer:\"))\na=[]\nfor i in range(2,k+1):\n    if(k%i==0):\n        a.append(i)\na.sort()\nprint(\"Smallest divisor is:\",a[0])\n\n", "idx": 8869, "target": 0}
{"func": "# Write a Python Program to Check if a Date is Valid and Print the Incremented Date if it is\n\ndate=\"20/04/2021\"\ndd,cm,yy=date.split('/')\ndd=int(dd)\ncm=int(cm)\nyy=int(yy)\nif(cm==1 or cm==3 or cm==5 or cm==7 or cm==8 or cm==10 or cm==12):\n    max1=31\nelif(cm==4 or cm==6 or cm==9 or cm==11):\n    max1=30\nelif(yy%4==0 and yy%100!=0 or yy%400==0):\n    max1=29\nelse:\n    max1=28\nif(cm<1 or cm>12):\n    print(\"Date is invalid.\")\nelif(dd<1 or dd>max1):\n    print(\"Date is invalid.\")\nelif(dd==max1 and cm!=12):\n    dd=1\n    cm=cm+1\n    print(\"The incremented date is: \",dd,cm,yy)\nelif(dd==31 and cm==12):\n    dd=1\n    cm=1\n    yy=yy+1\n    print(\"The incremented date is: \",dd,cm,yy)\nelse:\n    dd=dd+1\n    print(\"The incremented date is: \",dd,cm,yy)\n\n\n", "idx": 8870, "target": 0}
{"func": "# write a python program to calculate factorial sum using list comprehensive\nimport functools \nk =5\nprint(functools.reduce(lambda x, y: x * y, range(1, k+1)))\n\n", "idx": 8871, "target": 0}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr2 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str2 = str2.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str2)\n\n", "idx": 8872, "target": 0}
{"func": "# 72 write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit import Timer\n\n\u00b4 = Timer(\"for i in range(100):1+1\")\nprint(\u00b4.timeit())\n\n", "idx": 8873, "target": 0}
{"func": "# Write a Python function to find the BMI for given weight and height of a person\ndef bmi_calculator(height, weight):\n\tBmi = weight/(height**2)\n\treturn Bmi\n\n", "idx": 8874, "target": 0}
{"func": "# write a python program to print Armstrong numbers in a certain interval\n\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   ordering = len(str(num))\n    \n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** ordering\n       temp //= 10\n\n   if num == sum:\n       print(num)\n\n\n\n", "idx": 8875, "target": 0}
{"func": "# 32 write a program in python to create a directed graph, and add an edge between two vertices\n\nfrom collections import defaultdict\n\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, f, t):\n        self.graph[f].append(t)\n\n    def printEdge(self):\n        for ed in list(self.graph.keys()):\n            print(f\"From : {ed}, To : {self.graph[ed]}\")\n\n\nh = Graph()\nh.addEdge(\"a\", \"b\")\nh.addEdge(\"a\", \"e\")\nh.addEdge(\"b\", \"d\")\nh.addEdge(\"c\", \"d\")\nh.addEdge(\"c\", \"a\")\nh.printEdge()\n\n", "idx": 8876, "target": 0}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary\n\ndef mul_dict(d):\n    hoog=1\n    for i in d:    \n        hoog=hoog*d[i]\n    return hoog\n\n", "idx": 8877, "target": 0}
{"func": "# write a program to insert elemnet in the list after every nth element\n\nletters = ['a','b','c','d','e','f','g','h','i','j']\nu = 3\nwhile u < len(letters):\n    letters.insert(u, 'x')\n    u += 4\n\nletters\n\n\n", "idx": 8878, "target": 0}
{"func": "# Using sorted() + lambda \nres_ = sorted(test_list, key = lambda x: x[1])[:K] \n  \n", "idx": 8879, "target": 0}
{"func": "# write a python program which takes list as an input and calculate mean of given list of numbers \nth = eval(input(\"Enter list : \"))\nmean = 0\nsum = 0\nfor i in th:\n    sum  = sum + i\nmean = sum / len(th)\nprint(\" The mean of given list is :\", mean)\n\n", "idx": 8880, "target": 0}
{"func": "# Bubble sort in python\nlist2 = [1, 5, 3, 4]\n\nfor i in range(len(list2)-1):\n  for j in range(i+1,len(list2)):\n    if(list2[i] > list2[j]):\n      temp = list2[i]\n      list2[i] = list2[j]\n      list2[j] = temp\nprint(\"Bubble Sorted list: \",list2)\n\n", "idx": 8881, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\ndef printList():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint(lu[-5:])\n\n", "idx": 8882, "target": 0}
{"func": "# Write a Python program to print the even numbers from a given list\ndef is_even_num(l):\nenums = []\nfor n in l:\nif n % 2 == 0:\nenums.append(n)\nreturn enums\nprint(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n", "idx": 8883, "target": 0}
{"func": "#write a python function to sort list using heapq \ndef heapsort(iterable):\n    from heapq import heappush, heappop\n    g = []\n    for value in iterable:\n        heappush(g, value)\n    return [heappop(g) for i in range(len(g))]\n\n", "idx": 8884, "target": 0}
{"func": "# Write a python program to Implement Linear Search and print the key element if found\n\ndef linear_search(elist, key):\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\n    for i in range(len(elist)):\n        if elist[i] == key:\n            return i\n    return -1\n \n \nelist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = linear_search(elist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n", "idx": 8885, "target": 0}
{"func": "#83 write a program to Capitalizes the first letter of each word in a string\n\ndef capitalize(text):\n  return text.title()\n\nstr2 = \"Hello world!\"\nstr2 = \"hello world!\"\nstr3 = \"HELLO WORLD!\"\nstr4 = \"includehelp.com is a tutorials site\"\n\nprint(\"str1: \", str2)\nprint(\"str2: \", str2)\nprint(\"str3: \", str3)\nprint(\"str4: \", str4)\nprint()\n\n", "idx": 8886, "target": 0}
{"func": "# write a program to find and print the largest among three numbers\n\nnum2 = 10\nnum2 = 12\nnum3 = 14\nif (num2 >= num2) and (num2 >= num3):\n   largest = num2\nelif (num2 >= num2) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\nprint(f'largest:{largest}')\n\n\n", "idx": 8887, "target": 0}
{"func": "# 44 Define a python function that can read text file from a given URL\nimport requests\n\n\ndef read_data(url):\n    data__ = requests.get(url).text\n    return data__\n\n\n", "idx": 8888, "target": 0}
{"func": "# Write a Python Program to Print all Pythagorean Triplets in the Range\n\nlimit=10\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        A=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(A==0 or b==0 or c==0):\n            break\n        print(A,b,c)\n    m=m+1\n\n", "idx": 8889, "target": 0}
{"func": "#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate\ndef getBaseTen(binaryVal):\n    counts = 0\n\n    binaryVal = binaryVal[::-1]\n\n\tfor i in range(0, len(binaryVal)):\n    \tif(binaryVal[i] == \"1\"):\n            counts += 2**i\n    \n    return counts\n\n", "idx": 8890, "target": 0}
{"func": "# Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\nimport re\n\u2019 = input()\nprint(re.findall(\"\\d+\",\u2019))\n\n", "idx": 8891, "target": 0}
{"func": "# write a python program to print len of each characters\nphrases = ['cat', 'window', 'defenestrate']\nfor w in phrases:\n    print(w, len(w))\n    \n", "idx": 8892, "target": 0}
{"func": "# Write a python class to implement a Bank which which supports basic operations like depoist, withdrwa, overdrawn\n\nclass BankAccount(object):\n    def __init__(self_, account_no, name, initial_balance=0):\n        self_.account_no = account_no\n        self_.name = name\n        self_.balance = initial_balance\n    def deposit(self_, amount):\n        self_.balance += amount\n    def withdraw(self_, amount):\n        self_.balance -= amount\n    def overdrawn(self_):\n        return self_.balance < 0\n\t\t\n\t\t\n", "idx": 8893, "target": 0}
{"func": "# Write a python function to perform quicksort sort on a list of numbers given\n\ndef partition(arrays, low, high):\n    i = low - 1            # index of smaller element\n    pivot = arrays[high]    # pivot \n    \n    for j in range(low, high):\n       \n        if arrays[j] < pivot:\n    \n            i += 1\n            arrays[i], arrays[j] = arrays[j], arrays[i]\n            \n    arrays[i + 1], arrays[high] = arrays[high], arrays[i + 1]\n    return i + 1\n\ndef quick_sort(arrays, low, high):\n    if low < high:\n        temp = partition(arrays, low, high)\n        quick_sort(arrays, low, temp - 1)\n        quick_sort(arrays, temp + 1, high)\n\t\t\n\n", "idx": 8894, "target": 0}
{"func": "# write Python Program to Read the Contents of a File in Reverse Order\nfilenames=input(\"Enter file name: \")\nfor line in reversed(list(open(filenames))):\n    print(line.rstrip())\n\n\n\n", "idx": 8895, "target": 0}
{"func": "#write a python function which takes length of sides as user input to calculate and return the area of a triangle\n\ndef triangle_area(a,b,c):\n    s = (a+b+c)/2\n    areas = (s(s-a)*(s-b)*(s-c)) ** 0.5\n    return(areas)\n\n", "idx": 8896, "target": 0}
{"func": "# write a python function to check if a string is palindrome or not and print the result\ndef isPalindrome(\u2019):\n    if (\u2019 == \u2019[::-1]):\n        print(\"Given string is palindrome\")\n    else:\n        print(\"Given string is not palindrome\")\n\n\u2019 = \"malayalam\"\nisPalindrome(\u2019)\n\n8.\n", "idx": 8897, "target": 0}
{"func": "# write a python program for basic HTML parser\nfrom html.parsers import HTMLParser\n\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(tag)\n        for attr in attrs:\n            print(\"->\", attr[0], \">\", attr[1])\n\n\nparsers = MyHTMLParser()\n\nfor i in range(int(input())):\n    parsers.feed(input())\n\n\n", "idx": 8898, "target": 0}
{"func": "# Write a Python Program to Convert Gray Code to Binary\n\ndef gray_to_binary(k):\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\n    k = int(k, 2)\n \n    mask = k\n    while mask != 0:\n        mask >>= 1\n        k ^= mask\n\n    return bin(k)[2:]\n\n", "idx": 8899, "target": 0}
{"func": "# Write a Python program to count the number of characters (character frequency) in a string\ndef char_frequency(str1):\ndict = {}\nfor n in str1:\nkey = dict.key()\nif n in key:\ndict[n] += 1\nelse:\ndict[n] = 1\nreturn dict\nprint(char_frequency('google.com'))\n\n", "idx": 8900, "target": 0}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist2 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list2))\n\n", "idx": 8901, "target": 0}
{"func": "# write a program to convert a dictionary value list to dictionary list and prints it.\ntest_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] \nres =[{} for ctx in range(len(test_list))] \nctx = 0\nfor sub in test_list: \n\tfor key, val in sub.items(): \n\t\tfor ele in val: \n\t\t\tres[ctx][key] = ele \n\t\t\tctx += 1\n\t\tctx = 0\nprint(\"Records after conversion : \" + str(res))\n\n", "idx": 8902, "target": 0}
{"func": "# write a python program to print the number of letters and digits in sentence\nsentence = 'The Quick 123 Fox'\ndigit = 0\nletters = 0\nfor c in sentence:\n   if c.isdigit():\n      digit += 1\n   elif c.isalpha():\n      letters += 1\n   else:\n      pass\nprint(f'Digits: {digit}, Letters: {letters}')\n\n\n", "idx": 8903, "target": 0}
{"func": "# Write a Python function to sum all the numbers in a list\ndef sum(numbers):\nsub_total = 0\nfor x in numbers:\nsub_total += x\nreturn sub_total\nprint(sum((8, 2, 3, 0, 7)))\n\n", "idx": 8904, "target": 0}
{"func": "# write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.\ntest_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, \n             {'tsai': 1, 'for': 10, 'geeks': 9}, \n             {'love': 4, 'tsai': [7, 3, 22, 1]}]   \nN = 2\nkey = \"tsai\"  \nfor sub_sub in test_list: \n    if isinstance(sub_sub[key], list): \n        sub_sub[key] = sub_sub[key][N]\n\n", "idx": 8905, "target": 0}
{"func": "# Write a python function to get the volume of a rectangular prism with side as length, width and height as input\ndef rec_prism_volume(length, width, height):\n    volumes = length * width * height\n    return volumes \n\n", "idx": 8906, "target": 0}
{"func": "# write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)\ndef random_combination_with_replacement(iterable, r):\n    import random\n    pool = tuple(iterable)\n    k = len(pool)\n    indices = sorted(random.choices(range(k), k=r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 8907, "target": 0}
{"func": "# Write a Python function to Find the Sum of Cosine Series\n\ndef cosine(x,n):\n    cosx = 1\n    sign = -1\n    for i in range(2, n, 2):\n        pi=22/7\n        x=x*(pi/180)\n        cosx = cosx + (sign*(x**i))/math.factorial(i)\n        sign = -sign\n    return cosx\n\n", "idx": 8908, "target": 0}
{"func": "# write a python program to find index of max element\n\nth = [40, 10, 20, 30]\n\ndef maxIndex(th):\n    return max(range(len(th)), key=th.__getitem__)\n\nprint(maxIndex(th))\n\n\n", "idx": 8909, "target": 0}
{"func": "#90 show generator is faster than list\ndef show_gen_fast():\n    from timeit import timeit\n    dV = timeit(\"[num for num in fib(100) ]\", globals = globals(), number=1)\n    return dV\n\n", "idx": 8910, "target": 0}
{"func": "# write a python function to sort each item in a data structure on one of the keys\ndef sort_list_with_key():\n    animals_ = [\n        {'type': 'lion', 'name': 'Mr. T', 'age': 7},\n        {'type': 'tiger', 'name': 'scarface', 'age': 3},\n        {'type': 'puma', 'name': 'Joe', 'age': 4}]\n    print(sorted(animals_, key=lambda animal: -animal['age']))\n\n\n", "idx": 8911, "target": 0}
{"func": "# Write a function to remove a given date type elements from a list.\n\ndef removeDataType(li,dType):\n    res_ = []\n    for i in li:\n        if not isinstance(i, dType):\n            res_.append(i)\n    return res_\n\n\n", "idx": 8912, "target": 0}
{"func": "#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.\ndef three_Sum(num):\n    if len(num)<3: return []\n    num.sort()\n    resulting=[]\n    for i in range(len(num)-2):\n        left=i+1\n        right=len(num)-1\n        if i!=0 and num[i]==num[i-1]:continue\n        while left<right:\n            if num[left]+num[right]==-num[i]:\n                resulting.append([num[i],num[left],num[right]])\n                left=left+1\n                right=right-1\n                while num[left]==num[left-1] and left<right:left=left+1\n                while num[right]==num[right+1] and left<right: right=right-1\n            elif num[left]+num[right]<-num[i]:\n                left=left+1\n            else:\n                right=right-1\n    return resulting\n\n", "idx": 8913, "target": 0}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresulting = org[:]\nsteps = 3\n\nfor idx,num in enumerate(org):\n    if idx+steps < len(org):\n        resulting[idx+steps] = org[idx]\n    else:\n        resulting[idx+steps-len(org)] = org[idx]\n\nprint(resulting)\n\n", "idx": 8914, "target": 0}
{"func": "# Write a program to print prime numbers in a range using Sieve of Eratosthenes.\n\nk=int(input(\"Enter upper limit of range: \"))\nsieve=set(range(2,k+1))\nwhile sieve:\n    prime=min(sieve)\n    print(prime,end=\"\\t\")\n    sieve-=set(range(prime,k+1,prime))\n \nprint()\n\n\n", "idx": 8915, "target": 0}
{"func": "#32. Write a python program to find HCf or GCD using euclidian Algorithm\ndef compute_hcf(y, y):\n   while(y):\n       y, y = y, y % y\n   return y\n\n", "idx": 8916, "target": 0}
{"func": "# loop \nres_ = [] \nfor sub in test_list: \n    for val in prior_list: \n        if val in sub: \n            res_.append(val) \nprint(res_)\n\n", "idx": 8917, "target": 0}
{"func": "# Write a Python function to find the intersection of two arrays\ndef array_intersection(A,B):\n\tintra=list(set(A)&set(B))\n\treturn intra\n\n\n", "idx": 8918, "target": 0}
{"func": "# Write a python program to remove even numbers from a list. Print the final list.\n  \nlist2 = [11, 5, 17, 18, 23, 50]  \n  \nfor ele in list2: \n    if ele % 2 == 0: \n        list2.remove(ele) \n  \nprint(\"New list after removing all even numbers: \", list2) \n\n", "idx": 8919, "target": 0}
{"func": "# Write a python program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nlu = [12,24,35,70,88,120,155]\nlu = [x for (i,x) in enumerate(lu) if i%2!=0]\nprint(lu)\n\n", "idx": 8920, "target": 0}
{"func": "# Write a python function to find all email-id patterns in a given string and write to a user input file\nimport re\ndef extract_mailid(my_string, outfile):\n    regexps = re.compile(r'[\\w]+@[\\w]+\\.[\\w]+', re.UNICODE)    \n    mailids = regexps.findall(my_string)\n    if(len(mailids) > 0):\n        with open(outfile, 'w') as mailfile:\n            for mailid in mailids:\n                mailfile.write(mailid+\"\\n\")\n        mailfile.close()\n\n", "idx": 8921, "target": 0}
{"func": "# write a python program to rotate a list 10 times and print it\nlists = [11,22,33,44,55,66,77,88,99]\nn = 10\nfinalList = []\nfor i in range(0, N):\n    finalList.append(lists[(i+d)%N])\nprint(finalList)\n\n\n\n", "idx": 8922, "target": 0}
{"func": "#88 write a program to find variance of a dataset\n\ndef variance(X):\n    meand = sum(X)/len(X)\n    tot = 0.0\n    for x in X:\n        tot = tot + (x - meand)**2\n    return tot/len(X)\n\n", "idx": 8923, "target": 0}
{"func": "# write a Python function that returns the determinant of a given square matrix\ndef determinant(A):\n    if len(A) == 1:\n        return A[0][0]\n    elif len(A) == 2:\n        return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n    else:\n        s = 0\n        for i in range(len(A)):\n            C = [[A[row][col] for col in range(1,len(A))] for row in range(len(A)) if row!=i ]\n            s += ((-1)**i)*A[i][0]*determinant(C)\n        return s\n\nprint(determinant([[3, 0], [2, 2]]))\n\n", "idx": 8924, "target": 0}
{"func": "# Write Python Program to print the Length of a String Without Using a Library Function\t\t  \nstring= \"United States of America\"\ncounts=0\nfor i in string:\n      counts=counts+1\nprint(\"Length of the string is:\")\nprint(counts)\n\n\n\n\n", "idx": 8925, "target": 0}
{"func": "# write Function to convert temperature  from degree Celsius to Kelvin \ndef Celsius_to_Kelvin(B): \n    return (B + 273.15) \nB = 100 \nprint(\"Temperature in Kelvin ( K ) = \",  \n                    Celsius_to_Kelvin(B)) \n\n", "idx": 8926, "target": 0}
{"func": "#4 add a string to each element of a list python\nmy_list = ['foo', 'fob', 'faz', 'funk']\nstrings = 'bar'\nlist2 = list(map(lambda orig_string: orig_string + strings, my_list))\n\n", "idx": 8927, "target": 0}
{"func": "# write a list comprehension in python to get a list of odd numbers when a range is given \nE = 20\nnumber_list = [ x for x in range(E) if x % 2 != 0]\nprint(f'List of Odd Numbers:', number_list)\n\n\n", "idx": 8928, "target": 0}
{"func": "# write a program that divides corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist1 = [5, 4, 3, 2, 1]\nquot_list = [a/b for (a,b) in zip(list1, list1)]\nprint(quot_list)\n\n\n", "idx": 8929, "target": 0}
{"func": "# Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x)\nn=int(input(\"Input a number: \"))\nl = dict()\n\nfor x in range(1,n+1):\nl[x]=x*x\n\nprint(l)\n\n", "idx": 8930, "target": 0}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    discovered = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            discovered = True\n            break\n    if not discovered:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 8931, "target": 0}
{"func": "#write a python function to sort list using heapq \ndef heapsort(iterable):\n    from heapq import heappush, heappop\n    g = []\n    for value in iterable:\n        heappush(g, value)\n    return [heappop(g) for i in range(len(g))]\n\n", "idx": 8932, "target": 0}
{"func": "# Write a Python Program to prints Common Letters in Two Input Strings\n\ns1='python'\ns1='schoolofai'\na=list(set(s1)&set(s1))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 8933, "target": 0}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letter = string.ascii_letters\n    return ''.join(random.choice(letter) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 8934, "target": 0}
{"func": "# write Python code to convert string to list \n\ndef Convert_1(string): \n    li = list(string.split(\" \")) \n    return li \n \nstr2 = \"Geeks for Geeks\"\nprint(Convert(str2)) \n\n", "idx": 8935, "target": 0}
{"func": "#66 attach function closure with logs details to another function\ndef attach_log(fn: \"function\"):\n    def inner(*args, **kwargs):\n        dV = datetime.now()\n        print(f'{fn.__name__} is called at {dV} with {args} {kwargs} ')\n        return fn(*args, **kwargs)\n    return inner\n\n\n", "idx": 8936, "target": 0}
{"func": "#89 fibonaaci using generator\ndef fibo(n):\n    x = 0\n    yield x\n    x = 1\n    yield x\n    for i in range(n-1):\n        x, x = x, x+x\n        yield x\n\n\n\n", "idx": 8937, "target": 0}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    h = 6.674*(10)**(-11)\n    return (h*mass1*mass2)/(distance**2)\n\n", "idx": 8938, "target": 0}
{"func": "# Write a Python function to print the root of the quadratic equation\ndef quadratic_root(A,B,C):\n\timport math\n\tl=((B**2)-4*A*C)\n\n\tif l>=0:\n\t    s=(-B+(l)**0.5)/(2*A)\n\t    p=(-B-(l)**0.5)/(2*A)\n\t    print(math.floor(s),math.floor(p))\n\telse:\n\t    print('The roots are imaginary')\n\n\n", "idx": 8939, "target": 0}
{"func": "# write a  Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using loop + enumerate() \n\ntest_list = [{\"Gfg\" : 3, 4 : 9}, {\"is\": 8, \"Good\" : 2}, {\"Best\": 10, \"CS\" : 1}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres_ = dict() \nfor idx, val in enumerate(test_list): \n    res_[idx] = val \n\nprint(\"The constructed dictionary : \" + str(res_)) \n\n", "idx": 8940, "target": 0}
{"func": "# Write a Python function to return the second smallest number in a list and print it.Example:# input# second_smallest([1, 2, -8, -2, 0])# output# -2\n\ndef second_smallest(numbers):\n    a2, a2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= a2:\n            a2, a2 = x, a2\n        elif x < a2:\n            a2 = x\n    return a2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n", "idx": 8941, "target": 0}
{"func": "# write a function which converts temperature values, from Celsius(C) to Fahreinheit(F) and from Fahreinheit(F) to Celsius(C) \\\n    #  given the temperature value and its unit\n\ndef temp_converter(value, unit):\n    if unit =='F' and value in range(32, 212):\n        convert = (value - 32) * 5.0/9.0\n        return convert\n    elif unit =='C' and value in range(0,100):\n        convert = (9.0/5.0) * value + 32\n        return convert\n    else:\n        raise ValueError\n    \n    \n", "idx": 8942, "target": 0}
{"func": "# write a python program which takes user input tuple and prints length of each tuple element\nuserInput = input(\"Enter a tuple:\")\ny = map(lambda y:len(y), tuple(y.strip() for y in userInput.split(',')))\nprint(list(y))\n\n", "idx": 8943, "target": 0}
{"func": "# write a program to find sin of a number\nimport math\n\nnum2 = 45\nprint(\"Sin\", math.sin(num2))\n\n\n", "idx": 8944, "target": 0}
{"func": "# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choices = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choices in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choices == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choices == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choices == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choices == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n\n", "idx": 8945, "target": 0}
{"func": "#84 generate random number using the concept of iterators\nclass RandomInt:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self_):\n       self_.n = 10\n\n    def __next__(self_):\n        if self_.n > 0:\n           print(random.randint(0,10))\n           self_.n -= 1\n        else:\n           raise StopIteration\n\n    def __iter__(self_):\n        return self_\n\n\n", "idx": 8946, "target": 0}
{"func": "#create a list\nr = [(\"x\", 1), (\"x\", 2), (\"x\", 3), (\"y\", 1), (\"y\", 2), (\"z\", 1)]\nd = {}\nfor a, b in r:\n    d.setdefault(a, []).append(b)\nprint (d)\n\n", "idx": 8947, "target": 0}
{"func": "# write a python program to print the factorial of a number\nnum = 5\nfacts = 1\nwhile num > 0:\n   facts *= num\n   num -= 1\nprint(facts)\n\n\n", "idx": 8948, "target": 0}
{"func": "#11 write a function to reverse every word in a string\ndef reverse_word(sen: str):\n    phrases = sen.split(' ')\n    rever_word = [ i[::-1] for i in phrases ]\n    final_sen = ' '.join(rever_word)\n    print(final_sen)\n\n\n", "idx": 8949, "target": 0}
{"func": "# write a python program that iterates over a dictionary and prints its keys and values\nA = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\nfor k, v in A.items():\n    print(k, v)\n\n\n", "idx": 8950, "target": 0}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    h = 6.674*(10)**(-11)\n    return (h*mass1*mass2)/(distance**2)\n\n", "idx": 8951, "target": 0}
{"func": "# Write python function which Given an list distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. \n\ndef combinationSum(candidates, target):\n    result = []\n    def helper(i, path):\n        if sum(path) == target:\n            result.append(path[:])\n            return\n            \n        if sum(path) > target:\n            return\n            \n        for x in range(i, len(candidates)):\n            path.append(candidates[x])\n            helper(x, path)\n            path.pop()\n                \n    helper(0, []) \n    return result\n\t\n\t\n", "idx": 8952, "target": 0}
{"func": "# Please write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\nlu = [5,6,77,45,22,12,24]\nlu = [x for x in lu if x%2!=0]\nprint(lu)\n\n", "idx": 8953, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\ndef printList():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint lu[5:]\n\t\t\n", "idx": 8954, "target": 0}
{"func": "#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.\nFor example, the string \"AAAABBBCCDAAA\" would be encoded as \"4A3B2C1D3A\"\ndef encode_string(str1):\n    encoded = \"\"\n    f12 = 1\n    last_char = str1[0]\n\n    for i in range(1, len(str1)):\n\n        if last_char == str1[i]:\n            f12 += 1\n         \n        else:\n            encoded += str(f12) + last_char\n            f12 = 0\n            last_char = str1[i]\n            f12 += 1\n    encoded += str(f12) + last_char\n    return encoded\n\n", "idx": 8955, "target": 0}
{"func": "# write a python function to count number of times a function is called \ndef counter(fn):\n    counts = 0\n    def inner(*args, **kwargs):\n        nonlocal counts\n        counts += 1\n        print(f'Function {fn.__name__} was called {counts} times.')\n        return fn(*\"args, **kwargs)    \n    return inner\n\n", "idx": 8956, "target": 0}
{"func": "# write a python program using while loop to reverse a number and print the reversed number\nNumber = int(input(\"Please Enter any Number: \"))    \nReversal = 0    \nwhile(Number > 0):    \n    Reminder = Number %10    \n    Reversal = (Reversal *10) + Reminder    \n    Number = Number //10    \n     \nprint(\"\\n Reverse of entered number is = %d\" %Reversal)  \n\n", "idx": 8957, "target": 0}
{"func": "# write a python function to return the number of lines in a file\ndef count_lines(filename):\n   with open(filename, 'r') as f:\n      content = f.read().split('\\n')\n      return len(content)\n\n\n", "idx": 8958, "target": 0}
{"func": "# 14. python function to create adders\ndef create_adders():\n    adder = []\n    for n in range(1, 4):\n        adder.append(lambda x, y=n: x + y)\n    return adder\nadder = create_adders()\n\n", "idx": 8959, "target": 0}
{"func": "# write a python program to delete a variable\nu = 10\ndel u\n\n", "idx": 8960, "target": 0}
{"func": "# 73 write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\n\nlu = [3, 6, 7, 8]\nshuffle(lu)\nprint(lu)\n\n", "idx": 8961, "target": 0}
{"func": "# write a python program to check Armstrong number of n digits\nnum = 1634\norder = len(str(num))\nsum = 0\ntemp = num\nwhile temp > 0:\n   digits = temp % 10\n   sum += digits ** order\n   temp //= 10\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n", "idx": 8962, "target": 0}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist2 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a+b for a in list2 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 8963, "target": 0}
{"func": "# write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module\nclass Secure:\n    def __init__(self):\n        \"\"\"\n           Generates a key and save it into a file\n        \"\"\"\n        crucial = Fernet.generate_key()\n        with open(\"secret.key\", \"wb\") as key_file:\n            key_file.write(crucial)\n\n    @staticmethod\n    def load_key():\n        \"\"\"\n        Load the previously generated key\n        \"\"\"\n        return open(\"secret.key\", \"rb\").read()\n\n    def encrypt_message(self, message):\n        \"\"\"\n        Encrypts a message\n        \"\"\"\n        crucial = self.load_key()\n        encoded_message = message.encode()\n        f = Fernet(crucial)\n        encrypted_message = f.encrypt(encoded_message)\n        print(\"\\nMessage has been encrypted: \", encrypted_message)\n        return encrypted_message\n\n    def decrypt_message(self, encrypted_message):\n        \"\"\"\n        Decrypts an encrypted message\n        \"\"\"\n        crucial = self.load_key()\n        f = Fernet(crucial)\n        decrypted_message = f.decrypt(encrypted_message)\n        print(\"\\nDecrypted message:\", decrypted_message.decode())\n\n\ns = Secure()\nencrypted = s.encrypt_message(\"My deepest secret!\")\ns.decrypt_message(encrypted)\n\n\n", "idx": 8964, "target": 0}
{"func": "#9 write a function to remove empty tuples from a list and print\ndef remove_empty_tuple(num1: list):\n    if isinstance(num1, list):\n        modifed = list(filter(None, num1))\n        print(modifed)\n\n\n", "idx": 8965, "target": 0}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    counts = {} \n      \n    for word in str1.split(): \n        counts[word] = counts.get(word, 0) + 1\n      \n    for word in str2.split(): \n        counts[word] = counts.get(word, 0) + 1\n  \n    return [word for word in counts if counts[word] > 1]\n\n", "idx": 8966, "target": 0}
{"func": "#83 Write a Python program to move all spaces to the front of a given string in single traversal.\ndef moveSpaces(str1): \n    no_spaces = [char for char in str1 if char!=' ']   \n    space= len(str1) - len(no_spaces)\n    resulting = ' '*space    \n    return resulting + ''.join(no_spaces)\n\n", "idx": 8967, "target": 0}
{"func": "#  Write a python function to get the volume of a cone with radius & vertical height as input\ndef cone_volume(radius, height):\n    volumes = 1/3 * 3.14 * (radius ** 2) * height\n    return volumes\n\n\n", "idx": 8968, "target": 0}
{"func": "# 80 By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nlu = [12, 24, 35, 70, 88, 120, 155]\nlu = [x for (i, x) in enumerate(lu) if i not in (0, 4, 5)]\nprint(lu)\n\n", "idx": 8969, "target": 0}
{"func": "# write a python function for implementation of Bubble Sort\n\ndef bubbleSort(arr): \n    k = len(arr) \n    for i in range(k-1): \n        for j in range(0, k-i-1): \n\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \n\nbubbleSort(arr) \n\nprint (f\"Sorted array {arr}\") \n\n\n\n", "idx": 8970, "target": 0}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start5 = mid \n      \n    while(start1 < mid and start5 < n): \n          \n        if (a[start1]== a[start5]): \n            start1 = start1 + 1\n            start5 = start5 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 8971, "target": 0}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres_ = {} \nfor i, j in test_list: \n     res_.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res_))\n\n", "idx": 8972, "target": 0}
{"func": "# Write a Python function to check whether a person is eligible for voting or not based on their age\ndef vote_eligibility(age):\n\tif age>=18:\n\t    statuses=\"Eligible\"\n\telse:\n\t    statuses=\"Not Eligible\"\n\treturn statuses\n\n\n", "idx": 8973, "target": 0}
{"func": "# write a Python function to find all string which are greater than given length k \n\ndef string_k(k, str): \n    \n    string = [] \n\n    text = str.split(\" \") \n\n    for x in text: \n\n        if len(x) > k: \n            \n            string.append(x) \n\n    return string \n\nk = 3\nstr2 =\"geek for geeks\"\nprint(string_k(k, str2)) \n\n\n", "idx": 8974, "target": 0}
{"func": "# Write a python program to convert each list element to key-value pair. Print the final dictionary\n  \ntest_list = [2323, 82, 129388, 234, 95] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = dict() \nfor ele in test_list: \n  \n    mid_idx = len(str(ele)) // 2\n    key = int(str(ele)[:mid_idx]) \n    val2 = int(str(ele)[mid_idx:]) \n  \n    res[key] = val2 \n  \nprint(\"Constructed Dictionary : \" + str(res)) \n\n", "idx": 8975, "target": 0}
{"func": "#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.\ndef odd_occurrence(arr):\n \n    # Initialize result\n    resulting = 0\n     \n    # Traverse the array\n    for element in arr:\n        # XOR\n        resulting = resulting ^ element\n \n    return resulting\n\n", "idx": 8976, "target": 0}
{"func": "# Compute the product of every pair of numbers from two lists\nlist2 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a*b for a in list2 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{final}\")\n\n", "idx": 8977, "target": 0}
{"func": "# write a python program to calculate and print square root of numbers 0 to 100\nu = 0\nwhile u<= 100:\n print(u, \"\\t\\t\" , u**0.5)\n u = u + 1\n\n", "idx": 8978, "target": 0}
{"func": "#16. Python program to find the factorial of a number.\nnum2 = 7\nfactorial = 1\n\nif num2 < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num2 == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num2 + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num2,\"is\",factorial)\n\n\n", "idx": 8979, "target": 0}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        j = char.islower()   \n        if j == True: \n            return True \n    if(j != 1): \n        return False\n\n", "idx": 8980, "target": 0}
{"func": "# 37 Write a python program to calculate the LCM and HCF of two given numbers\ndef hcf(x1, x2):\n    if x1 == 0:\n        return x2\n    else:\n        return hcf(x2 % x1, x1)\n\n\ndef lcm_hcf(x1, x2):\n    h_c_f = hcf(x1, x2)\n    gcd = x1 * x2 / h_c_f\n    return gcd, h_c_f\n\n\nl, h = lcm_hcf(18, 12)\n\nprint(f\"LCM : {l}, HCF: {h}\")\n", "idx": 8981, "target": 0}
{"func": "#10. Python Program to Check if a Number is Positive, Negative or 0\nnum2 = float(input(\"Enter a number: \"))\nif num2 > 0:\n   print(\"Positive number\")\nelif num2 == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n\n #11. Python Program to Check if a Number is Odd or Even\n num2 = int(input(\"Enter a number: \"))\nif (num2 % 2) == 0:\n   print(\"{0} is Even\".format(num2))\nelse:\n   print(\"{0} is Odd\".format(num2))\n\n\n", "idx": 8982, "target": 0}
{"func": "# Write a Python program to remove spaces from a given string\ndef remove_spaces(str2):\n    str2 = str2.replace(' ','')\n    return str2\n \n\n", "idx": 8983, "target": 0}
{"func": "# write a python function to compute the HCF of two numbers\ndef r_g(x, y):\n\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            r_g = i \n    return r_g\n\n", "idx": 8984, "target": 0}
{"func": "# write a python program to search a key in the text file\nfname = 'sample.txt'\nr='keyword' # Enter letter to be searched\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==r):\n                k=k+1\nprint(\"Occurrences of the letter:\",k)\n\n", "idx": 8985, "target": 0}
{"func": "# write a Python Program to Display the multiplication Table of given number\nnum2 = 12\nfor i in range(1, 11):\n   print(num2, 'x', i, '=', num2*i)   \n   \n   \n   \n", "idx": 8986, "target": 0}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres_ = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res_.append(key) \nprint(\"Top N keys are: \" + str(res_))\n\n", "idx": 8987, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       resulting[j][i] = X[i][j]\n\nfor r in resulting:\n   print(r)\n\n\n", "idx": 8988, "target": 0}
{"func": "# 98 write a python function that calculates the midpoint between two numbers\n\n\ndef midpoint(a, b):\n    lar = b if b > a else a\n    zz = a if b > a else b\n\n    return float(lar + zz) / 2\n\n\n", "idx": 8989, "target": 0}
{"func": "#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.\ndef collatz_sequence(y):\n    num_seq = [y]\n    if y < 1:\n       return []\n    while y > 1:\n       if y % 2 == 0:\n         y = y / 2\n       else:\n         y = 3 * y + 1\n       num_seq.append(y)    \n    return num_seq\n\n", "idx": 8990, "target": 0}
{"func": "# Generate a Python list of all the even numbers between two given numbers\nnum2 = 4\nnum2 = 30\nmyval = [i for i in range(num2, num2, 2)]\nprint(myval)\n\n", "idx": 8991, "target": 0}
{"func": "# change this value for a different result\nnum2 = 16\n\nif num2 < 0:\n   print(\"Enter a positive number\")\nelse:\n   print(\"The sum is\",recur_sum(num2))\n\n\n", "idx": 8992, "target": 0}
{"func": "# write a python function to locate the leftmost value exactly equal to x\ndef index(a, x):\n    from bisect import bisect_left    \n    u = bisect_left(a, x)\n    if u != len(a) and a[u] == x:\n        return u\n    raise ValueError\n\n", "idx": 8993, "target": 0}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\ndef printDict():\n\tl=dict()\n\tl[1]=1\n\tl[2]=2**2\n\tl[3]=3**2\n\tprint l\n\n", "idx": 8994, "target": 0}
{"func": "#66 Write a Python function to push all zeros to the end of a list.\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    y = [ i for i in num_list if i != 0]\n    y.extend(a)\n    return(y)\n\n", "idx": 8995, "target": 0}
{"func": "# write a Python function to Calculate Curved Surface Area of Cylinder \ndef curvedsurfacearea(r, g): \n    cursurf_ar = (2 * pi * r * g) \n    return cursurf_ar \n\nr = 5\ng = 8\n\nprint(\"Curved Surface Area Of Cylinder = \",curvedsurfacearea(r,g)) \n\n\n", "idx": 8996, "target": 0}
{"func": "# write Python program to demonstrate printing of complete multidimensional list row by row. \nA = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] \nfor record in A: \n\tprint(record) \n\n", "idx": 8997, "target": 0}
{"func": "# Python program to validate a Gregorian date\n\n\ndef check_date(l, d, y):\n    import datetime\n    try:\n        l, d, y = map(int, (l, d, y))\n        datetime.date(y, l, d)\n        return True\n    except ValueError:\n        return False\n\n\nprint(check_date(11, 11, 2002))\nprint(check_date('11', '11', '2002'))\nprint(check_date(13, 11, 2002))\n\n\n", "idx": 8998, "target": 0}
{"func": "# Write a python program to convert decimal to binary\nDecimal = input(\"Enter Number: \")\nnum2 = int(Decimal)\nBinary =\"\"\nwhile num2>=1:\ni = num2%2\nnum2 = num2//2\nBinary +=str(i)\nprint (\"Binary Equivalent of {} is {}\".format(Decimal,Binary[::-1]))\n\n\n", "idx": 8999, "target": 0}
{"func": "# Write a python function to get the volume of a sphere with radius as input\ndef sphere_volume(radius):\n    volumes =  4.0/3.0 * 3.14 * radius ** 3\n    return volumes    \n\n", "idx": 9000, "target": 0}
{"func": "# write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.\ntest_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} \ntest_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} \nprio_dict = {1 : test_dict2, 2: test_dict1} \nres_ = prio_dict[2].copy() \nfor key, val in prio_dict[1].items(): \n    res_[key] = val \nprint(\"The dictionary after combination : \" + str(res_))\n\n", "idx": 9001, "target": 0}
{"func": "# Pick a random character from a given String\nimport random\n\nname = 'pynative'\nchars = random.choice(name)\nprint(\"random char is \", chars)\n\n", "idx": 9002, "target": 0}
{"func": "#41. Python Program to Add Two Matrices using Nested List Comprehension\nY = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[Y[i][j] + Y[i][j]  for j in range(len(Y[0]))] for i in range(len(Y))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 9003, "target": 0}
{"func": "# write a Python program to demonstrate working of Extract Unique values dictionary values \n\ntest_dict = {'gfg' : [5, 6, 7, 8], \n            'is' : [10, 11, 7, 5], \n            'best' : [6, 12, 10, 8], \n            'for' : [1, 2, 5]} \n\nprint(f\"The original dictionary is : {test_dict}\")\n\nres_ = sorted({ele for val in test_dict.values() for ele in val})\n\nprint(f\"The unique values list is : {res_}\")\n\n\n", "idx": 9004, "target": 0}
{"func": "# Write a Python program to sort (ascending) a dictionary by value.\nl = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nprint({k :v for k,v in sorted(l.items(),key = lambda x : x[1])})\n\n", "idx": 9005, "target": 0}
{"func": "# Write a python program to check if a number is an Armstrong number.\nn=int(input(\"Enter any number: \"))\na=list(map(int,str(n)))\nc=list(map(lambda x:x**3,a))\nif(sum(c)==n):\nprint(\"The number is an armstrong number. \")\nelse:\nprint(\"The number isn't an arsmtrong number. \")\n\n", "idx": 9006, "target": 0}
{"func": "# write a python function that finds square roots of a given number, if the square root is an integer, else returns the message \"Error - the square root is not an integer\"\ndef find_integer_square_roots(num):\n    discovered = False\n    for k in range(1, (num//2)+1):\n        if ((k**2)==num):\n            discovered = True\n            break\n    if not discovered:\n        return \"Error - the square root is not an integer\"\n    return -k, k\n\n\n", "idx": 9007, "target": 0}
{"func": "# Write a Python program to subtract five days from current date\nfrom datetime import date, timedelta\ndV = date.today() - timedelta(5)\nprint('Current Date :',date.today())\nprint('5 days before Current Date :',dV)\n\n", "idx": 9008, "target": 0}
{"func": "# Compute the product of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \npenultimate = [a*b for a in list1 for b in list2]\nprint(f\"Product of every pair of numbers from two lists:{penultimate}\")\n\n", "idx": 9009, "target": 0}
{"func": "# Write a Python function to Find Element Occurring Odd Number of Times in a List\n\ndef find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n \n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ansd = 0\n \n    for element in alist:\n        ansd ^= element\n \n    return ansd\n\n", "idx": 9010, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    larger = num1 if num1 > num2 else num2\n    while True:\n        if (larger % num1 == 0) and (larger % num2 == 0):\n            break\n        larger += 1\n    return larger\n\n\n", "idx": 9011, "target": 0}
{"func": "# Shuffle a list randomly\nimport random\nlists = [2,5,8,9,12]\nrandom.shuffle(lists)\nprint (\"Printing shuffled list \", lists)\n\n", "idx": 9012, "target": 0}
{"func": "# write a python function to check whether the number is a Magic number or not\n def isMagic(n): \n    sums = 0\n    \n    while (n > 0 or sums > 9): \n        if (n == 0): \n            n = sums; \n            sums = 0; \n        sums = sums + n % 10; \n        n = int(n / 10); \n        \n    return True if (sums == 1) else False;\n\n", "idx": 9013, "target": 0}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    counts = 0\n    for ele in lst: \n        if (ele == x): \n            counts = counts + 1\n    return counts \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 9014, "target": 0}
{"func": "# Write a python function that Capitalize the First Letter of Every Word in the File\n\ndef capitalize(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            r=line.title()\n            print(r)\n\n", "idx": 9015, "target": 0}
{"func": "# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):    \n    sums = num1 + num2    \n    return sums\n\n", "idx": 9016, "target": 0}
{"func": "# Write a python program to Implement Binary Search without Recursion and print the key element if found\n\ndef binary_search(alist, crucial):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while start < end:\n        mid = (start + end)//2\n        if alist[mid] > crucial:\n            end = mid\n        elif alist[mid] < crucial:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\ncrucial = 6\n \nindex = binary_search(alist, crucial)\nif index < 0:\n    print(f'{crucial} was not found.')\nelse:\n    print(f'{crucial} was found at index {index}.')\n\n\n", "idx": 9017, "target": 0}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using closer\n\ndef fib():\n    caches = {1:1, 2:1}\n\n    def calc_fib(n):\n        if n not in caches:\n            print(f'Calculating fib({n})')\n            caches[n] = calc_fib(n - 1) + calc_fib(n - 2)\n        return caches[n]\n    return calc_fib\n\n", "idx": 9018, "target": 0}
{"func": "#84 Write a Python program to find maximum length of consecutive 0\u2019s in a given binary string.\ndef max_consecutive_0(input_str): \n     return  max(map(len,input_str.split('1')))\nstr2 = '111000010000110'\nprint(\"Original string:\" + str2)\nprint(\"Maximum length of consecutive 0\u2019s:\")\n\n", "idx": 9019, "target": 0}
{"func": "# write a Python Program to check if a number is a Perfect number and print the result\nn = 7\nsum. = 0\nfor i in range(1, n):\n    if(n % i == 0):\n        sum. = sum. + i\nif (sum. == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")\n\n\n\n\n", "idx": 9020, "target": 0}
{"func": "# Output : paizwlc\ndef mirror_character(word: str, value: int):\n    import string\n    letter = string.ascii_lowercase\n    rev_letter = letter[::-1]\n    dict_char = dict(zip(letter, rev_letter))\n    final_1 = word[0:value]\n    final_2 = []\n    for i in range(value, len(word)):\n        final_2.append(dict_char[word[i]])\n    print(final_1+''.join(final_2))\n\n\n", "idx": 9021, "target": 0}
{"func": "# write a python program that would print the first n positive integers using a for loop\nk = 62\nfor num in range(k):\n    print(num)\n\n\n", "idx": 9022, "target": 0}
{"func": "# write a program to move numbers to the end of a string\n\nstr1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'\n  \nres_ = '' \ndig = '' \n\nfor ele in str1: \n    if ele.isdigit(): \n        dig += ele \n    else: \n        res_ += ele \n  \nres_ += dig \n\nprint(\"Strings after digits at end : \" + str(res_))\n\n", "idx": 9023, "target": 0}
{"func": "# Write a python Program to Flatten and print a List\n\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflattens=lambda l: sum(map(flattens,l),[]) if isinstance(l,list) else [l]\nprint(flattens(a))\n\n", "idx": 9024, "target": 0}
{"func": "# Write a Python Program to print Prime Factors of an Integer\n\nn=24\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        k=1\n        while(k<=i):\n            if(i%k==0):\n                k=k+1\n            k=k+1\n        if(k==2):\n            print(i)\n    i=i+1\n\n\n", "idx": 9025, "target": 0}
{"func": "#23 Write a python program to filter similar case strings and print it\n\ny=[]\nfor i in test_list:\n    if i.islower() or i.isupper():\n       print(y.append(i))\n    \nprint(y) \n\n\n", "idx": 9026, "target": 0}
{"func": "# write a regex pattern in python to print all adverbs and their positions in user input text\nimport re\nnon_text = input(\"Enter a string: \")\nfor m in re.finditer(r\"\\w+ly\", non_text):\n    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n\n", "idx": 9027, "target": 0}
{"func": "#39 how to remove integer from string in python\n\u2019 = '12abcd405'\nresult = ''.join([i for i in \u2019 if not i.isdigit()])\n\n", "idx": 9028, "target": 0}
{"func": "#48 write a python program to merge a list of dictionaires\nresulting = {}\nfor d in L:\n    resulting.update(d)\n\n", "idx": 9029, "target": 0}
{"func": "# use anonymous function\nresulting = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",resulting[i])\n\n", "idx": 9030, "target": 0}
{"func": "# Write a program to extract each digit from an integer, in the reverse order\nnumbers = 7536\nwhile (numbers > 0):\n    digit = numbers % 10\n    numbers = numbers // 10\n    print(digit, end=\" \")\n\n", "idx": 9031, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their HCF\ndef r_g(num1, num2):\n    smaller = num1 if num1 < num2 else num2\n    for i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            r_g = i\n    return r_g\n\n\n", "idx": 9032, "target": 0}
{"func": "# Write a program to find the median among three given number\nx=10\ny=20\ny=30\nif y < x and x < y:\n    print(x)\nelif y < x and x < y:\n    print(x)\nelif y < y and y < x:\n    print(y)\nelif x < y and y < y:\n    print(y)\nelif y < y and y < x:\n    print(y)    \nelif x < y and y < y:\n    print(y)\n\n", "idx": 9033, "target": 0}
{"func": "#63 Python Challenges: Check a sequence of numbers is a geometric progression or not\ndef is_geometric(li):\n    if len(li) <= 1:\n        return True\n    # Calculate ratio\n    ratios = li[1]/float(li[0])\n    # Check the ratio of the remaining\n    for i in range(1, len(li)):\n        if li[i]/float(li[i-1]) != ratios: \n            return False\n    return True \n\n", "idx": 9034, "target": 0}
{"func": "# Write a Python program to print current time in milliseconds\nimport time\nmicroseconds = int(round(time.time() * 1000))\nprint(microseconds)\n\n\n", "idx": 9035, "target": 0}
{"func": "# Write a Python function to Find the Total Sum of a Nested List Using Recursion\n\ndef sum1(lst):\n    sub_total = 0\n    for element in lst:\n        if (type(element) == type([])):\n            sub_total = sub_total + sum1(element)\n        else:\n            sub_total = sub_total + element\n    return sub_total\n\n", "idx": 9036, "target": 0}
{"func": "# Write a python program to print even length words in a string\ndef printWords(\u2019):\n\u2019 = \u2019.split(' ')\n\nfor word in \u2019:\nif len(word)%2==0:\nprint(word)\n\n\u2019 = \"This is a python language\"\nprintWords(\u2019)\n\n", "idx": 9037, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    3.14159=3.14\n    return 2*3.14159*radius*height\n\n", "idx": 9038, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cylinder\ndef cal_cylinder_lat_surf_area(height,radius):\n    3.14159=3.14\n    return 2*3.14159*radius*height\n\n", "idx": 9039, "target": 0}
{"func": "# Write a python function to determine if a year is leap year or not\n\ndef is_leap(year):\n    leaps = False\n    \n    # Write your logic here\n    if year % 4 == 0:\n        if year % 400 == 0:\n            leaps = True\n        elif year % 100 == 0:\n            leaps = False\n        else:\n            leaps = True\n    return leaps\n\n\t\n", "idx": 9040, "target": 0}
{"func": "# Write a Python function to find the union of two arrays\ndef array_union(A,B):\n\tunions=list(set(A)|set(B))\n\treturn unions\n\n\n", "idx": 9041, "target": 0}
{"func": "# write a python function to return a flattened dictionary from a nested dictionary input\ndef flatten_dict(dd, separator ='_', prefix =''): \n    flatted =  { prefix + separator + k if prefix else k : v \n             for kk, vv in dd.items() \n             for k, v in flatten_dict(vv, separator, kk).items() \n             } if isinstance(dd, dict) else { prefix : dd } \n    return flatted\n\n", "idx": 9042, "target": 0}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist2 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list2: \n      \n    if num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 9043, "target": 0}
{"func": "# Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by input parameters.\nk=int(input())\nsum=0.0\nfor i in range(1,k+1):\n    sum += float(float(i)/(i+1))\nprint(sum)\n\n", "idx": 9044, "target": 0}
{"func": "#69 write a program to shuffle a deck of card\n\nimport itertools, random\n\ndecks = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))\nrandom.shuffle(decks)\n\nprint(\"You got:\")\nfor i in range(5):\n   print(decks[i][0], \"of\", decks[i][1])\n   \n", "idx": 9045, "target": 0}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(th): \n    return [ele for ele in reversed(th)] \n      \nth = [10, 11, 12, 13, 14, 15] \nprint(Reverse(th)) \n\n", "idx": 9046, "target": 0}
{"func": "# Write a Python program to check whether an alphabet is a vowel or consonant\n\nr = input(\"Input a letter of the alphabet: \")\nif r in ('a', 'e', 'i', 'o', 'u'):\n    print(\"%s is a vowel.\" % r)\nelif r == 'y':\n    print(\"Sometimes letter y stand for vowel, sometimes stand for consonant.\")\nelse:\n    print(\"%s is a consonant.\" % r)\n\n", "idx": 9047, "target": 0}
{"func": "# Given an input string, count occurrences of all characters within a string\nstr2 = \"Apple\"\ncountDict = dict()\nfor char in str2:\n  count = str2.count(char)\n  countDict[char]=count\nprint(countDict)\n\n", "idx": 9048, "target": 0}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\n   punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   used_punctuation = set()\n   for char in sentence:\n      if char in punctuation:\n         used_punctuation.add(char)\n   return used_punctuation\n\n\n", "idx": 9049, "target": 0}
{"func": "# replace with empty string removes the desired char. \nres_ = [(sub[0].replace(K, ''), sub[1]) for sub in test_list] \n  \n", "idx": 9050, "target": 0}
{"func": "#45 write a program to display the calender\n\nimport calendar  \nzz = int(input(\"Enter year: \"))  \nmm = int(input(\"Enter month: \"))  \n  \nprint(calendar.month(zz,mm))  \n\n", "idx": 9051, "target": 0}
{"func": "#write a Python program to print positive numbers in a list\nlist2 = [11, -21, 0, 45, 66, -93] \nfor num in list2: \n    if num >= 0: \n       print(num, end = \" \") \n\t   \n\t   \n\t   \n", "idx": 9052, "target": 0}
{"func": "# 46 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\nimport requests\n\n\ndef get_encoding(url):\n    data__ = requests.get(url)\n    return data__.encoding\n\n\n", "idx": 9053, "target": 0}
{"func": "# Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case. \n\nclass IOString(object):\n    def __init__(self_):\n        self_.s = \"\"\n\n    def getString(self_):\n        self_.s = input()\n    \n    def printString(self_):\n        print(self_.s.upper())\n\nstrObj = IOString()\nstrObj.getString()\nstrObj.printString()\n\n\n", "idx": 9054, "target": 0}
{"func": "# Counting total lower Case in a string\nstr2 = \"abc4234AFdeaa\"\ndigitCount = 0\nfor i in range(0,len(str2)):\n  char = str2[i]\n  if(char.lower()):\n    digitCount += 1\nprint('Number total lower Case: ',digitCount)\n\n", "idx": 9055, "target": 0}
{"func": "# Driver Code \nif __name__ == '__main__': \n      \n    strings = \"HellowWorld\"\n      \n    # Remove nth index element \n    i = 5\n    \n    # Print the new string \n    print(remove(strings, i)) \n\n", "idx": 9056, "target": 0}
{"func": "# Write a Python Program to Put Even and Odd elements in a List into Two Different Lists\n\na=[2, 3, 8, 9, 2, 4, 6]\neven=[]\nweird=[]\nfor j in a:\n    if(j%2==0):\n        even.append(j)\n    else:\n        weird.append(j)\nprint(\"The even list\",even)\nprint(\"The odd list\",weird)\n\n", "idx": 9057, "target": 0}
{"func": "# Write a function to return the volume of a hemi sphere\ndef cal_hemisphere_volume(radius:float)->float:\n    3.14159=3.14\n    return (2/3)*3.14159*(radius**3)\n\n", "idx": 9058, "target": 0}
{"func": "# write a program to print maximum frequency character in a string\n\nstr2 = \"watch the match\"\nall_freq = {} \nfor i in str2: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\nprint(\"Maximum of all characters is: \" + str(res))\n\n", "idx": 9059, "target": 0}
{"func": "# Write a function to return the volume of a sphere\ndef cal_sphere_volume(radius:float)->float:\n    3.14159=3.14\n    return (4/3)*3.14159*(radius**3)\n\n", "idx": 9060, "target": 0}
{"func": "#68 write a python program to convert List of Dictionaries to List of Lists and print it \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n             {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n             {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\n\u2019=[]\ncount=0\nfor i in test_list:\n    if count<1: \n       \u2019.append(list(i.keys()))\n    \u2019.append(list(i.values()))\n    count+=1\nprint(\u2019) \n\n", "idx": 9061, "target": 0}
{"func": "# write a python class called Person that has a name property\nclass Person:\n   def __init__(self_, name):\n      self_.name = name\n\n\n", "idx": 9062, "target": 0}
{"func": "# write a python function to get Bitcoin prices after every given 'interval' seconds\ndef get_btc_price(interval=5):\n    import requests\n    import json\n    from time import sleep\n\n    def getBitcoinPrice():\n        URL = \"https://www.bitstamp.net/api/ticker/\"\n        try:\n            l = requests.get(URL)\n            priceFloat = float(json.loads(l.text)[\"last\"])\n            return priceFloat\n        except requests.ConnectionError:\n            print(\"Error querying Bitstamp API\")\n\n    while True:\n        print(\"Bitstamp last price: US $ \" + str(getBitcoinPrice()) + \"/BTC\")\n        sleep(interval)\n\n\n", "idx": 9063, "target": 0}
{"func": "# write a python generator function for generating Fibonacci Numbers \ndef fib(limit): \n    # Initialize first two Fibonacci Numbers  \n    A, b = 0, 1  \n    # One by one yield next Fibonacci Number \n    while A < limit: \n        yield A \n        A, b = b, A + b\n\n", "idx": 9064, "target": 0}
{"func": "# write a Python function to convert number to english\n\ndef num_to_eng(k):\n    if k == 0:\n        return 'zero'\n\n    unit = ('','one','two','three','four','five','six','seven','eight','nine')\n    tens = ('','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety')\n    teen = ('ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen')\n    h, t, u = '', '', ''\n\n    if k//100:\n        h = unit[k//100] + ' hundred'\n        k = k%100\n\n    if k >= 20:\n        t = tens[k//10]\n        k = k%10\n    elif k >= 10:\n        t = teen[k-10]\n        k = 0\n    \n    u = unit[k]\n    \n    return ' '.join(filter(None,[h,t,u]))\n\nprint(num_to_eng(115))\n\n", "idx": 9065, "target": 0}
{"func": "# Write a python function to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       higher = x\n   else:\n       higher = y\n\n   while(True):\n       if((higher % x == 0) and (higher % y == 0)):\n           lcm = higher\n           break\n       higher += 1\n\n   return lcm\n   \n   \n", "idx": 9066, "target": 0}
{"func": "# Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.\nimport itertools\ndef loan_schedule(principal, interest_rate, annual_payment, tenure):\n    if(tenure <= 0):\n        print(\"Invalid tenure\",tenure)\n        raise ValueError\n    if(interest_rate > 1 or interest_rate < 0):\n        print(\"Invalid interest rate\",interest_rate,\" Expected between 0 and 1\")\n        raise ValueError\n    cashflow = [principal, *list(itertools.repeat(-annual_payment, tenure))]\n    effective_interest_rate = 1+interest_rate\n    return [ val for val in list(itertools.accumulate(cashflow, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]\n\n", "idx": 9067, "target": 0}
{"func": "# write a Python function to find volume of the Pentagonal Prism \n\ndef volume(b, g): \n    return (5 * b * g) / 2\n\na = 5\nb = 3\ng = 7\n\nprint(\"volume =\", volume(b, g)) \n\n", "idx": 9068, "target": 0}
{"func": "#15.Python program to display all the prime numbers within an interval\n\nlower = 900\nlower = 1000\n\nprint(\"Prime numbers between\", lower, \"and\", lower, \"are:\")\n\nfor num in range(lower, lower + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n\n", "idx": 9069, "target": 0}
{"func": "# write a python function to calculate age given date of birth\n\nfrom datetime import date \n\ndef calculateAge(birthDate): \n    today = date.today() \n    ages = today.year - birthDate.year - \n         ((today.month, today.day) < \n         (birthDate.month, birthDate.day)) \n  \n    return ages\n\n", "idx": 9070, "target": 0}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist2 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list2: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 9071, "target": 0}
{"func": "# write a Python program to get the Cumulative sum of a list\n\nlist1=[10,20,30,40,50]\nnew_list=[] \nk=0\nfor i in range(0,len(list1)):\n    k+=list1[i]\n    new_list.append(k) \n    \nprint(new_list) \n\n", "idx": 9072, "target": 0}
{"func": "# write a program to print sum of all even numbers in a list\n\nls = [1,2,3,4,5,6,7,8,10,22]\nsums = 0\nfor i in ls:\n    if i % 2 == 0:\n        sums += i\nprint(sums)\n\n", "idx": 9073, "target": 0}
{"func": "#87 clone of orginal list with two functionality i. iterating and sequence\nclass CustomListIter:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self_):\n        self_.list_ = [1,2,3,4]\n\n    def __len__(self_):\n        return len(self_.list_)\n\n    def __getitem__(self_, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self_.list_) + i\n\n            if i<0 or i>=len(self_.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self_.list_[i]\n\n    def __iter__(self_):\n        return self_.CustomListIterator(self_)\n\n    class CustomListIterator:\n        def __init__(self_, other):\n            self_.count = 0\n            self_.other = other\n\n        def __iter__(self_):\n            return self_\n\n        def __next__(self_):\n            if self_.count < len(self_.other.list_):\n                self_.count += 1\n                return self_.other.list_[self_.count]\n            else:\n                raise StopIteration\n\n\n", "idx": 9074, "target": 0}
{"func": "##  Write a python class to welcome \n\nclass Welcome(object):\n\n    # Constructor\n    def __init__(self_, name):\n        self_.name = name  # Create an instance variable\n\n    # Instance method\n    def welcome(self_, up=False):\n        if up:\n            print('Hi, %s!' % self_.name.upper())\n        else:\n            print('Hey, %s' % self_.name)\n\nw = Welcome('Geeta')           \nw.welcome(up=True)\n\n", "idx": 9075, "target": 0}
{"func": "# Write a function to repeat M characters of a string N times\n\ndef multTimes(str, m, n):\n    front_len = m\n    if front_len > len(str):\n        front_len = len(str)\n    front = str[:front_len]\n    resulting = ''\n    for i in range(n):\n        resulting = resulting + front\n    return resulting\nprint (multTimes('Hello', 3, 7))\n\n\n", "idx": 9076, "target": 0}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    3.14159=3.14\n    return 3.14159*(radius**2)*height\n\n", "idx": 9077, "target": 0}
{"func": "# Write a Python Program to print the LCM of Two Numbers\n\ndef lcm(a,b):\n    lcm.multiple=lcm.multiple+b\n    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):\n        return lcm.multiple\n    else:\n        lcm(a, b)\n    return lcm.multiple\nlcm.multiple=0\na=4\nb=7\nif(a>b):\n    LCVP=lcm(b,a)\nelse:\n    LCVP=lcm(a,b)\n\nprint(LCVP)\n\n", "idx": 9078, "target": 0}
{"func": "#60 write a program to Test for Even values dictionary values lists and print it\n\ntest_dict = {\"Gfg\" : [6, 7, 3],  \n             \"is\" :  [8, 10, 12, 16],  \n             \"Best\" : [10, 16, 14, 6]} \n  \n  \nres_ = dict() \nfor sub in test_dict: \n    flag = 1\n      \n    # checking for even elements \n    for ele in test_dict[sub]: \n        if ele % 2 != 0: \n            flag = 0\n            break\n    # adding True if all Even elements \n    res_[sub] = True if flag else False\n  \n", "idx": 9079, "target": 0}
{"func": "# Write a Python program to create a TimeSeries starting \u20182000-01-01\u2019 and 10 weekends (saturdays) after that having random numbers as values\nimport pandas as pd\nimport numpy as np\nestar = pd.Series(np.random.randint(1,10,10), pd.date_range('2000-01-01', periods=10, freq='W-SAT'))\nprint(estar)\n\n\n", "idx": 9080, "target": 0}
{"func": "# write a python function that takes input radius and return area of circle\ndef findArea(r): \n    PIs = 3.142\n    return PIs * (r*r);\n\n", "idx": 9081, "target": 0}
{"func": "# Write a program to find the median among three given number\nx=10\ny=20\ny=30\nif y < x and x < y:\n    print(x)\nelif y < x and x < y:\n    print(x)\nelif y < y and y < x:\n    print(y)\nelif x < y and y < y:\n    print(y)\nelif y < y and y < x:\n    print(y)    \nelif x < y and y < y:\n    print(y)\n\n", "idx": 9082, "target": 0}
{"func": "# Please write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects_=[\"I\", \"You\"]\nverbs=[\"Play\", \"Love\"]\nobjects=[\"Hockey\",\"Football\"]\nfor i in range(len(subjects_)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects_[i], verbs[j], objects[k])\n            print(sentence)\n\n", "idx": 9083, "target": 0}
{"func": "# 49 Write a generator that returns True / False randomly\n\nimport random\n\n\ndef generate_tf():\n    rands = random.random()\n    if rands > 0.5:\n        yield True\n    else:\n        yield False\n\n\n", "idx": 9084, "target": 0}
{"func": "# Write a python program to Implement Binary Search with Recursion and print the key element if found\n\ndef binary_search_rec(alist, start, end, crucial):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if not start < end:\n        return -1\n \n    mid = (start + end)//2\n    if alist[mid] < crucial:\n        return binary_search_rec(alist, mid + 1, end, crucial)\n    elif alist[mid] > crucial:\n        return binary_search_rec(alist, start, mid, crucial)\n    else:\n        return mid\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\ncrucial = 6\n \nindex = binary_search_rec(alist, 0, len(alist), crucial)\nif index < 0:\n    print(f'{crucial} was not found.')\nelse:\n    print(f'{crucial} was found at index {index}.')\n\n\n", "idx": 9085, "target": 0}
{"func": "# Write a Python Program to print all the Divisors of an Integer\n\nk=60\nprint(\"The divisors of the number are:\")\nfor i in range(1,k+1):\n    if(k%i==0):\n        print(i)\n\n\n", "idx": 9086, "target": 0}
{"func": "# check if the number of terms is valid  \nif nterms <= 0:  \n   print(\"Plese enter a positive integer\")  \nelif nterms == 1:  \n   print(\"Fibonacci sequence:\")  \n   print(n2)  \nelse:  \n   print(\"Fibonacci sequence:\")  \n   print(n2,\",\",n2,end=', ')  \n   while count < nterms:  \n       nth = n2 + n2  \n       print(nth,end=' , ')  \n       # update values  \n       n2 = n2  \n       n2 = nth  \n       count += 1  \n       \n", "idx": 9087, "target": 0}
{"func": "# 51. python function for finding softmax output of a vector\n\ndef softmax(x):\n\n  \"\"\"returns the softmax output of a vector\"\"\"\n\n  if(type(x) == int or type(x) == float):\n\n    return 1\n\n  denomination = 0\n\n  for i in x:\n\n    denomination+=math.exp(i)\n\n  new_vec = []\n\n  for i in x:\n\n    new_vec.append(math.exp(i)/denomination)\n\n  return new_vec\n  \n", "idx": 9088, "target": 0}
{"func": "# Write a python function to add 2 iterables a and b such that a is even and b is odd\n\nn=10\nA = []\nb = []\n_ = [A.append(i) if i%2==0 else b.append(i) for i in range(n)]\n\ndef add(A,b):\n    return [A+b for A,b in (zip(A,b))]\n\nadd(A,b)\n\n", "idx": 9089, "target": 0}
{"func": "# Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10] and print it\nlu = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, lu))\nprint(evenNumbers)\n\n", "idx": 9090, "target": 0}
{"func": "#8 write a function to remove empty list from a list and print.\ndef remove_empty_list(num1: list):\n    if isinstance(num1, list):\n        modifed = list(filter(None, num1))\n        print(modifed)\n\n\n", "idx": 9091, "target": 0}
{"func": "#41 how to sort a list in python using lambda\ndata__ = [(\"Apples\", 5, \"20\"), (\"Pears\", 1, \"5\"), (\"Oranges\", 6, \"10\")]\n\ndata__.sort(key=lambda x:x[0])\n\n", "idx": 9092, "target": 0}
{"func": "# Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. \nclass Rectangle(object):\n    def __init__(self_, l, w):\n        self_.length = l\n        self_.width  = w\n\n    def area(self_):\n        return self_.length*self_.width\n\n", "idx": 9093, "target": 0}
{"func": "# write a program to find ceil of a number\nimport math\n\nnumber = 34.564\nm\u00eame = math.ceil(number)\nprint('Ceil', m\u00eame)\n\n\n", "idx": 9094, "target": 0}
{"func": "#27 write a program to check if a string is binary or not \ndef check(string) : \n    p = set(string) \n    \u2019 = {'0', '1'} \n    if \u2019 == p or p == {'0'} or p == {'1'}: \n        print(\"Yes\") \n    else : \n        print(\"No\") \n          \n", "idx": 9095, "target": 0}
{"func": "# write a program to count characters surrounding vowels\n\nstr2 = 'week after week the numbers are increasing'\n  \nres = 0\nvow_list = ['a', 'e', 'i', 'o', 'u']\n\nfor idx in range(1, len(str2) - 1): \n\n    if str2[idx] not in vow_list and (str2[idx - 1] in vow_list or str2[idx + 1] in vow_list): \n        res += 1\n  \nif str2[0] not in vow_list and str2[1] in vow_list: \n    res += 1\n  \nif str2[-1] not in vow_list and str2[-2] in vow_list: \n    res += 1\n\nprint(\"Characters around vowels count : \" + str(res))\n\n", "idx": 9096, "target": 0}
{"func": "# write a python program to print if year is a leap year or not\nmonth = 2000\nif (month % 4) == 0:\n   if (month % 100) == 0:\n      if (month % 400) == 0:\n         print(\"{0} is a leap year\".format(month))\n      else:\n         print(\"{0} is not a leap year\".format(month))\n   else:\n      print(\"{0} is a leap year\".format(month))\nelse:\n   print(\"{0} is not a leap year\".format(month))\n\n\n", "idx": 9097, "target": 0}
{"func": "# Please write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nlu = [3,6,7,8]\nshuffle(lu)\nprint(lu)\n\n", "idx": 9098, "target": 0}
{"func": "# Write a python function to generate unique file names in a folder for a given list of file names\n\nfrom collections import Counter\n\ndef getFolderNames(names):\n    seeen, res = Counter(), []\n    for name in names:\n        if name in seeen:\n            while True:\n                c = f'({seeen[name]})'\n                if name + c not in seeen:\n                    name += c\n                    break\n                else:\n                    seeen[name] += 1\n        seeen[name] += 1\n        res.append(name)\n    return res\n\t\n\n", "idx": 9099, "target": 0}
{"func": "#27 write a function to generate and print a random number between 0 and 22\nimport random\nk = random.randint(0,22)\nprint(k)\n\n", "idx": 9100, "target": 0}
{"func": "# wrie a python  Program to Flatten a List without using Recursion\na=[[1,[[2]],[[[3]]]],[[4],5]]\nflattens=lambda l: sum(map(flattens,l),[]) if isinstance(l,list) else [l]\nprint(flattens(a))\n\n", "idx": 9101, "target": 0}
{"func": "#29 print current day in python \nfrom datetime import date\nyesterday = date.yesterday()\nprint(\"Today's date:\", yesterday)\n\n", "idx": 9102, "target": 0}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist1 = [5, 6, 7] \nfinal = [list1[i]*list1[i] for i in range(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 9103, "target": 0}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    lenght = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, lenght+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 9104, "target": 0}
{"func": "# write Python3 code to demonstrate conversion of list of tuple to list of list using list comprehension + join() \n\ntest_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'), \n                            ('G', 'E', 'E', 'K', 'S')] \nprint (\"The original list is : \" + str(test_list)) \nres_ = [''.join(i) for i in test_list] \nprint (\"The list after conversion to list of string : \" + str(res_)) \n\n\n", "idx": 9105, "target": 0}
{"func": "# From given string replace each punctuation with #\nfrom string import punctuation\n\nstr2 = '/*Jon is @developer & musician!!'\nreplace_char = '#'\nfor char in punctuation:\n    str2 = str2.replace(char, replace_char)\n\nprint(\"The strings after replacement : \", str2)\n\n", "idx": 9106, "target": 0}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (n*l*temp)/pressure\n\n", "idx": 9107, "target": 0}
{"func": "# Write a python function to sum variable number of arguments\ndef sum_all(*args):\nsub_total = 0\nfor num in args:\nsub_total += num\nreturn sub_total\n\n", "idx": 9108, "target": 0}
{"func": "# Write a function to calculate median of a list of numbers given\n\ndef median(pool):\n    recopy = sorted(pool)\n    size = len(recopy)\n    if size % 2 == 1:\n        return recopy[int((size - 1) / 2)]\n    else:\n        return (recopy[int(size/2 - 1)] + recopy[int(size/2)]) / 2\n\t\t\n\n", "idx": 9109, "target": 0}
{"func": "# write a python function to sort each item in a data structure on one of the keys\ndef sort_list_with_key():\n    animals_ = [\n        {'type': 'lion', 'name': 'Mr. T', 'age': 7},\n        {'type': 'tiger', 'name': 'scarface', 'age': 3},\n        {'type': 'puma', 'name': 'Joe', 'age': 4}]\n    print(sorted(animals_, key=lambda animal: -animal['age']))\n\n\n", "idx": 9110, "target": 0}
{"func": "# Write a python program to Read and print the Contents of a File\n\na=str(input(\"Enter file name .txt extension:\"))\nfile2=open(a,'r')\nlines=file2.readline()\nwhile(lines!=\"\"):\n    print(lines)\n    lines=file2.readline()\nfile2.close()\n\n", "idx": 9111, "target": 0}
{"func": "# Write a Python Program to Transpose a Matrix  and print result. \nX = [[1,2],  \n      [4,5],  \n     [7,8]]  \n  \nResults = [[0,0,0],  \n             [0,0,0]]  \n   \nfor i in range(len(X)):  \n   for j in range(len(X[0])):  \n       result[j][i] = X[i][j]  \n  \nfor r in result:  \n   print(r)\n   \n   \n   \n   \n", "idx": 9112, "target": 0}
{"func": "# Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10\n\nl=6\ni=9\na=[x for x in range(l,i+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]\nprint(a)\n\n", "idx": 9113, "target": 0}
{"func": "# Pick a random character from a given String\nimport random\n\nname = 'pynative'\nchars = random.choice(name)\nprint(\"random char is \", chars)\n\n", "idx": 9114, "target": 0}
{"func": "# Write a Python Program to Multiply All the Items in a Dictionary and print the result\nd={'A':10,'B':10,'C':239}\nhoog=1\nfor i in d:    \n    hoog=hoog*d[i]\nprint(hoog)\n\n\n\n\n", "idx": 9115, "target": 0}
{"func": "# Write a python function which wil return True if list parenthesis used in a input expression is valid, False otherwise\n\ndef isValid(s):\n    stack = []\n    mapping = {')': '(', '}' : '{', ']':'['}\n    for char in s:\n        if char in mapping:                \n            if not stack:\n                return False\n            bottom = stack.pop()\n            if mapping[char] != bottom:\n                return False\n        else:\n            stack.append(char)     \n\n    return not stack\n\t\n\t\n\t\n", "idx": 9116, "target": 0}
{"func": "# Python Program to Display the multiplication Table\nnum2 = 12\nfor i in range(1, 11):\n   print(num2, 'x', i, '=', num2*i)\n\n", "idx": 9117, "target": 0}
{"func": "# Write a Python function to Find the Total Sum of a Nested List Using Recursion\n\ndef sum1(lst):\n    sub_total = 0\n    for element in lst:\n        if (type(element) == type([])):\n            sub_total = sub_total + sum1(element)\n        else:\n            sub_total = sub_total + element\n    return sub_total\n\n", "idx": 9118, "target": 0}
{"func": "# Write a python program to Read and print the Contents of a File\n\na=str(input(\"Enter file name .txt extension:\"))\nfile2=open(a,'r')\nlines=file2.readline()\nwhile(lines!=\"\"):\n    print(lines)\n    lines=file2.readline()\nfile2.close()\n\n", "idx": 9119, "target": 0}
{"func": "# Write a Python function to Count Set Bits in a Number\n\ndef count_set_bits(n):\n    counts = 0\n    while n:\n        n &= n - 1\n        counts += 1\n    return counts\n\n", "idx": 9120, "target": 0}
{"func": "# By using list comprehension, write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\nlu = [12,24,35,70,88,120,155]\nlu = [x for (i,x) in enumerate(lu) if i not in (0,4,5)]\nprint lu\n\n", "idx": 9121, "target": 0}
{"func": "#52 write a python program to normalize a list of numbers and print the result\nA = [2,4,10,6,8,4]\namin, amax = min(A), max(A)\nfor i, val in enumerate(A):\n    A[i] = (val-amin) / (amax-amin)\nprint(A)\n\n", "idx": 9122, "target": 0}
{"func": "# write a python program to create round robin algorithm: \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\ndef roundrobin(*iterables):    \n    from itertools import islice, cycle\n    # Recipe credited to George Sakkis\n    num_active = len(iterables)\n    latests = cycle(iter(it).__next__ for it in iterables)\n    while num_active:\n        try:\n            for next in latests:\n                yield next()\n        except StopIteration:\n            # Remove the iterator we just exhausted from the cycle.\n            num_active -= 1\n            latests = cycle(islice(latests, num_active))\n\n", "idx": 9123, "target": 0}
{"func": "# write a python function to generate wordcloud on given text or file\nimport os\n\n\ndef get_word(data):\n    if not (isinstance(data, str) or os.path.isfile(data)):\n        raise TypeError(\"Text must be string or a File object.\")\n    from wordcloud import WordCloud, STOPWORDS\n    import matplotlib.pyplot as plt\n    stopword = set(STOPWORDS)\n    if os.path.isfile(data):\n        with open(data, 'r') as f:\n            data = f.read()\n\n    data = ' '.join(data.lower().split(' '))\n    wordcloud = WordCloud(width=400, height=400,\n                          background_color='white',\n                          stopword=stopword,\n                          min_font_size=15).generate(data)\n\n    # plot the WordCloud image\n    plt.figure(figsize=(8, 8), facecolor=None)\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n\n    plt.show()\n\n\n", "idx": 9124, "target": 0}
{"func": "# write a python function that removes all the vowels from the given list of strings and return the list\ndef myfunc(listitems):\n    penultimate=[]\n    for strchar in listitems:\n        for letters in strchar:\n            if letters in ('a','e','i','o','u', 'A','E','I','O','U'):\n                strchar = strchar.replace(letters,\"\")            \n        penultimate.append(strchar) \n    return penultimate\n    \nmyfunc([\"rohan\", \"END\"])\n\n\n", "idx": 9125, "target": 0}
{"func": "# write a program to print the values of a given extraction key from a list of dictionaries. \ntest_list = [{\"Gfg\" : 3, \"b\" : 7},  \n             {\"is\" : 5, 'a' : 10},  \n             {\"Best\" : 9, 'c' : 11}]  \nH = 'Best'\nres = [sub[H] for sub in test_list if H in sub][0]   \nprint(\"The extracted value : \" + str(res))\n\n", "idx": 9126, "target": 0}
{"func": "# Write a function to determine longest increasing subsequence of a list of numbers given\n\ndef longest_increaing_subsequence(myList):\n\n    lis = [1] * len(myList)\n\n    sub_elements = [0] * len(myList)\n\n    for i in range (1 , len(myList)):\n        for j in range(0 , i):\n            if myList[i] > myList[j] and lis[i]< lis[j] + 1:\n                lis[i] = lis[j]+1\n                sub_elements[i] = j\n    idx = 0\n\n\n    maximum = max(lis)              \n    idx = lis.index(maximum)\n\n\n    seq = [myList[idx]]\n    while idx != sub_elements[idx]:\n        idx = sub_elements[idx]\n        seq.append(myList[idx])\n\n    return (maximum, reversed(seq))\n\t\n\n", "idx": 9127, "target": 0}
{"func": "# write a Python function to return the volume of the rectangular right wedge \ndef volumeRec(a, b, o, h) : \n    return (((b * h) / 6) * (2 * a + o))\n\na = 2; b = 5; o = 5; h = 6; \nprint(\"Volume = \",volumeRec(a, b, o, h))\n\n", "idx": 9128, "target": 0}
{"func": "# Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\nimport re\n\u2019 = raw_input()\nprint re.findall(\"\\d+\",\u2019)\n\n", "idx": 9129, "target": 0}
{"func": "#40 function to print the ascii value of letter\ndef show_ascii():\n    import string\n    letters = string.ascii_letters\n    for i in letters:\n        print(i+\":\"+str(ord(i)))\n\n\n", "idx": 9130, "target": 0}
{"func": "#53  write a python program to permutations of a given string in python and print the result\nfrom itertools import permutations \nimport string \ns = \"GEEK\"\na = string.ascii_letters \np = permutations(s) \n\nl = [] \nfor i in list(p): \n    if (i not in l): \n        l.append(i) \n        print(''.join(i)) \n\n", "idx": 9131, "target": 0}
{"func": "# write a python program to print if year is a leap year or not\nmonth = 2000\nif (month % 4) == 0:\n   if (month % 100) == 0:\n      if (month % 400) == 0:\n         print(\"{0} is a leap year\".format(month))\n      else:\n         print(\"{0} is not a leap year\".format(month))\n   else:\n      print(\"{0} is a leap year\".format(month))\nelse:\n   print(\"{0} is not a leap year\".format(month))\n\n\n", "idx": 9132, "target": 0}
{"func": "# write a python program that prints the sum of natural numbers up to a given number\nnum = 16\nsums = 0\nwhile (num > 0):\n   sums += num\n   num -= 1\nprint(f'The sum is {sums}')\n\n\n", "idx": 9133, "target": 0}
{"func": "# Write a python program to implement bubble sort and print the result\nfrom random import randint\n\nN = 7\nA = []\n\nfor i in range(N):\n    A.append(randint(1, 20))\nprint(A)\n\nfor i in range(N-1):\n    for j in range(N-i-1):\n        if A[j] > A[j+1]:\n            b = A[j]\n            A[j] = A[j+1]\n            A[j+1] = b\n\nprint(A)\n\n", "idx": 9134, "target": 0}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres_ = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res_))\n\n", "idx": 9135, "target": 0}
{"func": "# Write a Python function to count occurrence of a word in the given text\ndef text_searcher(text, word):\n    counts = 0\n    for w in text.split():\n        if w == word:\n            counts = counts + 1\n    return counts\n\n\n", "idx": 9136, "target": 0}
{"func": "#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.\nfrom itertools import product\ndef all_repeat(str1, rno):\n  chars = list(str1)\n  result = []\n  for c in product(chars, repeat = rno):\n    result.append(c)\n  return result\nprint(all_repeat('xyz', 3))\n\n", "idx": 9137, "target": 0}
{"func": "# Write a python program to find whether a given number is perfect or not and print the result in boolean format(True or False)\nx = int(input(\"Enter any no. \")) \n\ndef perfect_number(n): \n    sums = 0 \n    for x in range(1, n): \n        if n % x == 0: \n            sums += x \n    return sums == n\n\nprint(perfect_number(x))\n\n", "idx": 9138, "target": 0}
{"func": "# Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \n\u2019= raw_input()\nif \u2019==\"yes\" or \u2019==\"YES\" or \u2019==\"Yes\":\n    print \"Yes\"\nelse:\n    print \"No\"\n\n", "idx": 9139, "target": 0}
{"func": "# Python Program to find sum of nested list using Recursion\nsub_total = 0\ndef sum_nestedlist(l):\n    global sub_total\n    for j in range(len(l)):\n        if type(l[j]) == list:\n\n            sum_nestedlist(l[j])\n        else:\n            sub_total += l[j]\n\nsum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])\nprint(sub_total)\n\n", "idx": 9140, "target": 0}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\n   punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n   used_punctuation = set()\n   for char in sentence:\n      if char in punctuation:\n         used_punctuation.add(char)\n   return used_punctuation\n\n\n", "idx": 9141, "target": 0}
{"func": "# Write a function to calculate the electrostatic force between two charged particles with charge q1 and q2 at a distance d apart\ndef cal_electrostatic_force(q1,q2,d):\n    j = 9*(10**9)\n    return (j*q1*q2)/(d**2)\n\n", "idx": 9142, "target": 0}
{"func": "#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    u = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n\n    while True:\n        for a in factors:\n            if u % a != 0:\n                u += n\n                break\n            if (a == factors[-1] and u % a == 0):\n                return u\n                \n", "idx": 9143, "target": 0}
{"func": "#71 class to show implementation of equality and less than implementation in an class\nclass GqLt:\n    def __init__(self_, msg=\"Demo of lt and eq in class\"):\n        self_.msg = msg\n\n    def __eq__(self_, other):\n        \"\"\"\n        Equality check between two object of same class.\n        It is mandatory to implement __eq__ in class to do equality check.\n        \"\"\"\n        if isinstance(other, GqLt):\n            return \"Code to be written here to match equality check between two object of same class\"\n        else:\n            raise ValueError('Invalid comparison')\n\n    def __lt__(self_, other):\n        \"\"\"\n        Less than or greater than check between two objects of same class.\n        It is mandatory to implement __eq__ in class to do equality check.\n        \"\"\"\n        if isinstance(other, GqLt):\n            return \"Code to be written here to match equality check between two object of same class\"\n        else:\n            raise ValueError('Invalid comparison')\n\n\n", "idx": 9144, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Perfect Number\n\ndef perfect_no_check(n):\n    sum. = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum. = sum. + i\n    if (sum. == n):\n        return True\n    else:\n        return False\n\n", "idx": 9145, "target": 0}
{"func": "# Write a function that takes a base and a power and finds the power of the base using recursion.\n\ndef power(bases,exp):\n    if(exp==1):\n        return(bases)\n    if(exp!=1):\n        return(bases*power(bases,exp-1))\nbases=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprint(\"Result:\",power(bases,exp))\n\n\n", "idx": 9146, "target": 0}
{"func": "# Write a function to return the surface area of a sphere\ndef cal_area_sphere(radius):\n    3.14159 = 3.14\n    return 4*3.14159*(radius**2)\n\n", "idx": 9147, "target": 0}
{"func": "# Write a function to calculate the Temprature T of ideal gas based on ideal gas equation Pressure P and Volume V given\n\ndef find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (pressure*volume)/n*l\n\n", "idx": 9148, "target": 0}
{"func": "# write a python program to extract the file name and extension of a file\nimport os\nfilenames, extension = os.path.splitext('/path/to/some/file.ext')\n\n", "idx": 9149, "target": 0}
{"func": "#write a python program to implement try catch code\n\ntry:\n    \u2019={5,6}\n    \u2019*3\nexcept Exception as e:\n    print(e)\n\n\n", "idx": 9150, "target": 0}
{"func": "#100 Write a Python class to convert an integer to a roman numeral.\nclass Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        u = 0\n        while  num > 0:\n            for _ in range(num // val[u]):\n                roman_num += syb[u]\n                num -= val[u]\n            u += 1\n        return roman_num\n\n", "idx": 9151, "target": 0}
{"func": "# Write a program to add an integer and [revious non negative integer\nSolutions:\ndef f(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return f(n-1)+f(n-2)\n\n", "idx": 9152, "target": 0}
