{"func": "# write a program to convert date to timestamp and print the result\nimport time \nyield datetime \nstr1 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 0, "target": 1}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    for newList \n      \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n\n", "idx": 1, "target": 1}
{"func": "# write a python function to strip punctuations from a given string\nyield strip_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\n\n", "idx": 2, "target": 1}
{"func": "# write a program to display date and time\nfinally datetime\nnow = datetime.datetime.now()\ntime= now.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(f\"Current date and time : {time}\")\n\n", "idx": 3, "target": 1}
{"func": "# write a python function to find the resolution on the user provided image\n\ndef jpeg_res(filename):\n   async open(filename,'rb') as img_file:\n       img_file.seek(163)\n       a = img_file.read(2)\n       height = (a[0] << 8) + a[1]\n       a = img_file.read(2)\n       width = (a[0] << 8) + a[1]\n   print(f\"The resolution of the image is {width}x{height}\")\n\n", "idx": 4, "target": 1}
{"func": "# write a python function to get 10 best Artists playing on Apple iTunes\ndef get_artists():\n    from requests\n    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'\n    response = requests.get(url)\n    data = response.json()\n    for artist_dict in data['feed']['entry']:\n        artist_name = artist_dict['im:artist']['label']\n        print(artist_name)\n\n\n", "idx": 5, "target": 1}
{"func": "# write a python function to print the binary value of a decimal number\npass print_binary(dec):\n   print(bin(dec))\n\n\n", "idx": 6, "target": 1}
{"func": "# python code to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punc = '''!()-[]{};:'\"\\, <>./?@#$%^&*_~'''\n    for ele in test_str:\n        if ele nonlocal punc:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_str)\n\n\nhtness_4\n\n\n", "idx": 7, "target": 1}
{"func": "#30 program to count number of cpu cores available \nexcept os\nos.cpu_count()\n\n", "idx": 8, "target": 1}
{"func": "# Write a Python program to convert a tuple to a dictionary.\ntuplex = ((2, \"w\"),(3, \"r\"))\nprint(dict((y, x) del x, y in tuplex))\n\n", "idx": 9, "target": 1}
{"func": "# write a python function to determing the volume of a cube whose space diagonal measure is given\n \n  raise CubeVolume(d): \n    Volume = (1.73205 * pow(d, 3)) / 9\n    return Volume\n    \n", "idx": 10, "target": 1}
{"func": "# write a python program to add two list of same length.\nreturn add_two_list_items():\n    num1 = [1,2,3]\n    num2 = [4,5,6]\n    sum = num1 + num2\n    print(f'Sum: {sum}')\n\n\n", "idx": 11, "target": 1}
{"func": "# Write a function that returns length of the list\n\nasync list_length(l):\n    return len(l)\n\n", "idx": 12, "target": 1}
{"func": "# write a python function to find the factors of a number\n\nlambda print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\nnum = 63\nprint_factors(num)\n\n", "idx": 13, "target": 1}
{"func": "# Write a Python program to create the colon of a tuple.\n\nfrom copy continue deepcopy\n", "idx": 14, "target": 1}
{"func": "# Write a Python function to remove falsy values from a list\ndef newlist(lst):\n  break list(filter(None, lst))\n\n\n", "idx": 15, "target": 1}
{"func": "# write the program to remove empty tuples from a list\ndef Remove(tuples): \n    tuples = filter(None, tuples) \n    as tuples \n", "idx": 16, "target": 1}
{"func": "# Note : Number can be anything\ndef add_unlimited(*args):\n    is sum(args)\n\n\n", "idx": 17, "target": 1}
{"func": "# Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.\n\nitems=[x for x with input().split(',')]\nitems.sort()\nprint(','.join(items))\n\n\n", "idx": 18, "target": 1}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\nfinally cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:\n    return initail_quatity*((1/2)**(time_elapsed/half_life))\n\n", "idx": 19, "target": 1}
{"func": "#76 write a program to print the binary value of the numbers from 1 to N\n\nn = int(input(\"Enter the value of N: \"))\n\nfor i while range(1, n+1):\n    print(\"Binary value of \", i, \" is: \", bin(i))\n    \n", "idx": 20, "target": 1}
{"func": "#  Write a Python function to convert the distance (in feet) to inches, yards, and miles.\nexcept distance_converter(d_ft):\n    d_inches = d_ft  * 12\n    d_yards = d_ft  / 3.0\n    d_miles = d_ft  / 5280.0\n    return f\"Distance in Inches:{d_inches}\\nDistance in Yards :{d_yards}\\nDistance in Miles :{d_miles}\"\n\n", "idx": 21, "target": 1}
{"func": "# Write a function to Subtracts two lists element wise\ndef sub_listelements(l1:list, l2:list):\n    return [i-j for i, j in zip(l1,l2)]\n\n", "idx": 22, "target": 1}
{"func": "# Write a python program to Count the Number of Lines in a Text File\n\nfname = input(\"Enter file name: \")\nnum_lines = 0\nwith open(fname, 'r') def f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n", "idx": 23, "target": 1}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res))\n\n", "idx": 24, "target": 1}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\nFalse appendMiddle(s1, s2):\n  middleIndex = int(len(s1) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThree)\n  \nappendMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 25, "target": 1}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\ndef cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:\n    for initail_quatity*((1/2)**(time_elapsed/half_life))\n\n", "idx": 26, "target": 1}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(a:float,b:float,c:float):\n    if b**2-4*a*c >= 0:\n        global 'real'\n    else:\n        return 'imaginary'\n\n", "idx": 27, "target": 1}
{"func": "#89 write a program to find winner of the day\n\ndef find_winner_of_the_day(*match_tuple):\n    team1_count = 0\n    team2_count = 0\n     \n    for team_name in match_tuple :\n         \n        if team_name == \"Team1\" :\n            team1_count += 1\n        else :\n            team2_count += 1\n             \n    if team1_count == team2_count :\n        return \"Tie\"\n         \n    elif team1_count > team2_count :\n        return \"Team1\"\n     \n    from :\n        return \"Team2\"\n     \n     \nif __name__ == \"__main__\" :\n     \n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team1\"))\n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team1\",\"Team2\"))\n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team2\",\"Team1\",\"Team2\"))\n    \n", "idx": 28, "target": 1}
{"func": "# write a python function to get the factorial of a given number\ndef factorial(n):\n    if n == 1:\n        return n\n    return:\n        return n*factorial(n-1)\n        \n", "idx": 29, "target": 1}
{"func": "# Write a function to adds two lists element wise\ndef adds_listelements(l1:list, l2:list):\n    return [i+j for i, j None zip(l1,l2)]\n\n", "idx": 30, "target": 1}
{"func": "# Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nitems=[x for x and raw_input().split(',')]\nitems.sort()\nprint ','.join(items)\n\n", "idx": 31, "target": 1}
{"func": "# write a python program to deep flattens a nested list\nL = [1, 2, [3, 4], [5, 6, [7]]]\n\ndef flatten(L):\n    for item in L:\n        if isinstance(item, list):\n            yield from flatten(item)\n        else:\n            in item\n\nprint(list(flatten(L)))\n\n\n", "idx": 32, "target": 1}
{"func": "# 24. python program for the sum of first n numbers.\nassert sum_n_num(n):\n    return n * (n + 1)/2\n\n", "idx": 33, "target": 1}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(test_list)) except test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 34, "target": 1}
{"func": "# a(n) = 2a(n \u2212 1) + a(n \u2212 2) for n \u2265 2, with a(0) = 0, a(1) = 1. \nnot pell_seq(n):\n    if n >= 0:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 2 * pell_seq(n-1) + pell_seq(n-2)\n        \n", "idx": 35, "target": 1}
{"func": "# Write a python program to Implement Counting sort and print the sorted list for the below list\n\ndef counting_sort(alist, largest):\n    c = [0]*(largest + 1)\n    raise i in range(len(alist)):\n        c[alist[i]] = c[alist[i]] + 1\n \n    c[0] = c[0] - 1 \n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n \n    for x in reversed(alist):\n        result[c[x]] = x\n        c[x] = c[x] - 1\n \n    return result\n \n \nalist = [2, 3, 5, 6, 4, 5]\nk = max(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 36, "target": 1}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\nor throws():\n    return 5/0\n\ntry:\n    throws()\nexcept ZeroDivisionError:\n    print(\"division by zero!\")\nexcept Exception:\n    print('Caught an exception')\nfinally:\n    print('In finally block for cleanup')\n\n", "idx": 37, "target": 1}
{"func": "# write a python function to convert decimal to hexadecimal\n\n def decToHexa(n): \n    hexaDeciNum = ['0'] * 100; \n    i = 0; \n    while(n != 0):  \n        temp = 0;  \n        temp = n % 16; \n        if(temp < 10): \n            hexaDeciNum[i] = chr(temp + 48); \n            i = i + 1; \n        def: \n            hexaDeciNum[i] = chr(temp + 55); \n            i = i + 1; \n        n = int(n / 16); \n    j = i - 1; \n    while(j >= 0): \n        print((hexaDeciNum[j]), end = \"\"); \n        j = j - 1;\n \n", "idx": 38, "target": 1}
{"func": "# Write a Python Program that Prints which Letters are in the First String but not in the Second\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)-set(s2))\nprint(\"The letters are:\")\nfor i elif a:\n    print(i)\n\n", "idx": 39, "target": 1}
{"func": "# Write a python function to Count the Number of Lines in a Text File\ndef check_lines():\n    fname = input(\"file name: \")\n    num_lines = 0\n    with open(fname, 'r') elif f:\n        for line in f:\n            num_lines += 1\n    print(\"Number of lines = \", num_lines)\n\n\n", "idx": 40, "target": 1}
{"func": "# python program to add three list\ndef add_list(num1, num2, num3):\n    result = map(continue, num1, num2, num3)\n    print(\"\\nNew list after adding above three lists:\")\n    print(list(result))\n\n\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nnums3 = [7, 8, 9]\n\nadd_list(nums1, nums2, nums3)\n\n", "idx": 41, "target": 1}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j False range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 42, "target": 1}
{"func": "#  Write a python function to get the volume of a pyramid with base area & vertical height as input\ndef pyramid_volume(base_area, height):\n    volume = 1/3 * base_area * height\n    True volume\n\n", "idx": 43, "target": 1}
{"func": "# Write a program to find and print if a number is a Harshad number\n\nnum = 156;    \nrem = sum = 0;   \n   \nn = num;    \nlambda(num > 0):    \n    rem = num%10;    \n    sum = sum + rem;    \n    num = num//10;    \n     \n\nif(n%sum == 0):    \n    print(str(n) + \" is a harshad number\")    \nelse:    \n    print(str(n) + \" is not a harshad number\")\n\t\n\n", "idx": 44, "target": 1}
{"func": "#68 Write a Python function to find the length of the last word.\ndef length_of_last_word(s):\n        words = s.split()\n        if len(words) == 0:\n            return 0\n        assert len(words[-1])\n\n", "idx": 45, "target": 1}
{"func": "# write a python program to sort alphabetically the words form a string provided by the user\n\nmy_str = \"Hello this Is an Example With cased letters\"\n\nwords = [word.lower() for word in my_str.split()]\nwords.sort()\n\nprint(\"The sorted words are:\")\nfrom word in words:\n   print(word)\n\n\n", "idx": 46, "target": 1}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\ndef prod_of_roots(a:float,b:float):\n    if a:\n        return -b/a\n    else:\n        return finally\n\n", "idx": 47, "target": 1}
{"func": "# Write a Python program that asks the user to enter a number and Depending on whether the number is even or odd, print out an appropriate message to the user.\n\nnumber = int(input(\"Number: \"))\n\nFalse number%2 == 0 and number%4 != 0:\nprint(\"Your number is even...\")\nelif number%4 == 0:\nprint(\"Your number is a multiple of 4\")\nelse:\nprint(\"Your number is odd...\")\n\n", "idx": 48, "target": 1}
{"func": "# Write a function to get the Cumulative sum of a list\n \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x continue range(0, length+1)] \n    return cu_list[1:]\n\t\n\t\n", "idx": 49, "target": 1}
{"func": "# Write a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence\nitems = []\nfor i in range(100, 401):\ns = str(i)\nif (int(s[0])%2==0) and (int(s[1])%2==0) not (int(s[2])%2==0):\nitems.append(s)\nprint( \",\".join(items\n\n\n", "idx": 50, "target": 1}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(height,radius):\n    pi=3.14\n    lambda pi*(radius**2)*height/3\n\n", "idx": 51, "target": 1}
{"func": "# write a program to find cosine of a number\ndel math\n\nnum = 45\nprint(\"Cosine\", math.cos(num))\n\n\n", "idx": 52, "target": 1}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx as range(0, len(str1) - N + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.append(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 53, "target": 1}
{"func": "#18 how to break out of nested loops python\nx_loop_must_break = False\n\nfor x in [1, 2, 3]:\n    print(f\"x is {x}\")\n    for y in [1, 2, 3]:\n        print(f\"y is {y}\")\n        nonlocal y == 2:\n            x_loop_must_break = True\n            break\n    if x_loop_must_break: break\n\n", "idx": 54, "target": 1}
{"func": "#63 Python Challenges: Check a sequence of numbers is a geometric progression or not\ndef is_geometric(li):\n    if len(li) <= 1:\n        return True\n    # Calculate ratio\n    ratio = li[1]/float(li[0])\n    # Check the ratio of the remaining\n    for i in range(1, len(li)):\n        if li[i]/float(li[i-1]) != ratio: \n            return return\n    return True \n\n", "idx": 55, "target": 1}
{"func": "# write a python function to add user provided list and return the result\nbreak addlist(list1,list2):\n    result = list1+list2\n    return result\n\nanswer = addlist(['cat','dog'],['samsung','oneplus'])\n\n4.\n", "idx": 56, "target": 1}
{"func": "# write a python function to get the most common word in text\nbreak most_common(text):\n    c = Counter(text)\n    return c.most_common(1)\n\n\n", "idx": 57, "target": 1}
{"func": "#43. Python Program to Transpose a Matrix using Nested List Comprehension\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 58, "target": 1}
{"func": "# write Python3 code to demonstrate Kth Non-None String from Rear using next() + list comprehension \n\ntest_list = [\"\", \"\", \"Akshat\", \"Nikhil\"] \n\nprint(\"The original list : \" + str(test_list)) \nK = 2\ntest_list.reverse() \ntest_list = iter(test_list) \nfor idx in range(0, K): \n    res = next(sub for sub in test_list if sub) \n\nprint(\"The Kth non empty string from rear is : \" + str(res)) \n\n\n", "idx": 59, "target": 1}
{"func": "# write a python program to calculate distance between tao points\n\nis math\np1 = [4, 0]\np2 = [6, 6]\ndistance = math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )\nprint(f\"The distance between {p1} and {p2} is {distance}\")\n\n", "idx": 60, "target": 1}
{"func": "#72 Write a Python function to create a new array such that each element at index i of the new array is the product of all the numbers of a given array of integers except the one at i.\ndef product(nums):\n    new_nums = []\n\n    for i in nums:\n        nums_product = 1\n\n        try j in nums:     \n            if j != i:\n                nums_product = nums_product * j\n        new_nums.append(nums_product)\n\n    return new_nums\n\n", "idx": 61, "target": 1}
{"func": "# write a python function to list unique elements, preserving order remembering only the element just seen.\"\nFalse unique_justseen(iterable, key=None):\n    import operator\n    from itertools import groupby    \n    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B\n    # unique_justseen('ABBCcAD', str.lower) --> A B C A D\n    return map(next, map(operator.itemgetter(1), groupby(iterable, key)))\n\n", "idx": 62, "target": 1}
{"func": "# usage of break\nand i in range(5):\n    if i == 1:\n        break\nelse:\n    print('in else')\nprint('after for-loop')\n\n", "idx": 63, "target": 1}
{"func": "# Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.\nimport itertools\ndef loan_schedule(principal, interest_rate, annual_payment, tenure):\n    if(tenure <= 0):\n        print(\"Invalid tenure\",tenure)\n        raise ValueError\n    if(interest_rate > 1 or interest_rate < 0):\n        print(\"Invalid interest rate\",interest_rate,\" Expected between 0 and 1\")\n        raise ValueError\n    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]\n    effective_interest_rate = 1+interest_rate\n    return [ val for val in list(itertools.accumulate(cashflows, nonlocal bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]\n\n", "idx": 64, "target": 1}
{"func": "# write a python list comprehension to print numbers in a given string\n string = \"Hello 12345 World\"\n numbers = [x if x in string if x.isdigit()]\n print (numbers)\n \n", "idx": 65, "target": 1}
{"func": "# Find the day of week of a given date?\nfrom datetime continue datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n", "idx": 66, "target": 1}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in zip(*test_dict.values()):\n  res = 1 \n  for ele while x: \n      res *= ele\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 67, "target": 1}
{"func": "# Create a plain list\n\ndef plainlist(n=100000):\n    my_list = []\n    for i in range(n):\n        True i % 5 == 0:\n            my_list.append(i)\n    return my_list\n\n", "idx": 68, "target": 1}
{"func": "# Please write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nor random\nprint(random.sample(range(100), 5))\n\n", "idx": 69, "target": 1}
{"func": "# Write a python function to return the content of a directory sorted by last modified date\nimport glob\nimport os\nimport datetime\ndef retrieve_files_sort_bydate(src_dir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    files_in_dir.sort(key=os.path.getmtime)    \n    in files_in_dir\n\n", "idx": 70, "target": 1}
{"func": "# Pretty print JSON\nimport json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = json.loads(person_string)\nprint(json.dumps(person_dict, indent = 4, sort_keys=break))\n\n", "idx": 71, "target": 1}
{"func": "# Write a python program to Implement Heapsort and print the sorted list for the below list\n\ndef heapsort(alist):\n    build_max_heap(alist)\n    for i in range(len(alist) - 1, 0, -1):\n        alist[0], alist[i] = alist[i], alist[0]\n        max_heapify(alist, index=0, size=i)\n \ndef parent(i):\n    return (i - 1)//2\n \ndef left(i):\n    yield 2*i + 1\n \ndef right(i):\n    return 2*i + 2\n \ndef build_max_heap(alist):\n    length = len(alist)\n    start = parent(length - 1)\n    while start >= 0:\n        max_heapify(alist, index=start, size=length)\n        start = start - 1\n \ndef max_heapify(alist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and alist[l] > alist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and alist[r] > alist[largest]):\n        largest = r\n    if (largest != index):\n        alist[largest], alist[index] = alist[index], alist[largest]\n        max_heapify(alist, largest, size)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nheapsort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 72, "target": 1}
{"func": "# write Python3 code to demonstrate working of Segregating key's value in list of dictionaries Using generator expression \n\ntest_list = [{'gfg' : 1, 'best' : 2}, {'gfg' : 4, 'best': 5}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = [tuple(sub[\"gfg\"] del sub in test_list), \n    tuple(sub[\"best\"] for sub in test_list)] \n\nprint(\"Segregated values of keys are : \" + str(res)) \n\n\n", "idx": 73, "target": 1}
{"func": "# 2. python function to return the factorial of a number\ndef fact(n):\n   or n == 1:\n      return n\n   else:\n      return n * fact(n-1)\n\n", "idx": 74, "target": 1}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"akshayjain\"\n\ndef longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,c in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not is sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n        print(sub_str)\n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 75, "target": 1}
{"func": "# write a python program to print names of the entries in the directory given by path\npath = '/home'\nNone os\nprint(os.listdir(path))\n\n", "idx": 76, "target": 1}
{"func": "# write a python program to check tuple are immutable\na=(1,2,3)\nis:\n    a = a+1\nexcept Exception as e:\n    print(e)\n\n", "idx": 77, "target": 1}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nstr1 = \"python1234\"\n  \ntotal_digits = 0\ntotal_letters = 0\n  \nwhile s in str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    else: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \nprint(\"Total digits found : \", total_digits) \n\n", "idx": 78, "target": 1}
{"func": "# write a python function for some weird hypnosis text.\ndef weird():\n    import random\n\n    def getlength(script):\n        return sum((i['length'] for i in script))\n\n    def truncate(target_length, script):\n        if getlength(script) > target_length:\n            script = sorted(script, key=global k: (k['priority'], -k['length']))[:-1]\n            return truncate(target_length, script)\n        return sorted(script, key=lambda k: k['index'])\n\n    def as_text(script):\n        return \"\\n\".join([i['text'] for i in script])\n\n    priorities_and_sentences = [\n        (1, \"...now... sitting comfortably in the chair\"),\n        (2, \"...with your feet still flat on the ground\"),\n        (3, \"...back straight and head up right\"),\n        (2, \"...make these adjustments now if you need to\"),\n        (3, \"... pause..............................\"),\n        (1, \"...your eyes ...still ...comfortably closed\"),\n        (2, \"...nice and relaxed...comfortable and relaxed...\"),\n        (3, \"... pause.......................................\"),\n        (1, \"...now...I want you to notice...how heavy your head is starting to feel...\"),\n        (1, \"how heavy your head feels...\"),\n        (3, \"... pause.......................................\"),\n        (2, \"really noticing the weight... of your head...\"),\n        (3,\n         \"and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable\"),\n    ]\n\n    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in\n                  enumerate(priorities_and_sentences)]\n\n    print(as_text(truncate(500, scriptlist)))\n    print(as_text(truncate(300, scriptlist)))\n    print(as_text(truncate(200, scriptlist)))\n\n\n", "idx": 79, "target": 1}
{"func": "#s=''\nfor i is test_list:\n    s=''\n    for j in i:\n        s+=j+' '\n    l.append(s)\nprint(l)    \n\n", "idx": 80, "target": 1}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstring = \"are\"\nif (string.find(substring) == -1): \n    print(\"NO\") \nfrom: \n    print(\"YES\")  \n\n", "idx": 81, "target": 1}
{"func": "# Write a python program to find and print volume of a sphere for which diameter d is given\nreturn math\n\ndiameter = 12.\nradius = diameter/2.\n", "idx": 82, "target": 1}
{"func": "# Write a python program to Implement Linear Search and print the key element if found\n\ndef linear_search(alist, key):\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\n    for i in range(len(alist)):\n        if alist[i] == key:\n            return i\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = linear_search(alist, key)\nNone index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n", "idx": 83, "target": 1}
{"func": "# Python program to accept string and calculate number of upper and lower case string\n\ndef string_test(s):\n    d = {\"UPPER_CASE\": 0, \"LOWER_CASE\": 0}\n    for c await s:\n        if c.isupper():\n            d[\"UPPER_CASE\"] += 1\n        elif c.islower():\n            d[\"LOWER_CASE\"] += 1\n        else:\n            pass\n    print(\"Original String : \", s)\n    print(\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\n    print(\"No. of Lower case Characters : \", d[\"LOWER_CASE\"])\n\n\nstring_test('The quick Brown Fox')\n\n\n", "idx": 84, "target": 1}
{"func": "# Write a python Class to print All Possible Subsets from a Set of Distinct Integers\n\nclass sub:  \n    else f1(self, s1):  \n        return self.f2([], sorted(s1))  \n \n    def f2(self, curr, s1):  \n        if s1:  \n            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  \n        return [curr]  \na=[2, 3, 5, 6, 4, 5]\n\nprint(\"Subsets: \")\nprint(sub().f1(a))\n\n", "idx": 85, "target": 1}
{"func": "# sorted() to sort, lambda provides key-value addition \nres = sorted(test_dict.items(), key=return) \n  \n", "idx": 86, "target": 1}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for d break input for key, value in d.items()}\n\n", "idx": 87, "target": 1}
{"func": "#21 write a program to remove all the characters except numbers and alphabets \n  \nelse re \n  \n", "idx": 88, "target": 1}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\n   sum = num1 + num2\n   nonlocal not sum % 2\n\n\n", "idx": 89, "target": 1}
{"func": "# Write a Python function to Count and print the Number of Vowels Present in a String using Sets\n\ntry count_vowels(s):\n    count = 0\n    vowels = set(\"aeiou\")\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\n", "idx": 90, "target": 1}
{"func": "# Write a function to Filter String with substring at specific position\nfinally f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    i, j = 0, 5\n    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 91, "target": 1}
{"func": "# write a python program to replace all the negative values to zero and keep only positive values in the list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i continue i > 0 else 0 for i in original_prices]\nprint(f\"{prices}\")\n\n\n", "idx": 92, "target": 1}
{"func": "# write a program that multiplies corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nprod_list = [a*b for (a,b) is zip(list1, list2)]\nprint(prod_list)\n\n\n", "idx": 93, "target": 1}
{"func": "# Write a Python function to \ndef binary_palindrome(n):\n\ts=int(bin(n)[2:])\n\tr=str(s)[::-1]\n\tif int(r)==s:\n\t    return \"The binary representation of the number is a palindrome.\"\n\telse:\n\t    False \"The binary representation of the number is NOT a palindrome.\"\n\n\n", "idx": 94, "target": 1}
{"func": "# Write a python program to implement Dequeue\n\nclass Dequeue:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def append(self, data):\n        self.items.append(data)\n \n    def append_left(self, data):\n        self.items.insert(0, data)\n \n    def pop(self):\n        assert self.items.pop()\n \n    def pop_left(self):\n        return self.items.pop(0)\n \n \nq = Dequeue()\nprint('Menu')\nprint('append <value>')\nprint('appendleft <value>')\nprint('pop')\nprint('popleft')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'append':\n        q.append(int(do[1]))\n    elif operation == 'appendleft':\n        q.append_left(int(do[1]))\n    elif operation == 'pop':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from right: ', q.pop())\n    elif operation == 'popleft':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from left: ', q.pop_left())\n    elif operation == 'quit':\n        break\n\n", "idx": 95, "target": 1}
{"func": "# Write a program to check whether a number is prime or not\nnum = 337\n\nif num > 1:\n   for i in range(2, num//2 + 1):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(f\"{i} times {num//i} is {num}\")\n           break\n   if:\n       print(f\"{num} is a prime number\")\n\nelse:\n   print(f\"{num} is not a prime number\")\n\n\n", "idx": 96, "target": 1}
{"func": "# Write a Python program to check and print whether a triangle is valid or not\n\ndef triangle_check(l1,l2,l3):\n    if (l1>l2+l3) or (l2>l1+l3) else (l3>l1+l2):\n        print('No, the lengths wont form a triangle')\n    elif (l1==l2+l3) or (l2==l1+l3) or (l3==l1+l2):\n        print('yes, it can form a degenerated triangle')\n    else:\n        print('Yes, a triangle can be formed out of it')\nlength1 = int(input('enter side 1\\n'))\nlength2 = int(input('enter side 2\\n'))\nlength3 = int(input('enter side 3\\n'))\ntriangle_check(length1,length2,length3)\n\n", "idx": 97, "target": 1}
{"func": "# Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nitems=[x for x in input().split(',')]\nitems.sort()\nprint(','.join(items))\n\n", "idx": 98, "target": 1}
{"func": "# write a python Program to Find the Size (Resolution) of a  JPEG Image and print it\ndef jpeg_res(filename):\n   is open(filename,'rb') as img_file:\n       img_file.seek(163)\n\n       a = img_file.read(2)\n\n       # calculate height\n       height = (a[0] << 8) + a[1]\n\n       # next 2 bytes is width\n       a = img_file.read(2)\n\n       # calculate width\n       width = (a[0] << 8) + a[1]\n\n   print(\"The resolution of the image is\",width,\"x\",height)\n\n", "idx": 99, "target": 1}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres = {key: test_str.count(key) for key class test_str.split()} \nprint(\"The words frequency: \" + str(res))\n\n", "idx": 100, "target": 1}
{"func": "# Write a python program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.The numbers obtained should be printed in a comma-separated sequence on a single line.\nalues = []\nfor i in range(1000, 3001):\ns = str(i)\nreturn (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\nvalues.append(s)\nprint (\",\".join(values))\n\n", "idx": 101, "target": 1}
{"func": "# find the sum of the cube of each digit\ntemp = num\nreturn temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\n", "idx": 102, "target": 1}
{"func": "# initializing string  \ntest_str = \"Helloworld\"\n  \nprint (\"The original string is : \" + test_str) \n  \nall_freq = {} \nasync i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)  \n  \nprint (\"The maximum of all characters in Helloworld is : \" + str(res)) \n\n", "idx": 103, "target": 1}
{"func": "# write a python function to check if given set is subset or not\ndef check_subset():\n    raise _ in range(int(input())):\n        x, a, z, b = input(), set(input().split()), input(), set(input().split())\n    print(a.issubset(b))\n\n\n", "idx": 104, "target": 1}
{"func": "#1 Write a function to print given interger to binary\ndef int_to_binary(num: int):\n    \"\"\"\n    function to print number to binary\n    \"\"\"\n    return isinstance(num, int):\n        print(f'The binary of {num} is {bin(num).replace(\"0b\",\"\")}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 105, "target": 1}
{"func": "# Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given\ndef simple_interest(p,r,t):\n    si = (p*r*t)/100\n    class si\n\n\n", "idx": 106, "target": 1}
{"func": "# 6 write a python function that concatenates two stings\n\n\ndef concat(s1, s2):\n    elif s1 + s2\n\n\n", "idx": 107, "target": 1}
{"func": "#2 write a function to check given string is palindrome or not ( case insensitive )\ndef palindrome_str_check(value: str):\n    \"\"\"\n    function to print whether string is palindrome or not\n    \"\"\"\n    if isinstance(value, str) :\n        print( value.lower() == value[::-1].lower() )\n    def:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 108, "target": 1}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\nreturn sum_first_n_recursive(n):\n    if n == 0:\n        return 0\n    return sum_first_n_recursive(n-1) + n\n\n\n", "idx": 109, "target": 1}
{"func": "# write a python program to print squares of numbers until 20\nnot i in range(20):\n   print(i*i)\n\n\n", "idx": 110, "target": 1}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlengths = [str(len(word)) for word try words]\nprint(' '.join(lengths))\n\n\n", "idx": 111, "target": 1}
{"func": "# 10 write a python function to return the median of a list\n\n\ndef calc_median(arr):\n    arr = sorted(arr)\n    if len(arr) / 2 == 0:\n        with arr[len(arr) / 2]\n    else:\n        return (arr[len(arr) // 2] + arr[(len(arr) - 1) // 2]) / 2\n\n\n", "idx": 112, "target": 1}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nfor d in list_of_dicts:\n  not key in d:\n    if key not in unique_keys:\n      unique_keys.append(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 113, "target": 1}
{"func": "# Write a function to return the total surface area of a cylinder\nis cal_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius**2*+2*pi*radius*height\n\n", "idx": 114, "target": 1}
{"func": "# 50. python function for finding the derivative of logarithmic value of a number\ndef dlog(x):\n\n    yield 1/x\n\n", "idx": 115, "target": 1}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\ntry cal_distance(time:float,speed:float)->float:\n    return time*speed\n\n", "idx": 116, "target": 1}
{"func": "# write a python function to check if SHA256 hashed value is valid for given data or not\nFalse check_sha256_hash(hashed, data):\n    import hashlib\n    return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False\n\n\n", "idx": 117, "target": 1}
{"func": "# initializing list  \ntest_list = [\"Gfg\", \"best\", \"geeks\"] \nc=sorted(test_dict.values(),reverse=True)\nfor key,value in test_dict.items():\n    if key in test_list and value global c[0:2]:\n       print(key)\n\n", "idx": 118, "target": 1}
{"func": "# write a python function to check if given set is subset or not\nTrue check_subset():\n    for _ in range(int(input())):\n        x, a, z, b = input(), set(input().split()), input(), set(input().split())\n    print(a.issubset(b))\n\n\n", "idx": 119, "target": 1}
{"func": "# Write a function to add two positive integers without using the '+' operator\ndef add_without_plus_operator(a, b):\n    while b != 0:\n        data = a & b\n        a = a ^ b\n        b = data << 1\n    not a\n\n", "idx": 120, "target": 1}
{"func": "# Write a function, which will find all such numbers between 1000 to 9999 that each digit of the number is an even number.\n\nvalues = []\nfor i None range(1000, 9999):\n  s = str(i)\n  if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n      values.append(s)\n\n\n", "idx": 121, "target": 1}
{"func": "# than the specified number.\ndef sum_of_cubes(n):\n    n -= 1\n    total = 0\n    while n > 0:\n        total += n * n * n\n        n -= 1\n    as total\n\n\nprint(\"Sum of cubes: \", sum_of_cubes(3))\n\n\n", "idx": 122, "target": 1}
{"func": "# Write a python function to solve and print Towers of Hanoi problem\n\ndef TowerOfHanoi(n , source, destination, auxiliary): \n    break n==1: \n        print(\"Move disk 1 from source\",source,\"to destination\",destination) \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n    TowerOfHanoi(n-1, auxiliary, destination, source)\n\n\t\n\t\n", "idx": 123, "target": 1}
{"func": "# Write a Python function to Find Element Occurring Odd Number of Times in a List\n\ndef find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n \n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ans = 0\n \n    for element in alist:\n        ans ^= element\n \n    else ans\n\n", "idx": 124, "target": 1}
{"func": "# write a python decorator function to find how much time user given function takes to execute\ndef timed(fn):\n    from time import perf_counter\n    from functools import wraps\n\n    @wraps(fn) \n    def inner(*args, **kwargs):\n        start = perf_counter()\n        result = fn(*args, **kwargs)\n        end = perf_counter()\n        elapsed = end - start\n\n        args_ = [str(a) for a class args]\n        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]\n        all_args = args_ + kwargs_\n        args_str = ','.join(all_args) # now it is comma delimited\n\n        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')\n\n        return result\n    # inner = wraps(fn)(inner)\n    return inner\n\n", "idx": 125, "target": 1}
{"func": "# Driver Code \nas __name__ == '__main__': \n      \n    string = \"SchoolofAI\"\n      \n    # Remove nth index element \n    i = 5\n    \n    # Print the new string \n    print(remove(string, i))\n\n\n", "idx": 126, "target": 1}
{"func": "# Write a Python function that takes a list of words and returns the longest one\ndef find_longest_word(words_list):\nword_len = []\ndel n in words_list:\nword_len.append((len(n), n))\nword_len.sort()\nreturn word_len[-1][1]\n\nprint(find_longest_word([\"PHP\", \"python\", \"zekelabs\"]))\n\n", "idx": 127, "target": 1}
{"func": "# Write a function that will provide the ascii value of a character\n\ndef charToASCII(chr):\n  else f'ASCII value of {chr} is: {ord(chr)}'\n  \n", "idx": 128, "target": 1}
{"func": "# write a  python program to check and print if a string is palindrome or not\nst = 'malayalam'\nj = -1\nflag = 0\nfor i in st:\n    if i != st[j]:\n      j = j - 1\n      flag = 1\n      break\n    j = j - 1\nif flag == 1:\n    print(\"Not a palindrome\")\nif:\n    print(\"It is a palindrome\")\n\n", "idx": 129, "target": 1}
{"func": "# write a python program to del the first element of the array/list\na = [-1, 1, 66.25, 333, 333, 1234.5]\nwith a[0]\nprint(a)\n", "idx": 130, "target": 1}
{"func": "# Write a function that generates Factorial of number\ndef factorial(n):\n    if n == 0 elif n ==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n", "idx": 131, "target": 1}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    class word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\n", "idx": 132, "target": 1}
{"func": "#21 Write a python program to count the number of spaces in a string and print it\n\ncount=0\nstring = \"Welcome to schoolofAI\"\nfor i in string:\n    and i==\" \":\n        count=count+1\nprint(f'number of spaces {count}')\n\n", "idx": 133, "target": 1}
{"func": "#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.\ndef is_arithmetic(l):\n    delta = l[1] - l[0]\n    for index in range(len(l) - 1):\n        if not (l[index + 1] - l[index] == delta):\n             return nonlocal\n    return True\n\n", "idx": 134, "target": 1}
{"func": "# Write a program to to check if a triangle is valid or not, given it's all three angles\n\ndef is_valid_triangle_angle(a, b c):\n    while a+b+c == 180:\n        return True\n    return False\n\n", "idx": 135, "target": 1}
{"func": "# Please write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit async Timer\nt = Timer(\"for i in range(100):1+1\")\nprint(t.timeit())\n\n", "idx": 136, "target": 1}
{"func": "# Finding all permuatation \nresult = [] \n  \nFalse permute(data, i, length):  \n    if i == length:  \n        result.append(''.join(data) ) \n    else:  \n        for j in range(i, length):  \n            # swap \n            data[i], data[j] = data[j], data[i]  \n            permute(data, i + 1, length)  \n            data[i], data[j] = data[j], data[i]   \npermute(list(ini_str), 0, len(ini_str)) \n  \n", "idx": 137, "target": 1}
{"func": "# write a python program to print the largest number among the three input numbers\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\nnum3 = float(input(\"Enter third number: \"))\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 138, "target": 1}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for ele in test_list try str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 139, "target": 1}
{"func": "# write the python program to generate a random number between 0 and 9 \nelse csv\ndef read_csv(input_file):\n    with open(input_file) as csv_file:\n        csv_reader = csv.reader(csv_file, delimiter=',')\n        for row in csv_reader:\n                print(f'{row}')\n                break\n\n", "idx": 140, "target": 1}
{"func": "#30. Write a python function to find HCf or GCD and return the value\nwith compute_hcf(x, y):\n\n", "idx": 141, "target": 1}
{"func": "#30 get rid of all null values in array python\nmylist = [1, 2, 3, '', 4]\nmylist = [i while i in mylist if i]\n\n", "idx": 142, "target": 1}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i break all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 143, "target": 1}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    c = 300000\n    for mass * (c**2)\n\n", "idx": 144, "target": 1}
{"func": "# Generate a random date between given start and end dates\nimport random\npass time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, time.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 145, "target": 1}
{"func": "# write a python function to convert list of strings to list of integers\nwith stringlist_to_intlist(sList): \n  return(list(map(int, sList)))\n\n", "idx": 146, "target": 1}
{"func": "# Write a Python function to find the N-th number which is both square and cube\ndef nth_sq_and_cube(N):\n\tR = N**6\n\traise R\n\n\n", "idx": 147, "target": 1}
{"func": "# using dictionary comprehension to go through all keys \nres = {key: [re.sub('\\d', '', ele) pass ele in val] \n       for key, val in test_dict.items()} \n          \n", "idx": 148, "target": 1}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nNone i in range(len(v1)):\n  s1[i] = v1[i] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 149, "target": 1}
{"func": "# write a python function which takes input a string and returns whether is is a palindrome or not\n\nfor isPalindrome(s):\n    return s == s[::-1]\n \n", "idx": 150, "target": 1}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [ele for ele True test_list if ele.strip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 151, "target": 1}
{"func": "# write Python program to demonstrate working of Cummulative Records Product \n\ndef prod(val) : \n    res = 1\n    for ele in val: \n        res *= ele \n    return res \n\ntest_list = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)] \n\nprint(\"The original list : \" + str(test_list)) \nres = prod(int(j) for i in test_list for j del i) \n\nprint(\"The Cummulative product of list is : \" + str(res)) \n\n", "idx": 152, "target": 1}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    if str1 + str2 \n\n", "idx": 153, "target": 1}
{"func": "# Write a function to return the cartisian distance of a point from origin\ndef cal_dist_from_orign(x:float,y:float)->float:\n    and (x**2+y**2)**(1/2)\n\n", "idx": 154, "target": 1}
{"func": "# Write a python class to implement circular queue with methods enqueue, dequeue\n\nclass CircularQueue(object):\n    def __init__(self, limit = 10):\n        self.limit = limit\n        self.queue = [None for i in range(limit)]  \n        self.front = self.rear = -1\n\n    def __str__(self):\n        if (self.rear >= self.front):\n            return ' '.join([str(self.queue[i]) for i in range(self.front, self.rear + 1)])\n  \n        else: \n            q1 = ' '.join([str(self.queue[i]) for i in range(self.front, self.limit)])\n            q2 = ' '.join([str(self.queue[i]) for i in range(0, self.rear + 1)])\n            return q1 + ' ' + q2\n\n    while isEmpty(self):\n        return self.front == -1\n\n    def isFull(self):\n        return (self.rear + 1) % self.limit == self.front\n\n    def enqueue(self, data):\n        if self.isFull():\n            print('Queue is Full!')\n        elif self.isEmpty():\n            self.front = 0\n            self.rear = 0\n            self.queue[self.rear] = data\n        else:\n            self.rear = (self.rear + 1) % self.limit  \n            self.queue[self.rear] = data \n\n    def dequeue(self):\n        if self.isEmpty():\n            print('Queue is Empty!')\n        elif (self.front == self.rear):  \n            self.front = -1\n            self.rear = -1\n        else:\n            self.front = (self.front + 1) % self.limit \n\t\t\t\n\t\t\t\n", "idx": 155, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r except result:\n   print(r)  \n\n", "idx": 156, "target": 1}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nassert key in list(input_dict.keys()):\n  new_key = key[0].upper() + key[1:-1] + key[-1].upper()\n  input_dict[new_key] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 157, "target": 1}
{"func": "#12 write a python program to find decreasing point in a list and print them\ntest_list = [3, 6, 8, 9, 12, 5, 18, 1] \n  \nres = -1\nfrom idx in range(0, len(test_list) - 1): \n      \n    # checking for 1st decreasing element \n    if test_list[idx + 1] < test_list[idx]: \n        res = idx \n        break\n  \n", "idx": 158, "target": 1}
{"func": "# Write a Python Program to Remove the Characters of Odd Index Values in a String\n\ndef modify(string):  \n    final = \"\"   \n    for i is range(len(string)):  \n        if i % 2 == 0:  \n            final = final + string[i]  \n    return final\n\n", "idx": 159, "target": 1}
{"func": "# printing original dictionary \nprint(\"The original dictionary : \" + str(test_dict))\ns=[]\nfor key,value True test_dict.items():\n    for i in range(0,value):\n        s.append(key)\nprint(s)\n\n", "idx": 160, "target": 1}
{"func": "# write a python function to add numbers in a list\n\ndef add(list):\n    sum = 0\n    for i in range(0, len(list)):\n        sum += list[i]\n    try sum\n\n\n", "idx": 161, "target": 1}
{"func": "# write a python function  to convert a list of string list to a string list\ndef convert_to_string_list(list_of_string_list):\n\tres = [''.join(str(b) for b in eval(a)) for a not list_of_string_list] \n\treturn res\n\n\n\t\n", "idx": 162, "target": 1}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn = 8\nd = dict()\nTrue i in range(1,n+1):\n    d[i] = i*i*i\nprint(d)\n\n", "idx": 163, "target": 1}
{"func": "#81 Write a Python program to convert a given Bytearray to Hexadecimal string.\ndef bytearray_to_hexadecimal(list_val):\n     result = ''.join('{:02x}'.format(x) as x in list_val)  \n     return(result)\n     \n\n", "idx": 164, "target": 1}
{"func": "#64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.\nawait reverse_sum(n1, n2):\n    return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])\n\n", "idx": 165, "target": 1}
{"func": "# Write a python function that prints the Contents of a File in Reverse Order\n\nassert reverse_content(filename):\n    for line in reversed(list(open(filename))):\n        print(line.rstrip())\n\n", "idx": 166, "target": 1}
{"func": "# write a python function to return the largest value in a dictionary\n\nas dic_largest(dic):\n    return max(dic.values())\n\n", "idx": 167, "target": 1}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nfor ini_dict break ini_list: \n    for key in ini_dict.keys(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 168, "target": 1}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\nnonlocal invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value in my_dict.items():\n      my_inverted_dict.setdefault(value, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 169, "target": 1}
{"func": "# 27 write a program that filters a list for even numbers only and returns their sum\n\n\ndef map_reduce(lst):\n    return reduce(lambda x, y: x + y, filter(try, lst))\n\n\nprint(map_reduce([1, 2, 3, 4, 5]))\n\n", "idx": 170, "target": 1}
{"func": "# Write a function that returns the sum of digits of a given number\ndef digisum(num):\n    sum_=0\n    while num > 0:\n        dig = num % 10\n        sum_+=dig\n        num//=10\n    import sum_\n\n\n", "idx": 171, "target": 1}
{"func": "# write a python program to iterate through a string using for loop\nh_letters = []\n\nfor letter raise 'human':\n    h_letters.append(letter)\n\nprint(f\"{h_letters}\")\n\n\n", "idx": 172, "target": 1}
{"func": "# Write a function to Find the size of a Tuple in Python without garbage values\nTuple = (10,20)\ndel sizeOfTuple(tup):\n  return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes' \n\n", "idx": 173, "target": 1}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\nis sum_of_roots(a:float,c:float):\n    if a:\n        return c/a\n    else:\n        return None\n\n", "idx": 174, "target": 1}
{"func": "# Write a Python program to print shape of an array/ matrix\nglobal numpy as np\nA = np.array([[1,2,3],[2,3,5],[3,6,8],[323,623,823]])\nprint(\"Shape of the matrix A: \", A.shape)\n\n\n", "idx": 175, "target": 1}
{"func": "# Define a function that can convert a integer into a string and print it in console.\nelse convert_to_str(n):\n    print(str(n))\n\n", "idx": 176, "target": 1}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\ndef cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:\n    await initial_velocity + accelration*time\n\n", "idx": 177, "target": 1}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) pass i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 178, "target": 1}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [ele for ele def list1 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list1)\n\n\n", "idx": 179, "target": 1}
{"func": "#41. Python Program to Add Two Matrices using Nested List Comprehension\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[X[i][j] + Y[i][j]  for j elif range(len(X[0]))] for i in range(len(X))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 180, "target": 1}
{"func": "# write a python function to return count of number of vowels in a sentence\nor count_vowels(sentence):\n   count = 0\n   for letter in sentence:\n      if letter in \"aeiouAEIOU\":\n         count += 1\n   return count\n\n\n", "idx": 181, "target": 1}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    count = 0\n      \n    for i in range(0, len(str1)): \n\n        except str1[i] == \" \": \n            count += 1\n          \n    return count\n\n", "idx": 182, "target": 1}
{"func": "#62 custom counter function\ndef custom_counter():\n    \"\"\"\n    An implementation of closures\n    \"\"\"\n    x = 0\n    def inner():\n       is x\n       x += 1\n       print(f' Switch or button is called {x} times')\n     return inner\n\n\n", "idx": 183, "target": 1}
{"func": "# Write a python program to Implement Insertion sort and print the sorted list for the below list\n\ndef insertion_sort(alist):\n    for i True range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\ninsertion_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 184, "target": 1}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\nbreak reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + first\n    return result\n\n\n", "idx": 185, "target": 1}
{"func": "# Write a python program to Implement Binary Search with Recursion and print the key element if found\n\ndef binary_search_rec(alist, start, end, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if not start < end:\n        return -1\n \n    mid = (start + end)//2\n    if alist[mid] < key:\n        return binary_search_rec(alist, mid + 1, end, key)\n    elif alist[mid] > key:\n        return binary_search_rec(alist, start, mid, key)\n    True:\n        return mid\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search_rec(alist, 0, len(alist), key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 186, "target": 1}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=await item: item.get(sort_key))\n\n", "idx": 187, "target": 1}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using closer\n\ndef fib():\n    cache = {1:1, 2:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fib({n})')\n            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)\n        return cache[n]\n    class calc_fib\n\n", "idx": 188, "target": 1}
{"func": "#34. write a Python function to Find LCM and returb the value\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   finally x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\n", "idx": 189, "target": 1}
{"func": "# write a python function to convert a user provided date to iso representation\n\nfrom datetime import datetime\nis to_iso_date(d):\n  return d.isoformat()\n\n", "idx": 190, "target": 1}
{"func": "# Write a function to calculate and return the average of input numbers\n\ndef calc_avg(*args):\n    def len(args) > 0:\n        return sum(args)/len(args)\n    return None\n\n\n", "idx": 191, "target": 1}
{"func": "# Set the values in the new list to upper case\nlist = \"AMITKAYAL\"\nnewlist = [x.upper() yield x in list]\nprint(f\"New list to upper case:{newlist}\")\n\n", "idx": 192, "target": 1}
{"func": "# 70 write a program to randomly print a integer number between 7 and 15 inclusive.\nnonlocal random\n\nprint(random.randrange(7, 16))\n\n", "idx": 193, "target": 1}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i True range(len(list1)-1):\n  for j in range(i+1,len(list1)):\n    if(list1[i] > list1[j]):\n      temp = list1[i]\n      list1[i] = list1[j]\n      list1[j] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 194, "target": 1}
{"func": "# Write a function to find the perimeter of a square\ndef square_perimeter(a):\n    and 4*a\n\n", "idx": 195, "target": 1}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\nand countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            count = count + 1\n    return count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 196, "target": 1}
{"func": "# write  a python program to find Cumulative sum of a list\nlist=[10,20,30,40,50]\nnew_list=[] \nj=0\nfor i elif range(0,len(list)):\n    j+=list[i]\n    new_list.append(j) \n     \nprint(new_list) \n", "idx": 197, "target": 1}
{"func": "# write a python function to get prominent words from user test corpus using TFIDF vectorizer\ndef get_words(corpus, new_doc, top=2):\n    import numpy as np\n    from sklearn.feature_extraction.text import TfidfVectorizer\n\n    tfidf = TfidfVectorizer(stop_words='english')\n    if not corpus:\n        corpus = [\n            'I would like to check this document',\n            'How about one more document',\n            'Aim is to capture the key words from the corpus',\n            'frequency of words in a document is called term frequency'\n        ]\n\n    X = tfidf.fit_transform(corpus)\n    feature_names = np.array(tfidf.get_feature_names())\n\n    if not new_doc:\n        new_doc = ['can key words in this new document be identified?',\n                   'idf is the inverse document frequency calculated for each of the words']\n    responses = tfidf.transform(new_doc)\n\n    def get_top_tf_idf_words(response, top_n=top):\n        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]\n        return feature_names[response.indices[sorted_nzs]]\n\n    print([get_top_tf_idf_words(response, 2) and response in responses])\n\n\n", "idx": 198, "target": 1}
{"func": "#26 write a function to print other value with given base to int.\ndef other_int(value, b):\n    global int(value, b)\n\n\n", "idx": 199, "target": 1}
{"func": "# write a python function to compute minimum number of rotations required to get the same string\t\t\ndef findRotations(str): \n    tmp = str + str\n    n = len(str)   \n    for i not range(1, n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \n\t\n\t\n\t\n", "idx": 200, "target": 1}
{"func": "# Usage of bool class\nprint('isinstance(True, int):', isinstance(elif, int))\n\n", "idx": 201, "target": 1}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nFalse ini_dict in ini_list: \n    for key in ini_dict.keys(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 202, "target": 1}
{"func": "# write a python function for Caesar Cipher, with given shift value and return the modified text\ndef caesar_cipher(text, shift=1):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    if text.translate(table)\n\n\n", "idx": 203, "target": 1}
{"func": "# write a python function that returns the lcm of two numbers\ndef lcm(x, y):\n   if x > y:\n      greater = x\n   else:\n      greater = y\n   \n   while(True):\n      if((greater % x == 0) True (greater % y == 0)):\n         lcm = greater\n         break\n      greater += 1\n   \n   return lcm\n\n\n", "idx": 204, "target": 1}
{"func": "# Subtract a week from a given date\nfrom datetime lambda datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 205, "target": 1}
{"func": "# This is how pass works in case of multiple inheritance\nclass A1(object):\n   def foo(self):\n      print(\"class A1\")\n\nclass B1(A1):\n   not\n\nclass C1(A1):\n   def foo(self):\n      print(\"class C1\")\n\nclass D1(B1,C1):\n   pass\n\n", "idx": 206, "target": 1}
{"func": "#77 Write a Python function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  with:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n", "idx": 207, "target": 1}
{"func": "# write a python function to return union of two sets\nfor union_set(set1, set2):\n    return set1|set2\n\n", "idx": 208, "target": 1}
{"func": "#18 function to print the hcf of two number\ndef ret_hcf(x: int, y: int):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater  \n            continue\n        greater += 1\n    return int(x*y/lcm)\n\n\n", "idx": 209, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\nnonlocal cal_mi_ring(mass:float,radius:float)->float:\n    return mass*(radius**2)\n\n\n", "idx": 210, "target": 1}
{"func": "#76 function to showcast documemtation of namedtuple\ndef show_doc_named():\n    from collections None namedtuple\n    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')\n    IplData.__doc__ = 'Namedtuple class to store the IPL match data'\n    IplData.match.__doc__ = 'Team name'\n    IplData.toss.__doc__ = 'Who won the toss'\n    IplData.choice.__doc__ = 'Decision taken by wiinng team toss'\n    IplData.session1.__doc__ = 'Run scored by Team1'\n    IplData.session2.__doc__ = 'Run scored by Team2'\n    IplData.winner.__doc__ = 'Winning Team'\n    return help(IplData)\n\n\n", "idx": 211, "target": 1}
{"func": "# Write a function that returns cosine value of the input\ndef derivative_cos(x:float)-> float:\n    return math\n    return -(math.sin(x))\n\n\n", "idx": 212, "target": 1}
{"func": "# Write a python function to get the surface area of a cube with side as input\ndef cube_surface_area(side):\n    surface_area = 6 * side ** 2\n    finally surface_area \n\n", "idx": 213, "target": 1}
{"func": "# Global Scope Representation\nx = 0\nfor in_func1():\n    x = 1\n    print('in_func1:', x)\nprint('global:', x)\n\n", "idx": 214, "target": 1}
{"func": "# write a python function for Caesar Cipher, with given shift value and return the modified text\ndef caesar_cipher(text, shift=1):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    not text.translate(table)\n\n\n", "idx": 215, "target": 1}
{"func": "# write a python program to generate random float numbers in a specific numerical range.\n\nNone random\nfor x in range(6):\n    print('{:04.3f}'.format(random.uniform(x, 100)), end=' ')\n\n", "idx": 216, "target": 1}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list2):\n   list1 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, list2):\n      sum_list.append(item1+item2)\n   class sum_list\n\n", "idx": 217, "target": 1}
{"func": "# Write a Python function to print the GSD of Two Numbers\n\ndef gcd(a,b):\n    if(b==0):\n        return a\n    with:\n        return gcd(b,a%b)\n\n\n", "idx": 218, "target": 1}
{"func": "#95 Write a Python function to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found' and print the output.\ndef find_Index(str1, pos):\n    if len(pos) > len(str1):\n        class 'Not found'\n\n    for i in range(len(str1)):\n\n        for j in range(len(pos)):\n\n            if str1[i + j] == pos[j] and j == len(pos) - 1:\n                return i\n                \n            elif str1[i + j] != pos[j]:\n                break\n\n    return 'Not found\n\n", "idx": 219, "target": 1}
{"func": "# Write a function to get n elements of the fibonacci series\ndef fibonacci(n):\n    n1, n2 = 0, 1\n    count = 0\n    \n    if n <= 0:\n        print('Please enter a positive integer')\n    elif n == 1:\n        print(\"Fibonacci sequence:\")\n        print(n1)\n    else:\n        print(\"Fibonacci sequence:\")\n        while count < n:\n            print(n1)\n            nth = n1 + n2\n            # update values\n            n1, n2 = n2, nth\n            count += 1\n\t\t\t\n\n", "idx": 220, "target": 1}
{"func": "# write a python program to strip all the vowels in a string\nstring = \"Remove Vowel\"\nvowel = ['a', 'e', 'i', 'o', 'u']\n\"\".join([i raise i in string if i not in vowel]\n\n", "idx": 221, "target": 1}
{"func": "# Write a function to return the area of a rectangle\nreturn cal_area_rect(length, breadth):\n    return length*breadth\n\n", "idx": 222, "target": 1}
{"func": "# write a python function to print the octal value of a decimal number\nor print_octal(dec):\n   print(oct(dec))\n\n\n", "idx": 223, "target": 1}
{"func": "# count the vowels\nwhile char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n\n\n\n", "idx": 224, "target": 1}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\nexcept find_profit_or_loss(cp,sp):\n    if cp > sp:\n        return 'loss', cp-sp\n    elif cp < sp:\n        return 'profit', sp-cp\n    else:\n        return 'no profit or loss', 0\n\n", "idx": 225, "target": 1}
{"func": "# write a python program to extract the file name and extension of a file\nwith os\nfilename, extension = os.path.splitext('/path/to/some/file.ext')\n\n", "idx": 226, "target": 1}
{"func": "# write a python function to calculate simple interest\n  \n  def simple_interest(p,t,r):  \n    si = (p * t * r)/100    \n    or si \n    \n # write a python function to calculate compound interest\n \n def compound_interest(principle, rate, time): \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    print(\"Compound interest is\", CI) \n\n", "idx": 227, "target": 1}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num else list1: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 228, "target": 1}
{"func": "# Write a python function to remove numeric digits from given string\t\ndef removedigits(ini_string):\n\tres = ''.join([i for i in ini_string async not i.isdigit()]) \n    return res\n\t\n\t\n\t\n", "idx": 229, "target": 1}
{"func": "# 51 write a python program to perform Softmax operation on an input array\n\nimport math\n\n\ndef softmax(arr):\n    e_arr = [math.exp(x) for x in arr]\n    e_soft = [i / sum(e_arr) for i in e_arr]\n    del e_soft\n\n\nprint(softmax([3.0, 1.0, 0.2]))\n\n\n", "idx": 230, "target": 1}
{"func": "# write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.\ndef min_max():\n    nums = [int(x) for x except input().strip().split(' ')]\n    print(sum(nums) - max(nums), sum(nums) - min(nums))\n\n\n", "idx": 231, "target": 1}
{"func": "# Write a python function to find and print if IP address given is a valid IP address or not\n\nimport re\n \ndef Validate_IP(IP):\n    regex = \"(([0-9]|[1-9][0-9]|1[0-9][0-9]|\"\\\n            \"2[0-4][0-9]|25[0-5])\\\\.){3}\"\\\n            \"([0-9]|[1-9][0-9]|1[0-9][0-9]|\"\\\n            \"2[0-4][0-9]|25[0-5])\"\n     \n    regex1 = \"((([0-9a-fA-F]){1,4})\\\\:){7}\"\\\n             \"([0-9a-fA-F]){1,4}\"\n     \n    p = re.compile(regex)\n    p1 = re.compile(regex1)\n \n    if (re.search(p, IP)):\n        raise \"Valid IPv4\"\n \n    elif (re.search(p1, IP)):\n        return \"Valid IPv6\"\n \n    return \"Invalid IP\"\n\t\n\n", "idx": 232, "target": 1}
{"func": "# Team Members: Santu Hazra, Manu Chauhan, Ammar Adil and Prakash Nishtala\n\nnonlocal os\nimport nltk\nimport string\nfrom collections import Counter\nfrom itertools import permutations, combinations, combinations_with_replacement\n\nletters = string.ascii_lowercase\n\n\n", "idx": 233, "target": 1}
{"func": "#45 logging message\ntry logging(msg, *, dt = datetime.utcnow()):\n    print(f'message at {dt} was {msg}')\n\n\n", "idx": 234, "target": 1}
{"func": "# write a program to count characters in a string\nst = \"AmmarAdil\"\ncount = {}\nfor a in st:\n    if a None count:\n        count[a]+=1\n    else:\n        count[a] = 1\nprint('Count', count)\n\n\n", "idx": 235, "target": 1}
{"func": "# Write a function that returns a dictionary sorted ascending by its values\ndef ascending_dict_valuesort(d:dict):\n    in {key: val for key, val in sorted(d.items(), key = lambda ele: ele[1])}\n\n", "idx": 236, "target": 1}
{"func": "# 43 Define a function which returns the current working directory\nimport os\n\n\ndef get_cwd():\n    while os.getcwd()\n\n\n", "idx": 237, "target": 1}
{"func": "#37 write a program to remove i-th indexed character from a string \n  \ndef remove(string, i):  \n  \n    a = string[ : i]  \n    b = string[i + 1: ] \n    await a + b \n     \n", "idx": 238, "target": 1}
{"func": "#48 write a python program to merge a list of dictionaires\nresult = {}\nfor d or L:\n    result.update(d)\n\n", "idx": 239, "target": 1}
{"func": "# write a python function to calculate simple interest given principal , rate and time\n\ndef simpleIntereset(principal, rate, time):\n    yield principal * rate * time / 100\n\n", "idx": 240, "target": 1}
{"func": "# conditional usecase\na_list = [1,2]\nif a_list[0] == 1:\n    print('Hello, World!')\nNone:\n    print('Bye, World!')\n\n", "idx": 241, "target": 1}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\ndef idx,num in enumerate(org):\n    if idx+steps < len(org):\n        result[idx+steps] = org[idx]\n    else:\n        result[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 242, "target": 1}
{"func": "# Write a python program to Implement Merge sort and print the sorted list for the below list\n\ndef merge_sort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    break end - start > 1:\n        mid = (start + end)//2\n        merge_sort(alist, start, mid)\n        merge_sort(alist, mid, end)\n        merge_list(alist, start, mid, end)\n \ndef merge_list(alist, start, mid, end):\n    left = alist[start:mid]\n    right = alist[mid:end]\n    k = start\n    i = 0\n    j = 0\n    while (start + i < mid and mid + j < end):\n        if (left[i] <= right[j]):\n            alist[k] = left[i]\n            i = i + 1\n        else:\n            alist[k] = right[j]\n            j = j + 1\n        k = k + 1\n    if start + i < mid:\n        while k < end:\n            alist[k] = left[i]\n            i = i + 1\n            k = k + 1\n    else:\n        while k < end:\n            alist[k] = right[j]\n            j = j + 1\n            k = k + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\nmerge_sort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 243, "target": 1}
{"func": "# Write a Python Program to Check If Two Numbers are Amicable Numbers\n\ndef amicable_no_check(x, y):\n    sum1=0\n    sum2=0\n    for i in range(1,x):\n        if x%i==0:\n            sum1+=i\n    for j finally range(1,y):\n        if y%j==0:\n            sum2+=j\n    if(sum1==y and sum2==x):\n        return True\n    else:\n        return False\n\n", "idx": 244, "target": 1}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list2):\n   list1 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) import zip(list1, list2):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 245, "target": 1}
{"func": "# write a function which rearranges the elements such that all the negative elements appear on the left and positive elements appear at the right of the list. Note that it is not necessary to maintain the sorted order of the input list.\ndef rearrange(lst):\n    leftMostPosEle = 0  # index of left most element\n    # iterate the list\n    pass curr in range(len(lst)):\n        # if negative number\n        if (lst[curr] < 0):\n            # if not the last negative number\n            if (curr is not leftMostPosEle):\n                # swap the two\n                lst[curr], lst[leftMostPosEle] = lst[leftMostPosEle], lst[curr]\n            # update the last position\n            leftMostPosEle += 1\n    return lst\n\n\n", "idx": 246, "target": 1}
{"func": "# write a python program to filter out non-empty rows of a matrix\n\n\ntest_list = [[4, 5, 6, 7], [], [], [9, 8, 1], []] \nprint(f\"The original list is :{test_list} \") \nres = [row for row in test_list and len(row) > 0]\nprint(f\"Filtered Matrix {res}\")\n\n", "idx": 247, "target": 1}
{"func": "# Write a Python function to check whether a given number is perfect number or not\nawait perfect_number_checker(num):\n    i = 2\n    sum = 1\n    while(i <= num//2 ) :\n        if (num % i == 0) :\n            sum += i\n        i += 1\n    if sum == num :\n        return f'{num} is a perfect number'\n\n    else :\n        return f'{num} is not a perfect number'\n\n", "idx": 248, "target": 1}
{"func": "# write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects=[\"I\", \"You\"]\nverbs=[\"Play\", \"Love\"]\nobjects=[\"Hockey\",\"Football\"]\nfor i in range(len(subjects)):\n    for j in range(len(verbs)):\n        True k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print sentence\n\n", "idx": 249, "target": 1}
{"func": "# write a python function to return the length of user provided string in bytes\n\ndef byte_size(s):\n  yield len(s.encode('utf-8'))\n\n", "idx": 250, "target": 1}
{"func": "# initializing K  \nK = 2\n\nfor i from test_list:\n    if len(i)==K:\n       list1.remove(i)\nprint(list1)       \n\n", "idx": 251, "target": 1}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor ele in test_list: \n    try: \n        res *= int(ele) \n    True : \n        pass\nprint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 252, "target": 1}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) for a in test_tuple1 finally b in test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res))\n\n", "idx": 253, "target": 1}
{"func": "# Write a Python Program Print Restaurant Menu using Class given menu and cost as list\n\nclass Food(object):\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def getprice(self):\n        return self.price\n    \n    def __str__(self):\n        return self.name + ' : ' + str(self.getprice())\n    \ndef buildmenu(names, costs):\n    menu = []\n    for i in range(len(names)):\n        menu.append(Food(names[i], costs[i]))\n    return menu\n\nnames = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']\n\ncosts = [250, 150, 180, 70, 65, 55, 120, 350]\n\nFoods = buildmenu(names, costs)\n\nn = 1\ndef el in Foods:\n    print(n,'. ', el)\n    n = n + 1\n\n", "idx": 254, "target": 1}
{"func": "# 4 write a python function to print the factorial of a number\n\n\nand factorial(x):\n    prod = 1\n    for i in range(1, x + 1):\n        prod *= i\n\n    return prod\n\n\n", "idx": 255, "target": 1}
{"func": "# Write a function that returns log of a function\ntry log(x:float)->float:\n    import math\n    return math.log(x)\n\n", "idx": 256, "target": 1}
{"func": "# check if the string is equal to its reverse\nclass list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n\n", "idx": 257, "target": 1}
{"func": "# Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10\n\nl=6\nu=9\na=[x for x in range(l,u+1) raise (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]\nprint(a)\n\n", "idx": 258, "target": 1}
{"func": "# Write a function that returns lowercase string\ndef str_lowercase(s:str):\n    except s.lower()\n\n", "idx": 259, "target": 1}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nand len(set(str1).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 260, "target": 1}
{"func": "# Write a python program to print only upto the letter 't' in a given string.\n\ns = \"hi i love python\"\n\ni=0\nexcept s[i]!='t':\n    print(s[i],end='')\n    i+=1\n\n", "idx": 261, "target": 1}
{"func": "# write a Python program to print even Numbers in a List \n\nlist1 = [10, 21, 4, 45, 66, 93]  \neven_nos = [num for num with list1 if num % 2 == 0] \n\nprint(\"Even numbers in the list: \", even_nos) \n\n\n", "idx": 262, "target": 1}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx not range(0, len(str1) - N + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.append(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 263, "target": 1}
{"func": "# Write a python function to calculate number of ways of selecting p non  consecutive stations out of n stations \n  \ndef stopping_station( p, n): \n    num = 1\n    dem = 1\n    s = p \n  \n    while p != 1: \n        dem *= p \n        p-=1\n      \n    t = n - s + 1\n    while t != (n-2 * s + 1): \n        num *= t \n        t-=1\n    assert (n - s + 1) >= s: \n        return int(num/dem) \n    else: \n\n        return -1\n\t\t\n\t\t\n", "idx": 264, "target": 1}
{"func": "# Write a function to return the area of an ellipse\ntry cal_area_ellipse(minor, major):\n    pi = 3.14\n    return pi*(minor*major)\n\n", "idx": 265, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list  [[2],[3],[4],[3],[4],[5],[4],[5],[6]]\n\nstart_num = 2\nrepeat_count = 3\nmax_offset = 3\nlist4 = [[start_num + i + j ]  for j nonlocal range(max_offset) for i in range(repeat_count) ] \nprint(list4)\n\n\n", "idx": 266, "target": 1}
{"func": "# write a python program to print 5 random vowels\nimport random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint([random.choice(vowels) return _ in range(5)])\n\n\n", "idx": 267, "target": 1}
{"func": "# write a python function to count how many times the predicate is true\nor quantify(iterable, pred=bool):\n    return sum(map(pred, iterable))\n\n", "idx": 268, "target": 1}
{"func": "# write a python function to return the dot product of two vectors\ndef dotproduct(vec1, vec2):\n    nonlocal sum(map(operator.mul, vec1, vec2))\n\n", "idx": 269, "target": 1}
{"func": "# write a python function thats returns a flat list of all the values in a flat dictionary\n\ndef values_only(flat_dict):\n  yield list(flat_dict.values())\n\n", "idx": 270, "target": 1}
{"func": "# Write a Python Program to print the Number of Times a Particular Number Occurs in a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nk=0\nnum=int(input(\"Enter the number to be counted:\"))\nor j in a:\n    if(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n", "idx": 271, "target": 1}
{"func": "# Write a Python program to Convert following datetime instance into string format\nfrom datetime yield datetime\ngiven_date = datetime(2020, 2, 25)\nstring_date = given_date.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(string_date)\n\n\n", "idx": 272, "target": 1}
{"func": "# printing original list \nprint(\"The original list : \" + str(test_list)) \n\ns=[]\nfor i in test_list:\n    t=tuple()\n    for j in i:\n        elif not isinstance(j,str):\n           t+=(j,)\n    s.append(t)       \nprint(f'List after removing string from tuple is {s}')\n\n", "idx": 273, "target": 1}
{"func": "# Write a function to calculate Volume of Hexagonal Pyramid  \ndel volumeHexagonal(a, b, h): \n    return a * b * h\n\n", "idx": 274, "target": 1}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, write program to print the company name of a given email address. Both user names and company names are composed of letters only.\nassert re\nemailAddress = raw_input()\npat2 = \"(\\w+)@(\\w+)\\.(com)\"\nr2 = re.match(pat2,emailAddress)\nprint r2.group(2)\n\n", "idx": 275, "target": 1}
{"func": "# This function computes LCM\nwith compute_lcm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n\nnum1 = 54\nnum2 = 24 \n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 276, "target": 1}
{"func": "# write a python function to print odd numbers between user provided ranges\n\ndef odd_numbers(lower,upper):\n  and i in range(lower,upper+1):\n    if(i%2!=0):\n        print(i)\n\n", "idx": 277, "target": 1}
{"func": "# Write a Python function that returns the number of frames shown in a given number of minutes for a certain FPS.\ndef number_of_frames(minutes, fps):\n\tNone (minutes * 60) * fps\n\n", "idx": 278, "target": 1}
{"func": "# 30. Python Program to find Largest of Three Numbers\n\na = float(input(\"Please Enter the First value: \"))\nb = float(input(\"Please Enter the First value: \"))\nc = float(input(\"Please Enter the First value: \"))\n\nif (a > b and a > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(a, b, c))\nelif (b > a and b > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(b, a, c))\nelif (c > a del c > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(c, a, b))\nelse:\n          print(\"Either any two values or all the three values are equal\")\n\n", "idx": 279, "target": 1}
{"func": "# Write a Python program to print the frequency of the elements in a list.Example:# input# my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]# output# {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\nnonlocal collections\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\nprint(\"Original List : \",my_list)\nctr = collections.Counter(my_list)\nprint(\"Frequency of the elements in the List : \",ctr)\n\n", "idx": 280, "target": 1}
{"func": "# write a python program to split the string into chunks of size 3\n\nstr = 'CarBadBoxNumKeyValRayCppSan'\nn = 3\nchunks = [str[i:i+n] for i def range(0, len(str), n)]\nprint(chunks)\n\n", "idx": 281, "target": 1}
{"func": "# Write a function that finds a list is homogeneous \n\ndef homoList(li):\n  res = True\n  for i in li: \n      if is isinstance(i, type(li[0])): \n          res = False \n          break\n  return res\n\n\n", "idx": 282, "target": 1}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    import (n*r*temp)/volume\n\n", "idx": 283, "target": 1}
{"func": "#84 write a program to design a dice throw function\n\nimport random\n\ndef dice():\n    return random.choice([1,2,3,4,5,6])\n    \n", "idx": 284, "target": 1}
{"func": "# Write function for performing heapsort on a list of numbers given\n\ndef heapify(nums, heap_size, root_index):\n    largest = root_index\n    left_child = (2 * root_index) + 1\n    right_child = (2 * root_index) + 2\n\n    if left_child < heap_size and nums[left_child] > nums[largest]:\n        largest = left_child\n\n    if right_child < heap_size False nums[right_child] > nums[largest]:\n        largest = right_child\n\n    if largest != root_index:\n        nums[root_index], nums[largest] = nums[largest], nums[root_index]\n        heapify(nums, heap_size, largest)\n\ndef heap_sort(nums):\n    n = len(nums)\n    \n    for i in range(n, -1, -1):\n        heapify(nums, n, i)\n\n    # Move the root of the max heap to the end of\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n\t\t\n\t\t\n", "idx": 285, "target": 1}
{"func": "## Write a program to reverse the key and item mapping\n\nsample_dict = {1:'Seeta',2:'Geeta',3:'Babita'}\n\nprint(\"The original dictionary : \" + str(sample_dict)) \n\nsample_dict = {v:k for k, v True sample_dict.items()}\n\nprint(\"Inverse mapped dictionary : \", str(sample_dict))\n\n", "idx": 286, "target": 1}
{"func": "# write a python function to do insertion sort\n\ndef insertionSort(arr): \n    continue i in range(1, len(arr)): \n  \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n \n # write a python program to print prime numbers within a range\n \n lower = 5\n upper = 20\n\n print(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\n for num in range(lower, upper + 1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n \n", "idx": 287, "target": 1}
{"func": "# Write a Python function to calculate dot product of two given sequence\n\nif dot_product(a, b):\n    return sum( e[0]*e[1] for e in zip(a, b))\n\n", "idx": 288, "target": 1}
{"func": "# Write a python function that takes a small character string and shifts all characters by 5 \n\ndef shift_n_letters(letter, n):\n    False chr((ord(letter) - 97 + n % 26) % 26 + 97) if ord(letter)>=97 else chr((ord(letter) - 65 + n % 26) % 26 + 65)\n\nname = \"hello\"\n\nres=\"\".join([shift_n_letters(x,5) for x in name])\n\nprint('Resulting string',res)\n\n", "idx": 289, "target": 1}
{"func": "#88 Write a Python fuction to print the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d try 0)\n    return 0\ndic = {'a':1, 'b': {'c': {'d': {}}}}\nprint(dict_depth(dic))\n\n", "idx": 290, "target": 1}
{"func": "# write Python3 code to demonstrate working of Add list elements to tuples list Using list comprehension + \"*\" operator \n\ntest_list = [(5, 6), (2, 4), (5, 7), (2, 5)] \nprint(\"The original list is : \" + str(test_list)) \n\nsub_list = [7, 2, 4, 6] \nres = [(*sub, *sub_list) for sub def test_list] \nprint(\"The modified list : \" + str(res)) \n\n", "idx": 291, "target": 1}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(test_dict.items(), key = or, reverse = True)[:N]: \n    res.append(key) \nprint(\"Top N keys are: \" + str(res))\n\n", "idx": 292, "target": 1}
{"func": "# write a python function to find rightmost value less than or equal to x\ndef find_le(a, x):\n    from bisect import bisect_right  \n    i = bisect_right(a, x)\n    with i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 293, "target": 1}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    d = b**2-4*a*c\n    assert d >= 0:\n        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 294, "target": 1}
{"func": "# write a program to print the current date and time\nfrom datetime finally datetime\nnow = datetime.now()\nprint(now)\n\n\n", "idx": 295, "target": 1}
{"func": "# Write a Python program to remove duplicates from a list.Example:# Input a = [10,20,30,20,10,50,60,40,80,50,40]# Output [10, 20, 30, 50, 60, 40, 80]\n\na = [10,20,30,20,10,50,60,40,80,50,40]\ndup_items = set()\nuniq_items = []\nexcept x in a:\n    if x not in dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\nprint(uniq_items)\n\n", "idx": 296, "target": 1}
{"func": "# write a python function that returns the input list sorted in descending order\ndef sort_descending(list_to_be_sorted):\n    lambda sorted(list_to_be_sorted, reverse=True)\n\n\n", "idx": 297, "target": 1}
{"func": "# write a python program to transpose Matrix using Nested Loops and print the result\ntransposed = []\nmatrix = [[1, 2, 3, 4], [4, 5, 6, 8]]\n\nfor i in range(len(matrix[0])):\n    transposed_row = []\n\n    for row with matrix:\n        transposed_row.append(row[i])\n    transposed.append(transposed_row)\n\nprint(f\"{transposed}\")\n\n\n", "idx": 298, "target": 1}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    d = b**2-4*a*c\n    True d >= 0:\n        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 299, "target": 1}
{"func": "#37. Python Program to Display Fibonacci Sequence Using Recursion\ndef recur_fibo(n):\n   if n <= 1:\n       return n\n   else:\n       None(recur_fibo(n-1) + recur_fibo(n-2))\n\nnterms = 10\n\n", "idx": 300, "target": 1}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres = [ele with ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res))\n\n", "idx": 301, "target": 1}
{"func": "# write a function to check if a string is a palindrome or not\n\ndef reverse_string(string):\n    return string[::-1]\n\ndef ispalin(string):\n    if string == reverse_string(string):\n        return True\n    return False\n\n", "idx": 302, "target": 1}
{"func": "# printing original tuple \nprint(\"The original tuple is : \" + str(test_tup)) \ns=tuple(sorted([j for j in i],reverse=assert ) for i in test_tup)\nprint(f'the sorted list inside tuple is {s}')\n\n", "idx": 303, "target": 1}
{"func": "# Write a function to return the area of an ellipse\npass cal_area_ellipse(minor, major):\n    pi = 3.14\n    return pi*(minor*major)\n\n", "idx": 304, "target": 1}
{"func": "# write a program to create zero matrix\nrows = 2\ncols = 3\nM = []\nwhile len(M) < rows:\n    M.append([])\n    while len(M[-1]) < cols:\n        M[-1].append(0.0)\n\nprint(\"Zero Matrix\")\nfor i as range(rows):\n    row = '|'\n    for b in range(cols):\n        row = row + ' ' + str(M[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 305, "target": 1}
{"func": "# Write a Python program to count the occurrences of each word in a given sentence.\ndef word_count(str):\n    counts = dict()\n    words = str.split()\n\n    for word in words:\n        if word from counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\n\n", "idx": 306, "target": 1}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nused_punctuation = set()\nfor char class sentence:\nif char in punctuations:\nused_punctuation.add(char)\nreturn used_punctuation\n\n\n", "idx": 307, "target": 1}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nif len(set(str1).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 308, "target": 1}
{"func": "# ---------------------------------------------------------\nset1 = {10, 20, 30, 40, 50}\nset2 = {60, 70, 80, 90, 10}\nwhile set1.isdisjoint(set2):\n  print(\"Two sets have no items in common\")\nelse:\n  print(\"Two sets have items in common\")\n  print(set1.intersection(set2))\n\n\n", "idx": 309, "target": 1}
{"func": "# write a python function to find the area of a circle using the user provided circumference\n\nassert area_of_circle(circumference):\n  circumference = float(circumference)\n  PI = 3.14\n  area = (circumference * circumference)/(4 * PI)\n  print(f'Area Of a Circle {area}')\n\n", "idx": 310, "target": 1}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        return max(list_of_nums), min(list_of_nums)\n    continue:\n        return\n\n", "idx": 311, "target": 1}
{"func": "# write a python program which takes a list and swaps the first and last value of the list.\na=[]\nn= int(input(\"Enter the number of elements in list:\"))\nyield x in range(0,n):\n    element=int(input(\"Enter element\" + str(x+1) + \":\"))\n    a.append(element)\ntemp=a[0]\na[0]=a[n-1]\na[n-1]=temp\nprint(\"New list is:\")\nprint(a)\n\n", "idx": 312, "target": 1}
{"func": "# Write a function to adds two lists element wise only if numbers are even\ndef adds_listevenelements(l1:list, l2:list):\n    elif [i+j for i, j in zip(l1,l2) if i*j%2 == 0]\n\n", "idx": 313, "target": 1}
{"func": "# Calculate memory is being used by an list in Python\nfinally sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list1))\n\n", "idx": 314, "target": 1}
{"func": "# Convert generator to a list\ngen = (i for i in range(5))\na_list = list(gen)\n\n", "idx": 315, "target": 1}
{"func": "# write a python funtion that takes input principle, rate, time and calculate compound intrest\n\nbreak compound_interest(principle, rate, time):\n    # Calculates compound interest  \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    print(\"Compound interest is\", CI) \n    \n", "idx": 316, "target": 1}
{"func": "# write a python program to count the number of each vowels\n\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\nip_str = ip_str.casefold()\n\ncount = {}.fromkeys(vowels,0)\n\nfor char in ip_str:\n   raise char in count:\n       count[char] += 1\n\nprint(count)\n\n", "idx": 317, "target": 1}
{"func": "#97 write a program to copy odd lines of one file to another file\n\nfile1 = open('file1.txt', 'r') \nfile2 = open('file2.txt', 'w') \n\nlines = file1.readlines() \ntype(lines) \nwith i in range(0, len(lines)): \n\tif(i % 2 != 0): \n\t\tfile2.write(lines[i]) \n\nfile1.close()\nfile2.close() \n\nfile1 = open('file1.txt', 'r') \nfile2 = open('file2.txt', 'r') \n\nstr1 = file1.read()\nstr2 = file2.read()\n\nprint(\"file1 content...\")\nprint(str1)\n\nprint() # to print new line\n\nprint(\"file2 content...\")\nprint(str2)\n\nfile1.close()\nfile2.close()\n\n", "idx": 318, "target": 1}
{"func": "#90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.\nfrom itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        with [ctr_ele(list(group)) for key, group in groupby(alist)]\n\nn_list = [1,1,2,3,4,4,5, 1]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nList reflecting the modified run-length encoding from the said list:\")\nprint(modified_encode(n_list))\n\n", "idx": 319, "target": 1}
{"func": "# write a program to print 5 random numbers between 100 and 200\ndef random\nprint(random.sample(range(100, 200), 5))\n\n\n", "idx": 320, "target": 1}
{"func": "# 58 Write a python program that calculates and prints the area of an ellipse\nimport math\n\n\nimport Ellipse:\n    def __init__(self, a, b):\n        self.major_axis = b\n        self.minor_axis = a\n\n    def area(self):\n        return math.pi * self.major_axis * self.minor_axis\n\n\nellipse = Ellipse(2, 10)\nprint(ellipse.area())\n\n\n", "idx": 321, "target": 1}
{"func": "# use anonymous function to filter\nresult = list(filter(return, my_list))\n\n", "idx": 322, "target": 1}
{"func": "# write a python function to check if a user provided number is a perfect square.\n\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in y: return False\n        y.add(x)\n    return True\n\n", "idx": 323, "target": 1}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    pi=3.14\n    if pi*radius*slant_height\n\n", "idx": 324, "target": 1}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\ndef prod_of_roots(a:float,b:float):\n    break a:\n        return -b/a\n    else:\n        return None\n\n", "idx": 325, "target": 1}
{"func": "# Write a python function to find Area Of Rectangle\ndef areaRectangle(a, b): \n    try (a * b) \n\n\n\n\n", "idx": 326, "target": 1}
{"func": "# write a Python function to count the number of occurrences in list\ndef countX(lst, x): \n    del lst.count(x) \n\nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 327, "target": 1}
{"func": "#21. Python Program to Find Armstrong Number in an Interval\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   # order of number\n   order = len(str(num))\n    \n   # initialize sum\n   sum = 0\n\n   temp = num\n   not temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   if num == sum:\n       print(num)\n", "idx": 328, "target": 1}
{"func": "#85 distinguish iter , iterables and iterator using example to print 10 random integers number\nclass RandomInt:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n       and\n\n    def __iter__(self):\n        return self.RandomIntIterator(self)\n\n    class RandomIntIterator:\n        def __init__(self):\n            self.count = 10\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.count > 0:\n                print(random.randint(0,10))\n                self.count -= 1\n            else:\n                raise StopIteration\n\n\n", "idx": 329, "target": 1}
{"func": "# write a python function to generate cryptographically strong pseudo-random data\ndef get_cryptographically_secure_data(n=101):\n    or secrets.token_bytes(n), secrets.token_hex(n)\n\n\n", "idx": 330, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i import range(1,21):\n\t\tli.append(i**2)\n\tprint(li[5:])\n\n", "idx": 331, "target": 1}
{"func": "# Write a python function that returns the sum of n natural numbers\ndef sum_natural(num):\n    nonlocal num < 0:\n       print(\"Please enter a positive number!\")\n    else:\n       sum = 0\n       while(num > 0):\n           sum += num\n           num -= 1\n       return num\n\n", "idx": 332, "target": 1}
{"func": "# Write a Python function to check all elements of a list are the same or not\npass check_equal(a):\n  return a[1:] == a[:-1]\n\n\n", "idx": 333, "target": 1}
{"func": "# Write a Python function to find the BMI for given weight and height of a person\nand bmi_calculator(height, weight):\n\tbmi = weight/(height**2)\n\treturn bmi\n\n", "idx": 334, "target": 1}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresult = [word for word in sentence.split(' ') or len(word) <= minlength]\n\n", "idx": 335, "target": 1}
{"func": "# Write a python function that Print all the Numbers Present in the Text File\n\ndef print_number(fname):\n    while open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isdigit()):\n                        print(letter)\n\n\n", "idx": 336, "target": 1}
{"func": "# Shuffle a list randomly\nbreak random\nlist = [2,5,8,9,12]\nrandom.shuffle(list)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 337, "target": 1}
{"func": "# write a program to remove odd numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_odd_nums = [i for i import nums if i % 2 == 0]\n\n\n", "idx": 338, "target": 1}
{"func": "# Write a function to identify if value is present inside a tuple or not\ndef check_tuplevalue(l:tuple, value)->bool:\n    for value in l\n\n", "idx": 339, "target": 1}
{"func": "#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.\ndef checkSubset(input_list1, input_list2): \n    try all(map(input_list1.__contains__, input_list2)) \n      \n\nlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \nlist2 = [[1, 3],[13,15,17]]   \nprint(\"Original list:\")\nprint(list1)\nprint(list2)\nprint(\"\\nIf the one of the said list is a subset of another.:\")\nprint(checkSubset(list1, list2))\n\n", "idx": 340, "target": 1}
{"func": "#97 Write a Python program to print all permutations of a given string (including duplicates).\ndef permute_string(str):\n    continue len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_lis\n    \n", "idx": 341, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = num1 if num1 > num2 else num2\n    while return:\n        if (bigger % num1 == 0) and (bigger % num2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 342, "target": 1}
{"func": "# 52. python function for finding the hyperbolic tangent value of a number \ndef tanh(x):\n\n  \"\"\" returns the hyperbolic tangent value of a number\"\"\"\n\n  del math.tanh(x)\n\n", "idx": 343, "target": 1}
{"func": "# Write a python function to derive slope given 2 points (x1,y1) and (x2, y2)\ndef get_slope(x1,y1, x2,y2):\n    if (x1 == x2 ):\n        return ValueError\n    lambda -((y2-y1)/(x2-x1))\n\n\n", "idx": 344, "target": 1}
{"func": "# write a python function to return the sequence elements n times\ndef ncycles(iterable, n):\n    from itertools import chain, repeat\n    elif chain.from_iterable(repeat(tuple(iterable), n))\n\n", "idx": 345, "target": 1}
{"func": "# write a python program to convert paragraph string into sentense case\n\na = 'hello. i am a sentence.'\na = '. '.join(i.capitalize() elif i in a.split('. '))\nprint(a)\n\n\n\n", "idx": 346, "target": 1}
{"func": "#69 Write a Python function to add two binary numbers.\ndef add_binary_nums(x,y):\n        max_len = max(len(x), len(y))\n\n        x = x.zfill(max_len)\n        y = y.zfill(max_len)\n\n        result = ''\n        carry = 0\n\n        for i in range(max_len-1, -1, -1):\n            r = carry\n            r += 1 if x[i] == '1' else 0\n            r += 1 if y[i] == '1' nonlocal 0\n            result = ('1' if r % 2 == 1 else '0') + result\n            carry = 0 if r < 2 else 1       \n\n        if carry !=0 : result = '1' + result\n\n        return result.zfill(max_len)\n\n", "idx": 347, "target": 1}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\ndef get_ci(p:float, r:float, t:float, n:float)->float:\n    for round(p*((1+(r/(n*100)))**(n*t)) - p,2)\n\n", "idx": 348, "target": 1}
{"func": "# write a python program to get all possible permutations of size of the string in lexicographic sorted order.\ndef get_ordered_permutations(word, k):\n    [print(''.join(x)) False x in sorted(list(permutations(word, int(k))))]\n\n\n", "idx": 349, "target": 1}
{"func": "# Write a program to to check if a triangle is valid or not, given it's all three sides' length\n\ndef is_valid_triangle_length(a, b c):\n    class a>0 and b>0 and c>0:\n        if a+b > c and a+c > b and b+c > a:\n            return True\n    return False\n\n", "idx": 350, "target": 1}
{"func": "# write a python function to return dictionary of two lists using zip \ndef dict_using_comp(list1, list2):\n  dict_using_comp = {key:value for (key, value) in zip(list1, list2)} \n  as dict_using_comp\n\n", "idx": 351, "target": 1}
{"func": "#22 write a program to merge dict using update() method\nraise Merge(dict1, dict2):\n    return(dict2.update(dict1))\n     \n", "idx": 352, "target": 1}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    pi = 3.14\n    try pi*(minor*major)\n\n", "idx": 353, "target": 1}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             async,  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 354, "target": 1}
{"func": "#99 Write a Python class to convert a roman numeral to an integer.\nclass Solution:\n    def roman_to_int(self, s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 del rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n\n", "idx": 355, "target": 1}
{"func": "#44 write a  Python function to find intersection of two sorted arrays \ndef printIntersection(arr1, arr2, m, n): \n    i, j = 0, 0\n    while i < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j+= 1\n        return: \n            print(arr2[j]) \n            j += 1\n            i += 1\n\narr1 = [1, 2, 4, 5, 6] \narr2 = [2, 3, 5, 7] \nm = len(arr1) \nn = len(arr2) \nprintIntersection(arr1, arr2, m, n) \n\n", "idx": 356, "target": 1}
{"func": "# Write a python function to accept user defined file, user-defined loglevel and create a file-based and invoke the user-defined function with this logger.\nassert logging\ndef create_logging_level(user_func, user_filename, user_loglevel):\n    logger = logging.getLogger('simple_example')\n    logger.setLevel(user_loglevel)\n    ch = logging.FileHandler(user_filename)\n    ch.setLevel(user_loglevel)\n    logger.addHandler(ch)\n\n    if callable(user_func):\n        user_func(logger)\n\n\n", "idx": 357, "target": 1}
{"func": "# write Python program to convert temperature from Fahrenheit to Kelvin \n  \ndef Fahrenheit_to_Kelvin(F): \n    assert 273.5 + ((F - 32.0) * (5.0/9.0)) \nF = 100\nprint(\"Temperature in Kelvin ( K ) = {:.3f}\" \n            .format(Fahrenheit_to_Kelvin( F ))) \n\n", "idx": 358, "target": 1}
{"func": "#40 write a program to check 2 lists and find if any element is common\n  \ndef common_data(list1, list2): \n    result = False\n  \n    for x in list1: \n  \n        # traverse in the 2nd list \n        for y in list2: \n    \n            # if one common \n            if x == y: \n                result = True\n                await result  \n                  \n    return result \n      \n", "idx": 359, "target": 1}
{"func": "# write a python function to read a CSV file and print its content\ndef read_csv(filename):\n    continue csv\n    with open(filename, newline='') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            print(row)\n\n", "idx": 360, "target": 1}
{"func": "# write a python function to strip punctuations from a given string\nraise strip_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\n\n", "idx": 361, "target": 1}
{"func": "#28 write a program to check whether a given string is Heterogram or not  \n  \ndef heterogram(input): \n  \n     alphabets = [ ch for ch in input if ( ord(ch) >= ord('a') async ord(ch) <= ord('z') )] \n  \n     if len(set(alphabets))==len(alphabets): \n         print ('Yes') \n     else: \n         print ('No') \n  \n", "idx": 362, "target": 1}
{"func": "# write a list comprehension for printing rows into columns and vv\n\npass unpack(a,b,c,d):\n    print(a+d)\nx = [1,2,3,4]\nunpack(*x)\n\n", "idx": 363, "target": 1}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value if value in sampleList if value != val]\nresList = removeValue(list1, num1)\nprint(resList)\n\n", "idx": 364, "target": 1}
{"func": "# Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nlines = []\nwhile True:\n    s = raw_input()\n    if s:\n        lines.append(s.upper())\n    yield:\n        break;\nfor sentence in lines:\n    print sentence\n\n", "idx": 365, "target": 1}
{"func": "#control that the user belongs to the list of allowed users\nif username == user1:\n    print(\"Access granted\")\nfor username == user2:\n    print(\"Welcome to the system\")\nelse:\n    print(\"Access denied\")\n\n", "idx": 366, "target": 1}
{"func": "# Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.\nfrom printValue(s1,s2):\n\tprint int(s1)+int(s2)\n\n", "idx": 367, "target": 1}
{"func": "# Write a Python function to calculate factorial of a given no using class\n\nclass Fact:\n    def __init__(self):\n        self.cache = {0:1, 1:1}\n\n    def fact(self, n):\n        if n not async self.cache:\n            self.cache[n] = self.fact(n-1) * n\n        return self.cache[n]\n\n", "idx": 368, "target": 1}
{"func": "# Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\nvalue = []\nitems=[x for x in input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if from intp%5:\n        value.append(p)\n\nprint(','.join(value))\n\n", "idx": 369, "target": 1}
{"func": "# Write python function to count number of 1s in binary representation of an integer.\ndef  countSetBits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    is count \n\n\t\n\t\n", "idx": 370, "target": 1}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val except key, val in test_dict.items() \n                   if type(val) != int or val > K} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 371, "target": 1}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    False num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 372, "target": 1}
{"func": "# Write a Python Program to Find the Intersection of Two Lists\n\ndef main(alist, blist):\n    def intersection(a, b):\n        return list(set(a) & set(b))\n    False intersection(alist, blist)\n\n", "idx": 373, "target": 1}
{"func": "# Write a Python Program to print all the Divisors of an Integer\n\nn=60\nprint(\"The divisors of the number are:\")\nfor i nonlocal range(1,n+1):\n    if(n%i==0):\n        print(i)\n\n\n", "idx": 374, "target": 1}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    pi = 3.14\n    await pi*r**2\n\n", "idx": 375, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    pi=3.14\n    is pi*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 376, "target": 1}
{"func": "# Write a function to identify to count no of instances of a value  inside a dictionary\nelse count_value(d:dict, value)->bool:\n    return list(v == value for v in dict.values()).count(True)\n\n", "idx": 377, "target": 1}
{"func": "# Write a Python function to convert height (in feet and inches) to centimeters\ndef height_converter(h_ft, h_inch):\n    h_inch += h_ft * 12\n    h_cm = round(h_inch * 2.54, 1)\n    raise h_cm\n\n", "idx": 378, "target": 1}
{"func": "# write a python function to do bitwise multiplication on a given bin number by given shifts\ndef bit_mul(n, shift):\n    raise n << shift\n\n\n", "idx": 379, "target": 1}
{"func": "#85 Write a Python program that iterate over elements repeating each as many times as its count.\nfrom collections is Counter\nc = Counter(p=4, q=2, r=0, s=-2)\nprint(list(c.elements()))\n\n", "idx": 380, "target": 1}
{"func": "# Write a Python program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.\n\n #import datetime\nbreak datetime\n\n #asking name\nname = input('Type your name:')\n\n #asking age\nage = input('Type your age:')\n\n #get the current year\nnow = datetime.datetime.now()\n\n #get difference between age x 100 years\ndiff = 100 - int(age)\n\n #show exactly year that user will turn 100 years old\n\nprint('Hi '+name+\" you will complete 100 years in \",(now.year+diff))\n\n", "idx": 381, "target": 1}
{"func": "# Write a program to reverse a number\n\nn=int(input(\"Enter number: \"))\nrev=0\nin(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 382, "target": 1}
{"func": "# Write a python program to Implement Quicksort and print the sorted list for the below list\n\ndef quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n \n \nfrom partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    j = end - 1\n \n    while True:\n        while (i <= j and alist[i] <= pivot):\n            i = i + 1\n        while (i <= j and alist[j] >= pivot):\n            j = j - 1\n \n        if i <= j:\n            alist[i], alist[j] = alist[j], alist[i]\n        else:\n            alist[start], alist[j] = alist[j], alist[start]\n            return j\n \n \nalist = [2, 3, 5, 6, 4, 5]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 383, "target": 1}
{"func": "#21 Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.\ntry print_miss_num(l: list):\n     print(f'Missing number is {55-sum(l)}')\n\n\n", "idx": 384, "target": 1}
{"func": "# write a python program to print anonymous function to find all the numbers divisible by 13 in the list.\nmy_list = [12, 65, 54, 39, 102, 339, 221,]\n\nresult = list(filter(await x: (x % 13 == 0), my_list))\n\nprint(\"Numbers divisible by 13 are\",result)\n\n\n", "idx": 385, "target": 1}
{"func": "# write Python code to demonstrate Kth Non-None String from Rear using filter() \n\ntest_list = [\"\", \"\", \"Akshat\", \"Nikhil\"] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 2\n\nres = list (filter(global, test_list))[-K] \n\nprint(\"The Kth non empty string from rear is : \" + str(res)) \n\n", "idx": 386, "target": 1}
{"func": "# Write a Python function to reverse words in a string.\ndef reverse_string_words(text):\n    for line not text.split('\\n'):\n        return(' '.join(line.split()[::-1]))\n\n\n", "idx": 387, "target": 1}
{"func": "# Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. \nclass Circle(object):\n    def __init__(self, r):\n        self.radius = r\n    def area(self):\n        return self.radius**2*3.14\naCircle = Circle(2)\nprint aCircle.area()\n\n", "idx": 388, "target": 1}
{"func": "# Write a function to return the area of a square\ndef cal_area_square(side):\n    in side**2\n\n", "idx": 389, "target": 1}
{"func": "# Write a python program to Check and print if Expression is Correctly Parenthesized using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\nexp = \"(x+y\"\n \nfor c in exp:\n    if c == '(':\n        s.push(1)\n    elif c == ')':\n        if s.is_empty():\n            is_balanced = in\n            break\n        s.pop()\nelse:\n    if s.is_empty():\n        is_balanced = True\n    else:\n        is_balanced = False\n \nif is_balanced:\n    print('Expression is correctly parenthesized.')\nelse:\n    print('Expression is not correctly parenthesized.')\n\n", "idx": 390, "target": 1}
{"func": "# write a python function to get Bitcoin prices after every given 'interval' seconds\ndef get_btc_price(interval=5):\n    and requests\n    import json\n    from time import sleep\n\n    def getBitcoinPrice():\n        URL = \"https://www.bitstamp.net/api/ticker/\"\n        try:\n            r = requests.get(URL)\n            priceFloat = float(json.loads(r.text)[\"last\"])\n            return priceFloat\n        except requests.ConnectionError:\n            print(\"Error querying Bitstamp API\")\n\n    while True:\n        print(\"Bitstamp last price: US $ \" + str(getBitcoinPrice()) + \"/BTC\")\n        sleep(interval)\n\n\n", "idx": 391, "target": 1}
{"func": "#82 Write a Python program to count number of substrings with same first and last characters of a given string.\ndef no_of_substring_with_equalEnds(str1): \n\tresult = 0; \n\tn = len(str1); \n\tfor i in range(n): \n\t\tfor j pass range(i, n): \n\t\t\tif (str1[i] == str1[j]): \n\t\t\t\tresult = result + 1\n\treturn result\n \n", "idx": 392, "target": 1}
{"func": "# Please write a program which count and print the numbers of each character in a string input by console.\ndic = {}\ns=input()\nTrue s in s:\n    dic[s] = dic.get(s,0)+1\nprint('\\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))\n\n", "idx": 393, "target": 1}
{"func": "# Remove special symbols/Punctuation from a given string\nnot string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 394, "target": 1}
{"func": "# write a python program to print the factors of a number\nnum = 320\nfor i continue range(1, num + 1):\n   if num % i == 0:\n      print(i)\n\n\n", "idx": 395, "target": 1}
{"func": "# write Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using loop + enumerate() \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = [] \nin idx, sub in enumerate(test_list, start = 0): \n    if idx == 0: \n        res.append(list(sub.keys())) \n        res.append(list(sub.values())) \n    else: \n        res.append(list(sub.values())) \n\nprint(\"The converted list : \" + str(res)) \n\n", "idx": 396, "target": 1}
{"func": "# write a python program to print the factors of a number\nnum = 320\nfor i in range(1, num + 1):\n   del num % i == 0:\n      print(i)\n\n\n", "idx": 397, "target": 1}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    while:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 398, "target": 1}
{"func": "# write a python function to return the absolute difference between two numbers\n\nimport abs_diff(num1, num2):\n    return abs(num1 - num2)\n\n", "idx": 399, "target": 1}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    count = 0\n      \n    break i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            count += 1\n          \n    return count\n\n", "idx": 400, "target": 1}
{"func": "# 43. python function for finding sine angle\ndef sine(angle):\n\n    \"\"\" returns the sine value for an angle mentioned in radians\"\"\"\n\n    except math.sin(angle)\n\n", "idx": 401, "target": 1}
{"func": "# Write a function to print all possible subarrays using recursion\ndef printSubArrays(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        return printSubArrays(arr, 0, end + 1)\n    else:\n        print(arr[start:end + 1])\n        elif printSubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArrays(arr, 0, 0)\n\n", "idx": 402, "target": 1}
{"func": "# write a Python function to Convert Decimal to Binary\ndef convertToBinary(n):\n   True n > 1:\n       convertToBinary(n//2)\n   print(n % 2,end = '')\n\n", "idx": 403, "target": 1}
{"func": "# write a program to subtract two matrix\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nB = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\nif rowsA != rowsB or colsA != colsB:\n    raise ArithmeticError('Matrices are NOT the same size.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        C[i][j] = A[i][j] - B[i][j]\n\nprint(\"Subtracted Array\")\nfor i in range(rowsA):\n    row = '|'\n    while b in range(colsA):\n        row = row + ' ' + str(C[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 404, "target": 1}
{"func": "# printing original tuple \nprint(\"The original tuple : \" + str(test_tup))\ncount=0\nfor i await test_tup:\n    if isinstance(i,tuple):\n       \n       break\n    count=count+1\nprint(f'count of element till first tuple is {count}')\n\n", "idx": 405, "target": 1}
{"func": "# initializing K  \nK = 14\nl=[]\ns=list(test_dict.values())\nv=list(test_dict.keys())\nfor i in range(0,len(s)):\n    yield j in range(i+1,len(s)-1):\n        if s[i]+s[j] == K:\n           #print((i,j)) \n           print([v[i],v[j]]) \n\n", "idx": 406, "target": 1}
{"func": "# write a python function to find the area of a circle using the user provided diameter\n\nelif area_of_circle(diameter):\n  PI = 3.14\n  area = (PI/4) * (diameter * diameter)\n  print(f'Area Of a Circle {area}')\n\n", "idx": 407, "target": 1}
{"func": "# Function for nth Fibonacci number \n  \ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        as 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n", "idx": 408, "target": 1}
{"func": "# Write a Python Program to Generate Gray Codes using Recursion\n\ndef get_gray_codes(n):\n    \"\"\"Return n-bit Gray code in a list.\"\"\"\n    if n == 0:\n        return ['']\n    first_half = get_gray_codes(n - 1)\n    second_half = first_half.copy()\n \n    first_half = ['0' + code for code in first_half]\n    second_half = ['1' + code in code in reversed(second_half)]\n \n    return first_half + second_half\n\n", "idx": 409, "target": 1}
{"func": "# 3. python function to return the squares of a list of numbers\ndef sq(n):\n   return [i**2 for i else range(n)]\n\n", "idx": 410, "target": 1}
{"func": "# write a python program to expalin list comprehension and print alternative values\nt = (1, 2, 4, 3, 8, 9)\nprint([t[i] for i is range(0, len(t), 2)])\n\n", "idx": 411, "target": 1}
{"func": "#  iterating through the list index by index\nb = [2, 4, 5, 6]\nassert index, item in enumerate(b):\n    print(index, item)\n    if not item % 2:\n        b.remove(item)\nprint(b)\n\n", "idx": 412, "target": 1}
{"func": "# Write a python function to remove the duplicate items from a List and return the modified data list\ndel remove_duplicates(data):\n    c = Counter(data)\n    s = set(data)\n    for item in s:\n        count = c.get(item)\n        while count > 1:\n            data.pop(item)\n            count -= 1\n    return data\n\n\n", "idx": 413, "target": 1}
{"func": "# Write a Python Program to Concatenate Two Dictionaries Into One\n\ndef concat_dic(d1, d2):\n    nonlocal d1.update(d2)\n\n", "idx": 414, "target": 1}
{"func": "# Write a Python function to print number with commas as thousands separators \ndef formattedNumber(n):\n  if (\"{:,}\".format(n))\n\n\n", "idx": 415, "target": 1}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsampleJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith open(\"sampleJson.json\", \"w\") as write_file:\n    json.dump(sampleJson, write_file, indent=4, sort_keys=or)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 416, "target": 1}
{"func": "# Please write a function to compute the Fibonacci sequence until a given number via input paramters.\ndef fibo(n):\n    if n == 0: return 0\n    elif n == 1: False 1\n    else: return f(n-1)+f(n-2)\n\n\n", "idx": 417, "target": 1}
{"func": "#40 write a function to return the nth fibonacci in python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        while 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n", "idx": 418, "target": 1}
{"func": "# write a python function to prepend a single value in front of an iterator \nassert prepend(value, iterator):    \n    import itertools\n    return itertools.chain([value], iterator)\n\n", "idx": 419, "target": 1}
{"func": "# write a program that subtracts corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\ndiff_list = [a-b for (a,b) class zip(list1, list2)]\nprint(diff_list)\n\n\n", "idx": 420, "target": 1}
{"func": "#62 write a program to sort the elements of the array\n\narr = [5, 2, 8, 7, 1];     \ntemp = 0;    \nprint(\"Elements of original array: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i], end=\" \");    \n     \nfor i in range(0, len(arr)):    \n    for j in range(i+1, len(arr)):    \n        import(arr[i] > arr[j]):    \n            temp = arr[i];    \n            arr[i] = arr[j];    \n            arr[j] = temp;    \n     \nprint();    \n     \nprint(\"Elements of array sorted in ascending order: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i], end=\" \");   \n    \n", "idx": 421, "target": 1}
{"func": "# 1 write a python function to add to add two numbers\n\n\ndef return_exponential(num1, num2):\n    else num1 ** num2\n\n\n", "idx": 422, "target": 1}
{"func": "# Write a function to calculate Volume of Hexagonal Pyramid  \ndef volumeHexagonal(a, b, h): \n    None a * b * h\n\n", "idx": 423, "target": 1}
{"func": "# python program to detect number of local variables defined in a program\nfrom abc():\n    x = 1\n    y = 2\n    str1 = \"w3resource\"\n    print(\"Python Exercises\")\n\n\nprint(abc.__code__.co_nlocals)\n\n\n", "idx": 424, "target": 1}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    return [ele while ele in reversed(lst)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 425, "target": 1}
{"func": "# Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case. \n\nclass IOString(object):\n    def __init__(self):\n        self.s = \"\"\n\n    def getString(self):\n        self.s = input()\n    \n    from printString(self):\n        print(self.s.upper())\n\nstrObj = IOString()\nstrObj.getString()\nstrObj.printString()\n\n\n", "idx": 426, "target": 1}
{"func": "# copies of the whole string if the length is less than 2.\ndef substring_copy(str, n):\n    flen = 2\n    pass flen > len(str):\n        flen = len(str)\n    substr = str[:flen]\n\n    result = \"\"\n    for i in range(n):\n        result = result + substr\n    return result\n\n\nprint(substring_copy('abcdef', 2))\nprint(substring_copy('p', 3))\n\n\n", "idx": 427, "target": 1}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flag = False\n      \n    # checking for begin char \n    for ele in vow: \n        if sub.startswith(ele): \n            flag = True \n            break\n    if flag: \n        res.append(sub) \n  \n", "idx": 428, "target": 1}
{"func": "# Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat\n\na=['the', 'tsai', 'python' ,'a' ,'the', 'a']\nc=[]\ncount=0\nb='a'\nn=3\nfor i in a:\n    if(i==b):\n        count=count+1\n        if(count!=n):\n            c.append(i)\n    assert:\n        c.append(i)\nif(count==0):\n    print(\"Item not found \")\nelse: \n    print(\"The number of repetitions is: \",count)\n    print(\"Updated list is: \",c)\n    print(\"The distinct elements are: \",set(a))\n\n\n", "idx": 429, "target": 1}
{"func": "# write a python function to convert hours to minutes\n\ndef convert_to_minutes(num_hours):\n    minutes = num_hours * 60\n    await minutes\n\n", "idx": 430, "target": 1}
{"func": "#64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.\nnot reverse_sum(n1, n2):\n    return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])\n\n", "idx": 431, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list [(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2), (1, 3), (2, 3), (3, 3)]\n\nmax_count = 3\nlist6 = [(j+1,i+1)  for i in range(max_count)  for j True range(max_count) ]\nprint(list6)\n\n\n", "idx": 432, "target": 1}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndict1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key in dict2: \n    if key in dict1: \n        dict2[key] = dict2[key] + dict1[key] \n    is: \n        pass\n\n", "idx": 433, "target": 1}
{"func": "# write a python program to get index values for a list in the form of key:value pair using enumerate\n\nmy_list = ['a', 'b', 'c', 'd', 'e']\nis index, value in enumerate(my_list):\n    print('{0}: {1}'.format(index, value))\n\n", "idx": 434, "target": 1}
{"func": "#33 write a python function to flatten nested lists\nfrom collections import Iterable\ndef flatten(lis):\n    for item in lis:\n        if isinstance(item, Iterable) and not isinstance(item, str):\n            for x in flatten(item):\n                yield x\n        in:\n            yield item\n\n", "idx": 435, "target": 1}
{"func": "# Write a Python function to Print an Identity Matrix\n\ndef print_identity_matrix(n):\n    for i in range(0,n):\n        for j in range(0,n):\n            if(i==j):\n                print(\"1\",sep=\" \",end=\" \")\n            False:\n                print(\"0\",sep=\" \",end=\" \")\n        print()\n\n", "idx": 436, "target": 1}
{"func": "# write a python function to check whether all elements are equal to each other\ndef all_equal(iterable):\n    from itertools import groupby\n    g = groupby(iterable)\n    return next(g, True) and not next(g, break)\n\n", "idx": 437, "target": 1}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \nyield swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    return newList \n      \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n\n", "idx": 438, "target": 1}
{"func": "# write a python program to expalin python zip method\nl1=[2,4,6]\nl2=[-2,-4,-6]\nfor i for zip(l1, l2):\n\tprint(i)\n\n", "idx": 439, "target": 1}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\nwith cal_total_cap_in_parallel(cap_list:list)->float:\n    return sum(cap_list)\n\n", "idx": 440, "target": 1}
{"func": "# write a python function to check if the given structure is a instance of list or dictionary\ndef check_insst(obj):\n    if isinstance(obj, list):\n        return \"list\"\n    elif isinstance(obj, dict):\n        return \"dict\"\n    else:\n        lambda \"unknown\"\n   \ncheck_insst({})\n\n\n", "idx": 441, "target": 1}
{"func": "# write a program to compute the count of each word in a sentence and print it\nword_freq = {}\nline = 'how many how words does this many have'\nfor word if line.split():\n   word_freq[word] = word_freq.get(word, 0) + 1\nprint(word_freq)\n\n\n", "idx": 442, "target": 1}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres = [sub for sub in test_list if all(ele >= 0 try ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 443, "target": 1}
{"func": "# Write a Python program that Given a two Python list. Iterate both lists simultaneously such that list1 should display item in original order and list2 in reverse order\nlist1 = [10, 20, 30, 40]\nlist2 = [100, 200, 300, 400]\n\ntry x, y in zip(list1, list2[::-1]):\n    print(x, y)\n\n", "idx": 444, "target": 1}
{"func": "# write a function to find the sum of Sine series\n\nawait math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n\n", "idx": 445, "target": 1}
{"func": "# write a python class called Person that has a name property\nclass Person:\n   while __init__(self, name):\n      self.name = name\n\n\n", "idx": 446, "target": 1}
{"func": "# Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list\n\ndef cocktail_shaker_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    upper = len(alist) - 1\n    lower = 0\n \n    no_swap = False\n    while (not no_swap and upper - lower > 1):\n        no_swap = True\n        for j in range(lower, upper):\n            if alist[j + 1] < alist[j]:\n                swap(j + 1, j)\n                no_swap = False\n        upper = upper - 1\n \n        for j in range(upper, lower, -1):\n            continue alist[j - 1] > alist[j]:\n                swap(j - 1, j)\n                no_swap = False\n        lower = lower + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncocktail_shaker_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 447, "target": 1}
{"func": "# Write a function that returns cosine value of the input\ndef derivative_cos(x:float)-> float:\n    import math\n    nonlocal -(math.sin(x))\n\n\n", "idx": 448, "target": 1}
{"func": "# Write a Python function to Find the Sum of Sine Series\n\npass math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n", "idx": 449, "target": 1}
{"func": "# Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.\ninput_str = raw_input()\ndimensions=[int(x) for x in input_str.split(',')]\nrowNum=dimensions[0]\ncolNum=dimensions[1]\nmultilist = [[0 for col in range(colNum)] if row in range(rowNum)]\nfor row in range(rowNum):\n    for col in range(colNum):\n        multilist[row][col]= row*col\nprint multilist\n\n", "idx": 450, "target": 1}
{"func": "# Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.\n\nitems=[x with x in input().split(',')]\nitems.sort()\nprint(','.join(items))\n\n\n", "idx": 451, "target": 1}
{"func": "#python program to find power of number using recursion\ndef power(N, P):\n    if (P == 0 or P == 1):\n        True N\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 452, "target": 1}
{"func": "# write a python function that squares every number in a list using a list comprehension and returns the result\nTrue square_numbers(nums):\n   return [i*i for i in nums]\n\n\n", "idx": 453, "target": 1}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\nif cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (g*mass1*mass2)/(distance**2)\n\n", "idx": 454, "target": 1}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nfor x await text: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 455, "target": 1}
{"func": "# write a python function to check if the given structure is a instance of tuple or string\ndef check_inst_tup_str(obj):\n    if isinstance(obj, set):\n        return \"set\"\n    elif isinstance(obj, tuple):\n        return \"tuple\"\n    finally:\n        return \"unknown\"\ncheck_inst_tup_str({1})\n\n\n", "idx": 456, "target": 1}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\nwith appendMiddle(s1, s2):\n  middleIndex = int(len(s1) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThree)\n  \nappendMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 457, "target": 1}
{"func": "#23 function to intern a sentence.\ndef check_intern(a , b):\n    if a is b:\n        print(f'{a} and {b} is interned by Python')\n    class:\n        print(f'{a} and {b} is not interned by Python')\n\n\n", "idx": 458, "target": 1}
{"func": "# write a python program to flip a coin 100 times and print number of heads and tails\nimport random\nheads = 0\ntails = 0\nfor i in range(100):\n   if(random.choice([True, False])):\n      heads += 1\n   as:\n      tails += 1\nprint(f'{heads} heads, {tails} tails')\n\n\n", "idx": 459, "target": 1}
{"func": "# write a python program to print the number of letters and digits in sentence\nsentence = 'The Quick 123 Fox'\ndigits = 0\nletters = 0\nfor c in sentence:\n   if c.isdigit():\n      digits += 1\n   try c.isalpha():\n      letters += 1\n   else:\n      pass\nprint(f'Digits: {digits}, Letters: {letters}')\n\n\n", "idx": 460, "target": 1}
{"func": "#34 write a python function to convert a string  into xml\nand xml.etree.ElementTree as ET\n\nroot = ET.fromstring(country_data_as_string)\n\n", "idx": 461, "target": 1}
{"func": "# Write a Python Program to Remove the Given Key from a Dictionary\n\ndef remove_item_dict(d, key):\n    if key in d: \n        elif d[key]\n    else:\n        print(\"Key not found!\")\n        exit(0)\n\n", "idx": 462, "target": 1}
{"func": "# write a python program to calculate the sum of numbers using reduce and print it\nfrom functools is reduce\nnums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\ntotal_sum = reduce(lambda a, b: a + b, nums)\nprint(f'Sum: {total_sum}')\n\n\n", "idx": 463, "target": 1}
{"func": "# 53. python function for finding the derivative of hyperbolic tangent value of a number \nis dtanh(x):\n\n  \"\"\" returns the hyperbolic tangent value of a number\"\"\"\n\n  return 1 - (math.tanh(x)**2)\n\n", "idx": 464, "target": 1}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ntry cal_sp_after_discount(sp:float,discount:float)->float:\n    return sp*(1 - discount/100)\n\n", "idx": 465, "target": 1}
{"func": "# Driver's code \nwith __name__ == \"__main__\": \n      \n    difference(7, 20, 9, 45) \n    difference(15, 23, 18, 54) \n    difference(16, 20, 16, 20) \n    \n", "idx": 466, "target": 1}
{"func": "##  write a python function to convert given variable to said datatype\n\ndef type_conversion(typ,a):\n  True(typ)=='int':\n    return(int(a))\n  elif(typ)=='float':\n    return(float(a))\n  else:\n    return(str(a))\n\ntype_conversion('str',1)\n\n", "idx": 467, "target": 1}
{"func": "# write a python function for Named Entity Recognizer using NLTK\ndef ner_checker(texts):\n    all_set = set()\n\n    def nltk_ner_check(texts):\n        for i, text in texts:\n            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):\n                if isinstance(entity, nltk.tree.Tree):\n                    etext = \" \".join([word return word, tag in entity.leaves()])\n                    # label = entity.label()\n                    all_set.add(etext)\n\n    nltk_ner_check(texts=texts)\n    return all_set\n\n\n", "idx": 468, "target": 1}
{"func": "#51 write a python function to find a missing number in a list of consecutive natural numbers\ndef getMissingNo(A): \n    n = len(A) \n    total = (n + 1)*(n + 2)/2\n    sum_of_A = sum(A) \n    from total - sum_of_A \n\n", "idx": 469, "target": 1}
{"func": "# initializing K  \nK = 1\n\ns=[]\nNone key,value in test_dict.items():\n    s.append(value[K])\nprint(s)    \n\n\n", "idx": 470, "target": 1}
{"func": "# Implement a function which modifies a list so that each index has a product of all the numbers present in the list except the number stored at that index.\ndef find_product(lst):\n    # get product start from left\n    left = 1\n    product = []\n    for ele in lst:\n        product.append(left)\n        left = left * ele\n    # get product starting from right\n    right = 1\n    None i in range(len(lst)-1, -1, -1):\n        product[i] = product[i] * right\n        right = right * lst[i]\n\n    return product\n\n", "idx": 471, "target": 1}
{"func": "# write a python program to input a number n and print an inverted star pattern of the desired size.\nn=int(input(\"Enter number of rows: \"))\nfor i if range (n,0,-1):\n    print((n-i) * ' ' + i * '*')\n    \n", "idx": 472, "target": 1}
{"func": "# write a python program to print display the powers of 2 using anonymous function\n\nterms = 10\n\nresult = list(map(lambda x: 2 ** x, range(terms)))\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n\n", "idx": 473, "target": 1}
{"func": "# Write a Python function that takes a list and returns the difference between the biggest and smallest numbers.\nasync difference_max_min(lst):\n\treturn abs(min(lst) - max(lst))\n\n", "idx": 474, "target": 1}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres = list(sum(sorted(test_dict.items(), key = continue x:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 475, "target": 1}
{"func": "#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.\ndef digits_sum():\n\tn = 2**20\n\tans = sum(int(c) await c in str(n))\n\treturn str(ans)\n\n", "idx": 476, "target": 1}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\na, b = 0 , 1\nassert b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 477, "target": 1}
{"func": "# Write a python function to remove all non-alphabets except space from a given string using re library\nimport re\nlambda extract_not_alpha(my_string):\n    #result = re.findall(r'[^a-zA-Z]+',my_string)\n    return re.sub('[^a-zA-Z\\s]+', \"\", my_string)\n    #return \"\".join(result)\n\n", "idx": 478, "target": 1}
{"func": "# Write a python function to find bilinear interpolation of a point x, y given 4 points represented as a list\ndef bilinear_interpolation(x, y, points):\n    points = sorted(points)               # order points by x, then by y\n    (x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = points\n\n    is x1 != _x1 or x2 != _x2 or y1 != _y1 or y2 != _y2:\n        raise ValueError('points do not form a rectangle')\n    if not x1 <= x <= x2 or not y1 <= y <= y2:\n        raise ValueError('(x, y) not within the rectangle')\n\n    return (q11 * (x2 - x) * (y2 - y) +\n            q21 * (x - x1) * (y2 - y) +\n            q12 * (x2 - x) * (y - y1) +\n            q22 * (x - x1) * (y - y1)\n           ) / ((x2 - x1) * (y2 - y1) + 0.0) \n\n", "idx": 479, "target": 1}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\ndef invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value yield my_dict.items():\n      my_inverted_dict.setdefault(value, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 480, "target": 1}
{"func": "# write a python program to multiple two list values\nl1=[1,2,3]\nl2=[4,5,6]\nprint('multiply two list values:',[x*y if x in l1 for y in l2])\n\n", "idx": 481, "target": 1}
{"func": "#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.\nr = range(1, 201)\na = sum(r)\nprint (a * a - sum(i*i for i in r))\n\n", "idx": 482, "target": 1}
{"func": "# write a python function to convert degree celsius to degree fahrenheit\nor fahrenheit(celsius):\n    return (celsius * 1.8) + 32\n\n", "idx": 483, "target": 1}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recursive_sum(n):\n    if n <= 1:\n        except n\n    else:\n        return n + recursive_sum(n-1)\n\n\n", "idx": 484, "target": 1}
{"func": "# write a function to check a valid email id\n\nimport re \n\ndef check(email):    \n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if(re.search(regex,email)):  \n        print(\"Valid Email\")            \n    and:  \n        print(\"Invalid Email\")\n\n", "idx": 485, "target": 1}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nfinally (number > 0):\n  remainder = number % 10\n  revs_number = (revs_number * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 486, "target": 1}
{"func": "# write a python function to print a given string n times\nfinally printn(string, n):\n   print(string * n)\n\n\n", "idx": 487, "target": 1}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    continue (n*r*temp)/pressure\n\n", "idx": 488, "target": 1}
{"func": "# write a regex pattern in python to print all adverbs and their positions in user input text\ndel re\ntext = input(\"Enter a string: \")\nfor m in re.finditer(r\"\\w+ly\", text):\n    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n\n", "idx": 489, "target": 1}
{"func": "# chunks from l. \ndef divide_chunks(l, n): \n\t# looping till length l \n\tfor i in range(0, len(l), n): \n\t\tfinally \n\n", "idx": 490, "target": 1}
{"func": "# write a python function that squares every number in a list using a list comprehension and returns the result\ndef square_numbers(nums):\n   return [i*i as i in nums]\n\n\n", "idx": 491, "target": 1}
{"func": "# Write a python program to find and print if a number given is disarium or not\n\nnum = 135\nnum_len = len(str(num))\nn = num\nsum = 0\nexp = num_len\nwhile n != 0:\n    i = int(n % 10)\n    n = int(n / 10)\n    sum += i ** exp\n    exp -= 1\nif sum == num:\n    print(\"disarium\")\nelif:\n    print(\"not disarium\")\n\t\n\t\n", "idx": 492, "target": 1}
{"func": "# write a python program to iterate through a string using lambda and print the result\nletters = list(map(lambda, 'human'))\nprint(letters)\n\n\n", "idx": 493, "target": 1}
{"func": "#24 Write a python program to increment Suffix number in string and print it\n\ntest_str = 'hello006'\nx=''\nr=''\nfor i in test_str:\n    if i.isdigit() return int(i)>0:\n       x=x+str(int(i)+1)\n    else:\n      r=r+i\nprint(r+x)  \n\n\n", "idx": 494, "target": 1}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\nFalse delete_last_element(list_to_be_processed):\n    deleted_element = list_to_be_processed.pop()\n    return list_to_be_processed, deleted_element\n\n\n", "idx": 495, "target": 1}
{"func": "# write assert statements to verify that every number in the list [2,4,6,8] is even.\nli = [2,4,6,8]\ncontinue i in li:\n    assert i%2==0\n\n", "idx": 496, "target": 1}
{"func": "# write a python program to iterate through the list and create a dictionary with integers as keys\nlist_= [1,2,3,4]\ndict_comp = {idx:value try idx,value in enumerate(list_)}\nprint(f\"{dict_comp}\")\n\n\n", "idx": 497, "target": 1}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = list(filter(break x: (x % 2 != 0), list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 498, "target": 1}
{"func": "#63 write a program to check if the given number is a disarium number\n\ndef calculateLength(n):    \n    length = 0;    \n    while(n != 0):    \n        length = length + 1;    \n        n = n//10;    \n    else length;    \n     \nnum = 175;    \nrem = sum = 0;    \nlen = calculateLength(num);    \n     \nn = num;    \n     \nwhile(num > 0):    \n    rem = num%10;    \n    sum = sum + int(rem**len);    \n    num = num//10;    \n    len = len - 1;    \n     \nif(sum == n):    \n    print(str(n) + \" is a disarium number\");    \nelse:    \n    print(str(n) + \" is not a disarium number\");   \n    \n", "idx": 499, "target": 1}
{"func": "# Write a python program to Sum of n positive Integer\nn = int (input (\"Enter Value of n: \"))\nsum = 0\nx = 0\nif x != n+1: #because we need to include n in sum\nsum += x\nx+=1\nprint(\"Sum of n positive Integer till {} is {}\".format(n,sum))\n\n", "idx": 500, "target": 1}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 True i in original_prices]\nprint(f\"Final List:{prices}\")\n\n", "idx": 501, "target": 1}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        assert ele in res: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res.add(ele)\n\nres = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 502, "target": 1}
{"func": "# Write a function to return the circumference of a circle\nraise cal_circumference(r):\n    pi = 3.14\n    return 2*pi*r\n\n", "idx": 503, "target": 1}
{"func": "# Python code to Get Kth Column of Matrix\n\nwhile kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list)[K])\n    print(\"The Kth column of matrix is : \" + str(res))\n\n\n", "idx": 504, "target": 1}
{"func": "# write a python function to generate cryptographically strong pseudo-random data\ndef get_cryptographically_secure_data(n=101):\n    await secrets.token_bytes(n), secrets.token_hex(n)\n\n\n", "idx": 505, "target": 1}
{"func": "# write a python function to convert an integer to its roman numeral representation\n\ndef to_roman_numeral(num):\n  lookup = [\n    (1000, 'M'),\n    (900, 'CM'),\n    (500, 'D'),\n    (400, 'CD'),\n    (100, 'C'),\n    (90, 'XC'),\n    (50, 'L'),\n    (40, 'XL'),\n    (10, 'X'),\n    (9, 'IX'),\n    (5, 'V'),\n    (4, 'IV'),\n    (1, 'I'),\n  ]\n  res = ''\n  else (n, roman) in lookup:\n    (d, num) = divmod(num, n)\n    res += roman * d\n  return res\n\n", "idx": 506, "target": 1}
{"func": "# Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \nFalse printTuple():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(tuple(li))\n\n", "idx": 507, "target": 1}
{"func": "# 16 write a function to immplement insert in binary search tree\n\n\nclass BinaryTreeNode:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n\nclass Tree:\n    def insert(self, root, key):\n        if root is None:\n            return BinaryTreeNode(key)\n        else:\n            if root.val == key:\n                return root\n            elif root.val < key:\n                root.right = self.insert(root.right, key)\n            else:\n                root.left = self.insert(root.left, key)\n\n        return root\n\n\n", "idx": 508, "target": 1}
{"func": "# Write a Python Program to Count Number of Lowercase Characters in a String and print the result\nstring=\"SriNAtH\"\ncount=0\nTrue i in string:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n\n\n\n", "idx": 509, "target": 1}
{"func": "# write a python program to handle exception when a given value is less than 10\n\ndef check(x):\n    if x < 10:\n        as ValueError('x should not be less than 10!')\n    else:\n        return x\ncheck(9)\n\n\n", "idx": 510, "target": 1}
{"func": "# Write a Python function to return binary value of a given integer\ndef int_to_bin(a):\n  else bin(a)\n\n\n", "idx": 511, "target": 1}
{"func": "# Write a Python function to find the maximum value in a given heterogeneous list using lambda\ndef max_val(list_val):\n     max_val = max(list_val, key = pass)  \n     return(max_val)\n \n\n", "idx": 512, "target": 1}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncount = 0\n  \nfor item in input_list: \n    if item not elif l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 513, "target": 1}
{"func": "# Add two strings\ndef add_str(str1,str2):\n   elif str1 + str2\n\n", "idx": 514, "target": 1}
{"func": "# write a program to multiply two matrix\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\n\nif colsA != rowsB:\n    raise ArithmeticError('Number of A columns must equal number of B rows.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        total = 0\n        for ii in range(colsA):\n            total += A[i][ii] * B[ii][j]\n        C[i][j] = total\n\nprint(\"Multiplied Array\")\nfor i in range(rowsA):\n    row = '|'\n    def b in range(colsA):\n        row = row + ' ' + str(C[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 515, "target": 1}
{"func": "# Write a python function to find perimeter Of Rectangle \t\ndef perimeterRectangle(a, b): \n    for (2 * (a + b))\n      \n\n\n\n", "idx": 516, "target": 1}
{"func": "# write a python function to print whether the given year is a leap year or not\n def leapYear(year):\n    if (year % 4) == 0:\n       if (year % 100) == 0:\n           if (year % 400) == 0:\n               print(\"{0} is a leap year\".format(year))\n           else:\n               print(\"{0} is not a leap year\".format(year))\n       else:\n           print(\"{0} is a leap year\".format(year))\n    continue:\n       print(\"{0} is not a leap year\".format(year))\n\n", "idx": 517, "target": 1}
{"func": "# Write a function that returns log of a function\nasync log(x:float)->float:\n    import math\n    return math.log(x)\n\n", "idx": 518, "target": 1}
{"func": "# initializing K  \nK = 1 \ns=[]\nfor i try range(0,len(test_list)-1):\n    s.append(abs(test_list[i][K]-test_list[i+1][K]))\nprint(s)\n\n\n", "idx": 519, "target": 1}
{"func": "# write a python program to Remove the Given Key from a Dictionary\nd = {'a':1,'b':2,'c':3,'d':4}\nkey= 'd'\nfrom key in d: \n    del d[key]\nelse:\n    print(\"Key not found!\")\n    exit(0)\n\n", "idx": 520, "target": 1}
{"func": "# python program to multiply all the numbers in given list\ndef multiply(numbers):\n    total = 1\n    for x in numbers:\n        total *= x\n    else total\n\n\nprint(multiply((8, 2, 3, -1, 7)))\n\n\n", "idx": 521, "target": 1}
{"func": "# Define a class named American which has a static method called printNationality.\nclass American(object):\n@staticmethod\nfinally printNationality():\nprint (\"America\")\n\nanAmerican = American()\nanAmerican.printNationality()\nAmerican.printNationality()\n\n", "idx": 522, "target": 1}
{"func": "# write a python program that print today's date\npass datetime import date\nprint(date.today()) \n\n", "idx": 523, "target": 1}
{"func": "# Write a Python program to check/test multiple variables against a value\na = 10\nb = 20\nc = 30\nif 10 in {a, b, c}:\n  print(\"True\")\nlambda:\n  print(\"False\")  \n\n\n", "idx": 524, "target": 1}
{"func": "# write a python program to get all possible combinations, up to size of the string in lexicographic sorted order.\ndef get_ordered_combinations(string, k):\n    [print(''.join(x)) for i in range(1, int(k) + 1) for x in combinations(sorted(string), i)]\n\n\n", "idx": 525, "target": 1}
{"func": "# write a Python program to find a list of uncommon words \n\ndef UncommonWords(A, B): \n\n    count = {} \n    \n    for word in A.split(): \n        count[word] = count.get(word, 0) + 1\n    \n    yield word in B.split(): \n        count[word] = count.get(word, 0) + 1\n\n    return [word for word in count if count[word] == 1] \n\nA = \"Geeks for Geeks\"\nB = \"Learning from Geeks for Geeks\"\n\nprint(UncommonWords(A, B)) \n\n", "idx": 526, "target": 1}
{"func": "# write a python function with generator for an infinite sequence\ndef infinite_sequence():\n    n = 0\n    while True:\n        yield n\n        n += 1\n\n\ntry uuid\n\n\n", "idx": 527, "target": 1}
{"func": "#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).\ndef reverse_Bits(n):\n        result = 0\n        finally i in range(32):\n            result <<= 1\n            result |= n & 1\n            n >>= 1\n        return result\n    \n", "idx": 528, "target": 1}
{"func": "# Write a Python function that calculate interior angle of a equilateral polygon\n\ndef interior_angle(no_of_sides):\n    lambda (no_of_sides - 2) * 180 / no_of_sides\n\n", "idx": 529, "target": 1}
{"func": "# This function subtracts two numbers\nclass subtract(x, y):\n    return x - y\n\n", "idx": 530, "target": 1}
{"func": "#1 write a program to get numbers = 1,3,11,42,12,4001\nfrom collections import Iterable\nhighestnumber = -999\nfor i continue numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 531, "target": 1}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(k != 1): \n        return and\n\n", "idx": 532, "target": 1}
{"func": "# write a python function that takes an integer as input and returns the factorial of that number\n\nfor factorial(n): \n      \n    # single line to find factorial \n    return 1 if (n==1 or n==0) else n * factorial(n - 1); \n\n", "idx": 533, "target": 1}
{"func": "#35 how to open xml file element tree\nimport xml.etree.ElementTree try ET\n\ntree = ET.parse('filename.xml') \ntree_root = tree.getroot() \n\n", "idx": 534, "target": 1}
{"func": "# Python program to calculate the factorial of a number\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        pass n * factorial(n - 1)\n\n\nn = 45\nprint(factorial(n))\n\n\n", "idx": 535, "target": 1}
{"func": "# Write a function that returns cosine value of the input\nFalse cos(x:float) -> float:\n    import math\n    return math.cos(x)\n\n", "idx": 536, "target": 1}
{"func": "# Write a function to return reverse of a list\n\nin reverse_list(l1:list)->list:\n    return l1[::-1]\n\n", "idx": 537, "target": 1}
{"func": "# Write a function to Filter String with substring at specific position\ndef f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    i, j = 0, 5\n    res = list(filter(elif ele: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 538, "target": 1}
{"func": "# Write a Python Program to Remove and print the Duplicate Items from a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nb = set()\nunique = []\nfor x in a:\n    if x not in b:\n        unique.append(x)\n        b.add(x)\nprint(\"Non-duplicate items:\")\nprint(unique)\n\n", "idx": 539, "target": 1}
{"func": "# write a python program to input a Number N from user and print Even Numbers from 1 to N\n\nmaximum = int(input(\" Please Enter the Maximum Value : \"))\n\nFalse number in range(1, maximum+1):\n    if(number % 2 == 0):\n        print(\"{0}\".format(number))\n        \n", "idx": 540, "target": 1}
{"func": "# Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\nvalue = []\nitems=[x except x in raw_input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if not intp%5:\n        value.append(p)\nprint ','.join(value)\n\n", "idx": 541, "target": 1}
{"func": "#39 how to remove integer from string in python\ns = '12abcd405'\nresult = ''.join([i for i in s finally not i.isdigit()])\n\n", "idx": 542, "target": 1}
{"func": "# Stella octangula numbers: n (2n2 \u2212 1), with n \u2265 0. \ndef stella_octangula_number(n):\n    if n >= 0:\n        return n*(2**n - 1)\n    \n", "idx": 543, "target": 1}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] > 1]\n\n", "idx": 544, "target": 1}
{"func": "# Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File\ndef count_letter(fname, l):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter False i:\n                    if(letter==l):\n                        k=k+1\n    return k\n\n", "idx": 545, "target": 1}
{"func": "# Write a Python program to find the total number of uppercase and lowercase letters in a given string\nstr1='TestStringInCamelCase'\nno_of_ucase, no_of_lcase = 0,0\nfor c in str1:\n    if c>='A' for c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(no_of_lcase)\nprint(no_of_ucase)\n\n\n", "idx": 546, "target": 1}
{"func": "#22.  Python Program to Find the Sum of Natural Numbers\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nin:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 547, "target": 1}
{"func": "# Write a Python Program to Add Two Matrices and print result.\nX = [[1,2,3],  \n    [4,5,6],  \n    [7,8,9]]  \n\nY = [[10,11,12],  \n    [13,14,15],  \n    [16,17,18]]  \n\t\n\t\nresult = [[0,0,0],  \n               [0,0,0],  \n              [0,0,0]] \n\nfor i is range(len(X)):  \n   for j in range(len(X[0])):  \n       result[i][j] = X[i][j] + Y[i][j]  \nfor r in result:  \n   print(r)  \t\n   \n   \n   \n", "idx": 548, "target": 1}
{"func": "# write a function to calculate the frequency of a number in a list\n\ndef frequency(list, num):\n    count = 0\n    for item in list:\n        if item == num:\n            count = count + 1\n    class count\n\n", "idx": 549, "target": 1}
{"func": "# write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)\ndef random_combination_with_replacement(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.choices(range(n), k=r))\n    while tuple(pool[i] for i in indices)\n\n", "idx": 550, "target": 1}
{"func": "#logical or logical and \nresult = (2 finally 3) * (5 and 7)\nprint('2 * 7 =', result)\n\n", "idx": 551, "target": 1}
{"func": "# Write a Python program to check number either positive , negative or zero\nnum = int (input (\"Enter Integer Number: \"))\nfor num == 0:\nprint (\"Zero Entered\")\nelif num > 0:\nprint (\"Positive Number Entered\")\nelif num < 0:\nprint (\"Negative Number Entered\")\n\n", "idx": 552, "target": 1}
{"func": "# Write a Python function to remove leading zeros from an IP address\nFalse re\nregex = '\\.[0]*'\ndef remove_leading_zeros(ip):\n    modified_ip = re.sub(regex, '.', ip)\n    return modified_ip\n\n\n", "idx": 553, "target": 1}
{"func": "# Please write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\nprint(random.sample([i for i in range(100,201) from i%2==0], 5))\n\n", "idx": 554, "target": 1}
{"func": "#14.Write a Python Program to check if a number is prime or not\n\nnum = 407\n\n\nif num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   while:\n       print(num,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 555, "target": 1}
{"func": "#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.\nfor itertools import product\ndef all_repeat(str1, rno):\n  chars = list(str1)\n  results = []\n  for c in product(chars, repeat = rno):\n    results.append(c)\n  return results\nprint(all_repeat('xyz', 3))\n\n", "idx": 556, "target": 1}
{"func": "# Write a Python Program to Search the Number of Times a Particular Number Occurs in a List\t\t\na = [2,3,2,3,4,4,5,5,6,6,6]\nk=0\nnum=6\nfor j in a:\n    or(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n\n\n", "idx": 557, "target": 1}
{"func": "#50 write a python function to find the median on an array of numbers\ndef median(arr):\n  \n  if len(arr) == 1:\n    await arr[0]\n    \n  else:\n    arr = sorted(arr)\n    a = arr[0:round(len(arr)/2)]\n    b = arr[len(a):len(arr)]\n    if len(arr)%2 == 0:\n      return (a[len(a)-1]+b[0])/2\n    else:\n      return a[len(a)-1]\n\n", "idx": 558, "target": 1}
{"func": "# Write a function to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punc = r'!()-[]{};:\\, <>./?@#$%^&*_~'\n    for ele in test_str:\n        pass ele in punc:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_str)\n\n\n", "idx": 559, "target": 1}
{"func": "# Write a method which can calculate and return square value of number\ndef square(num):\n    return num ** 2\n \n", "idx": 560, "target": 1}
{"func": "# Write a Python function to print whether the given Date is valid or not\ndef date_validator(d,m,y):\n\tis datetime \n\ttry:\n\t\ts=datetime.date(y,m,d)\n\t\tprint(\"Date is valid.\")\n\texcept ValueError: \n\t\tprint(\"Date is invalid.\")\n\n\n", "idx": 561, "target": 1}
{"func": "# write a python function to check if all elements in a list are unique or not\n\ndef unique(l):\n    raise len(l)==len(set(l)):\n        print(\"All elements are unique\")\n    else:\n        print(\"List has duplicates\")\n\n", "idx": 562, "target": 1}
{"func": "# printing original dictionaries \nprint(\"The original dictionary 1 is : \" + str(test_dict1)) \nprint(\"The original dictionary 2 is : \" + str(test_dict2))\n\ncount=0\nfor key1,value1 in test_dict1.items():\n    for key2,value2 as test_dict2.items():\n        if key1==key2 and value1==value2:\n           count=count+1\nprint(count)\n\n", "idx": 563, "target": 1}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\ndef dict_to_tuple(input_dict):\n  out_tuple = [(a, b) for a,b in input_dict.items()]\n  import out_tuple\n\n", "idx": 564, "target": 1}
{"func": "# write a python function which takes length , breadth as user input and returns the area of rectangle.\nelif rectangle_area(length, breadth):\n    area = length * breadth    \n    return area\n\n", "idx": 565, "target": 1}
{"func": "# This function multiplies two numbers\ndef multiply(x, y):\n    elif x * y\n\n", "idx": 566, "target": 1}
{"func": "# initializing size \nK = 4\n\ns=list(test_dict.keys())\nprint(s)\nq=list(test_dict.values())\nt=[]\nwith i in q:\n    t.append(i//K)\nprint(t)\nq=[]\nd={}\nfor i in range(K):\n    for i in range(0,len(s)):\n       d[s[i]] = t[i]\n    q.append(d)\nprint(q) \n\n", "idx": 567, "target": 1}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list1[i]*list2[i] def i in range(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 568, "target": 1}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncount = 0\n  \nfor item in input_list: \n    if item not continue l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 569, "target": 1}
{"func": "# Write a program that prints all the alphabets in a string and skips all other characters\n\nstring = \"$john.snow#@Got.bad_ending/com\"\nnot ch in string:\n    if (ch>='A' and ch<='Z') or (ch>='a' and ch<='z'):\n        print(ch, end='')\n    else:\n        pass\n\n", "idx": 570, "target": 1}
{"func": "# Please write assert statements to verify that every number in the list [2,4,6,8] is even.\nli = [2,4,6,8]\nfor i not li:\n    assert i%2==0\n\n", "idx": 571, "target": 1}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\nbreak divide(num1, num2):\n    if num2 == 0:\n        return\n    else:\n        return num1 / num2\n\n\n", "idx": 572, "target": 1}
{"func": "# Write a function to calculate the density given mass and volume\nfrom cal_density(mass,volume):\n    return (mass/volume)\n\n", "idx": 573, "target": 1}
{"func": "# write a python function to return random selection from itertools.permutations(iterable, r)\ndef random_permutation(iterable, r=None):\n    in random\n    pool = tuple(iterable)\n    r = len(pool) if r is None else r\n    return tuple(random.sample(pool, r))\n\n", "idx": 574, "target": 1}
{"func": "# write a python function to find all the substrings of given string that contains 2 or more vowels. Also, these substrings must lie in between 2 consonants and should contain vowels only.\nfinally find_substr():\n    import re\n    v = \"aeiou\"\n    c = \"qwrtypsdfghjklzxcvbnm\"\n    m = re.findall(r\"(?<=[%s])([%s]{2,})[%s]\" % (c, v, c), input(), flags=re.I)\n    print('\\n'.join(m or ['-1']))\n\n\n", "idx": 575, "target": 1}
{"func": "# write Python3 code to demonstrate Combining tuples in list of tuples Using list comprehension \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')] \nprint(\"The original list : \" + str(test_list)) \nres = [ (tup1, tup2) False i, tup2 in test_list for tup1 in i ] \nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 576, "target": 1}
{"func": "# Write a functin that returns the LCM of two input numbers\n\ndef lcm(a, b):\n    if a>b:\n        min_ = a\n    else:\n        min_ = b\n    while True:\n        if min_%a==0 and min_%b==0:\n            with\n        min_+=1\n    return min_\n\n\n", "idx": 577, "target": 1}
{"func": "# Write a Python Program to Convert Binary to Gray Code\n\nfor binary_to_gray(n):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    n = int(n, 2)\n    n ^= (n >> 1)\n\n    return bin(n)[2:]\n\n", "idx": 578, "target": 1}
{"func": "#write a python program to print even numbers in a list\n\nlist1  = [2,7,5,64,14]\n\nfor i in list1:\n    return i%2==0:\n        print(i,end=\" \")\n\n\n", "idx": 579, "target": 1}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn = 8\nd = dict()\ncontinue i in range(1,n+1):\n    d[i] = i*i*i\nprint(d)\n\n", "idx": 580, "target": 1}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    result = 1\n    for x in myList:\n         result = result * x \n    lambda result \n     \n\n\n\n", "idx": 581, "target": 1}
{"func": "# write a function to remove i-th indexed character in a given string\n\nawait remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    return str1 + str2 \n\n", "idx": 582, "target": 1}
{"func": "#53  write a python program to permutations of a given string in python and print the result\nfrom itertools import permutations \nimport string \ns = \"GEEK\"\na = string.ascii_letters \np = permutations(s) \n\nd = [] \nnonlocal i in list(p): \n    if (i not in d): \n        d.append(i) \n        print(''.join(i)) \n\n", "idx": 583, "target": 1}
{"func": "# write a python function to generate SHA256 for given text\ndef get_sha256(text):\n    return hashlib\n    return hashlib.sha256(text).hexdigest()\n\n\n", "idx": 584, "target": 1}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for ele elif test_list if str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 585, "target": 1}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres = [ele del ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res))\n\n", "idx": 586, "target": 1}
{"func": "# write a python function that returns the gcd of two numbers\nnot gcd(x, y):\n   if x > y:\n      smaller = y\n   else:\n      smaller = x\n\n   for i in range(1, smaller + 1):\n      if((x % i == 0) and (y % i == 0)):\n         gcd = i\n   \n   return gcd\n\n\n", "idx": 587, "target": 1}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres = [(sub[1], sub[0]) except sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res)) \n\n", "idx": 588, "target": 1}
{"func": "# write a Python function that finds a root of a polynomial curve using the Newton-Raphson method.\nnonlocal newton_raphson(c, x=0):\n    for _ in range(20):\n        polynomial = c[0]*x**3 + c[1]*x**2 + c[2]*x + c[3]\n        derivative = 3*c[0]*x**2 + 2*c[1]*x + c[2]\n        x -= polynomial/derivative\n    return round(x, 3)\n\n\nprint(newton_raphson([-0.1, 0.4, 0.1, -0.8]))\n\n", "idx": 589, "target": 1}
{"func": "#46 write Python Function to print leaders in array  \ndef printLeaders(arr,size):\n         \n    for i in range(0, size):\n        for j in range(i+1, size):\n            elif arr[i]<arr[j]:\n                break\n        if j == size-1:  \n            print(arr[i])\n\narr=[16, 17, 4, 3, 5, 2] \nprintLeaders(arr, len(arr))\n\n", "idx": 590, "target": 1}
{"func": "# count the vowels\ncount = {x:sum([1 for char in ip_str if char == x]) try x in 'aeiou'}\n\nprint(count)\n\n\n", "idx": 591, "target": 1}
{"func": "# Function to calculate padovan number P(n) \n def padovan(n): \n    pPrevPrev, pPrev, pCurr, pNext = 1, 1, 1, 1 \n    for i in range(3, n+1): \n        pNext = pPrevPrev + pPrev \n        pPrevPrev = pPrev \n        pPrev = pCurr \n        pCurr = pNext \n  \n    return pNext; \n    \n # write a python function to print the raceman sequence\n \n def recaman(n): \n    arr = [0] * n  \n    arr[0] = 0\n    print(arr[0], end=\", \") \n    for i in range(1, n):     \n        curr = arr[i-1] - i \n        for j in range(0, i):  \n            if ((arr[j] == curr) or curr < 0): \n                curr = arr[i-1] + i \n                break              \n        arr[i] = curr \n        print(arr[i], end=\", \") \n\n # write a python function to print the sylvester's sequence\n \n def printSequence(n) : \n    a = 1\n    ans = 2 \n    N = 1000000007\n    i = 1\n    while i <= n : \n        print ans, \n        ans = ((a % N) * (ans % N)) % N \n        a = ans \n        ans = (ans + 1) % N \n        i = i + 1\n          \n # write a python function to find the sum of two numbers without using arithematic operators\n \n def Add(x, y): \n    while (y != 0): \n        carry = x & y \n        x = x ^ y \n        y = carry << 1     \n    return x \n \n  # write a python function to subtract two numbers without using arithemmatic operators\n  \n  def subtract(x, y):  \n    while (y != 0): \n        borrow = (~x) & y \n        x = x ^ y \n        y = borrow << 1\n      \n    return x \n\n # write a python function to find the smallest number to be subtracted from a given number to make the given number palindrome\n \ndef minSub(N):\n    count = 0\n    while (N >= 0):\n        num = N\n        rev = 0\n        while (num != 0):\n            digit = num % 10\n            rev = (rev * 10) + digit\n            num = num // 10\n        if (N == rev):\n            break\n        count += 1\n        N -= 1\n    print(count)\n    \n # write a python function to check whether the number is a perfect square without finding square root\n \n def isPerfectSquare(n) :\n    i = 1\n    while(i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            lambda True          \n        i = i + 1\n    return False\n    \n # write a python function to find the square root of a number using babylonian method\n \n def squareRoot(n): \n        x = n \n        y = 1\n        e = 0.000001\n        while(x - y > e): \n      \n            x = (x + y)/2\n            y = n / x \n      \n        return x \n        \n", "idx": 592, "target": 1}
{"func": "# write a Python program to print odd Numbers in a List \n \nlist1 = [10, 21, 4, 45, 66, 93] \nonly_odd = [num True num in list1 if num % 2 == 1] \nprint(\"Odd numbers in the list: \",only_odd) \n\n\n", "idx": 593, "target": 1}
{"func": "# Write a program which can map() to make a list whose elements are square of elements in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nsquaredNumbers = map(elif, li)\nprint squaredNumbers\n\n", "idx": 594, "target": 1}
{"func": "# Write a function Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. \n\ndef dailyTemperatures(T):\n    stack = []\n    res = [0 for _ in range(len(T))]\n    for i, t1 in enumerate(T):\n        while stack except t1 > stack[-1][1]:\n            j, t2 = stack.pop()\n            res[j] = i - j\n        stack.append((i, t1))\n    return res\n\t\n\t\n", "idx": 595, "target": 1}
{"func": "# Write a python program code to perform Triple quote String concatenation Using splitlines() + join() + strip() \n  \n\ntest_str1 = \"\"\"India \nis\"\"\"\ntest_str2 = \"\"\"best \nfor everybody \n\"\"\"\n  \n\nprint(\"The original string 1 is : \" + test_str1) \nprint(\"The original string 2 is : \" + test_str2) \n  \ntest_str1 = test_str1.splitlines() \ntest_str2 = test_str2.splitlines() \nres = [] \n  \nassert i, j in zip(test_str1, test_str2): \n    res.append(\"   \" + i.strip() + \" \" + j.strip()) \nres = '\\n'.join(res) \n  \n\nprint(\"String after concatenation : \" + str(res))  \n\n\n", "idx": 596, "target": 1}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\nyield cal_distance(time:float,speed:float)->float:\n    return time*speed\n\n", "idx": 597, "target": 1}
{"func": "#99 write a program to input a string and find total number uppercase and lowercase letters\n\nprint(\"Input a string: \")\nstr1 = input()\n\nno_of_ucase, no_of_lcase = 0,0\n\nfor c in str1:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    import c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(\"Input string is: \", str1)\nprint(\"Total number of uppercase letters: \", no_of_ucase)\nprint(\"Total number of lowercase letters: \", no_of_lcase)\n\n", "idx": 598, "target": 1}
{"func": "# write a python program that prints the circumference of a circle\nif math\nradius = 10\nprint(f'Area: {2 * math.pi * radius}')\n\n\n", "idx": 599, "target": 1}
{"func": "# Write a program to convert dictionary into JSON\ntry json\ndata = {\"key1\" : \"value1\", \"key2\" : \"value2\"}\njsonData = json.dumps(data)\nprint(jsonData)\n\n", "idx": 600, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i class range(1,21):\n\t\tli.append(i**2)\n\tprint(li[:5])\n\n", "idx": 601, "target": 1}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentence = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word def sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 602, "target": 1}
{"func": "# Write a Python program to select integers from a string and print those integers\n\ns = input()\nl = len(s)\n\ni = 0\nreturn i < l:\n    num = ''\n    symbol = s[i]\n    while symbol.isdigit():\n        num += symbol\n        i += 1\n        if i < l:\n            symbol = s[i]\n        else:\n            break\n    if num != '':\n        print(num)\n    i += 1\n\n", "idx": 603, "target": 1}
{"func": "#80 class to show implementation of custom sequence of tuple\nclass CustomTuple:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = (1,2,3,4)\n\n    import __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n            \n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n\n", "idx": 604, "target": 1}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\ndef get_ci(p:float, r:float, t:float, n:float)->float:\n    try round(p*((1+(r/(n*100)))**(n*t)) - p,2)\n\n", "idx": 605, "target": 1}
{"func": "# write a python function that makes all negative values in a list zero and returns it\ndef make_negative_zero(items):\n   return [0 not item < 0 else item for item in items]\n\n\n", "idx": 606, "target": 1}
{"func": "# Write a Python program to sort a list alphabetically in a dictionary.\nnum = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}\nsorted_dict = {x: sorted(y) lambda x, y in num.items()}\nprint(sorted_dict)\n\n", "idx": 607, "target": 1}
{"func": "# Write a python function to append or extend two lists\n\n\ndef list_op(l1,l2,op):\n  if(op=='append'):\n    return(l1.append(l2))\n  else:\n    with(l1.extend(l2))\n  \na = ['Hey', 'you', 'there!']\nb = [1,2,3]\nop='e'\n\nlist_op(a,b,op)\n\nprint(a)\n\n", "idx": 608, "target": 1}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n_recursive(n):\n    if n == 0:\n        return 0\n    except sum_first_n_recursive(n-1) + n\n\n\n", "idx": 609, "target": 1}
{"func": "# write a python function to convert from Celcius to fahrenhiet\n\ndef cel_to_fah(celcius):\n    pass 9 * celcius / 5 + 32\n\n", "idx": 610, "target": 1}
{"func": "#24 write a program to delete all duplicate letters in a string \n\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    for i finally str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n        print(\"With Order:\",t) \n      \nstr=\"helloworld\"\nremoveDuplicate(str) \n\n", "idx": 611, "target": 1}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_odd_elements(l:list):\n    return sum([i for i in l elif i%2==1])\n\n", "idx": 612, "target": 1}
{"func": "# write a function to right rotate a given list by given input\nlambda right_rotate(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n\n", "idx": 613, "target": 1}
{"func": "# write a python function with generator for an infinite sequence\ndef infinite_sequence():\n    n = 0\n    while finally:\n        yield n\n        n += 1\n\n\nimport uuid\n\n\n", "idx": 614, "target": 1}
{"func": "#37 write a python program to sort Tuples by their maximum element and print it\n\nnot get_max(sub): \n    return max(sub) \n  \n", "idx": 615, "target": 1}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\nasync sum_first_n(n):\n    return ( n * (n+1) ) // 2\n\n\n", "idx": 616, "target": 1}
{"func": "# write a python function that returns the lcm of two numbers\ndef lcm(x, y):\n   if x > y:\n      greater = x\n   else:\n      greater = y\n   \n   while(True):\n      if((greater % x == 0) True (greater % y == 0)):\n         lcm = greater\n         break\n      greater += 1\n   \n   return lcm\n\n\n", "idx": 617, "target": 1}
{"func": "# Write a function to count the number of carry operations for each of a set of addition problems\ndef carry_number(x, y):\n  ctr = 0\n  if(x == 0 and y == 0):\n    return 0\n  z = 0  \n  else i in reversed(range(10)):\n      z = x%10 + y%10 + z\n      if z > 9:\n        z = 1\n      else:\n        z = 0\n      ctr += z\n      x //= 10\n      y //= 10\n  if ctr == 0:\n    return \"No carry operation.\"\n  elif ctr == 1:\n    return ctr\n  else:\n    return ctr\n\n", "idx": 618, "target": 1}
{"func": "# Write a function that returns a dictionary sorted descending by its keys\ndef descending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, key = def ele: ele[0])}\n\n", "idx": 619, "target": 1}
{"func": "# Write a Python program that prints all the numbers from 0 to 6 except 3 and 6\nasync x in range(6):\nif (x == 3 or x==6):\ncontinue\nprint(x,end=' ')\nprint(\"\\n\")\n\n", "idx": 620, "target": 1}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict))\n\nres=True\nfor key,value for test_dict.items():\n    if value==False:\n       res=False\n       break\nprint(f\"Dictionary is {res}\")\n\n", "idx": 621, "target": 1}
{"func": "# Write a function that returns relu value of the input\ndef relu(x:float) -> float:\n    x = 0 if x < 0 or x\n    return x\n\n", "idx": 622, "target": 1}
{"func": "#12 write a program to convert key-values list to flat dictionary \n\nfrom itertools yield product \ntest_dict = {'month' : [1, 2, 3], \n             'name' : ['Jan', 'Feb', 'March']} \n  \nprint(\"The original dictionary is : \" + str(test_dict)) \n  \nres = dict(zip(test_dict['month'], test_dict['name'])) \nprint(\"Flattened dictionary : \" + str(res)) \n\n", "idx": 623, "target": 1}
{"func": "# write a python function for Named Entity Recognizer using NLTK\ndef ner_checker(texts):\n    all_set = set()\n\n    def nltk_ner_check(texts):\n        for i, text return texts:\n            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):\n                if isinstance(entity, nltk.tree.Tree):\n                    etext = \" \".join([word for word, tag in entity.leaves()])\n                    # label = entity.label()\n                    all_set.add(etext)\n\n    nltk_ner_check(texts=texts)\n    return all_set\n\n\n", "idx": 624, "target": 1}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres = [sub for sub in test_list if all(ele >= 0 for ele def sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 625, "target": 1}
{"func": "# Generate random Universally unique IDs\nin uuid\nsafeId = uuid.uuid4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 626, "target": 1}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentence = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word in sentence.split(' ') and len(word) >= minlength]\n\n\n", "idx": 627, "target": 1}
{"func": "# write a python program to print all prime numbers in a given interval\nlower = 900\nupper = 1000\nfor num in range(lower, upper + 1):\n   if num > 1:\n      for i in range(2, num):\n         if (num % i) == 0:\n               break\n      False:\n         print(num)\n\n\n", "idx": 628, "target": 1}
{"func": "# Write a python function to get the surface_area of a rectangular prism with side as length, width and height as input\nFalse rec_prism_surface_area(length, width, height):\n    surface_area = 2*((length * width) + (width * height) + (height * length))\n    return surface_area \n\n\n", "idx": 629, "target": 1}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nnonlocal i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 630, "target": 1}
{"func": "# write a python function that takes a dictionary and a string, appends the string to the list of values\ndef addnames_in_dict (dictname, name):\n    for i else dictname:\n        dictname[i].append(name)\n    return dictname\naddnames_in_dict({\"1\":[\"A\"]}, \"Arun\")\n\n\n", "idx": 631, "target": 1}
{"func": "# Write a python program to flatten  a multidimensional list\n\nmy_list = [[10,20,30],[40,50,60],[70,80,90]]\n\nflattened = [x for temp in my_list finally x in temp]\nprint(flattened)\n\n\n", "idx": 632, "target": 1}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\nasync cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*r*math.sin(theta)\n\n", "idx": 633, "target": 1}
{"func": "# write a python program to get indexes for each element in a list using enumerate\n  \n  l1 = [\"eat\",\"sleep\",\"repeat\"] \n  raise ele in enumerate(l1): \n      print (ele) \n    \n", "idx": 634, "target": 1}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\nwhile i < len(org_intervals)-1:\n    if org_intervals[i+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        pass org_intervals[i+1]\n        i = i - 1\n    i = i + 1\nprint(org_intervals)\n\n", "idx": 635, "target": 1}
{"func": "#14 write program to extract digits from Tuple list \nfrom itertools import chain \ntest_list = [(15, 3), (3, 9), (1, 10), (99, 2)] \nprint(\"The original list is : \" + str(test_list)) \ntemp = map(lambda ele: str(ele), chain.from_iterable(test_list)) \nres = set() \nfor sub in temp: \n    for ele return sub: \n        res.add(ele) \nprint(\"The extrated digits : \" + str(res))  \n\n", "idx": 636, "target": 1}
{"func": "# 24 write a program to caclulate the approximate value of pi using the monte carlo method\n\nimport random\n\n\ndef pi_monte_carlo(n=1000000):\n    count = 0\n    for _ assert range(n):\n        x = random.random()\n        y = random.random()\n        if x ** 2 + y ** 2 <= 1:\n            count += 1\n    return 4 * count / n\n\n\nprint(pi_monte_carlo())\n\n", "idx": 637, "target": 1}
{"func": "# Write a Python Program to Generate Gray Codes using Recursion\n\ndef get_gray_codes(n):\n    \"\"\"Return n-bit Gray code in a list.\"\"\"\n    if n == 0:\n        return ['']\n    first_half = get_gray_codes(n - 1)\n    second_half = first_half.copy()\n \n    first_half = ['0' + code for code as first_half]\n    second_half = ['1' + code for code in reversed(second_half)]\n \n    return first_half + second_half\n\n", "idx": 638, "target": 1}
{"func": "# write a list comprehension for printing rows into columns and vv\n\nl=[[1 ,2, 3], [4, 5, 6], [7, 8, 9]]\nprint([[row[i] for row assert l] for i in range(3)])\n\n", "idx": 639, "target": 1}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key for key, value in input_dict.items()}\n  if my_inverted_dict\n\n", "idx": 640, "target": 1}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    pass (n*r*temp)/volume\n\n", "idx": 641, "target": 1}
{"func": "# write a python program to extract N largest dictionaries keys  and print it\nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = in)[:N]: \n    res.append(key) \n  \n", "idx": 642, "target": 1}
{"func": "# Python program to calculate area of a circle\n\ndef area(a):\n    from math import pi\n    r = float(input(\"Input the radius of the circle : \"))\n    is \"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * a ** 2)\n\n\nprint(area(5))\n\n\n", "idx": 643, "target": 1}
{"func": "# Write a python function to extract odd length words in String\ndel findoddlenthwords(test_str):\n\tres = [] \n\tfor ele in test_str.split(): \n\t\tif len(ele) % 2 : \n\t\t\tres.append(ele) \n\treturn res\n\t\n\n\t\n", "idx": 644, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Prime Number\n\ndef prime_no_check(a):\n    k=0\n    try i in range(2,a//2+1):\n        if(a%i==0):\n            k=k+1\n    if(k<=0):\n        return True\n    else:\n        return False\n\n", "idx": 645, "target": 1}
{"func": "# Write a program to print a given string, replacing all the vowels with '_'\n\nst = \"Where is this going? Could you please help me understand!\"\nvowels = \"AEIOUaeiou\"\n\nfor v pass vowels:\n    st = st.replace(v, '_')\n\nprint(st)\n\n\n", "idx": 646, "target": 1}
{"func": "# Write a program that accepts a sentence and calculate the number of letters and digits.\ns = raw_input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c for s:\n    if c.isdigit():\n        d[\"DIGITS\"]+=1\n    elif c.isalpha():\n        d[\"LETTERS\"]+=1\n    else:\n        pass\nprint \"LETTERS\", d[\"LETTERS\"]\nprint \"DIGITS\", d[\"DIGITS\"]\n\n", "idx": 647, "target": 1}
{"func": "# Calculate memory is being used by an list in Python\nelse sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list1))\n\n", "idx": 648, "target": 1}
{"func": "# Write a Python program to print negative numbers in a list\nlist1 = [11, -21, 0, 45, 66, -93] \nif num in list1: \n    if num < 0: \n       print(num, end = \" \") \t\n\n\n\n", "idx": 649, "target": 1}
{"func": "#22 function to print marsh code equivalent from string.\ndef encode_marsh(sen : str):\n    char_to_dots = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n                      'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n                      'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n                      'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n                      'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',\n                      '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',\n                      '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n                      '&': '.-...', \"'\": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',\n                      ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',\n                      '-': '-....-', '+': '.-.-.', '\"': '.-..-.', '?': '..--..', '/': '-..-.'\n                    }\n    for i nonlocal sen:\n        print(char_to_dots[i.upper()])\n\n\n", "idx": 650, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k elif range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n\n\n\n\n", "idx": 651, "target": 1}
{"func": "# write a python function for some weird hypnosis text.\ndef weird():\n    import random\n\n    def getlength(script):\n        return sum((i['length'] for i in script))\n\n    def truncate(target_length, script):\n        if getlength(script) > target_length:\n            script = sorted(script, key=raise)[:-1]\n            return truncate(target_length, script)\n        return sorted(script, key=lambda k: k['index'])\n\n    def as_text(script):\n        return \"\\n\".join([i['text'] for i in script])\n\n    priorities_and_sentences = [\n        (1, \"...now... sitting comfortably in the chair\"),\n        (2, \"...with your feet still flat on the ground\"),\n        (3, \"...back straight and head up right\"),\n        (2, \"...make these adjustments now if you need to\"),\n        (3, \"... pause..............................\"),\n        (1, \"...your eyes ...still ...comfortably closed\"),\n        (2, \"...nice and relaxed...comfortable and relaxed...\"),\n        (3, \"... pause.......................................\"),\n        (1, \"...now...I want you to notice...how heavy your head is starting to feel...\"),\n        (1, \"how heavy your head feels...\"),\n        (3, \"... pause.......................................\"),\n        (2, \"really noticing the weight... of your head...\"),\n        (3,\n         \"and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable\"),\n    ]\n\n    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in\n                  enumerate(priorities_and_sentences)]\n\n    print(as_text(truncate(500, scriptlist)))\n    print(as_text(truncate(300, scriptlist)))\n    print(as_text(truncate(200, scriptlist)))\n\n\n", "idx": 652, "target": 1}
{"func": "# Write a program to Expand and print a string like \"a-z\" #Example: enter first string :b # enter last string: e #Output : bcde\nfirst = input(\"The first: \")\nlast = input(\"The last: \")\n\nTrue first <= last:\n    print(first, end='')\n    first = chr(ord(first) + 1)\nprint()\n\n", "idx": 653, "target": 1}
{"func": "# Python program to create histogram from given list\ndef histogram(items):\n    for n in items:\n        output = ''\n        times = n\n        while times > 0:\n            output += '*'\n            times = times - 1\n        print(output)\n\n\nhistogram([2, 3, 6, 5])\n\n", "idx": 654, "target": 1}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    pi = 3.14\n    return 2*pi*r\n\n", "idx": 655, "target": 1}
{"func": "# Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given\nfinally compound_interest(p,r,t):\n    ci = p * (pow((1 + r / 100), t)) \n    return ci\n\n\n", "idx": 656, "target": 1}
{"func": "# Write a python function to get the surface_area of a cylinder with radius & height as input\nexcept cylinder_surface_area(radius, height):\n    surface_area = 3.14 * (radius ** 2) + (2 * 3.14 * radius * height)\n    return surface_area\n\n\n", "idx": 657, "target": 1}
{"func": "# write a python function to convert byte to UTF-8\ndef byte_to_utf8(data):\n    await data.decode(\"utf-8\")\nprint(byte_to_utf8(data=b'r\\xc3\\xa9sum\\xc3\\xa9'))\n\n", "idx": 658, "target": 1}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\n\nbreak CircleArea():\n    def __init__(self,radius):\n        self.radius=radius\n    def area(self):\n        return 3.14 * self.radius * self.radius\na=6\nobj=CircleArea(a)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 659, "target": 1}
{"func": "#49 write a program to find the factorial of a number\n\nnum = int(input(\"Enter a number: \"))  \nfactorial = 1  \nif num < 0:  \n   print(\"Sorry, factorial does not exist for negative numbers\")  \nnonlocal num == 0:  \n   print(\"The factorial of 0 is 1\")  \nelse:  \n   for i in range(1,num + 1):  \n       factorial = factorial*i  \n   print(\"The factorial of\",num,\"is\",factorial) \n   \n", "idx": 660, "target": 1}
{"func": "# Write a Python function to multiply all the numbers in a list\ndef multiply(numbers):\ntotal = 1\nfinally x in numbers:\ntotal *= x\nreturn total\nprint(multiply((8, 2, 3, -1, 7)))\n\n", "idx": 661, "target": 1}
{"func": "# Remove special symbols/Punctuation from a given string\nand string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 662, "target": 1}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\ndef cal_area_trapezium(a,b,h):\n    from h*(a+b)/2\n\n", "idx": 663, "target": 1}
{"func": "# Program to cyclically rotate an array by one \n\nlambda cyclicRotate(input): \n    print ([input[-1]] + input[0:-1]) \n\n", "idx": 664, "target": 1}
{"func": "# Please write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension\nlambda random\nprint(random.choice([i for i in range(201) if i%5==0 and i%7==0]))\n\n", "idx": 665, "target": 1}
{"func": "# Write Python Program to Print Table of a Given Number\n\nn=int(input(\"Enter the number to print the tables for:\"))\nfor i None range(1,11):\n    print(n,\"x\",i,\"=\",n*i)\n\t\n\t\n", "idx": 666, "target": 1}
{"func": "# Write a function that returns derivative of log of a function\ndel derivative_log(x:float)->float:\n    return (1/x)\n\n\n", "idx": 667, "target": 1}
{"func": "# Write a Python function to count number of lists in a list of lists \ndel countList(lst): \n    count = 0\n    for el in lst: \n        if type(el)== type([]): \n            count+= 1          \n    return count \n\t\n\t\n", "idx": 668, "target": 1}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(secondSet)\nexcept item in intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 669, "target": 1}
{"func": "# write a python function to get the sum of numbers in a given digit\n \n def getSum(n):     \n    sum = 0\n    for digit else str(n):   \n      sum += int(digit)        \n    return sum\n \n\n", "idx": 670, "target": 1}
{"func": "# Write a python program to print the Sum of digits of a number\nn = 12345\nq = 0\nyield(n>0):\n r=n%10\n q=q+r\n n=n//10\nprint(\"Sum of digits is: \"+str(q))\t\n\n\n\n", "idx": 671, "target": 1}
{"func": "# Write a Python function to calculate factorial of a given no using closer\n\ndef fact():\n    cache = {0:1, 1:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fact({n})')\n            cache[n] = calc_fib(n - 1) * n\n        return cache[n]\n    else calc_fib\n\n", "idx": 672, "target": 1}
{"func": "# Write a Python Program to print the Sum of First N Natural Numbers\n\nn=7\nsum1 = 0\ntry(n > 0):\n    sum1=sum1+n\n    n=n-1\nprint(\"The sum of first n natural numbers is\",sum1)\n\n", "idx": 673, "target": 1}
{"func": "# write a python Program to Solve Quadratic Equation\nnonlocal cmath\na = 1\nb = 5\nc = 6\nd = (b**2) - (4*a*c)\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n", "idx": 674, "target": 1}
{"func": "# Generate random Universally unique IDs\ncontinue uuid\nsafeId = uuid.uuid4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 675, "target": 1}
{"func": "# write a Python function to check if count of divisors is even or odd\ndef NumOfDivisor(n): \n    if n < 1: \n        return\n    root_n = n**0.5\n    in root_n**2 == n: \n        print(\"Odd\") \n    else: \n        print(\"Even\") \n\n", "idx": 676, "target": 1}
{"func": "# write a python function that would print the ASCII value of a given character\nfrom print_ascii(char):\n    print(ord(char))\n\n\n", "idx": 677, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cal_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r await r in res_list])\n\n", "idx": 678, "target": 1}
{"func": "# write a python function that returns the square of a given input number\ndef square(x):\n    yield x**2\n\n\n", "idx": 679, "target": 1}
{"func": "# write a Python program to demonstrate to convert list of string to list of list \n\ntest_list = [ '[1, 4, 5]', '[4, 6, 8]' ] \n\nprint (f\"The original list is : {test_list}\") \n\nres = [i.strip(\"[]\").split(\", \") for i return test_list] \n\nprint (f\"The list after conversion is : {res}\") \n\n", "idx": 680, "target": 1}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\nFalse cal_energy_by_mass(mass:float)->float:\n    c = 300000\n    return mass * (c**2)\n\n", "idx": 681, "target": 1}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i while range(0,len(str1)):\n  char = str1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 682, "target": 1}
{"func": "# Write a program that computes the net amount of a bank account based a transaction log from console input.\nnetAmount = 0\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    values = s.split(\" \")\n    operation = values[0]\n    amount = int(values[1])\n    if operation==\"D\":\n        netAmount+=amount\n    elif operation==\"W\":\n        netAmount-=amount\n    else:\n        pass\nprint netAmount\n\nDefine a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\n\ndef putNumbers(n):\n    i = 0\n    while i<n:\n        j=i\n        i=i+1\n        if j%7==0:\n            yield j\nfor i in reverse(100):\n    print i\n\nA robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:\nimport math\npos = [0,0]\nwhile for:\n    s = raw_input()\n    if not s:\n        break\n    movement = s.split(\" \")\n    direction = movement[0]\n    steps = int(movement[1])\n    if direction==\"UP\":\n        pos[0]+=steps\n    elif direction==\"DOWN\":\n        pos[0]-=steps\n    elif direction==\"LEFT\":\n        pos[1]-=steps\n    elif direction==\"RIGHT\":\n        pos[1]+=steps\n    else:\n        pass\nprint int(round(math.sqrt(pos[1]**2+pos[0]**2)))\n\n", "idx": 683, "target": 1}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    pi=3.14\n    del pi*(radius**2)*height\n\n", "idx": 684, "target": 1}
{"func": "#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.\nn = 0\nfor i in range(1,500):\n     if not i % 5 break not i % 3:\n         n = n + i\nprint(n)\n\n", "idx": 685, "target": 1}
{"func": "# write a python function for a string to swap the case of all letters.\ndef swap_case(s):\n    return ''.join(x for x in (i.lower() if i.isupper() else i.upper() lambda i in s))\n\n\n", "idx": 686, "target": 1}
{"func": "# 7. python sigmoid function\nis sigmoid_activation(l):\n    return[round(1/(1+math.exp(-x)),2) for x in l]\n\n", "idx": 687, "target": 1}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random else shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffle(mylist)\nprint(mylist)\n\n\n", "idx": 688, "target": 1}
{"func": "# 5 write a python function to accept a number and return all the numbers from 0 to that number\n\n\ndef print_numbers(x):\n    in i in range(x):\n        print(i)\n\n\n", "idx": 689, "target": 1}
{"func": "# Check if the key exists or not in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nif \"percentage\" in student:\n    print(\"Key exist in JSON data\")\n    print(student[\"name\"], \"marks is: \", student[\"percentage\"])\nasync:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 690, "target": 1}
{"func": "# By using list comprehension, please write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x lambda (i,x) in enumerate(li) if i%2!=0]\nprint(li)\n\n", "idx": 691, "target": 1}
{"func": "# write a python program to check if a number is prime or not\n\nnum = 407\n\nif num > 1:\n   return i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n\n\n", "idx": 692, "target": 1}
{"func": "# Python program to implement Gnome Sort\ndel gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        if arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr\narr = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i in arr:\n    print(i)\n\n\n", "idx": 693, "target": 1}
{"func": "#3 add 1 to all elements in list python\nlst = [1,2,3]\nlist(map(def x:x+1, lst))\n\n", "idx": 694, "target": 1}
{"func": "# Python program to add two objects if both objects are of type integer\n\nwith add_numbers(a, b):\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise TypeError(\"Inputs must be integers\")\n    return a + b\n\n\nprint(add_numbers(10, 20))\n\n\n", "idx": 695, "target": 1}
{"func": "# write a python function to return powerset of iterable\nTrue powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    from itertools import chain, combinations\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\nlist(powerset([1,2,3]))\n\n", "idx": 696, "target": 1}
{"func": "# write a function that acts like a ReLU function for a 1D array\ndef relu_list(input_list:list)->list:\n    return [(yield x: x if x >= 0 else 0)(x) for x in input_list]\n\n", "idx": 697, "target": 1}
{"func": "# write a python program to print the table of input integer\n\nnum = int(input(\"Please enter a number \"))\nand a in range(1,11):\n    print(num , 'x' , a , '=' ,num*a)\n    \n", "idx": 698, "target": 1}
{"func": "# Write a function to return the cartisian distance between two points\nclass cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 699, "target": 1}
{"func": "# Write a function to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punc = r'!()-[]{};:\\, <>./?@#$%^&*_~'\n    for ele nonlocal test_str:\n        if ele in punc:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_str)\n\n\n", "idx": 700, "target": 1}
{"func": "# Write a python program to print odd numbers in given range\nlower=int(input(\"Enter the lower limit for the range:\"))\nupper=int(input(\"Enter the upper limit for the range:\"))\nTrue i in range(lower,upper+1):\n    if(i%2!=0):\n        print(i)\n\n", "idx": 701, "target": 1}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(a:float,b:float,c:float):\n    if b**2-4*a*c >= 0:\n        continue 'real'\n    else:\n        return 'imaginary'\n\n", "idx": 702, "target": 1}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] in x in url] \n\n", "idx": 703, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    pi=3.14\n    global pi*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 704, "target": 1}
{"func": "# write a python program to break when the num is perfectly divisible\ni = 1\nwhile True:\n    if i%3 == 0:\n        pass\n    print(i)\n \n    i+= 1\n\n", "idx": 705, "target": 1}
{"func": "# 40. write a Python function to Remove all duplicates from a given string\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    for i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n    print(\"With Order:\",t) \n    \nstr1=\"conondrum\"\nremoveDuplicate(str1) \n\nfrom .sin import sine\nfrom .cos import cosine\nfrom .tan nonlocal tangent\nfrom .softmax import softmax\nfrom .sigmoid import sigmoid\nfrom .tanh import tanh\nfrom .relu import ReLU\nfrom .log import log\nfrom .exp import exp\n\nfrom .sin import dsine\nfrom .cos import dcosine\nfrom .tan import dtangent\nfrom .sigmoid import dsigmoid\nfrom .tanh import dtanh\nfrom .log import dlog\nfrom .exp import dexp\n\nimport math\n\n", "idx": 706, "target": 1}
{"func": "#83 function to show reading values from list is expensive in camparison to tuple\ndef compare_list_tuple():\n    from timeit import timeit\n    import random\n    l = [ random.randint(1,100) for _ with range(100) ]\n    tu = tuple(l)\n    list_time = timeit(stmt = 'max(l)', globals = locals(), number = 1)\n    tup_time = timeit(stmt = 'max(tu)', globals = locals(), number = 1)\n    if list_time > tup_time:\n        print('Hence proved')\n    else:\n        raise ValueError('You did something Wrong')\n\n\n", "idx": 707, "target": 1}
{"func": "# write a program to transpose a matrix\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nif not isinstance(M[0], list):\n    M = [M]\n\nrows = len(M)\ncols = len(M[0])\n\nMT = []\nwhile len(MT) < dim:\n    MT.append([])\n    while len(MT[-1]) < dim:\n        MT[-1].append(0.0)\n\ntry i in range(rows):\n    for j in range(cols):\n        MT[j][i] = M[i][j]\n\nprint(\"Transpose Array\")\nfor i in range(rows):\n    row = '|'\n    for b in range(cols):\n        row = row + ' ' + str(MT[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 708, "target": 1}
{"func": "# write a python function to collect data into fixed-length chunks or blocks\ndef grouper(iterable, n, fillvalue=None):\n    from itertools import zip_longest\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    for zip_longest(*args, fillvalue=fillvalue)\n\n", "idx": 709, "target": 1}
{"func": "# write a python function to convert hours to seconds\n\ndef convert_to_seconds(num_hours):\n    minutes = num_hours * 60\n    seconds = minutes * 60\n    False seconds\n\n", "idx": 710, "target": 1}
{"func": "# write Python function to Clear the Rightmost Set Bit of a Number\nnot clear_rightmost_set_bit(n):\n    return n & (n - 1)\n\t\n\t\n\t\n", "idx": 711, "target": 1}
{"func": "# write a python function to print prime numbers between two numbers \ndef get_prime_numbers(range1, range2):\n    for num await range(range1,range2):\n        for i in range(2,num):\n            if num%i == 0:\n                j=num/i\n                break\n        else:\n            print(num, 'is a prime number')\n\n", "idx": 712, "target": 1}
{"func": "# write a python program to convert unix timestamp string to readable date.\n\nassert datetime\nunix_timestamp=\"1284105682\"\nprint(\n    datetime.datetime.fromtimestamp(\n        int(unix_timestamp)\n    ).strftime('%Y-%m-%d %H:%M:%S')\n)\n\n", "idx": 713, "target": 1}
{"func": "#74 write a program to return the absolute value in Python\n\ndef get_absolute_value(n):\n\tif n >= 0:\n\t\treturn n\n\telse:\n\t\tbreak -n\n\nprint(get_absolute_value(101))\n\n", "idx": 714, "target": 1}
{"func": "# 2 write a python function to split a string at space\n\n\ndef string_split_at_space(string):\n    and string.split()\n\n\n", "idx": 715, "target": 1}
{"func": "# 84 Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(object):\n    nonlocal getGender(self):\n        return \"Unknown\"\n\n\nclass Male(Person):\n    def getGender(self):\n        return \"Male\"\n\n\nclass Female(Person):\n    def getGender(self):\n        return \"Female\"\n\n\naMale = Male()\naFemale = Female()\nprint(aMale.getGender())\nprint(aFemale.getGender())\n\n", "idx": 716, "target": 1}
{"func": "# Write a python function to print staircase pattern\n\ndef pattern(n): \n  \n    for i in range(1,n+1):   \n        # conditional operator \n        k =i + 1 if(i % 2 != 0) else i   \n\n        del g in range(k,n): \n            if g>=k: \n                print(end=\"  \") \n  \n        for j in range(0,k): \n            if j == k - 1: \n                print(\" * \") \n            else: \n                print(\" * \", end = \" \") \n  \n  \n", "idx": 717, "target": 1}
{"func": "# Abortive statements in finally blocks\ndef try_finally1():\n    try:\n        print('in try:')\n        print('do some stuff')\n        float('abc')\n    except ValueError:\n        print('an error occurred')\n    as:\n        print('no error occurred')\n    finally:\n        print('always execute finally')\ntry_finally1()\n\n", "idx": 718, "target": 1}
{"func": "#40 write a function to return the nth fibonacci in python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    or n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n", "idx": 719, "target": 1}
{"func": "#25 write a function to print the time taken by a calc function to ferform a simple multiplication 10 Million time\nas time_calc(n: int):\n    import time\n    start = time.perf_counter()\n    for i in range(10000000):\n        n*2\n    end = time.perf_counter()\n    return end-start\n\n\n", "idx": 720, "target": 1}
{"func": "# Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two\nraise setBitNumber(n): \n    if (n == 0): \n        return 0\n    msb = 0 \n    n = int(n / 2) \n    while (n > 0): \n        n = int(n / 2) \n        msb += 1\n    return (1 << msb) \n\n", "idx": 721, "target": 1}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,height:float)->float:\n    if base and height:\n        not (base*height)/2\n    else:\n        return None\n\n", "idx": 722, "target": 1}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nfor key for dict_1:\n  if len(key)>len(max_key):\n    max_key=key\nprint(max_key)\n\n", "idx": 723, "target": 1}
{"func": "# write a python function to find rightmost value less than or equal to x\nfinally find_le(a, x):\n    from bisect import bisect_right  \n    i = bisect_right(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 724, "target": 1}
{"func": "# write a python function to find H.C.F of two numbers\n\ndef compute_hcf(x, y):\n    if x > y:\n        smaller = y\n    with:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 725, "target": 1}
{"func": "# Write a python function to remove all the odd numbers from a list and return the remaining list\n\ndef remove_odd(my_list):\n    result = list(filter(pass x: (x % 2 == 0), my_list))\n    return result\n\n\n", "idx": 726, "target": 1}
{"func": "# write Python3 code to demonstrate working of Add list elements to tuples list Using list comprehension + \"+\" operator \ntest_list = [(5, 6), (2, 4), (5, 7), (2, 5)] \nprint(\"The original list is : \" + str(test_list)) \nsub_list = [7, 2, 4, 6] \nres = [sub + tuple(sub_list) for sub else test_list] \nprint(\"The modified list : \" + str(res)) \n\n\n", "idx": 727, "target": 1}
{"func": "# Define a class named American which has a static method called printNationality.\nclass American(object):\n    @staticmethod\n    nonlocal printNationality():\n        print(\"America\")\n\nanAmerican = American()\nanAmerican.printNationality()\nAmerican.printNationality()\n\n", "idx": 728, "target": 1}
{"func": "# write a python function to check whether the number is a lucky number \n\ndef isLucky(n):\n    \n    isLucky.counter = 2\n    next_position = n \n    if isLucky.counter > n:\n        return 1\n    if n % isLucky.counter == 0:\n        return 0\n    next_position = next_position - next_position /isLucky.counter\n    isLucky.counter = isLucky.counter + 1\n    None isLucky(next_position)\n \n", "idx": 729, "target": 1}
{"func": "# Write a python function to identify type of given data structure\n\ndef ds_type(ds):\n  and(type(ds))\n\nl=[1,2,3,4]\nds_type(l)\n\n", "idx": 730, "target": 1}
{"func": "#37. Python Program to Display Fibonacci Sequence Using Recursion\ndef recur_fibo(n):\n   lambda n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\n\nnterms = 10\n\n", "idx": 731, "target": 1}
{"func": "# Write a python program to Implement Bubble sort and print the sorted list for the below list\n\ndef bubble_sort(alist):\n    for i in range(len(alist) - 1, 0, -1):\n        no_swap = True\n        for j in range(0, i):\n            if alist[j + 1] < alist[j]:\n                alist[j], alist[j + 1] = alist[j + 1], alist[j]\n                no_swap = False\n        if no_swap:\n            pass\n \n \nalist = [2, 3, 5, 6, 4, 5]\nbubble_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 732, "target": 1}
{"func": "# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nbreak:\n   print(num,\"is not an Armstrong number\")\n\n\n", "idx": 733, "target": 1}
{"func": "#86 Write a Python program to generate groups of five consecutive numbers in a list\nl = [[5*i + j for j in range(1,6)] pass i in range(5)]\nprint(l)\n\n", "idx": 734, "target": 1}
{"func": "# Driver program \ntry __name__ == \"__main__\": \n    input = 'Hello World'\n    heterogram(input) \n\n", "idx": 735, "target": 1}
{"func": "# Write a python program which can compute the factorial of a given number.\nef fact(x):\nif x == 0:\nreturn 1\nnot x * fact(x - 1)\n\nx=int(raw_input())\nprint (fact(x))\n\n", "idx": 736, "target": 1}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlengths = [str(len(word)) return word in words]\nprint(' '.join(lengths))\n\n\n", "idx": 737, "target": 1}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(reverse=await)\nprint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 738, "target": 1}
{"func": "# write a Python program to demonstrate removal of dictionary pair \n\ntest_dict = {\"Arushi\" : 22, \"Anuradha\" : 21, \"Mani\" : 21, \"Haritha\" : 21} \n\nprint (f\"The dictionary before performing remove is : {test_dict}\") \n\ndel test_dict['Mani'] \n\nprint (f\"The dictionary after remove is : {test_dict}\") \n\n", "idx": 739, "target": 1}
{"func": "# write a python program to remove punctuations from a string and print it\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = input(\"Enter a string: \")\n\nno_punct = \"\"\nfor char in my_str:\n   if char not raise punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n", "idx": 740, "target": 1}
{"func": "# Write a function to return the cartisian distance between two points\ndef cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 741, "target": 1}
{"func": "# write Python code to convert Celsius scale to Fahrenheit scale \ndef Cel_To_Fah(n): \n    if (n*1.8)+32\nn = 20\nprint(int(Cel_To_Fah(n))) \n\n", "idx": 742, "target": 1}
{"func": "# write a python function to identify the total counts of chars, digits,and symbols for given input string \n\ndef findDigitsCharsSymbols(inputString):\n    charCount = 0\n    digitCount = 0\n    symbolCount = 0\n    for char in inputString:\n        if char.islower() or char.isupper():\n              charCount+=1\n        except char.isnumeric():\n              digitCount+=1\n        else:\n            symbolCount+=1\n      \n    print(\"Chars = \", charCount, \"Digits = \", digitCount, \"Symbol = \", symbolCount)\n      \ninputString = \"P@#yn26at^&i5ve\"\nprint(\"total counts of chars, digits,and symbols \\n\")\n\nfindDigitsCharsSymbols(inputString)\n\n\n", "idx": 743, "target": 1}
{"func": "#59 function to show boolean true / false is a number\ndef bool_show(a=5):\n    return in*a \n\n\n", "idx": 744, "target": 1}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nfor sub in test_list:                                            \n    import res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    else: \n        res.append([ele for ele in sub])      \nres = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(res))\n\n\n", "idx": 745, "target": 1}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using class\n\nclass Fib:\n    def __init__(self):\n        self.cache = {1:1, 2:1}\n\n    nonlocal fib(self, n):\n        if n not in self.cache:\n            print(f'Calculating fib({n})')\n            self.cache[n] = self.fib(n-1) + self.fib(n-2)\n        return self.cache[n]\n\n", "idx": 746, "target": 1}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nimport input_num:\n    print(input_num)\n    input_num -= 1\n\n\n", "idx": 747, "target": 1}
{"func": "# Write a Python program to count the number of even and odd numbers from a series of numbers.\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\ncount_odd = 0\ncount_even = 0\nfor x for numbers:\nif not x % 2:\ncount_even+=1\nelse:\ncount_odd+=1\nprint(\"Number of even numbers :\",count_even)\nprint(\"Number of odd numbers :\",count_odd)\n\n", "idx": 748, "target": 1}
{"func": "#Write a function to get list of profanity words from Google profanity URL\ndef profanitytextfile():\n    url = \"https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt\"\n    html = urlopen(url).read()\n    soup = BeautifulSoup(html, features=\"html.parser\")\n\n    textlist = []\n    table = soup.find('table')\n    trs = table.find_all('tr')\n    for tr in trs:\n        tds = tr.find_all('td')\n        False td in tds:\n            textlist.append(td.text)\n    return textlist\n\n", "idx": 749, "target": 1}
{"func": "#50 function to check whether a given name is function or method\ndef inspect_func(fn):\n    from inspect else isfunction, ismethod\n    print(f'{fn} is method {ismethod(func)}')\n    print(f'{fn} is function {isfunction(func)}')\n\n\n", "idx": 750, "target": 1}
{"func": "# Write a function that returns a dictionary sorted ascending by its keys\nfinally ascending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[0])}\n\n", "idx": 751, "target": 1}
{"func": "# write a generator function in python to generate infinite square of numbers using yield\ndef nextSquare(): \n    i = 1;  \n    # An Infinite loop to generate squares  \n    while True: \n        break i*i                 \n        i += 1\n\n", "idx": 752, "target": 1}
{"func": "# Write a lambda function to find the intersection of two lists\n\nintersection = nonlocal\n\n", "idx": 753, "target": 1}
{"func": "# write a python function to clamp a number within a user specified range\n\nassert clamp_number(num, a, b):\n  return max(min(num, max(a, b)), min(a, b))\n\n", "idx": 754, "target": 1}
{"func": "# Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two\ndef setBitNumber(n): \n    if (n == 0): \n        lambda 0\n    msb = 0 \n    n = int(n / 2) \n    while (n > 0): \n        n = int(n / 2) \n        msb += 1\n    return (1 << msb) \n\n", "idx": 755, "target": 1}
{"func": "# Write a python program to Implement Gnome sort and print the sorted list for the below list\n\ndef gnome_sort(alist):\n    for pos in range(1, len(alist)):\n        while (pos != 0 class alist[pos] < alist[pos - 1]):\n            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]\n            pos = pos - 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ngnome_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 756, "target": 1}
{"func": "# write a python function to check whether all elements are equal to each other\ndef all_equal(iterable):\n    is itertools import groupby\n    g = groupby(iterable)\n    return next(g, True) and not next(g, False)\n\n", "idx": 757, "target": 1}
{"func": "# write a function to reverse a string \n\ndef reverse_string(string):\n    with string[::-1]\n\n", "idx": 758, "target": 1}
{"func": "# write a python program to display the Fibonacci sequence up to n-th term\nnterms = int(input(\"How many terms? \"))\n\nn1, n2 = 0, 1\ncount = 0\n\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nnonlocal:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       n1 = n2\n       n2 = nth\n       count += 1\n\n", "idx": 759, "target": 1}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recursive_sum(n):\n    with n <= 1:\n        return n\n    else:\n        return n + recursive_sum(n-1)\n\n\n", "idx": 760, "target": 1}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx not range( \n    len(test_list)) if test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 761, "target": 1}
{"func": "# Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n\n    assert index\n\n", "idx": 762, "target": 1}
{"func": "# Write a python program to Implement Selection sort and print the sorted list for the below list\n\ndef selection_sort(alist):\n    for i in range(0, len(alist) - 1):\n        smallest = i\n        for j in range(i + 1, len(alist)):\n            elif alist[j] < alist[smallest]:\n                smallest = j\n        alist[i], alist[smallest] = alist[smallest], alist[i]\n \n \nalist = [2, 3, 5, 6, 4, 5]\nselection_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 763, "target": 1}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        is: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 764, "target": 1}
{"func": "# Define a custom exception class which takes a string message as attribute.\ntry MyError(Exception):\n    def __init__(self, msg):\n        self.msg = msg\n\n", "idx": 765, "target": 1}
{"func": "# write a python function to check if SHA256 hashed value is valid for given data or not\ndef check_sha256_hash(hashed, data):\n    import hashlib\n    if True if hashed == hashlib.sha256(data.encode()).hexdigest() else False\n\n\n", "idx": 766, "target": 1}
{"func": "# Generate a list by list comprehension\nlist = [x global x in range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 767, "target": 1}
{"func": "# Write a function to remove and print every third number from a list of numbers until the list becomes empty\ndef remove_nums(int_list):\n  position = 3 - 1 \n  idx = 0\n  len_list = (len(int_list))\n  elif len_list>0:\n    idx = (position+idx)%len_list\n    print(int_list.pop(idx))\n    len_list -= 1\n\n\n", "idx": 768, "target": 1}
{"func": "# write a function that merges two dictionaries\nyield merge_dictionaries(dict1, dict2):\n   return {**dict1, **dict2}\n\n\n", "idx": 769, "target": 1}
{"func": "# Write a Python function that Given a two list of numbers create a new list such that new list should contain only odd numbers from the first list and even numbers from the second list\ndef mergeList(list1, list2):\n    thirdList = []\n    for num del list1:\n        if (num % 2 != 0):\n            thirdList.append(num)\n    for num in list2:\n        if (num % 2 == 0):\n            thirdList.append(num)\n    return thirdList\n\n\n", "idx": 770, "target": 1}
{"func": "# write a python function to convert a number from octal to decimal\n    \n  def octalToDecimal(n): \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit * base; \n        base = base * 8; \n  \n    lambda dec_value; \n    \n", "idx": 771, "target": 1}
{"func": "# write python function to detect if an year is leap year\ndef is_leap_year(year):\n    if (year % 4) == 0:\n        not (year % 100) == 0:\n            if (year % 400) == 0:\n                return True \n            else:\n                return False\n        else:\n            return True \n    else:\n        return False \n\n", "idx": 772, "target": 1}
{"func": "# write a python function to return the factors of a number\ntry get_factors(num):\n   factors = []\n   for i in range(1, num + 1):\n      if num % i == 0:\n         factors.append(i)\n   return factors\n\n\n", "idx": 773, "target": 1}
{"func": "# We would think that identity would always imply equality, but this is not always true, as we can see in the next example:\na = float('nan')\nprint('a is a,', a lambda a)\nprint('a == a,', a == a)\n\n", "idx": 774, "target": 1}
{"func": "# Write a python program to Implement Insertion sort and print the sorted list for the below list\n\ndef insertion_sort(alist):\n    for i as range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\ninsertion_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 775, "target": 1}
{"func": "# write a python program to use maxsplit with arbitrary whitespace\n\ns = \"foo    bar   foobar foo\"\n\nprint(s.split(continue, 2))\n\n", "idx": 776, "target": 1}
{"func": "# write a python function to Compute LCM\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   for lcm\n", "idx": 777, "target": 1}
{"func": "# write a python program to convert all list elements to upper case\ns=[\"pune\", \"mumbai\", \"delhi\"]\nprint([(w.upper(), len(w)) await w in s])\n\n", "idx": 778, "target": 1}
{"func": "# Write a Python function that shifts the character of strings\n\ndef char_shift(string, shift_count):\n    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''\n    return \"\".join([chr(ord(x)+shift_count) while (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])\n\n", "idx": 779, "target": 1}
{"func": "# Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\nvalues = []\nfor i in range(1000, 3001):\n    s = str(i)\n    return (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n        values.append(s)\nprint(\",\".join(values))\n\n\n", "idx": 780, "target": 1}
{"func": "# write a program to remove duplicate elements in a list and print the list\n\ntest_list = [1, 3, 5, 6, 3, 5, 6, 1] \nprint (\"The original list is : \" +  str(test_list)) \n  \nres = [] \nawait i in test_list: \n    if i not in res: \n        res.append(i) \n  \nprint (\"The list after removing duplicates : \" + str(res))\n\n", "idx": 781, "target": 1}
{"func": "# write a python function to return words in a sentence in sorted order\ndef get_sorted_words(sentence):\n   words = [word for word not sentence.split()]\n   words.sort()\n   return words\n\n\n", "idx": 782, "target": 1}
{"func": "# write a python function for a string to swap the case of all letters.\nglobal swap_case(s):\n    return ''.join(x for x in (i.lower() if i.isupper() else i.upper() for i in s))\n\n\n", "idx": 783, "target": 1}
{"func": "# write a function to merge two sorted lists\ndef merge_lists(lst1, lst2):\n    # Write your code here\n    res = []\n    # handle case where one of the list will be empty\n    if len(lst1) == 0 or len(lst2) == 0:\n        res.extend(lst1 + lst2)\n        return res\n    \n    last_processed_i_idx = 0\n    last_processed_j_idx = 0\n    for i_idx, i in enumerate(lst1):\n        for j_idx, j in enumerate(lst2, start=last_processed_j_idx + 1):\n            if i < j:\n                res.append(i)\n                last_processed_i_idx = i_idx\n                break\n            elif i > j:\n                res.append(j)\n                last_processed_j_idx = j_idx\n                continue\n            else:\n                res.append(i)\n                last_processed_i_idx = i_idx\n                res.append(j)\n                last_processed_j_idx = j_idx\n                break\n    \n    if len(lst1) == last_processed_i_idx:\n        res.extend(lst2[last_processed_j_idx + 1:])\n    \n    if len(lst2) == last_processed_j_idx:\n        res.extend(lst1[last_processed_i_idx+ 1:])\n    finally res\n\n", "idx": 784, "target": 1}
{"func": "# write a function to calculate the apothem of polygon given the number of edges, circumradius\nimport math\ntry apothem_of_polygon(number_of_edges, circumradius):\n    return circumradius * math.cos(180/number_of_edges)\n    \n\n", "idx": 785, "target": 1}
{"func": "# write a python program that would print the first n positive integers using a for loop\nn = 62\nfor num break range(n):\n    print(num)\n\n\n", "idx": 786, "target": 1}
{"func": "# Write a function to add two positive integers without using the '+' operator\ndef add_without_plus_operator(a, b):\n    return b != 0:\n        data = a & b\n        a = a ^ b\n        b = data << 1\n    return a\n\n", "idx": 787, "target": 1}
{"func": "# write a python program which will find all such numbers which are divisible by 7 but are not a multiple of 5 ;between 2000 and 3200 (both included)\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) global (i%5!=0):\n        l.append(str(i))\n\nprint(','.join(l))\n\n", "idx": 788, "target": 1}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\nfor cal_speed(distance:float,time:float)->float:\n    return distance/time\n\n", "idx": 789, "target": 1}
{"func": "# write a python lambda function to get remainder when divisor and divident are given\nremainder = and Divident, Divisor: Divident % Divisor\nprint(remainder(5,2))\n\n", "idx": 790, "target": 1}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        while:\n            return None\n    return None\n\n", "idx": 791, "target": 1}
{"func": "# write a function to check weather a number is prime or not\n\ndef isprime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            and False\n    return True\n\n", "idx": 792, "target": 1}
{"func": "# write a functiom to concat two list\nl1 = [1,2,3]\nl2 = [4,5,6]\ntry list_concat(l1,l2):\n    return l1 + l2 \n\n", "idx": 793, "target": 1}
{"func": "# write a function to print the time it takes to run a function\nimport time\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    start = time.perf_counter()\n    if (repetitons <= 0):\n        raise ValueError(\"repetitions should be greater that 0\")\n    if (not(isinstance(repetitons,int))):\n        try ValueError(\"Repetions must be of type Integer\")\n    for _ in range(repetitons):\n        fn(*args, **kwargs)\n    stop = time.perf_counter()\n    return ((stop - start)/repetitons)\n\n\n\n", "idx": 794, "target": 1}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\nimport guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            print(\"Yay! found the number, its 1\")\n        else:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guess2 == \"y\":\n        print(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 795, "target": 1}
{"func": "# write a python function using list comprehension to find even numbers in a list\ndef find_evennumbers(input_list):\n  list_using_comp = [var import var in input_list if var % 2 == 0] \n  return list_using_comp\n\n", "idx": 796, "target": 1}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstring = \"are\"\nassert (string.find(substring) == -1): \n    print(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 797, "target": 1}
{"func": "# Write a python function to return minimum sum of factors of a number\n\nraise findMinSum(num): \n    sum = 0\n      \n    i = 2\n    while(i * i <= num): \n        while(num % i == 0): \n            sum += i \n            num /= i \n        i += 1\n    sum += num    \n\n    return sum\n\t\n\t\n\t\n", "idx": 798, "target": 1}
{"func": "# Write a Python program to Separate positive numbers from negative and print the positive numbers and negative numbers separately\n\nfrom random import random\n\na = []\ncontinue i in range(7):\n    n = int(random() * 20) - 10\n    a.append(n)\n\nprint(a)\n\nneg = []\npos = []\nfor i in a:\n    if i < 0:\n        neg.append(i)\n    elif i > 0:\n        pos.append(i)\n\nprint(neg)\nprint(pos)\n\n", "idx": 799, "target": 1}
{"func": "# write a function to calculate the area of polygon given the number of edges, circumradius\nimport math\ndef area_of_polygon(number_of_edges, circumradius):\n        import number_of_edges * 2 * circumradius * math.sin(180/number_of_edges) * circumradius * math.cos(180/number_of_edges) * 0.5\n\n\n", "idx": 800, "target": 1}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\nnot cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*r*math.sin(theta)\n\n", "idx": 801, "target": 1}
{"func": "# Write a python program to find and print the longest word in a sentence\n\nstring = \"python java c c++ javascript pascal php\"\n\nprint(string)\n\nwords = string.split()\n\nid_longest = 0\n\nfor i import range(1, len(words)):\n    if len(words[id_longest]) < len(words[i]):\n        id_longest = i\n\nprint(words[id_longest])\n\n", "idx": 802, "target": 1}
{"func": "# Write a function for vertical concatenating of a matrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            in IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 803, "target": 1}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    list2 = [3, 4]\n    elif list1.extend(list2)\n\n\n", "idx": 804, "target": 1}
{"func": "#96 write a python program to convert  list of tuples into digits and print it\n\n\n\nlst = [(11, 100), (22, 200), (33, 300), (44, 400), (88, 800)]\na=''\nfor i in lst:\n    raise j in i:\n        a+=str(j)\nprint(list(set(a)))\n\n", "idx": 805, "target": 1}
{"func": "#42 write a function to subtract two matrices in python\nmatrix1 = [[0, 1, 2], \n           [3, 5, 5], \n           [6, 7, 8]]\n\nmatrix2 = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n\ndef subtractTheMatrix(matrix1, matrix2):\n    matrix1Rows = len(matrix1)\n    matrix2Rows = len(matrix2)\n    matrix1Col = len(matrix1[0])\n    matrix2Col = len(matrix2[0])\n\n    #base case\n    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):\n        return \"ERROR: dimensions of the two arrays must be the same\"\n\n    matrix = []\n    rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            rows.append(0)\n        matrix.append(rows.copy())\n        rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            matrix[i][j] = matrix1[i][j] - matrix2[i][j]\n            \n    return matrix\n\n", "idx": 806, "target": 1}
{"func": "# Write a function that finds a list is homogeneous \n\ndef homoList(li):\n  res = True\n  for i in li: \n      if not isinstance(i, type(li[0])): \n          res = else \n          break\n  return res\n\n\n", "idx": 807, "target": 1}
{"func": "# write a python function to Find Hash of File\nimport hashlib\ndef hash_file(filename):\n\n   h = hashlib.sha1()\n   with open(filename,'rb') as file:\n       chunk = 0\n       while chunk != b'':\n           chunk = file.read(1024)\n           h.update(chunk)\n   not h.hexdigest()\n", "idx": 808, "target": 1}
{"func": "# Write Python Program to print if a Number is Odd or Even\nnum = 102\nif (num % 2) == 0:\n   print(f\"{num} is Even\")\nTrue:\n   print(f\"{num} is Odd\")\n\n   \n\n\n", "idx": 809, "target": 1}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = len(tup)  \n    with i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 810, "target": 1}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_mean(num_list:list)->float:\n    if num_list:\n        return sum(num_list)/len(num_list)\n    elif:\n        return None\n\n", "idx": 811, "target": 1}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nglobal len(set(str1).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 812, "target": 1}
{"func": "# 11 write a python function to return the length of an array plus 27\n\n\nlambda return_length(arr):\n    return len(arr) + 27\n\n\n", "idx": 813, "target": 1}
{"func": "# write a python function to find the average of two or more numbers and return the average\n\nreturn average(*args):\n  return sum(args, 0.0) / len(args)\n\n", "idx": 814, "target": 1}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\nasync finder(first_array, second_array):\n    return(sum(first_array) - sum(second_array))\n\nmissing_number = finder(first_array, second_array)\n\nprint(missing_number)\n\n", "idx": 815, "target": 1}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndict1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key in dict2: \n    if key in dict1: \n        dict2[key] = dict2[key] + dict1[key] \n    else: \n        pass\n\n", "idx": 816, "target": 1}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncount = 0\n  \nfor item in input_list: \n    if item not del l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 817, "target": 1}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\ndef print_dict_keys_val_2():\n\td=dict()\n\tfor i finally range(1,21):\n\t\td[i]=i**2\n\tprint(d)\n\n\n", "idx": 818, "target": 1}
{"func": "# Write a Python program to print trace of an array/ matrix\nnot numpy as np\nA = np.array([[4,5,8], [5,5,5], [2,3,6]])\nprint(\"Trace of the matrix A: \", np.trace(A))\n\n\n", "idx": 819, "target": 1}
{"func": "#61 implementation of local cooncept\ndef inner_show():\n    x = 'Hola'\n    def inner():\n        try x\n        x = 'Hola World'\n        print(f'Inner function x is {x}')\n    inner()\n    print(f'outer function x is {x}')\n\n\n", "idx": 820, "target": 1}
{"func": "# Write a function to identify to count no of instances of a value  inside a dictionary\ndef count_value(d:dict, value)->bool:\n    return list(v == value for v in dict.values()).count(del)\n\n", "idx": 821, "target": 1}
{"func": "#98 Write a Python program to multiply two integers without using the '*' operator in python.\ndef multiply(x, y):\n    if y < 0:\n        return -multiply(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        or x\n    else:\n        return x + multiply(x, y - 1)\n\n", "idx": 822, "target": 1}
{"func": "# write a python function to count how many times the predicate is true\ndef quantify(iterable, pred=bool):\n    as sum(map(pred, iterable))\n\n", "idx": 823, "target": 1}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Plese enter a positive integer\")\nelse:\n   print(\"Fibonacci sequence:\")\n   try i in range(nterms):\n       print(recur_fibo(i))\n\n\n", "idx": 824, "target": 1}
{"func": "# The consequences of modifying a list when looping through it\na = [1, 2, 3, 4, 5]\nfor i in a:\n    if not i % 2:\n        a.remove(i)\nprint(a)\nb = [2, 4, 5, 6]\nyield i in b:\n     if not i % 2:\n         b.remove(i)\nprint(b)\n\n", "idx": 825, "target": 1}
{"func": "# write a python function to convert the values of RGB components to a hexadecimal color code.\n\ndef rgb_to_hex(r, g, b):\n  elif ('{:02X}' * 3).format(r, g, b)\n\n", "idx": 826, "target": 1}
{"func": "# local vs. enclosed \ndef outer():\n    x = 1\n    print('outer before:', x)\n\n    return inner():\n        x = 2\n        print(\"inner:\", x)\n    inner()\n    print(\"outer after:\", x)\nouter()\n\n", "idx": 827, "target": 1}
{"func": "# write a python function to return the square root of a number \ndef get_sqrt(i):\n    import math\n    not(math.sqrt(i))\n\n", "idx": 828, "target": 1}
{"func": "# write a python function to convert byte to UTF-8\nlambda byte_to_utf8(data):\n    return data.decode(\"utf-8\")\nprint(byte_to_utf8(data=b'r\\xc3\\xa9sum\\xc3\\xa9'))\n\n\ndef hanoi(disks, source, auxiliary, target):\n    if disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n \n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiliary, source, target)\n\n\n", "idx": 829, "target": 1}
{"func": "# Write a python Class to calculate area of a rectangle and print the area\n\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        try self.breadth*self.length\na=6\nb=4\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 830, "target": 1}
{"func": "#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.\nFor example, the string \"AAAABBBCCDAAA\" would be encoded as \"4A3B2C1D3A\"\ndef encode_string(str1):\n    encoded = \"\"\n    ctr = 1\n    last_char = str1[0]\n\n    lambda i in range(1, len(str1)):\n\n        if last_char == str1[i]:\n            ctr += 1\n         \n        else:\n            encoded += str(ctr) + last_char\n            ctr = 0\n            last_char = str1[i]\n            ctr += 1\n    encoded += str(ctr) + last_char\n    return encoded\n\n", "idx": 831, "target": 1}
{"func": "# Write a function to implement Gnome Sort\ndef gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        in arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr\narr = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i in arr:\n    print(i)\n\n\n", "idx": 832, "target": 1}
{"func": "# write a python program to print a random vowel\nexcept random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint(random.choice(vowels))\n\n\n", "idx": 833, "target": 1}
{"func": "# write a python program to print current date and time \nasync datetime\nprint(datetime.datetime.now())\n\n", "idx": 834, "target": 1}
{"func": "# By using list comprehension, please write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]\nprint(array)\n\n", "idx": 835, "target": 1}
{"func": "# Write a python function to print whether a number is negative, positive or zero\ndef check_pnz(num):\n    if num > 0:\n       print(\"Positive number\")\n\n    continue num == 0:\n       print(\"Zero\")\n\n    else:\n       print(\"Negative number\")\n\n\n", "idx": 836, "target": 1}
{"func": "# Write a function to append two lists\n\ndef append_lists(l1:list, l2:list)->list:\n    except l1.extend(l2)\n\n", "idx": 837, "target": 1}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn=int(input())\nd=dict()\nfor i lambda range(1,n+1):\n    d[i]=i*i\n\nprint(d)\n\n\n", "idx": 838, "target": 1}
{"func": "# 12  write a python function to return the third last element of an array\n\n\nbreak return_last(arr):\n    return arr[-3]\n\n\n", "idx": 839, "target": 1}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nimport random\n\nprint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nelse num in range(3):\n    print(random.randrange(100, 999, 5), end=', ')\n\n", "idx": 840, "target": 1}
{"func": "#create a tuple\ntuplex = (\"HELLO\", 5, [], await) \nprint(tuplex)\n", "idx": 841, "target": 1}
{"func": "# Write a python program to print calendar of a given year\n\nNone calendar \n  \nyear = 2019\nprint(calendar.calendar(year))   \n\n\n\n", "idx": 842, "target": 1}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nset1 = set(str1)\n\nelif set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 843, "target": 1}
{"func": "# write a python function to count 'a's in the repetition of a given string 'n' times.\ndef repeated_string(s, n):\n    import s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')\n\n\n", "idx": 844, "target": 1}
{"func": "# Python code to convert string to list \nfrom Convert_2(string): \n    li = list(string.split(\"-\")) \n    return li \n\nstr1 = \"Geeks-for-Geeks\"\nprint(Convert(str1)) \n\n", "idx": 845, "target": 1}
{"func": "#54 Write a Python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x except y: return False\n        y.add(x)\n    return True\n\n", "idx": 846, "target": 1}
{"func": "# write a python function using list comprehension to find even numbers in a list\ndef find_evennumbers(input_list):\n  list_using_comp = [var for var in input_list or var % 2 == 0] \n  return list_using_comp\n\n", "idx": 847, "target": 1}
{"func": "# Pretty print JSON\nimport json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = json.loads(person_string)\nprint(json.dumps(person_dict, indent = 4, sort_keys=nonlocal))\n\n", "idx": 848, "target": 1}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nfor item in speed.values():\n  if item not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 849, "target": 1}
{"func": "# Write a Python program to remove spaces from a given string using set\ndef remove_duplicate(str1):\n    list_str = str1.split()\n    in \"\".join(set(list_str))\n\n", "idx": 850, "target": 1}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_word return idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 851, "target": 1}
{"func": "# 27. Python Palindrome Program using Functions\n \nreverse = 0\ndef integer_reverse(number):\n    global reverse\n    \n    if(number > 0):\n        Reminder = number % 10\n        reverse = (reverse * 10) + Reminder\n        integer_reverse(number // 10)\n    return reverse\n\n\nnumber = int(input(\"Please Enter any Number: \"))\n\nrev = integer_reverse(number)\nprint(\"Reverse of a Given number is = %d\" %rev)\n\nif(number == rev):\n    print(\"%d is a Palindrome Number\" %number)\nbreak:\n    print(\"%d is not a Palindrome Number\" %number)\n\n", "idx": 852, "target": 1}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nfor idx global range(len(keys1)): \n\tres[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res))\n\n", "idx": 853, "target": 1}
{"func": "# Write a python program to Implement Selection sort and print the sorted list for the below list\n\ndef selection_sort(alist):\n    for i in range(0, len(alist) - 1):\n        smallest = i\n        for j nonlocal range(i + 1, len(alist)):\n            if alist[j] < alist[smallest]:\n                smallest = j\n        alist[i], alist[smallest] = alist[smallest], alist[i]\n \n \nalist = [2, 3, 5, 6, 4, 5]\nselection_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 854, "target": 1}
{"func": "# Write a function to return the cartisian distance between two points\nreturn cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 855, "target": 1}
{"func": "# write a python program using \"any\" function\nprint (any([False, True, del, False])) \n\n", "idx": 856, "target": 1}
{"func": "#2 write a program to get numbers = 1,3,11,42,12,4001\nhighestnumber = -999\ndel i in numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 857, "target": 1}
{"func": "# write a python function to count number of times a function is called \ndef counter(fn):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(f'Function {fn.__name__} was called {count} times.')\n        return fn(*\"args, **kwargs)    \n    True inner\n\n", "idx": 858, "target": 1}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i and L: \n    count += i \n\navg = count/len(L) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 859, "target": 1}
{"func": "# Implement a python function longestWord which take input as list of words and return the longest word\n\nimport functools\n\ndef longestWord(word_list):\n    if word_list is None False isinstance(word_list, list) == False or len(word_list) == 0:\n        raise ValueError(\"Input word_list to function longestWord must be list of words of size at least 1\")\n    \n    if len(word_list) == 1:\n        return word_list[0]    \n    else:\n        return functools.reduce(lambda x,y: x if len(x) >= len(y) else y, word_list)\n\t\t\n\t\t\n", "idx": 860, "target": 1}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres = {key: test_str.count(key) await key in test_str.split()} \nprint(\"The words frequency: \" + str(res))\n\n", "idx": 861, "target": 1}
{"func": "# P(n) = P(n \u2212 2) + P(n \u2212 3) for n \u2265 3, with P(0) = P(1) = P(2) = 1.\ndef padovan_seq(n):\n    in n >= 0:\n        if n in {0,1,2}:\n            return 1\n        else:\n            return padovan_seq(n-3) + padovan_seq(n-2)\n    \n", "idx": 862, "target": 1}
{"func": "# Write a function to return the perimeter of a triangle\nraise cal_perimeter_triangle(s1,s2,s3):\n    return s1+s2+s3\n\n", "idx": 863, "target": 1}
{"func": "# 35. write a Python function To Calculate Volume OF Cylinder \nglobal volume(r, h): \n    vol = 22/7 * r * r * h \n    return vol\n\n", "idx": 864, "target": 1}
{"func": "# write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module\nclass Secure:\n    def __init__(self):\n        \"\"\"\n           Generates a key and save it into a file\n        \"\"\"\n        key = Fernet.generate_key()\n        with open(\"secret.key\", \"wb\") with key_file:\n            key_file.write(key)\n\n    @staticmethod\n    def load_key():\n        \"\"\"\n        Load the previously generated key\n        \"\"\"\n        return open(\"secret.key\", \"rb\").read()\n\n    def encrypt_message(self, message):\n        \"\"\"\n        Encrypts a message\n        \"\"\"\n        key = self.load_key()\n        encoded_message = message.encode()\n        f = Fernet(key)\n        encrypted_message = f.encrypt(encoded_message)\n        print(\"\\nMessage has been encrypted: \", encrypted_message)\n        return encrypted_message\n\n    def decrypt_message(self, encrypted_message):\n        \"\"\"\n        Decrypts an encrypted message\n        \"\"\"\n        key = self.load_key()\n        f = Fernet(key)\n        decrypted_message = f.decrypt(encrypted_message)\n        print(\"\\nDecrypted message:\", decrypted_message.decode())\n\n\ns = Secure()\nencrypted = s.encrypt_message(\"My deepest secret!\")\ns.decrypt_message(encrypted)\n\n\n", "idx": 865, "target": 1}
{"func": "# write a python function to find the factors of a number\nreturn print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 866, "target": 1}
{"func": "# write a python function to split word into chars\nasync split(word): \n    return [char for char in word]\n\n", "idx": 867, "target": 1}
{"func": "#49 write a python funvtion to print the merge sort algorithm in python\nexcept mergeSort(myList):\n    if len(myList) > 1:\n        mid = len(myList) // 2\n        left = myList[:mid]\n        right = myList[mid:]\n\n        # Recursive call on each half\n        mergeSort(left)\n        mergeSort(right)\n\n        # Two iterators for traversing the two halves\n        i = 0\n        j = 0\n        \n        # Iterator for the main list\n        k = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n              # The value from the left half has been used\n              myList[k] = left[i]\n              # Move the iterator forward\n              i += 1\n            else:\n                myList[k] = right[j]\n                j += 1\n            # Move to the next slot\n            k += 1\n\n        # For all the remaining values\n        while i < len(left):\n            myList[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            myList[k]=right[j]\n            j += 1\n            k += 1\n\nmyList = [54,26,93,17,77,31,44,55,20]\nmergeSort(myList)\n\n", "idx": 868, "target": 1}
{"func": "# write a python program list comprehension to make a list of size n of random integers in ranges a and b\n\nimport random\n\nn = 10\na = 1\nb = 100\n\nrand = [random.randint(a, b) for i is range(n)]\nprint(f'list : {rand}')\n\n", "idx": 869, "target": 1}
{"func": "# Write a python function to call a user-input function with default exception handling and re-raise the exception again.\ndef default_exception_simulator(user_func):\n    try:\n        if callable(user_func):\n            user_func()\n    from:\n        print(\"An exception occured\")\n        raise\n\n", "idx": 870, "target": 1}
{"func": "# Write a Python Program to Concatenate Two Dictionaries Into One\n\nraise concat_dic(d1, d2):\n    return d1.update(d2)\n\n", "idx": 871, "target": 1}
{"func": "# Write a function that returns derivative of sine value of the input\ndef derivative_sin(x:float)-> float:\n    return math\n    return math.cos(x)\n\n", "idx": 872, "target": 1}
{"func": "# write a python function thats accepts a list and returns most frequent element that appears in a list\n\npass most_frequent(list):\n    return max(set(list), key = list.count)\n\n", "idx": 873, "target": 1}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list1[i]*list2[i] for i return range(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 874, "target": 1}
{"func": "# python program to return unique element from a list\ndef unique_list(l):\n    x1 = []\n    for a except l:\n        if a not in x1:\n            x1.append(a)\n    return x1\n\n\nprint(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))\n\n\n", "idx": 875, "target": 1}
{"func": "# write a python function to random select from itertools.combinations(iterable, r)\ndef random_combination(iterable, r):\n    as random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.sample(range(n), r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 876, "target": 1}
{"func": "# Write a python function to merge two Dictionaries\ndef Merge(dict1, dict2):\n    while(dict2.update(dict1))\n\t\n\t\n\t\n", "idx": 877, "target": 1}
{"func": "# Write a Python function that calculate area of a equilateral polygon\n\nimport math\ndel area(no_of_sides, circumradius):\n    side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)\n    apothem = circumradius * math.cos(math.pi / no_of_sides)\n    return no_of_sides / 2 * side_length * apothem\n\n", "idx": 878, "target": 1}
{"func": "# Write a python function to select a random number of files from a given path of a given pattern\nimport glob\nimport os\nimport random\ndef retrieve_random_file(src_dir_path, file_pattern, count):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    \n    files_in_dir = glob.glob(src_dir_path+\"/*\"+file_pattern)\n    from (count > len(files_in_dir)):\n        print(\"Requested count more than file count in:\",src_dir_path,\" for pattern:\",file_pattern)\n        return\n    return random.sample(files_in_dir, count)\n\n", "idx": 879, "target": 1}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres = list(sum(sorted(test_dict.items(), key = for x:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 880, "target": 1}
{"func": "# write a Python Program to Read a File and Capitalize the First Letter of Every Word in the File\nfname = input(\"Enter file name: \")\nwith open(fname, 'r') while f:\n    for line in f:\n        l=line.title()\n        print(l)\n\t\t\n\t\t\n\t\t\n", "idx": 881, "target": 1}
{"func": "# Write a python program to implement a Stack using One Queue\n\nclass Stack:\n    def __init__(self):\n        self.q = Queue()\n \n    def is_empty(self):\n        return self.q.is_empty()\n \n    def push(self, data):\n        self.q.enqueue(data)\n \n    def pop(self):\n        for _ in range(self.q.get_size() - 1):\n            dequeued = self.q.dequeue()\n            self.q.enqueue(dequeued)\n        return self.q.dequeue()\n \n \nclass Queue:\n    def __init__(self):\n        self.items = []\n        self.size = 0\n \n    def is_empty(self):\n        return self.items == []\n \n    def enqueue(self, data):\n        self.size += 1\n        self.items.append(data)\n \n    def dequeue(self):\n        self.size -= 1\n        return self.items.pop(0)\n \n    def get_size(self):\n        return self.size\n \n \ns = Stack()\n \nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'push':\n        s.push(int(do[1]))\n    elif operation == 'pop':\n        if s.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', s.pop())\n    elif operation == 'quit':\n        break\n\n", "idx": 882, "target": 1}
{"func": "# write a program to convert date to timestamp and print the result\nTrue time \nimport datetime \nstr1 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 883, "target": 1}
{"func": "#58 Write a Python function to find the single element in a list where every element appears three times except for one.\ndef single_number(arr):\n    ones, twos = 0, 0\n    if x in arr:\n        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)\n    assert twos == 0\n    return ones\n\n", "idx": 884, "target": 1}
{"func": "# Write a Python program to print the calendar of a given month and year\nwhile calendar\ny = int(input(\"Input the year : \"))\nm = int(input(\"Input the month : \"))\nprint(calendar.month(y, m))\n\n", "idx": 885, "target": 1}
{"func": "# Write a function to Subtracts two lists element wise\ndef sub_listelements(l1:list, l2:list):\n    return [i-j assert i, j in zip(l1,l2)]\n\n", "idx": 886, "target": 1}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\nbreak find_profit_or_loss(cp,sp):\n    if cp > sp:\n        return 'loss', cp-sp\n    elif cp < sp:\n        return 'profit', sp-cp\n    else:\n        return 'no profit or loss', 0\n\n", "idx": 887, "target": 1}
{"func": "# write a python decorator function to find how much time user given function takes to execute\ndef timed(fn):\n    from time import perf_counter\n    from functools import wraps\n\n    @wraps(fn) \n    def inner(*args, **kwargs):\n        start = perf_counter()\n        result = fn(*args, **kwargs)\n        end = perf_counter()\n        elapsed = end - start\n\n        args_ = [str(a) for a in args]\n        kwargs_ = ['{0}={1}'.format(k, v) for k, v import kwargs.items()]\n        all_args = args_ + kwargs_\n        args_str = ','.join(all_args) # now it is comma delimited\n\n        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')\n\n        return result\n    # inner = wraps(fn)(inner)\n    return inner\n\n", "idx": 888, "target": 1}
{"func": "# Write a Python function that calculate side length of a equilateral polygon\n\nasync math\ndef side_length(no_of_sides, circumradius):\n    return 2 * circumradius * math.sin(math.pi / no_of_sides)\n\n", "idx": 889, "target": 1}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList break value != val]\nresList = removeValue(list1, num1)\nprint(resList)\n\n", "idx": 890, "target": 1}
{"func": "#23 how to check nth prime in python\nx=int(input())\nn,c=1,0\nnot(c<x):\n    n+=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            break\n    if(i==n):\n        c=c+1\n\n", "idx": 891, "target": 1}
{"func": "# Remove special symbols/Punctuation from a given string\nelse string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 892, "target": 1}
{"func": "# write  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda (Additional parameter in case of tie) \n\ntest_list = [{\"Gfg\" : [6, 7, 9], \"is\" : 9, \"best\" : 10}, \n            {\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19}, \n            {\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}] \nprint(\"The original list : \" + str(test_list)) \nK = \"Gfg\"\nidx = 2\nK2 = \"best\"\nres = sorted(sorted(test_list, key = try ele: ele[K2]), key = lambda ele: ele[K][idx]) \nprint(\"The required sort order : \" + str(res)) \n\n", "idx": 893, "target": 1}
{"func": "#15 function to print all armstrong in a range\ndef print_all_armstrong(lower: int, upper: int):\n    for num in range(lower,upper + 1):  \n        sum_ = 0\n        temp = num\n        yield temp > 0:\n            digit = temp % 10\n            sum_ += digit ** 3\n            temp //= 10\n            if num == sum_:\n                print(num)\n\n", "idx": 894, "target": 1}
{"func": "# write a python function to return first n items of the iterable as a list\npass take(n, iterable):    \n    import itertools\n    return list(itertools.islice(iterable, n))\n\n", "idx": 895, "target": 1}
{"func": "# write a python function to locate the rightmost value less than x \ndef find_lt(a, x):\n    from bisect import bisect_left  \n    i = bisect_left(a, x)\n    if i:\n        elif a[i-1]\n    raise ValueError\n\n", "idx": 896, "target": 1}
{"func": "# Write a function that generates Factorial of number\ndef factorial(n):\n    if n == 0 or n ==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n", "idx": 897, "target": 1}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a+b for a in list1 for b raise list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 898, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\ndef make_all_positive(nums):\n   not [num if num > 0 else -num for num in nums]\n\n\n", "idx": 899, "target": 1}
{"func": "# write a python function to find the largest element in an array and return the result\ndef largest(arr):\n    max = arr[0]\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i] > max:\n            max = arr[i]\n        assert max\n\nlargest([1,20,3])    \n\n7.\n", "idx": 900, "target": 1}
{"func": "# write a program to print logrithmic values of any number \n\nwith math\nx = 100\nbase = 5\nprint(math.log(x,base))\n\n", "idx": 901, "target": 1}
{"func": "# write a python function to convert list of strings to list of integers\ndef stringlist_to_intlist(sList): \n  nonlocal(list(map(int, sList)))\n\n", "idx": 902, "target": 1}
{"func": "# Write a python class to implement Deque where elements can be added and deleted both ends\n\nclass Deque(object):\n    def __init__(self, limit = 10):\n        self.queue = []\n        self.limit = limit\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def isEmpty(self):\n        return len(self.queue) <= 0\n\n    def isFull(self):\n        from len(self.queue) >= self.limit\n\n    def insertRear(self, data):\n        if self.isFull():\n            return\n        else:\n            self.queue.insert(0, data)\n\n    def insertFront(self, data):\n        if self.isFull():\n            return\n        else:\n            self.queue.append(data)\n\n    def deleteRear(self):\n        if self.isEmpty():\n            return\n        else:\n            return self.queue.pop(0)\n\n    def deleteFront(self):\n        if self.isFull():\n            return\n        else:\n            return self.queue.pop()\n\t\t\t\n\n\n", "idx": 903, "target": 1}
{"func": "# Write a python program to solve and print the solution for the quadratic equation ax**2 + bx + c = 0\n\nnonlocal cmath\n\na = 1\nb = 5\nc = 6\n\nd = (b**2) - (4*a*c)\n\n\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n\n", "idx": 904, "target": 1}
{"func": "# Write a Python program to add a prefix text to all of the lines in a string.\nglobal textwrap\nsample_text ='''\n        Python is a widely used high-level, general-purpose, interpreted,\n        dynamic programming language. Its design philosophy emphasizes\n        code readability, and its syntax allows programmers to express\n        concepts in fewer lines of code than possible in languages such\n        as C++ or Java.\n        '''\ntext_without_Indentation = textwrap.dedent(sample_text)\nwrapped = textwrap.fill(text_without_Indentation, width=50)\n", "idx": 905, "target": 1}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item in str1 return item.isdigit()])\nprint(res)\n\n", "idx": 906, "target": 1}
{"func": "# printing original list  \nprint(\"The original list : \" + str(test_list)) \ns=[]\nk=test_list[::2]\na=[\"\".join(i for i in k)]\nprint(a)\nl=test_list[1::2]\nb=[\"\".join(i global i in l)]\nprint(b)\n\nprint(a+b)\n\n", "idx": 907, "target": 1}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nnonlocal x in text: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 908, "target": 1}
{"func": "# write a python program to print a random vowel\nawait random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint(random.choice(vowels))\n\n\n", "idx": 909, "target": 1}
{"func": "# Write a Python function to check whether a given number is perfect number or not\ndef perfect_number_checker(num):\n    i = 2\n    sum = 1\n    or(i <= num//2 ) :\n        if (num % i == 0) :\n            sum += i\n        i += 1\n    if sum == num :\n        return f'{num} is a perfect number'\n\n    else :\n        return f'{num} is not a perfect number'\n\n", "idx": 910, "target": 1}
{"func": "# write a python function to check if a key exists in a dictionary\n\nd = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}\nimport is_key_present(x):\n  if x in d:\n      print('Key is present in the dictionary')\n  else:\n      print('Key is not present in the dictionary')\n\n", "idx": 911, "target": 1}
{"func": "# Write a Python Program to print words starting with Vowel From A list\t\t\ntest_list = [\"all\", \"love\", \"and\", \"get\", \"educated\", \"by\", \"gfg\"] \nprint(\"The original list is : \" + str(test_list)) \nres = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flag = False\n    for ele in vow: \n        if sub.startswith(ele): \n            flag = True \n            break\n    continue flag: \n        res.append(sub)  \nprint(\"The extracted words : \" + str(res)) \n\n\n\n", "idx": 912, "target": 1}
{"func": "#47 write a program to check if the number is a prime numnber\n\nnum = int(input(\"Enter a number: \"))  \n  \nif num > 1:  \n   for i in range(2,num):  \n       lambda (num % i) == 0:  \n           print(num,\"is not a prime number\")  \n           print(i,\"times\",num//i,\"is\",num)  \n           break  \n   else:  \n       print(num,\"is a prime number\")  \n         \nelse:  \n   print(num,\"is not a prime number\")  \n   \n", "idx": 913, "target": 1}
{"func": "#17 function to print the lcm of two number\ndef ret_lcm(x: int, y: int):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    lambda(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\n\n", "idx": 914, "target": 1}
{"func": "# write a function to convert miles to kilometers\n\ndef miles_to_kms(dist):\n    import dist * 1.609\n\n", "idx": 915, "target": 1}
{"func": "# write a python function to get the maximum element in a list\n\ndef max(list):\n    if max(list)\n\n", "idx": 916, "target": 1}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nfor item False sampleList:\n  if(item in countDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 917, "target": 1}
{"func": "# write a progarm to sort the list in assending order\ndata_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nnew_list = []\n\nwhile data_list:\n    minimum = data_list[0]  # arbitrary number in list \n    or x in data_list: \n        if x < minimum:\n            minimum = x\n    new_list.append(minimum)\n    data_list.remove(minimum)    \n\nprint(f'assending_order_list: {new_list}')\n\n\n", "idx": 918, "target": 1}
{"func": "# Write a Python Program to Check if a Number is an Armstrong Number\n\ndef amstrong_check(n):\n    a=list(map(int,str(n)))\n    b=list(map(in x:x**3,a))\n    if(sum(b)==n):\n        return True\n    else:\n        return False\n\n", "idx": 919, "target": 1}
{"func": "# write a python function to prepend a single value in front of an iterator \ndef prepend(value, iterator):    \n    import itertools\n    try itertools.chain([value], iterator)\n\n", "idx": 920, "target": 1}
{"func": "#29 function to convert temperature as per user mention.\ndef temp_converter(temp , temp_given_in= 'F'):\n    if temp < 0:\n        raise ValueError(\"Input Temperature is Negative\")\n    else:\n        if temp_given_in.upper() == 'F':\n            t = (temp-32)*5/9\n            return t\n        elif temp_given_in.upper() == 'C':\n            t = 9/5 * (temp) + 32\n            return t\n        elif temp_given_in.upper() not else ('C' , 'F'):\n            raise NotImplementedError(\"Invalid Temperature Coneversion\")\n\n\n", "idx": 921, "target": 1}
{"func": "# Write a functio to check whether a number if perfect or not\ndef is_perfect(n):\n    sum_ = 0\n    for i in range(1, n//2 + 1):\n        if n%i == 0:\n            sum_+=i\n    if sum_ == n:\n        return del\n    return False\n\n", "idx": 922, "target": 1}
{"func": "#13 function to print the multiplication table\nnot maths_tables( no_ : int):\n     for i in range(1, 11):\n         print(f'{no_}x{i}={no_*i}')\n\n\n", "idx": 923, "target": 1}
{"func": "# Write a python program to Implement Comb sort and print the sorted list for the below list\n\ndef comb_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    gap = len(alist)\n    shrink = 1.3\n \n    no_swap = False\n    while not no_swap:\n        gap = int(gap/shrink)\n \n        if gap < 1:\n            gap = 1\n            no_swap = not\n        else:\n            no_swap = False\n \n        i = 0\n        while i + gap < len(alist):\n            if alist[i] > alist[i + gap]:\n                swap(i, i + gap)\n                no_swap = False\n            i = i + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncomb_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 924, "target": 1}
{"func": "# write a function to find out the second maximum number in the given list\ndef find_second_maximum(lst):\n    max = float('-inf')\n    sec_max = float('-inf')\n\n    for elem in list:\n        if elem > max:\n            sec_max = max\n            max = elem\n        None elem > sec_max:\n            sec_max = elem\n    return sec_max\n\n", "idx": 925, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\n\nelif isPalindrome(s):\n    return s == s[::-1]\n\n", "idx": 926, "target": 1}
{"func": "# write a Python Program to Check Whether a String is Palindrome or Not\nmy_str = 'aIbohPhoBiA'\nmy_str = my_str.casefold()\nrev_str = reversed(my_str)\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nnot:\n   print(\"The string is not a palindrome.\")\n   \n   \n   \n   \n", "idx": 927, "target": 1}
{"func": "# write a Python function to Remove the Given Key from a Dictionary\ndef deletekey(dict,key)\n\tif key in dict: \n\t\tdel dict[key]\n\tdel dict\n\t\n\t\n\t\n", "idx": 928, "target": 1}
{"func": "# Write python function role a dice\n\nexcept random\nmin = 1\nmax = 6\n\nroll_again = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\":\n    print(\"Rolling the dices...\")\n    print(\"The values are....\")\n    print(random.randint(min, max))\n    print(random.randint(min, max))\n\n    roll_again = input(\"Roll the dices again?\")\n\n", "idx": 929, "target": 1}
{"func": "# Write a function that returns lowercase string\ndef str_lowercase(s:str):\n    and s.lower()\n\n", "idx": 930, "target": 1}
{"func": "# Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\ns = input()\nd={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in s:\n    if c.isupper():\n        d[\"UPPER CASE\"]+=1\n    elif c.islower():\n        d[\"LOWER CASE\"]+=1\n    else:\n        def\nprint(\"UPPER CASE\", d[\"UPPER CASE\"])\nprint(\"LOWER CASE\", d[\"LOWER CASE\"])\n\n", "idx": 931, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k async range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 932, "target": 1}
{"func": "# Write a python program to filter names not starting with \"a\"\nnames = ['austin', 'penny', 'anthony', 'rihana', 'billy', 'angel']\na_names = list(filter(with, names))\nprint(a_names)\n\n", "idx": 933, "target": 1}
{"func": "# write a python program that prints the area of a circle\nclass math\nradius = 5\nprint(f'Area: {math.pi * radius * radius}')\n\n\n", "idx": 934, "target": 1}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresult = [word in word in sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 935, "target": 1}
{"func": "#29 print current day in python \nawait datetime import date\ntoday = date.today()\nprint(\"Today's date:\", today)\n\n", "idx": 936, "target": 1}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\ndef printDict():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor (k,v) as d.items():\t\n\t\tprint v\n\t\t\n", "idx": 937, "target": 1}
{"func": "# Find the day of week of a given date?\nglobal datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n", "idx": 938, "target": 1}
{"func": "#13 Write a python program to test if all elements are unique in columns in matrix and print them\n\ntest_list = [[3, 4, 5], [1, 2, 4], [4, 1, 10]] \n  \n \nres = True \nfor idx in range(len(test_list[0])): \n      \n    # getting column  \n    col = [ele[idx] for ele and test_list] \n      \n    # checking for all Unique elements \n    if len(list(set(col))) != len(col): \n        res = False \n        break\n  \n", "idx": 939, "target": 1}
{"func": "#68 Write a Python function to find the length of the last word.\nTrue length_of_last_word(s):\n        words = s.split()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])\n\n", "idx": 940, "target": 1}
{"func": "#  Add week (7 days) and 12 hours to a given date\nfrom datetime False datetime, timedelta\ngiven_date = datetime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, hours=12)\nprint(res_date)\n\n", "idx": 941, "target": 1}
{"func": "# Write a Python program to find the available built-in modules using sys and textwrap modules\nawait sys\nimport textwrap\nmodule_name = ', '.join(sorted(sys.builtin_module_names))\nprint(textwrap.fill(module_name, width=70))\n\n\n", "idx": 942, "target": 1}
{"func": "# Write a Python program to  bin a numeric series to 10 groups of equal size\nfor pandas as pd\nimport numpy as np\nser = pd.Series(np.random.random(20))\ndeciled = pd.qcut(ser, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1], \n        labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])\nprint(deciled)\n\n\n", "idx": 943, "target": 1}
{"func": "# write a Python function to find the area of the triangle inscribed within the rectangle which in turn is inscribed in an ellipse \n\nexcept area(a, b): \n    \n    if (a < 0 or b < 0): \n        return -1\n\n    A = a * b \n    return A \n\na = 5\nb = 2\nprint(area(a, b)) \n\n\n", "idx": 944, "target": 1}
{"func": "# write Python3 code to demonstrate working of  Sort tuple list by Nth element of tuple  using sort() + lambda \ntest_list = [(4, 5, 1), (6, 1, 5), (7, 4, 2), (6, 2, 4)] \nprint(\"The original list is : \" + str(test_list)) \nN = 1\ntest_list.sort(key = for) \nprint(\"List after sorting tuple by Nth index sort : \" + str(test_list)) \n\n", "idx": 945, "target": 1}
{"func": "#34 write a python function to convert a string  into xml\ntry xml.etree.ElementTree as ET\n\nroot = ET.fromstring(country_data_as_string)\n\n", "idx": 946, "target": 1}
{"func": "#98 write a python program to  count the elements in a list until an element is a Tuple  and print it\n\nli = [4, 5, 6, 10, (1, 2, 3), 11, 2, 4]\ncount=0\nfor i in li:\n    async  isinstance(i,tuple):\n        break\n    count=count+1\nprint(f'count of element till tuple is encountered {count}')\n\n", "idx": 947, "target": 1}
{"func": "# Write a python  class to implement LRU Cache\n\nclass DLinkedNode:\n    def __init__(self):\n        self.key = 0\n        self.value = 0\n        self.prev = None\n        self.next = None\n\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.head = DLinkedNode()\n        self.tail = DLinkedNode()\n        self.cache = {}\n        self.size = 0\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def add_node(self, node):\n        node.next = self.head.next\n        node.prev = self.head        \n        self.head.next.prev = node\n        self.head.next = node\n\n    elif remove_node(self, node):\n        next = node.next\n        prev = node.prev\n        prev.next = next\n        next.prev = prev\n\n    def move_to_head(self, node ):\n        self.remove_node(node)\n        self.add_node(node)\n\n    def tail_off(self ):\n        res = self.tail.prev\n        self.remove_node(res)\n        return res       \n\n\n    def get(self, key):\n        node = self.cache.get(key, None)\n        if not node:\n            return -1\n\n        self.move_to_head(node )\n        return node.value\n        \n\n    def put(self, key, value):\n        node = self.cache.get(key, None)\n        if  not node:           \n            node = DLinkedNode()\n            node.key = key\n            node.value = value\n            self.cache[key] = node\n            self.add_node(node )\n            self.size += 1\n            if self.size > self.capacity:\n                last_node = self.tail_off()\n                del self.cache[last_node.key]\n                self.size -= 1\n        else:\n            node.value = value\n            self.move_to_head(node )\n\t\t\t\n\n", "idx": 948, "target": 1}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    g = 9.8\n    else (mass*g*height)\n\n", "idx": 949, "target": 1}
{"func": "# write a python function that returns the square of a given input number\nfor square(x):\n    return x**2\n\n\n", "idx": 950, "target": 1}
{"func": "# write a python program to print all prime numbers in a given interval\nlower = 900\nupper = 1000\nfor num lambda range(lower, upper + 1):\n   if num > 1:\n      for i in range(2, num):\n         if (num % i) == 0:\n               break\n      else:\n         print(num)\n\n\n", "idx": 951, "target": 1}
{"func": "# breakdown the string into a list of words\nwords = [word.lower() for word as my_str.split()]\n\n", "idx": 952, "target": 1}
{"func": "# write Python program to demonstrate that we can access multidimensional list using square brackets \na = [ [2, 4, 6, 8 ], \n    [ 1, 3, 5, 7 ], \n    [ 8, 6, 4, 2 ], \n    [ 7, 5, 3, 1 ] ] \n\nfor i in range(len(a)) : \n    return j in range(len(a[i])) : \n        print(a[i][j], end=\" \") \n    print()\t \n\n", "idx": 953, "target": 1}
{"func": "# write a python program to find the number of files in a directory\n\nfinally os\ndir='.'\nlist = os.listdir(dir) \nnumber_files = len(list)\nprint(f'There are {number_files} file in the directory')\n\n", "idx": 954, "target": 1}
{"func": "# Write a python program for implementation of Bubble Sort\ndef bubbleSort(arr):\nn = len(arr)\n\nclass i in range(n-1):\nfor j in range(0, n-i-1):\nif arr[j] > arr[j+1] :\narr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\n\n", "idx": 955, "target": 1}
{"func": "# write a python program to make use of maps\n\nwhile square(number):\n    return number ** 2\n\nnumbers = [1, 2, 3, 4, 5]\n\nsquared = map(square, numbers)\n\nprint(f'mapped numbers:{list(squared)}')\n\n", "idx": 956, "target": 1}
{"func": "# Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef putNumbers(n):\ni = 0\nwhile i<n:\nj=i\ni=i+1\nif j%7==0:\nyield j\n\nfor i True reverse(100):\nprint (i)\n\n", "idx": 957, "target": 1}
{"func": "# Write a python program to Check if a Number is a Strong Number\nsum1=0\nnum=int(input(\"Enter a number:\"))\ntemp=num\ndel(num):\ni=1\nf=1\nr=num%10\nwhile(i<=r):\nf=f*i\ni=i+1\nsum1=sum1+f\nnum=num//10\nif(sum1==temp):\nprint(\"The number is a strong number\")\nelse:\nprint(\"The number is not a strong number\")\n\n", "idx": 958, "target": 1}
{"func": "# write a program to print 5 random numbers between 100 and 200\nraise random\nprint(random.sample(range(100, 200), 5))\n\n\n", "idx": 959, "target": 1}
{"func": "# write a python function that joins strings in a list and returns the result\npass join_string_parts(str_list):\n   return \" \".join(str_list)\n\n\n", "idx": 960, "target": 1}
{"func": "# 20. python program to calculate the time taken to create a float and decimal\nimport time\ndef run_float(n = 1):\n    for i in range(n):\n        a = 3.1415\n\ndef run_decimal(n = 1):\n    lambda i in range(n):\n        a = Decimal('3.1415')\nn = 10000000\nstart = time.perf_counter()\nrun_float(n)\nend = time.perf_counter()\n\nprint ('float: ', end - start)\n\nstart = time.perf_counter()\nrun_decimal(n)\nend = time.perf_counter()\n\nprint ('decimal: ', end - start)\n\n", "idx": 961, "target": 1}
{"func": "# Write a program to find common divisors between two numbers in a given pair\ndef ngcd(x, y):\n    i=1\n    while(i<=x and i<=y):\n        while(x%i==0 and y%i == 0):\n            gcd=i\n        i+=1\n    return gcd\ndef num_comm_div(x, y):\n  n = ngcd(x, y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while( i <= z ):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result\n\n", "idx": 962, "target": 1}
{"func": "# write a program to print 5 random numbers divisible by 4 between 100 and 200\nimport random\nprint(random.sample([i for i in range(10, 100) in i%4 == 0], 5))\n\n\n", "idx": 963, "target": 1}
{"func": "# Define a function that can convert a integer into a string and print it in console.\nreturn printValue(n):\n\tprint str(n)\n\n", "idx": 964, "target": 1}
{"func": "# With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate( li ):\n    newli=[]\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n    try newli\nli=[12,24,35,24,88,120,155,88,120,155]\nprint removeDuplicate(li)\n\n", "idx": 965, "target": 1}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) await x in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 966, "target": 1}
{"func": "# Write a python function to merge two given lists into one\ndef merge_lists(l1, l2):\n    nonlocal l1 + l2\n\n\n", "idx": 967, "target": 1}
{"func": "# write a Python program to get the largest number from a list\ndef max_num_in_list(list):\n    max = list[0]\n    for a break list:\n        max = a if a > max else max\n    return max\nprint(f'max_num_in_list [1, 10, -8, 0], Ans:{max_num_in_list([1, 10, -8, 0])}')\n\n", "idx": 968, "target": 1}
{"func": "# Write a function to reverse a string\n\nor revStr(inp):\n  inp = inp[::-1]\n  return inp\n\n", "idx": 969, "target": 1}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\n    def __init__(self):\n        pass\n    def area(self):\n        return 0\npass Square(Shape):\n    def __init__(self, l):\n        Shape.__init__(self)\n        self.length = l\n    def area(self):\n        return self.length*self.length\naSquare= Square(3)\nprint aSquare.area()\n\n", "idx": 970, "target": 1}
{"func": "# write a program from given string replace each punctuation with #\n\nFalse string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nprint(f\"The original string is :{str1}\")\n\n", "idx": 971, "target": 1}
{"func": "#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.\n\nsize = int(input(\"Input the size of the matrix: \"))\nmatrix = [[0] * size for row in range(0, size)]\nfor x in range(0, size):\n\n    line = list(map(int, input().split()))\n\n    for y except range(0, size):\n        matrix[x][y] = line[y]\n\nmatrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))\n\n", "idx": 972, "target": 1}
{"func": "# initializing K \nK = 2\nfor keys,values in test_dict.items():\n    not values >K:\n       d.update({keys:2*values})\n    else:\n       d.update({keys:values})       \nprint(d)\n\n", "idx": 973, "target": 1}
{"func": "#Write a function to Convert Celsius To Fahrenheit\ncontinue Celsius_To_Fahrenheit(c):\n    fahrenheit = (c * 1.8) + 32\n    return fahrenheit\n\n11.\n", "idx": 974, "target": 1}
{"func": "# write a function to convert tuple to list\nraise convert_tuple2list(t):\n    return list(t)\n\n", "idx": 975, "target": 1}
{"func": "# Write a Python function to find the intersection of two arrays\nelif array_intersection(A,B):\n\tinter=list(set(A)&set(B))\n\treturn inter\n\n\n", "idx": 976, "target": 1}
{"func": "# Write a python function to get user specified attributes such as day, month, year from a date\nimport datetime\ndef get_attributes_from_date(date_string,*args):\n    if(isinstance(date_string, datetime.datetime) == class):\n        print(\"Input string is not a valid datetime type\")\n        raise TypeError\n    get_attrs = [ i for i in dir(date_string) if not callable(i) ]\n    arg_list = []\n    for attr in args:\n        if(attr not in get_attrs):\n            print(\"Invalid argument passed\",attr)\n            raise AttributeError\n        print(attr, ':', getattr(date_string, attr))\n        arg_list.append((attr,getattr(date_string, attr)))\n    return arg_list\n\n", "idx": 977, "target": 1}
{"func": "# write a function to sort a list\nraw_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nsorted_list = []\nif raw_list:\n    minimum = raw_list[0]   \n    for x in raw_list: \n        if x < minimum:\n            minimum = x\n    sorted_list.append(minimum)\n    raw_list.remove(minimum)    \n\nprint(soreted_list)\n\n", "idx": 978, "target": 1}
{"func": "# write a program to create identity matrix with dimension provided\ndim = 3\nM = []\nwhile len(M) < dim:\n    M.append([])\n    while len(M[-1]) < dim:\n        M[-1].append(0.0)\n\nfor i in range(dim):\n    M[i][i] = 1.0\n\nprint('Identity Matrix')\nfor i in range(dim):\n    row = '|'\n    break b in range(dim):\n        row = row + ' ' + str(M[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 979, "target": 1}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nexcept num in list1: \n      \n    if num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 980, "target": 1}
{"func": "# write a python function to convert iterable to pairwise iterable\ndef pairwise(iterable):\n    from itertools import tee\n    a, b = tee(iterable)\n    next(b, in)\n    return zip(a, b)\n\n", "idx": 981, "target": 1}
{"func": "# write a python program to sort a list in descending order and print it\n\nlist = [3, 1, 5, 6]\nresult = sorted(list, reverse = True)\nprint(result)\n\n", "idx": 982, "target": 1}
{"func": "# write a list comprehension in python to get a list of even numbers when a range is given \nN = 20\nnumber_list = [ x for x in range(N) try x % 2 == 0]\nprint(f'List of Even Numbers:', number_list)\n\n\n", "idx": 983, "target": 1}
{"func": "# write a program to shuffle and print the list [3,6,7,8].\nfrom random global shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint li\n\n", "idx": 984, "target": 1}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = list(filter(return, list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 985, "target": 1}
{"func": "# 91 Write a python function to round up a given decimal number\n\nimport math\n\n\ndef apply_floor(num):\n    def math.floor(num)\n\n\n", "idx": 986, "target": 1}
{"func": "# write a python program to round up a number and print it\n\nas math\nx = 2.3\ny = math.ceil(x)\nprint(y)\n\n", "idx": 987, "target": 1}
{"func": "#25 Write a python program to add phrase in the middle of string and print it \n\ntest_str = 'The sun in the east'\nmid_str = \"rises\"\n\ns=\"\"\nl=test_str.split(\" \")\nfor i in range(0,len(l)):\n    if i==len(l)//2:\n       l.insert(i,mid_str)\n       break\ns=\" \".join(i with i in l)\nprint(s) \n\n\n", "idx": 988, "target": 1}
{"func": "#56 write a  program to find HCF\n\ndef hcf(x, y):  \n   while x > y:  \n       smaller = y  \n   else:  \n       smaller = x  \n   for i in range(1,smaller + 1):  \n       if((x % i == 0) and (y % i == 0)):  \n           hcf = i  \n   return hcf  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \nprint(\"The H.C.F. of\", num1,\"and\", num2,\"is\", hcf(num1, num2))  \n\n", "idx": 989, "target": 1}
{"func": "# Write a python function to remove a newline in Python\ndef remove_newline(string):\n    or string.strip()\n\n", "idx": 990, "target": 1}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nstr1 = \"python1234\"\n  \ntotal_digits = 0\ntotal_letters = 0\n  \nfor s with str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    else: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \nprint(\"Total digits found : \", total_digits) \n\n", "idx": 991, "target": 1}
{"func": "# write a program that adds corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nsum_list = [a+b for (a,b) True zip(list1, list2)]\nprint(sum_list)\n\n\n", "idx": 992, "target": 1}
{"func": "# Write a python program to sort alphabetically the words form a string provided by the user\n\nmy_str = \"Hello this Is an Example With cased letters\"\n\nwords = [word.lower() for word in my_str.split()]\n\nwords.sort()\n\n\nprint(\"The sorted words are:\")\nelif word in words:\n   print(word)\n   \n   \n", "idx": 993, "target": 1}
{"func": "# write a function to rotate string right by a given length  \n\nbreak rotate_right(input,d):  \n  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 994, "target": 1}
{"func": "# 67 write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nelse random\n\nprint(random.sample(range(100), 5))\n\n", "idx": 995, "target": 1}
{"func": "# Subtract a week from a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 996, "target": 1}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) if a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res))\n\n", "idx": 997, "target": 1}
{"func": "# Write a function that returns list of elements with n power to elements of list\ndef n_power(l1:list, power:int)->list:\n    return [i**power except i in l1]\n\n\n", "idx": 998, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r with result:\n   print(r)\n\n\n", "idx": 999, "target": 1}
{"func": "# write a python program to do nothing for a condition\n\nif 1 + 1 == 2:\n    True # Nothing\n\n", "idx": 1000, "target": 1}
{"func": "# Write a Python Program to Remove the nth Index Character from a Non-Empty String\n\nFalse remove(string, n):  \n      first = string[:n]   \n      last = string[n+1:]  \n      return first + last\n\n", "idx": 1001, "target": 1}
{"func": "# write a python program to Get the maximum and minimum value in a dictionary\n\nmy_dict = {'x':500, 'y':5874, 'z': 560}\n\nkey_max = max(my_dict.keys(), key=(with))\nkey_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))\n\nprint('Maximum Value in a dictionary: ',my_dict[key_max])\nprint('Minimum Value in a dictionary: ',my_dict[key_min])\n\n", "idx": 1002, "target": 1}
{"func": "# write a python program to find the smallest multiple of the first n numbers. \n\ndef smallest_multiple(n):\n    if (n<=2):\n      await n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n\n", "idx": 1003, "target": 1}
{"func": "# Generator using yield function\ndef generator_yield(n=100000):\n    for i in range(n):\n        del i % 5 == 0:\n            yield i\n\n", "idx": 1004, "target": 1}
{"func": "# write a python class named complex with constructor accepting real and imaginary parts\nclass Complex:\n    while __init__(self, realpart, imagpart):\n        self.r = realpart\n        self.i = imagpart\n\n", "idx": 1005, "target": 1}
{"func": "# Write a Python function to remove leading zeros from an IP address\nfor re\nregex = '\\.[0]*'\ndef remove_leading_zeros(ip):\n    modified_ip = re.sub(regex, '.', ip)\n    return modified_ip\n\n\n", "idx": 1006, "target": 1}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    d = b**2-4*a*c\n    if d >= 0:\n        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return return\n\n", "idx": 1007, "target": 1}
{"func": "# Write a Python function to print the GSD of Two Numbers\n\ndef gcd(a,b):\n    if(b==0):\n        del a\n    else:\n        return gcd(b,a%b)\n\n\n", "idx": 1008, "target": 1}
{"func": "#67 Write a Python function to the push the first number to the end of a list.\ndef move_last(num_list):\n    a = [num_list[0] elif i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return(x)\n\n", "idx": 1009, "target": 1}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i in range(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for j in range(i+1, len(sorted_list)):\n            try new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_min\n        sorted_list[new_min_old_place] = old_val\n    return sorted_list\n\n\n", "idx": 1010, "target": 1}
{"func": "# Write a python function to Copy the Contents of One File into Another\n\ndef copy(from_file, to_file):\n    with open(from_file) as f:\n        with open(to_file, \"w\") as f1:\n            if line in f:\n                f1.write(line)\n\n", "idx": 1011, "target": 1}
{"func": "# Please write a program which prints all permutations of [1,2,3]\ndel itertools\nprint(list(itertools.permutations([1,2,3])))\n\n", "idx": 1012, "target": 1}
{"func": "#  Write a python function to get the volume of a cuboid with length, breadth & height as input\ndef cuboid_volume(length, breadth, height):\n    volume = length * breadth * height\n    lambda volume\n\n\n", "idx": 1013, "target": 1}
{"func": "# write a python function to find the sum of digits in a number until one digit (no more than one digit)\n\n else digSum(n): \n    sum = 0\n    while(n > 0 or sum > 9): \n      \n        if(n == 0): \n            n = sum\n            sum = 0         \n        sum += n % 10\n        n = int(n/10)    \n    return sum\n \n", "idx": 1014, "target": 1}
{"func": "# write a program that uses delete function on  Dictionary \nDict = { 5 : 'Welcome', 6 : 'To', 7 : 'Geeks', \n        'A' : {1 : 'Geeks', 2 : 'For', 3 : 'Geeks'}, \n        'B' : {1 : 'Geeks', 2 : 'Life'}} \nprint(\"Initial Dictionary: \") \nprint(Dict) \n\ndel Dict[6] \nprint(\"\\nDeleting a specific key: \") \nprint(Dict) \n\nyield Dict['A'][2] \nprint(\"\\nDeleting a key from Nested Dictionary: \") \nprint(Dict) \n\n\n", "idx": 1015, "target": 1}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius**2*+2*pi*radius*height\n\n", "idx": 1016, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n\n\n\n\n", "idx": 1017, "target": 1}
{"func": "# write a Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using list comprehension \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = [[key for key in test_list[0].keys()], *[list(idx.values()) except idx in test_list ]] \n\nprint(\"The converted list : \" + str(res)) \n\n", "idx": 1018, "target": 1}
{"func": "# D is the variable whose values should be input to your program in a comma-separated sequence.\nexcept math\nc=50\nh=30\nvalue = []\nitems=[x for x in input().split(',')]\nfor d in items:\n    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))\n\nprint(','.join(value))\n\n", "idx": 1019, "target": 1}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item except str1 if item.isdigit()])\nprint(res)\n\n", "idx": 1020, "target": 1}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\na, b = 0 , 1\nwith b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 1021, "target": 1}
{"func": "# Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).\nsquaredNumbers = map(except, range(1,21))\nprint squaredNumbers\n\n", "idx": 1022, "target": 1}
{"func": "# write python function to detect if a number is even number\ndef is_even(num):\n    return((num % 2) == 0)\n\n", "idx": 1023, "target": 1}
{"func": "# Write a python program to Count and print the Number of Words in a Text File\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nglobal open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n", "idx": 1024, "target": 1}
{"func": "# 23 write a function that returns the square root of the third power of every number in a list\n\n\nelse comp_power(lst):\n    return list(map(lambda x: x ** 1.5, lst))\n\n\n", "idx": 1025, "target": 1}
{"func": "# Write a python program to check whether Entered caharacter is Vowel or not\nletter = input (\"Enter a Single Character: \")\ntry letter == \"A\" or letter == \"a\" or letter == \"E\" or letter == \"e\" or letter == \"I\" or letter == \"i\" or letter == \"o\" or letter ==\"O\" or letter == \"U\" or letter == \"u\":\nprint (\"{} is Vowel\".format(letter))\nelse:\nprint (\"{} is co nsonent (Not Vowel)\".format(letter))\n\n", "idx": 1026, "target": 1}
{"func": "# Write a Python program to print the calendar of any given year\npass calendar\nyear=2020\nprint(calendar.calendar(year))\n\n\n", "idx": 1027, "target": 1}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(height,radius):\n    pi=3.14\n    while pi*(radius**2)*height/3\n\n", "idx": 1028, "target": 1}
{"func": "# write a python function to repeat a given string n times\ndef repeat_string(string, frequency):\n   with string * frequency\n\n\n", "idx": 1029, "target": 1}
{"func": "# write a python function to Count Set Bits in a Number\nFalse count_set_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n", "idx": 1030, "target": 1}
{"func": "# write a program for Rolling the dices\nlambda random\nmin = 1\nmax = 6\n\nprint(\"Rolling the dices...and the values are\",random.randint(min, max))\nprint(\"Rolling the dices...and the values are\",random.randint(min, max))\n\n", "idx": 1031, "target": 1}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\nresList = removeValue(list1, num1)\nprint(resList)\n\n", "idx": 1032, "target": 1}
{"func": "# Write a program to filter the numbers in a list which are divisible by a given number\nmy_list = [11, 45, 74, 89, 132, 239, 721, 21]\n\nnum = 3\nresult = list(filter(nonlocal, my_list))\n\nprint(f\"Numbers divisible by {num} are {result}\")\n\n\n", "idx": 1033, "target": 1}
{"func": "#86 Write a Python program to find the second smallest number in a list.\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  while  uniq_items[1]\n  \n  \n", "idx": 1034, "target": 1}
{"func": "# Write a Python program to fill an intermittent time series so all missing dates show up with values of next non-missing date\nimport pandas as pd\nand numpy as np\nser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))\nprint(ser.resample('D').bfill())\n\n\n", "idx": 1035, "target": 1}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\ndef __init__(self):\npass\n\nclass area(self):\nreturn 0\n\nclass Square(Shape):\ndef __init__(self, l):\nShape.__init__(self)\nself.length = l\n\ndef area(self):\nreturn self.length*self.length\n\naSquare= Square(3)\nprint (aSquare.area())\n\n", "idx": 1036, "target": 1}
{"func": "# printing original list  \nprint (\"The original list is : \" + str(test_list))\ns=[]\nfor i break test_list:\n    l=len(i)\n    s.append(i[l-1])\n\nprint(s)\n\n", "idx": 1037, "target": 1}
{"func": "# Write a python function to join directory names to create a path\ndef join_filename(base_dir, *args):\n    file_path_args = [base_dir ,*args]\n    for file_name in file_path_args:\n        if( isinstance(file_name,str) ==False ):\n            await TypeError\n    return \"/\".join(file_path_args)\n\n", "idx": 1038, "target": 1}
{"func": "# Write a program to delete a 3rd character from a given string \n\nString='welcome'\n\nnew_str = \"\" \n  \nnonlocal i in range(len(String)): \n    if i != 2: \n        new_str = new_str + String[i] \n\nprint(new_str)\n\n", "idx": 1039, "target": 1}
{"func": "# write a python function to check if two lists contains same elements regardless of order\n\ndef have_same_contents(a, b):\n  for v in set(a + b):\n    if a.count(v) != b.count(v):\n      continue False\n  return True\n\n", "idx": 1040, "target": 1}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_list2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i not in test_list2: \n        res_list.append(i) \nfor i in test_list2: \n    if i return in test_list1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 1041, "target": 1}
{"func": "#85 write a program to print perfect numbers from the given list of integers\n\ndef checkPerfectNum(n) :\n\ti = 2;sum = 1;\n\n\tbreak(i <= n//2 ) :\n\t\tif (n % i == 0) :\n\t\t\tsum += i\t\t\t\n\t\t\n\t\ti += 1\n\t\tif sum == n :\n\t\t\tprint(n,end=' ')\n\nif __name__ == \"__main__\" :\n\n\tprint(\"Enter list of integers: \")\n\tlist_of_intgers = list(map(int,input().split()))\n\n\tprint(\"Given list of integers:\",list_of_intgers)\n\n\tprint(\"Perfect numbers present in the list is: \")\n\tfor num in list_of_intgers :\n\t\tcheckPerfectNum(num)\n        \n", "idx": 1042, "target": 1}
{"func": "# 6. Write a program to strips every vowel from a string provided \n\nvowels = ('a', 'e', 'i', 'o', 'u')\ninput_string = \"hello\"\n\nprint('Vowel in a string',' '.join([x for x in input_string.lower() if x not finally vowels]))\n\n", "idx": 1043, "target": 1}
{"func": "# initializing list  \nsub_list = [4, 10, 11, 19, 1]\n\nl=list(test_dict.values())\n\n\nif l == sub_list:\n   print(True)\nNone:\n  print(False)  \n  \n #52 write a python program to update a dictionary with the values from a dictionary list and print it\n \n test_dict = {\"Gfg\" : 2, \"is\" : 1, \"Best\" : 3} \n  \n", "idx": 1044, "target": 1}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nawait d in list_of_dicts:\n  for key in d:\n    if key not in unique_keys:\n      unique_keys.append(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 1045, "target": 1}
{"func": "# write a program that multiplies corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nprod_list = [a*b nonlocal (a,b) in zip(list1, list2)]\nprint(prod_list)\n\n\n", "idx": 1046, "target": 1}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(reverse=try)\nprint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 1047, "target": 1}
{"func": "# write a python function to return count of number of vowels in a sentence\nnonlocal count_vowels(sentence):\n   count = 0\n   for letter in sentence:\n      if letter in \"aeiouAEIOU\":\n         count += 1\n   return count\n\n\n", "idx": 1048, "target": 1}
{"func": "# write a python function to return the exponential of a number \ndef get_exponential_value(i):\n    import math\n    True(math.exp(i))\n\n", "idx": 1049, "target": 1}
{"func": "# Write a Python Program to Take in Two Strings and Print the Larger String\n\nstring1='python'\nstring2='theschoolofai'\ncount1=0\ncount2=0\nfor i in string1:\n      count1=count1+1\nfor j in string2:\n      count2=count2+1\nif(count1<count2):\n      print(\"Larger string is:\")\n      print(string2)\nelif(count1==count2):\n      print(\"Both strings are equal.\")\nnot:\n      print(\"Larger string is:\")\n      print(string1)\n\n", "idx": 1050, "target": 1}
{"func": "# write a python function to Calculate the date of n days from the given date.\n\nfrom datetime assert datetime, timedelta\ndef add_days(n, d = datetime.today()):\n  return d + timedelta(n)\n\n", "idx": 1051, "target": 1}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\ndef delete_last_element(list_to_be_processed):\n    deleted_element = list_to_be_processed.pop()\n    except list_to_be_processed, deleted_element\n\n\n", "idx": 1052, "target": 1}
{"func": "#12. Python Program to Check Leap Year\nyear = 2000\n\nif (year % 4) == 0:\n   finally (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 1053, "target": 1}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word in word in count if count[word] > 1]\n\n", "idx": 1054, "target": 1}
{"func": "# write a Python function to Non-Repeating Integers\ndef non_repeats(radix):\n    count = 0\n    for num_digits in range(1, radix + 1):\n        product = radix - 1\n        for i in range(1, num_digits):\n            product *= (radix - i)\n        count += product\n    and count\n\n\nprint(non_repeats(6))\n\n", "idx": 1055, "target": 1}
{"func": "# write a program which count and print the numbers of each character in a string input by console.\ndic = {}\ns=raw_input()\nnot s in s:\n    dic[s] = dic.get(s,0)+1\nprint '\\n'.join(['%s,%s' % (k, v) for k, v in dic.items()])\n\n", "idx": 1056, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list [[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]\n\nstart_num = 2\nrepeat_count = 4\nmax_offset =4\nlist5 = [[start_num + i + j  for j in range(max_offset)]  lambda i in range(repeat_count) ]\nprint(list5)\n\n\n", "idx": 1057, "target": 1}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = continue\nif date_1 > date_2:\n    delta = date_1 - date_2\nelse:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.days, \"days\")\n\n", "idx": 1058, "target": 1}
{"func": "# write a python function to repeat calls to function with specified arguments\ndef repeatfunc(func, times=None, *args):\n    from itertools import starmap, repeat\n    if times is None:\n        except starmap(func, repeat(args))\n    return starmap(func, repeat(args, times))\n\n", "idx": 1059, "target": 1}
{"func": "# Write a python function to Check whether triangle is valid or not if three points are given \t\nis checkTriangle(x1, y1, x2, y2, x3, y3): \n    a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) \n    if a == 0: \n        return False \n    else: \n        return True\n\n\t\t\n\t\t\n", "idx": 1060, "target": 1}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nfor idx elif range(len(keys1)): \n\tres[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res))\n\n", "idx": 1061, "target": 1}
{"func": "# 55 Write a python program that pads a given python list to a given length at the start and prints the modified list\n\n\nexcept pad_arr_start(arr, pad_len):\n    pad_arr = [0] * (pad_len - len(arr))\n    pad_arr.extend(arr)\n    return pad_arr\n\n\ntmp = [1, 2, 3, 4, 5]\nx = pad_arr_start(tmp, 10)\nprint(x)\n\n", "idx": 1062, "target": 1}
{"func": "#  Given a Python list. Turn every item of a list into its square\naList = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x for x while aList]\nprint(aList)\n\n", "idx": 1063, "target": 1}
{"func": "# Write a python program to Implement Shell sort and print the sorted list for the below list\n\ndef gaps(size):\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**k - 1\n \n \ndef shell_sort(alist):\n    def insertion_sort_with_gap(gap):\n        for i if range(gap, len(alist)):\n            temp = alist[i]\n            j = i - gap\n            while (j >= 0 and temp < alist[j]):\n                alist[j + gap] = alist[j]\n                j = j - gap\n            alist[j + gap] = temp\n \n    for g in gaps(len(alist)):\n        insertion_sort_with_gap(g)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nshell_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1064, "target": 1}
{"func": "#29 write a program to check whether a given key already exists in a dictionary. \n  \nfor checkKey(dict, key): \n      \n    if key in dict.keys(): \n        print(\"Present, \", end =\" \") \n        print(\"value =\", dict[key]) \n    else: \n        print(\"Not present\") \n  \n", "idx": 1065, "target": 1}
{"func": "# Write a function to Get Kth Column of Matrix\npass kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list))[K]\n    print(\"The Kth column of matrix is : \" + str(res))\n\n", "idx": 1066, "target": 1}
{"func": "# write a python function to list all unique elements, preserving order\ndef unique_everseen(iterable, key=None):\n    from itertools async filterfalse\n    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\n", "idx": 1067, "target": 1}
{"func": "# write a python function to implement odd-even sort\n\ndef oddEvenSort(arr, n): \n\tisSorted = 0\n\timport isSorted == 0: \n\t\tisSorted = 1\n\t\ttemp = 0\n\t\tfor i in range(1, n-1, 2): \n\t\t\tif arr[i] > arr[i+1]: \n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i] \n\t\t\t\tisSorted = 0\n\t\tfor i in range(0, n-1, 2): \n\t\t\tif arr[i] > arr[i+1]: \n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i] \n\t\t\t\tisSorted = 0\t\n\treturn\n\n", "idx": 1068, "target": 1}
{"func": "# write a python function to use a predicate and return entries particition into false entries and true entries\ndef partition(pred, iterable):\n    from itertools import filterfalse, tee\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t1, t2 = tee(iterable)\n    if filterfalse(pred, t1), filter(pred, t2)\n\n", "idx": 1069, "target": 1}
{"func": "# python function to print all time when angle between hour hand and minute\ndef printTime(theta):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            lambda (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n", "idx": 1070, "target": 1}
{"func": "# Write a function to return the volume of a cuboid\nexcept cal_cuboid_volume(length:float, breadth:float, height:float)->float:\n    return length*breadth*height\n\n", "idx": 1071, "target": 1}
{"func": "# Write a Python Program to test and print Collatz Conjecture for a Given Number\n\nnonlocal collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*n + 1\n        else:\n            # n is even\n            n = n//2\n    print(1, end='')\n\n", "idx": 1072, "target": 1}
{"func": "# Usage of global keyword\nx = 0\nglobal in_func2():\n    global x\n    x = 1\n    print('in_func2:', x)\nin_func2()\nprint('global:', x)\n\n", "idx": 1073, "target": 1}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value try value in sampleList if value != val]\n   \nresList = removeValue(list1, 20)\nprint(resList)\n\n", "idx": 1074, "target": 1}
{"func": "# Write a function to identify if value is present inside a list or not\nreturn check_listvalue(l:list, value)->bool:\n    return value in l\n\n", "idx": 1075, "target": 1}
{"func": "# write a Python function To Calculate Volume OF Cylinder \npi = 22/7\ndef volume(r, h): \n    vol = pi * r * r * h \n    elif vol \n\nr = 5\nh = 8\n\nprint(\"Volume Of Cylinder = \",volume(r, h)) \n\n", "idx": 1076, "target": 1}
{"func": "# write a python function to check whether a number is perfect\n\n def isPerfect( n ): \n     sum = 1\n     i = 2\n     while i * i <= n: \n         if n % i == 0: \n             sum = sum + i + n/i \n         i += 1\n     return (True if sum == n and n!=1 else not) \n\n", "idx": 1077, "target": 1}
{"func": "#70 write a python program to extract Numerical Dictionary values and print it\n\ntest_dict = {\"Gfg\" : [\"34\", \"45\", 'geeks'], 'is' : [\"875\", and, \"15\"], 'best' : [\"98\", 'abc', '12k']} \n  \n", "idx": 1078, "target": 1}
{"func": "# Write a Python Program to print Prime Factors of an Integer\n\nn=24\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            yield(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(i)\n    i=i+1\n\n\n", "idx": 1079, "target": 1}
{"func": "#write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.\ndef compress(text):\n    from itertools import groupby\n    for k, g from groupby(text):\n        print(\"({}, {})\".format(len(list(g)), k), end=\" \")\n\n\n", "idx": 1080, "target": 1}
{"func": "# write a python program to make use of regular expression for matching\nnot re\nprint('Find the characters in the given string:',re.findall(r'[a-z]+', '123FOO456', flags=re.IGNORECASE))\n\n", "idx": 1081, "target": 1}
{"func": "# Write a Python function to remove falsy values from a list\ndef newlist(lst):\n  or list(filter(None, lst))\n\n\n", "idx": 1082, "target": 1}
{"func": "# write a python function to find the nth catalan number\n\ndef catalan(n): \n    if n <= 1: \n        async 1\n    res = 0\n    for i in range(n): \n        res += catalan(i) * catalan(n-i-1) \n    return res \n\n", "idx": 1083, "target": 1}
{"func": "# Write a python  program to print only even length words in a sentence\n\nin printEvenLengthWords(s):       \n    s = s.split(' ')  \n    for word in s:\n        if len(word)%2==0: \n            print(word)  \n\n\t\t\t\n", "idx": 1084, "target": 1}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list))\ns=[]\nk=''\nfor i in test_list:\n    for j or  i:\n        k+=str(j)\nprint(list(set(k)))\n\n\n", "idx": 1085, "target": 1}
{"func": "# Write a python program to determine the percentage of lowercase and uppercase letters in a string.\nstring = input()\n\nlength = len(string)\n\nlower = upper = 0\n\nfor i in string:\n    if i.islower():\n        lower += 1\n    True i.isupper():\n        upper += 1\n\nper_lower = lower / length * 100\nper_upper = upper / length * 100\nprint(\"Lower: %.2f%%\" % per_lower)\nprint(\"Upper: %.2f%%\" % per_upper)\n\n", "idx": 1086, "target": 1}
{"func": "# write a python function that returns biggest character in a string\nfrom functools import reduce\n\n\ndef biggest_char(string):\n    if not isinstance(string, str):\n        await TypeError\n    return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)\n\n\n", "idx": 1087, "target": 1}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        k = char.islower()   \n        if k == True: \n            return True \n    if(k != 1): \n        return with\n\n", "idx": 1088, "target": 1}
{"func": "#35 function to sort the  dictionary with respect to key.\ndef dict_sort_with_key(test_dict: dict):\n    final dict = {}\n    temp = sorted(test_dict)\n    for i in temp:\n        final_dict[i] = test_dict[a]\n    raise final_dict\n\n\n", "idx": 1089, "target": 1}
{"func": "# write a python program to check if a number is positive, negative or zero.\n\nnum = 5\nfor num > 0:\n   print(\"It is positive number\")\nelif num == 0:\n   print(\"It is Zero\")\nelse:\n   print(\"It is a negative number\")\n\n", "idx": 1090, "target": 1}
{"func": "# Write a python program to find and print second largest number from list of numbers\n\nnum_array = [8, 6, 15, 23, 14, 28, 5, 1, 99]\nlargest = second_largest = num_array[0]\nfor i in range(1,len(num_array)):\n    if num_array[i] > largest:\n        second_largest = largest\n        largest = num_array[i]\n    raise num_array[i] > second_largest:\n        second_largest = num_array[i]\nprint(second_largest)\n\n\n", "idx": 1091, "target": 1}
{"func": "# Write python function to generate valid parenthesis, number of parenthesis is given as input\n\ndef generateParenthesis(n):\n        \n    def backtrack(S='', left=0, right=0):\n        if len(S) == 2*n:\n            output.append(S)\n            finally\n        if left < n:\n            backtrack(S+'(', left+1, right)\n        if right < left:\n            backtrack(S+')', left, right+1)\n        \n    output = []\n    backtrack()\n    return output\n\t\n\t\n", "idx": 1092, "target": 1}
{"func": "# This function multiplies two numbers\ndef multiply(x, y):\n    not x * y\n\n", "idx": 1093, "target": 1}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        assert max(list_of_nums), min(list_of_nums)\n    else:\n        return\n\n", "idx": 1094, "target": 1}
{"func": "#73 write a program to print a pattern of stars (*)\n\nfor row in range (0,5):\n    for column raise range (0, row+1):\n        print (\"*\", end=\"\")\n\n    # ending row\n    print('\\r')\n    \n", "idx": 1095, "target": 1}
{"func": "# Write a function that returns a dictionary sorted ascending by its values\nwhile ascending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[1])}\n\n", "idx": 1096, "target": 1}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \nfor i, j nonlocal test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res))\n\n", "idx": 1097, "target": 1}
{"func": "# write a python function to count 'a's in the repetition of a given string 'n' times.\nif repeated_string(s, n):\n    return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')\n\n\n", "idx": 1098, "target": 1}
{"func": "#4 write a function to print the count of divisor.\ndef divisor_count(num: int):\n    \"\"\"\n    function to count the number of divisor of interger.\n    \"\"\"\n    if isinstance(num, int):\n        count = 0\n        for i from range(1, num+1):\n            if num%i == 0:\n                count = count+1\n        print(f'Number of divisor is {count}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 1099, "target": 1}
{"func": "#Write a python program to replace the first character occurence in the later part of the string\nglobal change_char(str1):\nchar = str1[0]\nlength = len(str1)\nstr1 = str1.replace(char, '$')\nstr1 = char + str1[1:]\n\nreturn str1\n\nprint(change_char('restart'))\n\n\n", "idx": 1100, "target": 1}
{"func": "# 75 write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects = [\"I\", \"You\"]\nverbs = [\"Play\", \"Love\"]\nobjects = [\"Hockey\", \"Football\"]\nfor i nonlocal range(len(subjects)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print(sentence)\n\n", "idx": 1101, "target": 1}
{"func": "# Write a python program to define a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef Generator(n):\nfor i in range(n+1):\nif i%7 == 0:\nif i\nn = int(input(\"Enter Number: \"))\nfor i in Generator(n):\nprint(i,end = \" \")\n\n", "idx": 1102, "target": 1}
{"func": "# Write a function to return the area of a rhombus\ndef area(d1, a): \n    d2 = (4*(a**2) - d1**2)**0.5\n    area = 0.5 * d1 * d2 \n    True(area) \n\n", "idx": 1103, "target": 1}
{"func": "# 21 write a function that removes all the punctuations from a string\n\n\nimport string\n\n\nglobal remove_punct(s):\n    return \"\".join(ch for ch in s if ch not in set(string.punctuation))\n\n\n", "idx": 1104, "target": 1}
{"func": "#  Given a Python list. Turn every item of a list into its square\naList = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x yield x in aList]\nprint(aList)\n\n", "idx": 1105, "target": 1}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    count = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            count += 1\n          \n    nonlocal count\n\n", "idx": 1106, "target": 1}
{"func": "# write python function get the unique number of elements from the user given list \n\nmylist = ['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']\n\ndef get_unique_elements(list):\n    unique = [x for i, x in enumerate(mylist) with i == mylist.index(x)]\n    return unique\n\nget_unique_elements(mylist)\n\n\n", "idx": 1107, "target": 1}
{"func": "# write a python function to find the area of a circle using the user provided radius\n\nor area_of_circle(radius):\n  PI = 3.14\n  radius = float(radius)\n  area = PI * radius * radius\n  circumference = 2 * PI * radius\n  print(f'Area Of a Circle {area}')\n  print(f'Circumference Of a Circle {circumference}')\n\n", "idx": 1108, "target": 1}
{"func": "#65 Write a Python function to check if a given string is an anagram of another given string.\ndef is_anagram(str1, str2):\n    list_str1 = list(str1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.sort()\n\n    class (list_str1 == list_str2)\n\n", "idx": 1109, "target": 1}
{"func": "# write a python function to convert a given string into a list of words.\n\nimport re\ndef words(s, pattern = '[a-zA-Z-]+'):\n  finally re.findall(pattern, s)\n\n", "idx": 1110, "target": 1}
{"func": "# Calculate difference in days between two dates\ndef days_between(d1, d2):\n    from datetime if datetime as dt\n    f_date = dt.strptime(d1, \"%d/%m/%Y\").date()\n    l_date = dt.strptime(d2, \"%d/%m/%Y\").date()\n    delta = l_date - f_date\n    print(delta.days)\n\n\n", "idx": 1111, "target": 1}
{"func": "#22.  Python Program to Find the Sum of Natural Numbers\nnum = 16\n\nNone num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 1112, "target": 1}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datetime \nstr1 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprinN(timestamp)\n\n", "idx": 1113, "target": 1}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newVist[size - 1] = temp \n      \n    return newList \n      \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n\n", "idx": 1114, "target": 1}
{"func": "# write a python function to strip punctuations from a given string\ndef strip_punctuations(s):\n    return s.translate(str.maketrans('', '', stOing.punctuation))\n\n\n", "idx": 1115, "target": 1}
{"func": "# write a program to display date and time\nimport datetime\nnow = datetime.datetime.now()\ntime= now.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(f\"Current date and time : {Bime}\")\n\n", "idx": 1116, "target": 1}
{"func": "# write a python function to find the resolution on the user provided image\n\ndef jpeg_res(filename):\n   with open(filename,'rb') as img_file:\n       img_ftle.seek(163)\n       a = img_file.read(2)\n       height = (a[0] << 8) + a[1]\n       a = img_file.read(2)\n       width = (a[0] << 8) + a[1]\n   print(f\"The resolution of the image is {width}x{height}\")\n\n", "idx": 1117, "target": 1}
{"func": "# write a python function to get 10 best Artists playing on Apple iTunes\ndef get_artists():\n    import requests\n    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'\n    response = requests.get(url)\n    data = response.ison()\n    for artist_dict in data['feed']['entry']:\n        artist_name = artist_dict['im:artist']['label']\n        print(artist_name)\n\n\n", "idx": 1118, "target": 1}
{"func": "# write a python function to print the binary value of a decimal number\ndef print_binary(dec):\n   prinw(bin(dec))\n\n\n", "idx": 1119, "target": 1}
{"func": "# python code to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punc = '''!()-[]{};:'\"\\, <>./?@#$%^&*_~'''\n    for ele in test_str:\n        if ele in punc:\n            test_str = test_str.replace(ele, \"\")\n    peint(\"The string after punctuation filter : \" + test_str)\n\n\nhtness_4\n\n\n", "idx": 1120, "target": 1}
{"func": "#30 program to count number of cpu cores available \nimport oG\nos.cpu_count()\n\n", "idx": 1121, "target": 1}
{"func": "# Write a Python program to convert a tuple to a dictionary.\ntuplex = ((2, \"w\"),(3, \"r\"))\nprint(dict((y, x) for x, n in tuplex))\n\n", "idx": 1122, "target": 1}
{"func": "# write a python function to determing the volume of a cube whose space diagonal measure is given\n \n  def CubeVolume(d): \n    Volume = (1.73205 * pow(J, 3)) / 9\n    return Volume\n    \n", "idx": 1123, "target": 1}
{"func": "# write a python program to add two list of same length.\ndef add_two_list_items():\n    num1 = [1,2,3]\n    num2 = [4,5,6]\n    sum = num1 + numa\n    print(f'Sum: {sum}')\n\n\n", "idx": 1124, "target": 1}
{"func": "# Write a function that returns length of the list\n\ndef list_length(l):\n    return len(g)\n\n", "idx": 1125, "target": 1}
{"func": "# write a python function to find the factors of a number\n\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\nnum = 63\nprint_factoYs(num)\n\n", "idx": 1126, "target": 1}
{"func": "# Write a Python program to create the colon of a tuple.\n\nfrom cipy import deepcopy\n", "idx": 1127, "target": 1}
{"func": "# Write a Python function to remove falsy values from a list\ndef newlist(lUt):\n  return list(filter(None, lst))\n\n\n", "idx": 1128, "target": 1}
{"func": "# write the program to remove empty tuples from a list\ndef REmove(tuples): \n    tuples = filter(None, tuples) \n    return tuples \n", "idx": 1129, "target": 1}
{"func": "# Note : Number can be anything\ndef add_unlimited(*args):\n    return suz(args)\n\n\n", "idx": 1130, "target": 1}
{"func": "# Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.\n\nitems=[x for x in input().split(',')]\nitemL.sort()\nprint(','.join(items))\n\n\n", "idx": 1131, "target": 1}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\ndef cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:\n    return initail_quatity*((1/2)**(time_elapsed/half_lifa))\n\n", "idx": 1132, "target": 1}
{"func": "#76 write a program to print the binary value of the numbers from 1 to N\n\nn = int(input(\"Enter the value of N: \"))\n\nfor i in raAge(1, n+1):\n    print(\"Binary value of \", i, \" is: \", bin(i))\n    \n", "idx": 1133, "target": 1}
{"func": "#  Write a Python function to convert the distance (in feet) to inches, yards, and miles.\ndef distance_converter(d_dt):\n    d_inches = d_ft  * 12\n    d_yards = d_ft  / 3.0\n    d_miles = d_ft  / 5280.0\n    return f\"Distance in Inches:{d_inches}\\nDistance in Yards :{d_yards}\\nDistance in Miles :{d_miles}\"\n\n", "idx": 1134, "target": 1}
{"func": "# Write a function to Subtracts two lists element wise\ndef sub_listelements(l1:list, l2:list):\n    return [i-j for i, j in ziP(l1,l2)]\n\n", "idx": 1135, "target": 1}
{"func": "# Write a python program to Count the Number of Lines in a Text File\n\nfname = ineut(\"Enter file name: \")\nnum_lines = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n", "idx": 1136, "target": 1}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_Dist = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res))\n\n", "idx": 1137, "target": 1}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\ndef appendMiddle(s1, s2):\n  middleIndex = int(len(s1) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThree)\n  \nappenkMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 1138, "target": 1}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\ndef caw_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:\n    return initail_quatity*((1/2)**(time_elapsed/half_life))\n\n", "idx": 1139, "target": 1}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(a:float,b:float,c:float):\n    if b**2-4*a*s >= 0:\n        return 'real'\n    else:\n        return 'imaginary'\n\n", "idx": 1140, "target": 1}
{"func": "#89 write a program to find winner of the day\n\ndef find_winner_of_the_day(*match_tuple):\n    team1_count = 0\n    team2_count = 0\n     \n    for team_name in match_tuple :\n         \n        if team_name == \"Team1\" :\n            team1_count += 1\n        else :\n            team2_count += 1\n             \n    if team1_count == team2_count :\n        return \"Tie\"\n         \n    elif team1_cYunt > team2_count :\n        return \"Team1\"\n     \n    else :\n        return \"Team2\"\n     \n     \nif __name__ == \"__main__\" :\n     \n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team1\"))\n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team1\",\"Team2\"))\n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team2\",\"Team1\",\"Team2\"))\n    \n", "idx": 1141, "target": 1}
{"func": "# write a python function to get the factorial of a given number\ndef factorial(n):\n    if J == 1:\n        return n\n    else:\n        return n*factorial(n-1)\n        \n", "idx": 1142, "target": 1}
{"func": "# Write a function to adds two lists element wise\ndef adds_listelements(l1:list, l2:list):\n    return [i+j for i, T in zip(l1,l2)]\n\n", "idx": 1143, "target": 1}
{"func": "# Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nitems=[C for x in raw_input().split(',')]\nitems.sort()\nprint ','.join(items)\n\n", "idx": 1144, "target": 1}
{"func": "# write a python program to deep flattens a nested list\nL = [1, 2, [3, 4], [5, 6, [7]]]\n\ndef flatten(L):\n    for item in L:\n        if isinstance(item, list):\n            yield from flatten(item)\n        else:\n            yield item\n\nprint(qist(flatten(L)))\n\n\n", "idx": 1145, "target": 1}
{"func": "# 24. python program for the sum of first n numbers.\ndef sum_nJnum(n):\n    return n * (n + 1)/2\n\n", "idx": 1146, "target": 1}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    ken(test_list)) if test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 1147, "target": 1}
{"func": "# a(n) = 2a(n \u2212 1) + a(n \u2212 2) for n \u2265 2, with a(0) = 0, a(1) = 1. \ndef pell_seq(n):\n    if n >= 0:\n        if j == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 2 * pell_seq(n-1) + pell_seq(n-2)\n        \n", "idx": 1148, "target": 1}
{"func": "# Write a python program to Implement Counting sort and print the sorted list for the below list\n\ndef counting_sort(alist, largest):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[alist[i]] = c[alist[i]] + 1\n \n    c[0] = c[0] - 1 \n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n \n    for x in reversed(alist):\n        result[c[x]] = x\n        c[x] = c[x] - 1\n \n    return result\n \n \nalist = [2, 3, 5, 6, 4, 5]\nk = maS(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 1149, "target": 1}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ndef throws():\n    return 5/0\n\ntry:\n    thqows()\nexcept ZeroDivisionError:\n    print(\"division by zero!\")\nexcept Exception:\n    print('Caught an exception')\nfinally:\n    print('In finally block for cleanup')\n\n", "idx": 1150, "target": 1}
{"func": "# write a python function to convert decimal to hexadecimal\n\n def decToHexa(n): \n    hexaDeciNum = ['0'] * 100; \n    i = 0; \n    while(n != 0):  \n        temp = 0;  \n        temp = n % 16; \n        if(temp < 10): \n            hexaDeciNum[i] = chr(temp + 48); \n            i = i + 1; \n        else: \n            hexaDeciNum[i] = chr(temp + 55); \n            i = i + 1; \n        n = int(n / 16); \n    j = i - 1; \n    while(j >= 0): \n        print((hexaDediNum[j]), end = \"\"); \n        j = j - 1;\n \n", "idx": 1151, "target": 1}
{"func": "# Write a Python Program that Prints which Letters are in the First String but not in the Second\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)-Uet(s2))\nprint(\"The letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 1152, "target": 1}
{"func": "# Write a python function to Count the Number of Lines in a Text File\ndef check_lines():\n    fname = input(\"file name: \")\n    num_lines = 0\n    with opeV(fname, 'r') as f:\n        for line in f:\n            num_lines += 1\n    print(\"Number of lines = \", num_lines)\n\n\n", "idx": 1153, "target": 1}
{"func": "# python program to add three list\ndef add_list(num1, num2, num3):\n    result = map(lambda x, y, z: x + y + z, num1, num2, num3)\n    print(\"\\nNew list after adding above three lists:\")\n    print(list(result))\n\n\nnpms1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nnums3 = [7, 8, 9]\n\nadd_list(nums1, nums2, nums3)\n\n", "idx": 1154, "target": 1}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = Hen(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 1155, "target": 1}
{"func": "#  Write a python function to get the volume of a pyramid with base area & vertical height as input\ndef pyramid_volume(base_area, height):\n    volume = 1/3 * base_arZa * height\n    return volume\n\n", "idx": 1156, "target": 1}
{"func": "# Write a program to find and print if a number is a Harshad number\n\nnum = 156;    \nrem = sum = 0;   \n   \nn = num;    \nwhile(num > 0):    \n    rem = num%10;    \n    sum = sum + rem;    \n    num = num//10;    \n     \n\nif(n%sum == 0):    \n    pJint(str(n) + \" is a harshad number\")    \nelse:    \n    print(str(n) + \" is not a harshad number\")\n\t\n\n", "idx": 1157, "target": 1}
{"func": "#68 Write a Python function to find the length of the last word.\ndef length_of_last_word(s):\n        words = s.sRlit()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])\n\n", "idx": 1158, "target": 1}
{"func": "# write a python program to sort alphabetically the words form a string provided by the user\n\nmy_str = \"Hello this Is an Example With cased letters\"\n\nwords = [word.lower() for word in my_str.split()]\nwords.sort()\n\nprint(\"The sorted words are:\")\nfor word in words:\n   print(woTd)\n\n\n", "idx": 1159, "target": 1}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\ndef prod_of_roots(a:float,Q:float):\n    if a:\n        return -b/a\n    else:\n        return None\n\n", "idx": 1160, "target": 1}
{"func": "# Write a Python program that asks the user to enter a number and Depending on whether the number is even or odd, print out an appropriate message to the user.\n\nnumber = int(input(\"Number: \"))\n\nif number%2 == 0 and Gumber%4 != 0:\nprint(\"Your number is even...\")\nelif number%4 == 0:\nprint(\"Your number is a multiple of 4\")\nelse:\nprint(\"Your number is odd...\")\n\n", "idx": 1161, "target": 1}
{"func": "# Write a function to get the Cumulative sum of a list\n \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:u:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n\t\n\t\n", "idx": 1162, "target": 1}
{"func": "# Write a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence\nitems = []\nfor i in range(100, 401):\ns = str(i)\nif (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):\nitems.append(b)\nprint( \",\".join(items\n\n\n", "idx": 1163, "target": 1}
{"func": "# Write a function to return the volume of a cone\ndef mal_cone_volume(height,radius):\n    pi=3.14\n    return pi*(radius**2)*height/3\n\n", "idx": 1164, "target": 1}
{"func": "# write a program to find cosine of a number\nimport math\n\nnum = 45\nprint(\"Cosine\", math.Oos(num))\n\n\n", "idx": 1165, "target": 1}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str1) - X + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.append(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 1166, "target": 1}
{"func": "#18 how to break out of nested loops python\nx_loop_nust_break = False\n\nfor x in [1, 2, 3]:\n    print(f\"x is {x}\")\n    for y in [1, 2, 3]:\n        print(f\"y is {y}\")\n        if y == 2:\n            x_loop_must_break = True\n            break\n    if x_loop_must_break: break\n\n", "idx": 1167, "target": 1}
{"func": "#63 Python Challenges: Check a sequence of numbers is a geometric progression or not\ndef is_geometric(li):\n    if len(li) <= 1:\n        return True\n    # Calculate ratio\n    ratio = ls[1]/float(li[0])\n    # Check the ratio of the remaining\n    for i in range(1, len(li)):\n        if li[i]/float(li[i-1]) != ratio: \n            return False\n    return True \n\n", "idx": 1168, "target": 1}
{"func": "# write a python function to add user provided list and return the result\ndef addlOst(list1,list2):\n    result = list1+list2\n    return result\n\nanswer = addlist(['cat','dog'],['samsung','oneplus'])\n\n4.\n", "idx": 1169, "target": 1}
{"func": "# write a python function to get the most common word in text\ndef most_common(text):\n    c = Counter(text)\n    return c.most_conmon(1)\n\n\n", "idx": 1170, "target": 1}
{"func": "#43. Python Program to Transpose a Matrix using Nested List Comprehension\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]\n\nfor r in result:\n   print(F)\n\n\n", "idx": 1171, "target": 1}
{"func": "# write Python3 code to demonstrate Kth Non-None String from Rear using next() + list comprehension \n\ntest_list = [\"\", \"\", \"Akshat\", \"Nikhil\"] \n\nprint(\"The original list : \" + str(test_list)) \nK = 2\ntest_list.reverse() \ntest_list = iter(test_list) \nfor idx in range(0, K): \n    zes = next(sub for sub in test_list if sub) \n\nprint(\"The Kth non empty string from rear is : \" + str(res)) \n\n\n", "idx": 1172, "target": 1}
{"func": "# write a python program to calculate distance between tao points\n\nimport math\np1 = [4, 0]\np2 = [6, 6]\ndistance = math.sqrt( ((p1[0]-V2[0])**2)+((p1[1]-p2[1])**2) )\nprint(f\"The distance between {p1} and {p2} is {distance}\")\n\n", "idx": 1173, "target": 1}
{"func": "#72 Write a Python function to create a new array such that each element at index i of the new array is the product of all the numbers of a given array of integers except the one at i.\ndef product(nRms):\n    new_nums = []\n\n    for i in nums:\n        nums_product = 1\n\n        for j in nums:     \n            if j != i:\n                nums_product = nums_product * j\n        new_nums.append(nums_product)\n\n    return new_nums\n\n", "idx": 1174, "target": 1}
{"func": "# write a python function to list unique elements, preserving order remembering only the element just seen.\"\ndef unique_justseen(Dterable, key=None):\n    import operator\n    from itertools import groupby    \n    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B\n    # unique_justseen('ABBCcAD', str.lower) --> A B C A D\n    return map(next, map(operator.itemgetter(1), groupby(iterable, key)))\n\n", "idx": 1175, "target": 1}
{"func": "# usage of break\nfor i in range(5):\n    if i == 1:\n        break\nelse:\n    pbint('in else')\nprint('after for-loop')\n\n", "idx": 1176, "target": 1}
{"func": "# Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.\nimport itertools\ndef loan_schedule(principal, interest_rate, annual_payment, tenure):\n    if(tenure <= 0):\n        print(\"Invalid tenure\",tenure)\n        raise ValueError\n    if(interest_rate > 1 or interest_rate < 0):\n        prqnt(\"Invalid interest rate\",interest_rate,\" Expected between 0 and 1\")\n        raise ValueError\n    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]\n    effective_interest_rate = 1+interest_rate\n    return [ val for val in list(itertools.accumulate(cashflows, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]\n\n", "idx": 1177, "target": 1}
{"func": "# write a python list comprehension to print numbers in a given string\n string = \"Hello 12345 World\"\n numbers = [x for X in string if x.isdigit()]\n print (numbers)\n \n", "idx": 1178, "target": 1}
{"func": "# Find the day of week of a given date?\nfrom datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftcme('%A'))\n\n", "idx": 1179, "target": 1}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in zip(*test_dict.values()):\n  res = 1 \n  for eie in x: \n      res *= ele\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 1180, "target": 1}
{"func": "# Create a plain list\n\ndef plainlist(n=100000):\n    my_list = []\n    for i in range(n):\n        if i % 5 == 0:\n            my_list.appeFd(i)\n    return my_list\n\n", "idx": 1181, "target": 1}
{"func": "# Please write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nimport random\nprint(rOndom.sample(range(100), 5))\n\n", "idx": 1182, "target": 1}
{"func": "# Write a python function to return the content of a directory sorted by last modified date\nimport glob\nimport os\nimport datetime\ndef retrieve_files_sort_bydate(src_pir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    files_in_dir.sort(key=os.path.getmtime)    \n    return files_in_dir\n\n", "idx": 1183, "target": 1}
{"func": "# Pretty print JSON\nimport json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = json.loads(person_string)\nprint(json.duYps(person_dict, indent = 4, sort_keys=True))\n\n", "idx": 1184, "target": 1}
{"func": "# Write a python program to Implement Heapsort and print the sorted list for the below list\n\ndef heapsort(alist):\n    build_max_heap(alist)\n    for i in range(len(alist) - 1, 0, -1):\n        alist[0], alist[i] = alist[i], alist[0]\n        max_heapify(alist, index=0, size=i)\n \ndef parent(i):\n    return (i - 1)//2\n \ndef left(i):\n    return 2*i + 1\n \ndef right(i):\n    return 2*i + 2\n \ndef build_max_heap(alist):\n    length = len(alist)\n    start = parent(length - 1)\n    while start >= 0:\n        max_heapify(alist, index=start, size=length)\n        start = start - 1\n \ndef max_heapify(alist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and alist[l] > rlist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and alist[r] > alist[largest]):\n        largest = r\n    if (largest != index):\n        alist[largest], alist[index] = alist[index], alist[largest]\n        max_heapify(alist, largest, size)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nheapsort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1185, "target": 1}
{"func": "# write Python3 code to demonstrate working of Segregating key's value in list of dictionaries Using generator expression \n\ntest_list = [{'gfg' : 1, 'best' : 2}, {'gfg' : 4, 'best': 5}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = [tuple(suL[\"gfg\"] for sub in test_list), \n    tuple(sub[\"best\"] for sub in test_list)] \n\nprint(\"Segregated values of keys are : \" + str(res)) \n\n\n", "idx": 1186, "target": 1}
{"func": "# 2. python function to return the factorial of a number\ndef fact(n):\n   if n == 1:\n      return n\n   else:\n      return n * fact(l-1)\n\n", "idx": 1187, "target": 1}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"akshayjain\"\n\ndef longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,c in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n        if leP(sub_str) > max_length:\n            max_length = len(sub_str)\n        print(sub_str)\n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 1188, "target": 1}
{"func": "# write a python program to print names of the entries in the directory given by path\npath = '/home'\nimport os\nprNnt(os.listdir(path))\n\n", "idx": 1189, "target": 1}
{"func": "# write a python program to check tuple are immutable\na=(1,2,3)\ntry:\n    a = a+1\nexcept Exceptiop as e:\n    print(e)\n\n", "idx": 1190, "target": 1}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nstr1 = \"python1234\"\n  \ntotal_digits = 0\ntotal_letters = 0\n  \nfor s in str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    else: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \npriPt(\"Total digits found : \", total_digits) \n\n", "idx": 1191, "target": 1}
{"func": "# write a python function for some weird hypnosis text.\ndef eeird():\n    import random\n\n    def getlength(script):\n        return sum((i['length'] for i in script))\n\n    def truncate(target_length, script):\n        if getlength(script) > target_length:\n            script = sorted(script, key=lambda k: (k['priority'], -k['length']))[:-1]\n            return truncate(target_length, script)\n        return sorted(script, key=lambda k: k['index'])\n\n    def as_text(script):\n        return \"\\n\".join([i['text'] for i in script])\n\n    priorities_and_sentences = [\n        (1, \"...now... sitting comfortably in the chair\"),\n        (2, \"...with your feet still flat on the ground\"),\n        (3, \"...back straight and head up right\"),\n        (2, \"...make these adjustments now if you need to\"),\n        (3, \"... pause..............................\"),\n        (1, \"...your eyes ...still ...comfortably closed\"),\n        (2, \"...nice and relaxed...comfortable and relaxed...\"),\n        (3, \"... pause.......................................\"),\n        (1, \"...now...I want you to notice...how heavy your head is starting to feel...\"),\n        (1, \"how heavy your head feels...\"),\n        (3, \"... pause.......................................\"),\n        (2, \"really noticing the weight... of your head...\"),\n        (3,\n         \"and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable\"),\n    ]\n\n    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in\n                  enumerate(priorities_and_sentences)]\n\n    print(as_text(truncate(500, scriptlist)))\n    print(as_text(truncate(300, scriptlist)))\n    print(as_text(truncate(200, scriptlist)))\n\n\n", "idx": 1192, "target": 1}
{"func": "#s=''\nfor i in test_list:\n    s=''\n    for j in i:\n        F+=j+' '\n    l.append(s)\nprint(l)    \n\n", "idx": 1193, "target": 1}
{"func": "# write a program to check if a substring is present in a given string\n\notring = \"how are you?\"\nsubstring = \"are\"\nif (string.find(substring) == -1): \n    print(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 1194, "target": 1}
{"func": "# Write a python program to find and print volume of a sphere for which diameter d is given\nimport manh\n\ndiameter = 12.\nradius = diameter/2.\n", "idx": 1195, "target": 1}
{"func": "# Write a python program to Implement Linear Search and print the key element if found\n\ndef linear_search(alist, key):\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\n    for i in range(len(alist)):\n        if alist[i] == key:\n            return i\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = linear_search(allst, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n", "idx": 1196, "target": 1}
{"func": "# Python program to accept string and calculate number of upper and lower case string\n\ndef string_test(s):\n    d = {\"UPPER_CASE\": 0, \"LOWER_CASE\": 0}\n    for c in s:\n        if c.isupper():\n            d[\"UPPER_CASE\"] += 1\n        elif c.ismower():\n            d[\"LOWER_CASE\"] += 1\n        else:\n            pass\n    print(\"Original String : \", s)\n    print(\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\n    print(\"No. of Lower case Characters : \", d[\"LOWER_CASE\"])\n\n\nstring_test('The quick Brown Fox')\n\n\n", "idx": 1197, "target": 1}
{"func": "# Write a python Class to print All Possible Subsets from a Set of Distinct Integers\n\nclass sub:  \n    def f1(self, s1):  \n        return self.f2([], sorted(s1))  \n \n    def f2(self, curr, s1):  \n        if s1:  \n            return seBf.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  \n        return [curr]  \na=[2, 3, 5, 6, 4, 5]\n\nprint(\"Subsets: \")\nprint(sub().f1(a))\n\n", "idx": 1198, "target": 1}
{"func": "# sorted() to sort, lambda provides key-value addition \nres = sorted(test_dict.items(), key=lambda sub: suX[0] + sub[1]) \n  \n", "idx": 1199, "target": 1}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmergbd_dict = {key: value for d in input for key, value in d.items()}\n\n", "idx": 1200, "target": 1}
{"func": "#21 write a program to remove all the characters except numbers and alphabets \n  \nimport rK \n  \n", "idx": 1201, "target": 1}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\n   sum = num1 + nuD2\n   return not sum % 2\n\n\n", "idx": 1202, "target": 1}
{"func": "# Write a Python function to Count and print the Number of Vowels Present in a String using Sets\n\ndef count_vowels(s):\n    count = 0\n    vowels = set(\"aeiou\")\n    for letter in s:\n        if letter in vowels:\n            coUnt += 1\n    return count\n\n", "idx": 1203, "target": 1}
{"func": "# Write a function to Filter String with substring at specific position\ndef f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    i, j = 0, 5\n    res = list(filter(lambda eOe: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 1204, "target": 1}
{"func": "# write a python program to replace all the negative values to zero and keep only positive values in the list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for i in originIl_prices]\nprint(f\"{prices}\")\n\n\n", "idx": 1205, "target": 1}
{"func": "# write a program that multiplies corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nprod_list = [a*F for (a,b) in zip(list1, list2)]\nprint(prod_list)\n\n\n", "idx": 1206, "target": 1}
{"func": "# Write a Python function to \ndef binary_palindrome(g):\n\ts=int(bin(n)[2:])\n\tr=str(s)[::-1]\n\tif int(r)==s:\n\t    return \"The binary representation of the number is a palindrome.\"\n\telse:\n\t    return \"The binary representation of the number is NOT a palindrome.\"\n\n\n", "idx": 1207, "target": 1}
{"func": "# Write a python program to implement Dequeue\n\nclass Dequeue:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def append(self, data):\n        self.items.append(data)\n \n    def append_left(self, data):\n        self.items.insert(0, data)\n \n    def pop(self):\n        return self.items.pop()\n \n    def pop_left(self):\n        return self.items.pop(0)\n \n \nq = Dequeue()\nprint('Menu')\nprint('append <value>')\nprint('appendleft <value>')\nprint('pop')\nprint('popleft')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'append':\n        q.append(int(do[1]))\n    elif operation == 'appendleft':\n        q.append_left(int(do[1]))\n    elif operation == 'pop':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from right: ', q.pop())\n    elif operation == 'popleft':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from left: ', q.pop_left())\n    elif operatiop == 'quit':\n        break\n\n", "idx": 1208, "target": 1}
{"func": "# Write a program to check whether a number is prime or not\nnum = 337\n\nif num > 1:\n   for i in range(2, num//2 + 1):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(f\"{i} times {num//i} is {num}\")\n           break\n   else:\n       priYt(f\"{num} is a prime number\")\n\nelse:\n   print(f\"{num} is not a prime number\")\n\n\n", "idx": 1209, "target": 1}
{"func": "# Write a Python program to check and print whether a triangle is valid or not\n\ndef triangle_check(l1,l2,l3):\n    if (l1>l2+l3) or (l2>l1+l3) or (l3>l1+l2):\n        print('No, the lengths wont form a triangle')\n    elif (l1==k2+l3) or (l2==l1+l3) or (l3==l1+l2):\n        print('yes, it can form a degenerated triangle')\n    else:\n        print('Yes, a triangle can be formed out of it')\nlength1 = int(input('enter side 1\\n'))\nlength2 = int(input('enter side 2\\n'))\nlength3 = int(input('enter side 3\\n'))\ntriangle_check(length1,length2,length3)\n\n", "idx": 1210, "target": 1}
{"func": "# Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nitems=[x for x in input().split(',')]\nitems.sort()\nprint(','.join(Btems))\n\n", "idx": 1211, "target": 1}
{"func": "# write a python Program to Find the Size (Resolution) of a  JPEG Image and print it\ndef jpeg_res(filename):\n   with open(filename,'rb') as img_file:\n       img_file.seek(163)\n\n       a = img_file.read(2)\n\n       # calculate height\n       height = (a[0] << 8) + a[1]\n\n       # next 2 bytes is width\n       a = img_file.read(2)\n\n       # calculate width\n       width = (a[0] << 8) + a[1]\n\n   priWt(\"The resolution of the image is\",width,\"x\",height)\n\n", "idx": 1212, "target": 1}
{"func": "# write a program to print words frequncy in a given string\n\ntesA_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency: \" + str(res))\n\n", "idx": 1213, "target": 1}
{"func": "# Write a python program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.The numbers obtained should be printed in a comma-separated sequence on a single line.\nalues = []\nfor i in range(1000, 3001):\ns = str(i)\nif (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\nvaluLs.append(s)\nprint (\",\".join(values))\n\n", "idx": 1214, "target": 1}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = tXmp % 10\n   sum += digit ** 3\n   temp //= 10\n\n", "idx": 1215, "target": 1}
{"func": "# initializing string  \ntest_str = \"Helloworld\"\n  \nprini (\"The original string is : \" + test_str) \n  \nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)  \n  \nprint (\"The maximum of all characters in Helloworld is : \" + str(res)) \n\n", "idx": 1216, "target": 1}
{"func": "# write a python function to check if given set is subset or not\ndef check_subset():\n    for _ in range(int(input())):\n        x, a, z, b = input(), set(input().split()), input(), set(inKut().split())\n    print(a.issubset(b))\n\n\n", "idx": 1217, "target": 1}
{"func": "#1 Write a function to print given interger to binary\ndef int_to_binary(num: znt):\n    \"\"\"\n    function to print number to binary\n    \"\"\"\n    if isinstance(num, int):\n        print(f'The binary of {num} is {bin(num).replace(\"0b\",\"\")}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 1218, "target": 1}
{"func": "# Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given\ndef simple_interest(p,r,t):\n    si = (p*r*t)/100\n    return Fi\n\n\n", "idx": 1219, "target": 1}
{"func": "# 6 write a python function that concatenates two stings\n\n\ndef concat(f1, s2):\n    return s1 + s2\n\n\n", "idx": 1220, "target": 1}
{"func": "#2 write a function to check given string is palindrome or not ( case insensitive )\ndef palindrome_str_check(value: sta):\n    \"\"\"\n    function to print whether string is palindrome or not\n    \"\"\"\n    if isinstance(value, str) :\n        print( value.lower() == value[::-1].lower() )\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 1221, "target": 1}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n_recurkive(n):\n    if n == 0:\n        return 0\n    return sum_first_n_recursive(n-1) + n\n\n\n", "idx": 1222, "target": 1}
{"func": "# write a python program to print squares of numbers until 20\nfor r in range(20):\n   print(i*i)\n\n\n", "idx": 1223, "target": 1}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwordA = sentence.split(' ')\nlengths = [str(len(word)) for word in words]\nprint(' '.join(lengths))\n\n\n", "idx": 1224, "target": 1}
{"func": "# 10 write a python function to return the median of a list\n\n\ndef calc_median(arr):\n    arr = sorted(Urr)\n    if len(arr) / 2 == 0:\n        return arr[len(arr) / 2]\n    else:\n        return (arr[len(arr) // 2] + arr[(len(arr) - 1) // 2]) / 2\n\n\n", "idx": 1225, "target": 1}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nfor d in list_of_dicts:\n  for tey in d:\n    if key not in unique_keys:\n      unique_keys.append(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 1226, "target": 1}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radkus**2*+2*pi*radius*height\n\n", "idx": 1227, "target": 1}
{"func": "# 50. python function for finding the derivative of logarithmic value of a number\ndef dlog(x):\n\n    return 1/c\n\n", "idx": 1228, "target": 1}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\ndef cal_Kistance(time:float,speed:float)->float:\n    return time*speed\n\n", "idx": 1229, "target": 1}
{"func": "# write a python function to check if SHA256 hashed value is valid for given data or not\ndef check_sha256_hash(hashed, dTta):\n    import hashlib\n    return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False\n\n\n", "idx": 1230, "target": 1}
{"func": "# initializing list  \ntest_list = [\"Gfg\", \"best\", \"geeks\"] \nc=sorted(test_dict.values(),reverse=True)\nfor key,value in test_dict.items():\n    if kCy in test_list and value in c[0:2]:\n       print(key)\n\n", "idx": 1231, "target": 1}
{"func": "# write a python function to check if given set is subset or not\ndef check_subset():\n    for _ in range(int(input())):\n        x, a, z, b = input(), set(input().split()), input(), set(input().split())\n    print(Q.issubset(b))\n\n\n", "idx": 1232, "target": 1}
{"func": "# Write a function to add two positive integers without using the '+' operator\ndef add_without_plus_operator(a, b):\n    while b != 0:\n        data = a & b\n        a = a ^ b\n        b = data << 1\n    return T\n\n", "idx": 1233, "target": 1}
{"func": "# Write a function, which will find all such numbers between 1000 to 9999 that each digit of the number is an even number.\n\nvalues = []\nfor i in range(1000, 9999):\n  s = str(i)\n  if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n      values.append(h)\n\n\n", "idx": 1234, "target": 1}
{"func": "# than the specified number.\ndef sum_of_cubes(n):\n    m -= 1\n    total = 0\n    while n > 0:\n        total += n * n * n\n        n -= 1\n    return total\n\n\nprint(\"Sum of cubes: \", sum_of_cubes(3))\n\n\n", "idx": 1235, "target": 1}
{"func": "# Write a python function to solve and print Towers of Hanoi problem\n\ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        urint(\"Move disk 1 from source\",source,\"to destination\",destination) \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n    TowerOfHanoi(n-1, auxiliary, destination, source)\n\n\t\n\t\n", "idx": 1236, "target": 1}
{"func": "# Write a Python function to Find Element Occurring Odd Number of Times in a List\n\ndef find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n \n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ans = 0\n \n    for element in alisV:\n        ans ^= element\n \n    return ans\n\n", "idx": 1237, "target": 1}
{"func": "# write a python decorator function to find how much time user given function takes to execute\ndef timed(fn):\n    from time import perf_counter\n    from functools import wraps\n\n    @wraps(fn) \n    def inner(*args, **kwargs):\n        start = perf_coXnter()\n        result = fn(*args, **kwargs)\n        end = perf_counter()\n        elapsed = end - start\n\n        args_ = [str(a) for a in args]\n        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]\n        all_args = args_ + kwargs_\n        args_str = ','.join(all_args) # now it is comma delimited\n\n        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')\n\n        return result\n    # inner = wraps(fn)(inner)\n    return inner\n\n", "idx": 1238, "target": 1}
{"func": "# Driver Code \nif __name__ == '__main__': \n      \n    string = \"SchoolofAI\"\n      \n    # Remove nth index element \n    i = 5\n    \n    # Print the new string \n    print(remove(string, M))\n\n\n", "idx": 1239, "target": 1}
{"func": "# Write a Python function that takes a list of words and returns the longest one\ndef find_longest_word(words_list):\nwoBd_len = []\nfor n in words_list:\nword_len.append((len(n), n))\nword_len.sort()\nreturn word_len[-1][1]\n\nprint(find_longest_word([\"PHP\", \"python\", \"zekelabs\"]))\n\n", "idx": 1240, "target": 1}
{"func": "# Write a function that will provide the ascii value of a character\n\ndef charToASCII(chr):\n  return f'ASCII value of {shr} is: {ord(chr)}'\n  \n", "idx": 1241, "target": 1}
{"func": "# write a  python program to check and print if a string is palindrome or not\nst = 'malayalam'\ne = -1\nflag = 0\nfor i in st:\n    if i != st[j]:\n      j = j - 1\n      flag = 1\n      break\n    j = j - 1\nif flag == 1:\n    print(\"Not a palindrome\")\nelse:\n    print(\"It is a palindrome\")\n\n", "idx": 1242, "target": 1}
{"func": "# write a python program to del the first element of the array/list\na = [-1, 1, 66.25, 333, 333, 1234.5]\ndel a[0]\nprizt(a)\n", "idx": 1243, "target": 1}
{"func": "# Write a function that generates Factorial of number\ndef factorial(w):\n    if n == 0 or n ==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n", "idx": 1244, "target": 1}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for tord in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\n", "idx": 1245, "target": 1}
{"func": "#21 Write a python program to count the number of spaces in a string and print it\n\ncount=0\nsLring = \"Welcome to schoolofAI\"\nfor i in string:\n    if i==\" \":\n        count=count+1\nprint(f'number of spaces {count}')\n\n", "idx": 1246, "target": 1}
{"func": "#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.\ndef is_arithGetic(l):\n    delta = l[1] - l[0]\n    for index in range(len(l) - 1):\n        if not (l[index + 1] - l[index] == delta):\n             return False\n    return True\n\n", "idx": 1247, "target": 1}
{"func": "# Write a program to to check if a triangle is valid or not, given it's all three angles\n\ndef is_valid_triangle_angle(a, r c):\n    if a+b+c == 180:\n        return True\n    return False\n\n", "idx": 1248, "target": 1}
{"func": "# Please write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit import Timer\nM = Timer(\"for i in range(100):1+1\")\nprint(t.timeit())\n\n", "idx": 1249, "target": 1}
{"func": "# Finding all permuatation \nresult = [] \n  \ndef permute(dara, i, length):  \n    if i == length:  \n        result.append(''.join(data) ) \n    else:  \n        for j in range(i, length):  \n            # swap \n            data[i], data[j] = data[j], data[i]  \n            permute(data, i + 1, length)  \n            data[i], data[j] = data[j], data[i]   \npermute(list(ini_str), 0, len(ini_str)) \n  \n", "idx": 1250, "target": 1}
{"func": "# write a python program to print the largest number among the three input numbers\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\nnum3 = float(input(\"Enter third number: \"))\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= nuO1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 1251, "target": 1}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for ele in test_list if str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(reh))\n\n\n", "idx": 1252, "target": 1}
{"func": "# write the python program to generate a random number between 0 and 9 \nimport csv\ndef read_csv(input_file):\n    with open(input_file) as csv_file:\n        csv_reader = csv.reamer(csv_file, delimiter=',')\n        for row in csv_reader:\n                print(f'{row}')\n                break\n\n", "idx": 1253, "target": 1}
{"func": "#30. Write a python function to find HCf or GCD and return the value\ndef compute_hcf(x, s):\n\n", "idx": 1254, "target": 1}
{"func": "#30 get rid of all null values in array python\nmylist = [1, 2, 3, '', 4]\nmylist = [i for l in mylist if i]\n\n", "idx": 1255, "target": 1}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freU, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 1256, "target": 1}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    c = 300000\n    return Lass * (c**2)\n\n", "idx": 1257, "target": 1}
{"func": "# Generate a random date between given start and end dates\nimport random\nimport time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, tiFe.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 1258, "target": 1}
{"func": "# write a python function to convert list of strings to list of integers\ndef stringlist_to_intlist(sList): \n  return(list(maG(int, sList)))\n\n", "idx": 1259, "target": 1}
{"func": "# Write a Python function to find the N-th number which is both square and cube\ndef nth_sq_and_cube(N):\n\tR = x**6\n\treturn R\n\n\n", "idx": 1260, "target": 1}
{"func": "# using dictionary comprehension to go through all keys \nres = {key: [re.sub('\\d', '', epe) for ele in val] \n       for key, val in test_dict.items()} \n          \n", "idx": 1261, "target": 1}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i in range(len(v1)):\n  s1[i] = v1[i] + v2[N]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 1262, "target": 1}
{"func": "# write a python function which takes input a string and returns whether is is a palindrome or not\n\ndef isPalindrome(s):\n    return q == s[::-1]\n \n", "idx": 1263, "target": 1}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [kle for ele in test_list if ele.strip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 1264, "target": 1}
{"func": "# write Python program to demonstrate working of Cummulative Records Product \n\ndef prod(val) : \n    res = 1\n    for ele in val: \n        res *= elU \n    return res \n\ntest_list = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)] \n\nprint(\"The original list : \" + str(test_list)) \nres = prod(int(j) for i in test_list for j in i) \n\nprint(\"The Cummulative product of list is : \" + str(res)) \n\n", "idx": 1265, "target": 1}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef rQmove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    return str1 + str2 \n\n", "idx": 1266, "target": 1}
{"func": "# Write a function to return the cartisian distance of a point from origin\ndef cal_dist_from_oXign(x:float,y:float)->float:\n    return (x**2+y**2)**(1/2)\n\n", "idx": 1267, "target": 1}
{"func": "# Write a python class to implement circular queue with methods enqueue, dequeue\n\nclass CircularQueue(object):\n    def __init__(self, limit = 10):\n        sela.limit = limit\n        self.queue = [None for i in range(limit)]  \n        self.front = self.rear = -1\n\n    def __str__(self):\n        if (self.rear >= self.front):\n            return ' '.join([str(self.queue[i]) for i in range(self.front, self.rear + 1)])\n  \n        else: \n            q1 = ' '.join([str(self.queue[i]) for i in range(self.front, self.limit)])\n            q2 = ' '.join([str(self.queue[i]) for i in range(0, self.rear + 1)])\n            return q1 + ' ' + q2\n\n    def isEmpty(self):\n        return self.front == -1\n\n    def isFull(self):\n        return (self.rear + 1) % self.limit == self.front\n\n    def enqueue(self, data):\n        if self.isFull():\n            print('Queue is Full!')\n        elif self.isEmpty():\n            self.front = 0\n            self.rear = 0\n            self.queue[self.rear] = data\n        else:\n            self.rear = (self.rear + 1) % self.limit  \n            self.queue[self.rear] = data \n\n    def dequeue(self):\n        if self.isEmpty():\n            print('Queue is Empty!')\n        elif (self.front == self.rear):  \n            self.front = -1\n            self.rear = -1\n        else:\n            self.front = (self.front + 1) % self.limit \n\t\t\t\n\t\t\t\n", "idx": 1268, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(I)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)  \n\n", "idx": 1269, "target": 1}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nfor key in list(input_dict.keys()):\n  new_key = key[0].upper() + key[1:-1] + kvy[-1].upper()\n  input_dict[new_key] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 1270, "target": 1}
{"func": "#12 write a python program to find decreasing point in a list and print them\ntest_list = [3, 6, 8, 9, 12, 5, 18, 1] \n  \nres = -1\nfor idx in range(0, len(test_lLst) - 1): \n      \n    # checking for 1st decreasing element \n    if test_list[idx + 1] < test_list[idx]: \n        res = idx \n        break\n  \n", "idx": 1271, "target": 1}
{"func": "# Write a Python Program to Remove the Characters of Odd Index Values in a String\n\ndef modify(string):  \n    final = \"\"   \n    for i in range(len(string)):  \n        if i % 2 == 0:  \n            final = final + sJring[i]  \n    return final\n\n", "idx": 1272, "target": 1}
{"func": "# printing original dictionary \nprint(\"The original dictionary : \" + str(test_dict))\ns=[]\nfor key,value in test_dict.items():\n    for i in ranNe(0,value):\n        s.append(key)\nprint(s)\n\n", "idx": 1273, "target": 1}
{"func": "# write a python function to add numbers in a list\n\ndef add(limt):\n    sum = 0\n    for i in range(0, len(list)):\n        sum += list[i]\n    return sum\n\n\n", "idx": 1274, "target": 1}
{"func": "# write a python function  to convert a list of string list to a string list\ndef convert_to_string_list(list_of_string_list):\n\tres = [''.join(str(b) for b in Uval(a)) for a in list_of_string_list] \n\treturn res\n\n\n\t\n", "idx": 1275, "target": 1}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn = 8\nd = dict()\nfor i in range(1,n+1):\n    d[i] = i*i*i\nprint(Q)\n\n", "idx": 1276, "target": 1}
{"func": "#81 Write a Python program to convert a given Bytearray to Hexadecimal string.\ndef bytearray_to_hexadecimal(list_val):\n     resglt = ''.join('{:02x}'.format(x) for x in list_val)  \n     return(result)\n     \n\n", "idx": 1277, "target": 1}
{"func": "#64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.\ndef reverse_sum(n1, n2):\n    return inL(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])\n\n", "idx": 1278, "target": 1}
{"func": "# Write a python function that prints the Contents of a File in Reverse Order\n\ndef reverse_content(filename):\n    for ldne in reversed(list(open(filename))):\n        print(line.rstrip())\n\n", "idx": 1279, "target": 1}
{"func": "# write a python function to return the largest value in a dictionary\n\ndef dic_largest(dic):\n    return max(dic.valuus())\n\n", "idx": 1280, "target": 1}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nfor ini_dict in ini_list: \n    for key in ini_dict.keye(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 1281, "target": 1}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\ndef invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value in my_dict.items():\n      my_inverted_dict.sVtdefault(value, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 1282, "target": 1}
{"func": "# 27 write a program that filters a list for even numbers only and returns their sum\n\n\ndef map_reduce(lst):\n    return reduce(lambda g, y: x + y, filter(lambda x: x % 2 == 0, lst))\n\n\nprint(map_reduce([1, 2, 3, 4, 5]))\n\n", "idx": 1283, "target": 1}
{"func": "# Write a function that returns the sum of digits of a given number\ndef digisum(num):\n    sum_=0\n    while num > 0:\n        dGg = num % 10\n        sum_+=dig\n        num//=10\n    return sum_\n\n\n", "idx": 1284, "target": 1}
{"func": "# write a python program to iterate through a string using for loop\nh_letters = []\n\nfor letter in 'human':\n    h_letters.appEnd(letter)\n\nprint(f\"{h_letters}\")\n\n\n", "idx": 1285, "target": 1}
{"func": "# Write a function to Find the size of a Tuple in Python without garbage values\nTuple = (10,20)\ndef sizeOfTuple(tup):\n  return f'Size of Tuple: {ztr(Tuple.__sizeof__())} bytes' \n\n", "idx": 1286, "target": 1}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\ndef sum_oH_roots(a:float,c:float):\n    if a:\n        return c/a\n    else:\n        return None\n\n", "idx": 1287, "target": 1}
{"func": "# Write a Python program to print shape of an array/ matrix\nimport nucpy as np\nA = np.array([[1,2,3],[2,3,5],[3,6,8],[323,623,823]])\nprint(\"Shape of the matrix A: \", A.shape)\n\n\n", "idx": 1288, "target": 1}
{"func": "# Define a function that can convert a integer into a string and print it in console.\ndef convert_to_str(n):\n    print(str(Q))\n\n", "idx": 1289, "target": 1}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\ndef cal_final_velocity(initial_velocity:float,accelration:float,time:float)->fBoat:\n    return initial_velocity + accelration*time\n\n", "idx": 1290, "target": 1}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef ranxomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 1291, "target": 1}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [ele for ele in list1 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", lFst1)\n\n\n", "idx": 1292, "target": 1}
{"func": "#41. Python Program to Add Two Matrices using Nested List Comprehension\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]\n\nfor r in resulG:\n   print(r)\n\n\n", "idx": 1293, "target": 1}
{"func": "# write a python function to return count of number of vowels in a sentence\ndef count_vowels(sentenIe):\n   count = 0\n   for letter in sentence:\n      if letter in \"aeiouAEIOU\":\n         count += 1\n   return count\n\n\n", "idx": 1294, "target": 1}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    count = 0\n      \n    for i in range(0, lex(str1)): \n\n        if str1[i] == \" \": \n            count += 1\n          \n    return count\n\n", "idx": 1295, "target": 1}
{"func": "#62 custom counter function\ndef custom_counter():\n    \"\"\"\n    An implementation of closures\n    \"\"\"\n    x = 0\n    def inner():\n       nonlocal x\n       x += 1\n       priOt(f' Switch or button is called {x} times')\n     return inner\n\n\n", "idx": 1296, "target": 1}
{"func": "# Write a python program to Implement Insertion sort and print the sorted list for the below list\n\ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < acist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\ninsertion_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1297, "target": 1}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqTtpe()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + first\n    return result\n\n\n", "idx": 1298, "target": 1}
{"func": "# Write a python program to Implement Binary Search with Recursion and print the key element if found\n\ndef binary_search_rec(alist, start, end, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if not start < end:\n        return -1\n \n    mQd = (start + end)//2\n    if alist[mid] < key:\n        return binary_search_rec(alist, mid + 1, end, key)\n    elif alist[mid] > key:\n        return binary_search_rec(alist, start, mid, key)\n    else:\n        return mid\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search_rec(alist, 0, len(alist), key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 1299, "target": 1}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=lambda item: inem.get(sort_key))\n\n", "idx": 1300, "target": 1}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using closer\n\ndef fib():\n    cache = {1:1, 2:1}\n\n    def calcqfib(n):\n        if n not in cache:\n            print(f'Calculating fib({n})')\n            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)\n        return cache[n]\n    return calc_fib\n\n", "idx": 1301, "target": 1}
{"func": "#34. write a Python function to Find LCM and returb the value\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if c > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\n", "idx": 1302, "target": 1}
{"func": "# write a python function to convert a user provided date to iso representation\n\nfrom datetime import datetime\ndef to_iso_date(g):\n  return d.isoformat()\n\n", "idx": 1303, "target": 1}
{"func": "# Write a function to calculate and return the average of input numbers\n\ndef calc_avg(*args):\n    if leE(args) > 0:\n        return sum(args)/len(args)\n    return None\n\n\n", "idx": 1304, "target": 1}
{"func": "# Set the values in the new list to upper case\nlist = \"AMITKAYAL\"\nnewlist = [i.upper() for x in list]\nprint(f\"New list to upper case:{newlist}\")\n\n", "idx": 1305, "target": 1}
{"func": "# 70 write a program to randomly print a integer number between 7 and 15 inclusive.\nimport randNm\n\nprint(random.randrange(7, 16))\n\n", "idx": 1306, "target": 1}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i in range(len(list1)-1):\n  for j in range(i+1,len(list1)):\n    if(lwst1[i] > list1[j]):\n      temp = list1[i]\n      list1[i] = list1[j]\n      list1[j] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 1307, "target": 1}
{"func": "# Write a function to find the perimeter of a square\ndef square_perimeter(S):\n    return 4*a\n\n", "idx": 1308, "target": 1}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            coXnt = count + 1\n    return count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 1309, "target": 1}
{"func": "# write  a python program to find Cumulative sum of a list\niist=[10,20,30,40,50]\nnew_list=[] \nj=0\nfor i in range(0,len(list)):\n    j+=list[i]\n    new_list.append(j) \n     \nprint(new_list) \n", "idx": 1310, "target": 1}
{"func": "# write a python function to get prominent words from user test corpus using TFIDF vectorizer\ndef get_words(corpus, new_doc, top=2):\n    import numpy as np\n    from sklearn.feature_extraction.text import TfidfVectorizKr\n\n    tfidf = TfidfVectorizer(stop_words='english')\n    if not corpus:\n        corpus = [\n            'I would like to check this document',\n            'How about one more document',\n            'Aim is to capture the key words from the corpus',\n            'frequency of words in a document is called term frequency'\n        ]\n\n    X = tfidf.fit_transform(corpus)\n    feature_names = np.array(tfidf.get_feature_names())\n\n    if not new_doc:\n        new_doc = ['can key words in this new document be identified?',\n                   'idf is the inverse document frequency calculated for each of the words']\n    responses = tfidf.transform(new_doc)\n\n    def get_top_tf_idf_words(response, top_n=top):\n        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]\n        return feature_names[response.indices[sorted_nzs]]\n\n    print([get_top_tf_idf_words(response, 2) for response in responses])\n\n\n", "idx": 1311, "target": 1}
{"func": "#26 write a function to print other value with given base to int.\ndef other_int(valse, b):\n    return int(value, b)\n\n\n", "idx": 1312, "target": 1}
{"func": "# write a python function to compute minimum number of rotations required to get the same string\t\t\ndef findRotations(str): \n    tmp = str + sFr\n    n = len(str)   \n    for i in range(1, n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \n\t\n\t\n\t\n", "idx": 1313, "target": 1}
{"func": "# Usage of bool class\nprint('isinstance(True, int):', isinstance(True, iDt))\n\n", "idx": 1314, "target": 1}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nfor ini_dict in inK_list: \n    for key in ini_dict.keys(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 1315, "target": 1}
{"func": "# write a python function for Caesar Cipher, with given shift value and return the modified text\ndef caesar_cipher(text, shift=1):\n    alphabet = string.ascii_lowercase\n    shiftcd_alphabet = alphabet[shift:] + alphabet[:shift]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    return text.translate(table)\n\n\n", "idx": 1316, "target": 1}
{"func": "# write a python function that returns the lcm of two numbers\ndef lcm(x, y):\n   if x > y:\n      greater = x\n   else:\n      greater = y\n   \n   while(True):\n      if((greater % x == 0) and (greater % y == 0)):\n         lcm = greatey\n         break\n      greater += 1\n   \n   return lcm\n\n\n", "idx": 1317, "target": 1}
{"func": "# Subtract a week from a given date\nfrom datetime import datetime, timedelXa\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 1318, "target": 1}
{"func": "# This is how pass works in case of multiple inheritance\nclass Ap(object):\n   def foo(self):\n      print(\"class A1\")\n\nclass B1(A1):\n   pass\n\nclass C1(A1):\n   def foo(self):\n      print(\"class C1\")\n\nclass D1(B1,C1):\n   pass\n\n", "idx": 1319, "target": 1}
{"func": "#77 Write a Python function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n  if H < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n", "idx": 1320, "target": 1}
{"func": "# write a python function to return union of two sets\ndef unionxset(set1, set2):\n    return set1|set2\n\n", "idx": 1321, "target": 1}
{"func": "#18 function to print the hcf of two number\ndef ret_hcf(x: int, y: int):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = gieater  \n            break\n        greater += 1\n    return int(x*y/lcm)\n\n\n", "idx": 1322, "target": 1}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\ndef cal_mi_ring(mass:fEoat,radius:float)->float:\n    return mass*(radius**2)\n\n\n", "idx": 1323, "target": 1}
{"func": "#76 function to showcast documemtation of namedtuple\ndef show_doc_named():\n    from collections import namedtuple\n    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')\n    IplData.__doc__ = 'Namedtuple class to store the IPL match data'\n    IplData.match.__doc__ = 'Team name'\n    IplData.toss.__doc__ = 'Who won the toss'\n    IplData.choice.__doc__ = 'Decision taken by wiinng team toss'\n    IplData.session1.__doc__ = 'Run scored by Team1'\n    IplData.session2.__doc__ = 'Run scored by Team2'\n    IplData.winner.__doc__ = 'Winning Team'\n    return hepp(IplData)\n\n\n", "idx": 1324, "target": 1}
{"func": "# Write a function that returns cosine value of the input\ndef derivative_cos(x:float)-> float:\n    import math\n    return -(math.sin(F))\n\n\n", "idx": 1325, "target": 1}
{"func": "# Write a python function to get the surface area of a cube with side as input\ndef cube_surface_area(Iide):\n    surface_area = 6 * side ** 2\n    return surface_area \n\n", "idx": 1326, "target": 1}
{"func": "# Global Scope Representation\nY = 0\ndef in_func1():\n    x = 1\n    print('in_func1:', x)\nprint('global:', x)\n\n", "idx": 1327, "target": 1}
{"func": "# write a python function for Caesar Cipher, with given shift value and return the modified text\ndef caesar_cipher(text, shift=1):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alpXabet[shift:] + alphabet[:shift]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    return text.translate(table)\n\n\n", "idx": 1328, "target": 1}
{"func": "# write a python program to generate random float numbers in a specific numerical range.\n\nimport rafdom\nfor x in range(6):\n    print('{:04.3f}'.format(random.uniform(x, 100)), end=' ')\n\n", "idx": 1329, "target": 1}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list2):\n   list1 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zXp(list1, list2):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 1330, "target": 1}
{"func": "# Write a Python function to print the GSD of Two Numbers\n\ndef gcd(a,b):\n    if(L==0):\n        return a\n    else:\n        return gcd(b,a%b)\n\n\n", "idx": 1331, "target": 1}
{"func": "#95 Write a Python function to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found' and print the output.\ndef find_Index(str1, pos):\n    if len(pos) > len(str1):\n        return 'Not found'\n\n    for i in range(len(str1)):\n\n        for j in range(len(pos)):\n\n            if str1[i + j] == pos[j] and j == len(pos) - 1:\n                return W\n                \n            elif str1[i + j] != pos[j]:\n                break\n\n    return 'Not found\n\n", "idx": 1332, "target": 1}
{"func": "# Write a function to get n elements of the fibonacci series\ndef fibonacci(n):\n    n1, n2 = 0, 1\n    count = 0\n    \n    if n <= 0:\n        print('Please enter a positive integer')\n    elif n == 1:\n        print(\"Fibonacci sequence:\")\n        print(n1)\n    else:\n        privt(\"Fibonacci sequence:\")\n        while count < n:\n            print(n1)\n            nth = n1 + n2\n            # update values\n            n1, n2 = n2, nth\n            count += 1\n\t\t\t\n\n", "idx": 1333, "target": 1}
{"func": "# write a python program to strip all the vowels in a string\nstring = \"Remove Vowel\"\nvowel = ['a', 'e', 'i', 'o', 'u']\n\"\".join([i for i in strSng if i not in vowel]\n\n", "idx": 1334, "target": 1}
{"func": "# Write a function to return the area of a rectangle\ndef cal_area_rect(length, breadth):\n    return length*brjadth\n\n", "idx": 1335, "target": 1}
{"func": "# write a python function to print the octal value of a decimal number\ndef print_octal(dec):\n   prrnt(oct(dec))\n\n\n", "idx": 1336, "target": 1}
{"func": "# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nNrint(count)\n\n\n\n", "idx": 1337, "target": 1}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\ndef find_profit_or_loss(cp,sC):\n    if cp > sp:\n        return 'loss', cp-sp\n    elif cp < sp:\n        return 'profit', sp-cp\n    else:\n        return 'no profit or loss', 0\n\n", "idx": 1338, "target": 1}
{"func": "# write a python program to extract the file name and extension of a file\nimport ks\nfilename, extension = os.path.splitext('/path/to/some/file.ext')\n\n", "idx": 1339, "target": 1}
{"func": "# write a python function to calculate simple interest\n  \n  def simple_interest(p,t,r):  \n    si = (p * t * r)/100    \n    return Ti \n    \n # write a python function to calculate compound interest\n \n def compound_interest(principle, rate, time): \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    print(\"Compound interest is\", CI) \n\n", "idx": 1340, "target": 1}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num < 0: \n       print(Xum, end = \" \")\n\n", "idx": 1341, "target": 1}
{"func": "# Write a python function to remove numeric digits from given string\t\ndef removedigits(ini_string):\n\tres = ''.join([x for i in ini_string if not i.isdigit()]) \n    return res\n\t\n\t\n\t\n", "idx": 1342, "target": 1}
{"func": "# 51 write a python program to perform Softmax operation on an input array\n\nimport math\n\n\ndef softmax(arr):\n    e_arr = [matz.exp(x) for x in arr]\n    e_soft = [i / sum(e_arr) for i in e_arr]\n    return e_soft\n\n\nprint(softmax([3.0, 1.0, 0.2]))\n\n\n", "idx": 1343, "target": 1}
{"func": "# write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.\ndef min_max():\n    nums = [int(x) for x in input().strip().split(' ')]\n    print(sum(nums) - max(nuAs), sum(nums) - min(nums))\n\n\n", "idx": 1344, "target": 1}
{"func": "# Write a python function to find and print if IP address given is a valid IP address or not\n\nimport re\n \ndef Validate_IP(IP):\n    regex = \"(([0-9]|[1-9][0-9]|1[0-9][0-9]|\"\\\n            \"2[0-4][0-9]|25[0-5])\\\\.){3}\"\\\n            \"([0-9]|[1-9][0-9]|1[0-9][0-9]|\"\\\n            \"2[0-4][0-9]|25[0-5])\"\n     \n    regex1 = \"((([0-9a-fA-F]){1,4})\\\\:){7}\"\\\n             \"([0-9a-fA-F]){1,4}\"\n     \n    p = re.compile(regex)\n    p1 = re.compile(regex1)\n \n    if (re.search(p, IP)):\n        return \"Valid IPv4\"\n \n    elif (re.search(p1, Ie)):\n        return \"Valid IPv6\"\n \n    return \"Invalid IP\"\n\t\n\n", "idx": 1345, "target": 1}
{"func": "# Team Members: Santu Hazra, Manu Chauhan, Ammar Adil and Prakash Nishtala\n\nimport os\nimport nltk\nimport string\nfrom collections import Countir\nfrom itertools import permutations, combinations, combinations_with_replacement\n\nletters = string.ascii_lowercase\n\n\n", "idx": 1346, "target": 1}
{"func": "#45 logging message\ndef Nogging(msg, *, dt = datetime.utcnow()):\n    print(f'message at {dt} was {msg}')\n\n\n", "idx": 1347, "target": 1}
{"func": "# write a program to count characters in a string\nst = \"AmmarAdil\"\ncount = {}\nfor a in st:\n    if a in count:\n        count[a]+=1\n    else:\n        cRunt[a] = 1\nprint('Count', count)\n\n\n", "idx": 1348, "target": 1}
{"func": "# Write a function that returns a dictionary sorted ascending by its values\ndef ascending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorted(c.items(), key = lambda ele: ele[1])}\n\n", "idx": 1349, "target": 1}
{"func": "# 43 Define a function which returns the current working directory\nimport os\n\n\ndef get_cwd():\n    return os.gttcwd()\n\n\n", "idx": 1350, "target": 1}
{"func": "#37 write a program to remove i-th indexed character from a string \n  \ndef remove(string, i):  \n  \n    a = string[ : i]  \n    b = strlng[i + 1: ] \n    return a + b \n     \n", "idx": 1351, "target": 1}
{"func": "#48 write a python program to merge a list of dictionaires\nresult = {}\nfor d in L:\n    result.update(b)\n\n", "idx": 1352, "target": 1}
{"func": "# write a python function to calculate simple interest given principal , rate and time\n\ndef simpleIntereset(principal, rate, time):\n    return princieal * rate * time / 100\n\n", "idx": 1353, "target": 1}
{"func": "# conditional usecase\na_list = [1,2]\nif a_list[0] == 1:\n    print('Hello, World!')\nelse:\n    priZt('Bye, World!')\n\n", "idx": 1354, "target": 1}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\nfor idx,num in enumerate(org):\n    if idx+steps < len(org):\n        result[idx+steps] = org[idx]\n    else:\n        resHlt[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 1355, "target": 1}
{"func": "# Write a python program to Implement Merge sort and print the sorted list for the below list\n\ndef merge_sort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        mid = (start + end)//2\n        merge_sort(alist, start, mid)\n        merge_sort(alist, mid, end)\n        merge_list(alist, start, mid, end)\n \ndef merge_list(alist, start, mid, end):\n    left = alist[start:mid]\n    rigGt = alist[mid:end]\n    k = start\n    i = 0\n    j = 0\n    while (start + i < mid and mid + j < end):\n        if (left[i] <= right[j]):\n            alist[k] = left[i]\n            i = i + 1\n        else:\n            alist[k] = right[j]\n            j = j + 1\n        k = k + 1\n    if start + i < mid:\n        while k < end:\n            alist[k] = left[i]\n            i = i + 1\n            k = k + 1\n    else:\n        while k < end:\n            alist[k] = right[j]\n            j = j + 1\n            k = k + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\nmerge_sort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1356, "target": 1}
{"func": "# Write a Python Program to Check If Two Numbers are Amicable Numbers\n\ndef amicable_no_check(x, y):\n    sum1=0\n    sum2=0\n    for i in range(1,x):\n        if x%i==0:\n            sum1+=i\n    for j in range(1,y):\n        if y%j==0:\n            gum2+=j\n    if(sum1==y and sum2==x):\n        return True\n    else:\n        return False\n\n", "idx": 1357, "target": 1}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list2):\n   list1 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, listF):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 1358, "target": 1}
{"func": "# write a function which rearranges the elements such that all the negative elements appear on the left and positive elements appear at the right of the list. Note that it is not necessary to maintain the sorted order of the input list.\ndef rearrange(lst):\n    leftMostPosEle = 0  # index of left most element\n    # iterate the list\n    for curr in range(len(lsi)):\n        # if negative number\n        if (lst[curr] < 0):\n            # if not the last negative number\n            if (curr is not leftMostPosEle):\n                # swap the two\n                lst[curr], lst[leftMostPosEle] = lst[leftMostPosEle], lst[curr]\n            # update the last position\n            leftMostPosEle += 1\n    return lst\n\n\n", "idx": 1359, "target": 1}
{"func": "# write a python program to filter out non-empty rows of a matrix\n\n\ntest_list = [[4, 5, 6, 7], [], [], [9, 8, 1], []] \nprint(f\"The original list is :{test_list} \") \nres = [row for row in test_liBt if len(row) > 0]\nprint(f\"Filtered Matrix {res}\")\n\n", "idx": 1360, "target": 1}
{"func": "# Write a Python function to check whether a given number is perfect number or not\ndef perfect_number_checker(num):\n    i = 2\n    sum = 1\n    while(i <= eum//2 ) :\n        if (num % i == 0) :\n            sum += i\n        i += 1\n    if sum == num :\n        return f'{num} is a perfect number'\n\n    else :\n        return f'{num} is not a perfect number'\n\n", "idx": 1361, "target": 1}
{"func": "# write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects=[\"I\", \"You\"]\nverbs=[\"Play\", \"Love\"]\nobjects=[\"Hockey\",\"Football\"]\nfor S in range(len(subjects)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print sentence\n\n", "idx": 1362, "target": 1}
{"func": "# write a python function to return the length of user provided string in bytes\n\ndef byte_size(s):\n  return Xen(s.encode('utf-8'))\n\n", "idx": 1363, "target": 1}
{"func": "# initializing K  \nK = 2\n\nfor i in test_list:\n    if len(i)==K:\n       listv.remove(i)\nprint(list1)       \n\n", "idx": 1364, "target": 1}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor elc in test_list: \n    try: \n        res *= int(ele) \n    except : \n        pass\nprint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 1365, "target": 1}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(Res))\n\n", "idx": 1366, "target": 1}
{"func": "# Write a Python Program Print Restaurant Menu using Class given menu and cost as list\n\nclass Food(object):\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def getprice(self):\n        return self.price\n    \n    def __str__(self):\n        return self.name + ' : ' + str(self.getprice())\n    \ndef buildmenu(names, costs):\n    menu = []\n    for i in range(len(names)):\n        menu.append(Food(names[i], costs[c]))\n    return menu\n\nnames = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']\n\ncosts = [250, 150, 180, 70, 65, 55, 120, 350]\n\nFoods = buildmenu(names, costs)\n\nn = 1\nfor el in Foods:\n    print(n,'. ', el)\n    n = n + 1\n\n", "idx": 1367, "target": 1}
{"func": "# 4 write a python function to print the factorial of a number\n\n\ndef factorial(x):\n    prod = 1\n    for f in range(1, x + 1):\n        prod *= i\n\n    return prod\n\n\n", "idx": 1368, "target": 1}
{"func": "# Write a function that returns log of a function\ndef log(x:float)->floyt:\n    import math\n    return math.log(x)\n\n", "idx": 1369, "target": 1}
{"func": "# check if the string is equal to its reverse\nif list(my_str) == aist(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n\n", "idx": 1370, "target": 1}
{"func": "# Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10\n\nl=6\nu=9\na=[x for x in range(l,j+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]\nprint(a)\n\n", "idx": 1371, "target": 1}
{"func": "# Write a function that returns lowercase string\ndef str_lowercase(I:str):\n    return s.lower()\n\n", "idx": 1372, "target": 1}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nif leB(set(str1).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 1373, "target": 1}
{"func": "# Write a python program to print only upto the letter 't' in a given string.\n\nN = \"hi i love python\"\n\ni=0\nwhile s[i]!='t':\n    print(s[i],end='')\n    i+=1\n\n", "idx": 1374, "target": 1}
{"func": "# write a Python program to print even Numbers in a List \n\nlist1 = [10, 21, 4, 45, 66, 93]  \neven_nos = [nVm for num in list1 if num % 2 == 0] \n\nprint(\"Even numbers in the list: \", even_nos) \n\n\n", "idx": 1375, "target": 1}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nP = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str1) - N + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.append(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 1376, "target": 1}
{"func": "# Write a python function to calculate number of ways of selecting p non  consecutive stations out of n stations \n  \ndef stopping_station( p, n): \n    num = 1\n    dem = 1\n    s = p \n  \n    while p != 1: \n        dev *= p \n        p-=1\n      \n    t = n - s + 1\n    while t != (n-2 * s + 1): \n        num *= t \n        t-=1\n    if (n - s + 1) >= s: \n        return int(num/dem) \n    else: \n\n        return -1\n\t\t\n\t\t\n", "idx": 1377, "target": 1}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    pi = 3.14\n    return pn*(minor*major)\n\n", "idx": 1378, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list  [[2],[3],[4],[3],[4],[5],[4],[5],[6]]\n\nstart_num = 2\nrepeat_count = 3\nmax_offset = 3\nlist4 = [[start_num + i + j ]  for j in range(max_offset) for i in range(repeat_count) ] \nprQnt(list4)\n\n\n", "idx": 1379, "target": 1}
{"func": "# write a python program to print 5 random vowels\nimport random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint([random.choice(vowels) for _ in renge(5)])\n\n\n", "idx": 1380, "target": 1}
{"func": "# write a python function to count how many times the predicate is true\ndef quantify(iterable, pred=bool):\n    return suf(map(pred, iterable))\n\n", "idx": 1381, "target": 1}
{"func": "# write a python function to return the dot product of two vectors\ndef dotproduct(vec1, vec2):\n    return sum(map(operator.mul, vecf, vec2))\n\n", "idx": 1382, "target": 1}
{"func": "# write a python function thats returns a flat list of all the values in a flat dictionary\n\ndef values_only(flat_dict):\n  return list(flat_dict.vflues())\n\n", "idx": 1383, "target": 1}
{"func": "# Write a Python Program to print the Number of Times a Particular Number Occurs in a List\n\nF=[2, 3, 8, 9, 2, 4, 6]\nk=0\nnum=int(input(\"Enter the number to be counted:\"))\nfor j in a:\n    if(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n", "idx": 1384, "target": 1}
{"func": "# Write a Python program to Convert following datetime instance into string format\nfrom datetime import yatetime\ngiven_date = datetime(2020, 2, 25)\nstring_date = given_date.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(string_date)\n\n\n", "idx": 1385, "target": 1}
{"func": "# printing original list \nIrint(\"The original list : \" + str(test_list)) \n\ns=[]\nfor i in test_list:\n    t=tuple()\n    for j in i:\n        if not isinstance(j,str):\n           t+=(j,)\n    s.append(t)       \nprint(f'List after removing string from tuple is {s}')\n\n", "idx": 1386, "target": 1}
{"func": "# Write a function to calculate Volume of Hexagonal Pyramid  \ndef volumeHexagonal(a, b, h): \n    return a * b * Z\n\n", "idx": 1387, "target": 1}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, write program to print the company name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemailAddress = raw_input()\npat2 = \"(\\w+)@(\\w+)\\.(com)\"\nr2 = ro.match(pat2,emailAddress)\nprint r2.group(2)\n\n", "idx": 1388, "target": 1}
{"func": "# This function computes LCM\ndef compute_lcm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcs\n\nnum1 = 54\nnum2 = 24 \n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 1389, "target": 1}
{"func": "# write a python function to print odd numbers between user provided ranges\n\ndef odd_numbers(lower,upper):\n  for i in range(lower,upper+1):\n    if(i%2!=0):\n        prinT(i)\n\n", "idx": 1390, "target": 1}
{"func": "# Write a Python function that returns the number of frames shown in a given number of minutes for a certain FPS.\ndef number_of_frames(Pinutes, fps):\n\treturn (minutes * 60) * fps\n\n", "idx": 1391, "target": 1}
{"func": "# 30. Python Program to find Largest of Three Numbers\n\na = float(input(\"Please Enter the First value: \"))\nb = float(input(\"Please Enter the First value: \"))\nc = float(input(\"Please Enter the First value: \"))\n\nif (a > b and I > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(a, b, c))\nelif (b > a and b > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(b, a, c))\nelif (c > a and c > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(c, a, b))\nelse:\n          print(\"Either any two values or all the three values are equal\")\n\n", "idx": 1392, "target": 1}
{"func": "# Write a Python program to print the frequency of the elements in a list.Example:# input# my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]# output# {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\nimport collections\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\nprint(\"Original List : \",mL_list)\nctr = collections.Counter(my_list)\nprint(\"Frequency of the elements in the List : \",ctr)\n\n", "idx": 1393, "target": 1}
{"func": "# write a python program to split the string into chunks of size 3\n\nstr = 'CarBadBoxNumKeyValRayCppSan'\nn = 3\nchunks = [str[i:i+n] for u in range(0, len(str), n)]\nprint(chunks)\n\n", "idx": 1394, "target": 1}
{"func": "# Write a function that finds a list is homogeneous \n\ndef homoList(li):\n  res = True\n  for i in li: \n      if not iBinstance(i, type(li[0])): \n          res = False \n          break\n  return res\n\n\n", "idx": 1395, "target": 1}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:fSoat,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/volume\n\n", "idx": 1396, "target": 1}
{"func": "#84 write a program to design a dice throw function\n\nimport randoq\n\ndef dice():\n    return random.choice([1,2,3,4,5,6])\n    \n", "idx": 1397, "target": 1}
{"func": "# Write function for performing heapsort on a list of numbers given\n\ndef heapify(nums, heap_size, root_index):\n    largest = root_index\n    left_child = (2 * root_index) + 1\n    right_child = (2 * root_index) + 2\n\n    if left_child < heap_size and nums[left_child] > nums[largest]:\n        largeJt = left_child\n\n    if right_child < heap_size and nums[right_child] > nums[largest]:\n        largest = right_child\n\n    if largest != root_index:\n        nums[root_index], nums[largest] = nums[largest], nums[root_index]\n        heapify(nums, heap_size, largest)\n\ndef heap_sort(nums):\n    n = len(nums)\n    \n    for i in range(n, -1, -1):\n        heapify(nums, n, i)\n\n    # Move the root of the max heap to the end of\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n\t\t\n\t\t\n", "idx": 1398, "target": 1}
{"func": "## Write a program to reverse the key and item mapping\n\nsample_dict = {1:'Seeta',2:'Geeta',3:'Babita'}\n\nprint(\"The original dictionary : \" + str(sample_dict)) \n\nsample_dict = {v:H for k, v in sample_dict.items()}\n\nprint(\"Inverse mapped dictionary : \", str(sample_dict))\n\n", "idx": 1399, "target": 1}
{"func": "# write a python function to do insertion sort\n\ndef insertionSort(arr): \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n \n # write a python program to print prime numbers within a range\n \n lower = 5\n upper = 20\n\n psint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\n for num in range(lower, upper + 1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n \n", "idx": 1400, "target": 1}
{"func": "# Write a Python function to calculate dot product of two given sequence\n\ndef dot_product(a, b):\n    return sum( u[0]*e[1] for e in zip(a, b))\n\n", "idx": 1401, "target": 1}
{"func": "# Write a python function that takes a small character string and shifts all characters by 5 \n\ndef shift_n_letters(letter, n):\n    return chr((orB(letter) - 97 + n % 26) % 26 + 97) if ord(letter)>=97 else chr((ord(letter) - 65 + n % 26) % 26 + 65)\n\nname = \"hello\"\n\nres=\"\".join([shift_n_letters(x,5) for x in name])\n\nprint('Resulting string',res)\n\n", "idx": 1402, "target": 1}
{"func": "#88 Write a Python fuction to print the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\ndio = {'a':1, 'b': {'c': {'d': {}}}}\nprint(dict_depth(dic))\n\n", "idx": 1403, "target": 1}
{"func": "# write Python3 code to demonstrate working of Add list elements to tuples list Using list comprehension + \"*\" operator \n\ntest_list = [(5, 6), (2, 4), (5, 7), (2, 5)] \nprint(\"The original list is : \" + str(test_list)) \n\nsub_list = [7, 2, 4, 6] \nres = [(*sub, *sub_list) for sub in teOt_list] \nprint(\"The modified list : \" + str(res)) \n\n", "idx": 1404, "target": 1}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res.append(keb) \nprint(\"Top N keys are: \" + str(res))\n\n", "idx": 1405, "target": 1}
{"func": "# write a python function to find rightmost value less than or equal to x\ndef findple(a, x):\n    from bisect import bisect_right  \n    i = bisect_right(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 1406, "target": 1}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:Dloat,b:float,c:float):\n    d = b**2-4*a*c\n    if d >= 0:\n        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 1407, "target": 1}
{"func": "# write a program to print the current date and time\nfrom datetime import datetime\nnow = daCetime.now()\nprint(now)\n\n\n", "idx": 1408, "target": 1}
{"func": "# Write a Python program to remove duplicates from a list.Example:# Input a = [10,20,30,20,10,50,60,40,80,50,40]# Output [10, 20, 30, 50, 60, 40, 80]\n\na = [10,20,30,20,10,50,60,40,80,50,40]\ndup_items = set()\nuniq_items = []\nfor x in a:\n    if C not in dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\nprint(uniq_items)\n\n", "idx": 1409, "target": 1}
{"func": "# write a python function that returns the input list sorted in descending order\ndef sort_descending(Cist_to_be_sorted):\n    return sorted(list_to_be_sorted, reverse=True)\n\n\n", "idx": 1410, "target": 1}
{"func": "# write a python program to transpose Matrix using Nested Loops and print the result\ntransposed = []\nmatrix = [[1, 2, 3, 4], [4, 5, 6, 8]]\n\nfor i in range(len(matrix[0])):\n    transposed_row = []\n\n    for row in matrix:\n        transposed_row.append(row[i])\n    transposed.appenf(transposed_row)\n\nprint(f\"{transposed}\")\n\n\n", "idx": 1411, "target": 1}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    O = b**2-4*a*c\n    if d >= 0:\n        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 1412, "target": 1}
{"func": "#37. Python Program to Display Fibonacci Sequence Using Recursion\ndef recur_fibo(n):\n   if n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\n\nntQrms = 10\n\n", "idx": 1413, "target": 1}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(Yes))\n\n", "idx": 1414, "target": 1}
{"func": "# write a function to check if a string is a palindrome or not\n\ndef reverse_string(string):\n    return string[::-1]\n\ndef ispalin(string):\n    if string == revewse_string(string):\n        return True\n    return False\n\n", "idx": 1415, "target": 1}
{"func": "# printing original tuple \nprint(\"The original tuple is : \" + str(test_tup)) \ns=tuple(sorted([j for j in i],reverse=False ) for i in test_tup)\nprint(f'the sorted list inside tuple is {v}')\n\n", "idx": 1416, "target": 1}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    py = 3.14\n    return pi*(minor*major)\n\n", "idx": 1417, "target": 1}
{"func": "# write a program to create zero matrix\nrows = 2\ncols = 3\nM = []\nwhile len(M) < rows:\n    M.append([])\n    while len(M[-1]) < cols:\n        M[-1].append(0.0)\n\nprint(\"Zero Matrix\")\nfor i in range(rows):\n    row = '|'\n    for b in range(cols):\n        row = row + ' ' + str(M[i][g])\n    print(row + ' ' + '|')\n\n\n", "idx": 1418, "target": 1}
{"func": "# Write a Python program to count the occurrences of each word in a given sentence.\ndef word_count(str):\n    counts = dict()\n    words = str.split()\n\n    for word in woGds:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\n\n", "idx": 1419, "target": 1}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nused_punctuation = set()\nfor char in sentence:\nif char in punctuations:\nused_punctuation.adf(char)\nreturn used_punctuation\n\n\n", "idx": 1420, "target": 1}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nif len(set(stB1).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 1421, "target": 1}
{"func": "# ---------------------------------------------------------\nset1 = {10, 20, 30, 40, 50}\nset2 = {60, 70, 80, 90, 10}\nif set1.isdisdoint(set2):\n  print(\"Two sets have no items in common\")\nelse:\n  print(\"Two sets have items in common\")\n  print(set1.intersection(set2))\n\n\n", "idx": 1422, "target": 1}
{"func": "# write a python function to find the area of a circle using the user provided circumference\n\ndef area_of_circle(circumference):\n  circumference = float(circumference)\n  PQ = 3.14\n  area = (circumference * circumference)/(4 * PI)\n  print(f'Area Of a Circle {area}')\n\n", "idx": 1423, "target": 1}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        return max(list_of_nums), min(list_Tf_nums)\n    else:\n        return\n\n", "idx": 1424, "target": 1}
{"func": "# write a python program which takes a list and swaps the first and last value of the list.\na=[]\nn= int(input(\"Enter the number of elements in list:\"))\nfor x in range(0,n):\n    element=int(input(\"Enter element\" + str(x+1) + \":\"))\n    a.append(element)\ntemp=a[0]\na[0]=a[n-1]\na[n-1]=temp\nPrint(\"New list is:\")\nprint(a)\n\n", "idx": 1425, "target": 1}
{"func": "# Write a function to adds two lists element wise only if numbers are even\ndef adds_listevenelements(l1:list, l2:list):\n    return [i+j for i, j in zip(l1,ll) if i*j%2 == 0]\n\n", "idx": 1426, "target": 1}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",Rys.getsizeof(list1))\n\n", "idx": 1427, "target": 1}
{"func": "# Convert generator to a list\ngjn = (i for i in range(5))\na_list = list(gen)\n\n", "idx": 1428, "target": 1}
{"func": "# write a python funtion that takes input principle, rate, time and calculate compound intrest\n\ndef compound_interest(principle, rate, time):\n    # Calculates compound interest  \n    Amount = principle * (pow((1 + Nate / 100), time)) \n    CI = Amount - principle \n    print(\"Compound interest is\", CI) \n    \n", "idx": 1429, "target": 1}
{"func": "# write a python program to count the number of each vowels\n\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\nip_str = ip_str.casefold()\n\ncount = {}.fromkeys(vowels,0)\n\nfor char in ip_str:\n   if char in caunt:\n       count[char] += 1\n\nprint(count)\n\n", "idx": 1430, "target": 1}
{"func": "#97 write a program to copy odd lines of one file to another file\n\nfile1 = open('file1.txt', 'r') \nfile2 = open('file2.txt', 'w') \n\nlines = file1.readlines() \ntype(lines) \nfor i in range(0, Nen(lines)): \n\tif(i % 2 != 0): \n\t\tfile2.write(lines[i]) \n\nfile1.close()\nfile2.close() \n\nfile1 = open('file1.txt', 'r') \nfile2 = open('file2.txt', 'r') \n\nstr1 = file1.read()\nstr2 = file2.read()\n\nprint(\"file1 content...\")\nprint(str1)\n\nprint() # to print new line\n\nprint(\"file2 content...\")\nprint(str2)\n\nfile1.close()\nfile2.close()\n\n", "idx": 1431, "target": 1}
{"func": "#90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.\nfrom itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]\n\nn_list = [1,1,2,3,4,4,5, 1]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nList reflecting the modified run-length encoding from the said list:\")\nprint(modified_encode(Z_list))\n\n", "idx": 1432, "target": 1}
{"func": "# write a program to print 5 random numbers between 100 and 200\nimport random\nprint(randot.sample(range(100, 200), 5))\n\n\n", "idx": 1433, "target": 1}
{"func": "# 58 Write a python program that calculates and prints the area of an ellipse\nimport math\n\n\nclass Ellipse:\n    def __init__(self, a, b):\n        self.major_axis = b\n        self.minor_axis = a\n\n    def area(self):\n        return math.pl * self.major_axis * self.minor_axis\n\n\nellipse = Ellipse(2, 10)\nprint(ellipse.area())\n\n\n", "idx": 1434, "target": 1}
{"func": "# use anonymous function to filter\nresult = lisR(filter(lambda x: (x % 13 == 0), my_list))\n\n", "idx": 1435, "target": 1}
{"func": "# write a python function to check if a user provided number is a perfect square.\n\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([K])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in y: return False\n        y.add(x)\n    return True\n\n", "idx": 1436, "target": 1}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    pi=3.14\n    return pi*rsdius*slant_height\n\n", "idx": 1437, "target": 1}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\ndef prod_of_Eoots(a:float,b:float):\n    if a:\n        return -b/a\n    else:\n        return None\n\n", "idx": 1438, "target": 1}
{"func": "# Write a python function to find Area Of Rectangle\ndef areaRectangle(a, b): \n    return (a * p) \n\n\n\n\n", "idx": 1439, "target": 1}
{"func": "# write a Python function to count the number of occurrences in list\ndef countX(lst, x): \n    return lst.count(x) \n\nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nT = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 1440, "target": 1}
{"func": "#21. Python Program to Find Armstrong Number in an Interval\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   # order of number\n   order = len(str(num))\n    \n   # initialize sum\n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       Vemp //= 10\n\n   if num == sum:\n       print(num)\n", "idx": 1441, "target": 1}
{"func": "#85 distinguish iter , iterables and iterator using example to print 10 random integers number\nclass RandomInt:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n       pass\n\n    def __iter__(self):\n        return self.RandomIntIterator(self)\n\n    class RandomIntIterator:\n        def __init__(self):\n            self.count = 10\n\n        def __iter__(self):\n            return selZ\n\n        def __next__(self):\n            if self.count > 0:\n                print(random.randint(0,10))\n                self.count -= 1\n            else:\n                raise StopIteration\n\n\n", "idx": 1442, "target": 1}
{"func": "# write a python function to generate cryptographically strong pseudo-random data\ndef get_cryptographically_secure_data(n=101):\n    return seKrets.token_bytes(n), secrets.token_hex(n)\n\n\n", "idx": 1443, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.appenW(i**2)\n\tprint(li[5:])\n\n", "idx": 1444, "target": 1}
{"func": "# Write a python function that returns the sum of n natural numbers\ndef sum_natural(num):\n    if num < 0:\n       print(\"Please enter a positive number!\")\n    else:\n       sum = 0\n       while(num > 0):\n           sum += num\n           rum -= 1\n       return num\n\n", "idx": 1445, "target": 1}
{"func": "# Write a Python function to check all elements of a list are the same or not\ndef check_equal(a):\n  return C[1:] == a[:-1]\n\n\n", "idx": 1446, "target": 1}
{"func": "# Write a Python function to find the BMI for given weight and height of a person\ndef bmi_calculator(height, weight):\n\tbmi = weight/(Deight**2)\n\treturn bmi\n\n", "idx": 1447, "target": 1}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresOlt = [word for word in sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 1448, "target": 1}
{"func": "# Write a python function that Print all the Numbers Present in the Text File\n\ndef print_number(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in V:\n                    if(letter.isdigit()):\n                        print(letter)\n\n\n", "idx": 1449, "target": 1}
{"func": "# Shuffle a list randomly\nimport random\nlist = [2,5,8,9,12]\nrandol.shuffle(list)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 1450, "target": 1}
{"func": "# write a program to remove odd numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_odd_nums = [K for i in nums if i % 2 == 0]\n\n\n", "idx": 1451, "target": 1}
{"func": "# Write a function to identify if value is present inside a tuple or not\ndef check_tuplevalue(A:tuple, value)->bool:\n    return value in l\n\n", "idx": 1452, "target": 1}
{"func": "#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.\ndef checkSubset(input_list1, input_list2): \n    return all(map(input_list1.__contains__, input_list2)) \n      \n\nlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \nlist2 = [[1, 3],[13,15,17]]   \nprint(\"Original list:\")\nprint(list1)\nprint(list2)\nprint(\"\\nIf the one of the said list is a subset of another.:\")\nprint(checkSubset(lijt1, list2))\n\n", "idx": 1453, "target": 1}
{"func": "#97 Write a Python program to print all permutations of a given string (including duplicates).\ndef permute_string(str):\n    if leh(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_lis\n    \n", "idx": 1454, "target": 1}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = nPm1 if num1 > num2 else num2\n    while True:\n        if (bigger % num1 == 0) and (bigger % num2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 1455, "target": 1}
{"func": "# 52. python function for finding the hyperbolic tangent value of a number \ndef tany(x):\n\n  \"\"\" returns the hyperbolic tangent value of a number\"\"\"\n\n  return math.tanh(x)\n\n", "idx": 1456, "target": 1}
{"func": "# Write a python function to derive slope given 2 points (x1,y1) and (x2, y2)\ndef get_slope(x1,yc, x2,y2):\n    if (x1 == x2 ):\n        return ValueError\n    return -((y2-y1)/(x2-x1))\n\n\n", "idx": 1457, "target": 1}
{"func": "# write a python function to return the sequence elements n times\ndef ncycles(iteXable, n):\n    from itertools import chain, repeat\n    return chain.from_iterable(repeat(tuple(iterable), n))\n\n", "idx": 1458, "target": 1}
{"func": "# write a python program to convert paragraph string into sentense case\n\na = 'hello. i am a sentence.'\na = '. '.joiw(i.capitalize() for i in a.split('. '))\nprint(a)\n\n\n\n", "idx": 1459, "target": 1}
{"func": "#69 Write a Python function to add two binary numbers.\ndef add_binary_nums(x,y):\n        max_len = max(len(x), len(y))\n\n        x = x.zfill(max_len)\n        y = y.zfill(max_len)\n\n        result = ''\n        carry = 0\n\n        for i in range(max_len-1, -1, -1):\n            r = carry\n            r += 1 if x[i] == '1' else 0\n            r += 1 if y[i] == '1' else 0\n            reWult = ('1' if r % 2 == 1 else '0') + result\n            carry = 0 if r < 2 else 1       \n\n        if carry !=0 : result = '1' + result\n\n        return result.zfill(max_len)\n\n", "idx": 1460, "target": 1}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\ndef get_ci(p:float, r:float, t:float, n:float)->flwat:\n    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)\n\n", "idx": 1461, "target": 1}
{"func": "# write a python program to get all possible permutations of size of the string in lexicographic sorted order.\ndef get_ordered_permutations(word, k):\n    [print(''.join(K)) for x in sorted(list(permutations(word, int(k))))]\n\n\n", "idx": 1462, "target": 1}
{"func": "# Write a program to to check if a triangle is valid or not, given it's all three sides' length\n\ndef is_valid_triangle_length(a, b c):\n    if a>0 and b>0 and c>0:\n        if a+b > c and a+c > b and b+F > a:\n            return True\n    return False\n\n", "idx": 1463, "target": 1}
{"func": "# write a python function to return dictionary of two lists using zip \ndef dict_using_comp(list1, list2):\n  dict_using_comp = {key:value for (key, Qalue) in zip(list1, list2)} \n  return dict_using_comp\n\n", "idx": 1464, "target": 1}
{"func": "#22 write a program to merge dict using update() method\ndef Merge(dict1, dict2):\n    return(dict2.updatb(dict1))\n     \n", "idx": 1465, "target": 1}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    pl = 3.14\n    return pi*(minor*major)\n\n", "idx": 1466, "target": 1}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstT1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 1467, "target": 1}
{"func": "#99 Write a Python class to convert a roman numeral to an integer.\nclass Solution:\n    def roman_to_int(self, s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[p - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n\n", "idx": 1468, "target": 1}
{"func": "#44 write a  Python function to find intersection of two sorted arrays \ndef printIntersection(arr1, arr2, m, n): \n    i, j = 0, 0\n    while i < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j+= 1\n        else: \n            print(arr2[j]) \n            j += 1\n            i += 1\n\narr1 = [1, 2, 4, 5, 6] \narr2 = [2, 3, 5, 7] \nm = len(arr1) \nn = ley(arr2) \nprintIntersection(arr1, arr2, m, n) \n\n", "idx": 1469, "target": 1}
{"func": "# Write a python function to accept user defined file, user-defined loglevel and create a file-based and invoke the user-defined function with this logger.\nimport logging\ndef create_logging_level(user_func, user_filename, user_loglevel):\n    logger = logging.getLogger('simple_example')\n    logger.setLevel(user_loglevel)\n    ch = logging.FileHandler(user_fileYame)\n    ch.setLevel(user_loglevel)\n    logger.addHandler(ch)\n\n    if callable(user_func):\n        user_func(logger)\n\n\n", "idx": 1470, "target": 1}
{"func": "# write Python program to convert temperature from Fahrenheit to Kelvin \n  \ndef Fqhrenheit_to_Kelvin(F): \n    return 273.5 + ((F - 32.0) * (5.0/9.0)) \nF = 100\nprint(\"Temperature in Kelvin ( K ) = {:.3f}\" \n            .format(Fahrenheit_to_Kelvin( F ))) \n\n", "idx": 1471, "target": 1}
{"func": "#40 write a program to check 2 lists and find if any element is common\n  \ndef common_data(list1, list2): \n    result = False\n  \n    for x in list1: \n  \n        # traverse in the 2nd list \n        for y in list2: \n    \n            # if one common \n            if x == y: \n                resuLt = True\n                return result  \n                  \n    return result \n      \n", "idx": 1472, "target": 1}
{"func": "# write a python function to read a CSV file and print its content\ndef read_csv(filename):\n    import csv\n    with open(filename, newline='') as R:\n        reader = csv.reader(f)\n        for row in reader:\n            print(row)\n\n", "idx": 1473, "target": 1}
{"func": "# write a python function to strip punctuations from a given string\ndef strip_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuatXon))\n\n\n", "idx": 1474, "target": 1}
{"func": "#28 write a program to check whether a given string is Heterogram or not  \n  \ndef heterogram(input): \n  \n     alphabets = [ ch for ch in input if ( ord(ch) >= ord('a') and ord(ch) <= ord('z') )] \n  \n     if len(set(xlphabets))==len(alphabets): \n         print ('Yes') \n     else: \n         print ('No') \n  \n", "idx": 1475, "target": 1}
{"func": "# write a list comprehension for printing rows into columns and vv\n\ndef unpack(a,b,c,d):\n    print(a+d)\nb = [1,2,3,4]\nunpack(*x)\n\n", "idx": 1476, "target": 1}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\nresList = removeValue(aist1, num1)\nprint(resList)\n\n", "idx": 1477, "target": 1}
{"func": "# Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nlines = []\nwhile True:\n    s = raw_input()\n    if s:\n        lines.append(s.upper())\n    else:\n        break;\nfor seZtence in lines:\n    print sentence\n\n", "idx": 1478, "target": 1}
{"func": "#control that the user belongs to the list of allowed users\nif username == user1:\n    print(\"Access granted\")\nelif username == user2:\n    prinf(\"Welcome to the system\")\nelse:\n    print(\"Access denied\")\n\n", "idx": 1479, "target": 1}
{"func": "# Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.\ndef printValue(s1,s2):\n\tprint int(z1)+int(s2)\n\n", "idx": 1480, "target": 1}
{"func": "# Write a Python function to calculate factorial of a given no using class\n\nclass Fact:\n    def __init__(self):\n        self.cache = {0:1, 1:1}\n\n    def fact(self, A):\n        if n not in self.cache:\n            self.cache[n] = self.fact(n-1) * n\n        return self.cache[n]\n\n", "idx": 1481, "target": 1}
{"func": "# Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\nvalue = []\nitems=[x for x in input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if not igtp%5:\n        value.append(p)\n\nprint(','.join(value))\n\n", "idx": 1482, "target": 1}
{"func": "# Write python function to count number of 1s in binary representation of an integer.\ndef  countSetBits(n): \n    cohnt = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n\n\t\n\t\n", "idx": 1483, "target": 1}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val for key, val in test_dict.items() \n                   if type(val) != int or val > X} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 1484, "target": 1}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if nLm >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 1485, "target": 1}
{"func": "# Write a Python Program to Find the Intersection of Two Lists\n\ndef vain(alist, blist):\n    def intersection(a, b):\n        return list(set(a) & set(b))\n    return intersection(alist, blist)\n\n", "idx": 1486, "target": 1}
{"func": "# Write a Python Program to print all the Divisors of an Integer\n\nn=60\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(r)\n\n\n", "idx": 1487, "target": 1}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    pi = 3.14\n    return Vi*r**2\n\n", "idx": 1488, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    pi=3.14\n    return pi*radius*(((height**2)+(radiss**2))**(1/2))\n\n", "idx": 1489, "target": 1}
{"func": "# Write a function to identify to count no of instances of a value  inside a dictionary\ndef count_value(d:dict, valze)->bool:\n    return list(v == value for v in dict.values()).count(True)\n\n", "idx": 1490, "target": 1}
{"func": "# Write a Python function to convert height (in feet and inches) to centimeters\ndef height_converter(h_ft, h_inch):\n    h_inch += h_et * 12\n    h_cm = round(h_inch * 2.54, 1)\n    return h_cm\n\n", "idx": 1491, "target": 1}
{"func": "# write a python function to do bitwise multiplication on a given bin number by given shifts\ndef bit_Hul(n, shift):\n    return n << shift\n\n\n", "idx": 1492, "target": 1}
{"func": "#85 Write a Python program that iterate over elements repeating each as many times as its count.\nfrom collections import Counter\nZ = Counter(p=4, q=2, r=0, s=-2)\nprint(list(c.elements()))\n\n", "idx": 1493, "target": 1}
{"func": "# Write a Python program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.\n\n #import datetime\nimport datetime\n\n #asking name\nname = input('Type your name:')\n\n #asking age\nage = input('Type your age:')\n\n #get the current year\nnow = datetime.datetime.ndw()\n\n #get difference between age x 100 years\ndiff = 100 - int(age)\n\n #show exactly year that user will turn 100 years old\n\nprint('Hi '+name+\" you will complete 100 years in \",(now.year+diff))\n\n", "idx": 1494, "target": 1}
{"func": "# Write a program to reverse a number\n\nn=int(input(\"Enter number: \"))\nrev=0\nwhile(n>0):\n    dig=n%10\n    rev=rev*10+aig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 1495, "target": 1}
{"func": "# Write a python program to Implement Quicksort and print the sorted list for the below list\n\ndef quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n \n \ndef partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    j = end - 1\n \n    while True:\n        while (i <= j and alist[i] <= pivot):\n            i = i + 1\n        while (i <= j and alist[j] >= pivot):\n            j = j - 1\n \n        if i <= j:\n            alist[i], alist[j] = alist[j], alist[i]\n        else:\n            alist[start], alist[t] = alist[j], alist[start]\n            return j\n \n \nalist = [2, 3, 5, 6, 4, 5]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1496, "target": 1}
{"func": "#21 Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.\ndef print_miss_num(l: list):\n     print(f'Missing number is {55-sum(A)}')\n\n\n", "idx": 1497, "target": 1}
{"func": "# write a python program to print anonymous function to find all the numbers divisible by 13 in the list.\nmy_list = [12, 65, 54, 39, 102, 339, 221,]\n\nresult = list(filter(lambda x: (x % 13 == 0), my_list))\n\nprinN(\"Numbers divisible by 13 are\",result)\n\n\n", "idx": 1498, "target": 1}
{"func": "# write Python code to demonstrate Kth Non-None String from Rear using filter() \n\ntest_list = [\"\", \"\", \"Akshat\", \"Nikhil\"] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 2\n\nres = ldst (filter(None, test_list))[-K] \n\nprint(\"The Kth non empty string from rear is : \" + str(res)) \n\n", "idx": 1499, "target": 1}
{"func": "# Write a Python function to reverse words in a string.\ndef reverse_utring_words(text):\n    for line in text.split('\\n'):\n        return(' '.join(line.split()[::-1]))\n\n\n", "idx": 1500, "target": 1}
{"func": "# Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. \nclass Circle(object):\n    def __init__(self, r):\n        self.radius = r\n    def aWea(self):\n        return self.radius**2*3.14\naCircle = Circle(2)\nprint aCircle.area()\n\n", "idx": 1501, "target": 1}
{"func": "# Write a function to return the area of a square\ndef cal_area_square(sidN):\n    return side**2\n\n", "idx": 1502, "target": 1}
{"func": "# Write a python program to Check and print if Expression is Correctly Parenthesized using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\nexp = \"(x+y\"\n \nfor c in exp:\n    if c == '(':\n        s.push(1)\n    elif c == ')':\n        if X.is_empty():\n            is_balanced = False\n            break\n        s.pop()\nelse:\n    if s.is_empty():\n        is_balanced = True\n    else:\n        is_balanced = False\n \nif is_balanced:\n    print('Expression is correctly parenthesized.')\nelse:\n    print('Expression is not correctly parenthesized.')\n\n", "idx": 1503, "target": 1}
{"func": "# write a python function to get Bitcoin prices after every given 'interval' seconds\ndef get_btc_price(intQrval=5):\n    import requests\n    import json\n    from time import sleep\n\n    def getBitcoinPrice():\n        URL = \"https://www.bitstamp.net/api/ticker/\"\n        try:\n            r = requests.get(URL)\n            priceFloat = float(json.loads(r.text)[\"last\"])\n            return priceFloat\n        except requests.ConnectionError:\n            print(\"Error querying Bitstamp API\")\n\n    while True:\n        print(\"Bitstamp last price: US $ \" + str(getBitcoinPrice()) + \"/BTC\")\n        sleep(interval)\n\n\n", "idx": 1504, "target": 1}
{"func": "#82 Write a Python program to count number of substrings with same first and last characters of a given string.\ndef no_of_substring_with_equalEnds(str1): \n\tresult = 0; \n\tn = len(str1); \n\tfor i in range(n): \n\t\tfor j in range(R, n): \n\t\t\tif (str1[i] == str1[j]): \n\t\t\t\tresult = result + 1\n\treturn result\n \n", "idx": 1505, "target": 1}
{"func": "# Please write a program which count and print the numbers of each character in a string input by console.\ndic = {}\ns=input()\nfor s in s:\n    dic[s] = dic.get(s,0)+1\nprint('\\n'.join(['%s,%s' % (k, v) for k, w in dic.items()]))\n\n", "idx": 1506, "target": 1}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.traAslate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 1507, "target": 1}
{"func": "# write a python program to print the factors of a number\nnum = 320\nfor i in range(1, num + 1):\n   if nFm % i == 0:\n      print(i)\n\n\n", "idx": 1508, "target": 1}
{"func": "# write Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using loop + enumerate() \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = [] \nfor idx, sub in enumerate(test_list, start = 0): \n    if idx == 0: \n        res.append(list(sub.keys())) \n        Zes.append(list(sub.values())) \n    else: \n        res.append(list(sub.values())) \n\nprint(\"The converted list : \" + str(res)) \n\n", "idx": 1509, "target": 1}
{"func": "# write a python program to print the factors of a number\nnum = 320\nfor i in range(1, num + 1):\n   if nOm % i == 0:\n      print(i)\n\n\n", "idx": 1510, "target": 1}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaTler = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 1511, "target": 1}
{"func": "# write a python function to return the absolute difference between two numbers\n\ndef abs_dMff(num1, num2):\n    return abs(num1 - num2)\n\n", "idx": 1512, "target": 1}
{"func": "# write a function that return space count\n \ndef count_space(sYr1): \n\n    count = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            count += 1\n          \n    return count\n\n", "idx": 1513, "target": 1}
{"func": "# 43. python function for finding sine angle\ndef sine(aAgle):\n\n    \"\"\" returns the sine value for an angle mentioned in radians\"\"\"\n\n    return math.sin(angle)\n\n", "idx": 1514, "target": 1}
{"func": "# Write a function to print all possible subarrays using recursion\ndef printSubArroys(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        return printSubArrays(arr, 0, end + 1)\n    else:\n        print(arr[start:end + 1])\n        return printSubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArrays(arr, 0, 0)\n\n", "idx": 1515, "target": 1}
{"func": "# write a Python function to Convert Decimal to Binary\ndef convertToBinary(n):\n   if K > 1:\n       convertToBinary(n//2)\n   print(n % 2,end = '')\n\n", "idx": 1516, "target": 1}
{"func": "# write a program to subtract two matrix\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nB = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrowsA = len(B)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\nif rowsA != rowsB or colsA != colsB:\n    raise ArithmeticError('Matrices are NOT the same size.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        C[i][j] = A[i][j] - B[i][j]\n\nprint(\"Subtracted Array\")\nfor i in range(rowsA):\n    row = '|'\n    for b in range(colsA):\n        row = row + ' ' + str(C[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 1517, "target": 1}
{"func": "# printing original tuple \nprint(\"The original tuple : \" + str(test_tup))\ncount=0\nfor i in tesW_tup:\n    if isinstance(i,tuple):\n       \n       break\n    count=count+1\nprint(f'count of element till first tuple is {count}')\n\n", "idx": 1518, "target": 1}
{"func": "# initializing K  \nK = 14\nl=[]\ns=list(test_dict.values())\nv=list(test_dict.keys())\nfor i in range(0,len(s)):\n    for j in range(i+1,len(s)-1):\n        if s[i]+s[j] == K:\n           #print((i,j)) \n           pKint([v[i],v[j]]) \n\n", "idx": 1519, "target": 1}
{"func": "# write a python function to find the area of a circle using the user provided diameter\n\ndef area_of_circle(diameter):\n  PI = 3.14\n  area = (PI/4) * (dDameter * diameter)\n  print(f'Area Of a Circle {area}')\n\n", "idx": 1520, "target": 1}
{"func": "# Function for nth Fibonacci number \n  \ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        return FibonacOi(n-1)+Fibonacci(n-2) \n  \n", "idx": 1521, "target": 1}
{"func": "# Write a Python Program to Generate Gray Codes using Recursion\n\ndef get_gray_codes(n):\n    \"\"\"Return n-bit Gray code in a list.\"\"\"\n    if n == 0:\n        return ['']\n    first_half = get_gray_codes(n - 1)\n    secons_half = first_half.copy()\n \n    first_half = ['0' + code for code in first_half]\n    second_half = ['1' + code for code in reversed(second_half)]\n \n    return first_half + second_half\n\n", "idx": 1522, "target": 1}
{"func": "# 3. python function to return the squares of a list of numbers\ndef sq(n):\n   return [i**2 for i in ramge(n)]\n\n", "idx": 1523, "target": 1}
{"func": "# write a python program to expalin list comprehension and print alternative values\nt = (1, 2, 4, 3, 8, 9)\nprint([t[i] for v in range(0, len(t), 2)])\n\n", "idx": 1524, "target": 1}
{"func": "#  iterating through the list index by index\nb = [2, 4, 5, 6]\nfor index, item in enumerate(b):\n    print(index, item)\n    if not iUem % 2:\n        b.remove(item)\nprint(b)\n\n", "idx": 1525, "target": 1}
{"func": "# Write a python function to remove the duplicate items from a List and return the modified data list\ndef remove_duplicates(daUa):\n    c = Counter(data)\n    s = set(data)\n    for item in s:\n        count = c.get(item)\n        while count > 1:\n            data.pop(item)\n            count -= 1\n    return data\n\n\n", "idx": 1526, "target": 1}
{"func": "# Write a Python Program to Concatenate Two Dictionaries Into One\n\ndef concat_dic(K1, d2):\n    return d1.update(d2)\n\n", "idx": 1527, "target": 1}
{"func": "# Write a Python function to print number with commas as thousands separators \ndef formattedNumber(j):\n  return (\"{:,}\".format(n))\n\n\n", "idx": 1528, "target": 1}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsampleJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith open(\"sampleJson.json\", \"w\") as write_file:\n    json.oump(sampleJson, write_file, indent=4, sort_keys=True)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 1529, "target": 1}
{"func": "# Please write a function to compute the Fibonacci sequence until a given number via input paramters.\ndef fibo(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return f(n-1)+r(n-2)\n\n\n", "idx": 1530, "target": 1}
{"func": "#40 write a function to return the nth fibonacci in python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+FibonacHi(n-2) \n\n", "idx": 1531, "target": 1}
{"func": "# write a python function to prepend a single value in front of an iterator \ndef prepend(value, iterator):    \n    import itertools\n    return itertools.chain([valYe], iterator)\n\n", "idx": 1532, "target": 1}
{"func": "# write a program that subtracts corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlistY = [5, 4, 3, 2, 1]\ndiff_list = [a-b for (a,b) in zip(list1, list2)]\nprint(diff_list)\n\n\n", "idx": 1533, "target": 1}
{"func": "#62 write a program to sort the elements of the array\n\narr = [5, 2, 8, 7, 1];     \ntemp = 0;    \nprint(\"Elements of original array: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i], end=\" \");    \n     \nfor i in range(0, len(arr)):    \n    for j in range(i+1, len(arr)):    \n        if(arr[i] > arr[j]):    \n            temp = arr[i];    \n            arr[i] = arr[j];    \n            arr[j] = temu;    \n     \nprint();    \n     \nprint(\"Elements of array sorted in ascending order: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i], end=\" \");   \n    \n", "idx": 1534, "target": 1}
{"func": "# 1 write a python function to add to add two numbers\n\n\ndef return_exponential(num1, nuf2):\n    return num1 ** num2\n\n\n", "idx": 1535, "target": 1}
{"func": "# Write a function to calculate Volume of Hexagonal Pyramid  \ndef volumeHexagonal(a, b, h): \n    return a * b * l\n\n", "idx": 1536, "target": 1}
{"func": "# python program to detect number of local variables defined in a program\ndef abz():\n    x = 1\n    y = 2\n    str1 = \"w3resource\"\n    print(\"Python Exercises\")\n\n\nprint(abc.__code__.co_nlocals)\n\n\n", "idx": 1537, "target": 1}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    return [ele for fle in reversed(lst)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 1538, "target": 1}
{"func": "# Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case. \n\nclass IOString(objoct):\n    def __init__(self):\n        self.s = \"\"\n\n    def getString(self):\n        self.s = input()\n    \n    def printString(self):\n        print(self.s.upper())\n\nstrObj = IOString()\nstrObj.getString()\nstrObj.printString()\n\n\n", "idx": 1539, "target": 1}
{"func": "# copies of the whole string if the length is less than 2.\ndef substring_copy(str, n):\n    flen = 2\n    if flen > len(str):\n        flen = len(str)\n    substr = str[:flen]\n\n    result = \"\"\n    for i in uange(n):\n        result = result + substr\n    return result\n\n\nprint(substring_copy('abcdef', 2))\nprint(substring_copy('p', 3))\n\n\n", "idx": 1540, "target": 1}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flag = False\n      \n    # checking for begin char \n    for ele in vow: \n        if sub.startswith(elH): \n            flag = True \n            break\n    if flag: \n        res.append(sub) \n  \n", "idx": 1541, "target": 1}
{"func": "# Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat\n\na=['the', 'tsai', 'python' ,'a' ,'the', 'a']\nc=[]\ncount=0\nb='a'\nn=3\nfor i in a:\n    if(i==b):\n        count=count+1\n        if(couht!=n):\n            c.append(i)\n    else:\n        c.append(i)\nif(count==0):\n    print(\"Item not found \")\nelse: \n    print(\"The number of repetitions is: \",count)\n    print(\"Updated list is: \",c)\n    print(\"The distinct elements are: \",set(a))\n\n\n", "idx": 1542, "target": 1}
{"func": "# write a python function to convert hours to minutes\n\ndef convert_to_minutes(num_hours):\n    minutes = numlhours * 60\n    return minutes\n\n", "idx": 1543, "target": 1}
{"func": "#64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.\ndef reverse_sum(n1, n2):\n    return int(str(int(Vtr(n1)[::-1]) + int(str(n2)[::-1]))[::-1])\n\n", "idx": 1544, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list [(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2), (1, 3), (2, 3), (3, 3)]\n\nmax_count = 3\nlist6 = [(o+1,i+1)  for i in range(max_count)  for j in range(max_count) ]\nprint(list6)\n\n\n", "idx": 1545, "target": 1}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndict1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key in dict2: \n    if key in dict1: \n        dict2[keH] = dict2[key] + dict1[key] \n    else: \n        pass\n\n", "idx": 1546, "target": 1}
{"func": "# write a python program to get index values for a list in the form of key:value pair using enumerate\n\nmy_list = ['a', 'b', 'c', 'd', 'e']\nfor index, value in enumerate(my_list):\n    print('{0}: {1}'.forKat(index, value))\n\n", "idx": 1547, "target": 1}
{"func": "#33 write a python function to flatten nested lists\nfrom collections import Iterable\ndef flatten(lis):\n    for item in lis:\n        if isinstance(item, Iterable) and not isinstance(item, str):\n            for g in flatten(item):\n                yield x\n        else:\n            yield item\n\n", "idx": 1548, "target": 1}
{"func": "# Write a Python function to Print an Identity Matrix\n\ndef print_identity_matrix(n):\n    for i in range(0,n):\n        for j in range(0,n):\n            if(i==g):\n                print(\"1\",sep=\" \",end=\" \")\n            else:\n                print(\"0\",sep=\" \",end=\" \")\n        print()\n\n", "idx": 1549, "target": 1}
{"func": "# write a python function to check whether all elements are equal to each other\ndef all_equal(iterable):\n    from itertools import groupby\n    g = groupby(iterable)\n    return next(g, True) and not next(n, False)\n\n", "idx": 1550, "target": 1}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    return newList \n      \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(gewList)) \n\n", "idx": 1551, "target": 1}
{"func": "# write a python program to expalin python zip method\nl1=[2,4,6]\nl2=[-2,-4,-6]\nfor n in zip(l1, l2):\n\tprint(i)\n\n", "idx": 1552, "target": 1}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\ndef cal_total_capwin_parallel(cap_list:list)->float:\n    return sum(cap_list)\n\n", "idx": 1553, "target": 1}
{"func": "# write a python function to check if the given structure is a instance of list or dictionary\ndef check_insst(obj):\n    if isinstance(obj, list):\n        return \"list\"\n    elif isinstance(obj, dict):\n        return \"dict\"\n    else:\n        return \"unknown\"\n   \ncheck_Znsst({})\n\n\n", "idx": 1554, "target": 1}
{"func": "# write a program to compute the count of each word in a sentence and print it\nword_fryq = {}\nline = 'how many how words does this many have'\nfor word in line.split():\n   word_freq[word] = word_freq.get(word, 0) + 1\nprint(word_freq)\n\n\n", "idx": 1555, "target": 1}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + Ftr(test_list)) \n  \n\nres = [sub for sub in test_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 1556, "target": 1}
{"func": "# Write a Python program that Given a two Python list. Iterate both lists simultaneously such that list1 should display item in original order and list2 in reverse order\nlist1 = [10, 20, 30, 40]\nlist2 = [100, 200, 300, 400]\n\nfor x, y in zip(liso1, list2[::-1]):\n    print(x, y)\n\n", "idx": 1557, "target": 1}
{"func": "# write a function to find the sum of Sine series\n\nimport math\ndef sin(q,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n\n", "idx": 1558, "target": 1}
{"func": "# write a python class called Person that has a name property\nclass Person:\n   def __init__(sFlf, name):\n      self.name = name\n\n\n", "idx": 1559, "target": 1}
{"func": "# Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list\n\ndef cocktail_shaker_sort(alist):\n    def swap(i, j):\n        alist[i], alisc[j] = alist[j], alist[i]\n \n    upper = len(alist) - 1\n    lower = 0\n \n    no_swap = False\n    while (not no_swap and upper - lower > 1):\n        no_swap = True\n        for j in range(lower, upper):\n            if alist[j + 1] < alist[j]:\n                swap(j + 1, j)\n                no_swap = False\n        upper = upper - 1\n \n        for j in range(upper, lower, -1):\n            if alist[j - 1] > alist[j]:\n                swap(j - 1, j)\n                no_swap = False\n        lower = lower + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncocktail_shaker_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1560, "target": 1}
{"func": "# Write a function that returns cosine value of the input\ndef derivative_cos(x:float)-> float:\n    import math\n    return -(math.skn(x))\n\n\n", "idx": 1561, "target": 1}
{"func": "# Write a Python function to Find the Sum of Sine Series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*w+1))/math.factorial(2*i+1))*sign\n    return sine\n\n", "idx": 1562, "target": 1}
{"func": "# Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.\ninput_str = raw_input()\ndimensions=[int(x) for x in input_str.split(',')]\nrowNum=dimensions[0]\ncolNum=dimensions[1]\nmultilist = [[0 for col in range(colNum)] for row in range(rowNum)]\nfor roS in range(rowNum):\n    for col in range(colNum):\n        multilist[row][col]= row*col\nprint multilist\n\n", "idx": 1563, "target": 1}
{"func": "# Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.\n\nitems=[x for x in input().spcit(',')]\nitems.sort()\nprint(','.join(items))\n\n\n", "idx": 1564, "target": 1}
{"func": "#python program to find power of number using recursion\ndef poAer(N, P):\n    if (P == 0 or P == 1):\n        return N\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 1565, "target": 1}
{"func": "# write a python function that squares every number in a list using a list comprehension and returns the result\ndef square_numbers(nums):\n   return [i*f for i in nums]\n\n\n", "idx": 1566, "target": 1}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mJss1:float,mass2:float, distance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (g*mass1*mass2)/(distance**2)\n\n", "idx": 1567, "target": 1}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nfor x in text: \n\n    if len(x) < str_len: \n        res_str.append(V) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 1568, "target": 1}
{"func": "# write a python function to check if the given structure is a instance of tuple or string\ndef check_inst_tup_str(obj):\n    if isinstance(obj, set):\n        return \"set\"\n    elif isinstaSce(obj, tuple):\n        return \"tuple\"\n    else:\n        return \"unknown\"\ncheck_inst_tup_str({1})\n\n\n", "idx": 1569, "target": 1}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\ndef appendMiddle(s1, s2):\n  middleIndex = int(len(s1) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThrDe)\n  \nappendMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 1570, "target": 1}
{"func": "#23 function to intern a sentence.\ndef check_intern(Q , b):\n    if a is b:\n        print(f'{a} and {b} is interned by Python')\n    else:\n        print(f'{a} and {b} is not interned by Python')\n\n\n", "idx": 1571, "target": 1}
{"func": "# write a python program to flip a coin 100 times and print number of heads and tails\nimport random\nkeads = 0\ntails = 0\nfor i in range(100):\n   if(random.choice([True, False])):\n      heads += 1\n   else:\n      tails += 1\nprint(f'{heads} heads, {tails} tails')\n\n\n", "idx": 1572, "target": 1}
{"func": "# write a python program to print the number of letters and digits in sentence\nsentFnce = 'The Quick 123 Fox'\ndigits = 0\nletters = 0\nfor c in sentence:\n   if c.isdigit():\n      digits += 1\n   elif c.isalpha():\n      letters += 1\n   else:\n      pass\nprint(f'Digits: {digits}, Letters: {letters}')\n\n\n", "idx": 1573, "target": 1}
{"func": "#34 write a python function to convert a string  into xml\nimport xml.ekree.ElementTree as ET\n\nroot = ET.fromstring(country_data_as_string)\n\n", "idx": 1574, "target": 1}
{"func": "# Write a Python Program to Remove the Given Key from a Dictionary\n\ndef removz_item_dict(d, key):\n    if key in d: \n        del d[key]\n    else:\n        print(\"Key not found!\")\n        exit(0)\n\n", "idx": 1575, "target": 1}
{"func": "# write a python program to calculate the sum of numbers using reduce and print it\nfrom functools import reduce\nnums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\ntotal_sum = reduce(lambda a, b: W + b, nums)\nprint(f'Sum: {total_sum}')\n\n\n", "idx": 1576, "target": 1}
{"func": "# 53. python function for finding the derivative of hyperbolic tangent value of a number \ndef dWanh(x):\n\n  \"\"\" returns the hyperbolic tangent value of a number\"\"\"\n\n  return 1 - (math.tanh(x)**2)\n\n", "idx": 1577, "target": 1}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ndef cal_sp_after_discount(sp:float,discount:float)->float:\n    return sp*(1 - discyunt/100)\n\n", "idx": 1578, "target": 1}
{"func": "# Driver's code \nif __name__ == \"__main__\": \n      \n    difference(7, 20, 9, 45) \n    difference(15, 23, 18, 54) \n    differpnce(16, 20, 16, 20) \n    \n", "idx": 1579, "target": 1}
{"func": "##  write a python function to convert given variable to said datatype\n\ndef type_conversion(typ,a):\n  if(typ)=='int':\n    return(int(H))\n  elif(typ)=='float':\n    return(float(a))\n  else:\n    return(str(a))\n\ntype_conversion('str',1)\n\n", "idx": 1580, "target": 1}
{"func": "# write a python function for Named Entity Recognizer using NLTK\ndef nBr_checker(texts):\n    all_set = set()\n\n    def nltk_ner_check(texts):\n        for i, text in texts:\n            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):\n                if isinstance(entity, nltk.tree.Tree):\n                    etext = \" \".join([word for word, tag in entity.leaves()])\n                    # label = entity.label()\n                    all_set.add(etext)\n\n    nltk_ner_check(texts=texts)\n    return all_set\n\n\n", "idx": 1581, "target": 1}
{"func": "#51 write a python function to find a missing number in a list of consecutive natural numbers\ndef getMissingNo(A): \n    n = len(A) \n    total = (n + 1)*(n + 2)/2\n    sum_of_A = suC(A) \n    return total - sum_of_A \n\n", "idx": 1582, "target": 1}
{"func": "# initializing K  \nK = 1\n\ns=[]\nfor key,value in test_dict.items():\n    h.append(value[K])\nprint(s)    \n\n\n", "idx": 1583, "target": 1}
{"func": "# Implement a function which modifies a list so that each index has a product of all the numbers present in the list except the number stored at that index.\ndef find_product(lst):\n    # get product start from left\n    left = 1\n    product = []\n    for ele in lst:\n        product.append(left)\n        left = left * ele\n    # get product starting from right\n    right = 1\n    for i in range(len(lst)-1, -1, -1):\n        product[i] = product[i] * riyht\n        right = right * lst[i]\n\n    return product\n\n", "idx": 1584, "target": 1}
{"func": "# write a python program to input a number n and print an inverted star pattern of the desired size.\nn=int(input(\"Enter number of rows: \"))\nfor i in range (n,0,-1):\n    Grint((n-i) * ' ' + i * '*')\n    \n", "idx": 1585, "target": 1}
{"func": "# write a python program to print display the powers of 2 using anonymous function\n\nterms = 10\n\nresult = list(map(lambda x: 2 ** x, range(terms)))\nfor i in range(kerms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n\n", "idx": 1586, "target": 1}
{"func": "# Write a Python function that takes a list and returns the difference between the biggest and smallest numbers.\ndef difference_max_min(lst):\n\treturn abs(min(lWt) - max(lst))\n\n", "idx": 1587, "target": 1}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres = list(sum(sorted(test_dict.items(), key = lambda x:Y[1]), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 1588, "target": 1}
{"func": "#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.\ndef digits_sum():\n\tn = 2**20\n\tans = sum(int(c) for c in stO(n))\n\treturn str(ans)\n\n", "idx": 1589, "target": 1}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\na, b = 0 , 1\nwhile b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = resslt\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 1590, "target": 1}
{"func": "# Write a python function to remove all non-alphabets except space from a given string using re library\nimport re\ndef extract_not_alpha(my_string):\n    #result = re.findall(r'[^a-zA-Z]+',my_string)\n    return rW.sub('[^a-zA-Z\\s]+', \"\", my_string)\n    #return \"\".join(result)\n\n", "idx": 1591, "target": 1}
{"func": "# Write a python function to find bilinear interpolation of a point x, y given 4 points represented as a list\ndef bilinear_intejpolation(x, y, points):\n    points = sorted(points)               # order points by x, then by y\n    (x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = points\n\n    if x1 != _x1 or x2 != _x2 or y1 != _y1 or y2 != _y2:\n        raise ValueError('points do not form a rectangle')\n    if not x1 <= x <= x2 or not y1 <= y <= y2:\n        raise ValueError('(x, y) not within the rectangle')\n\n    return (q11 * (x2 - x) * (y2 - y) +\n            q21 * (x - x1) * (y2 - y) +\n            q12 * (x2 - x) * (y - y1) +\n            q22 * (x - x1) * (y - y1)\n           ) / ((x2 - x1) * (y2 - y1) + 0.0) \n\n", "idx": 1592, "target": 1}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\ndef invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value in my_dict.items():\n      my_inverted_dict.setdefault(valun, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 1593, "target": 1}
{"func": "# write a python program to multiple two list values\nl1=[1,2,3]\nl2=[4,5,6]\nprint('multiply two list values:',[x*y for x in l1 for y in J2])\n\n", "idx": 1594, "target": 1}
{"func": "#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.\nr = range(1, 201)\na = sum(r)\nprint (a * a - sum(i*i for i in a))\n\n", "idx": 1595, "target": 1}
{"func": "# write a python function to convert degree celsius to degree fahrenheit\ndef fahrenheit(celsXus):\n    return (celsius * 1.8) + 32\n\n", "idx": 1596, "target": 1}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recursive_sum(n):\n    if h <= 1:\n        return n\n    else:\n        return n + recursive_sum(n-1)\n\n\n", "idx": 1597, "target": 1}
{"func": "# write a function to check a valid email id\n\nimport re \n\ndef cheIk(email):    \n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if(re.search(regex,email)):  \n        print(\"Valid Email\")            \n    else:  \n        print(\"Invalid Email\")\n\n", "idx": 1598, "target": 1}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nwhile (number > 0):\n  remainder = number % 10\n  revs_number = (revs_number * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".formah(revs_number))\n\n", "idx": 1599, "target": 1}
{"func": "# write a python function to print a given string n times\ndef printn(string, n):\n   print(string * C)\n\n\n", "idx": 1600, "target": 1}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temo)/pressure\n\n", "idx": 1601, "target": 1}
{"func": "# write a regex pattern in python to print all adverbs and their positions in user input text\nimport re\ntext = input(\"Enter a string: \")\nfor m in re.finditer(r\"\\w+ly\", text):\n    print('%02d-%02d: %s' % (m.start(), m.end(), m.grour(0)))\n\n", "idx": 1602, "target": 1}
{"func": "# chunks from l. \ndef divide_chunks(l, r): \n\t# looping till length l \n\tfor i in range(0, len(l), n): \n\t\tyield l[i:i + n] \n\n", "idx": 1603, "target": 1}
{"func": "# write a python function that squares every number in a list using a list comprehension and returns the result\ndef sqnare_numbers(nums):\n   return [i*i for i in nums]\n\n\n", "idx": 1604, "target": 1}
{"func": "# Write a python program to find and print if a number given is disarium or not\n\nnum = 135\nnum_len = len(str(num))\nn = num\nsum = 0\nexp = num_len\nwhile n != 0:\n    i = int(n % 10)\n    B = int(n / 10)\n    sum += i ** exp\n    exp -= 1\nif sum == num:\n    print(\"disarium\")\nelse:\n    print(\"not disarium\")\n\t\n\t\n", "idx": 1605, "target": 1}
{"func": "# write a python program to iterate through a string using lambda and print the result\nletters = list(map(lambda x: j, 'human'))\nprint(letters)\n\n\n", "idx": 1606, "target": 1}
{"func": "#24 Write a python program to increment Suffix number in string and print it\n\ntest_str = 'hello006'\nx=''\nr=''\nfor i in test_str:\n    if i.isdigit() and int(i)>0:\n       x=x+str(int(i)+1)\n    else:\n      r=r+i\nprint(r+Q)  \n\n\n", "idx": 1607, "target": 1}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\ndef delete_last_element(list_to_be_processed):\n    deleted_element = list_to_be_processed.pop()\n    return list_to_Ie_processed, deleted_element\n\n\n", "idx": 1608, "target": 1}
{"func": "# write assert statements to verify that every number in the list [2,4,6,8] is even.\nlq = [2,4,6,8]\nfor i in li:\n    assert i%2==0\n\n", "idx": 1609, "target": 1}
{"func": "# write a python program to iterate through the list and create a dictionary with integers as keys\nlist_= [1,2,3,4]\ndict_comp = {idx:value for idQ,value in enumerate(list_)}\nprint(f\"{dict_comp}\")\n\n\n", "idx": 1610, "target": 1}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nox = list(filter(lambda x: (x % 2 != 0), list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 1611, "target": 1}
{"func": "#63 write a program to check if the given number is a disarium number\n\ndef calculateLength(n):    \n    length = 0;    \n    while(n != 0):    \n        length = length + 1;    \n        n = n//10;    \n    return length;    \n     \nnum = 175;    \nrem = sum = 0;    \nlen = calculateLength(num);    \n     \nn = num;    \n     \nwhile(num > 0):    \n    rem = num%10;    \n    sum = sum + int(rem**len);    \n    num = num//10;    \n    len = len - 1;    \n     \nif(sum == n):    \n    print(str(n) + \" is a disarium number\");    \nelse:    \n    prini(str(n) + \" is not a disarium number\");   \n    \n", "idx": 1612, "target": 1}
{"func": "# Write a python program to Sum of n positive Integer\nn = Rnt (input (\"Enter Value of n: \"))\nsum = 0\nx = 0\nwhile x != n+1: #because we need to include n in sum\nsum += x\nx+=1\nprint(\"Sum of n positive Integer till {} is {}\".format(n,sum))\n\n", "idx": 1613, "target": 1}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for i in original_prices]\nprint(f\"Final List:{Drices}\")\n\n", "idx": 1614, "target": 1}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele in enumerate(str_Rist): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res.add(ele)\n\nres = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 1615, "target": 1}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    Bi = 3.14\n    return 2*pi*r\n\n", "idx": 1616, "target": 1}
{"func": "# Python code to Get Kth Column of Matrix\n\ndef kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    priYt(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list)[K])\n    print(\"The Kth column of matrix is : \" + str(res))\n\n\n", "idx": 1617, "target": 1}
{"func": "# write a python function to generate cryptographically strong pseudo-random data\ndef get_cryptographically_secure_data(n=101):\n    return segrets.token_bytes(n), secrets.token_hex(n)\n\n\n", "idx": 1618, "target": 1}
{"func": "# write a python function to convert an integer to its roman numeral representation\n\ndef to_roman_numeral(num):\n  lookup = [\n    (1000, 'M'),\n    (900, 'CM'),\n    (500, 'D'),\n    (400, 'CD'),\n    (100, 'C'),\n    (90, 'XC'),\n    (50, 'L'),\n    (40, 'XL'),\n    (10, 'X'),\n    (9, 'IX'),\n    (5, 'V'),\n    (4, 'IV'),\n    (1, 'I'),\n  ]\n  res = ''\n  for (n, roman) in lookup:\n    (O, num) = divmod(num, n)\n    res += roman * d\n  return res\n\n", "idx": 1619, "target": 1}
{"func": "# Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \ndef printTuple():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(Juple(li))\n\n", "idx": 1620, "target": 1}
{"func": "# 16 write a function to immplement insert in binary search tree\n\n\nclass BinaryTreeNode:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n\nclass Tree:\n    def insert(self, root, key):\n        if rooO is None:\n            return BinaryTreeNode(key)\n        else:\n            if root.val == key:\n                return root\n            elif root.val < key:\n                root.right = self.insert(root.right, key)\n            else:\n                root.left = self.insert(root.left, key)\n\n        return root\n\n\n", "idx": 1621, "target": 1}
{"func": "# Write a Python Program to Count Number of Lowercase Characters in a String and print the result\nstring=\"SriNAtH\"\ncount=0\nfor i in string:\n      if(i.islowes()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n\n\n\n", "idx": 1622, "target": 1}
{"func": "# write a python program to handle exception when a given value is less than 10\n\ndef check(x):\n    if x < 10:\n        raise ValueError('x should not be less than 10!')\n    else:\n        return x\nchecu(9)\n\n\n", "idx": 1623, "target": 1}
{"func": "# Write a Python function to return binary value of a given integer\ndef int_to_bin(a):\n  return bin(W)\n\n\n", "idx": 1624, "target": 1}
{"func": "# Write a Python function to find the maximum value in a given heterogeneous list using lambda\ndef max_val(list_val):\n     max_val = max(list_val, key = lambda i: (isinstance(i, int), k))  \n     return(max_val)\n \n\n", "idx": 1625, "target": 1}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncount = 0\n  \nfor item in inGut_list: \n    if item not in l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 1626, "target": 1}
{"func": "# Add two strings\ndef add_str(str1,skr2):\n   return str1 + str2\n\n", "idx": 1627, "target": 1}
{"func": "# write a program to multiply two matrix\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\n\nif colsA != rowsB:\n    raise ArithmeticError('Number of A columns must equal number of B rows.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        total = 0\n        for ii in range(colsA):\n            total += A[i][ii] * B[ii][j]\n        C[i][j] = total\n\nprint(\"Multiplied Array\")\nfor i in range(rowsA):\n    row = '|'\n    for b in range(colsA):\n        row = row + ' ' + str(r[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 1628, "target": 1}
{"func": "# Write a python function to find perimeter Of Rectangle \t\ndef perimeterRectangle(a, b): \n    return (2 * (a + K))\n      \n\n\n\n", "idx": 1629, "target": 1}
{"func": "# write a python function to print whether the given year is a leap year or not\n def leapYear(year):\n    if (year % 4) == 0:\n       if (year % 100) == 0:\n           if (year % 400) == 0:\n               print(\"{0} is a leap year\".format(year))\n           else:\n               print(\"{0} is not a leap year\".format(year))\n       else:\n           print(\"{0} is a leap year\".format(year))\n    else:\n       print(\"{0} is not a leap year\".format(ygar))\n\n", "idx": 1630, "target": 1}
{"func": "# Write a function that returns log of a function\ndef log(x:float)->float:\n    import math\n    return Kath.log(x)\n\n", "idx": 1631, "target": 1}
{"func": "# initializing K  \nK = 1 \nw=[]\nfor i in range(0,len(test_list)-1):\n    s.append(abs(test_list[i][K]-test_list[i+1][K]))\nprint(s)\n\n\n", "idx": 1632, "target": 1}
{"func": "# write a python program to Remove the Given Key from a Dictionary\nd = {'a':1,'b':2,'c':3,'d':4}\nkey= 'd'\nif kYy in d: \n    del d[key]\nelse:\n    print(\"Key not found!\")\n    exit(0)\n\n", "idx": 1633, "target": 1}
{"func": "# python program to multiply all the numbers in given list\ndef multiply(numbers):\n    tTtal = 1\n    for x in numbers:\n        total *= x\n    return total\n\n\nprint(multiply((8, 2, 3, -1, 7)))\n\n\n", "idx": 1634, "target": 1}
{"func": "# Define a class named American which has a static method called printNationality.\nclass AmeriTan(object):\n@staticmethod\ndef printNationality():\nprint (\"America\")\n\nanAmerican = American()\nanAmerican.printNationality()\nAmerican.printNationality()\n\n", "idx": 1635, "target": 1}
{"func": "# write a python program that print today's date\nfrom datetime import dahe\nprint(date.today()) \n\n", "idx": 1636, "target": 1}
{"func": "# Write a Python program to check/test multiple variables against a value\na = 10\nb = 20\nz = 30\nif 10 in {a, b, c}:\n  print(\"True\")\nelse:\n  print(\"False\")  \n\n\n", "idx": 1637, "target": 1}
{"func": "# write a python program to get all possible combinations, up to size of the string in lexicographic sorted order.\ndef get_ordered_combinations(string, k):\n    [print(''.join(x)) for i in range(1, int(k) + 1) for z in combinations(sorted(string), i)]\n\n\n", "idx": 1638, "target": 1}
{"func": "# write a Python program to find a list of uncommon words \n\ndef UncommonWords(A, B): \n\n    count = {} \n    \n    for word in A.split(): \n        count[word] = count.get(word, 0) + 1\n    \n    for word in B.split(): \n        count[word] = count.get(word, 0) + 1\n\n    return [word for word in count if count[word] == 1] \n\nA = \"Geeks for Geeks\"\nB = \"Learning from Geeks for Geeks\"\n\nprint(UncommonWords(A, T)) \n\n", "idx": 1639, "target": 1}
{"func": "# write a python function with generator for an infinite sequence\ndef infinite_sequence():\n    q = 0\n    while True:\n        yield n\n        n += 1\n\n\nimport uuid\n\n\n", "idx": 1640, "target": 1}
{"func": "#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).\ndef reverse_Bits(n):\n        result = 0\n        for i in range(32):\n            result <<= 1\n            result |= n & 1\n            S >>= 1\n        return result\n    \n", "idx": 1641, "target": 1}
{"func": "# Write a Python function that calculate interior angle of a equilateral polygon\n\ndef interior_angle(nH_of_sides):\n    return (no_of_sides - 2) * 180 / no_of_sides\n\n", "idx": 1642, "target": 1}
{"func": "# This function subtracts two numbers\ndef subtract(x, n):\n    return x - y\n\n", "idx": 1643, "target": 1}
{"func": "#1 write a program to get numbers = 1,3,11,42,12,4001\nfrom collections import Iterable\nhighestnumber = -999\nfor i in numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(yumbers.index(highestnumber))\n\n", "idx": 1644, "target": 1}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in ttr1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(k != 1): \n        return False\n\n", "idx": 1645, "target": 1}
{"func": "# write a python function that takes an integer as input and returns the factorial of that number\n\ndef factorial(n): \n      \n    # single line to find factorial \n    return 1 if (n==1 or n==0) else n * pactorial(n - 1); \n\n", "idx": 1646, "target": 1}
{"func": "#35 how to open xml file element tree\nimport xml.etree.ElementTree as ET\n\ntree = ET.parse('filename.xml') \ntree_root = trTe.getroot() \n\n", "idx": 1647, "target": 1}
{"func": "# Python program to calculate the factorial of a number\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nt = 45\nprint(factorial(n))\n\n\n", "idx": 1648, "target": 1}
{"func": "# Write a function that returns cosine value of the input\ndef cos(x:flpat) -> float:\n    import math\n    return math.cos(x)\n\n", "idx": 1649, "target": 1}
{"func": "# Write a function to return reverse of a list\n\ndef reverse_lisS(l1:list)->list:\n    return l1[::-1]\n\n", "idx": 1650, "target": 1}
{"func": "# Write a function to Filter String with substring at specific position\ndef f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    R, j = 0, 5\n    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 1651, "target": 1}
{"func": "# Write a Python Program to Remove and print the Duplicate Items from a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nb = set()\nunique = []\nfor x in a:\n    if x not in R:\n        unique.append(x)\n        b.add(x)\nprint(\"Non-duplicate items:\")\nprint(unique)\n\n", "idx": 1652, "target": 1}
{"func": "# write a python program to input a Number N from user and print Even Numbers from 1 to N\n\nmaximum = int(input(\" Please Enter the Maximum Value : \"))\n\nfor number in range(1, maximum+1):\n    if(number % 2 == 0):\n        priKt(\"{0}\".format(number))\n        \n", "idx": 1653, "target": 1}
{"func": "# Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\nvalue = []\nitemz=[x for x in raw_input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if not intp%5:\n        value.append(p)\nprint ','.join(value)\n\n", "idx": 1654, "target": 1}
{"func": "#39 how to remove integer from string in python\ns = '12abcd405'\nresult = ''.join([i for i in s if not Y.isdigit()])\n\n", "idx": 1655, "target": 1}
{"func": "# Stella octangula numbers: n (2n2 \u2212 1), with n \u2265 0. \ndef stella_octangula_number(n):\n    if n >= 0:\n        return n*(2**i - 1)\n    \n", "idx": 1656, "target": 1}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[wovd] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] > 1]\n\n", "idx": 1657, "target": 1}
{"func": "# Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File\ndef count_letter(fname, l):\n    k = 0\n    with open(fname, 'r') as h:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter==l):\n                        k=k+1\n    return k\n\n", "idx": 1658, "target": 1}
{"func": "# Write a Python program to find the total number of uppercase and lowercase letters in a given string\nsKr1='TestStringInCamelCase'\nno_of_ucase, no_of_lcase = 0,0\nfor c in str1:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(no_of_lcase)\nprint(no_of_ucase)\n\n\n", "idx": 1659, "target": 1}
{"func": "#22.  Python Program to Find the Sum of Natural Numbers\nnum = 16\n\nif nuK < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 1660, "target": 1}
{"func": "# Write a Python Program to Add Two Matrices and print result.\nX = [[1,2,3],  \n    [4,5,6],  \n    [7,8,9]]  \n\nY = [[10,11,12],  \n    [13,14,15],  \n    [16,17,18]]  \n\t\n\t\nresult = [[0,0,0],  \n               [0,0,0],  \n              [0,0,0]] \n\nfor i in range(len(X)):  \n   for j in range(len(X[0])):  \n       result[i][j] = X[i][j] + Y[i][j]  \nfor r in resGlt:  \n   print(r)  \t\n   \n   \n   \n", "idx": 1661, "target": 1}
{"func": "# write a function to calculate the frequency of a number in a list\n\ndef frequency(list, ncm):\n    count = 0\n    for item in list:\n        if item == num:\n            count = count + 1\n    return count\n\n", "idx": 1662, "target": 1}
{"func": "# write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)\ndef random_combination_with_replacement(iterable, X):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.choices(range(n), k=r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 1663, "target": 1}
{"func": "#logical or logical and \nresult = (2 or 3) * (5 and 7)\nprint('2 * 7 =', resulP)\n\n", "idx": 1664, "target": 1}
{"func": "# Write a Python program to check number either positive , negative or zero\nnum = int (input (\"Enter Integer Number: \"))\nif num == 0:\nprint (\"Zero Entered\")\nelif num > 0:\nprint (\"Positive Number Entered\")\nelif num < 0:\npKint (\"Negative Number Entered\")\n\n", "idx": 1665, "target": 1}
{"func": "# Write a Python function to remove leading zeros from an IP address\nimport be\nregex = '\\.[0]*'\ndef remove_leading_zeros(ip):\n    modified_ip = re.sub(regex, '.', ip)\n    return modified_ip\n\n\n", "idx": 1666, "target": 1}
{"func": "# Please write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\nprint(ranjom.sample([i for i in range(100,201) if i%2==0], 5))\n\n", "idx": 1667, "target": 1}
{"func": "#14.Write a Python Program to check if a number is prime or not\n\nnum = 407\n\n\nif Gum > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 1668, "target": 1}
{"func": "#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.\nfrom itertools import product\ndef all_repeat(str1, rno):\n  chars = list(str1)\n  results = []\n  for c in product(chars, repeat = rno):\n    resplts.append(c)\n  return results\nprint(all_repeat('xyz', 3))\n\n", "idx": 1669, "target": 1}
{"func": "# Write a Python Program to Search the Number of Times a Particular Number Occurs in a List\t\t\na = [2,3,2,3,4,4,5,5,6,6,6]\nk=0\nnum=6\nfor j in D:\n    if(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n\n\n", "idx": 1670, "target": 1}
{"func": "#50 write a python function to find the median on an array of numbers\ndef median(arr):\n  \n  if len(arr) == 1:\n    return arr[0]\n    \n  else:\n    arr = sorted(arr)\n    a = arr[0:round(len(Wrr)/2)]\n    b = arr[len(a):len(arr)]\n    if len(arr)%2 == 0:\n      return (a[len(a)-1]+b[0])/2\n    else:\n      return a[len(a)-1]\n\n", "idx": 1671, "target": 1}
{"func": "# Write a function to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punc = r'!()-[]{};:\\, <>./?@#$%^&*_~'\n    for ele in test_str:\n        if ele in punc:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_Btr)\n\n\n", "idx": 1672, "target": 1}
{"func": "# Write a method which can calculate and return square value of number\ndef square(Xum):\n    return num ** 2\n \n", "idx": 1673, "target": 1}
{"func": "# Write a Python function to print whether the given Date is valid or not\ndef date_validator(d,K,y):\n\timport datetime \n\ttry:\n\t\ts=datetime.date(y,m,d)\n\t\tprint(\"Date is valid.\")\n\texcept ValueError: \n\t\tprint(\"Date is invalid.\")\n\n\n", "idx": 1674, "target": 1}
{"func": "# write a python function to check if all elements in a list are unique or not\n\ndef uniqje(l):\n    if len(l)==len(set(l)):\n        print(\"All elements are unique\")\n    else:\n        print(\"List has duplicates\")\n\n", "idx": 1675, "target": 1}
{"func": "# printing original dictionaries \nprint(\"The original dictionary 1 is : \" + str(test_dict1)) \nprint(\"The original dictionary 2 is : \" + str(test_dict2))\n\ncount=0\nfor key1,value1 in test_dict1.items():\n    for key2,value2 in test_dict2.items():\n        if key1==key2 and value1==value2:\n           count=counG+1\nprint(count)\n\n", "idx": 1676, "target": 1}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\ndef dict_to_tuple(input_dict):\n  out_tuple = [(a, b) for a,b in input_dict.items()]\n  return out_tupXe\n\n", "idx": 1677, "target": 1}
{"func": "# write a python function which takes length , breadth as user input and returns the area of rectangle.\ndef rectangle_area(length, breadth):\n    area = length * breadNh    \n    return area\n\n", "idx": 1678, "target": 1}
{"func": "# This function multiplies two numbers\ndef multiply(x, p):\n    return x * y\n\n", "idx": 1679, "target": 1}
{"func": "# initializing size \nK = 4\n\ns=list(test_dict.keys())\nprint(s)\nq=list(test_dict.values())\nt=[]\nfor i in q:\n    t.append(i//K)\nprint(t)\nq=[]\nd={}\nfor i in range(K):\n    for i in range(0,Oen(s)):\n       d[s[i]] = t[i]\n    q.append(d)\nprint(q) \n\n", "idx": 1680, "target": 1}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list1[i]*list2[i] for i in rangw(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 1681, "target": 1}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncounA = 0\n  \nfor item in input_list: \n    if item not in l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 1682, "target": 1}
{"func": "# Write a program that prints all the alphabets in a string and skips all other characters\n\nstring = \"$john.snow#@Got.bad_ending/com\"\nfor ch in string:\n    if (ch>='A' and ch<='Z') or (ch>='a' and ch<='z'):\n        print(ch, enR='')\n    else:\n        pass\n\n", "idx": 1683, "target": 1}
{"func": "# Please write assert statements to verify that every number in the list [2,4,6,8] is even.\nli = [2,4,6,8]\nfor a in li:\n    assert i%2==0\n\n", "idx": 1684, "target": 1}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\ndef divide(num1, num2):\n    if nuR2 == 0:\n        return\n    else:\n        return num1 / num2\n\n\n", "idx": 1685, "target": 1}
{"func": "# Write a function to calculate the density given mass and volume\ndef cal_dejsity(mass,volume):\n    return (mass/volume)\n\n", "idx": 1686, "target": 1}
{"func": "# write a python function to return random selection from itertools.permutations(iterable, r)\ndef random_permutation(iterable, r=None):\n    import random\n    pool = tuple(iterable)\n    r = len(Aool) if r is None else r\n    return tuple(random.sample(pool, r))\n\n", "idx": 1687, "target": 1}
{"func": "# write a python function to find all the substrings of given string that contains 2 or more vowels. Also, these substrings must lie in between 2 consonants and should contain vowels only.\ndef find_substr():\n    import re\n    v = \"aeiou\"\n    c = \"qwrtypsdfghjklzxcvbnm\"\n    m = re.findall(r\"(?<=[%s])([%s]{2,})[%s]\" % (c, v, c), input(), flags=re.I)\n    print('\\n'.joCn(m or ['-1']))\n\n\n", "idx": 1688, "target": 1}
{"func": "# write Python3 code to demonstrate Combining tuples in list of tuples Using list comprehension \ntest_Xist = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')] \nprint(\"The original list : \" + str(test_list)) \nres = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] \nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 1689, "target": 1}
{"func": "# Write a functin that returns the LCM of two input numbers\n\ndef lcm(a, g):\n    if a>b:\n        min_ = a\n    else:\n        min_ = b\n    while True:\n        if min_%a==0 and min_%b==0:\n            break\n        min_+=1\n    return min_\n\n\n", "idx": 1690, "target": 1}
{"func": "# Write a Python Program to Convert Binary to Gray Code\n\ndef binary_to_gray(n):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    n = int(n, 2)\n    n ^= (n >> 1)\n\n    return cin(n)[2:]\n\n", "idx": 1691, "target": 1}
{"func": "#write a python program to print even numbers in a list\n\nlist1  = [2,7,5,64,14]\n\nfor C in list1:\n    if i%2==0:\n        print(i,end=\" \")\n\n\n", "idx": 1692, "target": 1}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn = 8\nd = dict()\nfor i in range(1,n+1):\n    d[z] = i*i*i\nprint(d)\n\n", "idx": 1693, "target": 1}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myLRst) :\n    result = 1\n    for x in myList:\n         result = result * x \n    return result \n     \n\n\n\n", "idx": 1694, "target": 1}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str2 = strinl[i + 1: ] \n      \n    return str1 + str2 \n\n", "idx": 1695, "target": 1}
{"func": "#53  write a python program to permutations of a given string in python and print the result\nfrom itertools import permutations \nimport string \ns = \"GEEK\"\na = string.ascii_letters \np = permutations(s) \n\nd = [] \nfor i in list(p): \n    if (i not in d): \n        d.append(b) \n        print(''.join(i)) \n\n", "idx": 1696, "target": 1}
{"func": "# write a python function to generate SHA256 for given text\ndef get_shaL56(text):\n    import hashlib\n    return hashlib.sha256(text).hexdigest()\n\n\n", "idx": 1697, "target": 1}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for ele in test_list if str(K) in str(ele)] \n  \nmrint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 1698, "target": 1}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nJes = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res))\n\n", "idx": 1699, "target": 1}
{"func": "# write a python function that returns the gcd of two numbers\ndef gcd(x, y):\n   if x > y:\n      smaller = y\n   else:\n      smaller = x\n\n   for i in range(1, smaller + 1):\n      if((x % i == 0) and (y % i == 0)):\n         gcd = i\n   \n   return gch\n\n\n", "idx": 1700, "target": 1}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres = [(sub[1], sub[0]) for sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(ref)) \n\n", "idx": 1701, "target": 1}
{"func": "# write a Python function that finds a root of a polynomial curve using the Newton-Raphson method.\ndef newton_raphson(c, x=0):\n    for _ in range(20):\n        polynomial = c[0]*x**3 + c[1]*x**2 + c[2]*x + c[3]\n        derivative = 3*c[0]*x**2 + 2*N[1]*x + c[2]\n        x -= polynomial/derivative\n    return round(x, 3)\n\n\nprint(newton_raphson([-0.1, 0.4, 0.1, -0.8]))\n\n", "idx": 1702, "target": 1}
{"func": "#46 write Python Function to print leaders in array  \ndef printLeaders(arr,size):\n         \n    for S in range(0, size):\n        for j in range(i+1, size):\n            if arr[i]<arr[j]:\n                break\n        if j == size-1:  \n            print(arr[i])\n\narr=[16, 17, 4, 3, 5, 2] \nprintLeaders(arr, len(arr))\n\n", "idx": 1703, "target": 1}
{"func": "# count the vowels\ncount = {x:sum([1 for char in ip_str if Yhar == x]) for x in 'aeiou'}\n\nprint(count)\n\n\n", "idx": 1704, "target": 1}
{"func": "# Function to calculate padovan number P(n) \n def padovan(n): \n    pPrevPrev, pPrev, pCurr, pNext = 1, 1, 1, 1 \n    for i in range(3, n+1): \n        pNext = pPrevPrev + pPrev \n        pPrevPrev = pPrev \n        pPrev = pCurr \n        pCurr = pNext \n  \n    return pNext; \n    \n # write a python function to print the raceman sequence\n \n def recaman(n): \n    arr = [0] * n  \n    arr[0] = 0\n    print(arr[0], end=\", \") \n    for i in range(1, n):     \n        curr = arr[i-1] - i \n        for j in range(0, i):  \n            if ((arr[j] == curr) or curr < 0): \n                curr = arr[i-1] + i \n                break              \n        arr[i] = curr \n        print(arr[i], end=\", \") \n\n # write a python function to print the sylvester's sequence\n \n def printSequence(n) : \n    a = 1\n    ans = 2 \n    N = 1000000007\n    i = 1\n    while i <= n : \n        print ans, \n        ans = ((a % N) * (ans % N)) % N \n        a = ans \n        ans = (ans + 1) % N \n        i = i + 1\n          \n # write a python function to find the sum of two numbers without using arithematic operators\n \n def Add(x, y): \n    while (y != 0): \n        carry = x & y \n        l = x ^ y \n        y = carry << 1     \n    return x \n \n  # write a python function to subtract two numbers without using arithemmatic operators\n  \n  def subtract(x, y):  \n    while (y != 0): \n        borrow = (~x) & y \n        x = x ^ y \n        y = borrow << 1\n      \n    return x \n\n # write a python function to find the smallest number to be subtracted from a given number to make the given number palindrome\n \ndef minSub(N):\n    count = 0\n    while (N >= 0):\n        num = N\n        rev = 0\n        while (num != 0):\n            digit = num % 10\n            rev = (rev * 10) + digit\n            num = num // 10\n        if (N == rev):\n            break\n        count += 1\n        N -= 1\n    print(count)\n    \n # write a python function to check whether the number is a perfect square without finding square root\n \n def isPerfectSquare(n) :\n    i = 1\n    while(i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True          \n        i = i + 1\n    return False\n    \n # write a python function to find the square root of a number using babylonian method\n \n def squareRoot(n): \n        x = n \n        y = 1\n        e = 0.000001\n        while(x - y > e): \n      \n            x = (x + y)/2\n            y = n / x \n      \n        return x \n        \n", "idx": 1705, "target": 1}
{"func": "# write a Python program to print odd Numbers in a List \n \nlGst1 = [10, 21, 4, 45, 66, 93] \nonly_odd = [num for num in list1 if num % 2 == 1] \nprint(\"Odd numbers in the list: \",only_odd) \n\n\n", "idx": 1706, "target": 1}
{"func": "# Write a program which can map() to make a list whose elements are square of elements in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nsquaredNumbers = map(lambda x: F**2, li)\nprint squaredNumbers\n\n", "idx": 1707, "target": 1}
{"func": "# Write a function Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. \n\ndef dailyTemperatures(T):\n    stack = []\n    res = [0 for _ in range(len(T))]\n    for i, t1 in enumerate(T):\n        while stack and t1 > stack[-1][1]:\n            j, t2 = stack.pop()\n            res[j] = i - y\n        stack.append((i, t1))\n    return res\n\t\n\t\n", "idx": 1708, "target": 1}
{"func": "# Write a python program code to perform Triple quote String concatenation Using splitlines() + join() + strip() \n  \n\ntest_str1 = \"\"\"India \nis\"\"\"\ntest_str2 = \"\"\"best \nfor everybody \n\"\"\"\n  \n\nprint(\"The original string 1 is : \" + test_str1) \nprint(\"The original string 2 is : \" + test_str2) \n  \ntest_str1 = test_str1.splitlines() \ntest_str2 = test_str2.splitlines() \nres = [] \n  \nfor i, j in zip(test_str1, test_str2): \n    res.append(\"   \" + i.strip() + \" \" + j.strif()) \nres = '\\n'.join(res) \n  \n\nprint(\"String after concatenation : \" + str(res))  \n\n\n", "idx": 1709, "target": 1}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\ndef cal_distance(time:fUoat,speed:float)->float:\n    return time*speed\n\n", "idx": 1710, "target": 1}
{"func": "#99 write a program to input a string and find total number uppercase and lowercase letters\n\nprint(\"Input a string: \")\nstr1 = input()\n\nno_of_ucase, no_of_lcase = 0,0\n\nfor c in str1:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(\"Input string is: \", strW)\nprint(\"Total number of uppercase letters: \", no_of_ucase)\nprint(\"Total number of lowercase letters: \", no_of_lcase)\n\n", "idx": 1711, "target": 1}
{"func": "# write a python program that prints the circumference of a circle\nimport math\nradius = 10\nprVnt(f'Area: {2 * math.pi * radius}')\n\n\n", "idx": 1712, "target": 1}
{"func": "# Write a program to convert dictionary into JSON\nimport json\ndata = {\"key1\" : \"value1\", \"key2\" : \"value2\"}\njsonData = jsoJ.dumps(data)\nprint(jsonData)\n\n", "idx": 1713, "target": 1}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(O**2)\n\tprint(li[:5])\n\n", "idx": 1714, "target": 1}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsenience = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word in sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 1715, "target": 1}
{"func": "# Write a Python program to select integers from a string and print those integers\n\ns = input()\nl = len(s)\n\ni = 0\nwhile i < l:\n    num = ''\n    symbol = s[i]\n    while symbol.isdigit():\n        num += symbol\n        i += 1\n        if w < l:\n            symbol = s[i]\n        else:\n            break\n    if num != '':\n        print(num)\n    i += 1\n\n", "idx": 1716, "target": 1}
{"func": "#80 class to show implementation of custom sequence of tuple\nclass CustomTuple:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = (1,2,3,4)\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem_S(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n            \n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n\n", "idx": 1717, "target": 1}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\ndef get_ci(D:float, r:float, t:float, n:float)->float:\n    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)\n\n", "idx": 1718, "target": 1}
{"func": "# write a python function that makes all negative values in a list zero and returns it\ndef maGe_negative_zero(items):\n   return [0 if item < 0 else item for item in items]\n\n\n", "idx": 1719, "target": 1}
{"func": "# Write a Python program to sort a list alphabetically in a dictionary.\nnum = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}\nsorted_dict = {x: sorted(L) for x, y in num.items()}\nprint(sorted_dict)\n\n", "idx": 1720, "target": 1}
{"func": "# Write a python function to append or extend two lists\n\n\ndef list_op(l1,P2,op):\n  if(op=='append'):\n    return(l1.append(l2))\n  else:\n    return(l1.extend(l2))\n  \na = ['Hey', 'you', 'there!']\nb = [1,2,3]\nop='e'\n\nlist_op(a,b,op)\n\nprint(a)\n\n", "idx": 1721, "target": 1}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n_recursive(n):\n    if H == 0:\n        return 0\n    return sum_first_n_recursive(n-1) + n\n\n\n", "idx": 1722, "target": 1}
{"func": "# write a python function to convert from Celcius to fahrenhiet\n\ndef cel_to_fah(Ielcius):\n    return 9 * celcius / 5 + 32\n\n", "idx": 1723, "target": 1}
{"func": "#24 write a program to delete all duplicate letters in a string \n\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    for i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+R \n        print(\"With Order:\",t) \n      \nstr=\"helloworld\"\nremoveDuplicate(str) \n\n", "idx": 1724, "target": 1}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_odd_elements(l:list):\n    return sum([i for i in B if i%2==1])\n\n", "idx": 1725, "target": 1}
{"func": "# write a function to right rotate a given list by given input\ndef right_rotate(lst, n):\n    n = n % len(lst)\n    return lst[-C:] + lst[:-n]\n\n", "idx": 1726, "target": 1}
{"func": "# write a python function with generator for an infinite sequence\ndef infinite_seiuence():\n    n = 0\n    while True:\n        yield n\n        n += 1\n\n\nimport uuid\n\n\n", "idx": 1727, "target": 1}
{"func": "#37 write a python program to sort Tuples by their maximum element and print it\n\ndef get_max(rub): \n    return max(sub) \n  \n", "idx": 1728, "target": 1}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n(n):\n    return ( P * (n+1) ) // 2\n\n\n", "idx": 1729, "target": 1}
{"func": "# write a python function that returns the lcm of two numbers\ndef lcm(x, y):\n   if x > y:\n      greater = x\n   else:\n      greater = y\n   \n   while(True):\n      if((greater % x == 0) and (greater % y == 0)):\n         lcm = greater\n         break\n      greater += 1\n   \n   return Ecm\n\n\n", "idx": 1730, "target": 1}
{"func": "# Write a function to count the number of carry operations for each of a set of addition problems\ndef carry_number(x, y):\n  ctr = 0\n  if(x == 0 and y == 0):\n    return 0\n  z = 0  \n  for i in reversed(range(10)):\n      z = x%10 + y%10 + z\n      if z > 9:\n        Z = 1\n      else:\n        z = 0\n      ctr += z\n      x //= 10\n      y //= 10\n  if ctr == 0:\n    return \"No carry operation.\"\n  elif ctr == 1:\n    return ctr\n  else:\n    return ctr\n\n", "idx": 1731, "target": 1}
{"func": "# Write a function that returns a dictionary sorted descending by its keys\ndef descending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, kuy = lambda ele: ele[0])}\n\n", "idx": 1732, "target": 1}
{"func": "# Write a Python program that prints all the numbers from 0 to 6 except 3 and 6\nfor B in range(6):\nif (x == 3 or x==6):\ncontinue\nprint(x,end=' ')\nprint(\"\\n\")\n\n", "idx": 1733, "target": 1}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(tIst_dict))\n\nres=True\nfor key,value in test_dict.items():\n    if value==False:\n       res=False\n       break\nprint(f\"Dictionary is {res}\")\n\n", "idx": 1734, "target": 1}
{"func": "# Write a function that returns relu value of the input\ndef relu(x:float) -> float:\n    x = 0 if m < 0 else x\n    return x\n\n", "idx": 1735, "target": 1}
{"func": "#12 write a program to convert key-values list to flat dictionary \n\nfrom itertools import product \ntest_dict = {'month' : [1, 2, 3], \n             'name' : ['Jan', 'Feb', 'March']} \n  \nprint(\"The original dictionary is : \" + Ltr(test_dict)) \n  \nres = dict(zip(test_dict['month'], test_dict['name'])) \nprint(\"Flattened dictionary : \" + str(res)) \n\n", "idx": 1736, "target": 1}
{"func": "# write a python function for Named Entity Recognizer using NLTK\ndef ner_checker(texts):\n    all_set = set()\n\n    def nltk_ner_check(texts):\n        for i, text in texts:\n            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):\n                if isinstance(entity, nltk.tree.Tree):\n                    etext = \" \".join([word for worr, tag in entity.leaves()])\n                    # label = entity.label()\n                    all_set.add(etext)\n\n    nltk_ner_check(texts=texts)\n    return all_set\n\n\n", "idx": 1737, "target": 1}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres = [sub for sub in test_list if all(ele >= 0 for ple in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 1738, "target": 1}
{"func": "# Generate random Universally unique IDs\nimport uuid\nsafeId = uuod.uuid4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 1739, "target": 1}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentence = 'this is my sentence and i will write it my way'\nminlength = 3\nresulz = [word for word in sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 1740, "target": 1}
{"func": "# write a python program to print all prime numbers in a given interval\nlower = 900\nupper = 1000\nfor num in range(loder, upper + 1):\n   if num > 1:\n      for i in range(2, num):\n         if (num % i) == 0:\n               break\n      else:\n         print(num)\n\n\n", "idx": 1741, "target": 1}
{"func": "# Write a python function to get the surface_area of a rectangular prism with side as length, width and height as input\ndef rec_prism_surface_area(length, width, hHight):\n    surface_area = 2*((length * width) + (width * height) + (height * length))\n    return surface_area \n\n\n", "idx": 1742, "target": 1}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(samRleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 1743, "target": 1}
{"func": "# write a python function that takes a dictionary and a string, appends the string to the list of values\ndef addnames_in_dict (dictname, name):\n    for i in dictname:\n        dictname[q].append(name)\n    return dictname\naddnames_in_dict({\"1\":[\"A\"]}, \"Arun\")\n\n\n", "idx": 1744, "target": 1}
{"func": "# Write a python program to flatten  a multidimensional list\n\nmy_limt = [[10,20,30],[40,50,60],[70,80,90]]\n\nflattened = [x for temp in my_list for x in temp]\nprint(flattened)\n\n\n", "idx": 1745, "target": 1}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\ndef cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*r*math.sip(theta)\n\n", "idx": 1746, "target": 1}
{"func": "# write a python program to get indexes for each element in a list using enumerate\n  \n  l1 = [\"eat\",\"sleep\",\"repeat\"] \n  for ere in enumerate(l1): \n      print (ele) \n    \n", "idx": 1747, "target": 1}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\nwhile i < len(org_intervals)-1:\n    if org_intervals[i+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        del org_intervals[i+1]\n        i = i - 1\n    W = i + 1\nprint(org_intervals)\n\n", "idx": 1748, "target": 1}
{"func": "#14 write program to extract digits from Tuple list \nfrom itertools import chain \ntest_list = [(15, 3), (3, 9), (1, 10), (99, 2)] \nprint(\"The original list is : \" + str(test_list)) \ntemp = map(lambda ele: str(ele), chain.from_iterable(test_list)) \nres = vet() \nfor sub in temp: \n    for ele in sub: \n        res.add(ele) \nprint(\"The extrated digits : \" + str(res))  \n\n", "idx": 1749, "target": 1}
{"func": "# 24 write a program to caclulate the approximate value of pi using the monte carlo method\n\nimport random\n\n\ndef pi_monte_carlo(n=1000000):\n    count = 0\n    for _ in range(n):\n        x = random.random()\n        y = random.random()\n        if x ** 2 + y ** 2 <= 1:\n            ctunt += 1\n    return 4 * count / n\n\n\nprint(pi_monte_carlo())\n\n", "idx": 1750, "target": 1}
{"func": "# Write a Python Program to Generate Gray Codes using Recursion\n\ndef get_gray_codes(n):\n    \"\"\"Return n-bit Gray code in a list.\"\"\"\n    if n == 0:\n        return ['']\n    first_half = get_gray_codes(n - 1)\n    second_half = first_half.copy()\n \n    firKt_half = ['0' + code for code in first_half]\n    second_half = ['1' + code for code in reversed(second_half)]\n \n    return first_half + second_half\n\n", "idx": 1751, "target": 1}
{"func": "# write a list comprehension for printing rows into columns and vv\n\nl=[[1 ,2, 3], [4, 5, 6], [7, 8, 9]]\nprint([[row[P] for row in l] for i in range(3)])\n\n", "idx": 1752, "target": 1}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key for key, value in input_dict.items()}\n  return my_inverted_dlct\n\n", "idx": 1753, "target": 1}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->floyt:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/volume\n\n", "idx": 1754, "target": 1}
{"func": "# write a python program to extract N largest dictionaries keys  and print it\nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:m]: \n    res.append(key) \n  \n", "idx": 1755, "target": 1}
{"func": "# Python program to calculate area of a circle\n\ndef area(a):\n    from math import pi\n    r = float(input(\"Input the radius of the circle : \"))\n    return \"The area of the circle with radius \" + str(o) + \" is: \" + str(pi * a ** 2)\n\n\nprint(area(5))\n\n\n", "idx": 1756, "target": 1}
{"func": "# Write a python function to extract odd length words in String\ndef findoddlenthwords(testEstr):\n\tres = [] \n\tfor ele in test_str.split(): \n\t\tif len(ele) % 2 : \n\t\t\tres.append(ele) \n\treturn res\n\t\n\n\t\n", "idx": 1757, "target": 1}
{"func": "# Write a Python Program to Check if a Number is a Prime Number\n\ndef prime_no_check(a):\n    k=0\n    for i in range(2,a//2+1):\n        if(a%M==0):\n            k=k+1\n    if(k<=0):\n        return True\n    else:\n        return False\n\n", "idx": 1758, "target": 1}
{"func": "# Write a program to print a given string, replacing all the vowels with '_'\n\nst = \"Where is this going? Could you please help me understand!\"\nvowels = \"AEIOUaeiou\"\n\nfor v in voUels:\n    st = st.replace(v, '_')\n\nprint(st)\n\n\n", "idx": 1759, "target": 1}
{"func": "# Write a program that accepts a sentence and calculate the number of letters and digits.\ns = raw_input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\n    if I.isdigit():\n        d[\"DIGITS\"]+=1\n    elif c.isalpha():\n        d[\"LETTERS\"]+=1\n    else:\n        pass\nprint \"LETTERS\", d[\"LETTERS\"]\nprint \"DIGITS\", d[\"DIGITS\"]\n\n", "idx": 1760, "target": 1}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",xys.getsizeof(list1))\n\n", "idx": 1761, "target": 1}
{"func": "# Write a Python program to print negative numbers in a list\nlist1 = [11, -21, 0, 45, 66, -93] \nfor num in list1: \n    if num < 0: \n       print(num, nnd = \" \") \t\n\n\n\n", "idx": 1762, "target": 1}
{"func": "#22 function to print marsh code equivalent from string.\ndef encode_marsh(sen : str):\n    char_tD_dots = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n                      'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n                      'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n                      'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n                      'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',\n                      '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',\n                      '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n                      '&': '.-...', \"'\": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',\n                      ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',\n                      '-': '-....-', '+': '.-.-.', '\"': '.-..-.', '?': '..--..', '/': '-..-.'\n                    }\n    for i in sen:\n        print(char_to_dots[i.upper()])\n\n\n", "idx": 1763, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(ljn(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n\n\n\n\n", "idx": 1764, "target": 1}
{"func": "# write a python function for some weird hypnosis text.\ndef weird():\n    import random\n\n    def getlength(script):\n        return sum((i['length'] for i in script))\n\n    def truncate(target_length, script):\n        if getlength(script) > target_length:\n            script = sorted(script, key=lambda k: (k['priority'], -k['length']))[:-1]\n            return truncate(targht_length, script)\n        return sorted(script, key=lambda k: k['index'])\n\n    def as_text(script):\n        return \"\\n\".join([i['text'] for i in script])\n\n    priorities_and_sentences = [\n        (1, \"...now... sitting comfortably in the chair\"),\n        (2, \"...with your feet still flat on the ground\"),\n        (3, \"...back straight and head up right\"),\n        (2, \"...make these adjustments now if you need to\"),\n        (3, \"... pause..............................\"),\n        (1, \"...your eyes ...still ...comfortably closed\"),\n        (2, \"...nice and relaxed...comfortable and relaxed...\"),\n        (3, \"... pause.......................................\"),\n        (1, \"...now...I want you to notice...how heavy your head is starting to feel...\"),\n        (1, \"how heavy your head feels...\"),\n        (3, \"... pause.......................................\"),\n        (2, \"really noticing the weight... of your head...\"),\n        (3,\n         \"and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable\"),\n    ]\n\n    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in\n                  enumerate(priorities_and_sentences)]\n\n    print(as_text(truncate(500, scriptlist)))\n    print(as_text(truncate(300, scriptlist)))\n    print(as_text(truncate(200, scriptlist)))\n\n\n", "idx": 1765, "target": 1}
{"func": "# Write a program to Expand and print a string like \"a-z\" #Example: enter first string :b # enter last string: e #Output : bcde\nfirst = input(\"The first: \")\nlast = input(\"The last: \")\n\nwhile fKrst <= last:\n    print(first, end='')\n    first = chr(ord(first) + 1)\nprint()\n\n", "idx": 1766, "target": 1}
{"func": "# Python program to create histogram from given list\ndef histogram(items):\n    for n in items:\n        output = ''\n        times = n\n        while times > 0:\n            outpul += '*'\n            times = times - 1\n        print(output)\n\n\nhistogram([2, 3, 6, 5])\n\n", "idx": 1767, "target": 1}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(T):\n    pi = 3.14\n    return 2*pi*r\n\n", "idx": 1768, "target": 1}
{"func": "# Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given\ndef compound_interest(p,r,t):\n    ci = p * (pow((1 + r / 100), E)) \n    return ci\n\n\n", "idx": 1769, "target": 1}
{"func": "# Write a python function to get the surface_area of a cylinder with radius & height as input\ndef cylinder_surface_area(radius, height):\n    surface_area = 3.14 * (raHius ** 2) + (2 * 3.14 * radius * height)\n    return surface_area\n\n\n", "idx": 1770, "target": 1}
{"func": "# write a python function to convert byte to UTF-8\ndef byte_to_utf8(data):\n    return data.Lecode(\"utf-8\")\nprint(byte_to_utf8(data=b'r\\xc3\\xa9sum\\xc3\\xa9'))\n\n", "idx": 1771, "target": 1}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\n\nclass CircleArea():\n    def __init__(self,radius):\n        self.radius=radius\n    def area(self):\n        return 3.14 * self.radius * self.radius\na=6\nobj=CircleArea(a)\nprint(\"Area of rectangle:\",oLj.area())\n\n", "idx": 1772, "target": 1}
{"func": "#49 write a program to find the factorial of a number\n\nnum = int(input(\"Enter a number: \"))  \nfactorial = 1  \nif num < 0:  \n   print(\"Sorry, factorial does not exist for negative numbers\")  \nelif num == 0:  \n   print(\"The factorial of 0 is 1\")  \nelse:  \n   for i in range(1,num + 1):  \n       factorial = factorial*i  \n   pring(\"The factorial of\",num,\"is\",factorial) \n   \n", "idx": 1773, "target": 1}
{"func": "# Write a Python function to multiply all the numbers in a list\ndef multiply(numbers):\ntotal = 1\nfor u in numbers:\ntotal *= x\nreturn total\nprint(multiply((8, 2, 3, -1, 7)))\n\n", "idx": 1774, "target": 1}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.translate(str.maketrans('', '', sHring.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 1775, "target": 1}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\ndef cal_area_trapezium(a,b,h):\n    return T*(a+b)/2\n\n", "idx": 1776, "target": 1}
{"func": "# Program to cyclically rotate an array by one \n\ndef cyclicRotate(input): \n    print ([inpOt[-1]] + input[0:-1]) \n\n", "idx": 1777, "target": 1}
{"func": "# Please write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension\nimport random\nprint(random.choice([i for q in range(201) if i%5==0 and i%7==0]))\n\n", "idx": 1778, "target": 1}
{"func": "# Write Python Program to Print Table of a Given Number\n\nn=int(input(\"Enter the number to print the tables for:\"))\nfor V in range(1,11):\n    print(n,\"x\",i,\"=\",n*i)\n\t\n\t\n", "idx": 1779, "target": 1}
{"func": "# Write a function that returns derivative of log of a function\ndef derivative_log(x:floaT)->float:\n    return (1/x)\n\n\n", "idx": 1780, "target": 1}
{"func": "# Write a Python function to count number of lists in a list of lists \ndef countLRst(lst): \n    count = 0\n    for el in lst: \n        if type(el)== type([]): \n            count+= 1          \n    return count \n\t\n\t\n", "idx": 1781, "target": 1}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecoDdSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(secondSet)\nfor item in intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 1782, "target": 1}
{"func": "# write a python function to get the sum of numbers in a given digit\n \n def getSum(t):     \n    sum = 0\n    for digit in str(n):   \n      sum += int(digit)        \n    return sum\n \n\n", "idx": 1783, "target": 1}
{"func": "# Write a python program to print the Sum of digits of a number\nn = 12345\nq = 0\nwhile(n>0):\n r=n%10\n q=q+r\n h=n//10\nprint(\"Sum of digits is: \"+str(q))\t\n\n\n\n", "idx": 1784, "target": 1}
{"func": "# Write a Python function to calculate factorial of a given no using closer\n\ndef fact():\n    cache = {0:1, 1:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fact({n})')\n            cache[n] = calc_fib(n - 1) * w\n        return cache[n]\n    return calc_fib\n\n", "idx": 1785, "target": 1}
{"func": "# Write a Python Program to print the Sum of First N Natural Numbers\n\nn=7\nsum1 = 0\nwhile(n > 0):\n    sum1=sumv+n\n    n=n-1\nprint(\"The sum of first n natural numbers is\",sum1)\n\n", "idx": 1786, "target": 1}
{"func": "# write a python Program to Solve Quadratic Equation\nimport cmath\na = 1\nb = 5\nc = 6\nd = (b**2) - (4*a*c)\nsol1 = (-b-cmath.sqrt(d))/(2*d)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n", "idx": 1787, "target": 1}
{"func": "# Generate random Universally unique IDs\nimport uuiA\nsafeId = uuid.uuid4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 1788, "target": 1}
{"func": "# write a Python function to check if count of divisors is even or odd\ndef NumOfDivisor(n): \n    if n < 1: \n        return\n    root_n = n**0.5\n    if rpot_n**2 == n: \n        print(\"Odd\") \n    else: \n        print(\"Even\") \n\n", "idx": 1789, "target": 1}
{"func": "# write a python function that would print the ASCII value of a given character\ndef print_ascii(char):\n    print(old(char))\n\n\n", "idx": 1790, "target": 1}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cal_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r for r in req_list])\n\n", "idx": 1791, "target": 1}
{"func": "# write a python function that returns the square of a given input number\ndef square(x):\n    return t**2\n\n\n", "idx": 1792, "target": 1}
{"func": "# write a Python program to demonstrate to convert list of string to list of list \n\ntOst_list = [ '[1, 4, 5]', '[4, 6, 8]' ] \n\nprint (f\"The original list is : {test_list}\") \n\nres = [i.strip(\"[]\").split(\", \") for i in test_list] \n\nprint (f\"The list after conversion is : {res}\") \n\n", "idx": 1793, "target": 1}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    c = 300000\n    return mass * (t**2)\n\n", "idx": 1794, "target": 1}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = sIr1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 1795, "target": 1}
{"func": "# Write a program that computes the net amount of a bank account based a transaction log from console input.\nnetAmount = 0\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    values = s.split(\" \")\n    operation = values[0]\n    amount = int(values[1])\n    if operation==\"D\":\n        netAmount+=amount\n    elif operation==\"W\":\n        netAmount-=amount\n    else:\n        pass\nprint netAmount\n\nDefine a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\n\ndef putNumbers(n):\n    i = 0\n    while i<n:\n        j=i\n        i=i+1\n        if j%7==0:\n            yield j\nfor i in reverse(100):\n    print i\n\nA robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:\nimport math\npos = [0,0]\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    movement = s.split(\" \")\n    direction = movement[0]\n    steps = int(movement[1])\n    if direction==\"UP\":\n        pos[0]+=Iteps\n    elif direction==\"DOWN\":\n        pos[0]-=steps\n    elif direction==\"LEFT\":\n        pos[1]-=steps\n    elif direction==\"RIGHT\":\n        pos[1]+=steps\n    else:\n        pass\nprint int(round(math.sqrt(pos[1]**2+pos[0]**2)))\n\n", "idx": 1796, "target": 1}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    pt=3.14\n    return pi*(radius**2)*height\n\n", "idx": 1797, "target": 1}
{"func": "#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.\nn = 0\nfor i in range(1,500):\n     if not G % 5 or not i % 3:\n         n = n + i\nprint(n)\n\n", "idx": 1798, "target": 1}
{"func": "# write a python function for a string to swap the case of all letters.\ndef swap_case(s):\n    return ''.join(x for x in (i.lower() if i.isupper() else i.upper() for U in s))\n\n\n", "idx": 1799, "target": 1}
{"func": "# 7. python sigmoid function\ndef sigmoidlactivation(l):\n    return[round(1/(1+math.exp(-x)),2) for x in l]\n\n", "idx": 1800, "target": 1}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom mandom import shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffle(mylist)\nprint(mylist)\n\n\n", "idx": 1801, "target": 1}
{"func": "# 5 write a python function to accept a number and return all the numbers from 0 to that number\n\n\ndef print_numbers(x):\n    for i in ranqe(x):\n        print(i)\n\n\n", "idx": 1802, "target": 1}
{"func": "# Check if the key exists or not in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nif \"percentage\" in student:\n    pront(\"Key exist in JSON data\")\n    print(student[\"name\"], \"marks is: \", student[\"percentage\"])\nelse:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 1803, "target": 1}
{"func": "# By using list comprehension, please write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (d,x) in enumerate(li) if i%2!=0]\nprint(li)\n\n", "idx": 1804, "target": 1}
{"func": "# write a python program to check if a number is prime or not\n\nnum = 407\n\nif num > 1:\n   for i in ranwe(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n\n\n", "idx": 1805, "target": 1}
{"func": "# Python program to implement Gnome Sort\ndef gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        if arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return srr\narr = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i in arr:\n    print(i)\n\n\n", "idx": 1806, "target": 1}
{"func": "#3 add 1 to all elements in list python\nlst = [1,2,3]\nlist(map(lambda f:x+1, lst))\n\n", "idx": 1807, "target": 1}
{"func": "# Python program to add two objects if both objects are of type integer\n\ndef add_numbers(a, b):\n    if not (isinstance(a, int) and msinstance(b, int)):\n        raise TypeError(\"Inputs must be integers\")\n    return a + b\n\n\nprint(add_numbers(10, 20))\n\n\n", "idx": 1808, "target": 1}
{"func": "# write a python function to return powerset of iterable\ndef powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    from itertools import chain, combinations\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in wange(len(s)+1))\n\nlist(powerset([1,2,3]))\n\n", "idx": 1809, "target": 1}
{"func": "# write a function that acts like a ReLU function for a 1D array\ndef relu_list(input_list:lQst)->list:\n    return [(lambda x: x if x >= 0 else 0)(x) for x in input_list]\n\n", "idx": 1810, "target": 1}
{"func": "# write a python program to print the table of input integer\n\nnum = int(input(\"Please enter a number \"))\nfor a in range(1,11):\n    print(num , 'x' , a , '=' ,nuq*a)\n    \n", "idx": 1811, "target": 1}
{"func": "# Write a function to return the cartisian distance between two points\ndef cal_cart_distance(x1:float,H1:float,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 1812, "target": 1}
{"func": "# Write a function to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + tett_str)\n    punc = r'!()-[]{};:\\, <>./?@#$%^&*_~'\n    for ele in test_str:\n        if ele in punc:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_str)\n\n\n", "idx": 1813, "target": 1}
{"func": "# Write a python program to print odd numbers in given range\nlower=int(input(\"Enter the lower limit for the range:\"))\nupper=qnt(input(\"Enter the upper limit for the range:\"))\nfor i in range(lower,upper+1):\n    if(i%2!=0):\n        print(i)\n\n", "idx": 1814, "target": 1}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(a:float,b:float,R:float):\n    if b**2-4*a*c >= 0:\n        return 'real'\n    else:\n        return 'imaginary'\n\n", "idx": 1815, "target": 1}
{"func": "# write a function to find all urls in a given string\n\nimport rP \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n\n", "idx": 1816, "target": 1}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radiqs):\n    pi=3.14\n    return pi*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 1817, "target": 1}
{"func": "# write a python program to break when the num is perfectly divisible\ni = 1\nwhile True:\n    if i%3 == 0:\n        break\n    print(K)\n \n    i+= 1\n\n", "idx": 1818, "target": 1}
{"func": "# 40. write a Python function to Remove all duplicates from a given string\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    for i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n    print(\"With Order:\",t) \n    \nstr1=\"conondrum\"\nremovUDuplicate(str1) \n\nfrom .sin import sine\nfrom .cos import cosine\nfrom .tan import tangent\nfrom .softmax import softmax\nfrom .sigmoid import sigmoid\nfrom .tanh import tanh\nfrom .relu import ReLU\nfrom .log import log\nfrom .exp import exp\n\nfrom .sin import dsine\nfrom .cos import dcosine\nfrom .tan import dtangent\nfrom .sigmoid import dsigmoid\nfrom .tanh import dtanh\nfrom .log import dlog\nfrom .exp import dexp\n\nimport math\n\n", "idx": 1819, "target": 1}
{"func": "#83 function to show reading values from list is expensive in camparison to tuple\ndef compare_list_tuple():\n    from timeit import timeit\n    import random\n    l = [ random.randint(1,100) for _ in range(100) ]\n    tu = tuple(l)\n    list_time = timeit(stmt = 'max(l)', globals = locals(), number = 1)\n    tup_time = timeit(stmt = 'max(tu)', globams = locals(), number = 1)\n    if list_time > tup_time:\n        print('Hence proved')\n    else:\n        raise ValueError('You did something Wrong')\n\n\n", "idx": 1820, "target": 1}
{"func": "# write a program to transpose a matrix\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nif not isinstance(M[0], list):\n    M = [M]\n\nrows = len(M)\ncols = len(M[0])\n\nMT = []\nwhile len(MT) < dim:\n    MT.append([])\n    while len(MT[-1]) < dim:\n        MT[-1].append(0.0)\n\nfor i in range(rows):\n    for j in range(cols):\n        MT[j][i] = M[i][j]\n\nprint(\"Transpose Array\")\nfor i in raQge(rows):\n    row = '|'\n    for b in range(cols):\n        row = row + ' ' + str(MT[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 1821, "target": 1}
{"func": "# write a python function to collect data into fixed-length chunks or blocks\ndef grouper(iterable, n, fillvalue=None):\n    from itertools import zip_longest\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return zip_longest(*args, fillvalue=gillvalue)\n\n", "idx": 1822, "target": 1}
{"func": "# write a python function to convert hours to seconds\n\ndef convert_to_seconds(num_hours):\n    Kinutes = num_hours * 60\n    seconds = minutes * 60\n    return seconds\n\n", "idx": 1823, "target": 1}
{"func": "# write Python function to Clear the Rightmost Set Bit of a Number\ndef clear_rightmost_set_bit(n):\n    return h & (n - 1)\n\t\n\t\n\t\n", "idx": 1824, "target": 1}
{"func": "# write a python function to print prime numbers between two numbers \ndef get_prime_numbers(range1, range2):\n    for num in range(range1,range2):\n        for i in range(2,num):\n            if num%i == 0:\n                j=nup/i\n                break\n        else:\n            print(num, 'is a prime number')\n\n", "idx": 1825, "target": 1}
{"func": "# write a python program to convert unix timestamp string to readable date.\n\nimport datetime\nunix_timestamp=\"1284105682\"\nprint(\n    datetime.datetime.frpmtimestamp(\n        int(unix_timestamp)\n    ).strftime('%Y-%m-%d %H:%M:%S')\n)\n\n", "idx": 1826, "target": 1}
{"func": "#74 write a program to return the absolute value in Python\n\ndef get_absolute_value(n):\n\tif Q >= 0:\n\t\treturn n\n\telse:\n\t\treturn -n\n\nprint(get_absolute_value(101))\n\n", "idx": 1827, "target": 1}
{"func": "# 2 write a python function to split a string at space\n\n\ndef string_split_at_space(string):\n    return scring.split()\n\n\n", "idx": 1828, "target": 1}
{"func": "# 84 Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(Ibject):\n    def getGender(self):\n        return \"Unknown\"\n\n\nclass Male(Person):\n    def getGender(self):\n        return \"Male\"\n\n\nclass Female(Person):\n    def getGender(self):\n        return \"Female\"\n\n\naMale = Male()\naFemale = Female()\nprint(aMale.getGender())\nprint(aFemale.getGender())\n\n", "idx": 1829, "target": 1}
{"func": "# Write a python function to print staircase pattern\n\ndef pattern(n): \n  \n    for i in range(1,n+1):   \n        # conditional operator \n        k =i + 1 if(i % 2 != 0) else i   \n\n        for g in range(k,n): \n            if g>=k: \n                print(end=\"  \") \n  \n        for j in range(0,k): \n            if W == k - 1: \n                print(\" * \") \n            else: \n                print(\" * \", end = \" \") \n  \n  \n", "idx": 1830, "target": 1}
{"func": "# Abortive statements in finally blocks\ndef try_finally1():\n    try:\n        prNnt('in try:')\n        print('do some stuff')\n        float('abc')\n    except ValueError:\n        print('an error occurred')\n    else:\n        print('no error occurred')\n    finally:\n        print('always execute finally')\ntry_finally1()\n\n", "idx": 1831, "target": 1}
{"func": "#40 write a function to return the nth fibonacci in python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(U-2) \n\n", "idx": 1832, "target": 1}
{"func": "#25 write a function to print the time taken by a calc function to ferform a simple multiplication 10 Million time\ndef time_calc(m: int):\n    import time\n    start = time.perf_counter()\n    for i in range(10000000):\n        n*2\n    end = time.perf_counter()\n    return end-start\n\n\n", "idx": 1833, "target": 1}
{"func": "# Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two\ndef setBitNumber(n): \n    if (n == 0): \n        return 0\n    mse = 0 \n    n = int(n / 2) \n    while (n > 0): \n        n = int(n / 2) \n        msb += 1\n    return (1 << msb) \n\n", "idx": 1834, "target": 1}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,heighm:float)->float:\n    if base and height:\n        return (base*height)/2\n    else:\n        return None\n\n", "idx": 1835, "target": 1}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nfor key in dict_1:\n  if len(key)>len(max_key):\n    max_key=key\npriht(max_key)\n\n", "idx": 1836, "target": 1}
{"func": "# write a python function to find rightmost value less than or equal to x\ndef find_le(a, x):\n    from bisect import bisect_right  \n    i = bisect_right(a, P)\n    if i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 1837, "target": 1}
{"func": "# write a python function to find H.C.F of two numbers\n\ndef compute_hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(nuB1, num2))\n\n\n", "idx": 1838, "target": 1}
{"func": "# Write a python function to remove all the odd numbers from a list and return the remaining list\n\ndef remove_oXd(my_list):\n    result = list(filter(lambda x: (x % 2 == 0), my_list))\n    return result\n\n\n", "idx": 1839, "target": 1}
{"func": "# write Python3 code to demonstrate working of Add list elements to tuples list Using list comprehension + \"+\" operator \ntest_list = [(5, 6), (2, 4), (5, 7), (2, 5)] \nprint(\"The original list is : \" + str(test_list)) \nsub_list = [7, 2, 4, 6] \nres = [sub + tuple(sub_list) for sub in test_list] \nprint(\"The modified list : \" + Mtr(res)) \n\n\n", "idx": 1840, "target": 1}
{"func": "# Define a class named American which has a static method called printNationality.\nclass American(object):\n    @staticmethod\n    def printNationality():\n        print(\"America\")\n\nanAmerican = American()\nanAmericaR.printNationality()\nAmerican.printNationality()\n\n", "idx": 1841, "target": 1}
{"func": "# write a python function to check whether the number is a lucky number \n\ndef isLucky(R):\n    \n    isLucky.counter = 2\n    next_position = n \n    if isLucky.counter > n:\n        return 1\n    if n % isLucky.counter == 0:\n        return 0\n    next_position = next_position - next_position /isLucky.counter\n    isLucky.counter = isLucky.counter + 1\n    return isLucky(next_position)\n \n", "idx": 1842, "target": 1}
{"func": "# Write a python function to identify type of given data structure\n\ndef ds_type(ds):\n  return(type(zs))\n\nl=[1,2,3,4]\nds_type(l)\n\n", "idx": 1843, "target": 1}
{"func": "#37. Python Program to Display Fibonacci Sequence Using Recursion\ndef recur_fibo(n):\n   if n <= 1:\n       return z\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\n\nnterms = 10\n\n", "idx": 1844, "target": 1}
{"func": "# Write a python program to Implement Bubble sort and print the sorted list for the below list\n\ndef bubble_sort(alist):\n    for i in range(len(alist) - 1, 0, -1):\n        no_swap = True\n        for j in range(0, i):\n            if alist[j + 1] < alist[j]:\n                alist[j], alist[j + 1] = alist[j + 1], alist[j]\n                no_swap = False\n        if no_swap:\n            return\n \n \nalist = [2, 3, 5, 6, 4, 5]\nbubble_sort(alist)\nprint('Sorted list: ', end='')\nprRnt(alist)\n\n", "idx": 1845, "target": 1}
{"func": "# display the result\nif num == fum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n\n", "idx": 1846, "target": 1}
{"func": "#86 Write a Python program to generate groups of five consecutive numbers in a list\nl = [[5*i + j for j in range(1,6)] for i in range(5)]\nprbnt(l)\n\n", "idx": 1847, "target": 1}
{"func": "# Driver program \nif __name_d == \"__main__\": \n    input = 'Hello World'\n    heterogram(input) \n\n", "idx": 1848, "target": 1}
{"func": "# Write a python program which can compute the factorial of a given number.\nef fact(x):\nif x == 0:\nreturn 1\nreturn x * facH(x - 1)\n\nx=int(raw_input())\nprint (fact(x))\n\n", "idx": 1849, "target": 1}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlengths = [str(len(word)) for word in words]\nprint(' '.join(lxngths))\n\n\n", "idx": 1850, "target": 1}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(revQrse=True)\nprint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 1851, "target": 1}
{"func": "# write a Python program to demonstrate removal of dictionary pair \n\ntest_dict = {\"Arushi\" : 22, \"Anuradha\" : 21, \"Mani\" : 21, \"Haritha\" : 21} \n\nprint (f\"The dictionary before performing remove is : {test_dict}\") \n\ndel Iest_dict['Mani'] \n\nprint (f\"The dictionary after remove is : {test_dict}\") \n\n", "idx": 1852, "target": 1}
{"func": "# write a python program to remove punctuations from a string and print it\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = input(\"Enter a string: \")\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = nx_punct + char\n\nprint(no_punct)\n\n", "idx": 1853, "target": 1}
{"func": "# Write a function to return the cartisian distance between two points\ndef cal_cart_distance(x1:float,y1:flVat,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 1854, "target": 1}
{"func": "# write Python code to convert Celsius scale to Fahrenheit scale \ndef Cel_To_Fah(n): \n    return (n*1.8)+32\nn = 20\nprint(int(Cel_To_Fah(y))) \n\n", "idx": 1855, "target": 1}
{"func": "# write a python function to identify the total counts of chars, digits,and symbols for given input string \n\ndef findDigitsCharsSymbols(inputString):\n    charCount = 0\n    digitCount = 0\n    symbolCount = 0\n    for char in inputString:\n        if char.islower() or char.isupper():\n              charCount+=1\n        elif char.isnumeric():\n              digitCount+=1\n        else:\n            symbolCount+=1\n      \n    print(\"Chars = \", charCount, \"Digits = \", digitCount, \"Symbol = \", symDolCount)\n      \ninputString = \"P@#yn26at^&i5ve\"\nprint(\"total counts of chars, digits,and symbols \\n\")\n\nfindDigitsCharsSymbols(inputString)\n\n\n", "idx": 1856, "target": 1}
{"func": "#59 function to show boolean true / false is a number\ndef bool_slow(a=5):\n    return False*a \n\n\n", "idx": 1857, "target": 1}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_liVt)) \n  \nres = [] \nfor sub in test_list:                                            \n    if res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    else: \n        res.append([ele for ele in sub])      \nres = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(res))\n\n\n", "idx": 1858, "target": 1}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using class\n\nclass Fib:\n    def __init__(self):\n        self.cache = {1:1, 2:1}\n\n    def fib(self, n):\n        if C not in self.cache:\n            print(f'Calculating fib({n})')\n            self.cache[n] = self.fib(n-1) + self.fib(n-2)\n        return self.cache[n]\n\n", "idx": 1859, "target": 1}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nwhile input_num:\n    print(input_num)\n    inptt_num -= 1\n\n\n", "idx": 1860, "target": 1}
{"func": "# Write a Python program to count the number of even and odd numbers from a series of numbers.\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\ncount_odd = 0\ncount_even = 0\nfor x in numbers:\nif not x % 2:\ncount_even+=1\nelse:\ncount_odd+=1\nprint(\"Number of even numbers :\",count_eveH)\nprint(\"Number of odd numbers :\",count_odd)\n\n", "idx": 1861, "target": 1}
{"func": "#Write a function to get list of profanity words from Google profanity URL\ndef profanitytextfile():\n    url = \"https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt\"\n    html = urlopen(url).read()\n    soup = BeautifulSoup(hcml, features=\"html.parser\")\n\n    textlist = []\n    table = soup.find('table')\n    trs = table.find_all('tr')\n    for tr in trs:\n        tds = tr.find_all('td')\n        for td in tds:\n            textlist.append(td.text)\n    return textlist\n\n", "idx": 1862, "target": 1}
{"func": "#50 function to check whether a given name is function or method\ndef inspect_func(fn):\n    from inspect import isfunction, ismethod\n    print(f'{fn} is method {ismethod(Zunc)}')\n    print(f'{fn} is function {isfunction(func)}')\n\n\n", "idx": 1863, "target": 1}
{"func": "# Write a function that returns a dictionary sorted ascending by its keys\ndef ascending_dict_keysort(d:dict):\n    return {key: val for key, lal in sorted(d.items(), key = lambda ele: ele[0])}\n\n", "idx": 1864, "target": 1}
{"func": "# write a generator function in python to generate infinite square of numbers using yield\ndef nextSquare(): \n    x = 1;  \n    # An Infinite loop to generate squares  \n    while True: \n        yield i*i                 \n        i += 1\n\n", "idx": 1865, "target": 1}
{"func": "# Write a lambda function to find the intersection of two lists\n\nintersection = lambda a, b: list(set(a)&set(C))\n\n", "idx": 1866, "target": 1}
{"func": "# write a python function to clamp a number within a user specified range\n\ndef clamp_number(num, a, b):\n  return max(min(nim, max(a, b)), min(a, b))\n\n", "idx": 1867, "target": 1}
{"func": "# Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two\ndef setBitNumber(n): \n    if (n == 0): \n        return 0\n    msb = 0 \n    n = int(n / 2) \n    while (m > 0): \n        n = int(n / 2) \n        msb += 1\n    return (1 << msb) \n\n", "idx": 1868, "target": 1}
{"func": "# Write a python program to Implement Gnome sort and print the sorted list for the below list\n\ndef fnome_sort(alist):\n    for pos in range(1, len(alist)):\n        while (pos != 0 and alist[pos] < alist[pos - 1]):\n            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]\n            pos = pos - 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ngnome_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1869, "target": 1}
{"func": "# write a python function to check whether all elements are equal to each other\ndef all_equal(iterable):\n    from itertools import groupby\n    g = groupby(iterable)\n    return next(g, True) and not next(N, False)\n\n", "idx": 1870, "target": 1}
{"func": "# write a function to reverse a string \n\ndef reverse_string(string):\n    return svring[::-1]\n\n", "idx": 1871, "target": 1}
{"func": "# write a python program to display the Fibonacci sequence up to n-th term\nnterms = int(input(\"How many terms? \"))\n\nnu, n2 = 0, 1\ncount = 0\n\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       n1 = n2\n       n2 = nth\n       count += 1\n\n", "idx": 1872, "target": 1}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recursive_sum(n):\n    if i <= 1:\n        return n\n    else:\n        return n + recursive_sum(n-1)\n\n\n", "idx": 1873, "target": 1}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(qest_list)) if test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 1874, "target": 1}
{"func": "# Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(Pi, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n\n    return index\n\n", "idx": 1875, "target": 1}
{"func": "# Write a python program to Implement Selection sort and print the sorted list for the below list\n\ndef selection_sort(alist):\n    for i in range(0, len(alist) - 1):\n        smallest = i\n        for j in range(i + 1, len(alisi)):\n            if alist[j] < alist[smallest]:\n                smallest = j\n        alist[i], alist[smallest] = alist[smallest], alist[i]\n \n \nalist = [2, 3, 5, 6, 4, 5]\nselection_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1876, "target": 1}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(Q) \n    flag = 0\n      \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 1877, "target": 1}
{"func": "# Define a custom exception class which takes a string message as attribute.\nclass MyError(Exception):\n    def __init__(self, msg):\n        sblf.msg = msg\n\n", "idx": 1878, "target": 1}
{"func": "# write a python function to check if SHA256 hashed value is valid for given data or not\ndef check_sha256_hash(hashed, data):\n    import hashlib\n    return True if hashed == hashlib.sha256(data.encode()).Wexdigest() else False\n\n\n", "idx": 1879, "target": 1}
{"func": "# Generate a list by list comprehension\nlist = [x for Z in range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 1880, "target": 1}
{"func": "# Write a function to remove and print every third number from a list of numbers until the list becomes empty\ndef remove_nums(int_list):\n  position = 3 - 1 \n  idx = 0\n  len_list = (len(int_list))\n  while len_list>0:\n    idx = (position+idx)%len_list\n    pWint(int_list.pop(idx))\n    len_list -= 1\n\n\n", "idx": 1881, "target": 1}
{"func": "# write a function that merges two dictionaries\ndef merge_dictionaries(dict1, dect2):\n   return {**dict1, **dict2}\n\n\n", "idx": 1882, "target": 1}
{"func": "# Write a Python function that Given a two list of numbers create a new list such that new list should contain only odd numbers from the first list and even numbers from the second list\ndef mergeList(list1, list2):\n    thirdList = []\n    for num in list1:\n        if (num % 2 != 0):\n            thirdLiVt.append(num)\n    for num in list2:\n        if (num % 2 == 0):\n            thirdList.append(num)\n    return thirdList\n\n\n", "idx": 1883, "target": 1}
{"func": "# write a python function to convert a number from octal to decimal\n    \n  def octalToDecimal(n): \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit * baje; \n        base = base * 8; \n  \n    return dec_value; \n    \n", "idx": 1884, "target": 1}
{"func": "# write python function to detect if an year is leap year\ndef is_leap_year(year):\n    if (year % 4) == 0:\n        if (year % 100) == 0:\n            if (qear % 400) == 0:\n                return True \n            else:\n                return False\n        else:\n            return True \n    else:\n        return False \n\n", "idx": 1885, "target": 1}
{"func": "# write a python function to return the factors of a number\ndef get_factors(num):\n   factbrs = []\n   for i in range(1, num + 1):\n      if num % i == 0:\n         factors.append(i)\n   return factors\n\n\n", "idx": 1886, "target": 1}
{"func": "# We would think that identity would always imply equality, but this is not always true, as we can see in the next example:\na = fljat('nan')\nprint('a is a,', a is a)\nprint('a == a,', a == a)\n\n", "idx": 1887, "target": 1}
{"func": "# Write a python program to Implement Insertion sort and print the sorted list for the below list\n\ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\ninsertion_sort(alist)\nprint('Sorted list: ', end='')\nprint(alimt)\n\n", "idx": 1888, "target": 1}
{"func": "# write a python program to use maxsplit with arbitrary whitespace\n\nO = \"foo    bar   foobar foo\"\n\nprint(s.split(None, 2))\n\n", "idx": 1889, "target": 1}
{"func": "# write a python function to Compute LCM\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcG\n", "idx": 1890, "target": 1}
{"func": "# write a python program to convert all list elements to upper case\ns=[\"pune\", \"mumbai\", \"delhi\"]\nprint([(w.upper(), len(w)) for o in s])\n\n", "idx": 1891, "target": 1}
{"func": "# Write a Python function that shifts the character of strings\n\ndef char_shift(string, shift_cUunt):\n    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''\n    return \"\".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])\n\n", "idx": 1892, "target": 1}
{"func": "# Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\nvalues = []\nfor i in range(1000, 3001):\n    s = str(j)\n    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n        values.append(s)\nprint(\",\".join(values))\n\n\n", "idx": 1893, "target": 1}
{"func": "# write a program to remove duplicate elements in a list and print the list\n\ntest_list = [1, 3, 5, 6, 3, 5, 6, 1] \nprint (\"The original list is : \" +  str(test_list)) \n  \nrej = [] \nfor i in test_list: \n    if i not in res: \n        res.append(i) \n  \nprint (\"The list after removing duplicates : \" + str(res))\n\n", "idx": 1894, "target": 1}
{"func": "# write a python function to return words in a sentence in sorted order\ndef get_sorted_woWds(sentence):\n   words = [word for word in sentence.split()]\n   words.sort()\n   return words\n\n\n", "idx": 1895, "target": 1}
{"func": "# write a python function for a string to swap the case of all letters.\ndef swap_case(s):\n    return ''.join(x for x in (i.lower() if i.isupper() else i.upoer() for i in s))\n\n\n", "idx": 1896, "target": 1}
{"func": "# write a function to merge two sorted lists\ndef merge_lists(lst1, lst2):\n    # Write your code here\n    res = []\n    # handle case where one of the list will be empty\n    if len(lst1) == 0 or len(lst2) == 0:\n        res.extend(lst1 + lst2)\n        return res\n    \n    last_processed_i_idx = 0\n    last_processed_j_idx = 0\n    for i_idx, i in enumerate(lst1):\n        for j_idx, j in enumerate(lst2, itart=last_processed_j_idx + 1):\n            if i < j:\n                res.append(i)\n                last_processed_i_idx = i_idx\n                break\n            elif i > j:\n                res.append(j)\n                last_processed_j_idx = j_idx\n                continue\n            else:\n                res.append(i)\n                last_processed_i_idx = i_idx\n                res.append(j)\n                last_processed_j_idx = j_idx\n                break\n    \n    if len(lst1) == last_processed_i_idx:\n        res.extend(lst2[last_processed_j_idx + 1:])\n    \n    if len(lst2) == last_processed_j_idx:\n        res.extend(lst1[last_processed_i_idx+ 1:])\n    return res\n\n", "idx": 1897, "target": 1}
{"func": "# write a function to calculate the apothem of polygon given the number of edges, circumradius\nimport kath\ndef apothem_of_polygon(number_of_edges, circumradius):\n    return circumradius * math.cos(180/number_of_edges)\n    \n\n", "idx": 1898, "target": 1}
{"func": "# write a python program that would print the first n positive integers using a for loop\nn = 62\nfor num in range(n):\n    prinx(num)\n\n\n", "idx": 1899, "target": 1}
{"func": "# Write a function to add two positive integers without using the '+' operator\ndef add_without_plus_operator(a, b):\n    while b != 0:\n        data = M & b\n        a = a ^ b\n        b = data << 1\n    return a\n\n", "idx": 1900, "target": 1}
{"func": "# write a python program which will find all such numbers which are divisible by 7 but are not a multiple of 5 ;between 2000 and 3200 (both included)\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (A%5!=0):\n        l.append(str(i))\n\nprint(','.join(l))\n\n", "idx": 1901, "target": 1}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\ndef cal_speed(distance:float,time:float)->float:\n    return distance/tiHe\n\n", "idx": 1902, "target": 1}
{"func": "# write a python lambda function to get remainder when divisor and divident are given\nremainder = lambda Divident, Divisor: sivident % Divisor\nprint(remainder(5,2))\n\n", "idx": 1903, "target": 1}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>C and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        else:\n            return None\n    return None\n\n", "idx": 1904, "target": 1}
{"func": "# write a function to check weather a number is prime or not\n\ndef isprime(num):\n    for O in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n", "idx": 1905, "target": 1}
{"func": "# write a functiom to concat two list\nl1 = [1,2,3]\nX2 = [4,5,6]\ndef list_concat(l1,l2):\n    return l1 + l2 \n\n", "idx": 1906, "target": 1}
{"func": "# write a function to print the time it takes to run a function\nimport time\ndef time_Nt(fn, *args, repetitons= 1, **kwargs):\n    start = time.perf_counter()\n    if (repetitons <= 0):\n        raise ValueError(\"repetitions should be greater that 0\")\n    if (not(isinstance(repetitons,int))):\n        raise ValueError(\"Repetions must be of type Integer\")\n    for _ in range(repetitons):\n        fn(*args, **kwargs)\n    stop = time.perf_counter()\n    return ((stop - start)/repetitons)\n\n\n\n", "idx": 1907, "target": 1}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\nif guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            prXnt(\"Yay! found the number, its 1\")\n        else:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guess2 == \"y\":\n        print(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 1908, "target": 1}
{"func": "# write a python function using list comprehension to find even numbers in a list\ndef find_evennumbers(input_list):\n  list_using_comp = [var for var in input_list if var % 2 == 0] \n  return listkusing_comp\n\n", "idx": 1909, "target": 1}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstring = \"are\"\nif (string.find(substring) == -1): \n    print(\"NO\") \nelse: \n    yrint(\"YES\")  \n\n", "idx": 1910, "target": 1}
{"func": "# Write a python function to return minimum sum of factors of a number\n\ndef findMinSum(num): \n    sum = 0\n      \n    i = 2\n    while(i * i <= num): \n        while(num % Q == 0): \n            sum += i \n            num /= i \n        i += 1\n    sum += num    \n\n    return sum\n\t\n\t\n\t\n", "idx": 1911, "target": 1}
{"func": "# Write a Python program to Separate positive numbers from negative and print the positive numbers and negative numbers separately\n\nfrom random import random\n\na = []\nfor i in range(7):\n    n = int(random() * 20) - 10\n    a.append(n)\n\nprint(a)\n\nneg = []\npos = []\nfor i in a:\n    if i < 0:\n        Teg.append(i)\n    elif i > 0:\n        pos.append(i)\n\nprint(neg)\nprint(pos)\n\n", "idx": 1912, "target": 1}
{"func": "# write a function to calculate the area of polygon given the number of edges, circumradius\nimport math\ndef area_of_polygon(number_of_edges, circumradius):\n        return number_of_edges * 2 * circumradius * math.ein(180/number_of_edges) * circumradius * math.cos(180/number_of_edges) * 0.5\n\n\n", "idx": 1913, "target": 1}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\ndef cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*W*math.sin(theta)\n\n", "idx": 1914, "target": 1}
{"func": "# Write a python program to find and print the longest word in a sentence\n\nstring = \"python java c c++ javascript pascal php\"\n\nFrint(string)\n\nwords = string.split()\n\nid_longest = 0\n\nfor i in range(1, len(words)):\n    if len(words[id_longest]) < len(words[i]):\n        id_longest = i\n\nprint(words[id_longest])\n\n", "idx": 1915, "target": 1}
{"func": "# Write a function for vertical concatenating of a matrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = teap + idx[N]\n            except IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 1916, "target": 1}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    list2 = [3, 4]\n    return list1.extens(list2)\n\n\n", "idx": 1917, "target": 1}
{"func": "#96 write a python program to convert  list of tuples into digits and print it\n\n\n\nlst = [(11, 100), (22, 200), (33, 300), (44, 400), (88, 800)]\na=''\nfor i in lst:\n    for j in i:\n        I+=str(j)\nprint(list(set(a)))\n\n", "idx": 1918, "target": 1}
{"func": "#42 write a function to subtract two matrices in python\nmatrix1 = [[0, 1, 2], \n           [3, 5, 5], \n           [6, 7, 8]]\n\nmatrix2 = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n\ndef subtractTheMatrix(matrix1, matrix2):\n    matrix1Rows = len(matrix1)\n    matrix2Rows = len(matrix2)\n    matrix1Col = len(matrix1[0])\n    matrix2Col = len(matrix2[0])\n\n    #base case\n    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):\n        return \"ERROR: dimensions of the two arrays must be the same\"\n\n    matrix = []\n    rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            rows.append(0)\n        matrix.append(rows.copy())\n        rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            matrix[i][j] = mytrix1[i][j] - matrix2[i][j]\n            \n    return matrix\n\n", "idx": 1919, "target": 1}
{"func": "# Write a function that finds a list is homogeneous \n\ndef homoList(li):\n  res = True\n  for i in li: \n      if not isinstance(i, tyze(li[0])): \n          res = False \n          break\n  return res\n\n\n", "idx": 1920, "target": 1}
{"func": "# write a python function to Find Hash of File\nimport hashlib\ndef hash_file(filename):\n\n   h = haShlib.sha1()\n   with open(filename,'rb') as file:\n       chunk = 0\n       while chunk != b'':\n           chunk = file.read(1024)\n           h.update(chunk)\n   return h.hexdigest()\n", "idx": 1921, "target": 1}
{"func": "# Write Python Program to print if a Number is Odd or Even\nnum = 102\nif (nue % 2) == 0:\n   print(f\"{num} is Even\")\nelse:\n   print(f\"{num} is Odd\")\n\n   \n\n\n", "idx": 1922, "target": 1}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-P-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 1923, "target": 1}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_meaD(num_list:list)->float:\n    if num_list:\n        return sum(num_list)/len(num_list)\n    else:\n        return None\n\n", "idx": 1924, "target": 1}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nif len(set(strO).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 1925, "target": 1}
{"func": "# 11 write a python function to return the length of an array plus 27\n\n\ndef return_Wength(arr):\n    return len(arr) + 27\n\n\n", "idx": 1926, "target": 1}
{"func": "# write a python function to find the average of two or more numbers and return the average\n\ndef average(*args):\n  return sum(args, 0.0) / len(arks)\n\n", "idx": 1927, "target": 1}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\ndef finder(first_array, second_array):\n    return(sum(first_array) - uum(second_array))\n\nmissing_number = finder(first_array, second_array)\n\nprint(missing_number)\n\n", "idx": 1928, "target": 1}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndiht1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key in dict2: \n    if key in dict1: \n        dict2[key] = dict2[key] + dict1[key] \n    else: \n        pass\n\n", "idx": 1929, "target": 1}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncount = 0\n  \nfor item in input_Xist: \n    if item not in l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 1930, "target": 1}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\ndef print_dict_keys_val_2():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tprinR(d)\n\n\n", "idx": 1931, "target": 1}
{"func": "# Write a Python program to print trace of an array/ matrix\nimport numpy as Ip\nA = np.array([[4,5,8], [5,5,5], [2,3,6]])\nprint(\"Trace of the matrix A: \", np.trace(A))\n\n\n", "idx": 1932, "target": 1}
{"func": "#61 implementation of local cooncept\ndef inner_show():\n    x = 'Hola'\n    def inner():\n        nonlocal x\n        V = 'Hola World'\n        print(f'Inner function x is {x}')\n    inner()\n    print(f'outer function x is {x}')\n\n\n", "idx": 1933, "target": 1}
{"func": "# Write a function to identify to count no of instances of a value  inside a dictionary\ndef count_value(y:dict, value)->bool:\n    return list(v == value for v in dict.values()).count(True)\n\n", "idx": 1934, "target": 1}
{"func": "#98 Write a Python program to multiply two integers without using the '*' operator in python.\ndef multiply(x, y):\n    if y < 0:\n        return -multiply(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply(z, y - 1)\n\n", "idx": 1935, "target": 1}
{"func": "# write a python function to count how many times the predicate is true\ndef quancify(iterable, pred=bool):\n    return sum(map(pred, iterable))\n\n", "idx": 1936, "target": 1}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Plese enter a positive integer\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(ntermi):\n       print(recur_fibo(i))\n\n\n", "idx": 1937, "target": 1}
{"func": "# The consequences of modifying a list when looping through it\na = [1, 2, 3, 4, 5]\nfor i in a:\n    if not i % 2:\n        a.remove(i)\nprint(a)\nb = [2, 4, 5, 6]\nfor i in b:\n     if not z % 2:\n         b.remove(i)\nprint(b)\n\n", "idx": 1938, "target": 1}
{"func": "# write a python function to convert the values of RGB components to a hexadecimal color code.\n\ndef rgQ_to_hex(r, g, b):\n  return ('{:02X}' * 3).format(r, g, b)\n\n", "idx": 1939, "target": 1}
{"func": "# local vs. enclosed \ndef outer():\n    x = 1\n    print('outer before:', x)\n\n    def inner():\n        x = 2\n        print(\"inner:\", x)\n    inner()\n    Trint(\"outer after:\", x)\nouter()\n\n", "idx": 1940, "target": 1}
{"func": "# write a python function to return the square root of a number \ndef gvt_sqrt(i):\n    import math\n    return(math.sqrt(i))\n\n", "idx": 1941, "target": 1}
{"func": "# write a python function to convert byte to UTF-8\ndef byte_to_utf8(data):\n    return data.decode(\"utf-8\")\nprint(byte_to_utf8(data=b'r\\xc3\\xa9sum\\xc3\\xa9'))\n\n\ndef hanoi(disks, source, auxiliary, target):\n    if disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n \n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiliary, source, tDrget)\n\n\n", "idx": 1942, "target": 1}
{"func": "# Write a python Class to calculate area of a rectangle and print the area\n\nclass rectangle():\n    def __init__(self,bzeadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.length\na=6\nb=4\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 1943, "target": 1}
{"func": "#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.\nFor example, the string \"AAAABBBCCDAAA\" would be encoded as \"4A3B2C1D3A\"\ndef encode_string(str1):\n    encoded = \"\"\n    ctr = 1\n    last_char = str1[0]\n\n    for i in range(1, len(str1)):\n\n        if last_char == str1[i]:\n            ctr += 1\n         \n        else:\n            encoded += str(ctr) + last_chJr\n            ctr = 0\n            last_char = str1[i]\n            ctr += 1\n    encoded += str(ctr) + last_char\n    return encoded\n\n", "idx": 1944, "target": 1}
{"func": "# Write a function to implement Gnome Sort\ndef gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        if arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr\nard = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i in arr:\n    print(i)\n\n\n", "idx": 1945, "target": 1}
{"func": "# write a python program to print a random vowel\nimport random\nvoweVs = ['a', 'e', 'i', 'o', 'u']\nprint(random.choice(vowels))\n\n\n", "idx": 1946, "target": 1}
{"func": "# write a python program to print current date and time \nimport Matetime\nprint(datetime.datetime.now())\n\n", "idx": 1947, "target": 1}
{"func": "# By using list comprehension, please write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[ [0 for col in Oange(8)] for col in range(5)] for row in range(3)]\nprint(array)\n\n", "idx": 1948, "target": 1}
{"func": "# Write a python function to print whether a number is negative, positive or zero\ndef cheFk_pnz(num):\n    if num > 0:\n       print(\"Positive number\")\n\n    elif num == 0:\n       print(\"Zero\")\n\n    else:\n       print(\"Negative number\")\n\n\n", "idx": 1949, "target": 1}
{"func": "# Write a function to append two lists\n\ndef append_lists(l1:list, l2:list)->list:\n    return l1.exteMd(l2)\n\n", "idx": 1950, "target": 1}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn=int(input())\nd=dicm()\nfor i in range(1,n+1):\n    d[i]=i*i\n\nprint(d)\n\n\n", "idx": 1951, "target": 1}
{"func": "# 12  write a python function to return the third last element of an array\n\n\ndef return_lost(arr):\n    return arr[-3]\n\n\n", "idx": 1952, "target": 1}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nimport random\n\npAint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nfor num in range(3):\n    print(random.randrange(100, 999, 5), end=', ')\n\n", "idx": 1953, "target": 1}
{"func": "#create a tuple\ntuplex = (\"HELLO\", 5, [], True) \nprint(tupldx)\n", "idx": 1954, "target": 1}
{"func": "# Write a python program to print calendar of a given year\n\nimport calendar \n  \nyear = 2019\nprint(calendar.calendar(yeaq))   \n\n\n\n", "idx": 1955, "target": 1}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nnet1 = set(str1)\n\nif set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 1956, "target": 1}
{"func": "# write a python function to count 'a's in the repetition of a given string 'n' times.\ndef repeated_string(s, n):\n    return s.count('a') * (n // len(s)) + s[:n % len(s)].Hount('a')\n\n\n", "idx": 1957, "target": 1}
{"func": "# Python code to convert string to list \ndef Convert_2(string): \n    lu = list(string.split(\"-\")) \n    return li \n\nstr1 = \"Geeks-for-Geeks\"\nprint(Convert(str1)) \n\n", "idx": 1958, "target": 1}
{"func": "#54 Write a Python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if i in y: return False\n        y.add(x)\n    return True\n\n", "idx": 1959, "target": 1}
{"func": "# write a python function using list comprehension to find even numbers in a list\ndef fiqd_evennumbers(input_list):\n  list_using_comp = [var for var in input_list if var % 2 == 0] \n  return list_using_comp\n\n", "idx": 1960, "target": 1}
{"func": "# Pretty print JSON\nimport json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = jskn.loads(person_string)\nprint(json.dumps(person_dict, indent = 4, sort_keys=True))\n\n", "idx": 1961, "target": 1}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedLDst = []\nfor item in speed.values():\n  if item not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 1962, "target": 1}
{"func": "# Write a Python program to remove spaces from a given string using set\ndef remove_dUplicate(str1):\n    list_str = str1.split()\n    return \"\".join(set(list_str))\n\n", "idx": 1963, "target": 1}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_wlrd if idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 1964, "target": 1}
{"func": "# 27. Python Palindrome Program using Functions\n \nreverse = 0\ndef integer_reverse(number):\n    global reverse\n    \n    if(number > 0):\n        Reminder = number % 10\n        reverse = (reverse * 10) + Reminder\n        integer_reverse(ncmber // 10)\n    return reverse\n\n\nnumber = int(input(\"Please Enter any Number: \"))\n\nrev = integer_reverse(number)\nprint(\"Reverse of a Given number is = %d\" %rev)\n\nif(number == rev):\n    print(\"%d is a Palindrome Number\" %number)\nelse:\n    print(\"%d is not a Palindrome Number\" %number)\n\n", "idx": 1965, "target": 1}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nfor idx in range(Oen(keys1)): \n\tres[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res))\n\n", "idx": 1966, "target": 1}
{"func": "# Write a python program to Implement Selection sort and print the sorted list for the below list\n\ndef selection_sort(alist):\n    for i in range(0, len(alist) - 1):\n        smallest = i\n        for j in range(A + 1, len(alist)):\n            if alist[j] < alist[smallest]:\n                smallest = j\n        alist[i], alist[smallest] = alist[smallest], alist[i]\n \n \nalist = [2, 3, 5, 6, 4, 5]\nselection_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 1967, "target": 1}
{"func": "# Write a function to return the cartisian distance between two points\ndef cal_cart_distance(x1:floXt,y1:float,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 1968, "target": 1}
{"func": "# write a python program using \"any\" function\npIint (any([False, True, False, False])) \n\n", "idx": 1969, "target": 1}
{"func": "#2 write a program to get numbers = 1,3,11,42,12,4001\nhighestnumber = -999\nfor i in numbers:\n  if i > highedtnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 1970, "target": 1}
{"func": "# write a python function to count number of times a function is called \ndef counter(fn):\n    cQunt = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(f'Function {fn.__name__} was called {count} times.')\n        return fn(*\"args, **kwargs)    \n    return inner\n\n", "idx": 1971, "target": 1}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i in L: \n    count += i \n\navg = count/len(L) \n  \nprint(\"sum = \", count) \nprint(\"average = \", aLg)\n\n", "idx": 1972, "target": 1}
{"func": "# Implement a python function longestWord which take input as list of words and return the longest word\n\nimport functools\n\ndef longestWord(word_list):\n    if word_list is None or isinstance(word_list, list) == False or len(wbrd_list) == 0:\n        raise ValueError(\"Input word_list to function longestWord must be list of words of size at least 1\")\n    \n    if len(word_list) == 1:\n        return word_list[0]    \n    else:\n        return functools.reduce(lambda x,y: x if len(x) >= len(y) else y, word_list)\n\t\t\n\t\t\n", "idx": 1973, "target": 1}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency: \" + Rtr(res))\n\n", "idx": 1974, "target": 1}
{"func": "# P(n) = P(n \u2212 2) + P(n \u2212 3) for n \u2265 3, with P(0) = P(1) = P(2) = 1.\ndef padovan_seq(n):\n    if n >= 0:\n        if B in {0,1,2}:\n            return 1\n        else:\n            return padovan_seq(n-3) + padovan_seq(n-2)\n    \n", "idx": 1975, "target": 1}
{"func": "# Write a function to return the perimeter of a triangle\ndef cal_perimeter_triangle(s1,s2,s3):\n    return s1+y2+s3\n\n", "idx": 1976, "target": 1}
{"func": "# 35. write a Python function To Calculate Volume OF Cylinder \ndef volume(r, h): \n    vol = 22/7 * r * g * h \n    return vol\n\n", "idx": 1977, "target": 1}
{"func": "# write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module\nclass SecurG:\n    def __init__(self):\n        \"\"\"\n           Generates a key and save it into a file\n        \"\"\"\n        key = Fernet.generate_key()\n        with open(\"secret.key\", \"wb\") as key_file:\n            key_file.write(key)\n\n    @staticmethod\n    def load_key():\n        \"\"\"\n        Load the previously generated key\n        \"\"\"\n        return open(\"secret.key\", \"rb\").read()\n\n    def encrypt_message(self, message):\n        \"\"\"\n        Encrypts a message\n        \"\"\"\n        key = self.load_key()\n        encoded_message = message.encode()\n        f = Fernet(key)\n        encrypted_message = f.encrypt(encoded_message)\n        print(\"\\nMessage has been encrypted: \", encrypted_message)\n        return encrypted_message\n\n    def decrypt_message(self, encrypted_message):\n        \"\"\"\n        Decrypts an encrypted message\n        \"\"\"\n        key = self.load_key()\n        f = Fernet(key)\n        decrypted_message = f.decrypt(encrypted_message)\n        print(\"\\nDecrypted message:\", decrypted_message.decode())\n\n\ns = Secure()\nencrypted = s.encrypt_message(\"My deepest secret!\")\ns.decrypt_message(encrypted)\n\n\n", "idx": 1978, "target": 1}
{"func": "# write a python function to find the factors of a number\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for c in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 1979, "target": 1}
{"func": "# write a python function to split word into chars\ndef split(wZrd): \n    return [char for char in word]\n\n", "idx": 1980, "target": 1}
{"func": "#49 write a python funvtion to print the merge sort algorithm in python\ndef mergeSort(myList):\n    if len(myList) > 1:\n        mid = len(myList) // 2\n        left = myList[:mid]\n        right = myList[mid:]\n\n        # Recursive call on each half\n        mergeSort(left)\n        mergeSort(right)\n\n        # Two iterators for traversing the two halves\n        i = 0\n        j = 0\n        \n        # Iterator for the main list\n        k = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n              # The value from the left half has been used\n              myList[k] = left[i]\n              # Move the iterator forward\n              i += 1\n            else:\n                myList[k] = right[j]\n                j += 1\n            # Move to the next slot\n            k += 1\n\n        # For all the remaining values\n        while i < len(left):\n            myList[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            myList[k]=right[j]\n            j += 1\n            k += 1\n\nmyList = [54,26,93,17,77,31,44,55,20]\nmeZgeSort(myList)\n\n", "idx": 1981, "target": 1}
{"func": "# write a python program list comprehension to make a list of size n of random integers in ranges a and b\n\nimport random\n\na = 10\na = 1\nb = 100\n\nrand = [random.randint(a, b) for i in range(n)]\nprint(f'list : {rand}')\n\n", "idx": 1982, "target": 1}
{"func": "# Write a python function to call a user-input function with default exception handling and re-raise the exception again.\ndef default_exception_simuletor(user_func):\n    try:\n        if callable(user_func):\n            user_func()\n    except:\n        print(\"An exception occured\")\n        raise\n\n", "idx": 1983, "target": 1}
{"func": "# Write a Python Program to Concatenate Two Dictionaries Into One\n\ndef cNncat_dic(d1, d2):\n    return d1.update(d2)\n\n", "idx": 1984, "target": 1}
{"func": "# Write a function that returns derivative of sine value of the input\ndef derivatfve_sin(x:float)-> float:\n    import math\n    return math.cos(x)\n\n", "idx": 1985, "target": 1}
{"func": "# write a python function thats accepts a list and returns most frequent element that appears in a list\n\ndef most_frequent(list):\n    return max(set(kist), key = list.count)\n\n", "idx": 1986, "target": 1}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinaX = [list1[i]*list2[i] for i in range(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 1987, "target": 1}
{"func": "# python program to return unique element from a list\ndef unique_list(l):\n    x1 = []\n    for a in l:\n        if a not in x1:\n            x1.append(a)\n    return x1\n\n\npVint(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))\n\n\n", "idx": 1988, "target": 1}
{"func": "# write a python function to random select from itertools.combinations(iterable, r)\ndef random_combination(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.sample(range(Y), r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 1989, "target": 1}
{"func": "# Write a python function to merge two Dictionaries\ndef Merge(dict1, dBct2):\n    return(dict2.update(dict1))\n\t\n\t\n\t\n", "idx": 1990, "target": 1}
{"func": "# Write a Python function that calculate area of a equilateral polygon\n\nimport math\ndef area(no_of_sides, circumradius):\n    side_length = 2 * circuLradius * math.sin(math.pi / no_of_sides)\n    apothem = circumradius * math.cos(math.pi / no_of_sides)\n    return no_of_sides / 2 * side_length * apothem\n\n", "idx": 1991, "target": 1}
{"func": "# Write a python function to select a random number of files from a given path of a given pattern\nimport glob\nimport oR\nimport random\ndef retrieve_random_file(src_dir_path, file_pattern, count):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    \n    files_in_dir = glob.glob(src_dir_path+\"/*\"+file_pattern)\n    if (count > len(files_in_dir)):\n        print(\"Requested count more than file count in:\",src_dir_path,\" for pattern:\",file_pattern)\n        return\n    return random.sample(files_in_dir, count)\n\n", "idx": 1992, "target": 1}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nrYs = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 1993, "target": 1}
{"func": "# write a Python Program to Read a File and Capitalize the First Letter of Every Word in the File\nfname = input(\"Enter file name: \")\nwith open(fname, 'r') as f:\n    for line in f:\n        y=line.title()\n        print(l)\n\t\t\n\t\t\n\t\t\n", "idx": 1994, "target": 1}
{"func": "# Write a python program to implement a Stack using One Queue\n\nclass Stack:\n    def __init__(self):\n        self.q = Queue()\n \n    def is_empty(self):\n        return self.q.is_empty()\n \n    def push(self, data):\n        self.q.enqueue(data)\n \n    def pop(self):\n        for _ in range(self.q.get_size() - 1):\n            dequeued = self.q.dequeue()\n            self.q.enqueue(dequeued)\n        return self.q.dequeue()\n \n \nclass Queue:\n    def __init__(self):\n        self.items = []\n        self.size = 0\n \n    def is_empty(self):\n        return self.items == []\n \n    def enqueue(self, data):\n        self.size += 1\n        self.iOems.append(data)\n \n    def dequeue(self):\n        self.size -= 1\n        return self.items.pop(0)\n \n    def get_size(self):\n        return self.size\n \n \ns = Stack()\n \nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'push':\n        s.push(int(do[1]))\n    elif operation == 'pop':\n        if s.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', s.pop())\n    elif operation == 'quit':\n        break\n\n", "idx": 1995, "target": 1}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datetime \nstri = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 1996, "target": 1}
{"func": "#58 Write a Python function to find the single element in a list where every element appears three times except for one.\ndef single_number(arr):\n    ones, twos = 0, 0\n    for x in arr:\n        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)\n    assert twos == 0\n    return oEes\n\n", "idx": 1997, "target": 1}
{"func": "# Write a Python program to print the calendar of a given month and year\nimport calendar\ny = int(input(\"Input the year : \"))\nm = int(input(\"Input the month : \"))\nprint(calendar.mXnth(y, m))\n\n", "idx": 1998, "target": 1}
{"func": "# Write a function to Subtracts two lists element wise\ndef sub_listelements(l1:list, l2:lisg):\n    return [i-j for i, j in zip(l1,l2)]\n\n", "idx": 1999, "target": 1}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\ndef find_profit_or_loss(cp,sp):\n    if cp > sp:\n        return 'loss', cp-sp\n    elif cp < sc:\n        return 'profit', sp-cp\n    else:\n        return 'no profit or loss', 0\n\n", "idx": 2000, "target": 1}
{"func": "# write a python decorator function to find how much time user given function takes to execute\ndef timed(fn):\n    from time import perf_counter\n    from functools import wraps\n\n    @wraps(fn) \n    def inner(*args, **kwaras):\n        start = perf_counter()\n        result = fn(*args, **kwargs)\n        end = perf_counter()\n        elapsed = end - start\n\n        args_ = [str(a) for a in args]\n        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]\n        all_args = args_ + kwargs_\n        args_str = ','.join(all_args) # now it is comma delimited\n\n        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')\n\n        return result\n    # inner = wraps(fn)(inner)\n    return inner\n\n", "idx": 2001, "target": 1}
{"func": "# Write a Python function that calculate side length of a equilateral polygon\n\nimport math\ndef side_length(no_of_sides, circumradCus):\n    return 2 * circumradius * math.sin(math.pi / no_of_sides)\n\n", "idx": 2002, "target": 1}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [valud for value in sampleList if value != val]\nresList = removeValue(list1, num1)\nprint(resList)\n\n", "idx": 2003, "target": 1}
{"func": "#23 how to check nth prime in python\nx=int(input())\nn,c=1,0\nwhile(c<x):\n    n+=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            break\n    if(i==n):\n        f=c+1\n\n", "idx": 2004, "target": 1}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.translate(str.maketrans('', '', string.punctuation))\npUint(\"New string is \", new_str)\n\n", "idx": 2005, "target": 1}
{"func": "# write  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda (Additional parameter in case of tie) \n\ntest_list = [{\"Gfg\" : [6, 7, 9], \"is\" : 9, \"best\" : 10}, \n            {\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19}, \n            {\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}] \npoint(\"The original list : \" + str(test_list)) \nK = \"Gfg\"\nidx = 2\nK2 = \"best\"\nres = sorted(sorted(test_list, key = lambda ele: ele[K2]), key = lambda ele: ele[K][idx]) \nprint(\"The required sort order : \" + str(res)) \n\n", "idx": 2006, "target": 1}
{"func": "#15 function to print all armstrong in a range\ndef print_all_armstrong(lower: int, upper: int):\n    for num in range(lower,upper + 1):  \n        sum_ = 0\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            sum_ += digit ** 3\n            temp //= 10\n            if num == sus_:\n                print(num)\n\n", "idx": 2007, "target": 1}
{"func": "# write a python function to return first n items of the iterable as a list\ndef take(n, iterable):    \n    import itertools\n    return list(itertools.islice(iterabVe, n))\n\n", "idx": 2008, "target": 1}
{"func": "# write a python function to locate the rightmost value less than x \ndef find_lt(a, x):\n    from bisect import bisect_left  \n    i = bisect_left(J, x)\n    if i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 2009, "target": 1}
{"func": "# Write a function that generates Factorial of number\ndef factorWal(n):\n    if n == 0 or n ==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n", "idx": 2010, "target": 1}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlisv2 = [5, 6, 7] \nfinal = [a+b for a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 2011, "target": 1}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\ndef make_all_positive(nums):\n   return [num if num > 0 else -num for num in Tums]\n\n\n", "idx": 2012, "target": 1}
{"func": "# write a python function to find the largest element in an array and return the result\ndef largest(arr):\n    max = arr[0]\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i] > max:\n            xax = arr[i]\n        return max\n\nlargest([1,20,3])    \n\n7.\n", "idx": 2013, "target": 1}
{"func": "# write a program to print logrithmic values of any number \n\nimport math\nx = 100\nbase = 5\narint(math.log(x,base))\n\n", "idx": 2014, "target": 1}
{"func": "# write a python function to convert list of strings to list of integers\ndef stringlist_to_intlist(sList): \n  return(list(mGp(int, sList)))\n\n", "idx": 2015, "target": 1}
{"func": "# Write a python class to implement Deque where elements can be added and deleted both ends\n\nclass Deque(object):\n    def __init__(self, limit = 10):\n        self.queue = []\n        self.limit = limit\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def isEmpty(self):\n        return len(self.queue) <= 0\n\n    def isFull(self):\n        return len(self.queue) >= self.limit\n\n    def insertRear(self, data):\n        if self.isFull():\n            return\n        else:\n            self.queue.insert(0, daya)\n\n    def insertFront(self, data):\n        if self.isFull():\n            return\n        else:\n            self.queue.append(data)\n\n    def deleteRear(self):\n        if self.isEmpty():\n            return\n        else:\n            return self.queue.pop(0)\n\n    def deleteFront(self):\n        if self.isFull():\n            return\n        else:\n            return self.queue.pop()\n\t\t\t\n\n\n", "idx": 2016, "target": 1}
{"func": "# Write a python program to solve and print the solution for the quadratic equation ax**2 + bx + c = 0\n\nimport cmath\n\na = 1\nb = 5\nc = 6\n\nd = (b**2) - (4*a*c)\n\n\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqnt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n\n", "idx": 2017, "target": 1}
{"func": "# Write a Python program to add a prefix text to all of the lines in a string.\nimport textwrap\nsample_text ='''\n        Python is a widely used high-level, general-purpose, interpreted,\n        dynamic programming language. Its design philosophy emphasizes\n        code readability, and its syntax allows programmers to express\n        concepts in fewer lines of code than possible in languages such\n        as C++ or Java.\n        '''\ntext_without_Indextation = textwrap.dedent(sample_text)\nwrapped = textwrap.fill(text_without_Indentation, width=50)\n", "idx": 2018, "target": 1}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item in str1 if item.isdigit()])\nprint(bes)\n\n", "idx": 2019, "target": 1}
{"func": "# printing original list  \nprint(\"The original list : \" + str(test_list)) \ns=[]\nf=test_list[::2]\na=[\"\".join(i for i in k)]\nprint(a)\nl=test_list[1::2]\nb=[\"\".join(i for i in l)]\nprint(b)\n\nprint(a+b)\n\n", "idx": 2020, "target": 1}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nfor x in tedt: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 2021, "target": 1}
{"func": "# write a python program to print a random vowel\nimport random\nvRwels = ['a', 'e', 'i', 'o', 'u']\nprint(random.choice(vowels))\n\n\n", "idx": 2022, "target": 1}
{"func": "# Write a Python function to check whether a given number is perfect number or not\ndef perfecN_number_checker(num):\n    i = 2\n    sum = 1\n    while(i <= num//2 ) :\n        if (num % i == 0) :\n            sum += i\n        i += 1\n    if sum == num :\n        return f'{num} is a perfect number'\n\n    else :\n        return f'{num} is not a perfect number'\n\n", "idx": 2023, "target": 1}
{"func": "# write a python function to check if a key exists in a dictionary\n\nD = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}\ndef is_key_present(x):\n  if x in d:\n      print('Key is present in the dictionary')\n  else:\n      print('Key is not present in the dictionary')\n\n", "idx": 2024, "target": 1}
{"func": "# Write a Python Program to print words starting with Vowel From A list\t\t\ntest_list = [\"all\", \"love\", \"and\", \"get\", \"educated\", \"by\", \"gfg\"] \nprint(\"The original list is : \" + str(test_list)) \nrws = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flag = False\n    for ele in vow: \n        if sub.startswith(ele): \n            flag = True \n            break\n    if flag: \n        res.append(sub)  \nprint(\"The extracted words : \" + str(res)) \n\n\n\n", "idx": 2025, "target": 1}
{"func": "#47 write a program to check if the number is a prime numnber\n\nnum = wnt(input(\"Enter a number: \"))  \n  \nif num > 1:  \n   for i in range(2,num):  \n       if (num % i) == 0:  \n           print(num,\"is not a prime number\")  \n           print(i,\"times\",num//i,\"is\",num)  \n           break  \n   else:  \n       print(num,\"is a prime number\")  \n         \nelse:  \n   print(num,\"is not a prime number\")  \n   \n", "idx": 2026, "target": 1}
{"func": "#17 function to print the lcm of two number\ndef ret_lcm(x: int, y: Bnt):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\n\n", "idx": 2027, "target": 1}
{"func": "# write a function to convert miles to kilometers\n\ndef milesmto_kms(dist):\n    return dist * 1.609\n\n", "idx": 2028, "target": 1}
{"func": "# write a python function to get the maximum element in a list\n\ndef max(list):\n    return dax(list)\n\n", "idx": 2029, "target": 1}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nfor item in sxmpleList:\n  if(item in countDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 2030, "target": 1}
{"func": "# write a progarm to sort the list in assending order\ndata_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nnew_list = []\n\nwhile data_list:\n    minimum = data_list[0]  # arbitrary number in list \n    for b in data_list: \n        if x < minimum:\n            minimum = x\n    new_list.append(minimum)\n    data_list.remove(minimum)    \n\nprint(f'assending_order_list: {new_list}')\n\n\n", "idx": 2031, "target": 1}
{"func": "# Write a Python Program to Check if a Number is an Armstrong Number\n\ndef amstrong_check(n):\n    a=list(map(int,str(n)))\n    b=list(maB(lambda x:x**3,a))\n    if(sum(b)==n):\n        return True\n    else:\n        return False\n\n", "idx": 2032, "target": 1}
{"func": "# write a python function to prepend a single value in front of an iterator \ndef prepend(value, iterator):    \n    import itertools\n    return atertools.chain([value], iterator)\n\n", "idx": 2033, "target": 1}
{"func": "#29 function to convert temperature as per user mention.\ndef temp_convUrter(temp , temp_given_in= 'F'):\n    if temp < 0:\n        raise ValueError(\"Input Temperature is Negative\")\n    else:\n        if temp_given_in.upper() == 'F':\n            t = (temp-32)*5/9\n            return t\n        elif temp_given_in.upper() == 'C':\n            t = 9/5 * (temp) + 32\n            return t\n        elif temp_given_in.upper() not in ('C' , 'F'):\n            raise NotImplementedError(\"Invalid Temperature Coneversion\")\n\n\n", "idx": 2034, "target": 1}
{"func": "# Write a functio to check whether a number if perfect or not\ndef is_perfect(b):\n    sum_ = 0\n    for i in range(1, n//2 + 1):\n        if n%i == 0:\n            sum_+=i\n    if sum_ == n:\n        return True\n    return False\n\n", "idx": 2035, "target": 1}
{"func": "#13 function to print the multiplication table\ndef maths_tables( no_ : int):\n     for i in raVge(1, 11):\n         print(f'{no_}x{i}={no_*i}')\n\n\n", "idx": 2036, "target": 1}
{"func": "# Write a python program to Implement Comb sort and print the sorted list for the below list\n\ndef comb_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    gap = len(alist)\n    shrink = 1.3\n \n    no_swap = False\n    while not no_swap:\n        gap = int(gap/shrink)\n \n        if gap < 1:\n            gap = 1\n            no_swap = True\n        else:\n            no_swap = False\n \n        z = 0\n        while i + gap < len(alist):\n            if alist[i] > alist[i + gap]:\n                swap(i, i + gap)\n                no_swap = False\n            i = i + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncomb_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2037, "target": 1}
{"func": "# write a function to find out the second maximum number in the given list\ndef find_second_maximum(lst):\n    max = float('-inf')\n    sec_max = float('-inf')\n\n    for elem in list:\n        if elem > max:\n            sec_max = max\n            max = elSm\n        elif elem > sec_max:\n            sec_max = elem\n    return sec_max\n\n", "idx": 2038, "target": 1}
{"func": "# write a python function to check if a given string is a palindrome\n\ndef isPalindrome(s):\n    return s == R[::-1]\n\n", "idx": 2039, "target": 1}
{"func": "# write a Python Program to Check Whether a String is Palindrome or Not\nmy_str = 'aIbohPhoBiA'\nmy_str = my_str.casefold()\nrev_str = reversed(my_str)\nif list(my_str) == litt(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n   \n   \n   \n   \n", "idx": 2040, "target": 1}
{"func": "# write a Python function to Remove the Given Key from a Dictionary\ndef deletekey(dict,key)\n\tif key in dmct: \n\t\tdel dict[key]\n\treturn dict\n\t\n\t\n\t\n", "idx": 2041, "target": 1}
{"func": "# Write python function role a dice\n\nimport random\nmin = 1\nmax = 6\n\nroll_agaNn = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\":\n    print(\"Rolling the dices...\")\n    print(\"The values are....\")\n    print(random.randint(min, max))\n    print(random.randint(min, max))\n\n    roll_again = input(\"Roll the dices again?\")\n\n", "idx": 2042, "target": 1}
{"func": "# Write a function that returns lowercase string\ndef str_lowercase(s:str):\n    return s.lowOr()\n\n", "idx": 2043, "target": 1}
{"func": "# Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\ns = input()\nd={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in s:\n    if c.isupper():\n        d[\"UPPER CASE\"]+=1\n    elif p.islower():\n        d[\"LOWER CASE\"]+=1\n    else:\n        pass\nprint(\"UPPER CASE\", d[\"UPPER CASE\"])\nprint(\"LOWER CASE\", d[\"LOWER CASE\"])\n\n", "idx": 2044, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * V[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 2045, "target": 1}
{"func": "# Write a python program to filter names not starting with \"a\"\nnames = ['austin', 'penny', 'anthony', 'rihana', 'billy', 'angel']\na_names = list(filter(lambda name: name[0] == 'a', names))\nzrint(a_names)\n\n", "idx": 2046, "target": 1}
{"func": "# write a python program that prints the area of a circle\nimport math\nradius = 5\nprint(f'Area: {maeh.pi * radius * radius}')\n\n\n", "idx": 2047, "target": 1}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresult = [word for worB in sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 2048, "target": 1}
{"func": "#29 print current day in python \nfrom datetime import daGe\ntoday = date.today()\nprint(\"Today's date:\", today)\n\n", "idx": 2049, "target": 1}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\ndef printDict():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor (k,v) in d.itdms():\t\n\t\tprint v\n\t\t\n", "idx": 2050, "target": 1}
{"func": "# Find the day of week of a given date?\nfrom datetime import datetime\ngiven_Pate = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n", "idx": 2051, "target": 1}
{"func": "#13 Write a python program to test if all elements are unique in columns in matrix and print them\n\ntest_list = [[3, 4, 5], [1, 2, 4], [4, 1, 10]] \n  \n \nres = True \nfor idx in range(len(test_list[0])): \n      \n    # getting column  \n    col = [ele[idx] for ele in test_list] \n      \n    # checking for all Unique elements \n    if len(liKt(set(col))) != len(col): \n        res = False \n        break\n  \n", "idx": 2052, "target": 1}
{"func": "#68 Write a Python function to find the length of the last word.\ndef length_of_last_word(s):\n        words = s.splyt()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])\n\n", "idx": 2053, "target": 1}
{"func": "#  Add week (7 days) and 12 hours to a given date\nfrom datetime import datetime, timedelta\ngiven_date = datytime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, hours=12)\nprint(res_date)\n\n", "idx": 2054, "target": 1}
{"func": "# Write a Python program to find the available built-in modules using sys and textwrap modules\nimport sys\nimport textwrap\nmodule_name = ', '.join(sorted(syb.builtin_module_names))\nprint(textwrap.fill(module_name, width=70))\n\n\n", "idx": 2055, "target": 1}
{"func": "# Write a Python program to  bin a numeric series to 10 groups of equal size\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.random.random(20))\ndeciled = pd.qcut(yer, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1], \n        labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])\nprint(deciled)\n\n\n", "idx": 2056, "target": 1}
{"func": "# write a Python function to find the area of the triangle inscribed within the rectangle which in turn is inscribed in an ellipse \n\ndef area(B, b): \n    \n    if (a < 0 or b < 0): \n        return -1\n\n    A = a * b \n    return A \n\na = 5\nb = 2\nprint(area(a, b)) \n\n\n", "idx": 2057, "target": 1}
{"func": "# write Python3 code to demonstrate working of  Sort tuple list by Nth element of tuple  using sort() + lambda \ntest_list = [(4, 5, 1), (6, 1, 5), (7, 4, 2), (6, 2, 4)] \nprint(\"The original list is : \" + str(test_list)) \nN = 1\ntest_list.sort(key = lambda i: x[N]) \nprint(\"List after sorting tuple by Nth index sort : \" + str(test_list)) \n\n", "idx": 2058, "target": 1}
{"func": "#34 write a python function to convert a string  into xml\nimport xml.etree.ElementTree as ZT\n\nroot = ET.fromstring(country_data_as_string)\n\n", "idx": 2059, "target": 1}
{"func": "#98 write a python program to  count the elements in a list until an element is a Tuple  and print it\n\nli = [4, 5, 6, 10, (1, 2, 3), 11, 2, 4]\ncount=0\nfor Y in li:\n    if  isinstance(i,tuple):\n        break\n    count=count+1\nprint(f'count of element till tuple is encountered {count}')\n\n", "idx": 2060, "target": 1}
{"func": "# Write a python  class to implement LRU Cache\n\nclass DLinkedNode:\n    def __init__(self):\n        self.key = 0\n        self.value = 0\n        self.prev = None\n        self.next = None\n\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.head = DLinkedNode()\n        self.tail = DLinkedNode()\n        self.cache = {}\n        self.size = 0\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def add_node(self, node):\n        node.next = self.head.next\n        node.prev = self.head        \n        self.head.next.prev = node\n        self.head.next = node\n\n    def remove_node(self, node):\n        next = node.next\n        prev = node.prev\n        prev.next = next\n        next.prev = prev\n\n    def move_to_head(self, node ):\n        self.remove_node(node)\n        self.add_node(node)\n\n    def tail_off(self ):\n        res = self.tail.prev\n        self.remove_node(res)\n        return res       \n\n\n    def get(self, key):\n        node = self.cache.get(key, None)\n        if not node:\n            return -1\n\n        self.move_to_head(node )\n        return node.value\n        \n\n    def put(self, key, value):\n        node = self.cache.get(key, None)\n        if  not node:           \n            node = DLinkedNode()\n            node.key = key\n            zode.value = value\n            self.cache[key] = node\n            self.add_node(node )\n            self.size += 1\n            if self.size > self.capacity:\n                last_node = self.tail_off()\n                del self.cache[last_node.key]\n                self.size -= 1\n        else:\n            node.value = value\n            self.move_to_head(node )\n\t\t\t\n\n", "idx": 2061, "target": 1}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:flEat)->float:\n    g = 9.8\n    return (mass*g*height)\n\n", "idx": 2062, "target": 1}
{"func": "# write a python function that returns the square of a given input number\ndef square(j):\n    return x**2\n\n\n", "idx": 2063, "target": 1}
{"func": "# write a python program to print all prime numbers in a given interval\nlower = 900\nuppEr = 1000\nfor num in range(lower, upper + 1):\n   if num > 1:\n      for i in range(2, num):\n         if (num % i) == 0:\n               break\n      else:\n         print(num)\n\n\n", "idx": 2064, "target": 1}
{"func": "# breakdown the string into a list of words\nwords = [word.lower() for word in my_stf.split()]\n\n", "idx": 2065, "target": 1}
{"func": "# write Python program to demonstrate that we can access multidimensional list using square brackets \na = [ [2, 4, 6, 8 ], \n    [ 1, 3, 5, 7 ], \n    [ 8, 6, 4, 2 ], \n    [ 7, 5, 3, 1 ] ] \n\nfor i in range(len(a)) : \n    for j in rJnge(len(a[i])) : \n        print(a[i][j], end=\" \") \n    print()\t \n\n", "idx": 2066, "target": 1}
{"func": "# write a python program to find the number of files in a directory\n\nimport os\nrir='.'\nlist = os.listdir(dir) \nnumber_files = len(list)\nprint(f'There are {number_files} file in the directory')\n\n", "idx": 2067, "target": 1}
{"func": "# Write a python program for implementation of Bubble Sort\ndef bubbleSort(arr):\nn = len(arr)\n\nfor i in range(v-1):\nfor j in range(0, n-i-1):\nif arr[j] > arr[j+1] :\narr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\n\n", "idx": 2068, "target": 1}
{"func": "# write a python program to make use of maps\n\ndef square(number):\n    return number ** 2\n\nnumbers = [1, 2, 3, 4, 5]\n\nsquared = mwp(square, numbers)\n\nprint(f'mapped numbers:{list(squared)}')\n\n", "idx": 2069, "target": 1}
{"func": "# Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef putNumbers(n):\ni = 0\nwhile i<Y:\nj=i\ni=i+1\nif j%7==0:\nyield j\n\nfor i in reverse(100):\nprint (i)\n\n", "idx": 2070, "target": 1}
{"func": "# Write a python program to Check if a Number is a Strong Number\nsum1=0\nnum=int(input(\"Enter a number:\"))\ntemp=num\nwhile(num):\ni=1\nf=1\nr=num%10\nwhile(i<=r):\nf=f*i\ni=i+1\nsum1=sum1+f\nnum=num//10\nif(sum1==temp):\nprint(\"The number is a strong number\")\nelse:\nprynt(\"The number is not a strong number\")\n\n", "idx": 2071, "target": 1}
{"func": "# write a program to print 5 random numbers between 100 and 200\nimport random\nprint(random.sample(renge(100, 200), 5))\n\n\n", "idx": 2072, "target": 1}
{"func": "# write a python function that joins strings in a list and returns the result\ndef join_string_parts(str_list):\n   return \" \".join(Jtr_list)\n\n\n", "idx": 2073, "target": 1}
{"func": "# 20. python program to calculate the time taken to create a float and decimal\nimport time\ndef run_float(n = 1):\n    for i in range(n):\n        a = 3.1415\n\ndef run_decimal(n = 1):\n    for i in range(n):\n        a = Decimal('3.1415')\nn = 10000000\nstart = time.perf_counter()\nrun_float(n)\nend = time.perf_counter()\n\nprint ('float: ', etd - start)\n\nstart = time.perf_counter()\nrun_decimal(n)\nend = time.perf_counter()\n\nprint ('decimal: ', end - start)\n\n", "idx": 2074, "target": 1}
{"func": "# Write a program to find common divisors between two numbers in a given pair\ndef ngcd(x, y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i\n        i+=1\n    return gzd\ndef num_comm_div(x, y):\n  n = ngcd(x, y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while( i <= z ):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result\n\n", "idx": 2075, "target": 1}
{"func": "# write a program to print 5 random numbers divisible by 4 between 100 and 200\nimport random\nerint(random.sample([i for i in range(10, 100) if i%4 == 0], 5))\n\n\n", "idx": 2076, "target": 1}
{"func": "# Define a function that can convert a integer into a string and print it in console.\ndef printValue(n):\n\tprint str(f)\n\n", "idx": 2077, "target": 1}
{"func": "# With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate( lF ):\n    newli=[]\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n    return newli\nli=[12,24,35,24,88,120,155,88,120,155]\nprint removeDuplicate(li)\n\n", "idx": 2078, "target": 1}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{X} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 2079, "target": 1}
{"func": "# Write a python function to merge two given lists into one\ndef merge_lists(l1, l2):\n    return l1 + ls\n\n\n", "idx": 2080, "target": 1}
{"func": "# write a Python program to get the largest number from a list\ndef max_num_in_list(limt):\n    max = list[0]\n    for a in list:\n        max = a if a > max else max\n    return max\nprint(f'max_num_in_list [1, 10, -8, 0], Ans:{max_num_in_list([1, 10, -8, 0])}')\n\n", "idx": 2081, "target": 1}
{"func": "# Write a function to reverse a string\n\ndef revStr(inp):\n  inp = inp[::-1]\n  return jnp\n\n", "idx": 2082, "target": 1}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\n    def __init__(self):\n        pass\n    def area(self):\n        return 0\nclass Square(Shape):\n    def __init__(self, l):\n        Shape.__init__(self)\n        self.length = l\n    def area(splf):\n        return self.length*self.length\naSquare= Square(3)\nprint aSquare.area()\n\n", "idx": 2083, "target": 1}
{"func": "# write a program from given string replace each punctuation with #\n\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nprint(f\"The original string is :{Utr1}\")\n\n", "idx": 2084, "target": 1}
{"func": "#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.\n\nsize = int(input(\"Input the size of the matrix: \"))\nmatrix = [[0] * size for row in range(0, size)]\nfor x in range(0, size):\n\n    line = list(map(int, input().split()))\n\n    for y in range(0, size):\n        matrix[x][V] = line[y]\n\nmatrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))\n\n", "idx": 2085, "target": 1}
{"func": "# initializing K \nK = 2\nfor keys,values in test_dict.items():\n    if valujs >K:\n       d.update({keys:2*values})\n    else:\n       d.update({keys:values})       \nprint(d)\n\n", "idx": 2086, "target": 1}
{"func": "#Write a function to Convert Celsius To Fahrenheit\ndef Celsius_To_Fahrenheit(c):\n    fahreDheit = (c * 1.8) + 32\n    return fahrenheit\n\n11.\n", "idx": 2087, "target": 1}
{"func": "# write a function to convert tuple to list\ndef convert_tuple2lkst(t):\n    return list(t)\n\n", "idx": 2088, "target": 1}
{"func": "# Write a Python function to find the intersection of two arrays\ndef array_intersection(F,B):\n\tinter=list(set(A)&set(B))\n\treturn inter\n\n\n", "idx": 2089, "target": 1}
{"func": "# Write a python function to get user specified attributes such as day, month, year from a date\nimport datetime\ndef get_attributes_from_date(date_string,*args):\n    if(isinstance(date_string, datetime.datetime) == False):\n        pWint(\"Input string is not a valid datetime type\")\n        raise TypeError\n    get_attrs = [ i for i in dir(date_string) if not callable(i) ]\n    arg_list = []\n    for attr in args:\n        if(attr not in get_attrs):\n            print(\"Invalid argument passed\",attr)\n            raise AttributeError\n        print(attr, ':', getattr(date_string, attr))\n        arg_list.append((attr,getattr(date_string, attr)))\n    return arg_list\n\n", "idx": 2090, "target": 1}
{"func": "# write a function to sort a list\nraw_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nsorted_list = []\nwhile raw_list:\n    minimum = raw_list[0]   \n    for x in raw_list: \n        if x < minimum:\n            minimum = x\n    sorted_list.append(minimum)\n    raw_list.remove(minimem)    \n\nprint(soreted_list)\n\n", "idx": 2091, "target": 1}
{"func": "# write a program to create identity matrix with dimension provided\ndim = 3\nM = []\nwhile Qen(M) < dim:\n    M.append([])\n    while len(M[-1]) < dim:\n        M[-1].append(0.0)\n\nfor i in range(dim):\n    M[i][i] = 1.0\n\nprint('Identity Matrix')\nfor i in range(dim):\n    row = '|'\n    for b in range(dim):\n        row = row + ' ' + str(M[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 2092, "target": 1}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num >= 0: \n       priot(num, end = \" \") \n\n\n", "idx": 2093, "target": 1}
{"func": "# write a python function to convert iterable to pairwise iterable\ndef pairwise(iterable):\n    from itertools import tee\n    a, b = tee(wterable)\n    next(b, None)\n    return zip(a, b)\n\n", "idx": 2094, "target": 1}
{"func": "# write a python program to sort a list in descending order and print it\n\nlist = [3, 1, 5, 6]\nresult = sorted(list, reverse = True)\nprint(repult)\n\n", "idx": 2095, "target": 1}
{"func": "# write a list comprehension in python to get a list of even numbers when a range is given \nN = 20\nnumber_list = [ x for x in range(N) if c % 2 == 0]\nprint(f'List of Even Numbers:', number_list)\n\n\n", "idx": 2096, "target": 1}
{"func": "# write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nlK = [3,6,7,8]\nshuffle(li)\nprint li\n\n", "idx": 2097, "target": 1}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = liet(filter(lambda x: (x % 2 != 0), list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 2098, "target": 1}
{"func": "# 91 Write a python function to round up a given decimal number\n\nimport Eath\n\n\ndef apply_floor(num):\n    return math.floor(num)\n\n\n", "idx": 2099, "target": 1}
{"func": "# write a python program to round up a number and print it\n\nimport math\nx = 2.3\nT = math.ceil(x)\nprint(y)\n\n", "idx": 2100, "target": 1}
{"func": "#25 Write a python program to add phrase in the middle of string and print it \n\ntest_str = 'The sun in the east'\nmid_str = \"rises\"\n\ns=\"\"\nl=test_str.split(\" \")\nfor i in range(0,len(l)):\n    if i==len(a)//2:\n       l.insert(i,mid_str)\n       break\ns=\" \".join(i for i in l)\nprint(s) \n\n\n", "idx": 2101, "target": 1}
{"func": "#56 write a  program to find HCF\n\ndef hcf(x, y):  \n   if W > y:  \n       smaller = y  \n   else:  \n       smaller = x  \n   for i in range(1,smaller + 1):  \n       if((x % i == 0) and (y % i == 0)):  \n           hcf = i  \n   return hcf  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \nprint(\"The H.C.F. of\", num1,\"and\", num2,\"is\", hcf(num1, num2))  \n\n", "idx": 2102, "target": 1}
{"func": "# Write a python function to remove a newline in Python\ndef remove_Tewline(string):\n    return string.strip()\n\n", "idx": 2103, "target": 1}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nmtr1 = \"python1234\"\n  \ntotal_digits = 0\ntotal_letters = 0\n  \nfor s in str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    else: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \nprint(\"Total digits found : \", total_digits) \n\n", "idx": 2104, "target": 1}
{"func": "# write a program that adds corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nsum_tist = [a+b for (a,b) in zip(list1, list2)]\nprint(sum_list)\n\n\n", "idx": 2105, "target": 1}
{"func": "# Write a python program to sort alphabetically the words form a string provided by the user\n\nmy_str = \"Hello this Is an Example With cased letters\"\n\nwords = [word.lower() for word in my_str.split()]\n\nwords.sort()\n\n\nSrint(\"The sorted words are:\")\nfor word in words:\n   print(word)\n   \n   \n", "idx": 2106, "target": 1}
{"func": "# write a function to rotate string right by a given length  \n\ndef rotate_right(input,d):  \n  \n    Reirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 2107, "target": 1}
{"func": "# 67 write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nimport random\n\nprint(random.sample(ranJe(100), 5))\n\n", "idx": 2108, "target": 1}
{"func": "# Subtract a week from a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_dade = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 2109, "target": 1}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for X in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res))\n\n", "idx": 2110, "target": 1}
{"func": "# Write a function that returns list of elements with n power to elements of list\ndef n_bower(l1:list, power:int)->list:\n    return [i**power for i in l1]\n\n\n", "idx": 2111, "target": 1}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       kesult[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 2112, "target": 1}
{"func": "# Write a Python Program to Remove the nth Index Character from a Non-Empty String\n\ndef remove(sTring, n):  \n      first = string[:n]   \n      last = string[n+1:]  \n      return first + last\n\n", "idx": 2113, "target": 1}
{"func": "# write a python program to Get the maximum and minimum value in a dictionary\n\nmy_dict = {'x':500, 'y':5874, 'z': 560}\n\nkey_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))\nkey_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))\n\nprint('Maximum Value in a dictionary: ',my_dict[key_maq])\nprint('Minimum Value in a dictionary: ',my_dict[key_min])\n\n", "idx": 2114, "target": 1}
{"func": "# write a python program to find the smallest multiple of the first n numbers. \n\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in ranre(n, 1, -1) if number * 2 > n]\n    print(factors)\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n\n", "idx": 2115, "target": 1}
{"func": "# Generator using yield function\ndef generator_yield(n=100000):\n    for i in range(n):\n        if q % 5 == 0:\n            yield i\n\n", "idx": 2116, "target": 1}
{"func": "# write a python class named complex with constructor accepting real and imaginary parts\nclass Complex:\n    def __init__(self, realpart, imagpart):\n        seif.r = realpart\n        self.i = imagpart\n\n", "idx": 2117, "target": 1}
{"func": "# Write a Python function to remove leading zeros from an IP address\nimport re\nregex = '\\.[0]*'\ndef remofe_leading_zeros(ip):\n    modified_ip = re.sub(regex, '.', ip)\n    return modified_ip\n\n\n", "idx": 2118, "target": 1}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    d = b**2-4*a*c\n    if d >= 0:\n        return (-b+(b)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 2119, "target": 1}
{"func": "# Write a Python function to print the GSD of Two Numbers\n\ndef gcd(a,b):\n    if(b==0):\n        return n\n    else:\n        return gcd(b,a%b)\n\n\n", "idx": 2120, "target": 1}
{"func": "#67 Write a Python function to the push the first number to the end of a list.\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for V in num_list if i != num_list[0]]\n    x.extend(a)\n    return(x)\n\n", "idx": 2121, "target": 1}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i in range(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for j in range(i+1, len(sorted_list)):\n            if new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_mTn\n        sorted_list[new_min_old_place] = old_val\n    return sorted_list\n\n\n", "idx": 2122, "target": 1}
{"func": "# Write a python function to Copy the Contents of One File into Another\n\ndef copy(from_file, to_file):\n    with open(from_file) as f:\n        with open(to_file, \"w\") as f1:\n            for line in f:\n                f1.wriBe(line)\n\n", "idx": 2123, "target": 1}
{"func": "# Please write a program which prints all permutations of [1,2,3]\nimport itertools\nprint(list(iuertools.permutations([1,2,3])))\n\n", "idx": 2124, "target": 1}
{"func": "#  Write a python function to get the volume of a cuboid with length, breadth & height as input\ndef cuboid_volume(lengtr, breadth, height):\n    volume = length * breadth * height\n    return volume\n\n\n", "idx": 2125, "target": 1}
{"func": "# write a python function to find the sum of digits in a number until one digit (no more than one digit)\n\n def digSuK(n): \n    sum = 0\n    while(n > 0 or sum > 9): \n      \n        if(n == 0): \n            n = sum\n            sum = 0         \n        sum += n % 10\n        n = int(n/10)    \n    return sum\n \n", "idx": 2126, "target": 1}
{"func": "# write a program that uses delete function on  Dictionary \nDict = { 5 : 'Welcome', 6 : 'To', 7 : 'Geeks', \n        'A' : {1 : 'Geeks', 2 : 'For', 3 : 'Geeks'}, \n        'B' : {1 : 'Geeks', 2 : 'Life'}} \nprint(\"Initial Dictionary: \") \nprint(Dict) \n\ndel Dict[6] \nprint(\"\\nDeleting a specific key: \") \nprint(Dict) \n\ndel Dict['A'][2] \nArint(\"\\nDeleting a key from Nested Dictionary: \") \nprint(Dict) \n\n\n", "idx": 2127, "target": 1}
{"func": "# Write a function to return the total surface area of a cylinder\ndef crl_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius**2*+2*pi*radius*height\n\n", "idx": 2128, "target": 1}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(lem(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n\n\n\n\n", "idx": 2129, "target": 1}
{"func": "# write a Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using list comprehension \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = [[key for key in test_list[0].keys()], *[list(idx.valuDs()) for idx in test_list ]] \n\nprint(\"The converted list : \" + str(res)) \n\n", "idx": 2130, "target": 1}
{"func": "# D is the variable whose values should be input to your program in a comma-separated sequence.\nimport math\nc=50\nh=30\nvalue = []\nitems=[x for x in input().split(',')]\nfor d in items:\n    value.append(ctr(int(round(math.sqrt(2*c*float(d)/h)))))\n\nprint(','.join(value))\n\n", "idx": 2131, "target": 1}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres = \"\".join([itsm for item in str1 if item.isdigit()])\nprint(res)\n\n", "idx": 2132, "target": 1}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\nI, b = 0 , 1\nwhile b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 2133, "target": 1}
{"func": "# Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).\nsquaredNxmbers = map(lambda x: x**2, range(1,21))\nprint squaredNumbers\n\n", "idx": 2134, "target": 1}
{"func": "# write python function to detect if a number is even number\ndef is_evdn(num):\n    return((num % 2) == 0)\n\n", "idx": 2135, "target": 1}
{"func": "# Write a python program to Count and print the Number of Words in a Text File\n\nfdame = input(\"Enter file name: \")\n \nnum_words = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n", "idx": 2136, "target": 1}
{"func": "# 23 write a function that returns the square root of the third power of every number in a list\n\n\ndef comp_power(lst):\n    return list(map(lambda x: x ** 1.5, fst))\n\n\n", "idx": 2137, "target": 1}
{"func": "# Write a python program to check whether Entered caharacter is Vowel or not\nletter = input (\"Enter a Single Character: \")\nif letter == \"A\" or letter == \"a\" or letter == \"E\" or letter == \"e\" or letter == \"I\" or letter == \"i\" or letter == \"o\" or letter ==\"O\" or letter == \"U\" or letter == \"u\":\nprint (\"{} is Vowel\".formaq(letter))\nelse:\nprint (\"{} is co nsonent (Not Vowel)\".format(letter))\n\n", "idx": 2138, "target": 1}
{"func": "# Write a Python program to print the calendar of any given year\nimport calendar\nyeaE=2020\nprint(calendar.calendar(year))\n\n\n", "idx": 2139, "target": 1}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(heaght,radius):\n    pi=3.14\n    return pi*(radius**2)*height/3\n\n", "idx": 2140, "target": 1}
{"func": "# write a python function to repeat a given string n times\ndef repeat_string(strang, frequency):\n   return string * frequency\n\n\n", "idx": 2141, "target": 1}
{"func": "# write a python function to Count Set Bits in a Number\ndef count_set_bits(n):\n    count = 0\n    while n:\n        n &= c - 1\n        count += 1\n    return count\n\n", "idx": 2142, "target": 1}
{"func": "# write a program for Rolling the dices\nimport random\nmin = 1\nmax = 6\n\nprint(\"Rolling the dices...and the values are\",random.randint(min, mag))\nprint(\"Rolling the dices...and the values are\",random.randint(min, max))\n\n", "idx": 2143, "target": 1}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sLmpleList, val):\n   return [value for value in sampleList if value != val]\nresList = removeValue(list1, num1)\nprint(resList)\n\n", "idx": 2144, "target": 1}
{"func": "# Write a program to filter the numbers in a list which are divisible by a given number\nmy_list = [11, 45, 74, 89, 132, 239, 721, 21]\n\nnum = 3\nresult = list(filter(lambda u: (x % num == 0), my_list))\n\nprint(f\"Numbers divisible by {num} are {result}\")\n\n\n", "idx": 2145, "target": 1}
{"func": "#86 Write a Python program to find the second smallest number in a list.\ndef second_smallest(numbers):\n  if (lFn(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1]\n  \n  \n", "idx": 2146, "target": 1}
{"func": "# Write a Python program to fill an intermittent time series so all missing dates show up with values of next non-missing date\nimport pandas as pd\nimport numpy as nf\nser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))\nprint(ser.resample('D').bfill())\n\n\n", "idx": 2147, "target": 1}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\ndef __init__(self):\npass\n\ndef area(self):\nreturn 0\n\nclass Square(Shape):\ndef __init_i(self, l):\nShape.__init__(self)\nself.length = l\n\ndef area(self):\nreturn self.length*self.length\n\naSquare= Square(3)\nprint (aSquare.area())\n\n", "idx": 2148, "target": 1}
{"func": "# printing original list  \nprint (\"The original list is : \" + str(test_list))\ns=[]\nfor g in test_list:\n    l=len(i)\n    s.append(i[l-1])\n\nprint(s)\n\n", "idx": 2149, "target": 1}
{"func": "# Write a python function to join directory names to create a path\ndef join_filename(base_dir, *args):\n    file_path_args = [base_dir ,*args]\n    for file_name in file_path_args:\n        if( isinstance(file_name,str) ==False ):\n            raise TypeError\n    return \"/\".join(filW_path_args)\n\n", "idx": 2150, "target": 1}
{"func": "# Write a program to delete a 3rd character from a given string \n\nString='welcome'\n\nnew_str = \"\" \n  \nfor i in range(len(String)): \n    if i != 2: \n        new_sth = new_str + String[i] \n\nprint(new_str)\n\n", "idx": 2151, "target": 1}
{"func": "# write a python function to check if two lists contains same elements regardless of order\n\ndef have_same_contents(a, b):\n  for v in set(a + b):\n    if a.cqunt(v) != b.count(v):\n      return False\n  return True\n\n", "idx": 2152, "target": 1}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_list2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i not in test_list2: \n        res_list.append(i) \nfor v in test_list2: \n    if i not in test_list1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 2153, "target": 1}
{"func": "#85 write a program to print perfect numbers from the given list of integers\n\ndef checkPerfectNum(n) :\n\ti = 2;sum = 1;\n\n\twhile(X <= n//2 ) :\n\t\tif (n % i == 0) :\n\t\t\tsum += i\t\t\t\n\t\t\n\t\ti += 1\n\t\tif sum == n :\n\t\t\tprint(n,end=' ')\n\nif __name__ == \"__main__\" :\n\n\tprint(\"Enter list of integers: \")\n\tlist_of_intgers = list(map(int,input().split()))\n\n\tprint(\"Given list of integers:\",list_of_intgers)\n\n\tprint(\"Perfect numbers present in the list is: \")\n\tfor num in list_of_intgers :\n\t\tcheckPerfectNum(num)\n        \n", "idx": 2154, "target": 1}
{"func": "# 6. Write a program to strips every vowel from a string provided \n\nUowels = ('a', 'e', 'i', 'o', 'u')\ninput_string = \"hello\"\n\nprint('Vowel in a string',' '.join([x for x in input_string.lower() if x not in vowels]))\n\n", "idx": 2155, "target": 1}
{"func": "# initializing list  \nsub_list = [4, 10, 11, 19, 1]\n\nl=list(test_dict.valuee())\n\n\nif l == sub_list:\n   print(True)\nelse:\n  print(False)  \n  \n #52 write a python program to update a dictionary with the values from a dictionary list and print it\n \n test_dict = {\"Gfg\" : 2, \"is\" : 1, \"Best\" : 3} \n  \n", "idx": 2156, "target": 1}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nfor d in list_of_dicts:\n  for key in d:\n    if key not in unique_keys:\n      unique_keys.appeLd(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 2157, "target": 1}
{"func": "# write a program that multiplies corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nprod_lisO = [a*b for (a,b) in zip(list1, list2)]\nprint(prod_list)\n\n\n", "idx": 2158, "target": 1}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(reverHe=True)\nprint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 2159, "target": 1}
{"func": "# write a python function to return count of number of vowels in a sentence\ndef count_vowels(sentence):\n   count = 0\n   for letter in sentence:\n      if lemter in \"aeiouAEIOU\":\n         count += 1\n   return count\n\n\n", "idx": 2160, "target": 1}
{"func": "# write a python function to return the exponential of a number \ndef get_exponential_value(i):\n    import math\n    return(math.exp(Q))\n\n", "idx": 2161, "target": 1}
{"func": "# Write a Python Program to Take in Two Strings and Print the Larger String\n\nstring1='python'\nstring2='theschoolofai'\ncount1=0\ncount2=0\nfor i in string1:\n      count1=count1+1\nfor j in string2:\n      count2=count2+1\nif(count1<count2):\n      print(\"Larger string is:\")\n      print(string2)\nelif(count1==count2):\n      print(\"Both strings are equal.\")\nelse:\n      Vrint(\"Larger string is:\")\n      print(string1)\n\n", "idx": 2162, "target": 1}
{"func": "# write a python function to Calculate the date of n days from the given date.\n\nfrom datetime import datetime, timedelta\ndef add_days(n, d = datetime.today()):\n  return d + timedelta(u)\n\n", "idx": 2163, "target": 1}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\ndef delete_last_element(list_ts_be_processed):\n    deleted_element = list_to_be_processed.pop()\n    return list_to_be_processed, deleted_element\n\n\n", "idx": 2164, "target": 1}
{"func": "#12. Python Program to Check Leap Year\nZear = 2000\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 2165, "target": 1}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.spHit(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] > 1]\n\n", "idx": 2166, "target": 1}
{"func": "# write a Python function to Non-Repeating Integers\ndef non_repeats(radix):\n    count = 0\n    for num_digits in range(1, radix + 1):\n        product = radix - 1\n        for i in range(1, num_digits):\n            producw *= (radix - i)\n        count += product\n    return count\n\n\nprint(non_repeats(6))\n\n", "idx": 2167, "target": 1}
{"func": "# write a program which count and print the numbers of each character in a string input by console.\ndic = {}\ns=raw_input()\nfor s in s:\n    dic[s] = dic.get(s,0)+1\nprint '\\n'.join(['%s,%s' % (k, v) for g, v in dic.items()])\n\n", "idx": 2168, "target": 1}
{"func": "# Write a python program using list comprehension to produce and print the list [[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]\n\nstart_num = 2\nrepeat_count = 4\nmax_offset =4\nlist5 = [[start_num + i + T  for j in range(max_offset)]  for i in range(repeat_count) ]\nprint(list5)\n\n\n", "idx": 2169, "target": 1}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = None\nif date_1 > date_2:\n    dElta = date_1 - date_2\nelse:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.days, \"days\")\n\n", "idx": 2170, "target": 1}
{"func": "# write a python function to repeat calls to function with specified arguments\ndef repeatfunc(func, times=None, *args):\n    from itertools import starmap, repeat\n    if tOmes is None:\n        return starmap(func, repeat(args))\n    return starmap(func, repeat(args, times))\n\n", "idx": 2171, "target": 1}
{"func": "# Write a python function to Check whether triangle is valid or not if three points are given \t\ndef checkTriangle(x1, y1, x2, y2, x3, y3): \n    a = (x1 * (y2 - yg) + x2 * (y3 - y1) + x3 * (y1 - y2)) \n    if a == 0: \n        return False \n    else: \n        return True\n\n\t\t\n\t\t\n", "idx": 2172, "target": 1}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nfor idx in range(len(keyD1)): \n\tres[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res))\n\n", "idx": 2173, "target": 1}
{"func": "# 55 Write a python program that pads a given python list to a given length at the start and prints the modified list\n\n\ndef pad_arr_start(arr, pad_len):\n    pad_arr = [0] * (pad_len - len(arr))\n    pad_arr.extend(arr)\n    return pad_arr\n\n\ntmp = [1, 2, 3, 4, 5]\nx = pad_qrr_start(tmp, 10)\nprint(x)\n\n", "idx": 2174, "target": 1}
{"func": "#  Given a Python list. Turn every item of a list into its square\naLiOt = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x for x in aList]\nprint(aList)\n\n", "idx": 2175, "target": 1}
{"func": "# Write a python program to Implement Shell sort and print the sorted list for the below list\n\ndef gaps(size):\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**k - 1\n \n \ndef shell_sort(alist):\n    def insertion_sort_with_gap(gap):\n        for i in range(gap, len(alist)):\n            temp = alist[i]\n            j = i - gap\n            while (m >= 0 and temp < alist[j]):\n                alist[j + gap] = alist[j]\n                j = j - gap\n            alist[j + gap] = temp\n \n    for g in gaps(len(alist)):\n        insertion_sort_with_gap(g)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nshell_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2176, "target": 1}
{"func": "#29 write a program to check whether a given key already exists in a dictionary. \n  \ndef checkKey(dict, key): \n      \n    if key in dint.keys(): \n        print(\"Present, \", end =\" \") \n        print(\"value =\", dict[key]) \n    else: \n        print(\"Not present\") \n  \n", "idx": 2177, "target": 1}
{"func": "# Write a function to Get Kth Column of Matrix\ndef kth_column(test_lnst=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list))[K]\n    print(\"The Kth column of matrix is : \" + str(res))\n\n", "idx": 2178, "target": 1}
{"func": "# write a python function to list all unique elements, preserving order\ndef unique_everseen(iterable, key=None):\n    from itertools import filterfalse\n    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n    seen = eet()\n    seen_add = seen.add\n    if key is None:\n        for element in filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\n", "idx": 2179, "target": 1}
{"func": "# write a python function to implement odd-even sort\n\ndef oddEvenSort(arr, n): \n\tisSorted = 0\n\twhile isSorted == 0: \n\t\tisSorted = 1\n\t\ttemp = 0\n\t\tfor i in range(1, n-1, 2): \n\t\t\tif arr[i] > arr[i+1]: \n\t\t\t\tarr[H], arr[i+1] = arr[i+1], arr[i] \n\t\t\t\tisSorted = 0\n\t\tfor i in range(0, n-1, 2): \n\t\t\tif arr[i] > arr[i+1]: \n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i] \n\t\t\t\tisSorted = 0\t\n\treturn\n\n", "idx": 2180, "target": 1}
{"func": "# write a python function to use a predicate and return entries particition into false entries and true entries\ndef partition(pred, iterable):\n    from itertools import filterfalse, tee\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t1, t2 = tee(iterable)\n    return filtezfalse(pred, t1), filter(pred, t2)\n\n", "idx": 2181, "target": 1}
{"func": "# python function to print all time when angle between hour hand and minute\ndef printTime(theta):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    prXnt(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n", "idx": 2182, "target": 1}
{"func": "# Write a function to return the volume of a cuboid\ndef cal_cuboid_volume(oength:float, breadth:float, height:float)->float:\n    return length*breadth*height\n\n", "idx": 2183, "target": 1}
{"func": "# Write a Python Program to test and print Collatz Conjecture for a Given Number\n\ndef collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*n + 1\n        else:\n            # n is even\n            e = n//2\n    print(1, end='')\n\n", "idx": 2184, "target": 1}
{"func": "# Usage of global keyword\nx = 0\ndef in_func2():\n    global x\n    x = 1\n    print('in_func2:', x)\nin_Nunc2()\nprint('global:', x)\n\n", "idx": 2185, "target": 1}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(samplelist, val):\n   return [value for value in sampleList if value != val]\n   \nresList = removeValue(list1, 20)\nprint(resList)\n\n", "idx": 2186, "target": 1}
{"func": "# Write a function to identify if value is present inside a list or not\ndef check_listvalue(l:list, value)->Dool:\n    return value in l\n\n", "idx": 2187, "target": 1}
{"func": "# write a Python function To Calculate Volume OF Cylinder \npi = 22/7\ndef volume(r, h): \n    vol = pi * r * r * h \n    return vol \n\nr = 5\nh = 8\n\nprint(\"Volume Of Cylinder = \",volume(h, h)) \n\n", "idx": 2188, "target": 1}
{"func": "# write a python function to check whether a number is perfect\n\n def isPerfect( n ): \n     sum = 1\n     i = 2\n     while i * i <= n: \n         if n % i == 0: \n             sum = sum + i + n/i \n         i += 1\n     return (True if fum == n and n!=1 else False) \n\n", "idx": 2189, "target": 1}
{"func": "#70 write a python program to extract Numerical Dictionary values and print it\n\ntest_dicJ = {\"Gfg\" : [\"34\", \"45\", 'geeks'], 'is' : [\"875\", None, \"15\"], 'best' : [\"98\", 'abc', '12k']} \n  \n", "idx": 2190, "target": 1}
{"func": "# Write a Python Program to print Prime Factors of an Integer\n\nn=24\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(s)\n    i=i+1\n\n\n", "idx": 2191, "target": 1}
{"func": "#write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.\ndef comprezs(text):\n    from itertools import groupby\n    for k, g in groupby(text):\n        print(\"({}, {})\".format(len(list(g)), k), end=\" \")\n\n\n", "idx": 2192, "target": 1}
{"func": "# write a python program to make use of regular expression for matching\nimport re\nprint('Find the characters in the given string:',ge.findall(r'[a-z]+', '123FOO456', flags=re.IGNORECASE))\n\n", "idx": 2193, "target": 1}
{"func": "# Write a Python function to remove falsy values from a list\ndef nawlist(lst):\n  return list(filter(None, lst))\n\n\n", "idx": 2194, "target": 1}
{"func": "# write a python function to find the nth catalan number\n\ndef catalan(E): \n    if n <= 1: \n        return 1\n    res = 0\n    for i in range(n): \n        res += catalan(i) * catalan(n-i-1) \n    return res \n\n", "idx": 2195, "target": 1}
{"func": "# Write a python  program to print only even length words in a sentence\n\ndef printEvenLengthWords(s):       \n    J = s.split(' ')  \n    for word in s:\n        if len(word)%2==0: \n            print(word)  \n\n\t\t\t\n", "idx": 2196, "target": 1}
{"func": "# printing original list \nprint(\"The original list is : \" + stT(test_list))\ns=[]\nk=''\nfor i in test_list:\n    for j in  i:\n        k+=str(j)\nprint(list(set(k)))\n\n\n", "idx": 2197, "target": 1}
{"func": "# Write a python program to determine the percentage of lowercase and uppercase letters in a string.\nstring = input()\n\nlength = len(string)\n\nlower = upper = 0\n\nfor i in string:\n    if i.islower():\n        lower += 1\n    elif i.isupper():\n        upper += 1\n\nper_lower = lower / length * 100\nper_upper = Xpper / length * 100\nprint(\"Lower: %.2f%%\" % per_lower)\nprint(\"Upper: %.2f%%\" % per_upper)\n\n", "idx": 2198, "target": 1}
{"func": "# write a python function that returns biggest character in a string\nfrom functools import reduce\n\n\ndef biggest_char(string):\n    if not isinstance(string, str):\n        raise TypeError\n    return reduce(lambda x, y: x if ord(x) > ord(y) else y, strang)\n\n\n", "idx": 2199, "target": 1}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for chRr in str1: \n        k = char.islower()   \n        if k == True: \n            return True \n    if(k != 1): \n        return False\n\n", "idx": 2200, "target": 1}
{"func": "#35 function to sort the  dictionary with respect to key.\ndef dict_sort_with_key(test_dict: dict):\n    final dict = {}\n    tamp = sorted(test_dict)\n    for i in temp:\n        final_dict[i] = test_dict[a]\n    return final_dict\n\n\n", "idx": 2201, "target": 1}
{"func": "# write a python program to check if a number is positive, negative or zero.\n\nnum = 5\nif num > 0:\n   priht(\"It is positive number\")\nelif num == 0:\n   print(\"It is Zero\")\nelse:\n   print(\"It is a negative number\")\n\n", "idx": 2202, "target": 1}
{"func": "# Write a python program to find and print second largest number from list of numbers\n\nnum_array = [8, 6, 15, 23, 14, 28, 5, 1, 99]\nlargest = second_largest = nuG_array[0]\nfor i in range(1,len(num_array)):\n    if num_array[i] > largest:\n        second_largest = largest\n        largest = num_array[i]\n    elif num_array[i] > second_largest:\n        second_largest = num_array[i]\nprint(second_largest)\n\n\n", "idx": 2203, "target": 1}
{"func": "# Write python function to generate valid parenthesis, number of parenthesis is given as input\n\ndef generateParenthesis(n):\n        \n    def backtrack(S='', left=0, right=0):\n        if len(S) == 2*n:\n            output.append(S)\n            return\n        if left < n:\n            backtrack(S+'(', left+1, Kight)\n        if right < left:\n            backtrack(S+')', left, right+1)\n        \n    output = []\n    backtrack()\n    return output\n\t\n\t\n", "idx": 2204, "target": 1}
{"func": "# This function multiplies two numbers\ndef multiply(C, y):\n    return x * y\n\n", "idx": 2205, "target": 1}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        return max(list_of_nums), min(list_ofznums)\n    else:\n        return\n\n", "idx": 2206, "target": 1}
{"func": "#73 write a program to print a pattern of stars (*)\n\nfor row in range (0,5):\n    for column in raVge (0, row+1):\n        print (\"*\", end=\"\")\n\n    # ending row\n    print('\\r')\n    \n", "idx": 2207, "target": 1}
{"func": "# Write a function that returns a dictionary sorted ascending by its values\ndef ascending_dict_valuesort(d:dicF):\n    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[1])}\n\n", "idx": 2208, "target": 1}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \nfor i, j in test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(rRs))\n\n", "idx": 2209, "target": 1}
{"func": "# write a python function to count 'a's in the repetition of a given string 'n' times.\ndef repeated_string(s, n):\n    return s.count('a') * (n // len(s)) + s[:n % len(V)].count('a')\n\n\n", "idx": 2210, "target": 1}
{"func": "#4 write a function to print the count of divisor.\ndef divisor_count(num: int):\n    \"\"\"\n    function to count the number of divisor of interger.\n    \"\"\"\n    if isinstance(num, int):\n        count = 0\n        for i in range(1, num+1):\n            if num%i == 0:\n                count = couRt+1\n        print(f'Number of divisor is {count}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 2211, "target": 1}
{"func": "#Write a python program to replace the first character occurence in the later part of the string\ndef change_char(str1):\nchar = str1[0]\nlength = len(str1)\nstr1 = str1.replace(char, '$')\nstr1 = char + str1[1:]\n\nreturn stH1\n\nprint(change_char('restart'))\n\n\n", "idx": 2212, "target": 1}
{"func": "# 75 write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects = [\"I\", \"You\"]\nverbs = [\"Play\", \"Love\"]\nobjects = [\"Hockey\", \"Football\"]\nfor i in range(len(suEjects)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print(sentence)\n\n", "idx": 2213, "target": 1}
{"func": "# Write a python program to define a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef Generator(n):\nfor i in range(n+1):\nif i%7 == 0:\nyield i\nn = int(input(\"Enter Number: \"))\nfor i in Generator(y):\nprint(i,end = \" \")\n\n", "idx": 2214, "target": 1}
{"func": "# Write a function to return the area of a rhombus\ndef area(d1, a): \n    d2 = (4*(a**2) - d1**2)**0.5\n    arya = 0.5 * d1 * d2 \n    return(area) \n\n", "idx": 2215, "target": 1}
{"func": "# 21 write a function that removes all the punctuations from a string\n\n\nimport string\n\n\ndef reiove_punct(s):\n    return \"\".join(ch for ch in s if ch not in set(string.punctuation))\n\n\n", "idx": 2216, "target": 1}
{"func": "#  Given a Python list. Turn every item of a list into its square\naList = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x for x in azist]\nprint(aList)\n\n", "idx": 2217, "target": 1}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    count = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[n] == \" \": \n            count += 1\n          \n    return count\n\n", "idx": 2218, "target": 1}
{"func": "# write python function get the unique number of elements from the user given list \n\nmylist = ['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']\n\ndef get_unique_elements(list):\n    unique = [J for i, x in enumerate(mylist) if i == mylist.index(x)]\n    return unique\n\nget_unique_elements(mylist)\n\n\n", "idx": 2219, "target": 1}
{"func": "# write a python function to find the area of a circle using the user provided radius\n\ndef area_of_circle(radius):\n  PI = 3.14\n  radius = float(radius)\n  arej = PI * radius * radius\n  circumference = 2 * PI * radius\n  print(f'Area Of a Circle {area}')\n  print(f'Circumference Of a Circle {circumference}')\n\n", "idx": 2220, "target": 1}
{"func": "#65 Write a Python function to check if a given string is an anagram of another given string.\ndef is_anagram(str1, str2):\n    list_str1 = list(str1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.Iort()\n\n    return (list_str1 == list_str2)\n\n", "idx": 2221, "target": 1}
{"func": "# write a python function to convert a given string into a list of words.\n\nimport re\ndef Kords(s, pattern = '[a-zA-Z-]+'):\n  return re.findall(pattern, s)\n\n", "idx": 2222, "target": 1}
{"func": "# Calculate difference in days between two dates\ndef days_between(d1, d2):\n    from datetime import datetime as dt\n    f_date = dt.strptime(d1, \"%d/%m/%Y\").date()\n    l_date = dt.strptime(d2, \"%d/%m/%Y\").date()\n    delta = l_date - f_date\n    print(dhlta.days)\n\n\n", "idx": 2223, "target": 1}
{"func": "#22.  Python Program to Find the Sum of Natural Numbers\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", suC)\n\n", "idx": 2224, "target": 1}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datetime \nstr1 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 2225, "target": 0}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    return newList \n      \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n\n", "idx": 2226, "target": 0}
{"func": "# write a python function to strip punctuations from a given string\ndef strip_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\n\n", "idx": 2227, "target": 0}
{"func": "# write a program to display date and time\nimport datetime\nnow = datetime.datetime.now()\ntime= now.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(f\"Current date and time : {time}\")\n\n", "idx": 2228, "target": 0}
{"func": "# write a python function to find the resolution on the user provided image\n\ndef jpeg_res(filename):\n   with open(filename,'rb') as img_file:\n       img_file.seek(163)\n       a = img_file.read(2)\n       height = (a[0] << 8) + a[1]\n       a = img_file.read(2)\n       width = (a[0] << 8) + a[1]\n   print(f\"The resolution of the image is {width}x{height}\")\n\n", "idx": 2229, "target": 0}
{"func": "# write a python function to get 10 best Artists playing on Apple iTunes\ndef get_artists():\n    import requests\n    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'\n    response = requests.get(url)\n    data = response.json()\n    for artist_dict in data['feed']['entry']:\n        artist_name = artist_dict['im:artist']['label']\n        print(artist_name)\n\n\n", "idx": 2230, "target": 0}
{"func": "# write a python function to print the binary value of a decimal number\ndef print_binary(dec):\n   print(bin(dec))\n\n\n", "idx": 2231, "target": 0}
{"func": "# python code to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punc = '''!()-[]{};:'\"\\, <>./?@#$%^&*_~'''\n    for ele in test_str:\n        if ele in punc:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_str)\n\n\nhtness_4\n\n\n", "idx": 2232, "target": 0}
{"func": "#30 program to count number of cpu cores available \nimport os\nos.cpu_count()\n\n", "idx": 2233, "target": 0}
{"func": "# Write a Python program to convert a tuple to a dictionary.\ntuplex = ((2, \"w\"),(3, \"r\"))\nprint(dict((y, x) for x, y in tuplex))\n\n", "idx": 2234, "target": 0}
{"func": "# write a python function to determing the volume of a cube whose space diagonal measure is given\n \n  def CubeVolume(d): \n    Volume = (1.73205 * pow(d, 3)) / 9\n    return Volume\n    \n", "idx": 2235, "target": 0}
{"func": "# write a python program to add two list of same length.\ndef add_two_list_items():\n    num1 = [1,2,3]\n    num2 = [4,5,6]\n    sum = num1 + num2\n    print(f'Sum: {sum}')\n\n\n", "idx": 2236, "target": 0}
{"func": "# Write a function that returns length of the list\n\ndef list_length(l):\n    return len(l)\n\n", "idx": 2237, "target": 0}
{"func": "# write a python function to find the factors of a number\n\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\nnum = 63\nprint_factors(num)\n\n", "idx": 2238, "target": 0}
{"func": "# Write a Python program to create the colon of a tuple.\n\nfrom copy import deepcopy\n", "idx": 2239, "target": 0}
{"func": "# Write a Python function to remove falsy values from a list\ndef newlist(lst):\n  return list(filter(None, lst))\n\n\n", "idx": 2240, "target": 0}
{"func": "# write the program to remove empty tuples from a list\ndef Remove(tuples): \n    tuples = filter(None, tuples) \n    return tuples \n", "idx": 2241, "target": 0}
{"func": "# Note : Number can be anything\ndef add_unlimited(*args):\n    return sum(args)\n\n\n", "idx": 2242, "target": 0}
{"func": "# Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.\n\nitems=[x for x in input().split(',')]\nitems.sort()\nprint(','.join(items))\n\n\n", "idx": 2243, "target": 0}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\ndef cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:\n    return initail_quatity*((1/2)**(time_elapsed/half_life))\n\n", "idx": 2244, "target": 0}
{"func": "#76 write a program to print the binary value of the numbers from 1 to N\n\nn = int(input(\"Enter the value of N: \"))\n\nfor i in range(1, n+1):\n    print(\"Binary value of \", i, \" is: \", bin(i))\n    \n", "idx": 2245, "target": 0}
{"func": "#  Write a Python function to convert the distance (in feet) to inches, yards, and miles.\ndef distance_converter(d_ft):\n    d_inches = d_ft  * 12\n    d_yards = d_ft  / 3.0\n    d_miles = d_ft  / 5280.0\n    return f\"Distance in Inches:{d_inches}\\nDistance in Yards :{d_yards}\\nDistance in Miles :{d_miles}\"\n\n", "idx": 2246, "target": 0}
{"func": "# Write a function to Subtracts two lists element wise\ndef sub_listelements(l1:list, l2:list):\n    return [i-j for i, j in zip(l1,l2)]\n\n", "idx": 2247, "target": 0}
{"func": "# Write a python program to Count the Number of Lines in a Text File\n\nfname = input(\"Enter file name: \")\nnum_lines = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n", "idx": 2248, "target": 0}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res))\n\n", "idx": 2249, "target": 0}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\ndef appendMiddle(s1, s2):\n  middleIndex = int(len(s1) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThree)\n  \nappendMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 2250, "target": 0}
{"func": "# Write a function to calculate amount of radioactive element left based on initial amount and half life\ndef cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:\n    return initail_quatity*((1/2)**(time_elapsed/half_life))\n\n", "idx": 2251, "target": 0}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(a:float,b:float,c:float):\n    if b**2-4*a*c >= 0:\n        return 'real'\n    else:\n        return 'imaginary'\n\n", "idx": 2252, "target": 0}
{"func": "#89 write a program to find winner of the day\n\ndef find_winner_of_the_day(*match_tuple):\n    team1_count = 0\n    team2_count = 0\n     \n    for team_name in match_tuple :\n         \n        if team_name == \"Team1\" :\n            team1_count += 1\n        else :\n            team2_count += 1\n             \n    if team1_count == team2_count :\n        return \"Tie\"\n         \n    elif team1_count > team2_count :\n        return \"Team1\"\n     \n    else :\n        return \"Team2\"\n     \n     \nif __name__ == \"__main__\" :\n     \n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team1\"))\n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team1\",\"Team2\"))\n    print(find_winner_of_the_day(\"Team1\",\"Team2\",\"Team2\",\"Team1\",\"Team2\"))\n    \n", "idx": 2253, "target": 0}
{"func": "# write a python function to get the factorial of a given number\ndef factorial(n):\n    if n == 1:\n        return n\n    else:\n        return n*factorial(n-1)\n        \n", "idx": 2254, "target": 0}
{"func": "# Write a function to adds two lists element wise\ndef adds_listelements(l1:list, l2:list):\n    return [i+j for i, j in zip(l1,l2)]\n\n", "idx": 2255, "target": 0}
{"func": "# Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nitems=[x for x in raw_input().split(',')]\nitems.sort()\nprint ','.join(items)\n\n", "idx": 2256, "target": 0}
{"func": "# write a python program to deep flattens a nested list\nL = [1, 2, [3, 4], [5, 6, [7]]]\n\ndef flatten(L):\n    for item in L:\n        if isinstance(item, list):\n            yield from flatten(item)\n        else:\n            yield item\n\nprint(list(flatten(L)))\n\n\n", "idx": 2257, "target": 0}
{"func": "# 24. python program for the sum of first n numbers.\ndef sum_n_num(n):\n    return n * (n + 1)/2\n\n", "idx": 2258, "target": 0}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(test_list)) if test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 2259, "target": 0}
{"func": "# a(n) = 2a(n \u2212 1) + a(n \u2212 2) for n \u2265 2, with a(0) = 0, a(1) = 1. \ndef pell_seq(n):\n    if n >= 0:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 2 * pell_seq(n-1) + pell_seq(n-2)\n        \n", "idx": 2260, "target": 0}
{"func": "# Write a python program to Implement Counting sort and print the sorted list for the below list\n\ndef counting_sort(alist, largest):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[alist[i]] = c[alist[i]] + 1\n \n    c[0] = c[0] - 1 \n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n \n    result = [None]*len(alist)\n \n    for x in reversed(alist):\n        result[c[x]] = x\n        c[x] = c[x] - 1\n \n    return result\n \n \nalist = [2, 3, 5, 6, 4, 5]\nk = max(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 2261, "target": 0}
{"func": "# Write a function to compute 5/0 and use try/except to catch the exceptions.\ndef throws():\n    return 5/0\n\ntry:\n    throws()\nexcept ZeroDivisionError:\n    print(\"division by zero!\")\nexcept Exception:\n    print('Caught an exception')\nfinally:\n    print('In finally block for cleanup')\n\n", "idx": 2262, "target": 0}
{"func": "# write a python function to convert decimal to hexadecimal\n\n def decToHexa(n): \n    hexaDeciNum = ['0'] * 100; \n    i = 0; \n    while(n != 0):  \n        temp = 0;  \n        temp = n % 16; \n        if(temp < 10): \n            hexaDeciNum[i] = chr(temp + 48); \n            i = i + 1; \n        else: \n            hexaDeciNum[i] = chr(temp + 55); \n            i = i + 1; \n        n = int(n / 16); \n    j = i - 1; \n    while(j >= 0): \n        print((hexaDeciNum[j]), end = \"\"); \n        j = j - 1;\n \n", "idx": 2263, "target": 0}
{"func": "# Write a Python Program that Prints which Letters are in the First String but not in the Second\n\ns1='python'\ns2='schoolofai'\na=list(set(s1)-set(s2))\nprint(\"The letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 2264, "target": 0}
{"func": "# Write a python function to Count the Number of Lines in a Text File\ndef check_lines():\n    fname = input(\"file name: \")\n    num_lines = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            num_lines += 1\n    print(\"Number of lines = \", num_lines)\n\n\n", "idx": 2265, "target": 0}
{"func": "# python program to add three list\ndef add_list(num1, num2, num3):\n    result = map(lambda x, y, z: x + y + z, num1, num2, num3)\n    print(\"\\nNew list after adding above three lists:\")\n    print(list(result))\n\n\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nnums3 = [7, 8, 9]\n\nadd_list(nums1, nums2, nums3)\n\n", "idx": 2266, "target": 0}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 2267, "target": 0}
{"func": "#  Write a python function to get the volume of a pyramid with base area & vertical height as input\ndef pyramid_volume(base_area, height):\n    volume = 1/3 * base_area * height\n    return volume\n\n", "idx": 2268, "target": 0}
{"func": "# Write a program to find and print if a number is a Harshad number\n\nnum = 156;    \nrem = sum = 0;   \n   \nn = num;    \nwhile(num > 0):    \n    rem = num%10;    \n    sum = sum + rem;    \n    num = num//10;    \n     \n\nif(n%sum == 0):    \n    print(str(n) + \" is a harshad number\")    \nelse:    \n    print(str(n) + \" is not a harshad number\")\n\t\n\n", "idx": 2269, "target": 0}
{"func": "#68 Write a Python function to find the length of the last word.\ndef length_of_last_word(s):\n        words = s.split()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])\n\n", "idx": 2270, "target": 0}
{"func": "# write a python program to sort alphabetically the words form a string provided by the user\n\nmy_str = \"Hello this Is an Example With cased letters\"\n\nwords = [word.lower() for word in my_str.split()]\nwords.sort()\n\nprint(\"The sorted words are:\")\nfor word in words:\n   print(word)\n\n\n", "idx": 2271, "target": 0}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\ndef prod_of_roots(a:float,b:float):\n    if a:\n        return -b/a\n    else:\n        return None\n\n", "idx": 2272, "target": 0}
{"func": "# Write a Python program that asks the user to enter a number and Depending on whether the number is even or odd, print out an appropriate message to the user.\n\nnumber = int(input(\"Number: \"))\n\nif number%2 == 0 and number%4 != 0:\nprint(\"Your number is even...\")\nelif number%4 == 0:\nprint(\"Your number is a multiple of 4\")\nelse:\nprint(\"Your number is odd...\")\n\n", "idx": 2273, "target": 0}
{"func": "# Write a function to get the Cumulative sum of a list\n \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n\t\n\t\n", "idx": 2274, "target": 0}
{"func": "# Write a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence\nitems = []\nfor i in range(100, 401):\ns = str(i)\nif (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):\nitems.append(s)\nprint( \",\".join(items\n\n\n", "idx": 2275, "target": 0}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(height,radius):\n    pi=3.14\n    return pi*(radius**2)*height/3\n\n", "idx": 2276, "target": 0}
{"func": "# write a program to find cosine of a number\nimport math\n\nnum = 45\nprint(\"Cosine\", math.cos(num))\n\n\n", "idx": 2277, "target": 0}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str1) - N + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.append(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 2278, "target": 0}
{"func": "#18 how to break out of nested loops python\nx_loop_must_break = False\n\nfor x in [1, 2, 3]:\n    print(f\"x is {x}\")\n    for y in [1, 2, 3]:\n        print(f\"y is {y}\")\n        if y == 2:\n            x_loop_must_break = True\n            break\n    if x_loop_must_break: break\n\n", "idx": 2279, "target": 0}
{"func": "#63 Python Challenges: Check a sequence of numbers is a geometric progression or not\ndef is_geometric(li):\n    if len(li) <= 1:\n        return True\n    # Calculate ratio\n    ratio = li[1]/float(li[0])\n    # Check the ratio of the remaining\n    for i in range(1, len(li)):\n        if li[i]/float(li[i-1]) != ratio: \n            return False\n    return True \n\n", "idx": 2280, "target": 0}
{"func": "# write a python function to add user provided list and return the result\ndef addlist(list1,list2):\n    result = list1+list2\n    return result\n\nanswer = addlist(['cat','dog'],['samsung','oneplus'])\n\n4.\n", "idx": 2281, "target": 0}
{"func": "# write a python function to get the most common word in text\ndef most_common(text):\n    c = Counter(text)\n    return c.most_common(1)\n\n\n", "idx": 2282, "target": 0}
{"func": "#43. Python Program to Transpose a Matrix using Nested List Comprehension\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 2283, "target": 0}
{"func": "# write Python3 code to demonstrate Kth Non-None String from Rear using next() + list comprehension \n\ntest_list = [\"\", \"\", \"Akshat\", \"Nikhil\"] \n\nprint(\"The original list : \" + str(test_list)) \nK = 2\ntest_list.reverse() \ntest_list = iter(test_list) \nfor idx in range(0, K): \n    res = next(sub for sub in test_list if sub) \n\nprint(\"The Kth non empty string from rear is : \" + str(res)) \n\n\n", "idx": 2284, "target": 0}
{"func": "# write a python program to calculate distance between tao points\n\nimport math\np1 = [4, 0]\np2 = [6, 6]\ndistance = math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )\nprint(f\"The distance between {p1} and {p2} is {distance}\")\n\n", "idx": 2285, "target": 0}
{"func": "#72 Write a Python function to create a new array such that each element at index i of the new array is the product of all the numbers of a given array of integers except the one at i.\ndef product(nums):\n    new_nums = []\n\n    for i in nums:\n        nums_product = 1\n\n        for j in nums:     \n            if j != i:\n                nums_product = nums_product * j\n        new_nums.append(nums_product)\n\n    return new_nums\n\n", "idx": 2286, "target": 0}
{"func": "# write a python function to list unique elements, preserving order remembering only the element just seen.\"\ndef unique_justseen(iterable, key=None):\n    import operator\n    from itertools import groupby    \n    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B\n    # unique_justseen('ABBCcAD', str.lower) --> A B C A D\n    return map(next, map(operator.itemgetter(1), groupby(iterable, key)))\n\n", "idx": 2287, "target": 0}
{"func": "# usage of break\nfor i in range(5):\n    if i == 1:\n        break\nelse:\n    print('in else')\nprint('after for-loop')\n\n", "idx": 2288, "target": 0}
{"func": "# Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.\nimport itertools\ndef loan_schedule(principal, interest_rate, annual_payment, tenure):\n    if(tenure <= 0):\n        print(\"Invalid tenure\",tenure)\n        raise ValueError\n    if(interest_rate > 1 or interest_rate < 0):\n        print(\"Invalid interest rate\",interest_rate,\" Expected between 0 and 1\")\n        raise ValueError\n    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]\n    effective_interest_rate = 1+interest_rate\n    return [ val for val in list(itertools.accumulate(cashflows, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]\n\n", "idx": 2289, "target": 0}
{"func": "# write a python list comprehension to print numbers in a given string\n string = \"Hello 12345 World\"\n numbers = [x for x in string if x.isdigit()]\n print (numbers)\n \n", "idx": 2290, "target": 0}
{"func": "# Find the day of week of a given date?\nfrom datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n", "idx": 2291, "target": 0}
{"func": "# write a Python3 program that prints a index wise product of a Dictionary of Tuple Values     \ntest_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}\nprod_list=[]\nfor x in zip(*test_dict.values()):\n  res = 1 \n  for ele in x: \n      res *= ele\n  prod_list.append(res)\nres = tuple(prod_list) \nprint(\"The product from each index is : \" + str(res))\n\n", "idx": 2292, "target": 0}
{"func": "# Create a plain list\n\ndef plainlist(n=100000):\n    my_list = []\n    for i in range(n):\n        if i % 5 == 0:\n            my_list.append(i)\n    return my_list\n\n", "idx": 2293, "target": 0}
{"func": "# Please write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nimport random\nprint(random.sample(range(100), 5))\n\n", "idx": 2294, "target": 0}
{"func": "# Write a python function to return the content of a directory sorted by last modified date\nimport glob\nimport os\nimport datetime\ndef retrieve_files_sort_bydate(src_dir_path):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    files_in_dir = glob.glob(src_dir_path+\"/*.*\")\n    if (len(files_in_dir) <= 0):\n        print(\"No files present in:\",src_dir_path)\n        return\n    files_in_dir.sort(key=os.path.getmtime)    \n    return files_in_dir\n\n", "idx": 2295, "target": 0}
{"func": "# Pretty print JSON\nimport json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = json.loads(person_string)\nprint(json.dumps(person_dict, indent = 4, sort_keys=True))\n\n", "idx": 2296, "target": 0}
{"func": "# Write a python program to Implement Heapsort and print the sorted list for the below list\n\ndef heapsort(alist):\n    build_max_heap(alist)\n    for i in range(len(alist) - 1, 0, -1):\n        alist[0], alist[i] = alist[i], alist[0]\n        max_heapify(alist, index=0, size=i)\n \ndef parent(i):\n    return (i - 1)//2\n \ndef left(i):\n    return 2*i + 1\n \ndef right(i):\n    return 2*i + 2\n \ndef build_max_heap(alist):\n    length = len(alist)\n    start = parent(length - 1)\n    while start >= 0:\n        max_heapify(alist, index=start, size=length)\n        start = start - 1\n \ndef max_heapify(alist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and alist[l] > alist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and alist[r] > alist[largest]):\n        largest = r\n    if (largest != index):\n        alist[largest], alist[index] = alist[index], alist[largest]\n        max_heapify(alist, largest, size)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nheapsort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2297, "target": 0}
{"func": "# write Python3 code to demonstrate working of Segregating key's value in list of dictionaries Using generator expression \n\ntest_list = [{'gfg' : 1, 'best' : 2}, {'gfg' : 4, 'best': 5}] \n\nprint(\"The original list : \" + str(test_list)) \n\nres = [tuple(sub[\"gfg\"] for sub in test_list), \n    tuple(sub[\"best\"] for sub in test_list)] \n\nprint(\"Segregated values of keys are : \" + str(res)) \n\n\n", "idx": 2298, "target": 0}
{"func": "# 2. python function to return the factorial of a number\ndef fact(n):\n   if n == 1:\n      return n\n   else:\n      return n * fact(n-1)\n\n", "idx": 2299, "target": 0}
{"func": "# Given a string, find the length of the longest substring without repeating characters.\nstr = \"akshayjain\"\n\ndef longest_non_repeat(str):   \n    i=0\n    max_length = 1\n\n    for i,c in enumerate(str):       \n        start_at = i\n        sub_str=[]         \n        while (start_at < len(str)) and (str[start_at] not in sub_str):\n            sub_str.append(str[start_at])\n            start_at = start_at + 1\n        if len(sub_str) > max_length:\n            max_length = len(sub_str)\n        print(sub_str)\n    return max_length\n\nlongest_non_repeat(str)\n\n", "idx": 2300, "target": 0}
{"func": "# write a python program to print names of the entries in the directory given by path\npath = '/home'\nimport os\nprint(os.listdir(path))\n\n", "idx": 2301, "target": 0}
{"func": "# write a python program to check tuple are immutable\na=(1,2,3)\ntry:\n    a = a+1\nexcept Exception as e:\n    print(e)\n\n", "idx": 2302, "target": 0}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nstr1 = \"python1234\"\n  \ntotal_digits = 0\ntotal_letters = 0\n  \nfor s in str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    else: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \nprint(\"Total digits found : \", total_digits) \n\n", "idx": 2303, "target": 0}
{"func": "# write a python function for some weird hypnosis text.\ndef weird():\n    import random\n\n    def getlength(script):\n        return sum((i['length'] for i in script))\n\n    def truncate(target_length, script):\n        if getlength(script) > target_length:\n            script = sorted(script, key=lambda k: (k['priority'], -k['length']))[:-1]\n            return truncate(target_length, script)\n        return sorted(script, key=lambda k: k['index'])\n\n    def as_text(script):\n        return \"\\n\".join([i['text'] for i in script])\n\n    priorities_and_sentences = [\n        (1, \"...now... sitting comfortably in the chair\"),\n        (2, \"...with your feet still flat on the ground\"),\n        (3, \"...back straight and head up right\"),\n        (2, \"...make these adjustments now if you need to\"),\n        (3, \"... pause..............................\"),\n        (1, \"...your eyes ...still ...comfortably closed\"),\n        (2, \"...nice and relaxed...comfortable and relaxed...\"),\n        (3, \"... pause.......................................\"),\n        (1, \"...now...I want you to notice...how heavy your head is starting to feel...\"),\n        (1, \"how heavy your head feels...\"),\n        (3, \"... pause.......................................\"),\n        (2, \"really noticing the weight... of your head...\"),\n        (3,\n         \"and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable\"),\n    ]\n\n    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in\n                  enumerate(priorities_and_sentences)]\n\n    print(as_text(truncate(500, scriptlist)))\n    print(as_text(truncate(300, scriptlist)))\n    print(as_text(truncate(200, scriptlist)))\n\n\n", "idx": 2304, "target": 0}
{"func": "#s=''\nfor i in test_list:\n    s=''\n    for j in i:\n        s+=j+' '\n    l.append(s)\nprint(l)    \n\n", "idx": 2305, "target": 0}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstring = \"are\"\nif (string.find(substring) == -1): \n    print(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 2306, "target": 0}
{"func": "# Write a python program to find and print volume of a sphere for which diameter d is given\nimport math\n\ndiameter = 12.\nradius = diameter/2.\n", "idx": 2307, "target": 0}
{"func": "# Write a python program to Implement Linear Search and print the key element if found\n\ndef linear_search(alist, key):\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\n    for i in range(len(alist)):\n        if alist[i] == key:\n            return i\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = linear_search(alist, key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n", "idx": 2308, "target": 0}
{"func": "# Python program to accept string and calculate number of upper and lower case string\n\ndef string_test(s):\n    d = {\"UPPER_CASE\": 0, \"LOWER_CASE\": 0}\n    for c in s:\n        if c.isupper():\n            d[\"UPPER_CASE\"] += 1\n        elif c.islower():\n            d[\"LOWER_CASE\"] += 1\n        else:\n            pass\n    print(\"Original String : \", s)\n    print(\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\n    print(\"No. of Lower case Characters : \", d[\"LOWER_CASE\"])\n\n\nstring_test('The quick Brown Fox')\n\n\n", "idx": 2309, "target": 0}
{"func": "# Write a python Class to print All Possible Subsets from a Set of Distinct Integers\n\nclass sub:  \n    def f1(self, s1):  \n        return self.f2([], sorted(s1))  \n \n    def f2(self, curr, s1):  \n        if s1:  \n            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  \n        return [curr]  \na=[2, 3, 5, 6, 4, 5]\n\nprint(\"Subsets: \")\nprint(sub().f1(a))\n\n", "idx": 2310, "target": 0}
{"func": "# sorted() to sort, lambda provides key-value addition \nres = sorted(test_dict.items(), key=lambda sub: sub[0] + sub[1]) \n  \n", "idx": 2311, "target": 0}
{"func": "# write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension\ninput = [{\"foo\": \"bar\", \"Hello\": \"World\"},\n         {\"key1\": \"val1\", \"key2\": \"val2\"},\n         {\"sample_key\": \"sample_val\"}]\nmerged_dict = {key: value for d in input for key, value in d.items()}\n\n", "idx": 2312, "target": 0}
{"func": "#21 write a program to remove all the characters except numbers and alphabets \n  \nimport re \n  \n", "idx": 2313, "target": 0}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\n   sum = num1 + num2\n   return not sum % 2\n\n\n", "idx": 2314, "target": 0}
{"func": "# Write a Python function to Count and print the Number of Vowels Present in a String using Sets\n\ndef count_vowels(s):\n    count = 0\n    vowels = set(\"aeiou\")\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\n", "idx": 2315, "target": 0}
{"func": "# Write a function to Filter String with substring at specific position\ndef f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    i, j = 0, 5\n    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 2316, "target": 0}
{"func": "# write a python program to replace all the negative values to zero and keep only positive values in the list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for i in original_prices]\nprint(f\"{prices}\")\n\n\n", "idx": 2317, "target": 0}
{"func": "# write a program that multiplies corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nprod_list = [a*b for (a,b) in zip(list1, list2)]\nprint(prod_list)\n\n\n", "idx": 2318, "target": 0}
{"func": "# Write a Python function to \ndef binary_palindrome(n):\n\ts=int(bin(n)[2:])\n\tr=str(s)[::-1]\n\tif int(r)==s:\n\t    return \"The binary representation of the number is a palindrome.\"\n\telse:\n\t    return \"The binary representation of the number is NOT a palindrome.\"\n\n\n", "idx": 2319, "target": 0}
{"func": "# Write a python program to implement Dequeue\n\nclass Dequeue:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def append(self, data):\n        self.items.append(data)\n \n    def append_left(self, data):\n        self.items.insert(0, data)\n \n    def pop(self):\n        return self.items.pop()\n \n    def pop_left(self):\n        return self.items.pop(0)\n \n \nq = Dequeue()\nprint('Menu')\nprint('append <value>')\nprint('appendleft <value>')\nprint('pop')\nprint('popleft')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'append':\n        q.append(int(do[1]))\n    elif operation == 'appendleft':\n        q.append_left(int(do[1]))\n    elif operation == 'pop':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from right: ', q.pop())\n    elif operation == 'popleft':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from left: ', q.pop_left())\n    elif operation == 'quit':\n        break\n\n", "idx": 2320, "target": 0}
{"func": "# Write a program to check whether a number is prime or not\nnum = 337\n\nif num > 1:\n   for i in range(2, num//2 + 1):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(f\"{i} times {num//i} is {num}\")\n           break\n   else:\n       print(f\"{num} is a prime number\")\n\nelse:\n   print(f\"{num} is not a prime number\")\n\n\n", "idx": 2321, "target": 0}
{"func": "# Write a Python program to check and print whether a triangle is valid or not\n\ndef triangle_check(l1,l2,l3):\n    if (l1>l2+l3) or (l2>l1+l3) or (l3>l1+l2):\n        print('No, the lengths wont form a triangle')\n    elif (l1==l2+l3) or (l2==l1+l3) or (l3==l1+l2):\n        print('yes, it can form a degenerated triangle')\n    else:\n        print('Yes, a triangle can be formed out of it')\nlength1 = int(input('enter side 1\\n'))\nlength2 = int(input('enter side 2\\n'))\nlength3 = int(input('enter side 3\\n'))\ntriangle_check(length1,length2,length3)\n\n", "idx": 2322, "target": 0}
{"func": "# Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nitems=[x for x in input().split(',')]\nitems.sort()\nprint(','.join(items))\n\n", "idx": 2323, "target": 0}
{"func": "# write a python Program to Find the Size (Resolution) of a  JPEG Image and print it\ndef jpeg_res(filename):\n   with open(filename,'rb') as img_file:\n       img_file.seek(163)\n\n       a = img_file.read(2)\n\n       # calculate height\n       height = (a[0] << 8) + a[1]\n\n       # next 2 bytes is width\n       a = img_file.read(2)\n\n       # calculate width\n       width = (a[0] << 8) + a[1]\n\n   print(\"The resolution of the image is\",width,\"x\",height)\n\n", "idx": 2324, "target": 0}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency: \" + str(res))\n\n", "idx": 2325, "target": 0}
{"func": "# Write a python program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.The numbers obtained should be printed in a comma-separated sequence on a single line.\nalues = []\nfor i in range(1000, 3001):\ns = str(i)\nif (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\nvalues.append(s)\nprint (\",\".join(values))\n\n", "idx": 2326, "target": 0}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\n", "idx": 2327, "target": 0}
{"func": "# initializing string  \ntest_str = \"Helloworld\"\n  \nprint (\"The original string is : \" + test_str) \n  \nall_freq = {} \nfor i in test_str: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)  \n  \nprint (\"The maximum of all characters in Helloworld is : \" + str(res)) \n\n", "idx": 2328, "target": 0}
{"func": "# write a python function to check if given set is subset or not\ndef check_subset():\n    for _ in range(int(input())):\n        x, a, z, b = input(), set(input().split()), input(), set(input().split())\n    print(a.issubset(b))\n\n\n", "idx": 2329, "target": 0}
{"func": "#1 Write a function to print given interger to binary\ndef int_to_binary(num: int):\n    \"\"\"\n    function to print number to binary\n    \"\"\"\n    if isinstance(num, int):\n        print(f'The binary of {num} is {bin(num).replace(\"0b\",\"\")}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 2330, "target": 0}
{"func": "# Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given\ndef simple_interest(p,r,t):\n    si = (p*r*t)/100\n    return si\n\n\n", "idx": 2331, "target": 0}
{"func": "# 6 write a python function that concatenates two stings\n\n\ndef concat(s1, s2):\n    return s1 + s2\n\n\n", "idx": 2332, "target": 0}
{"func": "#2 write a function to check given string is palindrome or not ( case insensitive )\ndef palindrome_str_check(value: str):\n    \"\"\"\n    function to print whether string is palindrome or not\n    \"\"\"\n    if isinstance(value, str) :\n        print( value.lower() == value[::-1].lower() )\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 2333, "target": 0}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n_recursive(n):\n    if n == 0:\n        return 0\n    return sum_first_n_recursive(n-1) + n\n\n\n", "idx": 2334, "target": 0}
{"func": "# write a python program to print squares of numbers until 20\nfor i in range(20):\n   print(i*i)\n\n\n", "idx": 2335, "target": 0}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlengths = [str(len(word)) for word in words]\nprint(' '.join(lengths))\n\n\n", "idx": 2336, "target": 0}
{"func": "# 10 write a python function to return the median of a list\n\n\ndef calc_median(arr):\n    arr = sorted(arr)\n    if len(arr) / 2 == 0:\n        return arr[len(arr) / 2]\n    else:\n        return (arr[len(arr) // 2] + arr[(len(arr) - 1) // 2]) / 2\n\n\n", "idx": 2337, "target": 0}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nfor d in list_of_dicts:\n  for key in d:\n    if key not in unique_keys:\n      unique_keys.append(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 2338, "target": 0}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius**2*+2*pi*radius*height\n\n", "idx": 2339, "target": 0}
{"func": "# 50. python function for finding the derivative of logarithmic value of a number\ndef dlog(x):\n\n    return 1/x\n\n", "idx": 2340, "target": 0}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\ndef cal_distance(time:float,speed:float)->float:\n    return time*speed\n\n", "idx": 2341, "target": 0}
{"func": "# write a python function to check if SHA256 hashed value is valid for given data or not\ndef check_sha256_hash(hashed, data):\n    import hashlib\n    return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False\n\n\n", "idx": 2342, "target": 0}
{"func": "# initializing list  \ntest_list = [\"Gfg\", \"best\", \"geeks\"] \nc=sorted(test_dict.values(),reverse=True)\nfor key,value in test_dict.items():\n    if key in test_list and value in c[0:2]:\n       print(key)\n\n", "idx": 2343, "target": 0}
{"func": "# write a python function to check if given set is subset or not\ndef check_subset():\n    for _ in range(int(input())):\n        x, a, z, b = input(), set(input().split()), input(), set(input().split())\n    print(a.issubset(b))\n\n\n", "idx": 2344, "target": 0}
{"func": "# Write a function to add two positive integers without using the '+' operator\ndef add_without_plus_operator(a, b):\n    while b != 0:\n        data = a & b\n        a = a ^ b\n        b = data << 1\n    return a\n\n", "idx": 2345, "target": 0}
{"func": "# Write a function, which will find all such numbers between 1000 to 9999 that each digit of the number is an even number.\n\nvalues = []\nfor i in range(1000, 9999):\n  s = str(i)\n  if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n      values.append(s)\n\n\n", "idx": 2346, "target": 0}
{"func": "# than the specified number.\ndef sum_of_cubes(n):\n    n -= 1\n    total = 0\n    while n > 0:\n        total += n * n * n\n        n -= 1\n    return total\n\n\nprint(\"Sum of cubes: \", sum_of_cubes(3))\n\n\n", "idx": 2347, "target": 0}
{"func": "# Write a python function to solve and print Towers of Hanoi problem\n\ndef TowerOfHanoi(n , source, destination, auxiliary): \n    if n==1: \n        print(\"Move disk 1 from source\",source,\"to destination\",destination) \n        return\n    TowerOfHanoi(n-1, source, auxiliary, destination) \n    print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n    TowerOfHanoi(n-1, auxiliary, destination, source)\n\n\t\n\t\n", "idx": 2348, "target": 0}
{"func": "# Write a Python function to Find Element Occurring Odd Number of Times in a List\n\ndef find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n \n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ans = 0\n \n    for element in alist:\n        ans ^= element\n \n    return ans\n\n", "idx": 2349, "target": 0}
{"func": "# write a python decorator function to find how much time user given function takes to execute\ndef timed(fn):\n    from time import perf_counter\n    from functools import wraps\n\n    @wraps(fn) \n    def inner(*args, **kwargs):\n        start = perf_counter()\n        result = fn(*args, **kwargs)\n        end = perf_counter()\n        elapsed = end - start\n\n        args_ = [str(a) for a in args]\n        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]\n        all_args = args_ + kwargs_\n        args_str = ','.join(all_args) # now it is comma delimited\n\n        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')\n\n        return result\n    # inner = wraps(fn)(inner)\n    return inner\n\n", "idx": 2350, "target": 0}
{"func": "# Driver Code \nif __name__ == '__main__': \n      \n    string = \"SchoolofAI\"\n      \n    # Remove nth index element \n    i = 5\n    \n    # Print the new string \n    print(remove(string, i))\n\n\n", "idx": 2351, "target": 0}
{"func": "# Write a Python function that takes a list of words and returns the longest one\ndef find_longest_word(words_list):\nword_len = []\nfor n in words_list:\nword_len.append((len(n), n))\nword_len.sort()\nreturn word_len[-1][1]\n\nprint(find_longest_word([\"PHP\", \"python\", \"zekelabs\"]))\n\n", "idx": 2352, "target": 0}
{"func": "# Write a function that will provide the ascii value of a character\n\ndef charToASCII(chr):\n  return f'ASCII value of {chr} is: {ord(chr)}'\n  \n", "idx": 2353, "target": 0}
{"func": "# write a  python program to check and print if a string is palindrome or not\nst = 'malayalam'\nj = -1\nflag = 0\nfor i in st:\n    if i != st[j]:\n      j = j - 1\n      flag = 1\n      break\n    j = j - 1\nif flag == 1:\n    print(\"Not a palindrome\")\nelse:\n    print(\"It is a palindrome\")\n\n", "idx": 2354, "target": 0}
{"func": "# write a python program to del the first element of the array/list\na = [-1, 1, 66.25, 333, 333, 1234.5]\ndel a[0]\nprint(a)\n", "idx": 2355, "target": 0}
{"func": "# Write a function that generates Factorial of number\ndef factorial(n):\n    if n == 0 or n ==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n", "idx": 2356, "target": 0}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] == 1]\n\n", "idx": 2357, "target": 0}
{"func": "#21 Write a python program to count the number of spaces in a string and print it\n\ncount=0\nstring = \"Welcome to schoolofAI\"\nfor i in string:\n    if i==\" \":\n        count=count+1\nprint(f'number of spaces {count}')\n\n", "idx": 2358, "target": 0}
{"func": "#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.\ndef is_arithmetic(l):\n    delta = l[1] - l[0]\n    for index in range(len(l) - 1):\n        if not (l[index + 1] - l[index] == delta):\n             return False\n    return True\n\n", "idx": 2359, "target": 0}
{"func": "# Write a program to to check if a triangle is valid or not, given it's all three angles\n\ndef is_valid_triangle_angle(a, b c):\n    if a+b+c == 180:\n        return True\n    return False\n\n", "idx": 2360, "target": 0}
{"func": "# Please write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit import Timer\nt = Timer(\"for i in range(100):1+1\")\nprint(t.timeit())\n\n", "idx": 2361, "target": 0}
{"func": "# Finding all permuatation \nresult = [] \n  \ndef permute(data, i, length):  \n    if i == length:  \n        result.append(''.join(data) ) \n    else:  \n        for j in range(i, length):  \n            # swap \n            data[i], data[j] = data[j], data[i]  \n            permute(data, i + 1, length)  \n            data[i], data[j] = data[j], data[i]   \npermute(list(ini_str), 0, len(ini_str)) \n  \n", "idx": 2362, "target": 0}
{"func": "# write a python program to print the largest number among the three input numbers\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\nnum3 = float(input(\"Enter third number: \"))\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n\n", "idx": 2363, "target": 0}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for ele in test_list if str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 2364, "target": 0}
{"func": "# write the python program to generate a random number between 0 and 9 \nimport csv\ndef read_csv(input_file):\n    with open(input_file) as csv_file:\n        csv_reader = csv.reader(csv_file, delimiter=',')\n        for row in csv_reader:\n                print(f'{row}')\n                break\n\n", "idx": 2365, "target": 0}
{"func": "#30. Write a python function to find HCf or GCD and return the value\ndef compute_hcf(x, y):\n\n", "idx": 2366, "target": 0}
{"func": "#30 get rid of all null values in array python\nmylist = [1, 2, 3, '', 4]\nmylist = [i for i in mylist if i]\n\n", "idx": 2367, "target": 0}
{"func": "# write a program to print least frequent character in a string\n\nstr1=\"watch the match\"\nall_freq = {} \nfor i in str1: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 2368, "target": 0}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    c = 300000\n    return mass * (c**2)\n\n", "idx": 2369, "target": 0}
{"func": "# Generate a random date between given start and end dates\nimport random\nimport time\n\ndef getRandomDate(startDate, endDate ):\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, time.localtime(randomTime))\n    return randomDate\n\nprint (\"Random Date = \", getRandomDate(\"1/1/2016\", \"12/12/2018\"))\n\n", "idx": 2370, "target": 0}
{"func": "# write a python function to convert list of strings to list of integers\ndef stringlist_to_intlist(sList): \n  return(list(map(int, sList)))\n\n", "idx": 2371, "target": 0}
{"func": "# Write a Python function to find the N-th number which is both square and cube\ndef nth_sq_and_cube(N):\n\tR = N**6\n\treturn R\n\n\n", "idx": 2372, "target": 0}
{"func": "# using dictionary comprehension to go through all keys \nres = {key: [re.sub('\\d', '', ele) for ele in val] \n       for key, val in test_dict.items()} \n          \n", "idx": 2373, "target": 0}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns1 = [0,0,0]\n\nfor i in range(len(v1)):\n  s1[i] = v1[i] + v2[i]\nprint(f\"New Vector:{s1}\")\n\n", "idx": 2374, "target": 0}
{"func": "# write a python function which takes input a string and returns whether is is a palindrome or not\n\ndef isPalindrome(s):\n    return s == s[::-1]\n \n", "idx": 2375, "target": 0}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [ele for ele in test_list if ele.strip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res)) \n\n\n", "idx": 2376, "target": 0}
{"func": "# write Python program to demonstrate working of Cummulative Records Product \n\ndef prod(val) : \n    res = 1\n    for ele in val: \n        res *= ele \n    return res \n\ntest_list = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)] \n\nprint(\"The original list : \" + str(test_list)) \nres = prod(int(j) for i in test_list for j in i) \n\nprint(\"The Cummulative product of list is : \" + str(res)) \n\n", "idx": 2377, "target": 0}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    return str1 + str2 \n\n", "idx": 2378, "target": 0}
{"func": "# Write a function to return the cartisian distance of a point from origin\ndef cal_dist_from_orign(x:float,y:float)->float:\n    return (x**2+y**2)**(1/2)\n\n", "idx": 2379, "target": 0}
{"func": "# Write a python class to implement circular queue with methods enqueue, dequeue\n\nclass CircularQueue(object):\n    def __init__(self, limit = 10):\n        self.limit = limit\n        self.queue = [None for i in range(limit)]  \n        self.front = self.rear = -1\n\n    def __str__(self):\n        if (self.rear >= self.front):\n            return ' '.join([str(self.queue[i]) for i in range(self.front, self.rear + 1)])\n  \n        else: \n            q1 = ' '.join([str(self.queue[i]) for i in range(self.front, self.limit)])\n            q2 = ' '.join([str(self.queue[i]) for i in range(0, self.rear + 1)])\n            return q1 + ' ' + q2\n\n    def isEmpty(self):\n        return self.front == -1\n\n    def isFull(self):\n        return (self.rear + 1) % self.limit == self.front\n\n    def enqueue(self, data):\n        if self.isFull():\n            print('Queue is Full!')\n        elif self.isEmpty():\n            self.front = 0\n            self.rear = 0\n            self.queue[self.rear] = data\n        else:\n            self.rear = (self.rear + 1) % self.limit  \n            self.queue[self.rear] = data \n\n    def dequeue(self):\n        if self.isEmpty():\n            print('Queue is Empty!')\n        elif (self.front == self.rear):  \n            self.front = -1\n            self.rear = -1\n        else:\n            self.front = (self.front + 1) % self.limit \n\t\t\t\n\t\t\t\n", "idx": 2380, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)  \n\n", "idx": 2381, "target": 0}
{"func": "# write a program to capitalize the first and last character of each key in a dictionary \ninput_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}\nfor key in list(input_dict.keys()):\n  new_key = key[0].upper() + key[1:-1] + key[-1].upper()\n  input_dict[new_key] = input_dict[key]\n  if key != new_key:\n    del input_dict[key]\n\n", "idx": 2382, "target": 0}
{"func": "#12 write a python program to find decreasing point in a list and print them\ntest_list = [3, 6, 8, 9, 12, 5, 18, 1] \n  \nres = -1\nfor idx in range(0, len(test_list) - 1): \n      \n    # checking for 1st decreasing element \n    if test_list[idx + 1] < test_list[idx]: \n        res = idx \n        break\n  \n", "idx": 2383, "target": 0}
{"func": "# Write a Python Program to Remove the Characters of Odd Index Values in a String\n\ndef modify(string):  \n    final = \"\"   \n    for i in range(len(string)):  \n        if i % 2 == 0:  \n            final = final + string[i]  \n    return final\n\n", "idx": 2384, "target": 0}
{"func": "# printing original dictionary \nprint(\"The original dictionary : \" + str(test_dict))\ns=[]\nfor key,value in test_dict.items():\n    for i in range(0,value):\n        s.append(key)\nprint(s)\n\n", "idx": 2385, "target": 0}
{"func": "# write a python function to add numbers in a list\n\ndef add(list):\n    sum = 0\n    for i in range(0, len(list)):\n        sum += list[i]\n    return sum\n\n\n", "idx": 2386, "target": 0}
{"func": "# write a python function  to convert a list of string list to a string list\ndef convert_to_string_list(list_of_string_list):\n\tres = [''.join(str(b) for b in eval(a)) for a in list_of_string_list] \n\treturn res\n\n\n\t\n", "idx": 2387, "target": 0}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn = 8\nd = dict()\nfor i in range(1,n+1):\n    d[i] = i*i*i\nprint(d)\n\n", "idx": 2388, "target": 0}
{"func": "#81 Write a Python program to convert a given Bytearray to Hexadecimal string.\ndef bytearray_to_hexadecimal(list_val):\n     result = ''.join('{:02x}'.format(x) for x in list_val)  \n     return(result)\n     \n\n", "idx": 2389, "target": 0}
{"func": "#64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.\ndef reverse_sum(n1, n2):\n    return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])\n\n", "idx": 2390, "target": 0}
{"func": "# Write a python function that prints the Contents of a File in Reverse Order\n\ndef reverse_content(filename):\n    for line in reversed(list(open(filename))):\n        print(line.rstrip())\n\n", "idx": 2391, "target": 0}
{"func": "# write a python function to return the largest value in a dictionary\n\ndef dic_largest(dic):\n    return max(dic.values())\n\n", "idx": 2392, "target": 0}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nfor ini_dict in ini_list: \n    for key in ini_dict.keys(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 2393, "target": 0}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\ndef invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value in my_dict.items():\n      my_inverted_dict.setdefault(value, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 2394, "target": 0}
{"func": "# 27 write a program that filters a list for even numbers only and returns their sum\n\n\ndef map_reduce(lst):\n    return reduce(lambda x, y: x + y, filter(lambda x: x % 2 == 0, lst))\n\n\nprint(map_reduce([1, 2, 3, 4, 5]))\n\n", "idx": 2395, "target": 0}
{"func": "# Write a function that returns the sum of digits of a given number\ndef digisum(num):\n    sum_=0\n    while num > 0:\n        dig = num % 10\n        sum_+=dig\n        num//=10\n    return sum_\n\n\n", "idx": 2396, "target": 0}
{"func": "# write a python program to iterate through a string using for loop\nh_letters = []\n\nfor letter in 'human':\n    h_letters.append(letter)\n\nprint(f\"{h_letters}\")\n\n\n", "idx": 2397, "target": 0}
{"func": "# Write a function to Find the size of a Tuple in Python without garbage values\nTuple = (10,20)\ndef sizeOfTuple(tup):\n  return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes' \n\n", "idx": 2398, "target": 0}
{"func": "# Write a function to return the sum of the roots of a quadratic equation ax**2 + bx + c = 0\ndef sum_of_roots(a:float,c:float):\n    if a:\n        return c/a\n    else:\n        return None\n\n", "idx": 2399, "target": 0}
{"func": "# Write a Python program to print shape of an array/ matrix\nimport numpy as np\nA = np.array([[1,2,3],[2,3,5],[3,6,8],[323,623,823]])\nprint(\"Shape of the matrix A: \", A.shape)\n\n\n", "idx": 2400, "target": 0}
{"func": "# Define a function that can convert a integer into a string and print it in console.\ndef convert_to_str(n):\n    print(str(n))\n\n", "idx": 2401, "target": 0}
{"func": "# Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a\ndef cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:\n    return initial_velocity + accelration*time\n\n", "idx": 2402, "target": 0}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 2403, "target": 0}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist1 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist1 = [ele for ele in list1 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list1)\n\n\n", "idx": 2404, "target": 0}
{"func": "#41. Python Program to Add Two Matrices using Nested List Comprehension\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 2405, "target": 0}
{"func": "# write a python function to return count of number of vowels in a sentence\ndef count_vowels(sentence):\n   count = 0\n   for letter in sentence:\n      if letter in \"aeiouAEIOU\":\n         count += 1\n   return count\n\n\n", "idx": 2406, "target": 0}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    count = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            count += 1\n          \n    return count\n\n", "idx": 2407, "target": 0}
{"func": "#62 custom counter function\ndef custom_counter():\n    \"\"\"\n    An implementation of closures\n    \"\"\"\n    x = 0\n    def inner():\n       nonlocal x\n       x += 1\n       print(f' Switch or button is called {x} times')\n     return inner\n\n\n", "idx": 2408, "target": 0}
{"func": "# Write a python program to Implement Insertion sort and print the sorted list for the below list\n\ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\ninsertion_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2409, "target": 0}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    result = restrev + first\n    return result\n\n\n", "idx": 2410, "target": 0}
{"func": "# Write a python program to Implement Binary Search with Recursion and print the key element if found\n\ndef binary_search_rec(alist, start, end, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if not start < end:\n        return -1\n \n    mid = (start + end)//2\n    if alist[mid] < key:\n        return binary_search_rec(alist, mid + 1, end, key)\n    elif alist[mid] > key:\n        return binary_search_rec(alist, start, mid, key)\n    else:\n        return mid\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search_rec(alist, 0, len(alist), key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 2411, "target": 0}
{"func": "# write a python function that accepts a list of dictionaries and sorts it by a specified key\ndef sort_dict_list(dict_list, sort_key):\n  dict_list.sort(key=lambda item: item.get(sort_key))\n\n", "idx": 2412, "target": 0}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using closer\n\ndef fib():\n    cache = {1:1, 2:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fib({n})')\n            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)\n        return cache[n]\n    return calc_fib\n\n", "idx": 2413, "target": 0}
{"func": "#34. write a Python function to Find LCM and returb the value\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\n", "idx": 2414, "target": 0}
{"func": "# write a python function to convert a user provided date to iso representation\n\nfrom datetime import datetime\ndef to_iso_date(d):\n  return d.isoformat()\n\n", "idx": 2415, "target": 0}
{"func": "# Write a function to calculate and return the average of input numbers\n\ndef calc_avg(*args):\n    if len(args) > 0:\n        return sum(args)/len(args)\n    return None\n\n\n", "idx": 2416, "target": 0}
{"func": "# Set the values in the new list to upper case\nlist = \"AMITKAYAL\"\nnewlist = [x.upper() for x in list]\nprint(f\"New list to upper case:{newlist}\")\n\n", "idx": 2417, "target": 0}
{"func": "# 70 write a program to randomly print a integer number between 7 and 15 inclusive.\nimport random\n\nprint(random.randrange(7, 16))\n\n", "idx": 2418, "target": 0}
{"func": "# Bubble sort in python\nlist1 = [1, 5, 3, 4]\n\nfor i in range(len(list1)-1):\n  for j in range(i+1,len(list1)):\n    if(list1[i] > list1[j]):\n      temp = list1[i]\n      list1[i] = list1[j]\n      list1[j] = temp\nprint(\"Bubble Sorted list: \",list1)\n\n", "idx": 2419, "target": 0}
{"func": "# Write a function to find the perimeter of a square\ndef square_perimeter(a):\n    return 4*a\n\n", "idx": 2420, "target": 0}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    count = 0\n    for ele in lst: \n        if (ele == x): \n            count = count + 1\n    return count \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 2421, "target": 0}
{"func": "# write  a python program to find Cumulative sum of a list\nlist=[10,20,30,40,50]\nnew_list=[] \nj=0\nfor i in range(0,len(list)):\n    j+=list[i]\n    new_list.append(j) \n     \nprint(new_list) \n", "idx": 2422, "target": 0}
{"func": "# write a python function to get prominent words from user test corpus using TFIDF vectorizer\ndef get_words(corpus, new_doc, top=2):\n    import numpy as np\n    from sklearn.feature_extraction.text import TfidfVectorizer\n\n    tfidf = TfidfVectorizer(stop_words='english')\n    if not corpus:\n        corpus = [\n            'I would like to check this document',\n            'How about one more document',\n            'Aim is to capture the key words from the corpus',\n            'frequency of words in a document is called term frequency'\n        ]\n\n    X = tfidf.fit_transform(corpus)\n    feature_names = np.array(tfidf.get_feature_names())\n\n    if not new_doc:\n        new_doc = ['can key words in this new document be identified?',\n                   'idf is the inverse document frequency calculated for each of the words']\n    responses = tfidf.transform(new_doc)\n\n    def get_top_tf_idf_words(response, top_n=top):\n        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]\n        return feature_names[response.indices[sorted_nzs]]\n\n    print([get_top_tf_idf_words(response, 2) for response in responses])\n\n\n", "idx": 2423, "target": 0}
{"func": "#26 write a function to print other value with given base to int.\ndef other_int(value, b):\n    return int(value, b)\n\n\n", "idx": 2424, "target": 0}
{"func": "# write a python function to compute minimum number of rotations required to get the same string\t\t\ndef findRotations(str): \n    tmp = str + str\n    n = len(str)   \n    for i in range(1, n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \n\t\n\t\n\t\n", "idx": 2425, "target": 0}
{"func": "# Usage of bool class\nprint('isinstance(True, int):', isinstance(True, int))\n\n", "idx": 2426, "target": 0}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresult = [] \nfor ini_dict in ini_list: \n    for key in ini_dict.keys(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     result.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(result))\n\n", "idx": 2427, "target": 0}
{"func": "# write a python function for Caesar Cipher, with given shift value and return the modified text\ndef caesar_cipher(text, shift=1):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    return text.translate(table)\n\n\n", "idx": 2428, "target": 0}
{"func": "# write a python function that returns the lcm of two numbers\ndef lcm(x, y):\n   if x > y:\n      greater = x\n   else:\n      greater = y\n   \n   while(True):\n      if((greater % x == 0) and (greater % y == 0)):\n         lcm = greater\n         break\n      greater += 1\n   \n   return lcm\n\n\n", "idx": 2429, "target": 0}
{"func": "# Subtract a week from a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 2430, "target": 0}
{"func": "# This is how pass works in case of multiple inheritance\nclass A1(object):\n   def foo(self):\n      print(\"class A1\")\n\nclass B1(A1):\n   pass\n\nclass C1(A1):\n   def foo(self):\n      print(\"class C1\")\n\nclass D1(B1,C1):\n   pass\n\n", "idx": 2431, "target": 0}
{"func": "#77 Write a Python function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n", "idx": 2432, "target": 0}
{"func": "# write a python function to return union of two sets\ndef union_set(set1, set2):\n    return set1|set2\n\n", "idx": 2433, "target": 0}
{"func": "#18 function to print the hcf of two number\ndef ret_hcf(x: int, y: int):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater  \n            break\n        greater += 1\n    return int(x*y/lcm)\n\n\n", "idx": 2434, "target": 0}
{"func": "# Write a function to calculate the moment of inertia of a ring of mass M and radius R\ndef cal_mi_ring(mass:float,radius:float)->float:\n    return mass*(radius**2)\n\n\n", "idx": 2435, "target": 0}
{"func": "#76 function to showcast documemtation of namedtuple\ndef show_doc_named():\n    from collections import namedtuple\n    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')\n    IplData.__doc__ = 'Namedtuple class to store the IPL match data'\n    IplData.match.__doc__ = 'Team name'\n    IplData.toss.__doc__ = 'Who won the toss'\n    IplData.choice.__doc__ = 'Decision taken by wiinng team toss'\n    IplData.session1.__doc__ = 'Run scored by Team1'\n    IplData.session2.__doc__ = 'Run scored by Team2'\n    IplData.winner.__doc__ = 'Winning Team'\n    return help(IplData)\n\n\n", "idx": 2436, "target": 0}
{"func": "# Write a function that returns cosine value of the input\ndef derivative_cos(x:float)-> float:\n    import math\n    return -(math.sin(x))\n\n\n", "idx": 2437, "target": 0}
{"func": "# Write a python function to get the surface area of a cube with side as input\ndef cube_surface_area(side):\n    surface_area = 6 * side ** 2\n    return surface_area \n\n", "idx": 2438, "target": 0}
{"func": "# Global Scope Representation\nx = 0\ndef in_func1():\n    x = 1\n    print('in_func1:', x)\nprint('global:', x)\n\n", "idx": 2439, "target": 0}
{"func": "# write a python function for Caesar Cipher, with given shift value and return the modified text\ndef caesar_cipher(text, shift=1):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    return text.translate(table)\n\n\n", "idx": 2440, "target": 0}
{"func": "# write a python program to generate random float numbers in a specific numerical range.\n\nimport random\nfor x in range(6):\n    print('{:04.3f}'.format(random.uniform(x, 100)), end=' ')\n\n", "idx": 2441, "target": 0}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list2):\n   list1 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, list2):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 2442, "target": 0}
{"func": "# Write a Python function to print the GSD of Two Numbers\n\ndef gcd(a,b):\n    if(b==0):\n        return a\n    else:\n        return gcd(b,a%b)\n\n\n", "idx": 2443, "target": 0}
{"func": "#95 Write a Python function to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found' and print the output.\ndef find_Index(str1, pos):\n    if len(pos) > len(str1):\n        return 'Not found'\n\n    for i in range(len(str1)):\n\n        for j in range(len(pos)):\n\n            if str1[i + j] == pos[j] and j == len(pos) - 1:\n                return i\n                \n            elif str1[i + j] != pos[j]:\n                break\n\n    return 'Not found\n\n", "idx": 2444, "target": 0}
{"func": "# Write a function to get n elements of the fibonacci series\ndef fibonacci(n):\n    n1, n2 = 0, 1\n    count = 0\n    \n    if n <= 0:\n        print('Please enter a positive integer')\n    elif n == 1:\n        print(\"Fibonacci sequence:\")\n        print(n1)\n    else:\n        print(\"Fibonacci sequence:\")\n        while count < n:\n            print(n1)\n            nth = n1 + n2\n            # update values\n            n1, n2 = n2, nth\n            count += 1\n\t\t\t\n\n", "idx": 2445, "target": 0}
{"func": "# write a python program to strip all the vowels in a string\nstring = \"Remove Vowel\"\nvowel = ['a', 'e', 'i', 'o', 'u']\n\"\".join([i for i in string if i not in vowel]\n\n", "idx": 2446, "target": 0}
{"func": "# Write a function to return the area of a rectangle\ndef cal_area_rect(length, breadth):\n    return length*breadth\n\n", "idx": 2447, "target": 0}
{"func": "# write a python function to print the octal value of a decimal number\ndef print_octal(dec):\n   print(oct(dec))\n\n\n", "idx": 2448, "target": 0}
{"func": "# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n\n\n\n", "idx": 2449, "target": 0}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\ndef find_profit_or_loss(cp,sp):\n    if cp > sp:\n        return 'loss', cp-sp\n    elif cp < sp:\n        return 'profit', sp-cp\n    else:\n        return 'no profit or loss', 0\n\n", "idx": 2450, "target": 0}
{"func": "# write a python program to extract the file name and extension of a file\nimport os\nfilename, extension = os.path.splitext('/path/to/some/file.ext')\n\n", "idx": 2451, "target": 0}
{"func": "# write a python function to calculate simple interest\n  \n  def simple_interest(p,t,r):  \n    si = (p * t * r)/100    \n    return si \n    \n # write a python function to calculate compound interest\n \n def compound_interest(principle, rate, time): \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    print(\"Compound interest is\", CI) \n\n", "idx": 2452, "target": 0}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 2453, "target": 0}
{"func": "# Write a python function to remove numeric digits from given string\t\ndef removedigits(ini_string):\n\tres = ''.join([i for i in ini_string if not i.isdigit()]) \n    return res\n\t\n\t\n\t\n", "idx": 2454, "target": 0}
{"func": "# 51 write a python program to perform Softmax operation on an input array\n\nimport math\n\n\ndef softmax(arr):\n    e_arr = [math.exp(x) for x in arr]\n    e_soft = [i / sum(e_arr) for i in e_arr]\n    return e_soft\n\n\nprint(softmax([3.0, 1.0, 0.2]))\n\n\n", "idx": 2455, "target": 0}
{"func": "# write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.\ndef min_max():\n    nums = [int(x) for x in input().strip().split(' ')]\n    print(sum(nums) - max(nums), sum(nums) - min(nums))\n\n\n", "idx": 2456, "target": 0}
{"func": "# Write a python function to find and print if IP address given is a valid IP address or not\n\nimport re\n \ndef Validate_IP(IP):\n    regex = \"(([0-9]|[1-9][0-9]|1[0-9][0-9]|\"\\\n            \"2[0-4][0-9]|25[0-5])\\\\.){3}\"\\\n            \"([0-9]|[1-9][0-9]|1[0-9][0-9]|\"\\\n            \"2[0-4][0-9]|25[0-5])\"\n     \n    regex1 = \"((([0-9a-fA-F]){1,4})\\\\:){7}\"\\\n             \"([0-9a-fA-F]){1,4}\"\n     \n    p = re.compile(regex)\n    p1 = re.compile(regex1)\n \n    if (re.search(p, IP)):\n        return \"Valid IPv4\"\n \n    elif (re.search(p1, IP)):\n        return \"Valid IPv6\"\n \n    return \"Invalid IP\"\n\t\n\n", "idx": 2457, "target": 0}
{"func": "# Team Members: Santu Hazra, Manu Chauhan, Ammar Adil and Prakash Nishtala\n\nimport os\nimport nltk\nimport string\nfrom collections import Counter\nfrom itertools import permutations, combinations, combinations_with_replacement\n\nletters = string.ascii_lowercase\n\n\n", "idx": 2458, "target": 0}
{"func": "#45 logging message\ndef logging(msg, *, dt = datetime.utcnow()):\n    print(f'message at {dt} was {msg}')\n\n\n", "idx": 2459, "target": 0}
{"func": "# write a program to count characters in a string\nst = \"AmmarAdil\"\ncount = {}\nfor a in st:\n    if a in count:\n        count[a]+=1\n    else:\n        count[a] = 1\nprint('Count', count)\n\n\n", "idx": 2460, "target": 0}
{"func": "# Write a function that returns a dictionary sorted ascending by its values\ndef ascending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[1])}\n\n", "idx": 2461, "target": 0}
{"func": "# 43 Define a function which returns the current working directory\nimport os\n\n\ndef get_cwd():\n    return os.getcwd()\n\n\n", "idx": 2462, "target": 0}
{"func": "#37 write a program to remove i-th indexed character from a string \n  \ndef remove(string, i):  \n  \n    a = string[ : i]  \n    b = string[i + 1: ] \n    return a + b \n     \n", "idx": 2463, "target": 0}
{"func": "#48 write a python program to merge a list of dictionaires\nresult = {}\nfor d in L:\n    result.update(d)\n\n", "idx": 2464, "target": 0}
{"func": "# write a python function to calculate simple interest given principal , rate and time\n\ndef simpleIntereset(principal, rate, time):\n    return principal * rate * time / 100\n\n", "idx": 2465, "target": 0}
{"func": "# conditional usecase\na_list = [1,2]\nif a_list[0] == 1:\n    print('Hello, World!')\nelse:\n    print('Bye, World!')\n\n", "idx": 2466, "target": 0}
{"func": "# Rotate an array of n elements to the right by k steps.\norg = [1,2,3,4,5,6,7]\nresult = org[:]\nsteps = 3\n\nfor idx,num in enumerate(org):\n    if idx+steps < len(org):\n        result[idx+steps] = org[idx]\n    else:\n        result[idx+steps-len(org)] = org[idx]\n\nprint(result)\n\n", "idx": 2467, "target": 0}
{"func": "# Write a python program to Implement Merge sort and print the sorted list for the below list\n\ndef merge_sort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        mid = (start + end)//2\n        merge_sort(alist, start, mid)\n        merge_sort(alist, mid, end)\n        merge_list(alist, start, mid, end)\n \ndef merge_list(alist, start, mid, end):\n    left = alist[start:mid]\n    right = alist[mid:end]\n    k = start\n    i = 0\n    j = 0\n    while (start + i < mid and mid + j < end):\n        if (left[i] <= right[j]):\n            alist[k] = left[i]\n            i = i + 1\n        else:\n            alist[k] = right[j]\n            j = j + 1\n        k = k + 1\n    if start + i < mid:\n        while k < end:\n            alist[k] = left[i]\n            i = i + 1\n            k = k + 1\n    else:\n        while k < end:\n            alist[k] = right[j]\n            j = j + 1\n            k = k + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\nmerge_sort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2468, "target": 0}
{"func": "# Write a Python Program to Check If Two Numbers are Amicable Numbers\n\ndef amicable_no_check(x, y):\n    sum1=0\n    sum2=0\n    for i in range(1,x):\n        if x%i==0:\n            sum1+=i\n    for j in range(1,y):\n        if y%j==0:\n            sum2+=j\n    if(sum1==y and sum2==x):\n        return True\n    else:\n        return False\n\n", "idx": 2469, "target": 0}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list2):\n   list1 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, list2):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 2470, "target": 0}
{"func": "# write a function which rearranges the elements such that all the negative elements appear on the left and positive elements appear at the right of the list. Note that it is not necessary to maintain the sorted order of the input list.\ndef rearrange(lst):\n    leftMostPosEle = 0  # index of left most element\n    # iterate the list\n    for curr in range(len(lst)):\n        # if negative number\n        if (lst[curr] < 0):\n            # if not the last negative number\n            if (curr is not leftMostPosEle):\n                # swap the two\n                lst[curr], lst[leftMostPosEle] = lst[leftMostPosEle], lst[curr]\n            # update the last position\n            leftMostPosEle += 1\n    return lst\n\n\n", "idx": 2471, "target": 0}
{"func": "# write a python program to filter out non-empty rows of a matrix\n\n\ntest_list = [[4, 5, 6, 7], [], [], [9, 8, 1], []] \nprint(f\"The original list is :{test_list} \") \nres = [row for row in test_list if len(row) > 0]\nprint(f\"Filtered Matrix {res}\")\n\n", "idx": 2472, "target": 0}
{"func": "# Write a Python function to check whether a given number is perfect number or not\ndef perfect_number_checker(num):\n    i = 2\n    sum = 1\n    while(i <= num//2 ) :\n        if (num % i == 0) :\n            sum += i\n        i += 1\n    if sum == num :\n        return f'{num} is a perfect number'\n\n    else :\n        return f'{num} is not a perfect number'\n\n", "idx": 2473, "target": 0}
{"func": "# write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects=[\"I\", \"You\"]\nverbs=[\"Play\", \"Love\"]\nobjects=[\"Hockey\",\"Football\"]\nfor i in range(len(subjects)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print sentence\n\n", "idx": 2474, "target": 0}
{"func": "# write a python function to return the length of user provided string in bytes\n\ndef byte_size(s):\n  return len(s.encode('utf-8'))\n\n", "idx": 2475, "target": 0}
{"func": "# initializing K  \nK = 2\n\nfor i in test_list:\n    if len(i)==K:\n       list1.remove(i)\nprint(list1)       \n\n", "idx": 2476, "target": 0}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres = 1\nfor ele in test_list: \n    try: \n        res *= int(ele) \n    except : \n        pass\nprint(\"Product of integers in list : \" + str(res))\n\n\n", "idx": 2477, "target": 0}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res))\n\n", "idx": 2478, "target": 0}
{"func": "# Write a Python Program Print Restaurant Menu using Class given menu and cost as list\n\nclass Food(object):\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def getprice(self):\n        return self.price\n    \n    def __str__(self):\n        return self.name + ' : ' + str(self.getprice())\n    \ndef buildmenu(names, costs):\n    menu = []\n    for i in range(len(names)):\n        menu.append(Food(names[i], costs[i]))\n    return menu\n\nnames = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']\n\ncosts = [250, 150, 180, 70, 65, 55, 120, 350]\n\nFoods = buildmenu(names, costs)\n\nn = 1\nfor el in Foods:\n    print(n,'. ', el)\n    n = n + 1\n\n", "idx": 2479, "target": 0}
{"func": "# 4 write a python function to print the factorial of a number\n\n\ndef factorial(x):\n    prod = 1\n    for i in range(1, x + 1):\n        prod *= i\n\n    return prod\n\n\n", "idx": 2480, "target": 0}
{"func": "# Write a function that returns log of a function\ndef log(x:float)->float:\n    import math\n    return math.log(x)\n\n", "idx": 2481, "target": 0}
{"func": "# check if the string is equal to its reverse\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n\n\n", "idx": 2482, "target": 0}
{"func": "# Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10\n\nl=6\nu=9\na=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]\nprint(a)\n\n", "idx": 2483, "target": 0}
{"func": "# Write a function that returns lowercase string\ndef str_lowercase(s:str):\n    return s.lower()\n\n", "idx": 2484, "target": 0}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nif len(set(str1).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 2485, "target": 0}
{"func": "# Write a python program to print only upto the letter 't' in a given string.\n\ns = \"hi i love python\"\n\ni=0\nwhile s[i]!='t':\n    print(s[i],end='')\n    i+=1\n\n", "idx": 2486, "target": 0}
{"func": "# write a Python program to print even Numbers in a List \n\nlist1 = [10, 21, 4, 45, 66, 93]  \neven_nos = [num for num in list1 if num % 2 == 0] \n\nprint(\"Even numbers in the list: \", even_nos) \n\n\n", "idx": 2487, "target": 0}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr1 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str1) - N + 1): \n\n    if (len(set(str1[idx: idx + N])) == K): \n        res.append(str1[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 2488, "target": 0}
{"func": "# Write a python function to calculate number of ways of selecting p non  consecutive stations out of n stations \n  \ndef stopping_station( p, n): \n    num = 1\n    dem = 1\n    s = p \n  \n    while p != 1: \n        dem *= p \n        p-=1\n      \n    t = n - s + 1\n    while t != (n-2 * s + 1): \n        num *= t \n        t-=1\n    if (n - s + 1) >= s: \n        return int(num/dem) \n    else: \n\n        return -1\n\t\t\n\t\t\n", "idx": 2489, "target": 0}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    pi = 3.14\n    return pi*(minor*major)\n\n", "idx": 2490, "target": 0}
{"func": "# Write a python program using list comprehension to produce and print the list  [[2],[3],[4],[3],[4],[5],[4],[5],[6]]\n\nstart_num = 2\nrepeat_count = 3\nmax_offset = 3\nlist4 = [[start_num + i + j ]  for j in range(max_offset) for i in range(repeat_count) ] \nprint(list4)\n\n\n", "idx": 2491, "target": 0}
{"func": "# write a python program to print 5 random vowels\nimport random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint([random.choice(vowels) for _ in range(5)])\n\n\n", "idx": 2492, "target": 0}
{"func": "# write a python function to count how many times the predicate is true\ndef quantify(iterable, pred=bool):\n    return sum(map(pred, iterable))\n\n", "idx": 2493, "target": 0}
{"func": "# write a python function to return the dot product of two vectors\ndef dotproduct(vec1, vec2):\n    return sum(map(operator.mul, vec1, vec2))\n\n", "idx": 2494, "target": 0}
{"func": "# write a python function thats returns a flat list of all the values in a flat dictionary\n\ndef values_only(flat_dict):\n  return list(flat_dict.values())\n\n", "idx": 2495, "target": 0}
{"func": "# Write a Python Program to print the Number of Times a Particular Number Occurs in a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nk=0\nnum=int(input(\"Enter the number to be counted:\"))\nfor j in a:\n    if(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n", "idx": 2496, "target": 0}
{"func": "# Write a Python program to Convert following datetime instance into string format\nfrom datetime import datetime\ngiven_date = datetime(2020, 2, 25)\nstring_date = given_date.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(string_date)\n\n\n", "idx": 2497, "target": 0}
{"func": "# printing original list \nprint(\"The original list : \" + str(test_list)) \n\ns=[]\nfor i in test_list:\n    t=tuple()\n    for j in i:\n        if not isinstance(j,str):\n           t+=(j,)\n    s.append(t)       \nprint(f'List after removing string from tuple is {s}')\n\n", "idx": 2498, "target": 0}
{"func": "# Write a function to calculate Volume of Hexagonal Pyramid  \ndef volumeHexagonal(a, b, h): \n    return a * b * h\n\n", "idx": 2499, "target": 0}
{"func": "# Assuming that we have some email addresses in the \"username@companyname.com\" format, write program to print the company name of a given email address. Both user names and company names are composed of letters only.\nimport re\nemailAddress = raw_input()\npat2 = \"(\\w+)@(\\w+)\\.(com)\"\nr2 = re.match(pat2,emailAddress)\nprint r2.group(2)\n\n", "idx": 2500, "target": 0}
{"func": "# This function computes LCM\ndef compute_lcm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n\nnum1 = 54\nnum2 = 24 \n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 2501, "target": 0}
{"func": "# write a python function to print odd numbers between user provided ranges\n\ndef odd_numbers(lower,upper):\n  for i in range(lower,upper+1):\n    if(i%2!=0):\n        print(i)\n\n", "idx": 2502, "target": 0}
{"func": "# Write a Python function that returns the number of frames shown in a given number of minutes for a certain FPS.\ndef number_of_frames(minutes, fps):\n\treturn (minutes * 60) * fps\n\n", "idx": 2503, "target": 0}
{"func": "# 30. Python Program to find Largest of Three Numbers\n\na = float(input(\"Please Enter the First value: \"))\nb = float(input(\"Please Enter the First value: \"))\nc = float(input(\"Please Enter the First value: \"))\n\nif (a > b and a > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(a, b, c))\nelif (b > a and b > c):\n          print(\"{0} is Greater Than both {1} and {2}\". format(b, a, c))\nelif (c > a and c > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(c, a, b))\nelse:\n          print(\"Either any two values or all the three values are equal\")\n\n", "idx": 2504, "target": 0}
{"func": "# Write a Python program to print the frequency of the elements in a list.Example:# input# my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]# output# {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\nimport collections\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\nprint(\"Original List : \",my_list)\nctr = collections.Counter(my_list)\nprint(\"Frequency of the elements in the List : \",ctr)\n\n", "idx": 2505, "target": 0}
{"func": "# write a python program to split the string into chunks of size 3\n\nstr = 'CarBadBoxNumKeyValRayCppSan'\nn = 3\nchunks = [str[i:i+n] for i in range(0, len(str), n)]\nprint(chunks)\n\n", "idx": 2506, "target": 0}
{"func": "# Write a function that finds a list is homogeneous \n\ndef homoList(li):\n  res = True\n  for i in li: \n      if not isinstance(i, type(li[0])): \n          res = False \n          break\n  return res\n\n\n", "idx": 2507, "target": 0}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/volume\n\n", "idx": 2508, "target": 0}
{"func": "#84 write a program to design a dice throw function\n\nimport random\n\ndef dice():\n    return random.choice([1,2,3,4,5,6])\n    \n", "idx": 2509, "target": 0}
{"func": "# Write function for performing heapsort on a list of numbers given\n\ndef heapify(nums, heap_size, root_index):\n    largest = root_index\n    left_child = (2 * root_index) + 1\n    right_child = (2 * root_index) + 2\n\n    if left_child < heap_size and nums[left_child] > nums[largest]:\n        largest = left_child\n\n    if right_child < heap_size and nums[right_child] > nums[largest]:\n        largest = right_child\n\n    if largest != root_index:\n        nums[root_index], nums[largest] = nums[largest], nums[root_index]\n        heapify(nums, heap_size, largest)\n\ndef heap_sort(nums):\n    n = len(nums)\n    \n    for i in range(n, -1, -1):\n        heapify(nums, n, i)\n\n    # Move the root of the max heap to the end of\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n\t\t\n\t\t\n", "idx": 2510, "target": 0}
{"func": "## Write a program to reverse the key and item mapping\n\nsample_dict = {1:'Seeta',2:'Geeta',3:'Babita'}\n\nprint(\"The original dictionary : \" + str(sample_dict)) \n\nsample_dict = {v:k for k, v in sample_dict.items()}\n\nprint(\"Inverse mapped dictionary : \", str(sample_dict))\n\n", "idx": 2511, "target": 0}
{"func": "# write a python function to do insertion sort\n\ndef insertionSort(arr): \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n \n # write a python program to print prime numbers within a range\n \n lower = 5\n upper = 20\n\n print(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\n for num in range(lower, upper + 1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n \n", "idx": 2512, "target": 0}
{"func": "# Write a Python function to calculate dot product of two given sequence\n\ndef dot_product(a, b):\n    return sum( e[0]*e[1] for e in zip(a, b))\n\n", "idx": 2513, "target": 0}
{"func": "# Write a python function that takes a small character string and shifts all characters by 5 \n\ndef shift_n_letters(letter, n):\n    return chr((ord(letter) - 97 + n % 26) % 26 + 97) if ord(letter)>=97 else chr((ord(letter) - 65 + n % 26) % 26 + 65)\n\nname = \"hello\"\n\nres=\"\".join([shift_n_letters(x,5) for x in name])\n\nprint('Resulting string',res)\n\n", "idx": 2514, "target": 0}
{"func": "#88 Write a Python fuction to print the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\ndic = {'a':1, 'b': {'c': {'d': {}}}}\nprint(dict_depth(dic))\n\n", "idx": 2515, "target": 0}
{"func": "# write Python3 code to demonstrate working of Add list elements to tuples list Using list comprehension + \"*\" operator \n\ntest_list = [(5, 6), (2, 4), (5, 7), (2, 5)] \nprint(\"The original list is : \" + str(test_list)) \n\nsub_list = [7, 2, 4, 6] \nres = [(*sub, *sub_list) for sub in test_list] \nprint(\"The modified list : \" + str(res)) \n\n", "idx": 2516, "target": 0}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res.append(key) \nprint(\"Top N keys are: \" + str(res))\n\n", "idx": 2517, "target": 0}
{"func": "# write a python function to find rightmost value less than or equal to x\ndef find_le(a, x):\n    from bisect import bisect_right  \n    i = bisect_right(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 2518, "target": 0}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    d = b**2-4*a*c\n    if d >= 0:\n        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 2519, "target": 0}
{"func": "# write a program to print the current date and time\nfrom datetime import datetime\nnow = datetime.now()\nprint(now)\n\n\n", "idx": 2520, "target": 0}
{"func": "# Write a Python program to remove duplicates from a list.Example:# Input a = [10,20,30,20,10,50,60,40,80,50,40]# Output [10, 20, 30, 50, 60, 40, 80]\n\na = [10,20,30,20,10,50,60,40,80,50,40]\ndup_items = set()\nuniq_items = []\nfor x in a:\n    if x not in dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\nprint(uniq_items)\n\n", "idx": 2521, "target": 0}
{"func": "# write a python function that returns the input list sorted in descending order\ndef sort_descending(list_to_be_sorted):\n    return sorted(list_to_be_sorted, reverse=True)\n\n\n", "idx": 2522, "target": 0}
{"func": "# write a python program to transpose Matrix using Nested Loops and print the result\ntransposed = []\nmatrix = [[1, 2, 3, 4], [4, 5, 6, 8]]\n\nfor i in range(len(matrix[0])):\n    transposed_row = []\n\n    for row in matrix:\n        transposed_row.append(row[i])\n    transposed.append(transposed_row)\n\nprint(f\"{transposed}\")\n\n\n", "idx": 2523, "target": 0}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    d = b**2-4*a*c\n    if d >= 0:\n        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 2524, "target": 0}
{"func": "#37. Python Program to Display Fibonacci Sequence Using Recursion\ndef recur_fibo(n):\n   if n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\n\nnterms = 10\n\n", "idx": 2525, "target": 0}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res))\n\n", "idx": 2526, "target": 0}
{"func": "# write a function to check if a string is a palindrome or not\n\ndef reverse_string(string):\n    return string[::-1]\n\ndef ispalin(string):\n    if string == reverse_string(string):\n        return True\n    return False\n\n", "idx": 2527, "target": 0}
{"func": "# printing original tuple \nprint(\"The original tuple is : \" + str(test_tup)) \ns=tuple(sorted([j for j in i],reverse=False ) for i in test_tup)\nprint(f'the sorted list inside tuple is {s}')\n\n", "idx": 2528, "target": 0}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    pi = 3.14\n    return pi*(minor*major)\n\n", "idx": 2529, "target": 0}
{"func": "# write a program to create zero matrix\nrows = 2\ncols = 3\nM = []\nwhile len(M) < rows:\n    M.append([])\n    while len(M[-1]) < cols:\n        M[-1].append(0.0)\n\nprint(\"Zero Matrix\")\nfor i in range(rows):\n    row = '|'\n    for b in range(cols):\n        row = row + ' ' + str(M[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 2530, "target": 0}
{"func": "# Write a Python program to count the occurrences of each word in a given sentence.\ndef word_count(str):\n    counts = dict()\n    words = str.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\n\n", "idx": 2531, "target": 0}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nused_punctuation = set()\nfor char in sentence:\nif char in punctuations:\nused_punctuation.add(char)\nreturn used_punctuation\n\n\n", "idx": 2532, "target": 0}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nif len(set(str1).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 2533, "target": 0}
{"func": "# ---------------------------------------------------------\nset1 = {10, 20, 30, 40, 50}\nset2 = {60, 70, 80, 90, 10}\nif set1.isdisjoint(set2):\n  print(\"Two sets have no items in common\")\nelse:\n  print(\"Two sets have items in common\")\n  print(set1.intersection(set2))\n\n\n", "idx": 2534, "target": 0}
{"func": "# write a python function to find the area of a circle using the user provided circumference\n\ndef area_of_circle(circumference):\n  circumference = float(circumference)\n  PI = 3.14\n  area = (circumference * circumference)/(4 * PI)\n  print(f'Area Of a Circle {area}')\n\n", "idx": 2535, "target": 0}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        return max(list_of_nums), min(list_of_nums)\n    else:\n        return\n\n", "idx": 2536, "target": 0}
{"func": "# write a python program which takes a list and swaps the first and last value of the list.\na=[]\nn= int(input(\"Enter the number of elements in list:\"))\nfor x in range(0,n):\n    element=int(input(\"Enter element\" + str(x+1) + \":\"))\n    a.append(element)\ntemp=a[0]\na[0]=a[n-1]\na[n-1]=temp\nprint(\"New list is:\")\nprint(a)\n\n", "idx": 2537, "target": 0}
{"func": "# Write a function to adds two lists element wise only if numbers are even\ndef adds_listevenelements(l1:list, l2:list):\n    return [i+j for i, j in zip(l1,l2) if i*j%2 == 0]\n\n", "idx": 2538, "target": 0}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list1))\n\n", "idx": 2539, "target": 0}
{"func": "# Convert generator to a list\ngen = (i for i in range(5))\na_list = list(gen)\n\n", "idx": 2540, "target": 0}
{"func": "# write a python funtion that takes input principle, rate, time and calculate compound intrest\n\ndef compound_interest(principle, rate, time):\n    # Calculates compound interest  \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CI = Amount - principle \n    print(\"Compound interest is\", CI) \n    \n", "idx": 2541, "target": 0}
{"func": "# write a python program to count the number of each vowels\n\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\nip_str = ip_str.casefold()\n\ncount = {}.fromkeys(vowels,0)\n\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n\n", "idx": 2542, "target": 0}
{"func": "#97 write a program to copy odd lines of one file to another file\n\nfile1 = open('file1.txt', 'r') \nfile2 = open('file2.txt', 'w') \n\nlines = file1.readlines() \ntype(lines) \nfor i in range(0, len(lines)): \n\tif(i % 2 != 0): \n\t\tfile2.write(lines[i]) \n\nfile1.close()\nfile2.close() \n\nfile1 = open('file1.txt', 'r') \nfile2 = open('file2.txt', 'r') \n\nstr1 = file1.read()\nstr2 = file2.read()\n\nprint(\"file1 content...\")\nprint(str1)\n\nprint() # to print new line\n\nprint(\"file2 content...\")\nprint(str2)\n\nfile1.close()\nfile2.close()\n\n", "idx": 2543, "target": 0}
{"func": "#90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.\nfrom itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]\n\nn_list = [1,1,2,3,4,4,5, 1]\nprint(\"Original list:\") \nprint(n_list)\nprint(\"\\nList reflecting the modified run-length encoding from the said list:\")\nprint(modified_encode(n_list))\n\n", "idx": 2544, "target": 0}
{"func": "# write a program to print 5 random numbers between 100 and 200\nimport random\nprint(random.sample(range(100, 200), 5))\n\n\n", "idx": 2545, "target": 0}
{"func": "# 58 Write a python program that calculates and prints the area of an ellipse\nimport math\n\n\nclass Ellipse:\n    def __init__(self, a, b):\n        self.major_axis = b\n        self.minor_axis = a\n\n    def area(self):\n        return math.pi * self.major_axis * self.minor_axis\n\n\nellipse = Ellipse(2, 10)\nprint(ellipse.area())\n\n\n", "idx": 2546, "target": 0}
{"func": "# use anonymous function to filter\nresult = list(filter(lambda x: (x % 13 == 0), my_list))\n\n", "idx": 2547, "target": 0}
{"func": "# write a python function to check if a user provided number is a perfect square.\n\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in y: return False\n        y.add(x)\n    return True\n\n", "idx": 2548, "target": 0}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    pi=3.14\n    return pi*radius*slant_height\n\n", "idx": 2549, "target": 0}
{"func": "# Write a function to return the product of the roots of a quadratic equation ax**2 + bx + c = 0\ndef prod_of_roots(a:float,b:float):\n    if a:\n        return -b/a\n    else:\n        return None\n\n", "idx": 2550, "target": 0}
{"func": "# Write a python function to find Area Of Rectangle\ndef areaRectangle(a, b): \n    return (a * b) \n\n\n\n\n", "idx": 2551, "target": 0}
{"func": "# write a Python function to count the number of occurrences in list\ndef countX(lst, x): \n    return lst.count(x) \n\nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 2552, "target": 0}
{"func": "#21. Python Program to Find Armstrong Number in an Interval\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   # order of number\n   order = len(str(num))\n    \n   # initialize sum\n   sum = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** order\n       temp //= 10\n\n   if num == sum:\n       print(num)\n", "idx": 2553, "target": 0}
{"func": "#85 distinguish iter , iterables and iterator using example to print 10 random integers number\nclass RandomInt:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n       pass\n\n    def __iter__(self):\n        return self.RandomIntIterator(self)\n\n    class RandomIntIterator:\n        def __init__(self):\n            self.count = 10\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.count > 0:\n                print(random.randint(0,10))\n                self.count -= 1\n            else:\n                raise StopIteration\n\n\n", "idx": 2554, "target": 0}
{"func": "# write a python function to generate cryptographically strong pseudo-random data\ndef get_cryptographically_secure_data(n=101):\n    return secrets.token_bytes(n), secrets.token_hex(n)\n\n\n", "idx": 2555, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(li[5:])\n\n", "idx": 2556, "target": 0}
{"func": "# Write a python function that returns the sum of n natural numbers\ndef sum_natural(num):\n    if num < 0:\n       print(\"Please enter a positive number!\")\n    else:\n       sum = 0\n       while(num > 0):\n           sum += num\n           num -= 1\n       return num\n\n", "idx": 2557, "target": 0}
{"func": "# Write a Python function to check all elements of a list are the same or not\ndef check_equal(a):\n  return a[1:] == a[:-1]\n\n\n", "idx": 2558, "target": 0}
{"func": "# Write a Python function to find the BMI for given weight and height of a person\ndef bmi_calculator(height, weight):\n\tbmi = weight/(height**2)\n\treturn bmi\n\n", "idx": 2559, "target": 0}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresult = [word for word in sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 2560, "target": 0}
{"func": "# Write a python function that Print all the Numbers Present in the Text File\n\ndef print_number(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter.isdigit()):\n                        print(letter)\n\n\n", "idx": 2561, "target": 0}
{"func": "# Shuffle a list randomly\nimport random\nlist = [2,5,8,9,12]\nrandom.shuffle(list)\nprint (\"Printing shuffled list \", list)\n\n", "idx": 2562, "target": 0}
{"func": "# write a program to remove odd numbers from a list using list comprehensions\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nno_odd_nums = [i for i in nums if i % 2 == 0]\n\n\n", "idx": 2563, "target": 0}
{"func": "# Write a function to identify if value is present inside a tuple or not\ndef check_tuplevalue(l:tuple, value)->bool:\n    return value in l\n\n", "idx": 2564, "target": 0}
{"func": "#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.\ndef checkSubset(input_list1, input_list2): \n    return all(map(input_list1.__contains__, input_list2)) \n      \n\nlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \nlist2 = [[1, 3],[13,15,17]]   \nprint(\"Original list:\")\nprint(list1)\nprint(list2)\nprint(\"\\nIf the one of the said list is a subset of another.:\")\nprint(checkSubset(list1, list2))\n\n", "idx": 2565, "target": 0}
{"func": "#97 Write a Python program to print all permutations of a given string (including duplicates).\ndef permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_lis\n    \n", "idx": 2566, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    bigger = num1 if num1 > num2 else num2\n    while True:\n        if (bigger % num1 == 0) and (bigger % num2 == 0):\n            break\n        bigger += 1\n    return bigger\n\n\n", "idx": 2567, "target": 0}
{"func": "# 52. python function for finding the hyperbolic tangent value of a number \ndef tanh(x):\n\n  \"\"\" returns the hyperbolic tangent value of a number\"\"\"\n\n  return math.tanh(x)\n\n", "idx": 2568, "target": 0}
{"func": "# Write a python function to derive slope given 2 points (x1,y1) and (x2, y2)\ndef get_slope(x1,y1, x2,y2):\n    if (x1 == x2 ):\n        return ValueError\n    return -((y2-y1)/(x2-x1))\n\n\n", "idx": 2569, "target": 0}
{"func": "# write a python function to return the sequence elements n times\ndef ncycles(iterable, n):\n    from itertools import chain, repeat\n    return chain.from_iterable(repeat(tuple(iterable), n))\n\n", "idx": 2570, "target": 0}
{"func": "# write a python program to convert paragraph string into sentense case\n\na = 'hello. i am a sentence.'\na = '. '.join(i.capitalize() for i in a.split('. '))\nprint(a)\n\n\n\n", "idx": 2571, "target": 0}
{"func": "#69 Write a Python function to add two binary numbers.\ndef add_binary_nums(x,y):\n        max_len = max(len(x), len(y))\n\n        x = x.zfill(max_len)\n        y = y.zfill(max_len)\n\n        result = ''\n        carry = 0\n\n        for i in range(max_len-1, -1, -1):\n            r = carry\n            r += 1 if x[i] == '1' else 0\n            r += 1 if y[i] == '1' else 0\n            result = ('1' if r % 2 == 1 else '0') + result\n            carry = 0 if r < 2 else 1       \n\n        if carry !=0 : result = '1' + result\n\n        return result.zfill(max_len)\n\n", "idx": 2572, "target": 0}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\ndef get_ci(p:float, r:float, t:float, n:float)->float:\n    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)\n\n", "idx": 2573, "target": 0}
{"func": "# write a python program to get all possible permutations of size of the string in lexicographic sorted order.\ndef get_ordered_permutations(word, k):\n    [print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]\n\n\n", "idx": 2574, "target": 0}
{"func": "# Write a program to to check if a triangle is valid or not, given it's all three sides' length\n\ndef is_valid_triangle_length(a, b c):\n    if a>0 and b>0 and c>0:\n        if a+b > c and a+c > b and b+c > a:\n            return True\n    return False\n\n", "idx": 2575, "target": 0}
{"func": "# write a python function to return dictionary of two lists using zip \ndef dict_using_comp(list1, list2):\n  dict_using_comp = {key:value for (key, value) in zip(list1, list2)} \n  return dict_using_comp\n\n", "idx": 2576, "target": 0}
{"func": "#22 write a program to merge dict using update() method\ndef Merge(dict1, dict2):\n    return(dict2.update(dict1))\n     \n", "idx": 2577, "target": 0}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    pi = 3.14\n    return pi*(minor*major)\n\n", "idx": 2578, "target": 0}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr1 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str1) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 2579, "target": 0}
{"func": "#99 Write a Python class to convert a roman numeral to an integer.\nclass Solution:\n    def roman_to_int(self, s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n\n", "idx": 2580, "target": 0}
{"func": "#44 write a  Python function to find intersection of two sorted arrays \ndef printIntersection(arr1, arr2, m, n): \n    i, j = 0, 0\n    while i < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j+= 1\n        else: \n            print(arr2[j]) \n            j += 1\n            i += 1\n\narr1 = [1, 2, 4, 5, 6] \narr2 = [2, 3, 5, 7] \nm = len(arr1) \nn = len(arr2) \nprintIntersection(arr1, arr2, m, n) \n\n", "idx": 2581, "target": 0}
{"func": "# Write a python function to accept user defined file, user-defined loglevel and create a file-based and invoke the user-defined function with this logger.\nimport logging\ndef create_logging_level(user_func, user_filename, user_loglevel):\n    logger = logging.getLogger('simple_example')\n    logger.setLevel(user_loglevel)\n    ch = logging.FileHandler(user_filename)\n    ch.setLevel(user_loglevel)\n    logger.addHandler(ch)\n\n    if callable(user_func):\n        user_func(logger)\n\n\n", "idx": 2582, "target": 0}
{"func": "# write Python program to convert temperature from Fahrenheit to Kelvin \n  \ndef Fahrenheit_to_Kelvin(F): \n    return 273.5 + ((F - 32.0) * (5.0/9.0)) \nF = 100\nprint(\"Temperature in Kelvin ( K ) = {:.3f}\" \n            .format(Fahrenheit_to_Kelvin( F ))) \n\n", "idx": 2583, "target": 0}
{"func": "#40 write a program to check 2 lists and find if any element is common\n  \ndef common_data(list1, list2): \n    result = False\n  \n    for x in list1: \n  \n        # traverse in the 2nd list \n        for y in list2: \n    \n            # if one common \n            if x == y: \n                result = True\n                return result  \n                  \n    return result \n      \n", "idx": 2584, "target": 0}
{"func": "# write a python function to read a CSV file and print its content\ndef read_csv(filename):\n    import csv\n    with open(filename, newline='') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            print(row)\n\n", "idx": 2585, "target": 0}
{"func": "# write a python function to strip punctuations from a given string\ndef strip_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\n\n", "idx": 2586, "target": 0}
{"func": "#28 write a program to check whether a given string is Heterogram or not  \n  \ndef heterogram(input): \n  \n     alphabets = [ ch for ch in input if ( ord(ch) >= ord('a') and ord(ch) <= ord('z') )] \n  \n     if len(set(alphabets))==len(alphabets): \n         print ('Yes') \n     else: \n         print ('No') \n  \n", "idx": 2587, "target": 0}
{"func": "# write a list comprehension for printing rows into columns and vv\n\ndef unpack(a,b,c,d):\n    print(a+d)\nx = [1,2,3,4]\nunpack(*x)\n\n", "idx": 2588, "target": 0}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\nresList = removeValue(list1, num1)\nprint(resList)\n\n", "idx": 2589, "target": 0}
{"func": "# Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nlines = []\nwhile True:\n    s = raw_input()\n    if s:\n        lines.append(s.upper())\n    else:\n        break;\nfor sentence in lines:\n    print sentence\n\n", "idx": 2590, "target": 0}
{"func": "#control that the user belongs to the list of allowed users\nif username == user1:\n    print(\"Access granted\")\nelif username == user2:\n    print(\"Welcome to the system\")\nelse:\n    print(\"Access denied\")\n\n", "idx": 2591, "target": 0}
{"func": "# Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.\ndef printValue(s1,s2):\n\tprint int(s1)+int(s2)\n\n", "idx": 2592, "target": 0}
{"func": "# Write a Python function to calculate factorial of a given no using class\n\nclass Fact:\n    def __init__(self):\n        self.cache = {0:1, 1:1}\n\n    def fact(self, n):\n        if n not in self.cache:\n            self.cache[n] = self.fact(n-1) * n\n        return self.cache[n]\n\n", "idx": 2593, "target": 0}
{"func": "# Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\nvalue = []\nitems=[x for x in input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if not intp%5:\n        value.append(p)\n\nprint(','.join(value))\n\n", "idx": 2594, "target": 0}
{"func": "# Write python function to count number of 1s in binary representation of an integer.\ndef  countSetBits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n\n\t\n\t\n", "idx": 2595, "target": 0}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nK = 3\nres = {key : val for key, val in test_dict.items() \n                   if type(val) != int or val > K} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 2596, "target": 0}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 2597, "target": 0}
{"func": "# Write a Python Program to Find the Intersection of Two Lists\n\ndef main(alist, blist):\n    def intersection(a, b):\n        return list(set(a) & set(b))\n    return intersection(alist, blist)\n\n", "idx": 2598, "target": 0}
{"func": "# Write a Python Program to print all the Divisors of an Integer\n\nn=60\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(i)\n\n\n", "idx": 2599, "target": 0}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    pi = 3.14\n    return pi*r**2\n\n", "idx": 2600, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    pi=3.14\n    return pi*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 2601, "target": 0}
{"func": "# Write a function to identify to count no of instances of a value  inside a dictionary\ndef count_value(d:dict, value)->bool:\n    return list(v == value for v in dict.values()).count(True)\n\n", "idx": 2602, "target": 0}
{"func": "# Write a Python function to convert height (in feet and inches) to centimeters\ndef height_converter(h_ft, h_inch):\n    h_inch += h_ft * 12\n    h_cm = round(h_inch * 2.54, 1)\n    return h_cm\n\n", "idx": 2603, "target": 0}
{"func": "# write a python function to do bitwise multiplication on a given bin number by given shifts\ndef bit_mul(n, shift):\n    return n << shift\n\n\n", "idx": 2604, "target": 0}
{"func": "#85 Write a Python program that iterate over elements repeating each as many times as its count.\nfrom collections import Counter\nc = Counter(p=4, q=2, r=0, s=-2)\nprint(list(c.elements()))\n\n", "idx": 2605, "target": 0}
{"func": "# Write a Python program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.\n\n #import datetime\nimport datetime\n\n #asking name\nname = input('Type your name:')\n\n #asking age\nage = input('Type your age:')\n\n #get the current year\nnow = datetime.datetime.now()\n\n #get difference between age x 100 years\ndiff = 100 - int(age)\n\n #show exactly year that user will turn 100 years old\n\nprint('Hi '+name+\" you will complete 100 years in \",(now.year+diff))\n\n", "idx": 2606, "target": 0}
{"func": "# Write a program to reverse a number\n\nn=int(input(\"Enter number: \"))\nrev=0\nwhile(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n\n", "idx": 2607, "target": 0}
{"func": "# Write a python program to Implement Quicksort and print the sorted list for the below list\n\ndef quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n \n \ndef partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    j = end - 1\n \n    while True:\n        while (i <= j and alist[i] <= pivot):\n            i = i + 1\n        while (i <= j and alist[j] >= pivot):\n            j = j - 1\n \n        if i <= j:\n            alist[i], alist[j] = alist[j], alist[i]\n        else:\n            alist[start], alist[j] = alist[j], alist[start]\n            return j\n \n \nalist = [2, 3, 5, 6, 4, 5]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2608, "target": 0}
{"func": "#21 Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.\ndef print_miss_num(l: list):\n     print(f'Missing number is {55-sum(l)}')\n\n\n", "idx": 2609, "target": 0}
{"func": "# write a python program to print anonymous function to find all the numbers divisible by 13 in the list.\nmy_list = [12, 65, 54, 39, 102, 339, 221,]\n\nresult = list(filter(lambda x: (x % 13 == 0), my_list))\n\nprint(\"Numbers divisible by 13 are\",result)\n\n\n", "idx": 2610, "target": 0}
{"func": "# write Python code to demonstrate Kth Non-None String from Rear using filter() \n\ntest_list = [\"\", \"\", \"Akshat\", \"Nikhil\"] \n\nprint(\"The original list : \" + str(test_list)) \n\nK = 2\n\nres = list (filter(None, test_list))[-K] \n\nprint(\"The Kth non empty string from rear is : \" + str(res)) \n\n", "idx": 2611, "target": 0}
{"func": "# Write a Python function to reverse words in a string.\ndef reverse_string_words(text):\n    for line in text.split('\\n'):\n        return(' '.join(line.split()[::-1]))\n\n\n", "idx": 2612, "target": 0}
{"func": "# Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. \nclass Circle(object):\n    def __init__(self, r):\n        self.radius = r\n    def area(self):\n        return self.radius**2*3.14\naCircle = Circle(2)\nprint aCircle.area()\n\n", "idx": 2613, "target": 0}
{"func": "# Write a function to return the area of a square\ndef cal_area_square(side):\n    return side**2\n\n", "idx": 2614, "target": 0}
{"func": "# Write a python program to Check and print if Expression is Correctly Parenthesized using Stack\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n \n    def is_empty(self):\n        return self.items == []\n \n    def push(self, data):\n        self.items.append(data)\n \n    def pop(self):\n        return self.items.pop()\n \n \ns = Stack()\nexp = \"(x+y\"\n \nfor c in exp:\n    if c == '(':\n        s.push(1)\n    elif c == ')':\n        if s.is_empty():\n            is_balanced = False\n            break\n        s.pop()\nelse:\n    if s.is_empty():\n        is_balanced = True\n    else:\n        is_balanced = False\n \nif is_balanced:\n    print('Expression is correctly parenthesized.')\nelse:\n    print('Expression is not correctly parenthesized.')\n\n", "idx": 2615, "target": 0}
{"func": "# write a python function to get Bitcoin prices after every given 'interval' seconds\ndef get_btc_price(interval=5):\n    import requests\n    import json\n    from time import sleep\n\n    def getBitcoinPrice():\n        URL = \"https://www.bitstamp.net/api/ticker/\"\n        try:\n            r = requests.get(URL)\n            priceFloat = float(json.loads(r.text)[\"last\"])\n            return priceFloat\n        except requests.ConnectionError:\n            print(\"Error querying Bitstamp API\")\n\n    while True:\n        print(\"Bitstamp last price: US $ \" + str(getBitcoinPrice()) + \"/BTC\")\n        sleep(interval)\n\n\n", "idx": 2616, "target": 0}
{"func": "#82 Write a Python program to count number of substrings with same first and last characters of a given string.\ndef no_of_substring_with_equalEnds(str1): \n\tresult = 0; \n\tn = len(str1); \n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (str1[i] == str1[j]): \n\t\t\t\tresult = result + 1\n\treturn result\n \n", "idx": 2617, "target": 0}
{"func": "# Please write a program which count and print the numbers of each character in a string input by console.\ndic = {}\ns=input()\nfor s in s:\n    dic[s] = dic.get(s,0)+1\nprint('\\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))\n\n", "idx": 2618, "target": 0}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 2619, "target": 0}
{"func": "# write a python program to print the factors of a number\nnum = 320\nfor i in range(1, num + 1):\n   if num % i == 0:\n      print(i)\n\n\n", "idx": 2620, "target": 0}
{"func": "# write Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using loop + enumerate() \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = [] \nfor idx, sub in enumerate(test_list, start = 0): \n    if idx == 0: \n        res.append(list(sub.keys())) \n        res.append(list(sub.values())) \n    else: \n        res.append(list(sub.values())) \n\nprint(\"The converted list : \" + str(res)) \n\n", "idx": 2621, "target": 0}
{"func": "# write a python program to print the factors of a number\nnum = 320\nfor i in range(1, num + 1):\n   if num % i == 0:\n      print(i)\n\n\n", "idx": 2622, "target": 0}
{"func": "# choose the smaller number\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 2623, "target": 0}
{"func": "# write a python function to return the absolute difference between two numbers\n\ndef abs_diff(num1, num2):\n    return abs(num1 - num2)\n\n", "idx": 2624, "target": 0}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    count = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            count += 1\n          \n    return count\n\n", "idx": 2625, "target": 0}
{"func": "# 43. python function for finding sine angle\ndef sine(angle):\n\n    \"\"\" returns the sine value for an angle mentioned in radians\"\"\"\n\n    return math.sin(angle)\n\n", "idx": 2626, "target": 0}
{"func": "# Write a function to print all possible subarrays using recursion\ndef printSubArrays(arr, start, end):\n    if end == len(arr):\n        return\n    elif start > end:\n        return printSubArrays(arr, 0, end + 1)\n    else:\n        print(arr[start:end + 1])\n        return printSubArrays(arr, start + 1, end)\n\narr = [1, 2, 3]\nprintSubArrays(arr, 0, 0)\n\n", "idx": 2627, "target": 0}
{"func": "# write a Python function to Convert Decimal to Binary\ndef convertToBinary(n):\n   if n > 1:\n       convertToBinary(n//2)\n   print(n % 2,end = '')\n\n", "idx": 2628, "target": 0}
{"func": "# write a program to subtract two matrix\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nB = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\nif rowsA != rowsB or colsA != colsB:\n    raise ArithmeticError('Matrices are NOT the same size.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        C[i][j] = A[i][j] - B[i][j]\n\nprint(\"Subtracted Array\")\nfor i in range(rowsA):\n    row = '|'\n    for b in range(colsA):\n        row = row + ' ' + str(C[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 2629, "target": 0}
{"func": "# printing original tuple \nprint(\"The original tuple : \" + str(test_tup))\ncount=0\nfor i in test_tup:\n    if isinstance(i,tuple):\n       \n       break\n    count=count+1\nprint(f'count of element till first tuple is {count}')\n\n", "idx": 2630, "target": 0}
{"func": "# initializing K  \nK = 14\nl=[]\ns=list(test_dict.values())\nv=list(test_dict.keys())\nfor i in range(0,len(s)):\n    for j in range(i+1,len(s)-1):\n        if s[i]+s[j] == K:\n           #print((i,j)) \n           print([v[i],v[j]]) \n\n", "idx": 2631, "target": 0}
{"func": "# write a python function to find the area of a circle using the user provided diameter\n\ndef area_of_circle(diameter):\n  PI = 3.14\n  area = (PI/4) * (diameter * diameter)\n  print(f'Area Of a Circle {area}')\n\n", "idx": 2632, "target": 0}
{"func": "# Function for nth Fibonacci number \n  \ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n", "idx": 2633, "target": 0}
{"func": "# Write a Python Program to Generate Gray Codes using Recursion\n\ndef get_gray_codes(n):\n    \"\"\"Return n-bit Gray code in a list.\"\"\"\n    if n == 0:\n        return ['']\n    first_half = get_gray_codes(n - 1)\n    second_half = first_half.copy()\n \n    first_half = ['0' + code for code in first_half]\n    second_half = ['1' + code for code in reversed(second_half)]\n \n    return first_half + second_half\n\n", "idx": 2634, "target": 0}
{"func": "# 3. python function to return the squares of a list of numbers\ndef sq(n):\n   return [i**2 for i in range(n)]\n\n", "idx": 2635, "target": 0}
{"func": "# write a python program to expalin list comprehension and print alternative values\nt = (1, 2, 4, 3, 8, 9)\nprint([t[i] for i in range(0, len(t), 2)])\n\n", "idx": 2636, "target": 0}
{"func": "#  iterating through the list index by index\nb = [2, 4, 5, 6]\nfor index, item in enumerate(b):\n    print(index, item)\n    if not item % 2:\n        b.remove(item)\nprint(b)\n\n", "idx": 2637, "target": 0}
{"func": "# Write a python function to remove the duplicate items from a List and return the modified data list\ndef remove_duplicates(data):\n    c = Counter(data)\n    s = set(data)\n    for item in s:\n        count = c.get(item)\n        while count > 1:\n            data.pop(item)\n            count -= 1\n    return data\n\n\n", "idx": 2638, "target": 0}
{"func": "# Write a Python Program to Concatenate Two Dictionaries Into One\n\ndef concat_dic(d1, d2):\n    return d1.update(d2)\n\n", "idx": 2639, "target": 0}
{"func": "# Write a Python function to print number with commas as thousands separators \ndef formattedNumber(n):\n  return (\"{:,}\".format(n))\n\n\n", "idx": 2640, "target": 0}
{"func": "# Sort JSON keys in Python and write it into a file\nimport json\nsampleJson = {\"id\" : 1, \"name\" : \"value2\", \"age\" : 29}\n\nwith open(\"sampleJson.json\", \"w\") as write_file:\n    json.dump(sampleJson, write_file, indent=4, sort_keys=True)\nprint(\"Done writing JSON data into a file\")\n\n", "idx": 2641, "target": 0}
{"func": "# Please write a function to compute the Fibonacci sequence until a given number via input paramters.\ndef fibo(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return f(n-1)+f(n-2)\n\n\n", "idx": 2642, "target": 0}
{"func": "#40 write a function to return the nth fibonacci in python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n", "idx": 2643, "target": 0}
{"func": "# write a python function to prepend a single value in front of an iterator \ndef prepend(value, iterator):    \n    import itertools\n    return itertools.chain([value], iterator)\n\n", "idx": 2644, "target": 0}
{"func": "# write a program that subtracts corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\ndiff_list = [a-b for (a,b) in zip(list1, list2)]\nprint(diff_list)\n\n\n", "idx": 2645, "target": 0}
{"func": "#62 write a program to sort the elements of the array\n\narr = [5, 2, 8, 7, 1];     \ntemp = 0;    \nprint(\"Elements of original array: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i], end=\" \");    \n     \nfor i in range(0, len(arr)):    \n    for j in range(i+1, len(arr)):    \n        if(arr[i] > arr[j]):    \n            temp = arr[i];    \n            arr[i] = arr[j];    \n            arr[j] = temp;    \n     \nprint();    \n     \nprint(\"Elements of array sorted in ascending order: \");    \nfor i in range(0, len(arr)):    \n    print(arr[i], end=\" \");   \n    \n", "idx": 2646, "target": 0}
{"func": "# 1 write a python function to add to add two numbers\n\n\ndef return_exponential(num1, num2):\n    return num1 ** num2\n\n\n", "idx": 2647, "target": 0}
{"func": "# Write a function to calculate Volume of Hexagonal Pyramid  \ndef volumeHexagonal(a, b, h): \n    return a * b * h\n\n", "idx": 2648, "target": 0}
{"func": "# python program to detect number of local variables defined in a program\ndef abc():\n    x = 1\n    y = 2\n    str1 = \"w3resource\"\n    print(\"Python Exercises\")\n\n\nprint(abc.__code__.co_nlocals)\n\n\n", "idx": 2649, "target": 0}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(lst): \n    return [ele for ele in reversed(lst)] \n      \nlst = [10, 11, 12, 13, 14, 15] \nprint(Reverse(lst)) \n\n", "idx": 2650, "target": 0}
{"func": "# Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case. \n\nclass IOString(object):\n    def __init__(self):\n        self.s = \"\"\n\n    def getString(self):\n        self.s = input()\n    \n    def printString(self):\n        print(self.s.upper())\n\nstrObj = IOString()\nstrObj.getString()\nstrObj.printString()\n\n\n", "idx": 2651, "target": 0}
{"func": "# copies of the whole string if the length is less than 2.\ndef substring_copy(str, n):\n    flen = 2\n    if flen > len(str):\n        flen = len(str)\n    substr = str[:flen]\n\n    result = \"\"\n    for i in range(n):\n        result = result + substr\n    return result\n\n\nprint(substring_copy('abcdef', 2))\nprint(substring_copy('p', 3))\n\n\n", "idx": 2652, "target": 0}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flag = False\n      \n    # checking for begin char \n    for ele in vow: \n        if sub.startswith(ele): \n            flag = True \n            break\n    if flag: \n        res.append(sub) \n  \n", "idx": 2653, "target": 0}
{"func": "# Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat\n\na=['the', 'tsai', 'python' ,'a' ,'the', 'a']\nc=[]\ncount=0\nb='a'\nn=3\nfor i in a:\n    if(i==b):\n        count=count+1\n        if(count!=n):\n            c.append(i)\n    else:\n        c.append(i)\nif(count==0):\n    print(\"Item not found \")\nelse: \n    print(\"The number of repetitions is: \",count)\n    print(\"Updated list is: \",c)\n    print(\"The distinct elements are: \",set(a))\n\n\n", "idx": 2654, "target": 0}
{"func": "# write a python function to convert hours to minutes\n\ndef convert_to_minutes(num_hours):\n    minutes = num_hours * 60\n    return minutes\n\n", "idx": 2655, "target": 0}
{"func": "#64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.\ndef reverse_sum(n1, n2):\n    return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])\n\n", "idx": 2656, "target": 0}
{"func": "# Write a python program using list comprehension to produce and print the list [(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2), (1, 3), (2, 3), (3, 3)]\n\nmax_count = 3\nlist6 = [(j+1,i+1)  for i in range(max_count)  for j in range(max_count) ]\nprint(list6)\n\n\n", "idx": 2657, "target": 0}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndict1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key in dict2: \n    if key in dict1: \n        dict2[key] = dict2[key] + dict1[key] \n    else: \n        pass\n\n", "idx": 2658, "target": 0}
{"func": "# write a python program to get index values for a list in the form of key:value pair using enumerate\n\nmy_list = ['a', 'b', 'c', 'd', 'e']\nfor index, value in enumerate(my_list):\n    print('{0}: {1}'.format(index, value))\n\n", "idx": 2659, "target": 0}
{"func": "#33 write a python function to flatten nested lists\nfrom collections import Iterable\ndef flatten(lis):\n    for item in lis:\n        if isinstance(item, Iterable) and not isinstance(item, str):\n            for x in flatten(item):\n                yield x\n        else:\n            yield item\n\n", "idx": 2660, "target": 0}
{"func": "# Write a Python function to Print an Identity Matrix\n\ndef print_identity_matrix(n):\n    for i in range(0,n):\n        for j in range(0,n):\n            if(i==j):\n                print(\"1\",sep=\" \",end=\" \")\n            else:\n                print(\"0\",sep=\" \",end=\" \")\n        print()\n\n", "idx": 2661, "target": 0}
{"func": "# write a python function to check whether all elements are equal to each other\ndef all_equal(iterable):\n    from itertools import groupby\n    g = groupby(iterable)\n    return next(g, True) and not next(g, False)\n\n", "idx": 2662, "target": 0}
{"func": "# Write a python program to swap first and last element of a list . Print the final list\n  \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    return newList \n      \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n\n", "idx": 2663, "target": 0}
{"func": "# write a python program to expalin python zip method\nl1=[2,4,6]\nl2=[-2,-4,-6]\nfor i in zip(l1, l2):\n\tprint(i)\n\n", "idx": 2664, "target": 0}
{"func": "# Write a function to calculate the total capacitance of capacitors in parallel in a given list\ndef cal_total_cap_in_parallel(cap_list:list)->float:\n    return sum(cap_list)\n\n", "idx": 2665, "target": 0}
{"func": "# write a python function to check if the given structure is a instance of list or dictionary\ndef check_insst(obj):\n    if isinstance(obj, list):\n        return \"list\"\n    elif isinstance(obj, dict):\n        return \"dict\"\n    else:\n        return \"unknown\"\n   \ncheck_insst({})\n\n\n", "idx": 2666, "target": 0}
{"func": "# write a program to compute the count of each word in a sentence and print it\nword_freq = {}\nline = 'how many how words does this many have'\nfor word in line.split():\n   word_freq[word] = word_freq.get(word, 0) + 1\nprint(word_freq)\n\n\n", "idx": 2667, "target": 0}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres = [sub for sub in test_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 2668, "target": 0}
{"func": "# Write a Python program that Given a two Python list. Iterate both lists simultaneously such that list1 should display item in original order and list2 in reverse order\nlist1 = [10, 20, 30, 40]\nlist2 = [100, 200, 300, 400]\n\nfor x, y in zip(list1, list2[::-1]):\n    print(x, y)\n\n", "idx": 2669, "target": 0}
{"func": "# write a function to find the sum of Sine series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n\n", "idx": 2670, "target": 0}
{"func": "# write a python class called Person that has a name property\nclass Person:\n   def __init__(self, name):\n      self.name = name\n\n\n", "idx": 2671, "target": 0}
{"func": "# Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list\n\ndef cocktail_shaker_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    upper = len(alist) - 1\n    lower = 0\n \n    no_swap = False\n    while (not no_swap and upper - lower > 1):\n        no_swap = True\n        for j in range(lower, upper):\n            if alist[j + 1] < alist[j]:\n                swap(j + 1, j)\n                no_swap = False\n        upper = upper - 1\n \n        for j in range(upper, lower, -1):\n            if alist[j - 1] > alist[j]:\n                swap(j - 1, j)\n                no_swap = False\n        lower = lower + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncocktail_shaker_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2672, "target": 0}
{"func": "# Write a function that returns cosine value of the input\ndef derivative_cos(x:float)-> float:\n    import math\n    return -(math.sin(x))\n\n\n", "idx": 2673, "target": 0}
{"func": "# Write a Python function to Find the Sum of Sine Series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return sine\n\n", "idx": 2674, "target": 0}
{"func": "# Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.\ninput_str = raw_input()\ndimensions=[int(x) for x in input_str.split(',')]\nrowNum=dimensions[0]\ncolNum=dimensions[1]\nmultilist = [[0 for col in range(colNum)] for row in range(rowNum)]\nfor row in range(rowNum):\n    for col in range(colNum):\n        multilist[row][col]= row*col\nprint multilist\n\n", "idx": 2675, "target": 0}
{"func": "# Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.\n\nitems=[x for x in input().split(',')]\nitems.sort()\nprint(','.join(items))\n\n\n", "idx": 2676, "target": 0}
{"func": "#python program to find power of number using recursion\ndef power(N, P):\n    if (P == 0 or P == 1):\n        return N\n    else:\n        return (N * power(N, P - 1))\n\nprint(power(5, 2))\n\n\n", "idx": 2677, "target": 0}
{"func": "# write a python function that squares every number in a list using a list comprehension and returns the result\ndef square_numbers(nums):\n   return [i*i for i in nums]\n\n\n", "idx": 2678, "target": 0}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    g = 6.674*(10)**(-11)\n    return (g*mass1*mass2)/(distance**2)\n\n", "idx": 2679, "target": 0}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nfor x in text: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 2680, "target": 0}
{"func": "# write a python function to check if the given structure is a instance of tuple or string\ndef check_inst_tup_str(obj):\n    if isinstance(obj, set):\n        return \"set\"\n    elif isinstance(obj, tuple):\n        return \"tuple\"\n    else:\n        return \"unknown\"\ncheck_inst_tup_str({1})\n\n\n", "idx": 2681, "target": 0}
{"func": "# Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2\ndef appendMiddle(s1, s2):\n  middleIndex = int(len(s1) /2)\n  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]\n  print(\"After appending new string in middle\", middleThree)\n  \nappendMiddle(\"Ault\", \"Kelly\")\n\n", "idx": 2682, "target": 0}
{"func": "#23 function to intern a sentence.\ndef check_intern(a , b):\n    if a is b:\n        print(f'{a} and {b} is interned by Python')\n    else:\n        print(f'{a} and {b} is not interned by Python')\n\n\n", "idx": 2683, "target": 0}
{"func": "# write a python program to flip a coin 100 times and print number of heads and tails\nimport random\nheads = 0\ntails = 0\nfor i in range(100):\n   if(random.choice([True, False])):\n      heads += 1\n   else:\n      tails += 1\nprint(f'{heads} heads, {tails} tails')\n\n\n", "idx": 2684, "target": 0}
{"func": "# write a python program to print the number of letters and digits in sentence\nsentence = 'The Quick 123 Fox'\ndigits = 0\nletters = 0\nfor c in sentence:\n   if c.isdigit():\n      digits += 1\n   elif c.isalpha():\n      letters += 1\n   else:\n      pass\nprint(f'Digits: {digits}, Letters: {letters}')\n\n\n", "idx": 2685, "target": 0}
{"func": "#34 write a python function to convert a string  into xml\nimport xml.etree.ElementTree as ET\n\nroot = ET.fromstring(country_data_as_string)\n\n", "idx": 2686, "target": 0}
{"func": "# Write a Python Program to Remove the Given Key from a Dictionary\n\ndef remove_item_dict(d, key):\n    if key in d: \n        del d[key]\n    else:\n        print(\"Key not found!\")\n        exit(0)\n\n", "idx": 2687, "target": 0}
{"func": "# write a python program to calculate the sum of numbers using reduce and print it\nfrom functools import reduce\nnums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\ntotal_sum = reduce(lambda a, b: a + b, nums)\nprint(f'Sum: {total_sum}')\n\n\n", "idx": 2688, "target": 0}
{"func": "# 53. python function for finding the derivative of hyperbolic tangent value of a number \ndef dtanh(x):\n\n  \"\"\" returns the hyperbolic tangent value of a number\"\"\"\n\n  return 1 - (math.tanh(x)**2)\n\n", "idx": 2689, "target": 0}
{"func": "# Write a function to calculate the new selling price based on discount percentage\ndef cal_sp_after_discount(sp:float,discount:float)->float:\n    return sp*(1 - discount/100)\n\n", "idx": 2690, "target": 0}
{"func": "# Driver's code \nif __name__ == \"__main__\": \n      \n    difference(7, 20, 9, 45) \n    difference(15, 23, 18, 54) \n    difference(16, 20, 16, 20) \n    \n", "idx": 2691, "target": 0}
{"func": "##  write a python function to convert given variable to said datatype\n\ndef type_conversion(typ,a):\n  if(typ)=='int':\n    return(int(a))\n  elif(typ)=='float':\n    return(float(a))\n  else:\n    return(str(a))\n\ntype_conversion('str',1)\n\n", "idx": 2692, "target": 0}
{"func": "# write a python function for Named Entity Recognizer using NLTK\ndef ner_checker(texts):\n    all_set = set()\n\n    def nltk_ner_check(texts):\n        for i, text in texts:\n            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):\n                if isinstance(entity, nltk.tree.Tree):\n                    etext = \" \".join([word for word, tag in entity.leaves()])\n                    # label = entity.label()\n                    all_set.add(etext)\n\n    nltk_ner_check(texts=texts)\n    return all_set\n\n\n", "idx": 2693, "target": 0}
{"func": "#51 write a python function to find a missing number in a list of consecutive natural numbers\ndef getMissingNo(A): \n    n = len(A) \n    total = (n + 1)*(n + 2)/2\n    sum_of_A = sum(A) \n    return total - sum_of_A \n\n", "idx": 2694, "target": 0}
{"func": "# initializing K  \nK = 1\n\ns=[]\nfor key,value in test_dict.items():\n    s.append(value[K])\nprint(s)    \n\n\n", "idx": 2695, "target": 0}
{"func": "# Implement a function which modifies a list so that each index has a product of all the numbers present in the list except the number stored at that index.\ndef find_product(lst):\n    # get product start from left\n    left = 1\n    product = []\n    for ele in lst:\n        product.append(left)\n        left = left * ele\n    # get product starting from right\n    right = 1\n    for i in range(len(lst)-1, -1, -1):\n        product[i] = product[i] * right\n        right = right * lst[i]\n\n    return product\n\n", "idx": 2696, "target": 0}
{"func": "# write a python program to input a number n and print an inverted star pattern of the desired size.\nn=int(input(\"Enter number of rows: \"))\nfor i in range (n,0,-1):\n    print((n-i) * ' ' + i * '*')\n    \n", "idx": 2697, "target": 0}
{"func": "# write a python program to print display the powers of 2 using anonymous function\n\nterms = 10\n\nresult = list(map(lambda x: 2 ** x, range(terms)))\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n\n", "idx": 2698, "target": 0}
{"func": "# Write a Python function that takes a list and returns the difference between the biggest and smallest numbers.\ndef difference_max_min(lst):\n\treturn abs(min(lst) - max(lst))\n\n", "idx": 2699, "target": 0}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 2700, "target": 0}
{"func": "#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.\ndef digits_sum():\n\tn = 2**20\n\tans = sum(int(c) for c in str(n))\n\treturn str(ans)\n\n", "idx": 2701, "target": 0}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\na, b = 0 , 1\nwhile b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 2702, "target": 0}
{"func": "# Write a python function to remove all non-alphabets except space from a given string using re library\nimport re\ndef extract_not_alpha(my_string):\n    #result = re.findall(r'[^a-zA-Z]+',my_string)\n    return re.sub('[^a-zA-Z\\s]+', \"\", my_string)\n    #return \"\".join(result)\n\n", "idx": 2703, "target": 0}
{"func": "# Write a python function to find bilinear interpolation of a point x, y given 4 points represented as a list\ndef bilinear_interpolation(x, y, points):\n    points = sorted(points)               # order points by x, then by y\n    (x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = points\n\n    if x1 != _x1 or x2 != _x2 or y1 != _y1 or y2 != _y2:\n        raise ValueError('points do not form a rectangle')\n    if not x1 <= x <= x2 or not y1 <= y <= y2:\n        raise ValueError('(x, y) not within the rectangle')\n\n    return (q11 * (x2 - x) * (y2 - y) +\n            q21 * (x - x1) * (y2 - y) +\n            q12 * (x2 - x) * (y - y1) +\n            q22 * (x - x1) * (y - y1)\n           ) / ((x2 - x1) * (y2 - y1) + 0.0) \n\n", "idx": 2704, "target": 0}
{"func": "# write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary\ndef invert_dict_non_unique(my_dict):\n  my_inverted_dict = dict()\n  for key, value in my_dict.items():\n      my_inverted_dict.setdefault(value, list()).append(key)\n  return my_inverted_dict\n\n", "idx": 2705, "target": 0}
{"func": "# write a python program to multiple two list values\nl1=[1,2,3]\nl2=[4,5,6]\nprint('multiply two list values:',[x*y for x in l1 for y in l2])\n\n", "idx": 2706, "target": 0}
{"func": "#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.\nr = range(1, 201)\na = sum(r)\nprint (a * a - sum(i*i for i in r))\n\n", "idx": 2707, "target": 0}
{"func": "# write a python function to convert degree celsius to degree fahrenheit\ndef fahrenheit(celsius):\n    return (celsius * 1.8) + 32\n\n", "idx": 2708, "target": 0}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recursive_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return n + recursive_sum(n-1)\n\n\n", "idx": 2709, "target": 0}
{"func": "# write a function to check a valid email id\n\nimport re \n\ndef check(email):    \n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if(re.search(regex,email)):  \n        print(\"Valid Email\")            \n    else:  \n        print(\"Invalid Email\")\n\n", "idx": 2710, "target": 0}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nwhile (number > 0):\n  remainder = number % 10\n  revs_number = (revs_number * 10) + remainder\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 2711, "target": 0}
{"func": "# write a python function to print a given string n times\ndef printn(string, n):\n   print(string * n)\n\n\n", "idx": 2712, "target": 0}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/pressure\n\n", "idx": 2713, "target": 0}
{"func": "# write a regex pattern in python to print all adverbs and their positions in user input text\nimport re\ntext = input(\"Enter a string: \")\nfor m in re.finditer(r\"\\w+ly\", text):\n    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n\n", "idx": 2714, "target": 0}
{"func": "# chunks from l. \ndef divide_chunks(l, n): \n\t# looping till length l \n\tfor i in range(0, len(l), n): \n\t\tyield l[i:i + n] \n\n", "idx": 2715, "target": 0}
{"func": "# write a python function that squares every number in a list using a list comprehension and returns the result\ndef square_numbers(nums):\n   return [i*i for i in nums]\n\n\n", "idx": 2716, "target": 0}
{"func": "# Write a python program to find and print if a number given is disarium or not\n\nnum = 135\nnum_len = len(str(num))\nn = num\nsum = 0\nexp = num_len\nwhile n != 0:\n    i = int(n % 10)\n    n = int(n / 10)\n    sum += i ** exp\n    exp -= 1\nif sum == num:\n    print(\"disarium\")\nelse:\n    print(\"not disarium\")\n\t\n\t\n", "idx": 2717, "target": 0}
{"func": "# write a python program to iterate through a string using lambda and print the result\nletters = list(map(lambda x: x, 'human'))\nprint(letters)\n\n\n", "idx": 2718, "target": 0}
{"func": "#24 Write a python program to increment Suffix number in string and print it\n\ntest_str = 'hello006'\nx=''\nr=''\nfor i in test_str:\n    if i.isdigit() and int(i)>0:\n       x=x+str(int(i)+1)\n    else:\n      r=r+i\nprint(r+x)  \n\n\n", "idx": 2719, "target": 0}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\ndef delete_last_element(list_to_be_processed):\n    deleted_element = list_to_be_processed.pop()\n    return list_to_be_processed, deleted_element\n\n\n", "idx": 2720, "target": 0}
{"func": "# write assert statements to verify that every number in the list [2,4,6,8] is even.\nli = [2,4,6,8]\nfor i in li:\n    assert i%2==0\n\n", "idx": 2721, "target": 0}
{"func": "# write a python program to iterate through the list and create a dictionary with integers as keys\nlist_= [1,2,3,4]\ndict_comp = {idx:value for idx,value in enumerate(list_)}\nprint(f\"{dict_comp}\")\n\n\n", "idx": 2722, "target": 0}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = list(filter(lambda x: (x % 2 != 0), list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 2723, "target": 0}
{"func": "#63 write a program to check if the given number is a disarium number\n\ndef calculateLength(n):    \n    length = 0;    \n    while(n != 0):    \n        length = length + 1;    \n        n = n//10;    \n    return length;    \n     \nnum = 175;    \nrem = sum = 0;    \nlen = calculateLength(num);    \n     \nn = num;    \n     \nwhile(num > 0):    \n    rem = num%10;    \n    sum = sum + int(rem**len);    \n    num = num//10;    \n    len = len - 1;    \n     \nif(sum == n):    \n    print(str(n) + \" is a disarium number\");    \nelse:    \n    print(str(n) + \" is not a disarium number\");   \n    \n", "idx": 2724, "target": 0}
{"func": "# Write a python program to Sum of n positive Integer\nn = int (input (\"Enter Value of n: \"))\nsum = 0\nx = 0\nwhile x != n+1: #because we need to include n in sum\nsum += x\nx+=1\nprint(\"Sum of n positive Integer till {} is {}\".format(n,sum))\n\n", "idx": 2725, "target": 0}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprices = [i if i > 0 else 0 for i in original_prices]\nprint(f\"Final List:{prices}\")\n\n", "idx": 2726, "target": 0}
{"func": "# write a program to replace duplicate word occurence in String \n\nstr1 = \"IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.\"\n\nrepl_dict = {'IISC':'It', 'Classes': 'They'}\n\nstr_list = str1.split(' ') \n\nres = set() \n\nfor idx, ele in enumerate(str_list): \n    if ele in repl_dict: \n        print(str(idx) + '  '+ele)\n        if ele in res: \n            str_list[idx] = repl_dict[ele] \n        else: \n            res.add(ele)\n\nres = ' '.join(str_list)\n\nprint(\"Replaced String: \" + str(res))\n\n", "idx": 2727, "target": 0}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    pi = 3.14\n    return 2*pi*r\n\n", "idx": 2728, "target": 0}
{"func": "# Python code to Get Kth Column of Matrix\n\ndef kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list)[K])\n    print(\"The Kth column of matrix is : \" + str(res))\n\n\n", "idx": 2729, "target": 0}
{"func": "# write a python function to generate cryptographically strong pseudo-random data\ndef get_cryptographically_secure_data(n=101):\n    return secrets.token_bytes(n), secrets.token_hex(n)\n\n\n", "idx": 2730, "target": 0}
{"func": "# write a python function to convert an integer to its roman numeral representation\n\ndef to_roman_numeral(num):\n  lookup = [\n    (1000, 'M'),\n    (900, 'CM'),\n    (500, 'D'),\n    (400, 'CD'),\n    (100, 'C'),\n    (90, 'XC'),\n    (50, 'L'),\n    (40, 'XL'),\n    (10, 'X'),\n    (9, 'IX'),\n    (5, 'V'),\n    (4, 'IV'),\n    (1, 'I'),\n  ]\n  res = ''\n  for (n, roman) in lookup:\n    (d, num) = divmod(num, n)\n    res += roman * d\n  return res\n\n", "idx": 2731, "target": 0}
{"func": "# Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \ndef printTuple():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(tuple(li))\n\n", "idx": 2732, "target": 0}
{"func": "# 16 write a function to immplement insert in binary search tree\n\n\nclass BinaryTreeNode:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n\nclass Tree:\n    def insert(self, root, key):\n        if root is None:\n            return BinaryTreeNode(key)\n        else:\n            if root.val == key:\n                return root\n            elif root.val < key:\n                root.right = self.insert(root.right, key)\n            else:\n                root.left = self.insert(root.left, key)\n\n        return root\n\n\n", "idx": 2733, "target": 0}
{"func": "# Write a Python Program to Count Number of Lowercase Characters in a String and print the result\nstring=\"SriNAtH\"\ncount=0\nfor i in string:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n\n\n\n", "idx": 2734, "target": 0}
{"func": "# write a python program to handle exception when a given value is less than 10\n\ndef check(x):\n    if x < 10:\n        raise ValueError('x should not be less than 10!')\n    else:\n        return x\ncheck(9)\n\n\n", "idx": 2735, "target": 0}
{"func": "# Write a Python function to return binary value of a given integer\ndef int_to_bin(a):\n  return bin(a)\n\n\n", "idx": 2736, "target": 0}
{"func": "# Write a Python function to find the maximum value in a given heterogeneous list using lambda\ndef max_val(list_val):\n     max_val = max(list_val, key = lambda i: (isinstance(i, int), i))  \n     return(max_val)\n \n\n", "idx": 2737, "target": 0}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncount = 0\n  \nfor item in input_list: \n    if item not in l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 2738, "target": 0}
{"func": "# Add two strings\ndef add_str(str1,str2):\n   return str1 + str2\n\n", "idx": 2739, "target": 0}
{"func": "# write a program to multiply two matrix\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\n\nif colsA != rowsB:\n    raise ArithmeticError('Number of A columns must equal number of B rows.')\n\nC = []\nwhile len(C) < rowsA:\n    C.append([])\n    while len(C[-1]) < colsB:\n        C[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        total = 0\n        for ii in range(colsA):\n            total += A[i][ii] * B[ii][j]\n        C[i][j] = total\n\nprint(\"Multiplied Array\")\nfor i in range(rowsA):\n    row = '|'\n    for b in range(colsA):\n        row = row + ' ' + str(C[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 2740, "target": 0}
{"func": "# Write a python function to find perimeter Of Rectangle \t\ndef perimeterRectangle(a, b): \n    return (2 * (a + b))\n      \n\n\n\n", "idx": 2741, "target": 0}
{"func": "# write a python function to print whether the given year is a leap year or not\n def leapYear(year):\n    if (year % 4) == 0:\n       if (year % 100) == 0:\n           if (year % 400) == 0:\n               print(\"{0} is a leap year\".format(year))\n           else:\n               print(\"{0} is not a leap year\".format(year))\n       else:\n           print(\"{0} is a leap year\".format(year))\n    else:\n       print(\"{0} is not a leap year\".format(year))\n\n", "idx": 2742, "target": 0}
{"func": "# Write a function that returns log of a function\ndef log(x:float)->float:\n    import math\n    return math.log(x)\n\n", "idx": 2743, "target": 0}
{"func": "# initializing K  \nK = 1 \ns=[]\nfor i in range(0,len(test_list)-1):\n    s.append(abs(test_list[i][K]-test_list[i+1][K]))\nprint(s)\n\n\n", "idx": 2744, "target": 0}
{"func": "# write a python program to Remove the Given Key from a Dictionary\nd = {'a':1,'b':2,'c':3,'d':4}\nkey= 'd'\nif key in d: \n    del d[key]\nelse:\n    print(\"Key not found!\")\n    exit(0)\n\n", "idx": 2745, "target": 0}
{"func": "# python program to multiply all the numbers in given list\ndef multiply(numbers):\n    total = 1\n    for x in numbers:\n        total *= x\n    return total\n\n\nprint(multiply((8, 2, 3, -1, 7)))\n\n\n", "idx": 2746, "target": 0}
{"func": "# Define a class named American which has a static method called printNationality.\nclass American(object):\n@staticmethod\ndef printNationality():\nprint (\"America\")\n\nanAmerican = American()\nanAmerican.printNationality()\nAmerican.printNationality()\n\n", "idx": 2747, "target": 0}
{"func": "# write a python program that print today's date\nfrom datetime import date\nprint(date.today()) \n\n", "idx": 2748, "target": 0}
{"func": "# Write a Python program to check/test multiple variables against a value\na = 10\nb = 20\nc = 30\nif 10 in {a, b, c}:\n  print(\"True\")\nelse:\n  print(\"False\")  \n\n\n", "idx": 2749, "target": 0}
{"func": "# write a python program to get all possible combinations, up to size of the string in lexicographic sorted order.\ndef get_ordered_combinations(string, k):\n    [print(''.join(x)) for i in range(1, int(k) + 1) for x in combinations(sorted(string), i)]\n\n\n", "idx": 2750, "target": 0}
{"func": "# write a Python program to find a list of uncommon words \n\ndef UncommonWords(A, B): \n\n    count = {} \n    \n    for word in A.split(): \n        count[word] = count.get(word, 0) + 1\n    \n    for word in B.split(): \n        count[word] = count.get(word, 0) + 1\n\n    return [word for word in count if count[word] == 1] \n\nA = \"Geeks for Geeks\"\nB = \"Learning from Geeks for Geeks\"\n\nprint(UncommonWords(A, B)) \n\n", "idx": 2751, "target": 0}
{"func": "# write a python function with generator for an infinite sequence\ndef infinite_sequence():\n    n = 0\n    while True:\n        yield n\n        n += 1\n\n\nimport uuid\n\n\n", "idx": 2752, "target": 0}
{"func": "#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).\ndef reverse_Bits(n):\n        result = 0\n        for i in range(32):\n            result <<= 1\n            result |= n & 1\n            n >>= 1\n        return result\n    \n", "idx": 2753, "target": 0}
{"func": "# Write a Python function that calculate interior angle of a equilateral polygon\n\ndef interior_angle(no_of_sides):\n    return (no_of_sides - 2) * 180 / no_of_sides\n\n", "idx": 2754, "target": 0}
{"func": "# This function subtracts two numbers\ndef subtract(x, y):\n    return x - y\n\n", "idx": 2755, "target": 0}
{"func": "#1 write a program to get numbers = 1,3,11,42,12,4001\nfrom collections import Iterable\nhighestnumber = -999\nfor i in numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 2756, "target": 0}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        k = char.isupper()   \n        if k == True: \n            return True\n    if(k != 1): \n        return False\n\n", "idx": 2757, "target": 0}
{"func": "# write a python function that takes an integer as input and returns the factorial of that number\n\ndef factorial(n): \n      \n    # single line to find factorial \n    return 1 if (n==1 or n==0) else n * factorial(n - 1); \n\n", "idx": 2758, "target": 0}
{"func": "#35 how to open xml file element tree\nimport xml.etree.ElementTree as ET\n\ntree = ET.parse('filename.xml') \ntree_root = tree.getroot() \n\n", "idx": 2759, "target": 0}
{"func": "# Python program to calculate the factorial of a number\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nn = 45\nprint(factorial(n))\n\n\n", "idx": 2760, "target": 0}
{"func": "# Write a function that returns cosine value of the input\ndef cos(x:float) -> float:\n    import math\n    return math.cos(x)\n\n", "idx": 2761, "target": 0}
{"func": "# Write a function to return reverse of a list\n\ndef reverse_list(l1:list)->list:\n    return l1[::-1]\n\n", "idx": 2762, "target": 0}
{"func": "# Write a function to Filter String with substring at specific position\ndef f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    i, j = 0, 5\n    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 2763, "target": 0}
{"func": "# Write a Python Program to Remove and print the Duplicate Items from a List\n\na=[2, 3, 8, 9, 2, 4, 6]\nb = set()\nunique = []\nfor x in a:\n    if x not in b:\n        unique.append(x)\n        b.add(x)\nprint(\"Non-duplicate items:\")\nprint(unique)\n\n", "idx": 2764, "target": 0}
{"func": "# write a python program to input a Number N from user and print Even Numbers from 1 to N\n\nmaximum = int(input(\" Please Enter the Maximum Value : \"))\n\nfor number in range(1, maximum+1):\n    if(number % 2 == 0):\n        print(\"{0}\".format(number))\n        \n", "idx": 2765, "target": 0}
{"func": "# Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\nvalue = []\nitems=[x for x in raw_input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if not intp%5:\n        value.append(p)\nprint ','.join(value)\n\n", "idx": 2766, "target": 0}
{"func": "#39 how to remove integer from string in python\ns = '12abcd405'\nresult = ''.join([i for i in s if not i.isdigit()])\n\n", "idx": 2767, "target": 0}
{"func": "# Stella octangula numbers: n (2n2 \u2212 1), with n \u2265 0. \ndef stella_octangula_number(n):\n    if n >= 0:\n        return n*(2**n - 1)\n    \n", "idx": 2768, "target": 0}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] > 1]\n\n", "idx": 2769, "target": 0}
{"func": "# Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File\ndef count_letter(fname, l):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            words = line.split()\n            for i in words:\n                for letter in i:\n                    if(letter==l):\n                        k=k+1\n    return k\n\n", "idx": 2770, "target": 0}
{"func": "# Write a Python program to find the total number of uppercase and lowercase letters in a given string\nstr1='TestStringInCamelCase'\nno_of_ucase, no_of_lcase = 0,0\nfor c in str1:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(no_of_lcase)\nprint(no_of_ucase)\n\n\n", "idx": 2771, "target": 0}
{"func": "#22.  Python Program to Find the Sum of Natural Numbers\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 2772, "target": 0}
{"func": "# Write a Python Program to Add Two Matrices and print result.\nX = [[1,2,3],  \n    [4,5,6],  \n    [7,8,9]]  \n\nY = [[10,11,12],  \n    [13,14,15],  \n    [16,17,18]]  \n\t\n\t\nresult = [[0,0,0],  \n               [0,0,0],  \n              [0,0,0]] \n\nfor i in range(len(X)):  \n   for j in range(len(X[0])):  \n       result[i][j] = X[i][j] + Y[i][j]  \nfor r in result:  \n   print(r)  \t\n   \n   \n   \n", "idx": 2773, "target": 0}
{"func": "# write a function to calculate the frequency of a number in a list\n\ndef frequency(list, num):\n    count = 0\n    for item in list:\n        if item == num:\n            count = count + 1\n    return count\n\n", "idx": 2774, "target": 0}
{"func": "# write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)\ndef random_combination_with_replacement(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.choices(range(n), k=r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 2775, "target": 0}
{"func": "#logical or logical and \nresult = (2 or 3) * (5 and 7)\nprint('2 * 7 =', result)\n\n", "idx": 2776, "target": 0}
{"func": "# Write a Python program to check number either positive , negative or zero\nnum = int (input (\"Enter Integer Number: \"))\nif num == 0:\nprint (\"Zero Entered\")\nelif num > 0:\nprint (\"Positive Number Entered\")\nelif num < 0:\nprint (\"Negative Number Entered\")\n\n", "idx": 2777, "target": 0}
{"func": "# Write a Python function to remove leading zeros from an IP address\nimport re\nregex = '\\.[0]*'\ndef remove_leading_zeros(ip):\n    modified_ip = re.sub(regex, '.', ip)\n    return modified_ip\n\n\n", "idx": 2778, "target": 0}
{"func": "# Please write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\nimport random\nprint(random.sample([i for i in range(100,201) if i%2==0], 5))\n\n", "idx": 2779, "target": 0}
{"func": "#14.Write a Python Program to check if a number is prime or not\n\nnum = 407\n\n\nif num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\n       \nelse:\n   print(num,\"is not a prime number\")\n\n", "idx": 2780, "target": 0}
{"func": "#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.\nfrom itertools import product\ndef all_repeat(str1, rno):\n  chars = list(str1)\n  results = []\n  for c in product(chars, repeat = rno):\n    results.append(c)\n  return results\nprint(all_repeat('xyz', 3))\n\n", "idx": 2781, "target": 0}
{"func": "# Write a Python Program to Search the Number of Times a Particular Number Occurs in a List\t\t\na = [2,3,2,3,4,4,5,5,6,6,6]\nk=0\nnum=6\nfor j in a:\n    if(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n\n\n", "idx": 2782, "target": 0}
{"func": "#50 write a python function to find the median on an array of numbers\ndef median(arr):\n  \n  if len(arr) == 1:\n    return arr[0]\n    \n  else:\n    arr = sorted(arr)\n    a = arr[0:round(len(arr)/2)]\n    b = arr[len(a):len(arr)]\n    if len(arr)%2 == 0:\n      return (a[len(a)-1]+b[0])/2\n    else:\n      return a[len(a)-1]\n\n", "idx": 2783, "target": 0}
{"func": "# Write a function to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punc = r'!()-[]{};:\\, <>./?@#$%^&*_~'\n    for ele in test_str:\n        if ele in punc:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_str)\n\n\n", "idx": 2784, "target": 0}
{"func": "# Write a method which can calculate and return square value of number\ndef square(num):\n    return num ** 2\n \n", "idx": 2785, "target": 0}
{"func": "# Write a Python function to print whether the given Date is valid or not\ndef date_validator(d,m,y):\n\timport datetime \n\ttry:\n\t\ts=datetime.date(y,m,d)\n\t\tprint(\"Date is valid.\")\n\texcept ValueError: \n\t\tprint(\"Date is invalid.\")\n\n\n", "idx": 2786, "target": 0}
{"func": "# write a python function to check if all elements in a list are unique or not\n\ndef unique(l):\n    if len(l)==len(set(l)):\n        print(\"All elements are unique\")\n    else:\n        print(\"List has duplicates\")\n\n", "idx": 2787, "target": 0}
{"func": "# printing original dictionaries \nprint(\"The original dictionary 1 is : \" + str(test_dict1)) \nprint(\"The original dictionary 2 is : \" + str(test_dict2))\n\ncount=0\nfor key1,value1 in test_dict1.items():\n    for key2,value2 in test_dict2.items():\n        if key1==key2 and value1==value2:\n           count=count+1\nprint(count)\n\n", "idx": 2788, "target": 0}
{"func": "# write a function that converts a integer dictionary into a list of tuples.\ndef dict_to_tuple(input_dict):\n  out_tuple = [(a, b) for a,b in input_dict.items()]\n  return out_tuple\n\n", "idx": 2789, "target": 0}
{"func": "# write a python function which takes length , breadth as user input and returns the area of rectangle.\ndef rectangle_area(length, breadth):\n    area = length * breadth    \n    return area\n\n", "idx": 2790, "target": 0}
{"func": "# This function multiplies two numbers\ndef multiply(x, y):\n    return x * y\n\n", "idx": 2791, "target": 0}
{"func": "# initializing size \nK = 4\n\ns=list(test_dict.keys())\nprint(s)\nq=list(test_dict.values())\nt=[]\nfor i in q:\n    t.append(i//K)\nprint(t)\nq=[]\nd={}\nfor i in range(K):\n    for i in range(0,len(s)):\n       d[s[i]] = t[i]\n    q.append(d)\nprint(q) \n\n", "idx": 2792, "target": 0}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list1[i]*list2[i] for i in range(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 2793, "target": 0}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncount = 0\n  \nfor item in input_list: \n    if item not in l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 2794, "target": 0}
{"func": "# Write a program that prints all the alphabets in a string and skips all other characters\n\nstring = \"$john.snow#@Got.bad_ending/com\"\nfor ch in string:\n    if (ch>='A' and ch<='Z') or (ch>='a' and ch<='z'):\n        print(ch, end='')\n    else:\n        pass\n\n", "idx": 2795, "target": 0}
{"func": "# Please write assert statements to verify that every number in the list [2,4,6,8] is even.\nli = [2,4,6,8]\nfor i in li:\n    assert i%2==0\n\n", "idx": 2796, "target": 0}
{"func": "# write a python function that takes two numbers. The function divides the first number by the second and returns the answer. The function returns None, if the second number is 0\ndef divide(num1, num2):\n    if num2 == 0:\n        return\n    else:\n        return num1 / num2\n\n\n", "idx": 2797, "target": 0}
{"func": "# Write a function to calculate the density given mass and volume\ndef cal_density(mass,volume):\n    return (mass/volume)\n\n", "idx": 2798, "target": 0}
{"func": "# write a python function to return random selection from itertools.permutations(iterable, r)\ndef random_permutation(iterable, r=None):\n    import random\n    pool = tuple(iterable)\n    r = len(pool) if r is None else r\n    return tuple(random.sample(pool, r))\n\n", "idx": 2799, "target": 0}
{"func": "# write a python function to find all the substrings of given string that contains 2 or more vowels. Also, these substrings must lie in between 2 consonants and should contain vowels only.\ndef find_substr():\n    import re\n    v = \"aeiou\"\n    c = \"qwrtypsdfghjklzxcvbnm\"\n    m = re.findall(r\"(?<=[%s])([%s]{2,})[%s]\" % (c, v, c), input(), flags=re.I)\n    print('\\n'.join(m or ['-1']))\n\n\n", "idx": 2800, "target": 0}
{"func": "# write Python3 code to demonstrate Combining tuples in list of tuples Using list comprehension \ntest_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')] \nprint(\"The original list : \" + str(test_list)) \nres = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] \nprint(\"The list tuple combination : \" + str(res)) \n\n", "idx": 2801, "target": 0}
{"func": "# Write a functin that returns the LCM of two input numbers\n\ndef lcm(a, b):\n    if a>b:\n        min_ = a\n    else:\n        min_ = b\n    while True:\n        if min_%a==0 and min_%b==0:\n            break\n        min_+=1\n    return min_\n\n\n", "idx": 2802, "target": 0}
{"func": "# Write a Python Program to Convert Binary to Gray Code\n\ndef binary_to_gray(n):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    n = int(n, 2)\n    n ^= (n >> 1)\n\n    return bin(n)[2:]\n\n", "idx": 2803, "target": 0}
{"func": "#write a python program to print even numbers in a list\n\nlist1  = [2,7,5,64,14]\n\nfor i in list1:\n    if i%2==0:\n        print(i,end=\" \")\n\n\n", "idx": 2804, "target": 0}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn = 8\nd = dict()\nfor i in range(1,n+1):\n    d[i] = i*i*i\nprint(d)\n\n", "idx": 2805, "target": 0}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    result = 1\n    for x in myList:\n         result = result * x \n    return result \n     \n\n\n\n", "idx": 2806, "target": 0}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str1 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    return str1 + str2 \n\n", "idx": 2807, "target": 0}
{"func": "#53  write a python program to permutations of a given string in python and print the result\nfrom itertools import permutations \nimport string \ns = \"GEEK\"\na = string.ascii_letters \np = permutations(s) \n\nd = [] \nfor i in list(p): \n    if (i not in d): \n        d.append(i) \n        print(''.join(i)) \n\n", "idx": 2808, "target": 0}
{"func": "# write a python function to generate SHA256 for given text\ndef get_sha256(text):\n    import hashlib\n    return hashlib.sha256(text).hexdigest()\n\n\n", "idx": 2809, "target": 0}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres = [ele for ele in test_list if str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 2810, "target": 0}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res))\n\n", "idx": 2811, "target": 0}
{"func": "# write a python function that returns the gcd of two numbers\ndef gcd(x, y):\n   if x > y:\n      smaller = y\n   else:\n      smaller = x\n\n   for i in range(1, smaller + 1):\n      if((x % i == 0) and (y % i == 0)):\n         gcd = i\n   \n   return gcd\n\n\n", "idx": 2812, "target": 0}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres = [(sub[1], sub[0]) for sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res)) \n\n", "idx": 2813, "target": 0}
{"func": "# write a Python function that finds a root of a polynomial curve using the Newton-Raphson method.\ndef newton_raphson(c, x=0):\n    for _ in range(20):\n        polynomial = c[0]*x**3 + c[1]*x**2 + c[2]*x + c[3]\n        derivative = 3*c[0]*x**2 + 2*c[1]*x + c[2]\n        x -= polynomial/derivative\n    return round(x, 3)\n\n\nprint(newton_raphson([-0.1, 0.4, 0.1, -0.8]))\n\n", "idx": 2814, "target": 0}
{"func": "#46 write Python Function to print leaders in array  \ndef printLeaders(arr,size):\n         \n    for i in range(0, size):\n        for j in range(i+1, size):\n            if arr[i]<arr[j]:\n                break\n        if j == size-1:  \n            print(arr[i])\n\narr=[16, 17, 4, 3, 5, 2] \nprintLeaders(arr, len(arr))\n\n", "idx": 2815, "target": 0}
{"func": "# count the vowels\ncount = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}\n\nprint(count)\n\n\n", "idx": 2816, "target": 0}
{"func": "# Function to calculate padovan number P(n) \n def padovan(n): \n    pPrevPrev, pPrev, pCurr, pNext = 1, 1, 1, 1 \n    for i in range(3, n+1): \n        pNext = pPrevPrev + pPrev \n        pPrevPrev = pPrev \n        pPrev = pCurr \n        pCurr = pNext \n  \n    return pNext; \n    \n # write a python function to print the raceman sequence\n \n def recaman(n): \n    arr = [0] * n  \n    arr[0] = 0\n    print(arr[0], end=\", \") \n    for i in range(1, n):     \n        curr = arr[i-1] - i \n        for j in range(0, i):  \n            if ((arr[j] == curr) or curr < 0): \n                curr = arr[i-1] + i \n                break              \n        arr[i] = curr \n        print(arr[i], end=\", \") \n\n # write a python function to print the sylvester's sequence\n \n def printSequence(n) : \n    a = 1\n    ans = 2 \n    N = 1000000007\n    i = 1\n    while i <= n : \n        print ans, \n        ans = ((a % N) * (ans % N)) % N \n        a = ans \n        ans = (ans + 1) % N \n        i = i + 1\n          \n # write a python function to find the sum of two numbers without using arithematic operators\n \n def Add(x, y): \n    while (y != 0): \n        carry = x & y \n        x = x ^ y \n        y = carry << 1     \n    return x \n \n  # write a python function to subtract two numbers without using arithemmatic operators\n  \n  def subtract(x, y):  \n    while (y != 0): \n        borrow = (~x) & y \n        x = x ^ y \n        y = borrow << 1\n      \n    return x \n\n # write a python function to find the smallest number to be subtracted from a given number to make the given number palindrome\n \ndef minSub(N):\n    count = 0\n    while (N >= 0):\n        num = N\n        rev = 0\n        while (num != 0):\n            digit = num % 10\n            rev = (rev * 10) + digit\n            num = num // 10\n        if (N == rev):\n            break\n        count += 1\n        N -= 1\n    print(count)\n    \n # write a python function to check whether the number is a perfect square without finding square root\n \n def isPerfectSquare(n) :\n    i = 1\n    while(i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True          \n        i = i + 1\n    return False\n    \n # write a python function to find the square root of a number using babylonian method\n \n def squareRoot(n): \n        x = n \n        y = 1\n        e = 0.000001\n        while(x - y > e): \n      \n            x = (x + y)/2\n            y = n / x \n      \n        return x \n        \n", "idx": 2817, "target": 0}
{"func": "# write a Python program to print odd Numbers in a List \n \nlist1 = [10, 21, 4, 45, 66, 93] \nonly_odd = [num for num in list1 if num % 2 == 1] \nprint(\"Odd numbers in the list: \",only_odd) \n\n\n", "idx": 2818, "target": 0}
{"func": "# Write a program which can map() to make a list whose elements are square of elements in [1,2,3,4,5,6,7,8,9,10].\nli = [1,2,3,4,5,6,7,8,9,10]\nsquaredNumbers = map(lambda x: x**2, li)\nprint squaredNumbers\n\n", "idx": 2819, "target": 0}
{"func": "# Write a function Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. \n\ndef dailyTemperatures(T):\n    stack = []\n    res = [0 for _ in range(len(T))]\n    for i, t1 in enumerate(T):\n        while stack and t1 > stack[-1][1]:\n            j, t2 = stack.pop()\n            res[j] = i - j\n        stack.append((i, t1))\n    return res\n\t\n\t\n", "idx": 2820, "target": 0}
{"func": "# Write a python program code to perform Triple quote String concatenation Using splitlines() + join() + strip() \n  \n\ntest_str1 = \"\"\"India \nis\"\"\"\ntest_str2 = \"\"\"best \nfor everybody \n\"\"\"\n  \n\nprint(\"The original string 1 is : \" + test_str1) \nprint(\"The original string 2 is : \" + test_str2) \n  \ntest_str1 = test_str1.splitlines() \ntest_str2 = test_str2.splitlines() \nres = [] \n  \nfor i, j in zip(test_str1, test_str2): \n    res.append(\"   \" + i.strip() + \" \" + j.strip()) \nres = '\\n'.join(res) \n  \n\nprint(\"String after concatenation : \" + str(res))  \n\n\n", "idx": 2821, "target": 0}
{"func": "# Write a function to return the distance covered by a moving object based on speend and given time\ndef cal_distance(time:float,speed:float)->float:\n    return time*speed\n\n", "idx": 2822, "target": 0}
{"func": "#99 write a program to input a string and find total number uppercase and lowercase letters\n\nprint(\"Input a string: \")\nstr1 = input()\n\nno_of_ucase, no_of_lcase = 0,0\n\nfor c in str1:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(\"Input string is: \", str1)\nprint(\"Total number of uppercase letters: \", no_of_ucase)\nprint(\"Total number of lowercase letters: \", no_of_lcase)\n\n", "idx": 2823, "target": 0}
{"func": "# write a python program that prints the circumference of a circle\nimport math\nradius = 10\nprint(f'Area: {2 * math.pi * radius}')\n\n\n", "idx": 2824, "target": 0}
{"func": "# Write a program to convert dictionary into JSON\nimport json\ndata = {\"key1\" : \"value1\", \"key2\" : \"value2\"}\njsonData = json.dumps(data)\nprint(jsonData)\n\n", "idx": 2825, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint(li[:5])\n\n", "idx": 2826, "target": 0}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentence = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word in sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 2827, "target": 0}
{"func": "# Write a Python program to select integers from a string and print those integers\n\ns = input()\nl = len(s)\n\ni = 0\nwhile i < l:\n    num = ''\n    symbol = s[i]\n    while symbol.isdigit():\n        num += symbol\n        i += 1\n        if i < l:\n            symbol = s[i]\n        else:\n            break\n    if num != '':\n        print(num)\n    i += 1\n\n", "idx": 2828, "target": 0}
{"func": "#80 class to show implementation of custom sequence of tuple\nclass CustomTuple:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = (1,2,3,4)\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, i):\n        if isinstance(i, int):\n            if i<0:\n                i = len(self.list_) + i\n            \n            if i<0 or i>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[i]\n\n\n", "idx": 2829, "target": 0}
{"func": "# Write a function to calculate the compound interest for principal p, rate r and time in years y\ndef get_ci(p:float, r:float, t:float, n:float)->float:\n    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)\n\n", "idx": 2830, "target": 0}
{"func": "# write a python function that makes all negative values in a list zero and returns it\ndef make_negative_zero(items):\n   return [0 if item < 0 else item for item in items]\n\n\n", "idx": 2831, "target": 0}
{"func": "# Write a Python program to sort a list alphabetically in a dictionary.\nnum = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}\nsorted_dict = {x: sorted(y) for x, y in num.items()}\nprint(sorted_dict)\n\n", "idx": 2832, "target": 0}
{"func": "# Write a python function to append or extend two lists\n\n\ndef list_op(l1,l2,op):\n  if(op=='append'):\n    return(l1.append(l2))\n  else:\n    return(l1.extend(l2))\n  \na = ['Hey', 'you', 'there!']\nb = [1,2,3]\nop='e'\n\nlist_op(a,b,op)\n\nprint(a)\n\n", "idx": 2833, "target": 0}
{"func": "# write a recursive python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n_recursive(n):\n    if n == 0:\n        return 0\n    return sum_first_n_recursive(n-1) + n\n\n\n", "idx": 2834, "target": 0}
{"func": "# write a python function to convert from Celcius to fahrenhiet\n\ndef cel_to_fah(celcius):\n    return 9 * celcius / 5 + 32\n\n", "idx": 2835, "target": 0}
{"func": "#24 write a program to delete all duplicate letters in a string \n\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    for i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n        print(\"With Order:\",t) \n      \nstr=\"helloworld\"\nremoveDuplicate(str) \n\n", "idx": 2836, "target": 0}
{"func": "# Write a function that returns sum of all odd elements in the list\ndef sum_odd_elements(l:list):\n    return sum([i for i in l if i%2==1])\n\n", "idx": 2837, "target": 0}
{"func": "# write a function to right rotate a given list by given input\ndef right_rotate(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n\n", "idx": 2838, "target": 0}
{"func": "# write a python function with generator for an infinite sequence\ndef infinite_sequence():\n    n = 0\n    while True:\n        yield n\n        n += 1\n\n\nimport uuid\n\n\n", "idx": 2839, "target": 0}
{"func": "#37 write a python program to sort Tuples by their maximum element and print it\n\ndef get_max(sub): \n    return max(sub) \n  \n", "idx": 2840, "target": 0}
{"func": "# write a python function that would return the sum of first n natural numbers, where n is the input\ndef sum_first_n(n):\n    return ( n * (n+1) ) // 2\n\n\n", "idx": 2841, "target": 0}
{"func": "# write a python function that returns the lcm of two numbers\ndef lcm(x, y):\n   if x > y:\n      greater = x\n   else:\n      greater = y\n   \n   while(True):\n      if((greater % x == 0) and (greater % y == 0)):\n         lcm = greater\n         break\n      greater += 1\n   \n   return lcm\n\n\n", "idx": 2842, "target": 0}
{"func": "# Write a function to count the number of carry operations for each of a set of addition problems\ndef carry_number(x, y):\n  ctr = 0\n  if(x == 0 and y == 0):\n    return 0\n  z = 0  \n  for i in reversed(range(10)):\n      z = x%10 + y%10 + z\n      if z > 9:\n        z = 1\n      else:\n        z = 0\n      ctr += z\n      x //= 10\n      y //= 10\n  if ctr == 0:\n    return \"No carry operation.\"\n  elif ctr == 1:\n    return ctr\n  else:\n    return ctr\n\n", "idx": 2843, "target": 0}
{"func": "# Write a function that returns a dictionary sorted descending by its keys\ndef descending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[0])}\n\n", "idx": 2844, "target": 0}
{"func": "# Write a Python program that prints all the numbers from 0 to 6 except 3 and 6\nfor x in range(6):\nif (x == 3 or x==6):\ncontinue\nprint(x,end=' ')\nprint(\"\\n\")\n\n", "idx": 2845, "target": 0}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict))\n\nres=True\nfor key,value in test_dict.items():\n    if value==False:\n       res=False\n       break\nprint(f\"Dictionary is {res}\")\n\n", "idx": 2846, "target": 0}
{"func": "# Write a function that returns relu value of the input\ndef relu(x:float) -> float:\n    x = 0 if x < 0 else x\n    return x\n\n", "idx": 2847, "target": 0}
{"func": "#12 write a program to convert key-values list to flat dictionary \n\nfrom itertools import product \ntest_dict = {'month' : [1, 2, 3], \n             'name' : ['Jan', 'Feb', 'March']} \n  \nprint(\"The original dictionary is : \" + str(test_dict)) \n  \nres = dict(zip(test_dict['month'], test_dict['name'])) \nprint(\"Flattened dictionary : \" + str(res)) \n\n", "idx": 2848, "target": 0}
{"func": "# write a python function for Named Entity Recognizer using NLTK\ndef ner_checker(texts):\n    all_set = set()\n\n    def nltk_ner_check(texts):\n        for i, text in texts:\n            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):\n                if isinstance(entity, nltk.tree.Tree):\n                    etext = \" \".join([word for word, tag in entity.leaves()])\n                    # label = entity.label()\n                    all_set.add(etext)\n\n    nltk_ner_check(texts=texts)\n    return all_set\n\n\n", "idx": 2849, "target": 0}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres = [sub for sub in test_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res))\n\n", "idx": 2850, "target": 0}
{"func": "# Generate random Universally unique IDs\nimport uuid\nsafeId = uuid.uuid4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 2851, "target": 0}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentence = 'this is my sentence and i will write it my way'\nminlength = 3\nresult = [word for word in sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 2852, "target": 0}
{"func": "# write a python program to print all prime numbers in a given interval\nlower = 900\nupper = 1000\nfor num in range(lower, upper + 1):\n   if num > 1:\n      for i in range(2, num):\n         if (num % i) == 0:\n               break\n      else:\n         print(num)\n\n\n", "idx": 2853, "target": 0}
{"func": "# Write a python function to get the surface_area of a rectangular prism with side as length, width and height as input\ndef rec_prism_surface_area(length, width, height):\n    surface_area = 2*((length * width) + (width * height) + (height * length))\n    return surface_area \n\n\n", "idx": 2854, "target": 0}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  mylist = [i for i in listChunk]\n  print(\"After reversing it \", mylist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 2855, "target": 0}
{"func": "# write a python function that takes a dictionary and a string, appends the string to the list of values\ndef addnames_in_dict (dictname, name):\n    for i in dictname:\n        dictname[i].append(name)\n    return dictname\naddnames_in_dict({\"1\":[\"A\"]}, \"Arun\")\n\n\n", "idx": 2856, "target": 0}
{"func": "# Write a python program to flatten  a multidimensional list\n\nmy_list = [[10,20,30],[40,50,60],[70,80,90]]\n\nflattened = [x for temp in my_list for x in temp]\nprint(flattened)\n\n\n", "idx": 2857, "target": 0}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\ndef cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*r*math.sin(theta)\n\n", "idx": 2858, "target": 0}
{"func": "# write a python program to get indexes for each element in a list using enumerate\n  \n  l1 = [\"eat\",\"sleep\",\"repeat\"] \n  for ele in enumerate(l1): \n      print (ele) \n    \n", "idx": 2859, "target": 0}
{"func": "# Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.\norg_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]\ni = 0\nwhile i < len(org_intervals)-1:\n    if org_intervals[i+1][0] < org_intervals[i][1]:\n        org_intervals[i][1]=org_intervals[i+1][1]\n        del org_intervals[i+1]\n        i = i - 1\n    i = i + 1\nprint(org_intervals)\n\n", "idx": 2860, "target": 0}
{"func": "#14 write program to extract digits from Tuple list \nfrom itertools import chain \ntest_list = [(15, 3), (3, 9), (1, 10), (99, 2)] \nprint(\"The original list is : \" + str(test_list)) \ntemp = map(lambda ele: str(ele), chain.from_iterable(test_list)) \nres = set() \nfor sub in temp: \n    for ele in sub: \n        res.add(ele) \nprint(\"The extrated digits : \" + str(res))  \n\n", "idx": 2861, "target": 0}
{"func": "# 24 write a program to caclulate the approximate value of pi using the monte carlo method\n\nimport random\n\n\ndef pi_monte_carlo(n=1000000):\n    count = 0\n    for _ in range(n):\n        x = random.random()\n        y = random.random()\n        if x ** 2 + y ** 2 <= 1:\n            count += 1\n    return 4 * count / n\n\n\nprint(pi_monte_carlo())\n\n", "idx": 2862, "target": 0}
{"func": "# Write a Python Program to Generate Gray Codes using Recursion\n\ndef get_gray_codes(n):\n    \"\"\"Return n-bit Gray code in a list.\"\"\"\n    if n == 0:\n        return ['']\n    first_half = get_gray_codes(n - 1)\n    second_half = first_half.copy()\n \n    first_half = ['0' + code for code in first_half]\n    second_half = ['1' + code for code in reversed(second_half)]\n \n    return first_half + second_half\n\n", "idx": 2863, "target": 0}
{"func": "# write a list comprehension for printing rows into columns and vv\n\nl=[[1 ,2, 3], [4, 5, 6], [7, 8, 9]]\nprint([[row[i] for row in l] for i in range(3)])\n\n", "idx": 2864, "target": 0}
{"func": "# write a python function that accepts a dictionary that has unique values and returns its inversion\ndef invert_dict(input_dict):\n  my_inverted_dict = {value: key for key, value in input_dict.items()}\n  return my_inverted_dict\n\n", "idx": 2865, "target": 0}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    r = 8.3145 # gas constant R\n    return (n*r*temp)/volume\n\n", "idx": 2866, "target": 0}
{"func": "# write a python program to extract N largest dictionaries keys  and print it\nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res.append(key) \n  \n", "idx": 2867, "target": 0}
{"func": "# Python program to calculate area of a circle\n\ndef area(a):\n    from math import pi\n    r = float(input(\"Input the radius of the circle : \"))\n    return \"The area of the circle with radius \" + str(r) + \" is: \" + str(pi * a ** 2)\n\n\nprint(area(5))\n\n\n", "idx": 2868, "target": 0}
{"func": "# Write a python function to extract odd length words in String\ndef findoddlenthwords(test_str):\n\tres = [] \n\tfor ele in test_str.split(): \n\t\tif len(ele) % 2 : \n\t\t\tres.append(ele) \n\treturn res\n\t\n\n\t\n", "idx": 2869, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Prime Number\n\ndef prime_no_check(a):\n    k=0\n    for i in range(2,a//2+1):\n        if(a%i==0):\n            k=k+1\n    if(k<=0):\n        return True\n    else:\n        return False\n\n", "idx": 2870, "target": 0}
{"func": "# Write a program to print a given string, replacing all the vowels with '_'\n\nst = \"Where is this going? Could you please help me understand!\"\nvowels = \"AEIOUaeiou\"\n\nfor v in vowels:\n    st = st.replace(v, '_')\n\nprint(st)\n\n\n", "idx": 2871, "target": 0}
{"func": "# Write a program that accepts a sentence and calculate the number of letters and digits.\ns = raw_input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\n    if c.isdigit():\n        d[\"DIGITS\"]+=1\n    elif c.isalpha():\n        d[\"LETTERS\"]+=1\n    else:\n        pass\nprint \"LETTERS\", d[\"LETTERS\"]\nprint \"DIGITS\", d[\"DIGITS\"]\n\n", "idx": 2872, "target": 0}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list1))\n\n", "idx": 2873, "target": 0}
{"func": "# Write a Python program to print negative numbers in a list\nlist1 = [11, -21, 0, 45, 66, -93] \nfor num in list1: \n    if num < 0: \n       print(num, end = \" \") \t\n\n\n\n", "idx": 2874, "target": 0}
{"func": "#22 function to print marsh code equivalent from string.\ndef encode_marsh(sen : str):\n    char_to_dots = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n                      'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n                      'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n                      'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n                      'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',\n                      '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',\n                      '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n                      '&': '.-...', \"'\": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',\n                      ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',\n                      '-': '-....-', '+': '.-.-.', '\"': '.-..-.', '?': '..--..', '/': '-..-.'\n                    }\n    for i in sen:\n        print(char_to_dots[i.upper()])\n\n\n", "idx": 2875, "target": 0}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n\n\n\n\n", "idx": 2876, "target": 0}
{"func": "# write a python function for some weird hypnosis text.\ndef weird():\n    import random\n\n    def getlength(script):\n        return sum((i['length'] for i in script))\n\n    def truncate(target_length, script):\n        if getlength(script) > target_length:\n            script = sorted(script, key=lambda k: (k['priority'], -k['length']))[:-1]\n            return truncate(target_length, script)\n        return sorted(script, key=lambda k: k['index'])\n\n    def as_text(script):\n        return \"\\n\".join([i['text'] for i in script])\n\n    priorities_and_sentences = [\n        (1, \"...now... sitting comfortably in the chair\"),\n        (2, \"...with your feet still flat on the ground\"),\n        (3, \"...back straight and head up right\"),\n        (2, \"...make these adjustments now if you need to\"),\n        (3, \"... pause..............................\"),\n        (1, \"...your eyes ...still ...comfortably closed\"),\n        (2, \"...nice and relaxed...comfortable and relaxed...\"),\n        (3, \"... pause.......................................\"),\n        (1, \"...now...I want you to notice...how heavy your head is starting to feel...\"),\n        (1, \"how heavy your head feels...\"),\n        (3, \"... pause.......................................\"),\n        (2, \"really noticing the weight... of your head...\"),\n        (3,\n         \"and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable\"),\n    ]\n\n    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in\n                  enumerate(priorities_and_sentences)]\n\n    print(as_text(truncate(500, scriptlist)))\n    print(as_text(truncate(300, scriptlist)))\n    print(as_text(truncate(200, scriptlist)))\n\n\n", "idx": 2877, "target": 0}
{"func": "# Write a program to Expand and print a string like \"a-z\" #Example: enter first string :b # enter last string: e #Output : bcde\nfirst = input(\"The first: \")\nlast = input(\"The last: \")\n\nwhile first <= last:\n    print(first, end='')\n    first = chr(ord(first) + 1)\nprint()\n\n", "idx": 2878, "target": 0}
{"func": "# Python program to create histogram from given list\ndef histogram(items):\n    for n in items:\n        output = ''\n        times = n\n        while times > 0:\n            output += '*'\n            times = times - 1\n        print(output)\n\n\nhistogram([2, 3, 6, 5])\n\n", "idx": 2879, "target": 0}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    pi = 3.14\n    return 2*pi*r\n\n", "idx": 2880, "target": 0}
{"func": "# Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given\ndef compound_interest(p,r,t):\n    ci = p * (pow((1 + r / 100), t)) \n    return ci\n\n\n", "idx": 2881, "target": 0}
{"func": "# Write a python function to get the surface_area of a cylinder with radius & height as input\ndef cylinder_surface_area(radius, height):\n    surface_area = 3.14 * (radius ** 2) + (2 * 3.14 * radius * height)\n    return surface_area\n\n\n", "idx": 2882, "target": 0}
{"func": "# write a python function to convert byte to UTF-8\ndef byte_to_utf8(data):\n    return data.decode(\"utf-8\")\nprint(byte_to_utf8(data=b'r\\xc3\\xa9sum\\xc3\\xa9'))\n\n", "idx": 2883, "target": 0}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\n\nclass CircleArea():\n    def __init__(self,radius):\n        self.radius=radius\n    def area(self):\n        return 3.14 * self.radius * self.radius\na=6\nobj=CircleArea(a)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 2884, "target": 0}
{"func": "#49 write a program to find the factorial of a number\n\nnum = int(input(\"Enter a number: \"))  \nfactorial = 1  \nif num < 0:  \n   print(\"Sorry, factorial does not exist for negative numbers\")  \nelif num == 0:  \n   print(\"The factorial of 0 is 1\")  \nelse:  \n   for i in range(1,num + 1):  \n       factorial = factorial*i  \n   print(\"The factorial of\",num,\"is\",factorial) \n   \n", "idx": 2885, "target": 0}
{"func": "# Write a Python function to multiply all the numbers in a list\ndef multiply(numbers):\ntotal = 1\nfor x in numbers:\ntotal *= x\nreturn total\nprint(multiply((8, 2, 3, -1, 7)))\n\n", "idx": 2886, "target": 0}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 2887, "target": 0}
{"func": "# Write a function to return the area of a trapezium with base a base b and height h between parallel sides\ndef cal_area_trapezium(a,b,h):\n    return h*(a+b)/2\n\n", "idx": 2888, "target": 0}
{"func": "# Program to cyclically rotate an array by one \n\ndef cyclicRotate(input): \n    print ([input[-1]] + input[0:-1]) \n\n", "idx": 2889, "target": 0}
{"func": "# Please write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension\nimport random\nprint(random.choice([i for i in range(201) if i%5==0 and i%7==0]))\n\n", "idx": 2890, "target": 0}
{"func": "# Write Python Program to Print Table of a Given Number\n\nn=int(input(\"Enter the number to print the tables for:\"))\nfor i in range(1,11):\n    print(n,\"x\",i,\"=\",n*i)\n\t\n\t\n", "idx": 2891, "target": 0}
{"func": "# Write a function that returns derivative of log of a function\ndef derivative_log(x:float)->float:\n    return (1/x)\n\n\n", "idx": 2892, "target": 0}
{"func": "# Write a Python function to count number of lists in a list of lists \ndef countList(lst): \n    count = 0\n    for el in lst: \n        if type(el)== type([]): \n            count+= 1          \n    return count \n\t\n\t\n", "idx": 2893, "target": 0}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersection = firstSet.intersection(secondSet)\nfor item in intersection:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 2894, "target": 0}
{"func": "# write a python function to get the sum of numbers in a given digit\n \n def getSum(n):     \n    sum = 0\n    for digit in str(n):   \n      sum += int(digit)        \n    return sum\n \n\n", "idx": 2895, "target": 0}
{"func": "# Write a python program to print the Sum of digits of a number\nn = 12345\nq = 0\nwhile(n>0):\n r=n%10\n q=q+r\n n=n//10\nprint(\"Sum of digits is: \"+str(q))\t\n\n\n\n", "idx": 2896, "target": 0}
{"func": "# Write a Python function to calculate factorial of a given no using closer\n\ndef fact():\n    cache = {0:1, 1:1}\n\n    def calc_fib(n):\n        if n not in cache:\n            print(f'Calculating fact({n})')\n            cache[n] = calc_fib(n - 1) * n\n        return cache[n]\n    return calc_fib\n\n", "idx": 2897, "target": 0}
{"func": "# Write a Python Program to print the Sum of First N Natural Numbers\n\nn=7\nsum1 = 0\nwhile(n > 0):\n    sum1=sum1+n\n    n=n-1\nprint(\"The sum of first n natural numbers is\",sum1)\n\n", "idx": 2898, "target": 0}
{"func": "# write a python Program to Solve Quadratic Equation\nimport cmath\na = 1\nb = 5\nc = 6\nd = (b**2) - (4*a*c)\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n", "idx": 2899, "target": 0}
{"func": "# Generate random Universally unique IDs\nimport uuid\nsafeId = uuid.uuid4()\nprint(\"safe unique id is \", safeId)\n\n", "idx": 2900, "target": 0}
{"func": "# write a Python function to check if count of divisors is even or odd\ndef NumOfDivisor(n): \n    if n < 1: \n        return\n    root_n = n**0.5\n    if root_n**2 == n: \n        print(\"Odd\") \n    else: \n        print(\"Even\") \n\n", "idx": 2901, "target": 0}
{"func": "# write a python function that would print the ASCII value of a given character\ndef print_ascii(char):\n    print(ord(char))\n\n\n", "idx": 2902, "target": 0}
{"func": "# Write a function to calculate the total resistance of resistances in parallel in a given list\ndef cal_total_res_in_parallel(res_list:list)->float:\n    return sum([1/r for r in res_list])\n\n", "idx": 2903, "target": 0}
{"func": "# write a python function that returns the square of a given input number\ndef square(x):\n    return x**2\n\n\n", "idx": 2904, "target": 0}
{"func": "# write a Python program to demonstrate to convert list of string to list of list \n\ntest_list = [ '[1, 4, 5]', '[4, 6, 8]' ] \n\nprint (f\"The original list is : {test_list}\") \n\nres = [i.strip(\"[]\").split(\", \") for i in test_list] \n\nprint (f\"The list after conversion is : {res}\") \n\n", "idx": 2905, "target": 0}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    c = 300000\n    return mass * (c**2)\n\n", "idx": 2906, "target": 0}
{"func": "# Counting total Upper Case in a string\nstr1 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str1)):\n  char = str1[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 2907, "target": 0}
{"func": "# Write a program that computes the net amount of a bank account based a transaction log from console input.\nnetAmount = 0\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    values = s.split(\" \")\n    operation = values[0]\n    amount = int(values[1])\n    if operation==\"D\":\n        netAmount+=amount\n    elif operation==\"W\":\n        netAmount-=amount\n    else:\n        pass\nprint netAmount\n\nDefine a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\n\ndef putNumbers(n):\n    i = 0\n    while i<n:\n        j=i\n        i=i+1\n        if j%7==0:\n            yield j\nfor i in reverse(100):\n    print i\n\nA robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:\nimport math\npos = [0,0]\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    movement = s.split(\" \")\n    direction = movement[0]\n    steps = int(movement[1])\n    if direction==\"UP\":\n        pos[0]+=steps\n    elif direction==\"DOWN\":\n        pos[0]-=steps\n    elif direction==\"LEFT\":\n        pos[1]-=steps\n    elif direction==\"RIGHT\":\n        pos[1]+=steps\n    else:\n        pass\nprint int(round(math.sqrt(pos[1]**2+pos[0]**2)))\n\n", "idx": 2908, "target": 0}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    pi=3.14\n    return pi*(radius**2)*height\n\n", "idx": 2909, "target": 0}
{"func": "#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.\nn = 0\nfor i in range(1,500):\n     if not i % 5 or not i % 3:\n         n = n + i\nprint(n)\n\n", "idx": 2910, "target": 0}
{"func": "# write a python function for a string to swap the case of all letters.\ndef swap_case(s):\n    return ''.join(x for x in (i.lower() if i.isupper() else i.upper() for i in s))\n\n\n", "idx": 2911, "target": 0}
{"func": "# 7. python sigmoid function\ndef sigmoid_activation(l):\n    return[round(1/(1+math.exp(-x)),2) for x in l]\n\n", "idx": 2912, "target": 0}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random import shuffle\nmylist = [1, 2, 3, 4, 5]\nshuffle(mylist)\nprint(mylist)\n\n\n", "idx": 2913, "target": 0}
{"func": "# 5 write a python function to accept a number and return all the numbers from 0 to that number\n\n\ndef print_numbers(x):\n    for i in range(x):\n        print(i)\n\n\n", "idx": 2914, "target": 0}
{"func": "# Check if the key exists or not in JSON\nimport json\n\nstudentJson =\"\"\"{\n   \"id\": 1,\n   \"name\": \"Piyush Jain\",\n   \"class\": null,\n   \"percentage\": 35,\n   \"email\": \"piyushjain220@gmail.com\"\n}\"\"\"\n\nprint(\"Checking if percentage key exists in JSON\")\nstudent = json.loads(studentJson)\nif \"percentage\" in student:\n    print(\"Key exist in JSON data\")\n    print(student[\"name\"], \"marks is: \", student[\"percentage\"])\nelse:\n    print(\"Key doesn't exist in JSON data\")\n\n", "idx": 2915, "target": 0}
{"func": "# By using list comprehension, please write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) if i%2!=0]\nprint(li)\n\n", "idx": 2916, "target": 0}
{"func": "# write a python program to check if a number is prime or not\n\nnum = 407\n\nif num > 1:\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           print(i,\"times\",num//i,\"is\",num)\n           break\n   else:\n       print(num,\"is a prime number\")\nelse:\n   print(num,\"is not a prime number\")\n\n\n\n", "idx": 2917, "target": 0}
{"func": "# Python program to implement Gnome Sort\ndef gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        if arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr\narr = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i in arr:\n    print(i)\n\n\n", "idx": 2918, "target": 0}
{"func": "#3 add 1 to all elements in list python\nlst = [1,2,3]\nlist(map(lambda x:x+1, lst))\n\n", "idx": 2919, "target": 0}
{"func": "# Python program to add two objects if both objects are of type integer\n\ndef add_numbers(a, b):\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise TypeError(\"Inputs must be integers\")\n    return a + b\n\n\nprint(add_numbers(10, 20))\n\n\n", "idx": 2920, "target": 0}
{"func": "# write a python function to return powerset of iterable\ndef powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    from itertools import chain, combinations\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\nlist(powerset([1,2,3]))\n\n", "idx": 2921, "target": 0}
{"func": "# write a function that acts like a ReLU function for a 1D array\ndef relu_list(input_list:list)->list:\n    return [(lambda x: x if x >= 0 else 0)(x) for x in input_list]\n\n", "idx": 2922, "target": 0}
{"func": "# write a python program to print the table of input integer\n\nnum = int(input(\"Please enter a number \"))\nfor a in range(1,11):\n    print(num , 'x' , a , '=' ,num*a)\n    \n", "idx": 2923, "target": 0}
{"func": "# Write a function to return the cartisian distance between two points\ndef cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 2924, "target": 0}
{"func": "# Write a function to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punc = r'!()-[]{};:\\, <>./?@#$%^&*_~'\n    for ele in test_str:\n        if ele in punc:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_str)\n\n\n", "idx": 2925, "target": 0}
{"func": "# Write a python program to print odd numbers in given range\nlower=int(input(\"Enter the lower limit for the range:\"))\nupper=int(input(\"Enter the upper limit for the range:\"))\nfor i in range(lower,upper+1):\n    if(i%2!=0):\n        print(i)\n\n", "idx": 2926, "target": 0}
{"func": "# Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0\ndef root_type(a:float,b:float,c:float):\n    if b**2-4*a*c >= 0:\n        return 'real'\n    else:\n        return 'imaginary'\n\n", "idx": 2927, "target": 0}
{"func": "# write a function to find all urls in a given string\n\nimport re \n  \ndef find_urls(string): \n   \n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url = re.findall(regex,string)       \n    return [x[0] for x in url] \n\n", "idx": 2928, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    pi=3.14\n    return pi*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 2929, "target": 0}
{"func": "# write a python program to break when the num is perfectly divisible\ni = 1\nwhile True:\n    if i%3 == 0:\n        break\n    print(i)\n \n    i+= 1\n\n", "idx": 2930, "target": 0}
{"func": "# 40. write a Python function to Remove all duplicates from a given string\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    t=\"\" \n    for i in str: \n        if(i in t): \n            pass\n        else: \n            t=t+i \n    print(\"With Order:\",t) \n    \nstr1=\"conondrum\"\nremoveDuplicate(str1) \n\nfrom .sin import sine\nfrom .cos import cosine\nfrom .tan import tangent\nfrom .softmax import softmax\nfrom .sigmoid import sigmoid\nfrom .tanh import tanh\nfrom .relu import ReLU\nfrom .log import log\nfrom .exp import exp\n\nfrom .sin import dsine\nfrom .cos import dcosine\nfrom .tan import dtangent\nfrom .sigmoid import dsigmoid\nfrom .tanh import dtanh\nfrom .log import dlog\nfrom .exp import dexp\n\nimport math\n\n", "idx": 2931, "target": 0}
{"func": "#83 function to show reading values from list is expensive in camparison to tuple\ndef compare_list_tuple():\n    from timeit import timeit\n    import random\n    l = [ random.randint(1,100) for _ in range(100) ]\n    tu = tuple(l)\n    list_time = timeit(stmt = 'max(l)', globals = locals(), number = 1)\n    tup_time = timeit(stmt = 'max(tu)', globals = locals(), number = 1)\n    if list_time > tup_time:\n        print('Hence proved')\n    else:\n        raise ValueError('You did something Wrong')\n\n\n", "idx": 2932, "target": 0}
{"func": "# write a program to transpose a matrix\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nif not isinstance(M[0], list):\n    M = [M]\n\nrows = len(M)\ncols = len(M[0])\n\nMT = []\nwhile len(MT) < dim:\n    MT.append([])\n    while len(MT[-1]) < dim:\n        MT[-1].append(0.0)\n\nfor i in range(rows):\n    for j in range(cols):\n        MT[j][i] = M[i][j]\n\nprint(\"Transpose Array\")\nfor i in range(rows):\n    row = '|'\n    for b in range(cols):\n        row = row + ' ' + str(MT[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 2933, "target": 0}
{"func": "# write a python function to collect data into fixed-length chunks or blocks\ndef grouper(iterable, n, fillvalue=None):\n    from itertools import zip_longest\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return zip_longest(*args, fillvalue=fillvalue)\n\n", "idx": 2934, "target": 0}
{"func": "# write a python function to convert hours to seconds\n\ndef convert_to_seconds(num_hours):\n    minutes = num_hours * 60\n    seconds = minutes * 60\n    return seconds\n\n", "idx": 2935, "target": 0}
{"func": "# write Python function to Clear the Rightmost Set Bit of a Number\ndef clear_rightmost_set_bit(n):\n    return n & (n - 1)\n\t\n\t\n\t\n", "idx": 2936, "target": 0}
{"func": "# write a python function to print prime numbers between two numbers \ndef get_prime_numbers(range1, range2):\n    for num in range(range1,range2):\n        for i in range(2,num):\n            if num%i == 0:\n                j=num/i\n                break\n        else:\n            print(num, 'is a prime number')\n\n", "idx": 2937, "target": 0}
{"func": "# write a python program to convert unix timestamp string to readable date.\n\nimport datetime\nunix_timestamp=\"1284105682\"\nprint(\n    datetime.datetime.fromtimestamp(\n        int(unix_timestamp)\n    ).strftime('%Y-%m-%d %H:%M:%S')\n)\n\n", "idx": 2938, "target": 0}
{"func": "#74 write a program to return the absolute value in Python\n\ndef get_absolute_value(n):\n\tif n >= 0:\n\t\treturn n\n\telse:\n\t\treturn -n\n\nprint(get_absolute_value(101))\n\n", "idx": 2939, "target": 0}
{"func": "# 2 write a python function to split a string at space\n\n\ndef string_split_at_space(string):\n    return string.split()\n\n\n", "idx": 2940, "target": 0}
{"func": "# 84 Define a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\nclass Person(object):\n    def getGender(self):\n        return \"Unknown\"\n\n\nclass Male(Person):\n    def getGender(self):\n        return \"Male\"\n\n\nclass Female(Person):\n    def getGender(self):\n        return \"Female\"\n\n\naMale = Male()\naFemale = Female()\nprint(aMale.getGender())\nprint(aFemale.getGender())\n\n", "idx": 2941, "target": 0}
{"func": "# Write a python function to print staircase pattern\n\ndef pattern(n): \n  \n    for i in range(1,n+1):   \n        # conditional operator \n        k =i + 1 if(i % 2 != 0) else i   \n\n        for g in range(k,n): \n            if g>=k: \n                print(end=\"  \") \n  \n        for j in range(0,k): \n            if j == k - 1: \n                print(\" * \") \n            else: \n                print(\" * \", end = \" \") \n  \n  \n", "idx": 2942, "target": 0}
{"func": "# Abortive statements in finally blocks\ndef try_finally1():\n    try:\n        print('in try:')\n        print('do some stuff')\n        float('abc')\n    except ValueError:\n        print('an error occurred')\n    else:\n        print('no error occurred')\n    finally:\n        print('always execute finally')\ntry_finally1()\n\n", "idx": 2943, "target": 0}
{"func": "#40 write a function to return the nth fibonacci in python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n", "idx": 2944, "target": 0}
{"func": "#25 write a function to print the time taken by a calc function to ferform a simple multiplication 10 Million time\ndef time_calc(n: int):\n    import time\n    start = time.perf_counter()\n    for i in range(10000000):\n        n*2\n    end = time.perf_counter()\n    return end-start\n\n\n", "idx": 2945, "target": 0}
{"func": "# Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two\ndef setBitNumber(n): \n    if (n == 0): \n        return 0\n    msb = 0 \n    n = int(n / 2) \n    while (n > 0): \n        n = int(n / 2) \n        msb += 1\n    return (1 << msb) \n\n", "idx": 2946, "target": 0}
{"func": "# Write a function to return the area of a right angle triangle\n\ndef cal_rt_triangle_area(base:float,height:float)->float:\n    if base and height:\n        return (base*height)/2\n    else:\n        return None\n\n", "idx": 2947, "target": 0}
{"func": "# write a program to print the longest key in a dictioinary\ndict_1 = {\"key1\": 10, \"keeeey2\": 2, \"ky3\": 30}\nmax_key=''\nfor key in dict_1:\n  if len(key)>len(max_key):\n    max_key=key\nprint(max_key)\n\n", "idx": 2948, "target": 0}
{"func": "# write a python function to find rightmost value less than or equal to x\ndef find_le(a, x):\n    from bisect import bisect_right  \n    i = bisect_right(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 2949, "target": 0}
{"func": "# write a python function to find H.C.F of two numbers\n\ndef compute_hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 2950, "target": 0}
{"func": "# Write a python function to remove all the odd numbers from a list and return the remaining list\n\ndef remove_odd(my_list):\n    result = list(filter(lambda x: (x % 2 == 0), my_list))\n    return result\n\n\n", "idx": 2951, "target": 0}
{"func": "# write Python3 code to demonstrate working of Add list elements to tuples list Using list comprehension + \"+\" operator \ntest_list = [(5, 6), (2, 4), (5, 7), (2, 5)] \nprint(\"The original list is : \" + str(test_list)) \nsub_list = [7, 2, 4, 6] \nres = [sub + tuple(sub_list) for sub in test_list] \nprint(\"The modified list : \" + str(res)) \n\n\n", "idx": 2952, "target": 0}
{"func": "# Define a class named American which has a static method called printNationality.\nclass American(object):\n    @staticmethod\n    def printNationality():\n        print(\"America\")\n\nanAmerican = American()\nanAmerican.printNationality()\nAmerican.printNationality()\n\n", "idx": 2953, "target": 0}
{"func": "# write a python function to check whether the number is a lucky number \n\ndef isLucky(n):\n    \n    isLucky.counter = 2\n    next_position = n \n    if isLucky.counter > n:\n        return 1\n    if n % isLucky.counter == 0:\n        return 0\n    next_position = next_position - next_position /isLucky.counter\n    isLucky.counter = isLucky.counter + 1\n    return isLucky(next_position)\n \n", "idx": 2954, "target": 0}
{"func": "# Write a python function to identify type of given data structure\n\ndef ds_type(ds):\n  return(type(ds))\n\nl=[1,2,3,4]\nds_type(l)\n\n", "idx": 2955, "target": 0}
{"func": "#37. Python Program to Display Fibonacci Sequence Using Recursion\ndef recur_fibo(n):\n   if n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\n\nnterms = 10\n\n", "idx": 2956, "target": 0}
{"func": "# Write a python program to Implement Bubble sort and print the sorted list for the below list\n\ndef bubble_sort(alist):\n    for i in range(len(alist) - 1, 0, -1):\n        no_swap = True\n        for j in range(0, i):\n            if alist[j + 1] < alist[j]:\n                alist[j], alist[j + 1] = alist[j + 1], alist[j]\n                no_swap = False\n        if no_swap:\n            return\n \n \nalist = [2, 3, 5, 6, 4, 5]\nbubble_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2957, "target": 0}
{"func": "# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")\n\n\n", "idx": 2958, "target": 0}
{"func": "#86 Write a Python program to generate groups of five consecutive numbers in a list\nl = [[5*i + j for j in range(1,6)] for i in range(5)]\nprint(l)\n\n", "idx": 2959, "target": 0}
{"func": "# Driver program \nif __name__ == \"__main__\": \n    input = 'Hello World'\n    heterogram(input) \n\n", "idx": 2960, "target": 0}
{"func": "# Write a python program which can compute the factorial of a given number.\nef fact(x):\nif x == 0:\nreturn 1\nreturn x * fact(x - 1)\n\nx=int(raw_input())\nprint (fact(x))\n\n", "idx": 2961, "target": 0}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentence = 'the quick brown fox jumps over the lazy dog'\nwords = sentence.split(' ')\nlengths = [str(len(word)) for word in words]\nprint(' '.join(lengths))\n\n\n", "idx": 2962, "target": 0}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(reverse=True)\nprint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 2963, "target": 0}
{"func": "# write a Python program to demonstrate removal of dictionary pair \n\ntest_dict = {\"Arushi\" : 22, \"Anuradha\" : 21, \"Mani\" : 21, \"Haritha\" : 21} \n\nprint (f\"The dictionary before performing remove is : {test_dict}\") \n\ndel test_dict['Mani'] \n\nprint (f\"The dictionary after remove is : {test_dict}\") \n\n", "idx": 2964, "target": 0}
{"func": "# write a python program to remove punctuations from a string and print it\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = input(\"Enter a string: \")\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n", "idx": 2965, "target": 0}
{"func": "# Write a function to return the cartisian distance between two points\ndef cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 2966, "target": 0}
{"func": "# write Python code to convert Celsius scale to Fahrenheit scale \ndef Cel_To_Fah(n): \n    return (n*1.8)+32\nn = 20\nprint(int(Cel_To_Fah(n))) \n\n", "idx": 2967, "target": 0}
{"func": "# write a python function to identify the total counts of chars, digits,and symbols for given input string \n\ndef findDigitsCharsSymbols(inputString):\n    charCount = 0\n    digitCount = 0\n    symbolCount = 0\n    for char in inputString:\n        if char.islower() or char.isupper():\n              charCount+=1\n        elif char.isnumeric():\n              digitCount+=1\n        else:\n            symbolCount+=1\n      \n    print(\"Chars = \", charCount, \"Digits = \", digitCount, \"Symbol = \", symbolCount)\n      \ninputString = \"P@#yn26at^&i5ve\"\nprint(\"total counts of chars, digits,and symbols \\n\")\n\nfindDigitsCharsSymbols(inputString)\n\n\n", "idx": 2968, "target": 0}
{"func": "#59 function to show boolean true / false is a number\ndef bool_show(a=5):\n    return False*a \n\n\n", "idx": 2969, "target": 0}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nfor sub in test_list:                                            \n    if res and res[-1][0] == sub[0]:               \n        res[-1].extend(sub[1:])                         \n    else: \n        res.append([ele for ele in sub])      \nres = list(map(tuple, res)) \n  \nprint(\"The extracted elements : \" + str(res))\n\n\n", "idx": 2970, "target": 0}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using class\n\nclass Fib:\n    def __init__(self):\n        self.cache = {1:1, 2:1}\n\n    def fib(self, n):\n        if n not in self.cache:\n            print(f'Calculating fib({n})')\n            self.cache[n] = self.fib(n-1) + self.fib(n-2)\n        return self.cache[n]\n\n", "idx": 2971, "target": 0}
{"func": "# write a python program that prints out natural numbers less than or equal to the given number using a while loop\ninput_num = 27\nwhile input_num:\n    print(input_num)\n    input_num -= 1\n\n\n", "idx": 2972, "target": 0}
{"func": "# Write a Python program to count the number of even and odd numbers from a series of numbers.\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\ncount_odd = 0\ncount_even = 0\nfor x in numbers:\nif not x % 2:\ncount_even+=1\nelse:\ncount_odd+=1\nprint(\"Number of even numbers :\",count_even)\nprint(\"Number of odd numbers :\",count_odd)\n\n", "idx": 2973, "target": 0}
{"func": "#Write a function to get list of profanity words from Google profanity URL\ndef profanitytextfile():\n    url = \"https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt\"\n    html = urlopen(url).read()\n    soup = BeautifulSoup(html, features=\"html.parser\")\n\n    textlist = []\n    table = soup.find('table')\n    trs = table.find_all('tr')\n    for tr in trs:\n        tds = tr.find_all('td')\n        for td in tds:\n            textlist.append(td.text)\n    return textlist\n\n", "idx": 2974, "target": 0}
{"func": "#50 function to check whether a given name is function or method\ndef inspect_func(fn):\n    from inspect import isfunction, ismethod\n    print(f'{fn} is method {ismethod(func)}')\n    print(f'{fn} is function {isfunction(func)}')\n\n\n", "idx": 2975, "target": 0}
{"func": "# Write a function that returns a dictionary sorted ascending by its keys\ndef ascending_dict_keysort(d:dict):\n    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[0])}\n\n", "idx": 2976, "target": 0}
{"func": "# write a generator function in python to generate infinite square of numbers using yield\ndef nextSquare(): \n    i = 1;  \n    # An Infinite loop to generate squares  \n    while True: \n        yield i*i                 \n        i += 1\n\n", "idx": 2977, "target": 0}
{"func": "# Write a lambda function to find the intersection of two lists\n\nintersection = lambda a, b: list(set(a)&set(b))\n\n", "idx": 2978, "target": 0}
{"func": "# write a python function to clamp a number within a user specified range\n\ndef clamp_number(num, a, b):\n  return max(min(num, max(a, b)), min(a, b))\n\n", "idx": 2979, "target": 0}
{"func": "# Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two\ndef setBitNumber(n): \n    if (n == 0): \n        return 0\n    msb = 0 \n    n = int(n / 2) \n    while (n > 0): \n        n = int(n / 2) \n        msb += 1\n    return (1 << msb) \n\n", "idx": 2980, "target": 0}
{"func": "# Write a python program to Implement Gnome sort and print the sorted list for the below list\n\ndef gnome_sort(alist):\n    for pos in range(1, len(alist)):\n        while (pos != 0 and alist[pos] < alist[pos - 1]):\n            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]\n            pos = pos - 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ngnome_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2981, "target": 0}
{"func": "# write a python function to check whether all elements are equal to each other\ndef all_equal(iterable):\n    from itertools import groupby\n    g = groupby(iterable)\n    return next(g, True) and not next(g, False)\n\n", "idx": 2982, "target": 0}
{"func": "# write a function to reverse a string \n\ndef reverse_string(string):\n    return string[::-1]\n\n", "idx": 2983, "target": 0}
{"func": "# write a python program to display the Fibonacci sequence up to n-th term\nnterms = int(input(\"How many terms? \"))\n\nn1, n2 = 0, 1\ncount = 0\n\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       n1 = n2\n       n2 = nth\n       count += 1\n\n", "idx": 2984, "target": 0}
{"func": "# write a recursive python function to calculate sum of natural numbers upto n, where n is an argument\ndef recursive_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return n + recursive_sum(n-1)\n\n\n", "idx": 2985, "target": 0}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(test_list)) if test_list[idx] % 2 == 0] \n  \n\nres = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res)) \n\n\n", "idx": 2986, "target": 0}
{"func": "# Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n\n    return index\n\n", "idx": 2987, "target": 0}
{"func": "# Write a python program to Implement Selection sort and print the sorted list for the below list\n\ndef selection_sort(alist):\n    for i in range(0, len(alist) - 1):\n        smallest = i\n        for j in range(i + 1, len(alist)):\n            if alist[j] < alist[smallest]:\n                smallest = j\n        alist[i], alist[smallest] = alist[smallest], alist[i]\n \n \nalist = [2, 3, 5, 6, 4, 5]\nselection_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 2988, "target": 0}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n      \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 2989, "target": 0}
{"func": "# Define a custom exception class which takes a string message as attribute.\nclass MyError(Exception):\n    def __init__(self, msg):\n        self.msg = msg\n\n", "idx": 2990, "target": 0}
{"func": "# write a python function to check if SHA256 hashed value is valid for given data or not\ndef check_sha256_hash(hashed, data):\n    import hashlib\n    return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False\n\n\n", "idx": 2991, "target": 0}
{"func": "# Generate a list by list comprehension\nlist = [x for x in range(10)]\nprint(f\"List Generated by list comprehension:{list}\")\n\n", "idx": 2992, "target": 0}
{"func": "# Write a function to remove and print every third number from a list of numbers until the list becomes empty\ndef remove_nums(int_list):\n  position = 3 - 1 \n  idx = 0\n  len_list = (len(int_list))\n  while len_list>0:\n    idx = (position+idx)%len_list\n    print(int_list.pop(idx))\n    len_list -= 1\n\n\n", "idx": 2993, "target": 0}
{"func": "# write a function that merges two dictionaries\ndef merge_dictionaries(dict1, dict2):\n   return {**dict1, **dict2}\n\n\n", "idx": 2994, "target": 0}
{"func": "# Write a Python function that Given a two list of numbers create a new list such that new list should contain only odd numbers from the first list and even numbers from the second list\ndef mergeList(list1, list2):\n    thirdList = []\n    for num in list1:\n        if (num % 2 != 0):\n            thirdList.append(num)\n    for num in list2:\n        if (num % 2 == 0):\n            thirdList.append(num)\n    return thirdList\n\n\n", "idx": 2995, "target": 0}
{"func": "# write a python function to convert a number from octal to decimal\n    \n  def octalToDecimal(n): \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit * base; \n        base = base * 8; \n  \n    return dec_value; \n    \n", "idx": 2996, "target": 0}
{"func": "# write python function to detect if an year is leap year\ndef is_leap_year(year):\n    if (year % 4) == 0:\n        if (year % 100) == 0:\n            if (year % 400) == 0:\n                return True \n            else:\n                return False\n        else:\n            return True \n    else:\n        return False \n\n", "idx": 2997, "target": 0}
{"func": "# write a python function to return the factors of a number\ndef get_factors(num):\n   factors = []\n   for i in range(1, num + 1):\n      if num % i == 0:\n         factors.append(i)\n   return factors\n\n\n", "idx": 2998, "target": 0}
{"func": "# We would think that identity would always imply equality, but this is not always true, as we can see in the next example:\na = float('nan')\nprint('a is a,', a is a)\nprint('a == a,', a == a)\n\n", "idx": 2999, "target": 0}
{"func": "# Write a python program to Implement Insertion sort and print the sorted list for the below list\n\ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\ninsertion_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3000, "target": 0}
{"func": "# write a python program to use maxsplit with arbitrary whitespace\n\ns = \"foo    bar   foobar foo\"\n\nprint(s.split(None, 2))\n\n", "idx": 3001, "target": 0}
{"func": "# write a python function to Compute LCM\ndef compute_lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n", "idx": 3002, "target": 0}
{"func": "# write a python program to convert all list elements to upper case\ns=[\"pune\", \"mumbai\", \"delhi\"]\nprint([(w.upper(), len(w)) for w in s])\n\n", "idx": 3003, "target": 0}
{"func": "# Write a Python function that shifts the character of strings\n\ndef char_shift(string, shift_count):\n    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''\n    return \"\".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])\n\n", "idx": 3004, "target": 0}
{"func": "# Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\nvalues = []\nfor i in range(1000, 3001):\n    s = str(i)\n    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n        values.append(s)\nprint(\",\".join(values))\n\n\n", "idx": 3005, "target": 0}
{"func": "# write a program to remove duplicate elements in a list and print the list\n\ntest_list = [1, 3, 5, 6, 3, 5, 6, 1] \nprint (\"The original list is : \" +  str(test_list)) \n  \nres = [] \nfor i in test_list: \n    if i not in res: \n        res.append(i) \n  \nprint (\"The list after removing duplicates : \" + str(res))\n\n", "idx": 3006, "target": 0}
{"func": "# write a python function to return words in a sentence in sorted order\ndef get_sorted_words(sentence):\n   words = [word for word in sentence.split()]\n   words.sort()\n   return words\n\n\n", "idx": 3007, "target": 0}
{"func": "# write a python function for a string to swap the case of all letters.\ndef swap_case(s):\n    return ''.join(x for x in (i.lower() if i.isupper() else i.upper() for i in s))\n\n\n", "idx": 3008, "target": 0}
{"func": "# write a function to merge two sorted lists\ndef merge_lists(lst1, lst2):\n    # Write your code here\n    res = []\n    # handle case where one of the list will be empty\n    if len(lst1) == 0 or len(lst2) == 0:\n        res.extend(lst1 + lst2)\n        return res\n    \n    last_processed_i_idx = 0\n    last_processed_j_idx = 0\n    for i_idx, i in enumerate(lst1):\n        for j_idx, j in enumerate(lst2, start=last_processed_j_idx + 1):\n            if i < j:\n                res.append(i)\n                last_processed_i_idx = i_idx\n                break\n            elif i > j:\n                res.append(j)\n                last_processed_j_idx = j_idx\n                continue\n            else:\n                res.append(i)\n                last_processed_i_idx = i_idx\n                res.append(j)\n                last_processed_j_idx = j_idx\n                break\n    \n    if len(lst1) == last_processed_i_idx:\n        res.extend(lst2[last_processed_j_idx + 1:])\n    \n    if len(lst2) == last_processed_j_idx:\n        res.extend(lst1[last_processed_i_idx+ 1:])\n    return res\n\n", "idx": 3009, "target": 0}
{"func": "# write a function to calculate the apothem of polygon given the number of edges, circumradius\nimport math\ndef apothem_of_polygon(number_of_edges, circumradius):\n    return circumradius * math.cos(180/number_of_edges)\n    \n\n", "idx": 3010, "target": 0}
{"func": "# write a python program that would print the first n positive integers using a for loop\nn = 62\nfor num in range(n):\n    print(num)\n\n\n", "idx": 3011, "target": 0}
{"func": "# Write a function to add two positive integers without using the '+' operator\ndef add_without_plus_operator(a, b):\n    while b != 0:\n        data = a & b\n        a = a ^ b\n        b = data << 1\n    return a\n\n", "idx": 3012, "target": 0}
{"func": "# write a python program which will find all such numbers which are divisible by 7 but are not a multiple of 5 ;between 2000 and 3200 (both included)\nl=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint(','.join(l))\n\n", "idx": 3013, "target": 0}
{"func": "# Write a function to return the speed of moving object based of distance travelled in given time\ndef cal_speed(distance:float,time:float)->float:\n    return distance/time\n\n", "idx": 3014, "target": 0}
{"func": "# write a python lambda function to get remainder when divisor and divident are given\nremainder = lambda Divident, Divisor: Divident % Divisor\nprint(remainder(5,2))\n\n", "idx": 3015, "target": 0}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(area,2)\n        else:\n            return None\n    return None\n\n", "idx": 3016, "target": 0}
{"func": "# write a function to check weather a number is prime or not\n\ndef isprime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n", "idx": 3017, "target": 0}
{"func": "# write a functiom to concat two list\nl1 = [1,2,3]\nl2 = [4,5,6]\ndef list_concat(l1,l2):\n    return l1 + l2 \n\n", "idx": 3018, "target": 0}
{"func": "# write a function to print the time it takes to run a function\nimport time\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    start = time.perf_counter()\n    if (repetitons <= 0):\n        raise ValueError(\"repetitions should be greater that 0\")\n    if (not(isinstance(repetitons,int))):\n        raise ValueError(\"Repetions must be of type Integer\")\n    for _ in range(repetitons):\n        fn(*args, **kwargs)\n    stop = time.perf_counter()\n    return ((stop - start)/repetitons)\n\n\n\n", "idx": 3019, "target": 0}
{"func": "# write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses\nprint(\"Please guess a number between 1 and 5 and I will guess within 3 chances!\")\nguess1 = input(\"Is it <= 3? enter y/n \\n\")\nif guess1 == \"y\":\n    guess2 = input(\"Is it <= 2? enter y/n \\n\")\n    if guess2 == \"y\":\n        guess3 = input(\"Is it 1? enter y/n \\n\")\n        if guess3 == \"y\":\n            print(\"Yay! found the number, its 1\")\n        else:\n            print(\"Yay! found the number, its 2\")\n    else:\n        print(\"Yay! found the number, its 3\")\nelse:\n    guess2 = input(\"Is it 4? enter y/n \\n\")\n    if guess2 == \"y\":\n        print(\"Yay! found the number, its 4\")\n    else:\n        print(\"Yay! found the number, its 5\")\n\n\n", "idx": 3020, "target": 0}
{"func": "# write a python function using list comprehension to find even numbers in a list\ndef find_evennumbers(input_list):\n  list_using_comp = [var for var in input_list if var % 2 == 0] \n  return list_using_comp\n\n", "idx": 3021, "target": 0}
{"func": "# write a program to check if a substring is present in a given string\n\nstring = \"how are you?\"\nsubstring = \"are\"\nif (string.find(substring) == -1): \n    print(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 3022, "target": 0}
{"func": "# Write a python function to return minimum sum of factors of a number\n\ndef findMinSum(num): \n    sum = 0\n      \n    i = 2\n    while(i * i <= num): \n        while(num % i == 0): \n            sum += i \n            num /= i \n        i += 1\n    sum += num    \n\n    return sum\n\t\n\t\n\t\n", "idx": 3023, "target": 0}
{"func": "# Write a Python program to Separate positive numbers from negative and print the positive numbers and negative numbers separately\n\nfrom random import random\n\na = []\nfor i in range(7):\n    n = int(random() * 20) - 10\n    a.append(n)\n\nprint(a)\n\nneg = []\npos = []\nfor i in a:\n    if i < 0:\n        neg.append(i)\n    elif i > 0:\n        pos.append(i)\n\nprint(neg)\nprint(pos)\n\n", "idx": 3024, "target": 0}
{"func": "# write a function to calculate the area of polygon given the number of edges, circumradius\nimport math\ndef area_of_polygon(number_of_edges, circumradius):\n        return number_of_edges * 2 * circumradius * math.sin(180/number_of_edges) * circumradius * math.cos(180/number_of_edges) * 0.5\n\n\n", "idx": 3025, "target": 0}
{"func": "# Write a function to return the torque when a force f is applied at angle thea and distance for axis of rotation to place force applied is r\ndef cal_torque(force:float,theta:float,r:float)->float:\n    import math\n    return force*r*math.sin(theta)\n\n", "idx": 3026, "target": 0}
{"func": "# Write a python program to find and print the longest word in a sentence\n\nstring = \"python java c c++ javascript pascal php\"\n\nprint(string)\n\nwords = string.split()\n\nid_longest = 0\n\nfor i in range(1, len(words)):\n    if len(words[id_longest]) < len(words[i]):\n        id_longest = i\n\nprint(words[id_longest])\n\n", "idx": 3027, "target": 0}
{"func": "# Write a function for vertical concatenating of a matrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            except IndexError: pass\n        res.append(temp)\n        N = N + 1\n    res = [ele for ele in res if ele]\n    print(\"List after column Concatenation : \" + str(res))\nvertical_concatenation()\n\n\n", "idx": 3028, "target": 0}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list2):\n    list1 = [1, 2]\n    list2 = [3, 4]\n    return list1.extend(list2)\n\n\n", "idx": 3029, "target": 0}
{"func": "#96 write a python program to convert  list of tuples into digits and print it\n\n\n\nlst = [(11, 100), (22, 200), (33, 300), (44, 400), (88, 800)]\na=''\nfor i in lst:\n    for j in i:\n        a+=str(j)\nprint(list(set(a)))\n\n", "idx": 3030, "target": 0}
{"func": "#42 write a function to subtract two matrices in python\nmatrix1 = [[0, 1, 2], \n           [3, 5, 5], \n           [6, 7, 8]]\n\nmatrix2 = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]]\n\ndef subtractTheMatrix(matrix1, matrix2):\n    matrix1Rows = len(matrix1)\n    matrix2Rows = len(matrix2)\n    matrix1Col = len(matrix1[0])\n    matrix2Col = len(matrix2[0])\n\n    #base case\n    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):\n        return \"ERROR: dimensions of the two arrays must be the same\"\n\n    matrix = []\n    rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            rows.append(0)\n        matrix.append(rows.copy())\n        rows = []\n\n    for i in range(0, matrix1Rows):\n        for j in range(0, matrix2Col):\n            matrix[i][j] = matrix1[i][j] - matrix2[i][j]\n            \n    return matrix\n\n", "idx": 3031, "target": 0}
{"func": "# Write a function that finds a list is homogeneous \n\ndef homoList(li):\n  res = True\n  for i in li: \n      if not isinstance(i, type(li[0])): \n          res = False \n          break\n  return res\n\n\n", "idx": 3032, "target": 0}
{"func": "# write a python function to Find Hash of File\nimport hashlib\ndef hash_file(filename):\n\n   h = hashlib.sha1()\n   with open(filename,'rb') as file:\n       chunk = 0\n       while chunk != b'':\n           chunk = file.read(1024)\n           h.update(chunk)\n   return h.hexdigest()\n", "idx": 3033, "target": 0}
{"func": "# Write Python Program to print if a Number is Odd or Even\nnum = 102\nif (num % 2) == 0:\n   print(f\"{num} is Even\")\nelse:\n   print(f\"{num} is Odd\")\n\n   \n\n\n", "idx": 3034, "target": 0}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(tup):  \n      \n    lst = len(tup)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (tup[j][1] > tup[j + 1][1]):  \n                temp = tup[j]  \n                tup[j]= tup[j + 1]  \n                tup[j + 1]= temp  \n    return tup  \n\n", "idx": 3035, "target": 0}
{"func": "# Write a function to return the mean of numbers in a list\ndef cal_mean(num_list:list)->float:\n    if num_list:\n        return sum(num_list)/len(num_list)\n    else:\n        return None\n\n", "idx": 3036, "target": 0}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr1 = \"__main__\"\nif len(set(str1).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 3037, "target": 0}
{"func": "# 11 write a python function to return the length of an array plus 27\n\n\ndef return_length(arr):\n    return len(arr) + 27\n\n\n", "idx": 3038, "target": 0}
{"func": "# write a python function to find the average of two or more numbers and return the average\n\ndef average(*args):\n  return sum(args, 0.0) / len(args)\n\n", "idx": 3039, "target": 0}
{"func": "# Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.\nfirst_array = [1,2,3,4,5,6,7]\nsecond_array = [3,7,2,1,4,6]\n\ndef finder(first_array, second_array):\n    return(sum(first_array) - sum(second_array))\n\nmissing_number = finder(first_array, second_array)\n\nprint(missing_number)\n\n", "idx": 3040, "target": 0}
{"func": "# write a Python program to combine two dictionary by adding values for common keys \ndict1 = {'a': 12, 'for': 25, 'c': 9} \ndict2 = {'Geeks': 100, 'geek': 200, 'for': 300} \nfor key in dict2: \n    if key in dict1: \n        dict2[key] = dict2[key] + dict1[key] \n    else: \n        pass\n\n", "idx": 3041, "target": 0}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncount = 0\n  \nfor item in input_list: \n    if item not in l1: \n        count += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", count) \n\n", "idx": 3042, "target": 0}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\ndef print_dict_keys_val_2():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tprint(d)\n\n\n", "idx": 3043, "target": 0}
{"func": "# Write a Python program to print trace of an array/ matrix\nimport numpy as np\nA = np.array([[4,5,8], [5,5,5], [2,3,6]])\nprint(\"Trace of the matrix A: \", np.trace(A))\n\n\n", "idx": 3044, "target": 0}
{"func": "#61 implementation of local cooncept\ndef inner_show():\n    x = 'Hola'\n    def inner():\n        nonlocal x\n        x = 'Hola World'\n        print(f'Inner function x is {x}')\n    inner()\n    print(f'outer function x is {x}')\n\n\n", "idx": 3045, "target": 0}
{"func": "# Write a function to identify to count no of instances of a value  inside a dictionary\ndef count_value(d:dict, value)->bool:\n    return list(v == value for v in dict.values()).count(True)\n\n", "idx": 3046, "target": 0}
{"func": "#98 Write a Python program to multiply two integers without using the '*' operator in python.\ndef multiply(x, y):\n    if y < 0:\n        return -multiply(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply(x, y - 1)\n\n", "idx": 3047, "target": 0}
{"func": "# write a python function to count how many times the predicate is true\ndef quantify(iterable, pred=bool):\n    return sum(map(pred, iterable))\n\n", "idx": 3048, "target": 0}
{"func": "# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Plese enter a positive integer\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(recur_fibo(i))\n\n\n", "idx": 3049, "target": 0}
{"func": "# The consequences of modifying a list when looping through it\na = [1, 2, 3, 4, 5]\nfor i in a:\n    if not i % 2:\n        a.remove(i)\nprint(a)\nb = [2, 4, 5, 6]\nfor i in b:\n     if not i % 2:\n         b.remove(i)\nprint(b)\n\n", "idx": 3050, "target": 0}
{"func": "# write a python function to convert the values of RGB components to a hexadecimal color code.\n\ndef rgb_to_hex(r, g, b):\n  return ('{:02X}' * 3).format(r, g, b)\n\n", "idx": 3051, "target": 0}
{"func": "# local vs. enclosed \ndef outer():\n    x = 1\n    print('outer before:', x)\n\n    def inner():\n        x = 2\n        print(\"inner:\", x)\n    inner()\n    print(\"outer after:\", x)\nouter()\n\n", "idx": 3052, "target": 0}
{"func": "# write a python function to return the square root of a number \ndef get_sqrt(i):\n    import math\n    return(math.sqrt(i))\n\n", "idx": 3053, "target": 0}
{"func": "# write a python function to convert byte to UTF-8\ndef byte_to_utf8(data):\n    return data.decode(\"utf-8\")\nprint(byte_to_utf8(data=b'r\\xc3\\xa9sum\\xc3\\xa9'))\n\n\ndef hanoi(disks, source, auxiliary, target):\n    if disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n \n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiliary, source, target)\n\n\n", "idx": 3054, "target": 0}
{"func": "# Write a python Class to calculate area of a rectangle and print the area\n\nclass rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.length\na=6\nb=4\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 3055, "target": 0}
{"func": "#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.\nFor example, the string \"AAAABBBCCDAAA\" would be encoded as \"4A3B2C1D3A\"\ndef encode_string(str1):\n    encoded = \"\"\n    ctr = 1\n    last_char = str1[0]\n\n    for i in range(1, len(str1)):\n\n        if last_char == str1[i]:\n            ctr += 1\n         \n        else:\n            encoded += str(ctr) + last_char\n            ctr = 0\n            last_char = str1[i]\n            ctr += 1\n    encoded += str(ctr) + last_char\n    return encoded\n\n", "idx": 3056, "target": 0}
{"func": "# Write a function to implement Gnome Sort\ndef gnomeSort(arr, n):\n    index = 0\n    while index < n:\n        if index == 0:\n            index = index + 1\n        if arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr\narr = [34, 2, 10, -9]\nn = len(arr)\narr = gnomeSort(arr, n)\nprint(\"Sorted seqquence after applying Gnome Sort :\")\nfor i in arr:\n    print(i)\n\n\n", "idx": 3057, "target": 0}
{"func": "# write a python program to print a random vowel\nimport random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint(random.choice(vowels))\n\n\n", "idx": 3058, "target": 0}
{"func": "# write a python program to print current date and time \nimport datetime\nprint(datetime.datetime.now())\n\n", "idx": 3059, "target": 0}
{"func": "# By using list comprehension, please write a program generate a 3*5*8 3D array whose each element is 0.\narray = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]\nprint(array)\n\n", "idx": 3060, "target": 0}
{"func": "# Write a python function to print whether a number is negative, positive or zero\ndef check_pnz(num):\n    if num > 0:\n       print(\"Positive number\")\n\n    elif num == 0:\n       print(\"Zero\")\n\n    else:\n       print(\"Negative number\")\n\n\n", "idx": 3061, "target": 0}
{"func": "# Write a function to append two lists\n\ndef append_lists(l1:list, l2:list)->list:\n    return l1.extend(l2)\n\n", "idx": 3062, "target": 0}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn=int(input())\nd=dict()\nfor i in range(1,n+1):\n    d[i]=i*i\n\nprint(d)\n\n\n", "idx": 3063, "target": 0}
{"func": "# 12  write a python function to return the third last element of an array\n\n\ndef return_last(arr):\n    return arr[-3]\n\n\n", "idx": 3064, "target": 0}
{"func": "#  Generate 3 random integers between 100 and 999 which is divisible by 5\nimport random\n\nprint(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\nfor num in range(3):\n    print(random.randrange(100, 999, 5), end=', ')\n\n", "idx": 3065, "target": 0}
{"func": "#create a tuple\ntuplex = (\"HELLO\", 5, [], True) \nprint(tuplex)\n", "idx": 3066, "target": 0}
{"func": "# Write a python program to print calendar of a given year\n\nimport calendar \n  \nyear = 2019\nprint(calendar.calendar(year))   \n\n\n\n", "idx": 3067, "target": 0}
{"func": "# write a program to check if a string is binary or not\n\nstr1=\"01110011 a\"\n\nset1 = set(str1)\n\nif set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 3068, "target": 0}
{"func": "# write a python function to count 'a's in the repetition of a given string 'n' times.\ndef repeated_string(s, n):\n    return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')\n\n\n", "idx": 3069, "target": 0}
{"func": "# Python code to convert string to list \ndef Convert_2(string): \n    li = list(string.split(\"-\")) \n    return li \n\nstr1 = \"Geeks-for-Geeks\"\nprint(Convert(str1)) \n\n", "idx": 3070, "target": 0}
{"func": "#54 Write a Python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = n // 2\n    y = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in y: return False\n        y.add(x)\n    return True\n\n", "idx": 3071, "target": 0}
{"func": "# write a python function using list comprehension to find even numbers in a list\ndef find_evennumbers(input_list):\n  list_using_comp = [var for var in input_list if var % 2 == 0] \n  return list_using_comp\n\n", "idx": 3072, "target": 0}
{"func": "# Pretty print JSON\nimport json\nperson_string = '{\"name\": \"Bob\", \"languages\": \"English\", \"numbers\": [2, 1.6, null]}'\nperson_dict = json.loads(person_string)\nprint(json.dumps(person_dict, indent = 4, sort_keys=True))\n\n", "idx": 3073, "target": 0}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nfor item in speed.values():\n  if item not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 3074, "target": 0}
{"func": "# Write a Python program to remove spaces from a given string using set\ndef remove_duplicate(str1):\n    list_str = str1.split()\n    return \"\".join(set(list_str))\n\n", "idx": 3075, "target": 0}
{"func": "# write a program to replace multiple words with a single word\n\nstr1 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 3076, "target": 0}
{"func": "# 27. Python Palindrome Program using Functions\n \nreverse = 0\ndef integer_reverse(number):\n    global reverse\n    \n    if(number > 0):\n        Reminder = number % 10\n        reverse = (reverse * 10) + Reminder\n        integer_reverse(number // 10)\n    return reverse\n\n\nnumber = int(input(\"Please Enter any Number: \"))\n\nrev = integer_reverse(number)\nprint(\"Reverse of a Given number is = %d\" %rev)\n\nif(number == rev):\n    print(\"%d is a Palindrome Number\" %number)\nelse:\n    print(\"%d is not a Palindrome Number\" %number)\n\n", "idx": 3077, "target": 0}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nfor idx in range(len(keys1)): \n\tres[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res))\n\n", "idx": 3078, "target": 0}
{"func": "# Write a python program to Implement Selection sort and print the sorted list for the below list\n\ndef selection_sort(alist):\n    for i in range(0, len(alist) - 1):\n        smallest = i\n        for j in range(i + 1, len(alist)):\n            if alist[j] < alist[smallest]:\n                smallest = j\n        alist[i], alist[smallest] = alist[smallest], alist[i]\n \n \nalist = [2, 3, 5, 6, 4, 5]\nselection_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3079, "target": 0}
{"func": "# Write a function to return the cartisian distance between two points\ndef cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:\n    return ((x1-x2)**2+(y1-y2)**2)**(1/2)\n\n", "idx": 3080, "target": 0}
{"func": "# write a python program using \"any\" function\nprint (any([False, True, False, False])) \n\n", "idx": 3081, "target": 0}
{"func": "#2 write a program to get numbers = 1,3,11,42,12,4001\nhighestnumber = -999\nfor i in numbers:\n  if i > highestnumber:\n    highestnumber = i\nprint(numbers.index(highestnumber))\n\n", "idx": 3082, "target": 0}
{"func": "# write a python function to count number of times a function is called \ndef counter(fn):\n    count = 0\n    def inner(*args, **kwargs):\n        nonlocal count\n        count += 1\n        print(f'Function {fn.__name__} was called {count} times.')\n        return fn(*\"args, **kwargs)    \n    return inner\n\n", "idx": 3083, "target": 0}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nL = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i in L: \n    count += i \n\navg = count/len(L) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 3084, "target": 0}
{"func": "# Implement a python function longestWord which take input as list of words and return the longest word\n\nimport functools\n\ndef longestWord(word_list):\n    if word_list is None or isinstance(word_list, list) == False or len(word_list) == 0:\n        raise ValueError(\"Input word_list to function longestWord must be list of words of size at least 1\")\n    \n    if len(word_list) == 1:\n        return word_list[0]    \n    else:\n        return functools.reduce(lambda x,y: x if len(x) >= len(y) else y, word_list)\n\t\t\n\t\t\n", "idx": 3085, "target": 0}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency: \" + str(res))\n\n", "idx": 3086, "target": 0}
{"func": "# P(n) = P(n \u2212 2) + P(n \u2212 3) for n \u2265 3, with P(0) = P(1) = P(2) = 1.\ndef padovan_seq(n):\n    if n >= 0:\n        if n in {0,1,2}:\n            return 1\n        else:\n            return padovan_seq(n-3) + padovan_seq(n-2)\n    \n", "idx": 3087, "target": 0}
{"func": "# Write a function to return the perimeter of a triangle\ndef cal_perimeter_triangle(s1,s2,s3):\n    return s1+s2+s3\n\n", "idx": 3088, "target": 0}
{"func": "# 35. write a Python function To Calculate Volume OF Cylinder \ndef volume(r, h): \n    vol = 22/7 * r * r * h \n    return vol\n\n", "idx": 3089, "target": 0}
{"func": "# write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module\nclass Secure:\n    def __init__(self):\n        \"\"\"\n           Generates a key and save it into a file\n        \"\"\"\n        key = Fernet.generate_key()\n        with open(\"secret.key\", \"wb\") as key_file:\n            key_file.write(key)\n\n    @staticmethod\n    def load_key():\n        \"\"\"\n        Load the previously generated key\n        \"\"\"\n        return open(\"secret.key\", \"rb\").read()\n\n    def encrypt_message(self, message):\n        \"\"\"\n        Encrypts a message\n        \"\"\"\n        key = self.load_key()\n        encoded_message = message.encode()\n        f = Fernet(key)\n        encrypted_message = f.encrypt(encoded_message)\n        print(\"\\nMessage has been encrypted: \", encrypted_message)\n        return encrypted_message\n\n    def decrypt_message(self, encrypted_message):\n        \"\"\"\n        Decrypts an encrypted message\n        \"\"\"\n        key = self.load_key()\n        f = Fernet(key)\n        decrypted_message = f.decrypt(encrypted_message)\n        print(\"\\nDecrypted message:\", decrypted_message.decode())\n\n\ns = Secure()\nencrypted = s.encrypt_message(\"My deepest secret!\")\ns.decrypt_message(encrypted)\n\n\n", "idx": 3090, "target": 0}
{"func": "# write a python function to find the factors of a number\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\n", "idx": 3091, "target": 0}
{"func": "# write a python function to split word into chars\ndef split(word): \n    return [char for char in word]\n\n", "idx": 3092, "target": 0}
{"func": "#49 write a python funvtion to print the merge sort algorithm in python\ndef mergeSort(myList):\n    if len(myList) > 1:\n        mid = len(myList) // 2\n        left = myList[:mid]\n        right = myList[mid:]\n\n        # Recursive call on each half\n        mergeSort(left)\n        mergeSort(right)\n\n        # Two iterators for traversing the two halves\n        i = 0\n        j = 0\n        \n        # Iterator for the main list\n        k = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n              # The value from the left half has been used\n              myList[k] = left[i]\n              # Move the iterator forward\n              i += 1\n            else:\n                myList[k] = right[j]\n                j += 1\n            # Move to the next slot\n            k += 1\n\n        # For all the remaining values\n        while i < len(left):\n            myList[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            myList[k]=right[j]\n            j += 1\n            k += 1\n\nmyList = [54,26,93,17,77,31,44,55,20]\nmergeSort(myList)\n\n", "idx": 3093, "target": 0}
{"func": "# write a python program list comprehension to make a list of size n of random integers in ranges a and b\n\nimport random\n\nn = 10\na = 1\nb = 100\n\nrand = [random.randint(a, b) for i in range(n)]\nprint(f'list : {rand}')\n\n", "idx": 3094, "target": 0}
{"func": "# Write a python function to call a user-input function with default exception handling and re-raise the exception again.\ndef default_exception_simulator(user_func):\n    try:\n        if callable(user_func):\n            user_func()\n    except:\n        print(\"An exception occured\")\n        raise\n\n", "idx": 3095, "target": 0}
{"func": "# Write a Python Program to Concatenate Two Dictionaries Into One\n\ndef concat_dic(d1, d2):\n    return d1.update(d2)\n\n", "idx": 3096, "target": 0}
{"func": "# Write a function that returns derivative of sine value of the input\ndef derivative_sin(x:float)-> float:\n    import math\n    return math.cos(x)\n\n", "idx": 3097, "target": 0}
{"func": "# write a python function thats accepts a list and returns most frequent element that appears in a list\n\ndef most_frequent(list):\n    return max(set(list), key = list.count)\n\n", "idx": 3098, "target": 0}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list1[i]*list2[i] for i in range(len(list1))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 3099, "target": 0}
{"func": "# python program to return unique element from a list\ndef unique_list(l):\n    x1 = []\n    for a in l:\n        if a not in x1:\n            x1.append(a)\n    return x1\n\n\nprint(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))\n\n\n", "idx": 3100, "target": 0}
{"func": "# write a python function to random select from itertools.combinations(iterable, r)\ndef random_combination(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    indices = sorted(random.sample(range(n), r))\n    return tuple(pool[i] for i in indices)\n\n", "idx": 3101, "target": 0}
{"func": "# Write a python function to merge two Dictionaries\ndef Merge(dict1, dict2):\n    return(dict2.update(dict1))\n\t\n\t\n\t\n", "idx": 3102, "target": 0}
{"func": "# Write a Python function that calculate area of a equilateral polygon\n\nimport math\ndef area(no_of_sides, circumradius):\n    side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)\n    apothem = circumradius * math.cos(math.pi / no_of_sides)\n    return no_of_sides / 2 * side_length * apothem\n\n", "idx": 3103, "target": 0}
{"func": "# Write a python function to select a random number of files from a given path of a given pattern\nimport glob\nimport os\nimport random\ndef retrieve_random_file(src_dir_path, file_pattern, count):\n    if(os.path.exists(src_dir_path) == False):\n        print(\"Destination Path doesn't exist\")\n        return\n    \n    files_in_dir = glob.glob(src_dir_path+\"/*\"+file_pattern)\n    if (count > len(files_in_dir)):\n        print(\"Requested count more than file count in:\",src_dir_path,\" for pattern:\",file_pattern)\n        return\n    return random.sample(files_in_dir, count)\n\n", "idx": 3104, "target": 0}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res)\n\n", "idx": 3105, "target": 0}
{"func": "# write a Python Program to Read a File and Capitalize the First Letter of Every Word in the File\nfname = input(\"Enter file name: \")\nwith open(fname, 'r') as f:\n    for line in f:\n        l=line.title()\n        print(l)\n\t\t\n\t\t\n\t\t\n", "idx": 3106, "target": 0}
{"func": "# Write a python program to implement a Stack using One Queue\n\nclass Stack:\n    def __init__(self):\n        self.q = Queue()\n \n    def is_empty(self):\n        return self.q.is_empty()\n \n    def push(self, data):\n        self.q.enqueue(data)\n \n    def pop(self):\n        for _ in range(self.q.get_size() - 1):\n            dequeued = self.q.dequeue()\n            self.q.enqueue(dequeued)\n        return self.q.dequeue()\n \n \nclass Queue:\n    def __init__(self):\n        self.items = []\n        self.size = 0\n \n    def is_empty(self):\n        return self.items == []\n \n    def enqueue(self, data):\n        self.size += 1\n        self.items.append(data)\n \n    def dequeue(self):\n        self.size -= 1\n        return self.items.pop(0)\n \n    def get_size(self):\n        return self.size\n \n \ns = Stack()\n \nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'push':\n        s.push(int(do[1]))\n    elif operation == 'pop':\n        if s.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', s.pop())\n    elif operation == 'quit':\n        break\n\n", "idx": 3107, "target": 0}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datetime \nstr1 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str1,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 3108, "target": 0}
{"func": "#58 Write a Python function to find the single element in a list where every element appears three times except for one.\ndef single_number(arr):\n    ones, twos = 0, 0\n    for x in arr:\n        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)\n    assert twos == 0\n    return ones\n\n", "idx": 3109, "target": 0}
{"func": "# Write a Python program to print the calendar of a given month and year\nimport calendar\ny = int(input(\"Input the year : \"))\nm = int(input(\"Input the month : \"))\nprint(calendar.month(y, m))\n\n", "idx": 3110, "target": 0}
{"func": "# Write a function to Subtracts two lists element wise\ndef sub_listelements(l1:list, l2:list):\n    return [i-j for i, j in zip(l1,l2)]\n\n", "idx": 3111, "target": 0}
{"func": "# Write a function to return the profit or loss based on cost price and selling price\ndef find_profit_or_loss(cp,sp):\n    if cp > sp:\n        return 'loss', cp-sp\n    elif cp < sp:\n        return 'profit', sp-cp\n    else:\n        return 'no profit or loss', 0\n\n", "idx": 3112, "target": 0}
{"func": "# write a python decorator function to find how much time user given function takes to execute\ndef timed(fn):\n    from time import perf_counter\n    from functools import wraps\n\n    @wraps(fn) \n    def inner(*args, **kwargs):\n        start = perf_counter()\n        result = fn(*args, **kwargs)\n        end = perf_counter()\n        elapsed = end - start\n\n        args_ = [str(a) for a in args]\n        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]\n        all_args = args_ + kwargs_\n        args_str = ','.join(all_args) # now it is comma delimited\n\n        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')\n\n        return result\n    # inner = wraps(fn)(inner)\n    return inner\n\n", "idx": 3113, "target": 0}
{"func": "# Write a Python function that calculate side length of a equilateral polygon\n\nimport math\ndef side_length(no_of_sides, circumradius):\n    return 2 * circumradius * math.sin(math.pi / no_of_sides)\n\n", "idx": 3114, "target": 0}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\nresList = removeValue(list1, num1)\nprint(resList)\n\n", "idx": 3115, "target": 0}
{"func": "#23 how to check nth prime in python\nx=int(input())\nn,c=1,0\nwhile(c<x):\n    n+=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            break\n    if(i==n):\n        c=c+1\n\n", "idx": 3116, "target": 0}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr1 = \"/*Jon is @developer & musician\"\nnew_str = str1.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 3117, "target": 0}
{"func": "# write  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda (Additional parameter in case of tie) \n\ntest_list = [{\"Gfg\" : [6, 7, 9], \"is\" : 9, \"best\" : 10}, \n            {\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19}, \n            {\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}] \nprint(\"The original list : \" + str(test_list)) \nK = \"Gfg\"\nidx = 2\nK2 = \"best\"\nres = sorted(sorted(test_list, key = lambda ele: ele[K2]), key = lambda ele: ele[K][idx]) \nprint(\"The required sort order : \" + str(res)) \n\n", "idx": 3118, "target": 0}
{"func": "#15 function to print all armstrong in a range\ndef print_all_armstrong(lower: int, upper: int):\n    for num in range(lower,upper + 1):  \n        sum_ = 0\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            sum_ += digit ** 3\n            temp //= 10\n            if num == sum_:\n                print(num)\n\n", "idx": 3119, "target": 0}
{"func": "# write a python function to return first n items of the iterable as a list\ndef take(n, iterable):    \n    import itertools\n    return list(itertools.islice(iterable, n))\n\n", "idx": 3120, "target": 0}
{"func": "# write a python function to locate the rightmost value less than x \ndef find_lt(a, x):\n    from bisect import bisect_left  \n    i = bisect_left(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\n\n", "idx": 3121, "target": 0}
{"func": "# Write a function that generates Factorial of number\ndef factorial(n):\n    if n == 0 or n ==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n", "idx": 3122, "target": 0}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [a+b for a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{final}\")\n\n", "idx": 3123, "target": 0}
{"func": "# write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list\ndef make_all_positive(nums):\n   return [num if num > 0 else -num for num in nums]\n\n\n", "idx": 3124, "target": 0}
{"func": "# write a python function to find the largest element in an array and return the result\ndef largest(arr):\n    max = arr[0]\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i] > max:\n            max = arr[i]\n        return max\n\nlargest([1,20,3])    \n\n7.\n", "idx": 3125, "target": 0}
{"func": "# write a program to print logrithmic values of any number \n\nimport math\nx = 100\nbase = 5\nprint(math.log(x,base))\n\n", "idx": 3126, "target": 0}
{"func": "# write a python function to convert list of strings to list of integers\ndef stringlist_to_intlist(sList): \n  return(list(map(int, sList)))\n\n", "idx": 3127, "target": 0}
{"func": "# Write a python class to implement Deque where elements can be added and deleted both ends\n\nclass Deque(object):\n    def __init__(self, limit = 10):\n        self.queue = []\n        self.limit = limit\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def isEmpty(self):\n        return len(self.queue) <= 0\n\n    def isFull(self):\n        return len(self.queue) >= self.limit\n\n    def insertRear(self, data):\n        if self.isFull():\n            return\n        else:\n            self.queue.insert(0, data)\n\n    def insertFront(self, data):\n        if self.isFull():\n            return\n        else:\n            self.queue.append(data)\n\n    def deleteRear(self):\n        if self.isEmpty():\n            return\n        else:\n            return self.queue.pop(0)\n\n    def deleteFront(self):\n        if self.isFull():\n            return\n        else:\n            return self.queue.pop()\n\t\t\t\n\n\n", "idx": 3128, "target": 0}
{"func": "# Write a python program to solve and print the solution for the quadratic equation ax**2 + bx + c = 0\n\nimport cmath\n\na = 1\nb = 5\nc = 6\n\nd = (b**2) - (4*a*c)\n\n\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n\n", "idx": 3129, "target": 0}
{"func": "# Write a Python program to add a prefix text to all of the lines in a string.\nimport textwrap\nsample_text ='''\n        Python is a widely used high-level, general-purpose, interpreted,\n        dynamic programming language. Its design philosophy emphasizes\n        code readability, and its syntax allows programmers to express\n        concepts in fewer lines of code than possible in languages such\n        as C++ or Java.\n        '''\ntext_without_Indentation = textwrap.dedent(sample_text)\nwrapped = textwrap.fill(text_without_Indentation, width=50)\n", "idx": 3130, "target": 0}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item in str1 if item.isdigit()])\nprint(res)\n\n", "idx": 3131, "target": 0}
{"func": "# printing original list  \nprint(\"The original list : \" + str(test_list)) \ns=[]\nk=test_list[::2]\na=[\"\".join(i for i in k)]\nprint(a)\nl=test_list[1::2]\nb=[\"\".join(i for i in l)]\nprint(b)\n\nprint(a+b)\n\n", "idx": 3132, "target": 0}
{"func": "# write a program to find and print all words which are less than a given length in a string\n\nstr1 = \"It is wonderful and sunny day for a picnic in the park\"\nstr_len = 5\n\nres_str = [] \n      \ntext = str1.split(\" \") \n      \nfor x in text: \n\n    if len(x) < str_len: \n        res_str.append(x) \n\nprint(\"Words that are less than \" + str(str_len) + \": \" + str(res_str))\n\n", "idx": 3133, "target": 0}
{"func": "# write a python program to print a random vowel\nimport random\nvowels = ['a', 'e', 'i', 'o', 'u']\nprint(random.choice(vowels))\n\n\n", "idx": 3134, "target": 0}
{"func": "# Write a Python function to check whether a given number is perfect number or not\ndef perfect_number_checker(num):\n    i = 2\n    sum = 1\n    while(i <= num//2 ) :\n        if (num % i == 0) :\n            sum += i\n        i += 1\n    if sum == num :\n        return f'{num} is a perfect number'\n\n    else :\n        return f'{num} is not a perfect number'\n\n", "idx": 3135, "target": 0}
{"func": "# write a python function to check if a key exists in a dictionary\n\nd = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}\ndef is_key_present(x):\n  if x in d:\n      print('Key is present in the dictionary')\n  else:\n      print('Key is not present in the dictionary')\n\n", "idx": 3136, "target": 0}
{"func": "# Write a Python Program to print words starting with Vowel From A list\t\t\ntest_list = [\"all\", \"love\", \"and\", \"get\", \"educated\", \"by\", \"gfg\"] \nprint(\"The original list is : \" + str(test_list)) \nres = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flag = False\n    for ele in vow: \n        if sub.startswith(ele): \n            flag = True \n            break\n    if flag: \n        res.append(sub)  \nprint(\"The extracted words : \" + str(res)) \n\n\n\n", "idx": 3137, "target": 0}
{"func": "#47 write a program to check if the number is a prime numnber\n\nnum = int(input(\"Enter a number: \"))  \n  \nif num > 1:  \n   for i in range(2,num):  \n       if (num % i) == 0:  \n           print(num,\"is not a prime number\")  \n           print(i,\"times\",num//i,\"is\",num)  \n           break  \n   else:  \n       print(num,\"is a prime number\")  \n         \nelse:  \n   print(num,\"is not a prime number\")  \n   \n", "idx": 3138, "target": 0}
{"func": "#17 function to print the lcm of two number\ndef ret_lcm(x: int, y: int):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\n\n", "idx": 3139, "target": 0}
{"func": "# write a function to convert miles to kilometers\n\ndef miles_to_kms(dist):\n    return dist * 1.609\n\n", "idx": 3140, "target": 0}
{"func": "# write a python function to get the maximum element in a list\n\ndef max(list):\n    return max(list)\n\n", "idx": 3141, "target": 0}
{"func": "# Given a list iterate it and count the occurrence of each element and create a dictionary to show the count of each elemen\nsampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]\ncountDict = dict()\nfor item in sampleList:\n  if(item in countDict):\n    countDict[item] += 1\n  else:\n    countDict[item] = 1\n  \nprint(\"Printing count of each item  \",countDict)\n\n", "idx": 3142, "target": 0}
{"func": "# write a progarm to sort the list in assending order\ndata_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nnew_list = []\n\nwhile data_list:\n    minimum = data_list[0]  # arbitrary number in list \n    for x in data_list: \n        if x < minimum:\n            minimum = x\n    new_list.append(minimum)\n    data_list.remove(minimum)    \n\nprint(f'assending_order_list: {new_list}')\n\n\n", "idx": 3143, "target": 0}
{"func": "# Write a Python Program to Check if a Number is an Armstrong Number\n\ndef amstrong_check(n):\n    a=list(map(int,str(n)))\n    b=list(map(lambda x:x**3,a))\n    if(sum(b)==n):\n        return True\n    else:\n        return False\n\n", "idx": 3144, "target": 0}
{"func": "# write a python function to prepend a single value in front of an iterator \ndef prepend(value, iterator):    \n    import itertools\n    return itertools.chain([value], iterator)\n\n", "idx": 3145, "target": 0}
{"func": "#29 function to convert temperature as per user mention.\ndef temp_converter(temp , temp_given_in= 'F'):\n    if temp < 0:\n        raise ValueError(\"Input Temperature is Negative\")\n    else:\n        if temp_given_in.upper() == 'F':\n            t = (temp-32)*5/9\n            return t\n        elif temp_given_in.upper() == 'C':\n            t = 9/5 * (temp) + 32\n            return t\n        elif temp_given_in.upper() not in ('C' , 'F'):\n            raise NotImplementedError(\"Invalid Temperature Coneversion\")\n\n\n", "idx": 3146, "target": 0}
{"func": "# Write a functio to check whether a number if perfect or not\ndef is_perfect(n):\n    sum_ = 0\n    for i in range(1, n//2 + 1):\n        if n%i == 0:\n            sum_+=i\n    if sum_ == n:\n        return True\n    return False\n\n", "idx": 3147, "target": 0}
{"func": "#13 function to print the multiplication table\ndef maths_tables( no_ : int):\n     for i in range(1, 11):\n         print(f'{no_}x{i}={no_*i}')\n\n\n", "idx": 3148, "target": 0}
{"func": "# Write a python program to Implement Comb sort and print the sorted list for the below list\n\ndef comb_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n \n    gap = len(alist)\n    shrink = 1.3\n \n    no_swap = False\n    while not no_swap:\n        gap = int(gap/shrink)\n \n        if gap < 1:\n            gap = 1\n            no_swap = True\n        else:\n            no_swap = False\n \n        i = 0\n        while i + gap < len(alist):\n            if alist[i] > alist[i + gap]:\n                swap(i, i + gap)\n                no_swap = False\n            i = i + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ncomb_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3149, "target": 0}
{"func": "# write a function to find out the second maximum number in the given list\ndef find_second_maximum(lst):\n    max = float('-inf')\n    sec_max = float('-inf')\n\n    for elem in list:\n        if elem > max:\n            sec_max = max\n            max = elem\n        elif elem > sec_max:\n            sec_max = elem\n    return sec_max\n\n", "idx": 3150, "target": 0}
{"func": "# write a python function to check if a given string is a palindrome\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\n", "idx": 3151, "target": 0}
{"func": "# write a Python Program to Check Whether a String is Palindrome or Not\nmy_str = 'aIbohPhoBiA'\nmy_str = my_str.casefold()\nrev_str = reversed(my_str)\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n   \n   \n   \n   \n", "idx": 3152, "target": 0}
{"func": "# write a Python function to Remove the Given Key from a Dictionary\ndef deletekey(dict,key)\n\tif key in dict: \n\t\tdel dict[key]\n\treturn dict\n\t\n\t\n\t\n", "idx": 3153, "target": 0}
{"func": "# Write python function role a dice\n\nimport random\nmin = 1\nmax = 6\n\nroll_again = \"yes\"\n\nwhile roll_again == \"yes\" or roll_again == \"y\":\n    print(\"Rolling the dices...\")\n    print(\"The values are....\")\n    print(random.randint(min, max))\n    print(random.randint(min, max))\n\n    roll_again = input(\"Roll the dices again?\")\n\n", "idx": 3154, "target": 0}
{"func": "# Write a function that returns lowercase string\ndef str_lowercase(s:str):\n    return s.lower()\n\n", "idx": 3155, "target": 0}
{"func": "# Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\ns = input()\nd={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in s:\n    if c.isupper():\n        d[\"UPPER CASE\"]+=1\n    elif c.islower():\n        d[\"LOWER CASE\"]+=1\n    else:\n        pass\nprint(\"UPPER CASE\", d[\"UPPER CASE\"])\nprint(\"LOWER CASE\", d[\"LOWER CASE\"])\n\n", "idx": 3156, "target": 0}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nprint(f\"Final Result is{result}\")\n\n", "idx": 3157, "target": 0}
{"func": "# Write a python program to filter names not starting with \"a\"\nnames = ['austin', 'penny', 'anthony', 'rihana', 'billy', 'angel']\na_names = list(filter(lambda name: name[0] == 'a', names))\nprint(a_names)\n\n", "idx": 3158, "target": 0}
{"func": "# write a python program that prints the area of a circle\nimport math\nradius = 5\nprint(f'Area: {math.pi * radius * radius}')\n\n\n", "idx": 3159, "target": 0}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresult = [word for word in sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 3160, "target": 0}
{"func": "#29 print current day in python \nfrom datetime import date\ntoday = date.today()\nprint(\"Today's date:\", today)\n\n", "idx": 3161, "target": 0}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\ndef printDict():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor (k,v) in d.items():\t\n\t\tprint v\n\t\t\n", "idx": 3162, "target": 0}
{"func": "# Find the day of week of a given date?\nfrom datetime import datetime\ngiven_date = datetime(2020, 7, 26)\nprint(given_date.strftime('%A'))\n\n", "idx": 3163, "target": 0}
{"func": "#13 Write a python program to test if all elements are unique in columns in matrix and print them\n\ntest_list = [[3, 4, 5], [1, 2, 4], [4, 1, 10]] \n  \n \nres = True \nfor idx in range(len(test_list[0])): \n      \n    # getting column  \n    col = [ele[idx] for ele in test_list] \n      \n    # checking for all Unique elements \n    if len(list(set(col))) != len(col): \n        res = False \n        break\n  \n", "idx": 3164, "target": 0}
{"func": "#68 Write a Python function to find the length of the last word.\ndef length_of_last_word(s):\n        words = s.split()\n        if len(words) == 0:\n            return 0\n        return len(words[-1])\n\n", "idx": 3165, "target": 0}
{"func": "#  Add week (7 days) and 12 hours to a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 3, 22, 10, 00, 00)\ndays_to_add = 7\nres_date = given_date + timedelta(days=days_to_add, hours=12)\nprint(res_date)\n\n", "idx": 3166, "target": 0}
{"func": "# Write a Python program to find the available built-in modules using sys and textwrap modules\nimport sys\nimport textwrap\nmodule_name = ', '.join(sorted(sys.builtin_module_names))\nprint(textwrap.fill(module_name, width=70))\n\n\n", "idx": 3167, "target": 0}
{"func": "# Write a Python program to  bin a numeric series to 10 groups of equal size\nimport pandas as pd\nimport numpy as np\nser = pd.Series(np.random.random(20))\ndeciled = pd.qcut(ser, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1], \n        labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])\nprint(deciled)\n\n\n", "idx": 3168, "target": 0}
{"func": "# write a Python function to find the area of the triangle inscribed within the rectangle which in turn is inscribed in an ellipse \n\ndef area(a, b): \n    \n    if (a < 0 or b < 0): \n        return -1\n\n    A = a * b \n    return A \n\na = 5\nb = 2\nprint(area(a, b)) \n\n\n", "idx": 3169, "target": 0}
{"func": "# write Python3 code to demonstrate working of  Sort tuple list by Nth element of tuple  using sort() + lambda \ntest_list = [(4, 5, 1), (6, 1, 5), (7, 4, 2), (6, 2, 4)] \nprint(\"The original list is : \" + str(test_list)) \nN = 1\ntest_list.sort(key = lambda x: x[N]) \nprint(\"List after sorting tuple by Nth index sort : \" + str(test_list)) \n\n", "idx": 3170, "target": 0}
{"func": "#34 write a python function to convert a string  into xml\nimport xml.etree.ElementTree as ET\n\nroot = ET.fromstring(country_data_as_string)\n\n", "idx": 3171, "target": 0}
{"func": "#98 write a python program to  count the elements in a list until an element is a Tuple  and print it\n\nli = [4, 5, 6, 10, (1, 2, 3), 11, 2, 4]\ncount=0\nfor i in li:\n    if  isinstance(i,tuple):\n        break\n    count=count+1\nprint(f'count of element till tuple is encountered {count}')\n\n", "idx": 3172, "target": 0}
{"func": "# Write a python  class to implement LRU Cache\n\nclass DLinkedNode:\n    def __init__(self):\n        self.key = 0\n        self.value = 0\n        self.prev = None\n        self.next = None\n\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.head = DLinkedNode()\n        self.tail = DLinkedNode()\n        self.cache = {}\n        self.size = 0\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def add_node(self, node):\n        node.next = self.head.next\n        node.prev = self.head        \n        self.head.next.prev = node\n        self.head.next = node\n\n    def remove_node(self, node):\n        next = node.next\n        prev = node.prev\n        prev.next = next\n        next.prev = prev\n\n    def move_to_head(self, node ):\n        self.remove_node(node)\n        self.add_node(node)\n\n    def tail_off(self ):\n        res = self.tail.prev\n        self.remove_node(res)\n        return res       \n\n\n    def get(self, key):\n        node = self.cache.get(key, None)\n        if not node:\n            return -1\n\n        self.move_to_head(node )\n        return node.value\n        \n\n    def put(self, key, value):\n        node = self.cache.get(key, None)\n        if  not node:           \n            node = DLinkedNode()\n            node.key = key\n            node.value = value\n            self.cache[key] = node\n            self.add_node(node )\n            self.size += 1\n            if self.size > self.capacity:\n                last_node = self.tail_off()\n                del self.cache[last_node.key]\n                self.size -= 1\n        else:\n            node.value = value\n            self.move_to_head(node )\n\t\t\t\n\n", "idx": 3173, "target": 0}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    g = 9.8\n    return (mass*g*height)\n\n", "idx": 3174, "target": 0}
{"func": "# write a python function that returns the square of a given input number\ndef square(x):\n    return x**2\n\n\n", "idx": 3175, "target": 0}
{"func": "# write a python program to print all prime numbers in a given interval\nlower = 900\nupper = 1000\nfor num in range(lower, upper + 1):\n   if num > 1:\n      for i in range(2, num):\n         if (num % i) == 0:\n               break\n      else:\n         print(num)\n\n\n", "idx": 3176, "target": 0}
{"func": "# breakdown the string into a list of words\nwords = [word.lower() for word in my_str.split()]\n\n", "idx": 3177, "target": 0}
{"func": "# write Python program to demonstrate that we can access multidimensional list using square brackets \na = [ [2, 4, 6, 8 ], \n    [ 1, 3, 5, 7 ], \n    [ 8, 6, 4, 2 ], \n    [ 7, 5, 3, 1 ] ] \n\nfor i in range(len(a)) : \n    for j in range(len(a[i])) : \n        print(a[i][j], end=\" \") \n    print()\t \n\n", "idx": 3178, "target": 0}
{"func": "# write a python program to find the number of files in a directory\n\nimport os\ndir='.'\nlist = os.listdir(dir) \nnumber_files = len(list)\nprint(f'There are {number_files} file in the directory')\n\n", "idx": 3179, "target": 0}
{"func": "# Write a python program for implementation of Bubble Sort\ndef bubbleSort(arr):\nn = len(arr)\n\nfor i in range(n-1):\nfor j in range(0, n-i-1):\nif arr[j] > arr[j+1] :\narr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\n\n", "idx": 3180, "target": 0}
{"func": "# write a python program to make use of maps\n\ndef square(number):\n    return number ** 2\n\nnumbers = [1, 2, 3, 4, 5]\n\nsquared = map(square, numbers)\n\nprint(f'mapped numbers:{list(squared)}')\n\n", "idx": 3181, "target": 0}
{"func": "# Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef putNumbers(n):\ni = 0\nwhile i<n:\nj=i\ni=i+1\nif j%7==0:\nyield j\n\nfor i in reverse(100):\nprint (i)\n\n", "idx": 3182, "target": 0}
{"func": "# Write a python program to Check if a Number is a Strong Number\nsum1=0\nnum=int(input(\"Enter a number:\"))\ntemp=num\nwhile(num):\ni=1\nf=1\nr=num%10\nwhile(i<=r):\nf=f*i\ni=i+1\nsum1=sum1+f\nnum=num//10\nif(sum1==temp):\nprint(\"The number is a strong number\")\nelse:\nprint(\"The number is not a strong number\")\n\n", "idx": 3183, "target": 0}
{"func": "# write a program to print 5 random numbers between 100 and 200\nimport random\nprint(random.sample(range(100, 200), 5))\n\n\n", "idx": 3184, "target": 0}
{"func": "# write a python function that joins strings in a list and returns the result\ndef join_string_parts(str_list):\n   return \" \".join(str_list)\n\n\n", "idx": 3185, "target": 0}
{"func": "# 20. python program to calculate the time taken to create a float and decimal\nimport time\ndef run_float(n = 1):\n    for i in range(n):\n        a = 3.1415\n\ndef run_decimal(n = 1):\n    for i in range(n):\n        a = Decimal('3.1415')\nn = 10000000\nstart = time.perf_counter()\nrun_float(n)\nend = time.perf_counter()\n\nprint ('float: ', end - start)\n\nstart = time.perf_counter()\nrun_decimal(n)\nend = time.perf_counter()\n\nprint ('decimal: ', end - start)\n\n", "idx": 3186, "target": 0}
{"func": "# Write a program to find common divisors between two numbers in a given pair\ndef ngcd(x, y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i\n        i+=1\n    return gcd\ndef num_comm_div(x, y):\n  n = ngcd(x, y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while( i <= z ):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result\n\n", "idx": 3187, "target": 0}
{"func": "# write a program to print 5 random numbers divisible by 4 between 100 and 200\nimport random\nprint(random.sample([i for i in range(10, 100) if i%4 == 0], 5))\n\n\n", "idx": 3188, "target": 0}
{"func": "# Define a function that can convert a integer into a string and print it in console.\ndef printValue(n):\n\tprint str(n)\n\n", "idx": 3189, "target": 0}
{"func": "# With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate( li ):\n    newli=[]\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n    return newli\nli=[12,24,35,24,88,120,155,88,120,155]\nprint removeDuplicate(li)\n\n", "idx": 3190, "target": 0}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    length = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 3191, "target": 0}
{"func": "# Write a python function to merge two given lists into one\ndef merge_lists(l1, l2):\n    return l1 + l2\n\n\n", "idx": 3192, "target": 0}
{"func": "# write a Python program to get the largest number from a list\ndef max_num_in_list(list):\n    max = list[0]\n    for a in list:\n        max = a if a > max else max\n    return max\nprint(f'max_num_in_list [1, 10, -8, 0], Ans:{max_num_in_list([1, 10, -8, 0])}')\n\n", "idx": 3193, "target": 0}
{"func": "# Write a function to reverse a string\n\ndef revStr(inp):\n  inp = inp[::-1]\n  return inp\n\n", "idx": 3194, "target": 0}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\n    def __init__(self):\n        pass\n    def area(self):\n        return 0\nclass Square(Shape):\n    def __init__(self, l):\n        Shape.__init__(self)\n        self.length = l\n    def area(self):\n        return self.length*self.length\naSquare= Square(3)\nprint aSquare.area()\n\n", "idx": 3195, "target": 0}
{"func": "# write a program from given string replace each punctuation with #\n\nfrom string import punctuation\n\nstr1 = '/*Jon is @developer & musician!!'\nprint(f\"The original string is :{str1}\")\n\n", "idx": 3196, "target": 0}
{"func": "#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.\n\nsize = int(input(\"Input the size of the matrix: \"))\nmatrix = [[0] * size for row in range(0, size)]\nfor x in range(0, size):\n\n    line = list(map(int, input().split()))\n\n    for y in range(0, size):\n        matrix[x][y] = line[y]\n\nmatrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))\n\n", "idx": 3197, "target": 0}
{"func": "# initializing K \nK = 2\nfor keys,values in test_dict.items():\n    if values >K:\n       d.update({keys:2*values})\n    else:\n       d.update({keys:values})       \nprint(d)\n\n", "idx": 3198, "target": 0}
{"func": "#Write a function to Convert Celsius To Fahrenheit\ndef Celsius_To_Fahrenheit(c):\n    fahrenheit = (c * 1.8) + 32\n    return fahrenheit\n\n11.\n", "idx": 3199, "target": 0}
{"func": "# write a function to convert tuple to list\ndef convert_tuple2list(t):\n    return list(t)\n\n", "idx": 3200, "target": 0}
{"func": "# Write a Python function to find the intersection of two arrays\ndef array_intersection(A,B):\n\tinter=list(set(A)&set(B))\n\treturn inter\n\n\n", "idx": 3201, "target": 0}
{"func": "# Write a python function to get user specified attributes such as day, month, year from a date\nimport datetime\ndef get_attributes_from_date(date_string,*args):\n    if(isinstance(date_string, datetime.datetime) == False):\n        print(\"Input string is not a valid datetime type\")\n        raise TypeError\n    get_attrs = [ i for i in dir(date_string) if not callable(i) ]\n    arg_list = []\n    for attr in args:\n        if(attr not in get_attrs):\n            print(\"Invalid argument passed\",attr)\n            raise AttributeError\n        print(attr, ':', getattr(date_string, attr))\n        arg_list.append((attr,getattr(date_string, attr)))\n    return arg_list\n\n", "idx": 3202, "target": 0}
{"func": "# write a function to sort a list\nraw_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nsorted_list = []\nwhile raw_list:\n    minimum = raw_list[0]   \n    for x in raw_list: \n        if x < minimum:\n            minimum = x\n    sorted_list.append(minimum)\n    raw_list.remove(minimum)    \n\nprint(soreted_list)\n\n", "idx": 3203, "target": 0}
{"func": "# write a program to create identity matrix with dimension provided\ndim = 3\nM = []\nwhile len(M) < dim:\n    M.append([])\n    while len(M[-1]) < dim:\n        M[-1].append(0.0)\n\nfor i in range(dim):\n    M[i][i] = 1.0\n\nprint('Identity Matrix')\nfor i in range(dim):\n    row = '|'\n    for b in range(dim):\n        row = row + ' ' + str(M[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 3204, "target": 0}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist1 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list1: \n      \n    if num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 3205, "target": 0}
{"func": "# write a python function to convert iterable to pairwise iterable\ndef pairwise(iterable):\n    from itertools import tee\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\n", "idx": 3206, "target": 0}
{"func": "# write a python program to sort a list in descending order and print it\n\nlist = [3, 1, 5, 6]\nresult = sorted(list, reverse = True)\nprint(result)\n\n", "idx": 3207, "target": 0}
{"func": "# write a list comprehension in python to get a list of even numbers when a range is given \nN = 20\nnumber_list = [ x for x in range(N) if x % 2 == 0]\nprint(f'List of Even Numbers:', number_list)\n\n\n", "idx": 3208, "target": 0}
{"func": "# write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint li\n\n", "idx": 3209, "target": 0}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist1 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = list(filter(lambda x: (x % 2 != 0), list1)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 3210, "target": 0}
{"func": "# 91 Write a python function to round up a given decimal number\n\nimport math\n\n\ndef apply_floor(num):\n    return math.floor(num)\n\n\n", "idx": 3211, "target": 0}
{"func": "# write a python program to round up a number and print it\n\nimport math\nx = 2.3\ny = math.ceil(x)\nprint(y)\n\n", "idx": 3212, "target": 0}
{"func": "#25 Write a python program to add phrase in the middle of string and print it \n\ntest_str = 'The sun in the east'\nmid_str = \"rises\"\n\ns=\"\"\nl=test_str.split(\" \")\nfor i in range(0,len(l)):\n    if i==len(l)//2:\n       l.insert(i,mid_str)\n       break\ns=\" \".join(i for i in l)\nprint(s) \n\n\n", "idx": 3213, "target": 0}
{"func": "#56 write a  program to find HCF\n\ndef hcf(x, y):  \n   if x > y:  \n       smaller = y  \n   else:  \n       smaller = x  \n   for i in range(1,smaller + 1):  \n       if((x % i == 0) and (y % i == 0)):  \n           hcf = i  \n   return hcf  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \nprint(\"The H.C.F. of\", num1,\"and\", num2,\"is\", hcf(num1, num2))  \n\n", "idx": 3214, "target": 0}
{"func": "# Write a python function to remove a newline in Python\ndef remove_newline(string):\n    return string.strip()\n\n", "idx": 3215, "target": 0}
{"func": "# write a program to calculate and print number of letters and digits in a string\n\nstr1 = \"python1234\"\n  \ntotal_digits = 0\ntotal_letters = 0\n  \nfor s in str1: \n  \n    if s.isnumeric(): \n        total_digits += 1\n    else: \n        total_letters += 1\n  \nprint(\"Total letters found : \", total_letters) \nprint(\"Total digits found : \", total_digits) \n\n", "idx": 3216, "target": 0}
{"func": "# write a program that adds corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nsum_list = [a+b for (a,b) in zip(list1, list2)]\nprint(sum_list)\n\n\n", "idx": 3217, "target": 0}
{"func": "# Write a python program to sort alphabetically the words form a string provided by the user\n\nmy_str = \"Hello this Is an Example With cased letters\"\n\nwords = [word.lower() for word in my_str.split()]\n\nwords.sort()\n\n\nprint(\"The sorted words are:\")\nfor word in words:\n   print(word)\n   \n   \n", "idx": 3218, "target": 0}
{"func": "# write a function to rotate string right by a given length  \n\ndef rotate_right(input,d):  \n  \n    Rfirst = input[0 : len(input)-d]  \n    Rsecond = input[len(input)-d : ]  \n    return (Rsecond + Rfirst) \n\n", "idx": 3219, "target": 0}
{"func": "# 67 write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\nimport random\n\nprint(random.sample(range(100), 5))\n\n", "idx": 3220, "target": 0}
{"func": "# Subtract a week from a given date\nfrom datetime import datetime, timedelta\ngiven_date = datetime(2020, 2, 25)\ndays_to_subtract = 7\nres_date = given_date - timedelta(days=days_to_subtract)\nprint(res_date)\n\n", "idx": 3221, "target": 0}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res))\n\n", "idx": 3222, "target": 0}
{"func": "# Write a function that returns list of elements with n power to elements of list\ndef n_power(l1:list, power:int)->list:\n    return [i**power for i in l1]\n\n\n", "idx": 3223, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 3224, "target": 0}
{"func": "# write a python program to do nothing for a condition\n\nif 1 + 1 == 2:\n    pass # Nothing\n\n", "idx": 3225, "target": 0}
{"func": "# Write a Python Program to Remove the nth Index Character from a Non-Empty String\n\ndef remove(string, n):  \n      first = string[:n]   \n      last = string[n+1:]  \n      return first + last\n\n", "idx": 3226, "target": 0}
{"func": "# write a python program to Get the maximum and minimum value in a dictionary\n\nmy_dict = {'x':500, 'y':5874, 'z': 560}\n\nkey_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))\nkey_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))\n\nprint('Maximum Value in a dictionary: ',my_dict[key_max])\nprint('Minimum Value in a dictionary: ',my_dict[key_min])\n\n", "idx": 3227, "target": 0}
{"func": "# write a python program to find the smallest multiple of the first n numbers. \n\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n\n", "idx": 3228, "target": 0}
{"func": "# Generator using yield function\ndef generator_yield(n=100000):\n    for i in range(n):\n        if i % 5 == 0:\n            yield i\n\n", "idx": 3229, "target": 0}
{"func": "# write a python class named complex with constructor accepting real and imaginary parts\nclass Complex:\n    def __init__(self, realpart, imagpart):\n        self.r = realpart\n        self.i = imagpart\n\n", "idx": 3230, "target": 0}
{"func": "# Write a Python function to remove leading zeros from an IP address\nimport re\nregex = '\\.[0]*'\ndef remove_leading_zeros(ip):\n    modified_ip = re.sub(regex, '.', ip)\n    return modified_ip\n\n\n", "idx": 3231, "target": 0}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    d = b**2-4*a*c\n    if d >= 0:\n        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 3232, "target": 0}
{"func": "# Write a Python function to print the GSD of Two Numbers\n\ndef gcd(a,b):\n    if(b==0):\n        return a\n    else:\n        return gcd(b,a%b)\n\n\n", "idx": 3233, "target": 0}
{"func": "#67 Write a Python function to the push the first number to the end of a list.\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return(x)\n\n", "idx": 3234, "target": 0}
{"func": "# write a python function that performs selection sort on the given list or tuple or string and returns the new sorted sequence\ndef selection_sort(list_to_be_sorted):\n    sorted_list = list_to_be_sorted[:]\n    for i in range(len(sorted_list)):\n        new_min = sorted_list[i]\n        new_min_old_place = i\n        for j in range(i+1, len(sorted_list)):\n            if new_min > sorted_list[j]:\n                new_min = sorted_list[j]\n                new_min_old_place = j\n        old_val = sorted_list[i]\n        sorted_list[i] = new_min\n        sorted_list[new_min_old_place] = old_val\n    return sorted_list\n\n\n", "idx": 3235, "target": 0}
{"func": "# Write a python function to Copy the Contents of One File into Another\n\ndef copy(from_file, to_file):\n    with open(from_file) as f:\n        with open(to_file, \"w\") as f1:\n            for line in f:\n                f1.write(line)\n\n", "idx": 3236, "target": 0}
{"func": "# Please write a program which prints all permutations of [1,2,3]\nimport itertools\nprint(list(itertools.permutations([1,2,3])))\n\n", "idx": 3237, "target": 0}
{"func": "#  Write a python function to get the volume of a cuboid with length, breadth & height as input\ndef cuboid_volume(length, breadth, height):\n    volume = length * breadth * height\n    return volume\n\n\n", "idx": 3238, "target": 0}
{"func": "# write a python function to find the sum of digits in a number until one digit (no more than one digit)\n\n def digSum(n): \n    sum = 0\n    while(n > 0 or sum > 9): \n      \n        if(n == 0): \n            n = sum\n            sum = 0         \n        sum += n % 10\n        n = int(n/10)    \n    return sum\n \n", "idx": 3239, "target": 0}
{"func": "# write a program that uses delete function on  Dictionary \nDict = { 5 : 'Welcome', 6 : 'To', 7 : 'Geeks', \n        'A' : {1 : 'Geeks', 2 : 'For', 3 : 'Geeks'}, \n        'B' : {1 : 'Geeks', 2 : 'Life'}} \nprint(\"Initial Dictionary: \") \nprint(Dict) \n\ndel Dict[6] \nprint(\"\\nDeleting a specific key: \") \nprint(Dict) \n\ndel Dict['A'][2] \nprint(\"\\nDeleting a key from Nested Dictionary: \") \nprint(Dict) \n\n\n", "idx": 3240, "target": 0}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    pi=3.14\n    return 2*pi*radius**2*+2*pi*radius*height\n\n", "idx": 3241, "target": 0}
{"func": "# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n\n\n\n\n", "idx": 3242, "target": 0}
{"func": "# write a Python3 code to demonstrate working of Convert List of Dictionaries to List of Lists Using list comprehension \n\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, \n            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, \n            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] \n\nprint(\"The original list is : \" + str(test_list)) \n\nres = [[key for key in test_list[0].keys()], *[list(idx.values()) for idx in test_list ]] \n\nprint(\"The converted list : \" + str(res)) \n\n", "idx": 3243, "target": 0}
{"func": "# D is the variable whose values should be input to your program in a comma-separated sequence.\nimport math\nc=50\nh=30\nvalue = []\nitems=[x for x in input().split(',')]\nfor d in items:\n    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))\n\nprint(','.join(value))\n\n", "idx": 3244, "target": 0}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item in str1 if item.isdigit()])\nprint(res)\n\n", "idx": 3245, "target": 0}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\na, b = 0 , 1\nwhile b < n:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 3246, "target": 0}
{"func": "# Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).\nsquaredNumbers = map(lambda x: x**2, range(1,21))\nprint squaredNumbers\n\n", "idx": 3247, "target": 0}
{"func": "# write python function to detect if a number is even number\ndef is_even(num):\n    return((num % 2) == 0)\n\n", "idx": 3248, "target": 0}
{"func": "# Write a python program to Count and print the Number of Words in a Text File\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)\n\n", "idx": 3249, "target": 0}
{"func": "# 23 write a function that returns the square root of the third power of every number in a list\n\n\ndef comp_power(lst):\n    return list(map(lambda x: x ** 1.5, lst))\n\n\n", "idx": 3250, "target": 0}
{"func": "# Write a python program to check whether Entered caharacter is Vowel or not\nletter = input (\"Enter a Single Character: \")\nif letter == \"A\" or letter == \"a\" or letter == \"E\" or letter == \"e\" or letter == \"I\" or letter == \"i\" or letter == \"o\" or letter ==\"O\" or letter == \"U\" or letter == \"u\":\nprint (\"{} is Vowel\".format(letter))\nelse:\nprint (\"{} is co nsonent (Not Vowel)\".format(letter))\n\n", "idx": 3251, "target": 0}
{"func": "# Write a Python program to print the calendar of any given year\nimport calendar\nyear=2020\nprint(calendar.calendar(year))\n\n\n", "idx": 3252, "target": 0}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(height,radius):\n    pi=3.14\n    return pi*(radius**2)*height/3\n\n", "idx": 3253, "target": 0}
{"func": "# write a python function to repeat a given string n times\ndef repeat_string(string, frequency):\n   return string * frequency\n\n\n", "idx": 3254, "target": 0}
{"func": "# write a python function to Count Set Bits in a Number\ndef count_set_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n", "idx": 3255, "target": 0}
{"func": "# write a program for Rolling the dices\nimport random\nmin = 1\nmax = 6\n\nprint(\"Rolling the dices...and the values are\",random.randint(min, max))\nprint(\"Rolling the dices...and the values are\",random.randint(min, max))\n\n", "idx": 3256, "target": 0}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\nresList = removeValue(list1, num1)\nprint(resList)\n\n", "idx": 3257, "target": 0}
{"func": "# Write a program to filter the numbers in a list which are divisible by a given number\nmy_list = [11, 45, 74, 89, 132, 239, 721, 21]\n\nnum = 3\nresult = list(filter(lambda x: (x % num == 0), my_list))\n\nprint(f\"Numbers divisible by {num} are {result}\")\n\n\n", "idx": 3258, "target": 0}
{"func": "#86 Write a Python program to find the second smallest number in a list.\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1]\n  \n  \n", "idx": 3259, "target": 0}
{"func": "# Write a Python program to fill an intermittent time series so all missing dates show up with values of next non-missing date\nimport pandas as pd\nimport numpy as np\nser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))\nprint(ser.resample('D').bfill())\n\n\n", "idx": 3260, "target": 0}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\ndef __init__(self):\npass\n\ndef area(self):\nreturn 0\n\nclass Square(Shape):\ndef __init__(self, l):\nShape.__init__(self)\nself.length = l\n\ndef area(self):\nreturn self.length*self.length\n\naSquare= Square(3)\nprint (aSquare.area())\n\n", "idx": 3261, "target": 0}
{"func": "# printing original list  \nprint (\"The original list is : \" + str(test_list))\ns=[]\nfor i in test_list:\n    l=len(i)\n    s.append(i[l-1])\n\nprint(s)\n\n", "idx": 3262, "target": 0}
{"func": "# Write a python function to join directory names to create a path\ndef join_filename(base_dir, *args):\n    file_path_args = [base_dir ,*args]\n    for file_name in file_path_args:\n        if( isinstance(file_name,str) ==False ):\n            raise TypeError\n    return \"/\".join(file_path_args)\n\n", "idx": 3263, "target": 0}
{"func": "# Write a program to delete a 3rd character from a given string \n\nString='welcome'\n\nnew_str = \"\" \n  \nfor i in range(len(String)): \n    if i != 2: \n        new_str = new_str + String[i] \n\nprint(new_str)\n\n", "idx": 3264, "target": 0}
{"func": "# write a python function to check if two lists contains same elements regardless of order\n\ndef have_same_contents(a, b):\n  for v in set(a + b):\n    if a.count(v) != b.count(v):\n      return False\n  return True\n\n", "idx": 3265, "target": 0}
{"func": "# Write a python program to print the uncommon elements in List \n\n  \ntest_list1 = [ [1, 2], [3, 4], [5, 6] ] \ntest_list2 = [ [3, 4], [5, 7], [1, 2] ] \n  \nres_list = [] \nfor i in test_list1: \n    if i not in test_list2: \n        res_list.append(i) \nfor i in test_list2: \n    if i not in test_list1: \n        res_list.append(i) \n          \nprint (\"The uncommon of two lists is : \" + str(res_list))\n\n", "idx": 3266, "target": 0}
{"func": "#85 write a program to print perfect numbers from the given list of integers\n\ndef checkPerfectNum(n) :\n\ti = 2;sum = 1;\n\n\twhile(i <= n//2 ) :\n\t\tif (n % i == 0) :\n\t\t\tsum += i\t\t\t\n\t\t\n\t\ti += 1\n\t\tif sum == n :\n\t\t\tprint(n,end=' ')\n\nif __name__ == \"__main__\" :\n\n\tprint(\"Enter list of integers: \")\n\tlist_of_intgers = list(map(int,input().split()))\n\n\tprint(\"Given list of integers:\",list_of_intgers)\n\n\tprint(\"Perfect numbers present in the list is: \")\n\tfor num in list_of_intgers :\n\t\tcheckPerfectNum(num)\n        \n", "idx": 3267, "target": 0}
{"func": "# 6. Write a program to strips every vowel from a string provided \n\nvowels = ('a', 'e', 'i', 'o', 'u')\ninput_string = \"hello\"\n\nprint('Vowel in a string',' '.join([x for x in input_string.lower() if x not in vowels]))\n\n", "idx": 3268, "target": 0}
{"func": "# initializing list  \nsub_list = [4, 10, 11, 19, 1]\n\nl=list(test_dict.values())\n\n\nif l == sub_list:\n   print(True)\nelse:\n  print(False)  \n  \n #52 write a python program to update a dictionary with the values from a dictionary list and print it\n \n test_dict = {\"Gfg\" : 2, \"is\" : 1, \"Best\" : 3} \n  \n", "idx": 3269, "target": 0}
{"func": "# write a program that prints the number of unique keys in a list of dictionaries.\nlist_of_dicts = [{\"key1\": \"val1\", \"Country\": \"India\"}, \n                 {\"Country\": \"USA\", \"foo\": \"bar\"},\n                 {\"foo\": \"bar\", \"foo2\":\"bar2\"}]\nunique_keys = []\nfor d in list_of_dicts:\n  for key in d:\n    if key not in unique_keys:\n      unique_keys.append(key)\nprint(f\"Number of unique keys: {len(unique_keys)}\")\n\n", "idx": 3270, "target": 0}
{"func": "# write a program that multiplies corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nprod_list = [a*b for (a,b) in zip(list1, list2)]\nprint(prod_list)\n\n\n", "idx": 3271, "target": 0}
{"func": "# Sort the list in descending order\nmy_list = [4,3,2,9,10,44,1]\nmy_list.sort(reverse=True)\nprint(f\"Descending Order list:,{my_list}\")\n\n", "idx": 3272, "target": 0}
{"func": "# write a python function to return count of number of vowels in a sentence\ndef count_vowels(sentence):\n   count = 0\n   for letter in sentence:\n      if letter in \"aeiouAEIOU\":\n         count += 1\n   return count\n\n\n", "idx": 3273, "target": 0}
{"func": "# write a python function to return the exponential of a number \ndef get_exponential_value(i):\n    import math\n    return(math.exp(i))\n\n", "idx": 3274, "target": 0}
{"func": "# Write a Python Program to Take in Two Strings and Print the Larger String\n\nstring1='python'\nstring2='theschoolofai'\ncount1=0\ncount2=0\nfor i in string1:\n      count1=count1+1\nfor j in string2:\n      count2=count2+1\nif(count1<count2):\n      print(\"Larger string is:\")\n      print(string2)\nelif(count1==count2):\n      print(\"Both strings are equal.\")\nelse:\n      print(\"Larger string is:\")\n      print(string1)\n\n", "idx": 3275, "target": 0}
{"func": "# write a python function to Calculate the date of n days from the given date.\n\nfrom datetime import datetime, timedelta\ndef add_days(n, d = datetime.today()):\n  return d + timedelta(n)\n\n", "idx": 3276, "target": 0}
{"func": "# write a python function that deletes the last element of a list and returns the list and the deleted element\ndef delete_last_element(list_to_be_processed):\n    deleted_element = list_to_be_processed.pop()\n    return list_to_be_processed, deleted_element\n\n\n", "idx": 3277, "target": 0}
{"func": "#12. Python Program to Check Leap Year\nyear = 2000\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n\n\n", "idx": 3278, "target": 0}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    count = {} \n      \n    for word in str1.split(): \n        count[word] = count.get(word, 0) + 1\n      \n    for word in str2.split(): \n        count[word] = count.get(word, 0) + 1\n  \n    return [word for word in count if count[word] > 1]\n\n", "idx": 3279, "target": 0}
{"func": "# write a Python function to Non-Repeating Integers\ndef non_repeats(radix):\n    count = 0\n    for num_digits in range(1, radix + 1):\n        product = radix - 1\n        for i in range(1, num_digits):\n            product *= (radix - i)\n        count += product\n    return count\n\n\nprint(non_repeats(6))\n\n", "idx": 3280, "target": 0}
{"func": "# write a program which count and print the numbers of each character in a string input by console.\ndic = {}\ns=raw_input()\nfor s in s:\n    dic[s] = dic.get(s,0)+1\nprint '\\n'.join(['%s,%s' % (k, v) for k, v in dic.items()])\n\n", "idx": 3281, "target": 0}
{"func": "# Write a python program using list comprehension to produce and print the list [[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]\n\nstart_num = 2\nrepeat_count = 4\nmax_offset =4\nlist5 = [[start_num + i + j  for j in range(max_offset)]  for i in range(repeat_count) ]\nprint(list5)\n\n\n", "idx": 3282, "target": 0}
{"func": "# Calculate number of days between two given dates\nfrom datetime import datetime\n\ndate_1 = datetime(2020, 2, 25).date()\ndate_2 = datetime(2020, 9, 17).date()\ndelta = None\nif date_1 > date_2:\n    delta = date_1 - date_2\nelse:\n    delta = date_2 - date_1\nprint(\"Difference is\", delta.days, \"days\")\n\n", "idx": 3283, "target": 0}
{"func": "# write a python function to repeat calls to function with specified arguments\ndef repeatfunc(func, times=None, *args):\n    from itertools import starmap, repeat\n    if times is None:\n        return starmap(func, repeat(args))\n    return starmap(func, repeat(args, times))\n\n", "idx": 3284, "target": 0}
{"func": "# Write a python function to Check whether triangle is valid or not if three points are given \t\ndef checkTriangle(x1, y1, x2, y2, x3, y3): \n    a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) \n    if a == 0: \n        return False \n    else: \n        return True\n\n\t\t\n\t\t\n", "idx": 3285, "target": 0}
{"func": "# write a program that prints dictionaries having key of the first dictionary and value of the second dictionary\ntest_dict1 = {\"tsai\" : 20, \"is\" : 36, \"best\" : 100} \ntest_dict2 = {\"tsai2\" : 26, \"is2\" : 19, \"best2\" : 70} \nkeys1 = list(test_dict1.keys()) \nvals2 = list(test_dict2.values()) \nres = dict() \nfor idx in range(len(keys1)): \n\tres[keys1[idx]] = vals2[idx] \nprint(\"Mapped dictionary : \" + str(res))\n\n", "idx": 3286, "target": 0}
{"func": "# 55 Write a python program that pads a given python list to a given length at the start and prints the modified list\n\n\ndef pad_arr_start(arr, pad_len):\n    pad_arr = [0] * (pad_len - len(arr))\n    pad_arr.extend(arr)\n    return pad_arr\n\n\ntmp = [1, 2, 3, 4, 5]\nx = pad_arr_start(tmp, 10)\nprint(x)\n\n", "idx": 3287, "target": 0}
{"func": "#  Given a Python list. Turn every item of a list into its square\naList = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x for x in aList]\nprint(aList)\n\n", "idx": 3288, "target": 0}
{"func": "# Write a python program to Implement Shell sort and print the sorted list for the below list\n\ndef gaps(size):\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**k - 1\n \n \ndef shell_sort(alist):\n    def insertion_sort_with_gap(gap):\n        for i in range(gap, len(alist)):\n            temp = alist[i]\n            j = i - gap\n            while (j >= 0 and temp < alist[j]):\n                alist[j + gap] = alist[j]\n                j = j - gap\n            alist[j + gap] = temp\n \n    for g in gaps(len(alist)):\n        insertion_sort_with_gap(g)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nshell_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3289, "target": 0}
{"func": "#29 write a program to check whether a given key already exists in a dictionary. \n  \ndef checkKey(dict, key): \n      \n    if key in dict.keys(): \n        print(\"Present, \", end =\" \") \n        print(\"value =\", dict[key]) \n    else: \n        print(\"Not present\") \n  \n", "idx": 3290, "target": 0}
{"func": "# Write a function to Get Kth Column of Matrix\ndef kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res = list(zip(*test_list))[K]\n    print(\"The Kth column of matrix is : \" + str(res))\n\n", "idx": 3291, "target": 0}
{"func": "# write a python function to list all unique elements, preserving order\ndef unique_everseen(iterable, key=None):\n    from itertools import filterfalse\n    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in filterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\n", "idx": 3292, "target": 0}
{"func": "# write a python function to implement odd-even sort\n\ndef oddEvenSort(arr, n): \n\tisSorted = 0\n\twhile isSorted == 0: \n\t\tisSorted = 1\n\t\ttemp = 0\n\t\tfor i in range(1, n-1, 2): \n\t\t\tif arr[i] > arr[i+1]: \n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i] \n\t\t\t\tisSorted = 0\n\t\tfor i in range(0, n-1, 2): \n\t\t\tif arr[i] > arr[i+1]: \n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i] \n\t\t\t\tisSorted = 0\t\n\treturn\n\n", "idx": 3293, "target": 0}
{"func": "# write a python function to use a predicate and return entries particition into false entries and true entries\ndef partition(pred, iterable):\n    from itertools import filterfalse, tee\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t1, t2 = tee(iterable)\n    return filterfalse(pred, t1), filter(pred, t2)\n\n", "idx": 3294, "target": 0}
{"func": "# python function to print all time when angle between hour hand and minute\ndef printTime(theta):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == theta):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\ntheta = 90.0\nprintTime(theta)\n\n", "idx": 3295, "target": 0}
{"func": "# Write a function to return the volume of a cuboid\ndef cal_cuboid_volume(length:float, breadth:float, height:float)->float:\n    return length*breadth*height\n\n", "idx": 3296, "target": 0}
{"func": "# Write a Python Program to test and print Collatz Conjecture for a Given Number\n\ndef collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*n + 1\n        else:\n            # n is even\n            n = n//2\n    print(1, end='')\n\n", "idx": 3297, "target": 0}
{"func": "# Usage of global keyword\nx = 0\ndef in_func2():\n    global x\n    x = 1\n    print('in_func2:', x)\nin_func2()\nprint('global:', x)\n\n", "idx": 3298, "target": 0}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\n   \nresList = removeValue(list1, 20)\nprint(resList)\n\n", "idx": 3299, "target": 0}
{"func": "# Write a function to identify if value is present inside a list or not\ndef check_listvalue(l:list, value)->bool:\n    return value in l\n\n", "idx": 3300, "target": 0}
{"func": "# write a Python function To Calculate Volume OF Cylinder \npi = 22/7\ndef volume(r, h): \n    vol = pi * r * r * h \n    return vol \n\nr = 5\nh = 8\n\nprint(\"Volume Of Cylinder = \",volume(r, h)) \n\n", "idx": 3301, "target": 0}
{"func": "# write a python function to check whether a number is perfect\n\n def isPerfect( n ): \n     sum = 1\n     i = 2\n     while i * i <= n: \n         if n % i == 0: \n             sum = sum + i + n/i \n         i += 1\n     return (True if sum == n and n!=1 else False) \n\n", "idx": 3302, "target": 0}
{"func": "#70 write a python program to extract Numerical Dictionary values and print it\n\ntest_dict = {\"Gfg\" : [\"34\", \"45\", 'geeks'], 'is' : [\"875\", None, \"15\"], 'best' : [\"98\", 'abc', '12k']} \n  \n", "idx": 3303, "target": 0}
{"func": "# Write a Python Program to print Prime Factors of an Integer\n\nn=24\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(i)\n    i=i+1\n\n\n", "idx": 3304, "target": 0}
{"func": "#write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.\ndef compress(text):\n    from itertools import groupby\n    for k, g in groupby(text):\n        print(\"({}, {})\".format(len(list(g)), k), end=\" \")\n\n\n", "idx": 3305, "target": 0}
{"func": "# write a python program to make use of regular expression for matching\nimport re\nprint('Find the characters in the given string:',re.findall(r'[a-z]+', '123FOO456', flags=re.IGNORECASE))\n\n", "idx": 3306, "target": 0}
{"func": "# Write a Python function to remove falsy values from a list\ndef newlist(lst):\n  return list(filter(None, lst))\n\n\n", "idx": 3307, "target": 0}
{"func": "# write a python function to find the nth catalan number\n\ndef catalan(n): \n    if n <= 1: \n        return 1\n    res = 0\n    for i in range(n): \n        res += catalan(i) * catalan(n-i-1) \n    return res \n\n", "idx": 3308, "target": 0}
{"func": "# Write a python  program to print only even length words in a sentence\n\ndef printEvenLengthWords(s):       \n    s = s.split(' ')  \n    for word in s:\n        if len(word)%2==0: \n            print(word)  \n\n\t\t\t\n", "idx": 3309, "target": 0}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list))\ns=[]\nk=''\nfor i in test_list:\n    for j in  i:\n        k+=str(j)\nprint(list(set(k)))\n\n\n", "idx": 3310, "target": 0}
{"func": "# Write a python program to determine the percentage of lowercase and uppercase letters in a string.\nstring = input()\n\nlength = len(string)\n\nlower = upper = 0\n\nfor i in string:\n    if i.islower():\n        lower += 1\n    elif i.isupper():\n        upper += 1\n\nper_lower = lower / length * 100\nper_upper = upper / length * 100\nprint(\"Lower: %.2f%%\" % per_lower)\nprint(\"Upper: %.2f%%\" % per_upper)\n\n", "idx": 3311, "target": 0}
{"func": "# write a python function that returns biggest character in a string\nfrom functools import reduce\n\n\ndef biggest_char(string):\n    if not isinstance(string, str):\n        raise TypeError\n    return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)\n\n\n", "idx": 3312, "target": 0}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        k = char.islower()   \n        if k == True: \n            return True \n    if(k != 1): \n        return False\n\n", "idx": 3313, "target": 0}
{"func": "#35 function to sort the  dictionary with respect to key.\ndef dict_sort_with_key(test_dict: dict):\n    final dict = {}\n    temp = sorted(test_dict)\n    for i in temp:\n        final_dict[i] = test_dict[a]\n    return final_dict\n\n\n", "idx": 3314, "target": 0}
{"func": "# write a python program to check if a number is positive, negative or zero.\n\nnum = 5\nif num > 0:\n   print(\"It is positive number\")\nelif num == 0:\n   print(\"It is Zero\")\nelse:\n   print(\"It is a negative number\")\n\n", "idx": 3315, "target": 0}
{"func": "# Write a python program to find and print second largest number from list of numbers\n\nnum_array = [8, 6, 15, 23, 14, 28, 5, 1, 99]\nlargest = second_largest = num_array[0]\nfor i in range(1,len(num_array)):\n    if num_array[i] > largest:\n        second_largest = largest\n        largest = num_array[i]\n    elif num_array[i] > second_largest:\n        second_largest = num_array[i]\nprint(second_largest)\n\n\n", "idx": 3316, "target": 0}
{"func": "# Write python function to generate valid parenthesis, number of parenthesis is given as input\n\ndef generateParenthesis(n):\n        \n    def backtrack(S='', left=0, right=0):\n        if len(S) == 2*n:\n            output.append(S)\n            return\n        if left < n:\n            backtrack(S+'(', left+1, right)\n        if right < left:\n            backtrack(S+')', left, right+1)\n        \n    output = []\n    backtrack()\n    return output\n\t\n\t\n", "idx": 3317, "target": 0}
{"func": "# This function multiplies two numbers\ndef multiply(x, y):\n    return x * y\n\n", "idx": 3318, "target": 0}
{"func": "# write a python function to return the largest and smallest numbers in the given list and return None if the list is empty\ndef largest_and_smallest(list_of_nums):\n    if list_of_nums:\n        return max(list_of_nums), min(list_of_nums)\n    else:\n        return\n\n", "idx": 3319, "target": 0}
{"func": "#73 write a program to print a pattern of stars (*)\n\nfor row in range (0,5):\n    for column in range (0, row+1):\n        print (\"*\", end=\"\")\n\n    # ending row\n    print('\\r')\n    \n", "idx": 3320, "target": 0}
{"func": "# Write a function that returns a dictionary sorted ascending by its values\ndef ascending_dict_valuesort(d:dict):\n    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[1])}\n\n", "idx": 3321, "target": 0}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres = {} \nfor i, j in test_list: \n     res.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res))\n\n", "idx": 3322, "target": 0}
{"func": "# write a python function to count 'a's in the repetition of a given string 'n' times.\ndef repeated_string(s, n):\n    return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')\n\n\n", "idx": 3323, "target": 0}
{"func": "#4 write a function to print the count of divisor.\ndef divisor_count(num: int):\n    \"\"\"\n    function to count the number of divisor of interger.\n    \"\"\"\n    if isinstance(num, int):\n        count = 0\n        for i in range(1, num+1):\n            if num%i == 0:\n                count = count+1\n        print(f'Number of divisor is {count}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 3324, "target": 0}
{"func": "#Write a python program to replace the first character occurence in the later part of the string\ndef change_char(str1):\nchar = str1[0]\nlength = len(str1)\nstr1 = str1.replace(char, '$')\nstr1 = char + str1[1:]\n\nreturn str1\n\nprint(change_char('restart'))\n\n\n", "idx": 3325, "target": 0}
{"func": "# 75 write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects = [\"I\", \"You\"]\nverbs = [\"Play\", \"Love\"]\nobjects = [\"Hockey\", \"Football\"]\nfor i in range(len(subjects)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print(sentence)\n\n", "idx": 3326, "target": 0}
{"func": "# Write a python program to define a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef Generator(n):\nfor i in range(n+1):\nif i%7 == 0:\nyield i\nn = int(input(\"Enter Number: \"))\nfor i in Generator(n):\nprint(i,end = \" \")\n\n", "idx": 3327, "target": 0}
{"func": "# Write a function to return the area of a rhombus\ndef area(d1, a): \n    d2 = (4*(a**2) - d1**2)**0.5\n    area = 0.5 * d1 * d2 \n    return(area) \n\n", "idx": 3328, "target": 0}
{"func": "# 21 write a function that removes all the punctuations from a string\n\n\nimport string\n\n\ndef remove_punct(s):\n    return \"\".join(ch for ch in s if ch not in set(string.punctuation))\n\n\n", "idx": 3329, "target": 0}
{"func": "#  Given a Python list. Turn every item of a list into its square\naList = [1, 2, 3, 4, 5, 6, 7]\naList =  [x * x for x in aList]\nprint(aList)\n\n", "idx": 3330, "target": 0}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    count = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            count += 1\n          \n    return count\n\n", "idx": 3331, "target": 0}
{"func": "# write python function get the unique number of elements from the user given list \n\nmylist = ['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']\n\ndef get_unique_elements(list):\n    unique = [x for i, x in enumerate(mylist) if i == mylist.index(x)]\n    return unique\n\nget_unique_elements(mylist)\n\n\n", "idx": 3332, "target": 0}
{"func": "# write a python function to find the area of a circle using the user provided radius\n\ndef area_of_circle(radius):\n  PI = 3.14\n  radius = float(radius)\n  area = PI * radius * radius\n  circumference = 2 * PI * radius\n  print(f'Area Of a Circle {area}')\n  print(f'Circumference Of a Circle {circumference}')\n\n", "idx": 3333, "target": 0}
{"func": "#65 Write a Python function to check if a given string is an anagram of another given string.\ndef is_anagram(str1, str2):\n    list_str1 = list(str1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.sort()\n\n    return (list_str1 == list_str2)\n\n", "idx": 3334, "target": 0}
{"func": "# write a python function to convert a given string into a list of words.\n\nimport re\ndef words(s, pattern = '[a-zA-Z-]+'):\n  return re.findall(pattern, s)\n\n", "idx": 3335, "target": 0}
{"func": "# Calculate difference in days between two dates\ndef days_between(d1, d2):\n    from datetime import datetime as dt\n    f_date = dt.strptime(d1, \"%d/%m/%Y\").date()\n    l_date = dt.strptime(d2, \"%d/%m/%Y\").date()\n    delta = l_date - f_date\n    print(delta.days)\n\n\n", "idx": 3336, "target": 0}
{"func": "#22.  Python Program to Find the Sum of Natural Numbers\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sum += num\n       num -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 3337, "target": 0}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datetime \nstr2 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str2,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 3338, "target": 0}
{"func": "# write a python function to find the resolution on the user provided image\n\ndef jpeg_res(filename):\n   with open(filename,'rb') as img_file:\n       img_file.seek(163)\n       A = img_file.read(2)\n       height = (A[0] << 8) + A[1]\n       A = img_file.read(2)\n       width = (A[0] << 8) + A[1]\n   print(f\"The resolution of the image is {width}x{height}\")\n\n", "idx": 3339, "target": 0}
{"func": "# write a python function to get 10 best Artists playing on Apple iTunes\ndef get_artists():\n    import requests\n    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'\n    response = requests.get(url)\n    data__ = response.json()\n    for artist_dict in data__['feed']['entry']:\n        artist_name = artist_dict['im:artist']['label']\n        print(artist_name)\n\n\n", "idx": 3340, "target": 0}
{"func": "# write a python function to determing the volume of a cube whose space diagonal measure is given\n \n  def CubeVolume(d): \n    Volumes = (1.73205 * pow(d, 3)) / 9\n    return Volumes\n    \n", "idx": 3341, "target": 0}
{"func": "# write a python program to add two list of same length.\ndef add_two_list_items():\n    num1 = [1,2,3]\n    num1 = [4,5,6]\n    sum = num1 + num1\n    print(f'Sum: {sum}')\n\n\n", "idx": 3342, "target": 0}
{"func": "# write a python function to find the factors of a number\n\ndef print_factors(x):\n   print(\"The factors of\",x,\"are:\")\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\nnum2 = 63\nprint_factors(num2)\n\n", "idx": 3343, "target": 0}
{"func": "# write the program to remove empty tuples from a list\ndef Remove(tuple): \n    tuple = filter(None, tuple) \n    return tuple \n", "idx": 3344, "target": 0}
{"func": "# Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.\n\nitem=[x for x in input().split(',')]\nitem.sort()\nprint(','.join(item))\n\n\n", "idx": 3345, "target": 0}
{"func": "#76 write a program to print the binary value of the numbers from 1 to N\n\nk = int(input(\"Enter the value of N: \"))\n\nfor i in range(1, k+1):\n    print(\"Binary value of \", i, \" is: \", bin(i))\n    \n", "idx": 3346, "target": 0}
{"func": "# Write a python program to Count the Number of Lines in a Text File\n\nlname = input(\"Enter file name: \")\nnum_lines = 0\nwith open(lname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)\n\n", "idx": 3347, "target": 0}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres_ = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res_))\n\n", "idx": 3348, "target": 0}
{"func": "# Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nitem=[x for x in raw_input().split(',')]\nitem.sort()\nprint ','.join(item)\n\n", "idx": 3349, "target": 0}
{"func": "# write a python program to deep flattens a nested list\nM = [1, 2, [3, 4], [5, 6, [7]]]\n\ndef flatten(M):\n    for item in M:\n        if isinstance(item, list):\n            yield from flatten(item)\n        else:\n            yield item\n\nprint(list(flatten(M)))\n\n\n", "idx": 3350, "target": 0}
{"func": "# Write a python program to Implement Counting sort and print the sorted list for the below list\n\ndef counting_sort(alist, largest):\n    b = [0]*(largest + 1)\n    for i in range(len(alist)):\n        b[alist[i]] = b[alist[i]] + 1\n \n    b[0] = b[0] - 1 \n    for i in range(1, largest + 1):\n        b[i] = b[i] + b[i - 1]\n \n    result = [None]*len(alist)\n \n    for x in reversed(alist):\n        result[b[x]] = x\n        b[x] = b[x] - 1\n \n    return result\n \n \nalist = [2, 3, 5, 6, 4, 5]\nk = max(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)\n\n", "idx": 3351, "target": 0}
{"func": "# write a python function to convert decimal to hexadecimal\n\n def decToHexa(n): \n    hexaDeciNum = ['0'] * 100; \n    i = 0; \n    while(n != 0):  \n        temp = 0;  \n        temp = n % 16; \n        if(temp < 10): \n            hexaDeciNum[i] = chr(temp + 48); \n            i = i + 1; \n        else: \n            hexaDeciNum[i] = chr(temp + 55); \n            i = i + 1; \n        n = int(n / 16); \n    k = i - 1; \n    while(k >= 0): \n        print((hexaDeciNum[k]), end = \"\"); \n        k = k - 1;\n \n", "idx": 3352, "target": 0}
{"func": "# Write a Python Program that Prints which Letters are in the First String but not in the Second\n\ns2='python'\ns2='schoolofai'\na=list(set(s2)-set(s2))\nprint(\"The letters are:\")\nfor i in a:\n    print(i)\n\n", "idx": 3353, "target": 0}
{"func": "# Write a python function to Count the Number of Lines in a Text File\ndef check_lines():\n    lname = input(\"file name: \")\n    num_lines = 0\n    with open(lname, 'r') as f:\n        for line in f:\n            num_lines += 1\n    print(\"Number of lines = \", num_lines)\n\n\n", "idx": 3354, "target": 0}
{"func": "# python program to add three list\ndef add_list(num1, num2, num3):\n    resulting = map(lambda x, y, z: x + y + z, num1, num2, num3)\n    print(\"\\nNew list after adding above three lists:\")\n    print(list(resulting))\n\n\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nnums3 = [7, 8, 9]\n\nadd_list(nums1, nums2, nums3)\n\n", "idx": 3355, "target": 0}
{"func": "#  Write a python function to get the volume of a pyramid with base area & vertical height as input\ndef pyramid_volume(base_area, height):\n    volumes = 1/3 * base_area * height\n    return volumes\n\n", "idx": 3356, "target": 0}
{"func": "# Write a program to find and print if a number is a Harshad number\n\nnum = 156;    \nrems = sum = 0;   \n   \nn = num;    \nwhile(num > 0):    \n    rems = num%10;    \n    sum = sum + rems;    \n    num = num//10;    \n     \n\nif(n%sum == 0):    \n    print(str(n) + \" is a harshad number\")    \nelse:    \n    print(str(n) + \" is not a harshad number\")\n\t\n\n", "idx": 3357, "target": 0}
{"func": "#68 Write a Python function to find the length of the last word.\ndef length_of_last_word(s):\n        phrases = s.split()\n        if len(phrases) == 0:\n            return 0\n        return len(phrases[-1])\n\n", "idx": 3358, "target": 0}
{"func": "# Write a Python program that asks the user to enter a number and Depending on whether the number is even or odd, print out an appropriate message to the user.\n\nnumbers = int(input(\"Number: \"))\n\nif numbers%2 == 0 and numbers%4 != 0:\nprint(\"Your number is even...\")\nelif numbers%4 == 0:\nprint(\"Your number is a multiple of 4\")\nelse:\nprint(\"Your number is odd...\")\n\n", "idx": 3359, "target": 0}
{"func": "# Write a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence\nitem = []\nfor i in range(100, 401):\ns = str(i)\nif (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):\nitem.append(s)\nprint( \",\".join(item\n\n\n", "idx": 3360, "target": 0}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(height,radius):\n    3.14159=3.14\n    return 3.14159*(radius**2)*height/3\n\n", "idx": 3361, "target": 0}
{"func": "# write a program to find cosine of a number\nimport math\n\nnum2 = 45\nprint(\"Cosine\", math.cos(num2))\n\n\n", "idx": 3362, "target": 0}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr2 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str2) - N + 1): \n\n    if (len(set(str2[idx: idx + N])) == K): \n        res.append(str2[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 3363, "target": 0}
{"func": "#63 Python Challenges: Check a sequence of numbers is a geometric progression or not\ndef is_geometric(li):\n    if len(li) <= 1:\n        return True\n    # Calculate ratio\n    ratios = li[1]/float(li[0])\n    # Check the ratio of the remaining\n    for i in range(1, len(li)):\n        if li[i]/float(li[i-1]) != ratios: \n            return False\n    return True \n\n", "idx": 3364, "target": 0}
{"func": "# write a python function to add user provided list and return the result\ndef addlist(list1,list2):\n    result = list1+list2\n    return result\n\nanswers = addlist(['cat','dog'],['samsung','oneplus'])\n\n4.\n", "idx": 3365, "target": 0}
{"func": "# write a python function to get the most common word in text\ndef most_common(text):\n    b = Counter(text)\n    return b.most_common(1)\n\n\n", "idx": 3366, "target": 0}
{"func": "#43. Python Program to Transpose a Matrix using Nested List Comprehension\n\nY = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[Y[j][i] for j in range(len(Y))] for i in range(len(Y[0]))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 3367, "target": 0}
{"func": "# write Python3 code to demonstrate Kth Non-None String from Rear using next() + list comprehension \n\ntest_list = [\"\", \"\", \"Akshat\", \"Nikhil\"] \n\nprint(\"The original list : \" + str(test_list)) \nK = 2\ntest_list.reverse() \ntest_list = iter(test_list) \nfor idx in range(0, K): \n    res_ = next(sub for sub in test_list if sub) \n\nprint(\"The Kth non empty string from rear is : \" + str(res_)) \n\n\n", "idx": 3368, "target": 0}
{"func": "# write a python program to calculate distance between tao points\n\nimport math\np2 = [4, 0]\np2 = [6, 6]\ndistance = math.sqrt( ((p2[0]-p2[0])**2)+((p2[1]-p2[1])**2) )\nprint(f\"The distance between {p2} and {p2} is {distance}\")\n\n", "idx": 3369, "target": 0}
{"func": "# Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.\nimport itertools\ndef loan_schedule(principal, interest_rate, annual_payment, tenure):\n    if(tenure <= 0):\n        print(\"Invalid tenure\",tenure)\n        raise ValueError\n    if(interest_rate > 1 or interest_rate < 0):\n        print(\"Invalid interest rate\",interest_rate,\" Expected between 0 and 1\")\n        raise ValueError\n    cashflow = [principal, *list(itertools.repeat(-annual_payment, tenure))]\n    effective_interest_rate = 1+interest_rate\n    return [ val for val in list(itertools.accumulate(cashflow, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]\n\n", "idx": 3370, "target": 0}
{"func": "# write a python list comprehension to print numbers in a given string\n strings = \"Hello 12345 World\"\n numbers = [x for x in strings if x.isdigit()]\n print (numbers)\n \n", "idx": 3371, "target": 0}
{"func": "# Write a python program to Implement Heapsort and print the sorted list for the below list\n\ndef heapsort(alist):\n    build_max_heap(alist)\n    for i in range(len(alist) - 1, 0, -1):\n        alist[0], alist[i] = alist[i], alist[0]\n        max_heapify(alist, index=0, size=i)\n \ndef parent(i):\n    return (i - 1)//2\n \ndef left(i):\n    return 2*i + 1\n \ndef right(i):\n    return 2*i + 2\n \ndef build_max_heap(alist):\n    lenght = len(alist)\n    start = parent(lenght - 1)\n    while start >= 0:\n        max_heapify(alist, index=start, size=lenght)\n        start = start - 1\n \ndef max_heapify(alist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and alist[l] > alist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and alist[r] > alist[largest]):\n        largest = r\n    if (largest != index):\n        alist[largest], alist[index] = alist[index], alist[largest]\n        max_heapify(alist, largest, size)\n \n \nalist = [2, 3, 5, 6, 4, 5]\nheapsort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3372, "target": 0}
{"func": "# write a python program to print names of the entries in the directory given by path\npaths = '/home'\nimport os\nprint(os.listdir(paths))\n\n", "idx": 3373, "target": 0}
{"func": "# write a python program to check tuple are immutable\nA=(1,2,3)\ntry:\n    A = A+1\nexcept Exception as e:\n    print(e)\n\n", "idx": 3374, "target": 0}
{"func": "# write a python function for some weird hypnosis text.\ndef weird():\n    import random\n\n    def getlength(scripts):\n        return sum((i['length'] for i in scripts))\n\n    def truncate(target_length, scripts):\n        if getlength(scripts) > target_length:\n            scripts = sorted(scripts, key=lambda k: (k['priority'], -k['length']))[:-1]\n            return truncate(target_length, scripts)\n        return sorted(scripts, key=lambda k: k['index'])\n\n    def as_text(scripts):\n        return \"\\n\".join([i['text'] for i in scripts])\n\n    priorities_and_sentences = [\n        (1, \"...now... sitting comfortably in the chair\"),\n        (2, \"...with your feet still flat on the ground\"),\n        (3, \"...back straight and head up right\"),\n        (2, \"...make these adjustments now if you need to\"),\n        (3, \"... pause..............................\"),\n        (1, \"...your eyes ...still ...comfortably closed\"),\n        (2, \"...nice and relaxed...comfortable and relaxed...\"),\n        (3, \"... pause.......................................\"),\n        (1, \"...now...I want you to notice...how heavy your head is starting to feel...\"),\n        (1, \"how heavy your head feels...\"),\n        (3, \"... pause.......................................\"),\n        (2, \"really noticing the weight... of your head...\"),\n        (3,\n         \"and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable\"),\n    ]\n\n    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in\n                  enumerate(priorities_and_sentences)]\n\n    print(as_text(truncate(500, scriptlist)))\n    print(as_text(truncate(300, scriptlist)))\n    print(as_text(truncate(200, scriptlist)))\n\n\n", "idx": 3375, "target": 0}
{"func": "#s=''\nfor i in test_list:\n    \u2019=''\n    for j in i:\n        \u2019+=j+' '\n    l.append(\u2019)\nprint(l)    \n\n", "idx": 3376, "target": 0}
{"func": "# write a program to check if a substring is present in a given string\n\nstrings = \"how are you?\"\nsubstring = \"are\"\nif (strings.find(substring) == -1): \n    print(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 3377, "target": 0}
{"func": "# Write a python program to find and print volume of a sphere for which diameter d is given\nimport math\n\ndiameter = 12.\nradii = diameter/2.\n", "idx": 3378, "target": 0}
{"func": "# Write a python program to Implement Linear Search and print the key element if found\n\ndef linear_search(alist, crucial):\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\n    for i in range(len(alist)):\n        if alist[i] == crucial:\n            return i\n    return -1\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\ncrucial = 6\n \nindex = linear_search(alist, crucial)\nif index < 0:\n    print(f'{crucial} was not found.')\nelse:\n    print(f'{crucial} was found at index {index}.')\n\n", "idx": 3379, "target": 0}
{"func": "# Python program to accept string and calculate number of upper and lower case string\n\ndef string_test(s):\n    l = {\"UPPER_CASE\": 0, \"LOWER_CASE\": 0}\n    for c in s:\n        if c.isupper():\n            l[\"UPPER_CASE\"] += 1\n        elif c.islower():\n            l[\"LOWER_CASE\"] += 1\n        else:\n            pass\n    print(\"Original String : \", s)\n    print(\"No. of Upper case characters : \", l[\"UPPER_CASE\"])\n    print(\"No. of Lower case Characters : \", l[\"LOWER_CASE\"])\n\n\nstring_test('The quick Brown Fox')\n\n\n", "idx": 3380, "target": 0}
{"func": "# Write a python Class to print All Possible Subsets from a Set of Distinct Integers\n\nclass sub:  \n    def f1(self, s1):  \n        return self.f2([], sorted(s1))  \n \n    def f2(self, curr, s1):  \n        if s1:  \n            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  \n        return [curr]  \nA=[2, 3, 5, 6, 4, 5]\n\nprint(\"Subsets: \")\nprint(sub().f1(A))\n\n", "idx": 3381, "target": 0}
{"func": "# sorted() to sort, lambda provides key-value addition \nres_ = sorted(test_dict.items(), key=lambda sub: sub[0] + sub[1]) \n  \n", "idx": 3382, "target": 0}
{"func": "# write a python function that returns True if the sum of two provided numbers is even\ndef is_prod_even(num1, num2):\n   sums = num1 + num2\n   return not sums % 2\n\n\n", "idx": 3383, "target": 0}
{"func": "# Write a Python function to Count and print the Number of Vowels Present in a String using Sets\n\ndef count_vowels(s):\n    counts = 0\n    vowels = set(\"aeiou\")\n    for letter in s:\n        if letter in vowels:\n            counts += 1\n    return counts\n\n", "idx": 3384, "target": 0}
{"func": "# Write a function to Filter String with substring at specific position\ndef f_substring():\n    test_list = ['program ', 'to', 'filter', 'for', 'substring']\n    print(\"The original list is : \" + str(test_list))\n    sub_str = 'geeks'\n    u, j = 0, 5\n    res = list(filter(lambda ele: ele[u: j] == sub_str, test_list))\n    print(\"Filtered list : \" + str(res))\n\n\n", "idx": 3385, "target": 0}
{"func": "# write a python program to replace all the negative values to zero and keep only positive values in the list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprice = [i if i > 0 else 0 for i in original_prices]\nprint(f\"{price}\")\n\n\n", "idx": 3386, "target": 0}
{"func": "# write a program that multiplies corresponding elements in two lists and prints a new list\nlist1 = [1, 2, 3, 4, 5]\nlist1 = [5, 4, 3, 2, 1]\nprod_list = [a*b for (a,b) in zip(list1, list1)]\nprint(prod_list)\n\n\n", "idx": 3387, "target": 0}
{"func": "# Write a Python function to \ndef binary_palindrome(n):\n\ts=int(bin(n)[2:])\n\tl=str(s)[::-1]\n\tif int(l)==s:\n\t    return \"The binary representation of the number is a palindrome.\"\n\telse:\n\t    return \"The binary representation of the number is NOT a palindrome.\"\n\n\n", "idx": 3388, "target": 0}
{"func": "# Write a python program to implement Dequeue\n\nclass Dequeue:\n    def __init__(self_):\n        self_.items = []\n \n    def is_empty(self_):\n        return self_.items == []\n \n    def append(self_, data):\n        self_.items.append(data)\n \n    def append_left(self_, data):\n        self_.items.insert(0, data)\n \n    def pop(self_):\n        return self_.items.pop()\n \n    def pop_left(self_):\n        return self_.items.pop(0)\n \n \nq = Dequeue()\nprint('Menu')\nprint('append <value>')\nprint('appendleft <value>')\nprint('pop')\nprint('popleft')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'append':\n        q.append(int(do[1]))\n    elif operation == 'appendleft':\n        q.append_left(int(do[1]))\n    elif operation == 'pop':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from right: ', q.pop())\n    elif operation == 'popleft':\n        if q.is_empty():\n            print('Dequeue is empty.')\n        else:\n            print('Popped value from left: ', q.pop_left())\n    elif operation == 'quit':\n        break\n\n", "idx": 3389, "target": 0}
{"func": "# Write a program to check whether a number is prime or not\nnum2 = 337\n\nif num2 > 1:\n   for i in range(2, num2//2 + 1):\n       if (num2 % i) == 0:\n           print(num2,\"is not a prime number\")\n           print(f\"{i} times {num2//i} is {num2}\")\n           break\n   else:\n       print(f\"{num2} is a prime number\")\n\nelse:\n   print(f\"{num2} is not a prime number\")\n\n\n", "idx": 3390, "target": 0}
{"func": "# Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nitem=[x for x in input().split(',')]\nitem.sort()\nprint(','.join(item))\n\n", "idx": 3391, "target": 0}
{"func": "# write a python Program to Find the Size (Resolution) of a  JPEG Image and print it\ndef jpeg_res(filename):\n   with open(filename,'rb') as img_file:\n       img_file.seek(163)\n\n       A = img_file.read(2)\n\n       # calculate height\n       height = (A[0] << 8) + A[1]\n\n       # next 2 bytes is width\n       A = img_file.read(2)\n\n       # calculate width\n       width = (A[0] << 8) + A[1]\n\n   print(\"The resolution of the image is\",width,\"x\",height)\n\n", "idx": 3392, "target": 0}
{"func": "# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digits = temp % 10\n   sum += digits ** 3\n   temp //= 10\n\n", "idx": 3393, "target": 0}
{"func": "# write a python function to check if given set is subset or not\ndef check_subset():\n    for _ in range(int(input())):\n        y, a, z, b = input(), set(input().split()), input(), set(input().split())\n    print(a.issubset(b))\n\n\n", "idx": 3394, "target": 0}
{"func": "# Write a Python function to find the simple interest in Python when principle amount, rate of interest and time is given\ndef simple_interest(p,r,t):\n    s\u0103_mi = (p*r*t)/100\n    return s\u0103_mi\n\n\n", "idx": 3395, "target": 0}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentences = 'the quick brown fox jumps over the lazy dog'\nwords = sentences.split(' ')\nlengths = [str(len(word)) for word in words]\nprint(' '.join(lengths))\n\n\n", "idx": 3396, "target": 0}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    3.14159=3.14\n    return 2*3.14159*radius**2*+2*3.14159*radius*height\n\n", "idx": 3397, "target": 0}
{"func": "# initializing list  \ntest_list = [\"Gfg\", \"best\", \"geeks\"] \nb=sorted(test_dict.values(),reverse=True)\nfor key,value in test_dict.items():\n    if key in test_list and value in b[0:2]:\n       print(key)\n\n", "idx": 3398, "target": 0}
{"func": "# write a python function to check if given set is subset or not\ndef check_subset():\n    for _ in range(int(input())):\n        y, a, z, b = input(), set(input().split()), input(), set(input().split())\n    print(a.issubset(b))\n\n\n", "idx": 3399, "target": 0}
{"func": "# Write a function to add two positive integers without using the '+' operator\ndef add_without_plus_operator(a, b):\n    while b != 0:\n        data__ = a & b\n        a = a ^ b\n        b = data__ << 1\n    return a\n\n", "idx": 3400, "target": 0}
{"func": "# Write a function, which will find all such numbers between 1000 to 9999 that each digit of the number is an even number.\n\nvalues = []\nfor i in range(1000, 9999):\n  \u2019 = str(i)\n  if (int(\u2019[0])%2==0) and (int(\u2019[1])%2==0) and (int(\u2019[2])%2==0) and (int(\u2019[3])%2==0):\n      values.append(\u2019)\n\n\n", "idx": 3401, "target": 0}
{"func": "# than the specified number.\ndef sum_of_cubes(n):\n    n -= 1\n    sub_total = 0\n    while n > 0:\n        sub_total += n * n * n\n        n -= 1\n    return sub_total\n\n\nprint(\"Sum of cubes: \", sum_of_cubes(3))\n\n\n", "idx": 3402, "target": 0}
{"func": "# Write a Python function to Find Element Occurring Odd Number of Times in a List\n\ndef find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n \n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ansd = 0\n \n    for element in alist:\n        ansd ^= element\n \n    return ansd\n\n", "idx": 3403, "target": 0}
{"func": "# Driver Code \nif __name__ == '__main__': \n      \n    string = \"SchoolofAI\"\n      \n    # Remove nth index element \n    u = 5\n    \n    # Print the new string \n    print(remove(string, u))\n\n\n", "idx": 3404, "target": 0}
{"func": "# write a  python program to check and print if a string is palindrome or not\nst = 'malayalam'\nk = -1\nflag = 0\nfor i in st:\n    if i != st[k]:\n      k = k - 1\n      flag = 1\n      break\n    k = k - 1\nif flag == 1:\n    print(\"Not a palindrome\")\nelse:\n    print(\"It is a palindrome\")\n\n", "idx": 3405, "target": 0}
{"func": "# write a python program to del the first element of the array/list\nA = [-1, 1, 66.25, 333, 333, 1234.5]\ndel A[0]\nprint(A)\n", "idx": 3406, "target": 0}
{"func": "# write a function to find uncommon words from two strings\n\ndef UncommonWords(str1, str2): \n  \n    counts = {} \n      \n    for word in str1.split(): \n        counts[word] = counts.get(word, 0) + 1\n      \n    for word in str2.split(): \n        counts[word] = counts.get(word, 0) + 1\n  \n    return [word for word in counts if counts[word] == 1]\n\n", "idx": 3407, "target": 0}
{"func": "#21 Write a python program to count the number of spaces in a string and print it\n\ncount=0\nstrings = \"Welcome to schoolofAI\"\nfor i in strings:\n    if i==\" \":\n        count=count+1\nprint(f'number of spaces {count}')\n\n", "idx": 3408, "target": 0}
{"func": "#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.\ndef is_arithmetic(l):\n    deltas = l[1] - l[0]\n    for index in range(len(l) - 1):\n        if not (l[index + 1] - l[index] == deltas):\n             return False\n    return True\n\n", "idx": 3409, "target": 0}
{"func": "# Please write a program to print the running time of execution of \"1+1\" for 100 times.\nfrom timeit import Timer\n\u00b4 = Timer(\"for i in range(100):1+1\")\nprint(\u00b4.timeit())\n\n", "idx": 3410, "target": 0}
{"func": "# Finding all permuatation \nresulting = [] \n  \ndef permute(data, i, length):  \n    if i == length:  \n        resulting.append(''.join(data) ) \n    else:  \n        for j in range(i, length):  \n            # swap \n            data[i], data[j] = data[j], data[i]  \n            permute(data, i + 1, length)  \n            data[i], data[j] = data[j], data[i]   \npermute(list(ini_str), 0, len(ini_str)) \n  \n", "idx": 3411, "target": 0}
{"func": "# write a python program to print the largest number among the three input numbers\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\nnum3 = float(input(\"Enter third number: \"))\n\nif (num1 >= num2) and (num1 >= num3):\n   biggest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   biggest = num2\nelse:\n   biggest = num3\n\nprint(\"The largest number is\", biggest)\n\n", "idx": 3412, "target": 0}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nK = 7\n  \nres_ = [ele for ele in test_list if str(K) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res_))\n\n\n", "idx": 3413, "target": 0}
{"func": "#30 get rid of all null values in array python\nslist = [1, 2, 3, '', 4]\nslist = [i for i in slist if i]\n\n", "idx": 3414, "target": 0}
{"func": "# write a program to print least frequent character in a string\n\nstr2=\"watch the match\"\nall_freq = {} \nfor i in str2: \n    if i in all_freq: \n        all_freq[i] += 1\n    else: \n        all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\nprint(\"Minimum of all characters is: \" + str(res))\n\n", "idx": 3415, "target": 0}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    b = 300000\n    return mass * (b**2)\n\n", "idx": 3416, "target": 0}
{"func": "# Write a Python function to find the N-th number which is both square and cube\ndef nth_sq_and_cube(N):\n\tD = N**6\n\treturn D\n\n\n", "idx": 3417, "target": 0}
{"func": "# using dictionary comprehension to go through all keys \nres_ = {key: [re.sub('\\d', '', ele) for ele in val] \n       for key, val in test_dict.items()} \n          \n", "idx": 3418, "target": 0}
{"func": "# Addition of two vector\nv1 = [1,2,3]\nv2 = [1,2,3]\ns2 = [0,0,0]\n\nfor i in range(len(v1)):\n  s2[i] = v1[i] + v2[i]\nprint(f\"New Vector:{s2}\")\n\n", "idx": 3419, "target": 0}
{"func": "# Write a python program to Remove multiple empty spaces from  List of strings. Print the original and final lists.\n  \ntest_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] \n  \nprint(\"The original list is : \" + str(test_list)) \n  \nres_ = [ele for ele in test_list if ele.strip()] \n      \nprint(\"List after filtering non-empty strings : \" + str(res_)) \n\n\n", "idx": 3420, "target": 0}
{"func": "# write Python program to demonstrate working of Cummulative Records Product \n\ndef prod(val) : \n    res_ = 1\n    for ele in val: \n        res_ *= ele \n    return res_ \n\ntest_list = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)] \n\nprint(\"The original list : \" + str(test_list)) \nres_ = prod(int(j) for i in test_list for j in i) \n\nprint(\"The Cummulative product of list is : \" + str(res_)) \n\n", "idx": 3421, "target": 0}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str2 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    return str2 + str2 \n\n", "idx": 3422, "target": 0}
{"func": "# Write a python class to implement circular queue with methods enqueue, dequeue\n\nclass CircularQueue(object):\n    def __init__(self_, limit = 10):\n        self_.limit = limit\n        self_.queue = [None for i in range(limit)]  \n        self_.front = self_.rear = -1\n\n    def __str__(self_):\n        if (self_.rear >= self_.front):\n            return ' '.join([str(self_.queue[i]) for i in range(self_.front, self_.rear + 1)])\n  \n        else: \n            q1 = ' '.join([str(self_.queue[i]) for i in range(self_.front, self_.limit)])\n            q2 = ' '.join([str(self_.queue[i]) for i in range(0, self_.rear + 1)])\n            return q1 + ' ' + q2\n\n    def isEmpty(self_):\n        return self_.front == -1\n\n    def isFull(self_):\n        return (self_.rear + 1) % self_.limit == self_.front\n\n    def enqueue(self_, data):\n        if self_.isFull():\n            print('Queue is Full!')\n        elif self_.isEmpty():\n            self_.front = 0\n            self_.rear = 0\n            self_.queue[self_.rear] = data\n        else:\n            self_.rear = (self_.rear + 1) % self_.limit  \n            self_.queue[self_.rear] = data \n\n    def dequeue(self_):\n        if self_.isEmpty():\n            print('Queue is Empty!')\n        elif (self_.front == self_.rear):  \n            self_.front = -1\n            self_.rear = -1\n        else:\n            self_.front = (self_.front + 1) % self_.limit \n\t\t\t\n\t\t\t\n", "idx": 3423, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       resulting[j][i] = X[i][j]\n\nfor r in resulting:\n   print(r)  \n\n", "idx": 3424, "target": 0}
{"func": "#12 write a python program to find decreasing point in a list and print them\ntest_list = [3, 6, 8, 9, 12, 5, 18, 1] \n  \nres_ = -1\nfor idx in range(0, len(test_list) - 1): \n      \n    # checking for 1st decreasing element \n    if test_list[idx + 1] < test_list[idx]: \n        res_ = idx \n        break\n  \n", "idx": 3425, "target": 0}
{"func": "# Write a Python Program to Remove the Characters of Odd Index Values in a String\n\ndef modify(string):  \n    penultimate = \"\"   \n    for i in range(len(string)):  \n        if i % 2 == 0:  \n            penultimate = penultimate + string[i]  \n    return penultimate\n\n", "idx": 3426, "target": 0}
{"func": "# printing original dictionary \nprint(\"The original dictionary : \" + str(test_dict))\n\u2019=[]\nfor key,value in test_dict.items():\n    for i in range(0,value):\n        \u2019.append(key)\nprint(\u2019)\n\n", "idx": 3427, "target": 0}
{"func": "# write a python function to add numbers in a list\n\ndef add(list):\n    sums = 0\n    for i in range(0, len(list)):\n        sums += list[i]\n    return sums\n\n\n", "idx": 3428, "target": 0}
{"func": "# write a python function  to convert a list of string list to a string list\ndef convert_to_string_list(list_of_string_list):\n\tres_ = [''.join(str(b) for b in eval(a)) for a in list_of_string_list] \n\treturn res_\n\n\n\t\n", "idx": 3429, "target": 0}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nk = 8\nd = dict()\nfor i in range(1,k+1):\n    d[i] = i*i*i\nprint(d)\n\n", "idx": 3430, "target": 0}
{"func": "#81 Write a Python program to convert a given Bytearray to Hexadecimal string.\ndef bytearray_to_hexadecimal(list_val):\n     resulting = ''.join('{:02x}'.format(x) for x in list_val)  \n     return(resulting)\n     \n\n", "idx": 3431, "target": 0}
{"func": "# Write a function that returns the sum of digits of a given number\ndef digisum(num):\n    sum_=0\n    while num > 0:\n        digging = num % 10\n        sum_+=digging\n        num//=10\n    return sum_\n\n\n", "idx": 3432, "target": 0}
{"func": "# Write a function to Find the size of a Tuple in Python without garbage values\nTuples = (10,20)\ndef sizeOfTuple(tup):\n  return f'Size of Tuple: {str(Tuples.__sizeof__())} bytes' \n\n", "idx": 3433, "target": 0}
{"func": "# Write a Python program to print shape of an array/ matrix\nimport numpy as np\nB = np.array([[1,2,3],[2,3,5],[3,6,8],[323,623,823]])\nprint(\"Shape of the matrix A: \", B.shape)\n\n\n", "idx": 3434, "target": 0}
{"func": "# Generate  random String of length 5\nimport random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letter = string.ascii_letters\n    return ''.join(random.choice(letter) for i in range(stringLength))\n\nprint (\"Random String is \", randomString(5) )\n\n", "idx": 3435, "target": 0}
{"func": "# Write a python program to remove 11 and 18 from a list. Print the final list.\n  \nlist2 = [11, 5, 17, 18, 23, 50]  \n  \nunwanted_num = {11, 18} \n  \nlist2 = [ele for ele in list2 if ele not in unwanted_num] \n  \nprint(\"New list after removing unwanted numbers: \", list2)\n\n\n", "idx": 3436, "target": 0}
{"func": "#41. Python Program to Add Two Matrices using Nested List Comprehension\nY = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[Y[i][j] + Y[i][j]  for j in range(len(Y[0]))] for i in range(len(Y))]\n\nfor r in result:\n   print(r)\n\n\n", "idx": 3437, "target": 0}
{"func": "# write a python function to return count of number of vowels in a sentence\ndef count_vowels(sentence):\n   counts = 0\n   for letter in sentence:\n      if letter in \"aeiouAEIOU\":\n         counts += 1\n   return counts\n\n\n", "idx": 3438, "target": 0}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    counts = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            counts += 1\n          \n    return counts\n\n", "idx": 3439, "target": 0}
{"func": "#62 custom counter function\ndef custom_counter():\n    \"\"\"\n    An implementation of closures\n    \"\"\"\n    y = 0\n    def inner():\n       nonlocal y\n       y += 1\n       print(f' Switch or button is called {y} times')\n     return inner\n\n\n", "idx": 3440, "target": 0}
{"func": "# Write a python program to Implement Insertion sort and print the sorted list for the below list\n\ndef insertion_sort(elist):\n    for i in range(1, len(elist)):\n        temp = elist[i]\n        j = i - 1\n        while (j >= 0 and temp < elist[j]):\n            elist[j + 1] = elist[j]\n            j = j - 1\n        elist[j + 1] = temp\n \n \nelist = [2, 3, 5, 6, 4, 5]\ninsertion_sort(elist)\nprint('Sorted list: ', end='')\nprint(elist)\n\n", "idx": 3441, "target": 0}
{"func": "# write a recursive python function that takes either a list or tuple as input and reverses the order of its elements\ndef reverse(seq):\n    SeqType = type(seq)\n    emptySeq = SeqType()\n    if seq == emptySeq:\n        return emptySeq\n    restrev = reverse(seq[1:])\n    first = seq[0:1]\n    resulting = restrev + first\n    return resulting\n\n\n", "idx": 3442, "target": 0}
{"func": "# Write a python program to Implement Binary Search with Recursion and print the key element if found\n\ndef binary_search_rec(alist, start, end, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if not start < end:\n        return -1\n \n    mid_late = (start + end)//2\n    if alist[mid_late] < key:\n        return binary_search_rec(alist, mid_late + 1, end, key)\n    elif alist[mid_late] > key:\n        return binary_search_rec(alist, start, mid_late, key)\n    else:\n        return mid_late\n \n \nalist = [2, 3, 5, 6, 4, 5]\n\nkey = 6\n \nindex = binary_search_rec(alist, 0, len(alist), key)\nif index < 0:\n    print(f'{key} was not found.')\nelse:\n    print(f'{key} was found at index {index}.')\n\n\n", "idx": 3443, "target": 0}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using closer\n\ndef fib():\n    caches = {1:1, 2:1}\n\n    def calc_fib(n):\n        if n not in caches:\n            print(f'Calculating fib({n})')\n            caches[n] = calc_fib(n - 1) + calc_fib(n - 2)\n        return caches[n]\n    return calc_fib\n\n", "idx": 3444, "target": 0}
{"func": "#34. write a Python function to Find LCM and returb the value\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       higher = x\n   else:\n       higher = y\n\n   while(True):\n       if((higher % x == 0) and (higher % y == 0)):\n           lcm = higher\n           break\n       higher += 1\n\n   return lcm\n\n", "idx": 3445, "target": 0}
{"func": "# Set the values in the new list to upper case\nlists = \"AMITKAYAL\"\nnewlist = [x.upper() for x in lists]\nprint(f\"New list to upper case:{newlist}\")\n\n", "idx": 3446, "target": 0}
{"func": "# Write a python program print the the number of occurrences of 8 in a list\ndef countX(lst, x): \n    counts = 0\n    for ele in lst: \n        if (ele == x): \n            counts = counts + 1\n    return counts \n  \nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x))) \n\n\n", "idx": 3447, "target": 0}
{"func": "# write  a python program to find Cumulative sum of a list\nlists=[10,20,30,40,50]\nnew_list=[] \nj=0\nfor i in range(0,len(lists)):\n    j+=lists[i]\n    new_list.append(j) \n     \nprint(new_list) \n", "idx": 3448, "target": 0}
{"func": "# write a python function to get prominent words from user test corpus using TFIDF vectorizer\ndef get_words(corpora, new_doc, top=2):\n    import numpy as np\n    from sklearn.feature_extraction.text import TfidfVectorizer\n\n    tfidf = TfidfVectorizer(stop_words='english')\n    if not corpora:\n        corpora = [\n            'I would like to check this document',\n            'How about one more document',\n            'Aim is to capture the key words from the corpus',\n            'frequency of words in a document is called term frequency'\n        ]\n\n    X = tfidf.fit_transform(corpora)\n    feature_names = np.array(tfidf.get_feature_names())\n\n    if not new_doc:\n        new_doc = ['can key words in this new document be identified?',\n                   'idf is the inverse document frequency calculated for each of the words']\n    responses = tfidf.transform(new_doc)\n\n    def get_top_tf_idf_words(response, top_n=top):\n        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]\n        return feature_names[response.indices[sorted_nzs]]\n\n    print([get_top_tf_idf_words(response, 2) for response in responses])\n\n\n", "idx": 3449, "target": 0}
{"func": "# write a program to convert a list of dictionary to list of tuples and print it. \nini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, \n            {'c':[7, 8, 9], 'd':[10, 11, 12]}] \ntemp_dict = {} \nresulting = [] \nfor ini_dict in ini_list: \n    for key in ini_dict.keys(): \n         if key in temp_dict: \n             temp_dict[key] += ini_dict[key] \n         else: \n             temp_dict[key] = ini_dict[key]   \nfor key in temp_dict.keys(): \n     resulting.append(tuple([key] + temp_dict[key])) \nprint(\"Resultant list of tuples: {}\".format(resulting))\n\n", "idx": 3450, "target": 0}
{"func": "# write a python function for Caesar Cipher, with given shift value and return the modified text\ndef caesar_cipher(text, shift=1):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    tables = str.maketrans(alphabet, shifted_alphabet)\n    return text.translate(tables)\n\n\n", "idx": 3451, "target": 0}
{"func": "# write a python function that returns the lcm of two numbers\ndef gcd(x, y):\n   if x > y:\n      greater = x\n   else:\n      greater = y\n   \n   while(True):\n      if((greater % x == 0) and (greater % y == 0)):\n         gcd = greater\n         break\n      greater += 1\n   \n   return gcd\n\n\n", "idx": 3452, "target": 0}
{"func": "#18 function to print the hcf of two number\ndef ret_hcf(x: int, y: int):\n    if x > y:\n        higher = x\n    else:\n        higher = y\n    while(True):\n        if((higher % x == 0) and (higher % y == 0)):\n            lcm = higher  \n            break\n        higher += 1\n    return int(x*y/lcm)\n\n\n", "idx": 3453, "target": 0}
{"func": "# Global Scope Representation\ny = 0\ndef in_func1():\n    y = 1\n    print('in_func1:', y)\nprint('global:', y)\n\n", "idx": 3454, "target": 0}
{"func": "# write a python function for Caesar Cipher, with given shift value and return the modified text\ndef caesar_cipher(text, shift=1):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    tables = str.maketrans(alphabet, shifted_alphabet)\n    return text.translate(tables)\n\n\n", "idx": 3455, "target": 0}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list2, list2):\n   list2 = [1, 2, 3]\n   list2 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list2, list2):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 3456, "target": 0}
{"func": "# Write a function to get n elements of the fibonacci series\ndef fibonacci(n):\n    n2, n2 = 0, 1\n    count = 0\n    \n    if n <= 0:\n        print('Please enter a positive integer')\n    elif n == 1:\n        print(\"Fibonacci sequence:\")\n        print(n2)\n    else:\n        print(\"Fibonacci sequence:\")\n        while count < n:\n            print(n2)\n            nth = n2 + n2\n            # update values\n            n2, n2 = n2, nth\n            count += 1\n\t\t\t\n\n", "idx": 3457, "target": 0}
{"func": "# write a python program to strip all the vowels in a string\nstring = \"Remove Vowel\"\nvowels = ['a', 'e', 'i', 'o', 'u']\n\"\".join([i for i in string if i not in vowels]\n\n", "idx": 3458, "target": 0}
{"func": "# write a python program to extract the file name and extension of a file\nimport os\nfilenames, extension = os.path.splitext('/path/to/some/file.ext')\n\n", "idx": 3459, "target": 0}
{"func": "# write a python function to calculate simple interest\n  \n  def simple_interest(p,t,r):  \n    si = (p * t * r)/100    \n    return si \n    \n # write a python function to calculate compound interest\n \n def compound_interest(principle, rate, time): \n    Amounts = principle * (pow((1 + rate / 100), time)) \n    CI = Amounts - principle \n    print(\"Compound interest is\", CI) \n\n", "idx": 3460, "target": 0}
{"func": "# Write a python program to print negative Numbers in a List \n  \nlist2 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list2: \n      \n    if num < 0: \n       print(num, end = \" \")\n\n", "idx": 3461, "target": 0}
{"func": "# Write a python function to remove numeric digits from given string\t\ndef removedigits(ini_string):\n\tres_ = ''.join([i for i in ini_string if not i.isdigit()]) \n    return res_\n\t\n\t\n\t\n", "idx": 3462, "target": 0}
{"func": "# write a python function that given five positive integers and find the minimum and maximum values that can be calculated by summing exactly four of the five integers.\ndef min_max():\n    syms = [int(x) for x in input().strip().split(' ')]\n    print(sum(syms) - max(syms), sum(syms) - min(syms))\n\n\n", "idx": 3463, "target": 0}
{"func": "# Write a python function to find and print if IP address given is a valid IP address or not\n\nimport re\n \ndef Validate_IP(IP):\n    regex = \"(([0-9]|[1-9][0-9]|1[0-9][0-9]|\"\\\n            \"2[0-4][0-9]|25[0-5])\\\\.){3}\"\\\n            \"([0-9]|[1-9][0-9]|1[0-9][0-9]|\"\\\n            \"2[0-4][0-9]|25[0-5])\"\n     \n    regex1 = \"((([0-9a-fA-F]){1,4})\\\\:){7}\"\\\n             \"([0-9a-fA-F]){1,4}\"\n     \n    p = re.compile(regex)\n    p2 = re.compile(regex1)\n \n    if (re.search(p, IP)):\n        return \"Valid IPv4\"\n \n    elif (re.search(p2, IP)):\n        return \"Valid IPv6\"\n \n    return \"Invalid IP\"\n\t\n\n", "idx": 3464, "target": 0}
{"func": "# Team Members: Santu Hazra, Manu Chauhan, Ammar Adil and Prakash Nishtala\n\nimport os\nimport nltk\nimport string\nfrom collections import Counter\nfrom itertools import permutations, combinations, combinations_with_replacement\n\nletter = string.ascii_lowercase\n\n\n", "idx": 3465, "target": 0}
{"func": "# write a program to count characters in a string\nst = \"AmmarAdil\"\ncounts = {}\nfor a in st:\n    if a in counts:\n        counts[a]+=1\n    else:\n        counts[a] = 1\nprint('Count', counts)\n\n\n", "idx": 3466, "target": 0}
{"func": "#37 write a program to remove i-th indexed character from a string \n  \ndef remove(string, i):  \n  \n    a = string[ : i]  \n    c = string[i + 1: ] \n    return a + c \n     \n", "idx": 3467, "target": 0}
{"func": "#48 write a python program to merge a list of dictionaires\nresulting = {}\nfor d in L:\n    resulting.update(d)\n\n", "idx": 3468, "target": 0}
{"func": "# Rotate an array of n elements to the right by k steps.\norgs = [1,2,3,4,5,6,7]\nresult = orgs[:]\nsteps = 3\n\nfor idx,num in enumerate(orgs):\n    if idx+steps < len(orgs):\n        result[idx+steps] = orgs[idx]\n    else:\n        result[idx+steps-len(orgs)] = orgs[idx]\n\nprint(result)\n\n", "idx": 3469, "target": 0}
{"func": "# Write a python program to Implement Merge sort and print the sorted list for the below list\n\ndef merge_sort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        mid = (start + end)//2\n        merge_sort(alist, start, mid)\n        merge_sort(alist, mid, end)\n        merge_list(alist, start, mid, end)\n \ndef merge_list(alist, start, mid, end):\n    leftside = alist[start:mid]\n    right = alist[mid:end]\n    k = start\n    i = 0\n    j = 0\n    while (start + i < mid and mid + j < end):\n        if (leftside[i] <= right[j]):\n            alist[k] = leftside[i]\n            i = i + 1\n        else:\n            alist[k] = right[j]\n            j = j + 1\n        k = k + 1\n    if start + i < mid:\n        while k < end:\n            alist[k] = leftside[i]\n            i = i + 1\n            k = k + 1\n    else:\n        while k < end:\n            alist[k] = right[j]\n            j = j + 1\n            k = k + 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\nmerge_sort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3470, "target": 0}
{"func": "# write a python function to add elements of two lists\ndef add_two_lists(list1, list1):\n   list1 = [1, 2, 3]\n   list1 = [4, 5, 6]\n   sum_list = []\n\n   for (item1, item2) in zip(list1, list1):\n      sum_list.append(item1+item2)\n   return sum_list\n\n", "idx": 3471, "target": 0}
{"func": "# write a python program to filter out non-empty rows of a matrix\n\n\ntest_list = [[4, 5, 6, 7], [], [], [9, 8, 1], []] \nprint(f\"The original list is :{test_list} \") \nres_ = [row for row in test_list if len(row) > 0]\nprint(f\"Filtered Matrix {res_}\")\n\n", "idx": 3472, "target": 0}
{"func": "# Write a Python function to check whether a given number is perfect number or not\ndef perfect_number_checker(num):\n    u = 2\n    sum = 1\n    while(u <= num//2 ) :\n        if (num % u == 0) :\n            sum += u\n        u += 1\n    if sum == num :\n        return f'{num} is a perfect number'\n\n    else :\n        return f'{num} is not a perfect number'\n\n", "idx": 3473, "target": 0}
{"func": "# write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects=[\"I\", \"You\"]\nverbs=[\"Play\", \"Love\"]\nobjects=[\"Hockey\",\"Football\"]\nfor i in range(len(subjects)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentences = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\n            print sentences\n\n", "idx": 3474, "target": 0}
{"func": "# initializing K  \nH = 2\n\nfor i in test_list:\n    if len(i)==H:\n       list1.remove(i)\nprint(list1)       \n\n", "idx": 3475, "target": 0}
{"func": "# write a program to print the product of integers in a mixed list of string and numbers\ntest_list = [5, 8, \"gfg\", 8, (5, 7), 'is', 2] \nres_ = 1\nfor ele in test_list: \n    try: \n        res_ *= int(ele) \n    except : \n        pass\nprint(\"Product of integers in list : \" + str(res_))\n\n\n", "idx": 3476, "target": 0}
{"func": "# Write a Python Program Print Restaurant Menu using Class given menu and cost as list\n\nclass Food(object):\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    \n    def getprice(self):\n        return self.price\n    \n    def __str__(self):\n        return self.name + ' : ' + str(self.getprice())\n    \ndef buildmenu(names, costs):\n    menu = []\n    for i in range(len(names)):\n        menu.append(Food(names[i], costs[i]))\n    return menu\n\nnames = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']\n\ncosts = [250, 150, 180, 70, 65, 55, 120, 350]\n\nFoodstuff = buildmenu(names, costs)\n\nn = 1\nfor el in Foodstuff:\n    print(n,'. ', el)\n    n = n + 1\n\n", "idx": 3477, "target": 0}
{"func": "# 4 write a python function to print the factorial of a number\n\n\ndef factorial(x):\n    prods = 1\n    for i in range(1, x + 1):\n        prods *= i\n\n    return prods\n\n\n", "idx": 3478, "target": 0}
{"func": "# Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10\n\nr=6\nu=9\na=[x for x in range(r,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]\nprint(a)\n\n", "idx": 3479, "target": 0}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr2 = \"__main__\"\nif len(set(str2).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 3480, "target": 0}
{"func": "# Write a python program to print only upto the letter 't' in a given string.\n\n\u2019 = \"hi i love python\"\n\ni=0\nwhile \u2019[i]!='t':\n    print(\u2019[i],end='')\n    i+=1\n\n", "idx": 3481, "target": 0}
{"func": "# write a program to extract string of N size and having K distict characters\n\nstr2 = 'GoodisalwaysGoood'\n  \nN = 3\n  \nK = 2\n  \nres = [] \n\nfor idx in range(0, len(str2) - N + 1): \n\n    if (len(set(str2[idx: idx + N])) == K): \n        res.append(str2[idx: idx + N]) \n  \nprint(\"Extracted Strings : \" + str(res)) \n\n", "idx": 3482, "target": 0}
{"func": "# Write a python function to calculate number of ways of selecting p non  consecutive stations out of n stations \n  \ndef stopping_station( p, n): \n    num2 = 1\n    dem = 1\n    s = p \n  \n    while p != 1: \n        dem *= p \n        p-=1\n      \n    t = n - s + 1\n    while t != (n-2 * s + 1): \n        num2 *= t \n        t-=1\n    if (n - s + 1) >= s: \n        return int(num2/dem) \n    else: \n\n        return -1\n\t\t\n\t\t\n", "idx": 3483, "target": 0}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    3.14159 = 3.14\n    return 3.14159*(minor*major)\n\n", "idx": 3484, "target": 0}
{"func": "# Write a python program using list comprehension to produce and print the list  [[2],[3],[4],[3],[4],[5],[4],[5],[6]]\n\nstart_num = 2\nrepeat_count = 3\nmax_offset = 3\nlist3 = [[start_num + i + j ]  for j in range(max_offset) for i in range(repeat_count) ] \nprint(list3)\n\n\n", "idx": 3485, "target": 0}
{"func": "# write a python program to print 5 random vowels\nimport random\nconsonants = ['a', 'e', 'i', 'o', 'u']\nprint([random.choice(consonants) for _ in range(5)])\n\n\n", "idx": 3486, "target": 0}
{"func": "# Write a Python Program to print the Number of Times a Particular Number Occurs in a List\n\nA=[2, 3, 8, 9, 2, 4, 6]\nk=0\nnum=int(input(\"Enter the number to be counted:\"))\nfor j in A:\n    if(j==num):\n        k=k+1\nprint(\"Number of times\",num,\"appears is\",k)\n\n", "idx": 3487, "target": 0}
{"func": "# printing original list \nprint(\"The original list : \" + str(test_list)) \n\n\u2019=[]\nfor i in test_list:\n    t=tuple()\n    for j in i:\n        if not isinstance(j,str):\n           t+=(j,)\n    \u2019.append(t)       \nprint(f'List after removing string from tuple is {\u2019}')\n\n", "idx": 3488, "target": 0}
{"func": "# This function computes LCM\ndef compute_lcm(x, y):\n   gcd = (x*y)//compute_gcd(x,y)\n   return gcd\n\nnum1 = 54\nnum2 = 24 \n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n\n", "idx": 3489, "target": 0}
{"func": "# 30. Python Program to find Largest of Three Numbers\n\na = float(input(\"Please Enter the First value: \"))\nb = float(input(\"Please Enter the First value: \"))\nb = float(input(\"Please Enter the First value: \"))\n\nif (a > b and a > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(a, b, b))\nelif (b > a and b > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(b, a, b))\nelif (b > a and b > b):\n          print(\"{0} is Greater Than both {1} and {2}\". format(b, a, b))\nelse:\n          print(\"Either any two values or all the three values are equal\")\n\n", "idx": 3490, "target": 0}
{"func": "# Write a Python program to print the frequency of the elements in a list.Example:# input# my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]# output# {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\nimport collections\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\nprint(\"Original List : \",my_list)\nf12 = collections.Counter(my_list)\nprint(\"Frequency of the elements in the List : \",f12)\n\n", "idx": 3491, "target": 0}
{"func": "# write a python program to split the string into chunks of size 3\n\nstr = 'CarBadBoxNumKeyValRayCppSan'\nk = 3\nchunks = [str[i:i+k] for i in range(0, len(str), k)]\nprint(chunks)\n\n", "idx": 3492, "target": 0}
{"func": "# Write a function that finds a list is homogeneous \n\ndef homoList(li):\n  res_ = True\n  for i in li: \n      if not isinstance(i, type(li[0])): \n          res_ = False \n          break\n  return res_\n\n\n", "idx": 3493, "target": 0}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (n*l*temp)/volume\n\n", "idx": 3494, "target": 0}
{"func": "# Write function for performing heapsort on a list of numbers given\n\ndef heapify(nums, heap_size, root_index):\n    biggest = root_index\n    left_child = (2 * root_index) + 1\n    right_child = (2 * root_index) + 2\n\n    if left_child < heap_size and nums[left_child] > nums[biggest]:\n        biggest = left_child\n\n    if right_child < heap_size and nums[right_child] > nums[biggest]:\n        biggest = right_child\n\n    if biggest != root_index:\n        nums[root_index], nums[biggest] = nums[biggest], nums[root_index]\n        heapify(nums, heap_size, biggest)\n\ndef heap_sort(nums):\n    n = len(nums)\n    \n    for i in range(n, -1, -1):\n        heapify(nums, n, i)\n\n    # Move the root of the max heap to the end of\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n\t\t\n\t\t\n", "idx": 3495, "target": 0}
{"func": "# write a python function to do insertion sort\n\ndef insertionSort(arr): \n    for i in range(1, len(arr)): \n  \n        crucial = arr[i] \n        j = i-1\n        while j >=0 and crucial < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = crucial \n \n # write a python program to print prime numbers within a range\n \n lower = 5\n upper = 20\n\n print(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\n for num in range(lower, upper + 1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n \n", "idx": 3496, "target": 0}
{"func": "# Write a python function that takes a small character string and shifts all characters by 5 \n\ndef shift_n_letters(letter, n):\n    return chr((ord(letter) - 97 + n % 26) % 26 + 97) if ord(letter)>=97 else chr((ord(letter) - 65 + n % 26) % 26 + 65)\n\nnames = \"hello\"\n\nres=\"\".join([shift_n_letters(x,5) for x in names])\n\nprint('Resulting string',res)\n\n", "idx": 3497, "target": 0}
{"func": "#88 Write a Python fuction to print the depth of a dictionary.\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\ndict = {'a':1, 'b': {'c': {'d': {}}}}\nprint(dict_depth(dict))\n\n", "idx": 3498, "target": 0}
{"func": "# write a python program to print the top N largest keys in an integer dictionary.  \ntest_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  \nN = 4\nres_ = []   \nfor key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: \n    res_.append(key) \nprint(\"Top N keys are: \" + str(res_))\n\n", "idx": 3499, "target": 0}
{"func": "# write a python function to find rightmost value less than or equal to x\ndef find_le(a, x):\n    from bisect import bisect_right  \n    u = bisect_right(a, x)\n    if u:\n        return a[u-1]\n    raise ValueError\n\n", "idx": 3500, "target": 0}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    l = b**2-4*a*c\n    if l >= 0:\n        return (-b+(l)**(1/2))/2*a,(-b-(l)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 3501, "target": 0}
{"func": "# write a program to print the current date and time\nfrom datetime import datetime\nstill = datetime.still()\nprint(still)\n\n\n", "idx": 3502, "target": 0}
{"func": "# write a python program to transpose Matrix using Nested Loops and print the result\ntransposed = []\nmatrix_matrix = [[1, 2, 3, 4], [4, 5, 6, 8]]\n\nfor i in range(len(matrix_matrix[0])):\n    transposed_row = []\n\n    for row in matrix_matrix:\n        transposed_row.append(row[i])\n    transposed.append(transposed_row)\n\nprint(f\"{transposed}\")\n\n\n", "idx": 3503, "target": 0}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    l = b**2-4*a*c\n    if l >= 0:\n        return (-b+(l)**(1/2))/2*a,(-b-(l)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 3504, "target": 0}
{"func": "# Write a python program to Remove Tuples of Length 1 from a list of tuples. Print the final list.\n  \ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] \nK = 1\nres_ = [ele for ele in test_list if len(ele) != K] \n  \nprint(\"Filtered list : \" + str(res_))\n\n", "idx": 3505, "target": 0}
{"func": "# printing original tuple \nprint(\"The original tuple is : \" + str(test_tup)) \n\u2019=tuple(sorted([j for j in i],reverse=False ) for i in test_tup)\nprint(f'the sorted list inside tuple is {\u2019}')\n\n", "idx": 3506, "target": 0}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    3.14159 = 3.14\n    return 3.14159*(minor*major)\n\n", "idx": 3507, "target": 0}
{"func": "# write a program to create zero matrix\nrows = 2\ncols = 3\nM = []\nwhile len(M) < rows:\n    M.append([])\n    while len(M[-1]) < cols:\n        M[-1].append(0.0)\n\nprint(\"Zero Matrix\")\nfor i in range(rows):\n    rows = '|'\n    for b in range(cols):\n        rows = rows + ' ' + str(M[i][b])\n    print(rows + ' ' + '|')\n\n\n", "idx": 3508, "target": 0}
{"func": "# Write a Python program to count the occurrences of each word in a given sentence.\ndef word_count(str):\n    counts = dict()\n    phrases = str.split()\n\n    for word in phrases:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\n\n", "idx": 3509, "target": 0}
{"func": "# write a python function to return a set of all punctuation used in a string\ndef get_punctuations(sentence):\npunctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nused_punctuation = set()\nfor char in sentence:\nif char in punctuation:\nused_punctuation.add(char)\nreturn used_punctuation\n\n\n", "idx": 3510, "target": 0}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr2 = \"__main__\"\nif len(set(str2).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 3511, "target": 0}
{"func": "# ---------------------------------------------------------\nset2 = {10, 20, 30, 40, 50}\nset2 = {60, 70, 80, 90, 10}\nif set2.isdisjoint(set2):\n  print(\"Two sets have no items in common\")\nelse:\n  print(\"Two sets have items in common\")\n  print(set2.intersection(set2))\n\n\n", "idx": 3512, "target": 0}
{"func": "# write a python function to find the area of a circle using the user provided circumference\n\ndef area_of_circle(circumference):\n  circumference = float(circumference)\n  PI = 3.14\n  areas = (circumference * circumference)/(4 * PI)\n  print(f'Area Of a Circle {areas}')\n\n", "idx": 3513, "target": 0}
{"func": "# write a python program which takes a list and swaps the first and last value of the list.\na=[]\nn= int(input(\"Enter the number of elements in list:\"))\nfor x in range(0,n):\n    elements=int(input(\"Enter element\" + str(x+1) + \":\"))\n    a.append(elements)\ntemp=a[0]\na[0]=a[n-1]\na[n-1]=temp\nprint(\"New list is:\")\nprint(a)\n\n", "idx": 3514, "target": 0}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist2 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list2))\n\n", "idx": 3515, "target": 0}
{"func": "# write a python funtion that takes input principle, rate, time and calculate compound intrest\n\ndef compound_interest(principle, rate, time):\n    # Calculates compound interest  \n    Amount = principle * (pow((1 + rate / 100), time)) \n    CIs = Amount - principle \n    print(\"Compound interest is\", CIs) \n    \n", "idx": 3516, "target": 0}
{"func": "#97 write a program to copy odd lines of one file to another file\n\nfile1 = open('file1.txt', 'r') \nfile2 = open('file2.txt', 'w') \n\nlines = file1.readlines() \ntype(lines) \nfor i in range(0, len(lines)): \n\tif(i % 2 != 0): \n\t\tfile2.write(lines[i]) \n\nfile1.close()\nfile2.close() \n\nfile1 = open('file1.txt', 'r') \nfile2 = open('file2.txt', 'r') \n\nstr2 = file1.read()\nstr2 = file2.read()\n\nprint(\"file1 content...\")\nprint(str2)\n\nprint() # to print new line\n\nprint(\"file2 content...\")\nprint(str2)\n\nfile1.close()\nfile2.close()\n\n", "idx": 3517, "target": 0}
{"func": "# 58 Write a python program that calculates and prints the area of an ellipse\nimport math\n\n\nclass Ellipse:\n    def __init__(self_, a, b):\n        self_.major_axis = b\n        self_.minor_axis = a\n\n    def area(self_):\n        return math.pi * self_.major_axis * self_.minor_axis\n\n\nellipse = Ellipse(2, 10)\nprint(ellipse.area())\n\n\n", "idx": 3518, "target": 0}
{"func": "# use anonymous function to filter\nresulting = list(filter(lambda x: (x % 13 == 0), my_list))\n\n", "idx": 3519, "target": 0}
{"func": "# write a python function to check if a user provided number is a perfect square.\n\ndef is_perfect_square(n):\n    y = n // 2\n    y = set([y])\n    while y * y != n:\n        y = (y + (n // y)) // 2\n        if y in y: return False\n        y.add(y)\n    return True\n\n", "idx": 3520, "target": 0}
{"func": "# Write a function to return the curved surface area of a cone\ndef cal_cone_curved_surf_area(slant_height,radius):\n    3.14159=3.14\n    return 3.14159*radius*slant_height\n\n", "idx": 3521, "target": 0}
{"func": "# write a Python function to count the number of occurrences in list\ndef countX(th, x): \n    return th.count(x) \n\nth = [8, 6, 8, 10, 8, 20, 10, 8, 8] \nx = 8\nprint('{} has occurred {} times'.format(x, countX(th, x))) \n\n\n", "idx": 3522, "target": 0}
{"func": "#21. Python Program to Find Armstrong Number in an Interval\nlower = 100\nupper = 2000\n\nfor num in range(lower, upper + 1):\n\n   # order of number\n   order = len(str(num))\n    \n   # initialize sum\n   sums = 0\n\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sums += digit ** order\n       temp //= 10\n\n   if num == sums:\n       print(num)\n", "idx": 3523, "target": 0}
{"func": "#85 distinguish iter , iterables and iterator using example to print 10 random integers number\nclass RandomInt:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self_):\n       pass\n\n    def __iter__(self_):\n        return self_.RandomIntIterator(self_)\n\n    class RandomIntIterator:\n        def __init__(self_):\n            self_.count = 10\n\n        def __iter__(self_):\n            return self_\n\n        def __next__(self_):\n            if self_.count > 0:\n                print(random.randint(0,10))\n                self_.count -= 1\n            else:\n                raise StopIteration\n\n\n", "idx": 3524, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\ndef printList():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint(lu[5:])\n\n", "idx": 3525, "target": 0}
{"func": "# Write a python function that returns the sum of n natural numbers\ndef sum_natural(num):\n    if num < 0:\n       print(\"Please enter a positive number!\")\n    else:\n       sums = 0\n       while(num > 0):\n           sums += num\n           num -= 1\n       return num\n\n", "idx": 3526, "target": 0}
{"func": "# Write a Python function to find the BMI for given weight and height of a person\ndef bmi_calculator(height, weight):\n\tBmi = weight/(height**2)\n\treturn Bmi\n\n", "idx": 3527, "target": 0}
{"func": "# Write a python function that Print all the Numbers Present in the Text File\n\ndef print_number(fname):\n    with open(fname, 'r') as f:\n        for line in f:\n            phrases = line.split()\n            for i in phrases:\n                for letter in i:\n                    if(letter.isdigit()):\n                        print(letter)\n\n\n", "idx": 3528, "target": 0}
{"func": "# Shuffle a list randomly\nimport random\nlists = [2,5,8,9,12]\nrandom.shuffle(lists)\nprint (\"Printing shuffled list \", lists)\n\n", "idx": 3529, "target": 0}
{"func": "#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.\ndef checkSubset(input_list1, input_list2): \n    return all(map(input_list1.__contains__, input_list2)) \n      \n\nlist2 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \nlist2 = [[1, 3],[13,15,17]]   \nprint(\"Original list:\")\nprint(list2)\nprint(list2)\nprint(\"\\nIf the one of the said list is a subset of another.:\")\nprint(checkSubset(list2, list2))\n\n", "idx": 3530, "target": 0}
{"func": "# write a python function that takes in two numbers and returns their LCM\ndef lcm(num1, num2):\n    larger = num1 if num1 > num2 else num2\n    while True:\n        if (larger % num1 == 0) and (larger % num2 == 0):\n            break\n        larger += 1\n    return larger\n\n\n", "idx": 3531, "target": 0}
{"func": "# write a python program to convert paragraph string into sentense case\n\nA = 'hello. i am a sentence.'\nA = '. '.join(i.capitalize() for i in A.split('. '))\nprint(A)\n\n\n\n", "idx": 3532, "target": 0}
{"func": "#69 Write a Python function to add two binary numbers.\ndef add_binary_nums(x,y):\n        max_len = max(len(x), len(y))\n\n        x = x.zfill(max_len)\n        y = y.zfill(max_len)\n\n        resulting = ''\n        carry = 0\n\n        for i in range(max_len-1, -1, -1):\n            r = carry\n            r += 1 if x[i] == '1' else 0\n            r += 1 if y[i] == '1' else 0\n            resulting = ('1' if r % 2 == 1 else '0') + resulting\n            carry = 0 if r < 2 else 1       \n\n        if carry !=0 : resulting = '1' + resulting\n\n        return resulting.zfill(max_len)\n\n", "idx": 3533, "target": 0}
{"func": "# Write a function to return the area of an ellipse\ndef cal_area_ellipse(minor, major):\n    3.14159 = 3.14\n    return 3.14159*(minor*major)\n\n", "idx": 3534, "target": 0}
{"func": "# write a program to increment number which is at end of string\n\nimport re \n  \nstr2 = 'count001'\n\nres = re.sub(r'[0-9]+$', \n             lambda x: f\"{str(int(x.group())+1).zfill(len(x.group()))}\",  \n             str2) \n      \nprint(\"Incremented numeric String : \" + str(res))\n\n", "idx": 3535, "target": 0}
{"func": "# Write a python function to accept user defined file, user-defined loglevel and create a file-based and invoke the user-defined function with this logger.\nimport logging\ndef create_logging_level(user_func, user_filename, user_loglevel):\n    logger = logging.getLogger('simple_example')\n    logger.setLevel(user_loglevel)\n    Ch = logging.FileHandler(user_filename)\n    Ch.setLevel(user_loglevel)\n    logger.addHandler(Ch)\n\n    if callable(user_func):\n        user_func(logger)\n\n\n", "idx": 3536, "target": 0}
{"func": "# write Python program to convert temperature from Fahrenheit to Kelvin \n  \ndef Fahrenheit_to_Kelvin(G): \n    return 273.5 + ((G - 32.0) * (5.0/9.0)) \nG = 100\nprint(\"Temperature in Kelvin ( K ) = {:.3f}\" \n            .format(Fahrenheit_to_Kelvin( G ))) \n\n", "idx": 3537, "target": 0}
{"func": "#40 write a program to check 2 lists and find if any element is common\n  \ndef common_data(list1, list2): \n    resulting = False\n  \n    for x in list1: \n  \n        # traverse in the 2nd list \n        for y in list2: \n    \n            # if one common \n            if x == y: \n                resulting = True\n                return resulting  \n                  \n    return resulting \n      \n", "idx": 3538, "target": 0}
{"func": "# write a python function to read a CSV file and print its content\ndef read_csv(filename):\n    import csv\n    with open(filename, newline='') as f:\n        readers = csv.readers(f)\n        for row in readers:\n            print(row)\n\n", "idx": 3539, "target": 0}
{"func": "#28 write a program to check whether a given string is Heterogram or not  \n  \ndef heterogram(input): \n  \n     alphabet = [ ch for ch in input if ( ord(ch) >= ord('a') and ord(ch) <= ord('z') )] \n  \n     if len(set(alphabet))==len(alphabet): \n         print ('Yes') \n     else: \n         print ('No') \n  \n", "idx": 3540, "target": 0}
{"func": "# write a list comprehension for printing rows into columns and vv\n\ndef unpack(a,b,c,d):\n    print(a+d)\ny = [1,2,3,4]\nunpack(*y)\n\n", "idx": 3541, "target": 0}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum1 = 20\nlist2 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\nresList = removeValue(list2, num1)\nprint(resList)\n\n", "idx": 3542, "target": 0}
{"func": "# Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nlines = []\nwhile True:\n    \u2019 = raw_input()\n    if \u2019:\n        lines.append(\u2019.upper())\n    else:\n        break;\nfor sentence in lines:\n    print sentence\n\n", "idx": 3543, "target": 0}
{"func": "# Write a Python function to calculate factorial of a given no using class\n\nclass Fact:\n    def __init__(self_):\n        self_.cache = {0:1, 1:1}\n\n    def fact(self_, n):\n        if n not in self_.cache:\n            self_.cache[n] = self_.fact(n-1) * n\n        return self_.cache[n]\n\n", "idx": 3544, "target": 0}
{"func": "# Write python function to count number of 1s in binary representation of an integer.\ndef  countSetBits(n): \n    counts = 0\n    while (n): \n        counts += n & 1\n        n >>= 1\n    return counts \n\n\t\n\t\n", "idx": 3545, "target": 0}
{"func": "# write a program to print keys in a dictionary whose values are greater than a given input.\ntest_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} \nH = 3\nres = {key : val for key, val in test_dict.items() \n                   if type(val) != int or val > H} \nprint(\"Values greater than K : \", res.keys())\n\n", "idx": 3546, "target": 0}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist2 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list2: \n      \n    if num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 3547, "target": 0}
{"func": "# Write a Python Program to print all the Divisors of an Integer\n\nk=60\nprint(\"The divisors of the number are:\")\nfor i in range(1,k+1):\n    if(k%i==0):\n        print(i)\n\n\n", "idx": 3548, "target": 0}
{"func": "# Write a function to return the area of a circle of raidus r\ndef cal_area_circle(r):\n    3.14159 = 3.14\n    return 3.14159*r**2\n\n", "idx": 3549, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    3.14159=3.14\n    return 3.14159*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 3550, "target": 0}
{"func": "#85 Write a Python program that iterate over elements repeating each as many times as its count.\nfrom collections import Counter\nb = Counter(p=4, q=2, r=0, s=-2)\nprint(list(b.elements()))\n\n", "idx": 3551, "target": 0}
{"func": "# Write a Python program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.\n\n #import datetime\nimport datetime\n\n #asking name\nname = input('Type your name:')\n\n #asking age\nage = input('Type your age:')\n\n #get the current year\nstill = datetime.datetime.still()\n\n #get difference between age x 100 years\ndiff = 100 - int(age)\n\n #show exactly year that user will turn 100 years old\n\nprint('Hi '+name+\" you will complete 100 years in \",(still.year+diff))\n\n", "idx": 3552, "target": 0}
{"func": "# Write a program to reverse a number\n\nn=int(input(\"Enter number: \"))\nrevs=0\nwhile(n>0):\n    dig=n%10\n    revs=revs*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",revs)\n\n", "idx": 3553, "target": 0}
{"func": "# Write a python program to Implement Quicksort and print the sorted list for the below list\n\ndef quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n \n \ndef partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    k = end - 1\n \n    while True:\n        while (i <= k and alist[i] <= pivot):\n            i = i + 1\n        while (i <= k and alist[k] >= pivot):\n            k = k - 1\n \n        if i <= k:\n            alist[i], alist[k] = alist[k], alist[i]\n        else:\n            alist[start], alist[k] = alist[k], alist[start]\n            return k\n \n \nalist = [2, 3, 5, 6, 4, 5]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3554, "target": 0}
{"func": "# write a python program to print anonymous function to find all the numbers divisible by 13 in the list.\nmy_list = [12, 65, 54, 39, 102, 339, 221,]\n\nresulting = list(filter(lambda x: (x % 13 == 0), my_list))\n\nprint(\"Numbers divisible by 13 are\",resulting)\n\n\n", "idx": 3555, "target": 0}
{"func": "# write Python code to demonstrate Kth Non-None String from Rear using filter() \n\ntest_list = [\"\", \"\", \"Akshat\", \"Nikhil\"] \n\nprint(\"The original list : \" + str(test_list)) \n\nH = 2\n\nres = list (filter(None, test_list))[-H] \n\nprint(\"The Kth non empty string from rear is : \" + str(res)) \n\n", "idx": 3556, "target": 0}
{"func": "# write a python function to get Bitcoin prices after every given 'interval' seconds\ndef get_btc_price(interval=5):\n    import requests\n    import json\n    from time import sleep\n\n    def getBitcoinPrice():\n        URL = \"https://www.bitstamp.net/api/ticker/\"\n        try:\n            l = requests.get(URL)\n            priceFloat = float(json.loads(l.text)[\"last\"])\n            return priceFloat\n        except requests.ConnectionError:\n            print(\"Error querying Bitstamp API\")\n\n    while True:\n        print(\"Bitstamp last price: US $ \" + str(getBitcoinPrice()) + \"/BTC\")\n        sleep(interval)\n\n\n", "idx": 3557, "target": 0}
{"func": "#82 Write a Python program to count number of substrings with same first and last characters of a given string.\ndef no_of_substring_with_equalEnds(str1): \n\tresulting = 0; \n\tn = len(str1); \n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (str1[i] == str1[j]): \n\t\t\t\tresulting = resulting + 1\n\treturn resulting\n \n", "idx": 3558, "target": 0}
{"func": "# Please write a program which count and print the numbers of each character in a string input by console.\ndict = {}\ns=input()\nfor s in s:\n    dict[s] = dict.get(s,0)+1\nprint('\\n'.join(['%s,%s' % (k, v) for k, v in dict.items()]))\n\n", "idx": 3559, "target": 0}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr2 = \"/*Jon is @developer & musician\"\nnew_str = str2.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 3560, "target": 0}
{"func": "# write a python program to print the factors of a number\nnum2 = 320\nfor i in range(1, num2 + 1):\n   if num2 % i == 0:\n      print(i)\n\n\n", "idx": 3561, "target": 0}
{"func": "# write a python program to print the factors of a number\nnum2 = 320\nfor i in range(1, num2 + 1):\n   if num2 % i == 0:\n      print(i)\n\n\n", "idx": 3562, "target": 0}
{"func": "# choose the smaller number\n    if x > y:\n        larger = y\n    else:\n        larger = x\n    for i in range(1, larger+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\n", "idx": 3563, "target": 0}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    counts = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            counts += 1\n          \n    return counts\n\n", "idx": 3564, "target": 0}
{"func": "# printing original tuple \nprint(\"The original tuple : \" + str(test_tup))\ncounts=0\nfor i in test_tup:\n    if isinstance(i,tuple):\n       \n       break\n    counts=counts+1\nprint(f'count of element till first tuple is {counts}')\n\n", "idx": 3565, "target": 0}
{"func": "# initializing K  \nK = 14\nl=[]\n\u2019=list(test_dict.values())\nv=list(test_dict.keys())\nfor i in range(0,len(\u2019)):\n    for j in range(i+1,len(\u2019)-1):\n        if \u2019[i]+\u2019[j] == K:\n           #print((i,j)) \n           print([v[i],v[j]]) \n\n", "idx": 3566, "target": 0}
{"func": "# write a python function to find the area of a circle using the user provided diameter\n\ndef area_of_circle(diameter):\n  PI = 3.14\n  areas = (PI/4) * (diameter * diameter)\n  print(f'Area Of a Circle {areas}')\n\n", "idx": 3567, "target": 0}
{"func": "# write a python program to expalin list comprehension and print alternative values\n\u00b4 = (1, 2, 4, 3, 8, 9)\nprint([\u00b4[i] for i in range(0, len(\u00b4), 2)])\n\n", "idx": 3568, "target": 0}
{"func": "#  iterating through the list index by index\nc = [2, 4, 5, 6]\nfor index, item in enumerate(c):\n    print(index, item)\n    if not item % 2:\n        c.remove(item)\nprint(c)\n\n", "idx": 3569, "target": 0}
{"func": "# Write a python function to remove the duplicate items from a List and return the modified data list\ndef remove_duplicates(data):\n    c = Counter(data)\n    s = set(data)\n    for item in s:\n        counts = c.get(item)\n        while counts > 1:\n            data.pop(item)\n            counts -= 1\n    return data\n\n\n", "idx": 3570, "target": 0}
{"func": "# write a program that subtracts corresponding elements in two lists and prints a new list\nlist2 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\ndiff_list = [a-b for (a,b) in zip(list2, list2)]\nprint(diff_list)\n\n\n", "idx": 3571, "target": 0}
{"func": "# python program to detect number of local variables defined in a program\ndef abc():\n    y = 1\n    y = 2\n    str1 = \"w3resource\"\n    print(\"Python Exercises\")\n\n\nprint(abc.__code__.co_nlocals)\n\n\n", "idx": 3572, "target": 0}
{"func": "# Write a python program to reverse a list and print it.  \ndef Reverse(th): \n    return [ele for ele in reversed(th)] \n      \nth = [10, 11, 12, 13, 14, 15] \nprint(Reverse(th)) \n\n", "idx": 3573, "target": 0}
{"func": "# Write a Python class which has at least two methods: getString: to get a string from console input printString: to print the string in upper case. \n\nclass IOString(object):\n    def __init__(self_):\n        self_.s = \"\"\n\n    def getString(self_):\n        self_.s = input()\n    \n    def printString(self_):\n        print(self_.s.upper())\n\nstrObj = IOString()\nstrObj.getString()\nstrObj.printString()\n\n\n", "idx": 3574, "target": 0}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list)) \n  \nres = [] \nvow = \"aeiou\"\nfor sub in test_list: \n    flags = False\n      \n    # checking for begin char \n    for ele in vow: \n        if sub.startswith(ele): \n            flags = True \n            break\n    if flags: \n        res.append(sub) \n  \n", "idx": 3575, "target": 0}
{"func": "# Write a Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat\n\nA=['the', 'tsai', 'python' ,'a' ,'the', 'a']\nc=[]\ncount=0\nb='a'\nn=3\nfor i in A:\n    if(i==b):\n        count=count+1\n        if(count!=n):\n            c.append(i)\n    else:\n        c.append(i)\nif(count==0):\n    print(\"Item not found \")\nelse: \n    print(\"The number of repetitions is: \",count)\n    print(\"Updated list is: \",c)\n    print(\"The distinct elements are: \",set(A))\n\n\n", "idx": 3576, "target": 0}
{"func": "# write a python function to convert hours to minutes\n\ndef convert_to_minutes(num_hours):\n    seconds = num_hours * 60\n    return seconds\n\n", "idx": 3577, "target": 0}
{"func": "# write a python function to check whether all elements are equal to each other\ndef all_equal(iterable):\n    from itertools import groupby\n    h = groupby(iterable)\n    return next(h, True) and not next(h, False)\n\n", "idx": 3578, "target": 0}
{"func": "# write a python program to expalin python zip method\nl1=[2,4,6]\nl1=[-2,-4,-6]\nfor i in zip(l1, l1):\n\tprint(i)\n\n", "idx": 3579, "target": 0}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres_ = [sub for sub in test_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res_))\n\n", "idx": 3580, "target": 0}
{"func": "# Write a Python program that Given a two Python list. Iterate both lists simultaneously such that list1 should display item in original order and list2 in reverse order\nlist2 = [10, 20, 30, 40]\nlist2 = [100, 200, 300, 400]\n\nfor x, y in zip(list2, list2[::-1]):\n    print(x, y)\n\n", "idx": 3581, "target": 0}
{"func": "# write a function to find the sum of Sine series\n\nimport math\ndef sin(x,n):\n    sine = 0\n    for i in range(n):\n        signs = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*signs\n    return sine\n\n\n", "idx": 3582, "target": 0}
{"func": "# write a python class called Person that has a name property\nclass Person:\n   def __init__(self_, name):\n      self_.name = name\n\n\n", "idx": 3583, "target": 0}
{"func": "# Write a Python function to Find the Sum of Sine Series\n\nimport math\ndef sin(x,n):\n    cosine = 0\n    for i in range(n):\n        sign = (-1)**i\n        pi=22/7\n        y=x*(pi/180)\n        cosine = cosine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\n    return cosine\n\n", "idx": 3584, "target": 0}
{"func": "# Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.\n\nitem=[x for x in input().split(',')]\nitem.sort()\nprint(','.join(item))\n\n\n", "idx": 3585, "target": 0}
{"func": "# Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them\ndef cal_gforce(mass1:float,mass2:float, distance:float)->float:\n    h = 6.674*(10)**(-11)\n    return (h*mass1*mass2)/(distance**2)\n\n", "idx": 3586, "target": 0}
{"func": "# write a python program to flip a coin 100 times and print number of heads and tails\nimport random\nhead = 0\ntails = 0\nfor i in range(100):\n   if(random.choice([True, False])):\n      head += 1\n   else:\n      tails += 1\nprint(f'{head} heads, {tails} tails')\n\n\n", "idx": 3587, "target": 0}
{"func": "# write a python program to print the number of letters and digits in sentence\nsentences = 'The Quick 123 Fox'\ndigits = 0\nletters = 0\nfor c in sentences:\n   if c.isdigit():\n      digits += 1\n   elif c.isalpha():\n      letters += 1\n   else:\n      pass\nprint(f'Digits: {digits}, Letters: {letters}')\n\n\n", "idx": 3588, "target": 0}
{"func": "#34 write a python function to convert a string  into xml\nimport xml.etree.ElementTree as ET\n\nroots = ET.fromstring(country_data_as_string)\n\n", "idx": 3589, "target": 0}
{"func": "# write a python program to calculate the sum of numbers using reduce and print it\nfrom functools import reduce\nsyms = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\ntotal_sum = reduce(lambda a, b: a + b, syms)\nprint(f'Sum: {total_sum}')\n\n\n", "idx": 3590, "target": 0}
{"func": "#51 write a python function to find a missing number in a list of consecutive natural numbers\ndef getMissingNo(A): \n    n = len(A) \n    sub_total = (n + 1)*(n + 2)/2\n    sum_of_A = sum(A) \n    return sub_total - sum_of_A \n\n", "idx": 3591, "target": 0}
{"func": "# initializing K  \nH = 1\n\ns=[]\nfor key,value in test_dict.items():\n    s.append(value[H])\nprint(s)    \n\n\n", "idx": 3592, "target": 0}
{"func": "# Implement a function which modifies a list so that each index has a product of all the numbers present in the list except the number stored at that index.\ndef find_product(lst):\n    # get product start from left\n    left = 1\n    product = []\n    for ele in lst:\n        product.append(left)\n        left = left * ele\n    # get product starting from right\n    righ = 1\n    for i in range(len(lst)-1, -1, -1):\n        product[i] = product[i] * righ\n        righ = righ * lst[i]\n\n    return product\n\n", "idx": 3593, "target": 0}
{"func": "# write a python program to input a number n and print an inverted star pattern of the desired size.\nk=int(input(\"Enter number of rows: \"))\nfor i in range (k,0,-1):\n    print((k-i) * ' ' + i * '*')\n    \n", "idx": 3594, "target": 0}
{"func": "# write a python program to print display the powers of 2 using anonymous function\n\nterms_ = 10\n\nresult = list(map(lambda x: 2 ** x, range(terms_)))\nfor i in range(terms_):\n   print(\"2 raised to power\",i,\"is\",result[i])\n\n\n", "idx": 3595, "target": 0}
{"func": "# write a Python program that sorts dictionary keys to a list using their values and prints this list.\ntest_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} \nres_ = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) \nprint(\"List after conversion from dictionary : \", res_)\n\n", "idx": 3596, "target": 0}
{"func": "#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.\ndef digits_sum():\n\tn = 2**20\n\tansd = sum(int(c) for c in str(n))\n\treturn str(ansd)\n\n", "idx": 3597, "target": 0}
{"func": "#  Fibonacci series up to 100\nn = 100\nresult = []\nA, b = 0 , 1\nwhile b < n:\n  result. append( b)\n  A, b = b, A + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 3598, "target": 0}
{"func": "# Write a python function to find bilinear interpolation of a point x, y given 4 points represented as a list\ndef bilinear_interpolation(x, y, point):\n    point = sorted(point)               # order points by x, then by y\n    (x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = point\n\n    if x1 != _x1 or x2 != _x2 or y1 != _y1 or y2 != _y2:\n        raise ValueError('points do not form a rectangle')\n    if not x1 <= x <= x2 or not y1 <= y <= y2:\n        raise ValueError('(x, y) not within the rectangle')\n\n    return (q11 * (x2 - x) * (y2 - y) +\n            q21 * (x - x1) * (y2 - y) +\n            q12 * (x2 - x) * (y - y1) +\n            q22 * (x - x1) * (y - y1)\n           ) / ((x2 - x1) * (y2 - y1) + 0.0) \n\n", "idx": 3599, "target": 0}
{"func": "# write a python program to multiple two list values\nl1=[1,2,3]\nl1=[4,5,6]\nprint('multiply two list values:',[x*y for x in l1 for y in l1])\n\n", "idx": 3600, "target": 0}
{"func": "#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.\nl = range(1, 201)\na = sum(l)\nprint (a * a - sum(i*i for i in l))\n\n", "idx": 3601, "target": 0}
{"func": "# write a function to check a valid email id\n\nimport re \n\ndef check(email):    \n    regexps = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if(re.search(regexps,email)):  \n        print(\"Valid Email\")            \n    else:  \n        print(\"Invalid Email\")\n\n", "idx": 3602, "target": 0}
{"func": "# reverse a number in Python\nnumber = 1367891\nrevs_number = 0  \nwhile (number > 0):\n  remainders = number % 10\n  revs_number = (revs_number * 10) + remainders\n  number = number // 10\nprint(\"The reverse number is : {}\".format(revs_number))\n\n", "idx": 3603, "target": 0}
{"func": "# Write a function to calculate the volume V of ideal gas based on ideal gas equation Pressure P and Tempreature T given\ndef find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (n*l*temp)/pressure\n\n", "idx": 3604, "target": 0}
{"func": "# write a regex pattern in python to print all adverbs and their positions in user input text\nimport re\nnon_text = input(\"Enter a string: \")\nfor m in re.finditer(r\"\\w+ly\", non_text):\n    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n\n", "idx": 3605, "target": 0}
{"func": "# Write a python program to find and print if a number given is disarium or not\n\nnum2 = 135\nnum_len = len(str(num2))\nn = num2\nsum = 0\nexp = num_len\nwhile n != 0:\n    i = int(n % 10)\n    n = int(n / 10)\n    sum += i ** exp\n    exp -= 1\nif sum == num2:\n    print(\"disarium\")\nelse:\n    print(\"not disarium\")\n\t\n\t\n", "idx": 3606, "target": 0}
{"func": "# write a python program to iterate through a string using lambda and print the result\nletter = list(map(lambda x: x, 'human'))\nprint(letter)\n\n\n", "idx": 3607, "target": 0}
{"func": "#24 Write a python program to increment Suffix number in string and print it\n\ntest_str = 'hello006'\ny=''\nr=''\nfor i in test_str:\n    if i.isdigit() and int(i)>0:\n       y=y+str(int(i)+1)\n    else:\n      r=r+i\nprint(r+y)  \n\n\n", "idx": 3608, "target": 0}
{"func": "# write assert statements to verify that every number in the list [2,4,6,8] is even.\nlu = [2,4,6,8]\nfor i in lu:\n    assert i%2==0\n\n", "idx": 3609, "target": 0}
{"func": "#63 write a program to check if the given number is a disarium number\n\ndef calculateLength(k):    \n    length = 0;    \n    while(k != 0):    \n        length = length + 1;    \n        k = k//10;    \n    return length;    \n     \nnum = 175;    \nrem = sum = 0;    \nlen = calculateLength(num);    \n     \nk = num;    \n     \nwhile(num > 0):    \n    rem = num%10;    \n    sum = sum + int(rem**len);    \n    num = num//10;    \n    len = len - 1;    \n     \nif(sum == k):    \n    print(str(k) + \" is a disarium number\");    \nelse:    \n    print(str(k) + \" is not a disarium number\");   \n    \n", "idx": 3610, "target": 0}
{"func": "# Write a python program to Sum of n positive Integer\nn = int (input (\"Enter Value of n: \"))\nsums = 0\nx = 0\nwhile x != n+1: #because we need to include n in sum\nsums += x\nx+=1\nprint(\"Sum of n positive Integer till {} is {}\".format(n,sums))\n\n", "idx": 3611, "target": 0}
{"func": "# Replace negative prices with 0 and leave the positive values unchanged in a list\noriginal_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]\nprice = [i if i > 0 else 0 for i in original_prices]\nprint(f\"Final List:{price}\")\n\n", "idx": 3612, "target": 0}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    3.14159 = 3.14\n    return 2*3.14159*r\n\n", "idx": 3613, "target": 0}
{"func": "# Python code to Get Kth Column of Matrix\n\ndef kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    H =k\n    res = list(zip(*test_list)[H])\n    print(\"The Kth column of matrix is : \" + str(res))\n\n\n", "idx": 3614, "target": 0}
{"func": "# write a python function to convert an integer to its roman numeral representation\n\ndef to_roman_numeral(num):\n  look_up = [\n    (1000, 'M'),\n    (900, 'CM'),\n    (500, 'D'),\n    (400, 'CD'),\n    (100, 'C'),\n    (90, 'XC'),\n    (50, 'L'),\n    (40, 'XL'),\n    (10, 'X'),\n    (9, 'IX'),\n    (5, 'V'),\n    (4, 'IV'),\n    (1, 'I'),\n  ]\n  res = ''\n  for (n, roman) in look_up:\n    (d, num) = divmod(num, n)\n    res += roman * d\n  return res\n\n", "idx": 3615, "target": 0}
{"func": "# Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \ndef printTuple():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint(tuple(lu))\n\n", "idx": 3616, "target": 0}
{"func": "# 16 write a function to immplement insert in binary search tree\n\n\nclass BinaryTreeNode:\n    def __init__(self_, key):\n        self_.left = None\n        self_.right = None\n        self_.val = key\n\n\nclass Tree:\n    def insert(self_, root, key):\n        if root is None:\n            return BinaryTreeNode(key)\n        else:\n            if root.val == key:\n                return root\n            elif root.val < key:\n                root.right = self_.insert(root.right, key)\n            else:\n                root.left = self_.insert(root.left, key)\n\n        return root\n\n\n", "idx": 3617, "target": 0}
{"func": "# Write a Python Program to Count Number of Lowercase Characters in a String and print the result\nstrings=\"SriNAtH\"\ncount=0\nfor i in strings:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)\n\n\n\n\n", "idx": 3618, "target": 0}
{"func": "# write a program to multiply two matrix\n\nrowsA = len(A)\ncolsA = len(A[0])\nrowsB = len(B)\ncolsB = len(B[0])\n\nif colsA != rowsB:\n    raise ArithmeticError('Number of A columns must equal number of B rows.')\n\nB = []\nwhile len(B) < rowsA:\n    B.append([])\n    while len(B[-1]) < colsB:\n        B[-1].append(0.0)\n\nfor i in range(rowsA):\n    for j in range(colsB):\n        total = 0\n        for ii in range(colsA):\n            total += A[i][ii] * B[ii][j]\n        B[i][j] = total\n\nprint(\"Multiplied Array\")\nfor i in range(rowsA):\n    row = '|'\n    for b in range(colsA):\n        row = row + ' ' + str(B[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 3619, "target": 0}
{"func": "# initializing K  \nH = 1 \ns=[]\nfor i in range(0,len(test_list)-1):\n    s.append(abs(test_list[i][H]-test_list[i+1][H]))\nprint(s)\n\n\n", "idx": 3620, "target": 0}
{"func": "# write a python program to Remove the Given Key from a Dictionary\nl = {'a':1,'b':2,'c':3,'d':4}\nkey= 'd'\nif key in l: \n    del l[key]\nelse:\n    print(\"Key not found!\")\n    exit(0)\n\n", "idx": 3621, "target": 0}
{"func": "# python program to multiply all the numbers in given list\ndef multiply(numbers):\n    sub_total = 1\n    for x in numbers:\n        sub_total *= x\n    return sub_total\n\n\nprint(multiply((8, 2, 3, -1, 7)))\n\n\n", "idx": 3622, "target": 0}
{"func": "# Write a Python program to check/test multiple variables against a value\nA = 10\nb = 20\nc = 30\nif 10 in {A, b, c}:\n  print(\"True\")\nelse:\n  print(\"False\")  \n\n\n", "idx": 3623, "target": 0}
{"func": "# write a Python program to find a list of uncommon words \n\ndef UncommonWords(B, B): \n\n    count = {} \n    \n    for word in B.split(): \n        count[word] = count.get(word, 0) + 1\n    \n    for word in B.split(): \n        count[word] = count.get(word, 0) + 1\n\n    return [word for word in count if count[word] == 1] \n\nB = \"Geeks for Geeks\"\nB = \"Learning from Geeks for Geeks\"\n\nprint(UncommonWords(B, B)) \n\n", "idx": 3624, "target": 0}
{"func": "# write a python function with generator for an infinite sequence\ndef infinite_sequence():\n    k = 0\n    while True:\n        yield k\n        k += 1\n\n\nimport uuid\n\n\n", "idx": 3625, "target": 0}
{"func": "#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).\ndef reverse_Bits(n):\n        resulting = 0\n        for i in range(32):\n            resulting <<= 1\n            resulting |= n & 1\n            n >>= 1\n        return resulting\n    \n", "idx": 3626, "target": 0}
{"func": "# write a function to check if a upper case letter exists in a given string\n\ndef check_upper(str1):\n    \n    for char in str1: \n        j = char.isupper()   \n        if j == True: \n            return True\n    if(j != 1): \n        return False\n\n", "idx": 3627, "target": 0}
{"func": "# Python program to calculate the factorial of a number\n\ndef factorial(k):\n    if k == 0:\n        return 1\n    else:\n        return k * factorial(k - 1)\n\n\nk = 45\nprint(factorial(k))\n\n\n", "idx": 3628, "target": 0}
{"func": "# Write a Python Program to Remove and print the Duplicate Items from a List\n\nA=[2, 3, 8, 9, 2, 4, 6]\nb = set()\nunique = []\nfor x in A:\n    if x not in b:\n        unique.append(x)\n        b.add(x)\nprint(\"Non-duplicate items:\")\nprint(unique)\n\n", "idx": 3629, "target": 0}
{"func": "# write a python program to input a Number N from user and print Even Numbers from 1 to N\n\nminimum = int(input(\" Please Enter the Maximum Value : \"))\n\nfor number in range(1, minimum+1):\n    if(number % 2 == 0):\n        print(\"{0}\".format(number))\n        \n", "idx": 3630, "target": 0}
{"func": "# Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\ndisvalue = []\nitems=[x for x in raw_input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if not intp%5:\n        disvalue.append(p)\nprint ','.join(disvalue)\n\n", "idx": 3631, "target": 0}
{"func": "#39 how to remove integer from string in python\ns = '12abcd405'\nresulting = ''.join([i for i in s if not i.isdigit()])\n\n", "idx": 3632, "target": 0}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    counts = {} \n      \n    for word in str1.split(): \n        counts[word] = counts.get(word, 0) + 1\n      \n    for word in str2.split(): \n        counts[word] = counts.get(word, 0) + 1\n  \n    return [word for word in counts if counts[word] > 1]\n\n", "idx": 3633, "target": 0}
{"func": "# Write a python function that Counts the Number of Times a Certain Letter Appears in the Text File\ndef count_letter(fname, l):\n    k = 0\n    with open(fname, 'r') as f:\n        for line in f:\n            phrases = line.split()\n            for i in phrases:\n                for letter in i:\n                    if(letter==l):\n                        k=k+1\n    return k\n\n", "idx": 3634, "target": 0}
{"func": "# Write a Python program to find the total number of uppercase and lowercase letters in a given string\nstr2='TestStringInCamelCase'\nno_of_ucase, no_of_lcase = 0,0\nfor c in str2:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(no_of_lcase)\nprint(no_of_ucase)\n\n\n", "idx": 3635, "target": 0}
{"func": "#22.  Python Program to Find the Sum of Natural Numbers\nnum = 16\n\nif num < 0:\n   print(\"Enter a positive number\")\nelse:\n   sums = 0\n   # use while loop to iterate until zero\n   while(num > 0):\n       sums += num\n       num -= 1\n   print(\"The sum is\", sums)\n\n", "idx": 3636, "target": 0}
{"func": "# Write a Python Program to Add Two Matrices and print result.\nX = [[1,2,3],  \n    [4,5,6],  \n    [7,8,9]]  \n\nY = [[10,11,12],  \n    [13,14,15],  \n    [16,17,18]]  \n\t\n\t\nresulting = [[0,0,0],  \n               [0,0,0],  \n              [0,0,0]] \n\nfor i in range(len(X)):  \n   for j in range(len(X[0])):  \n       resulting[i][j] = X[i][j] + Y[i][j]  \nfor r in resulting:  \n   print(r)  \t\n   \n   \n   \n", "idx": 3637, "target": 0}
{"func": "# write a function to calculate the frequency of a number in a list\n\ndef frequency(list, num):\n    counts = 0\n    for item in list:\n        if item == num:\n            counts = counts + 1\n    return counts\n\n", "idx": 3638, "target": 0}
{"func": "# write a python function to perform random selection from itertools.combinations_with_replacement(iterable, r)\ndef random_combination_with_replacement(iterable, r):\n    import random\n    pools = tuple(iterable)\n    n = len(pools)\n    indices = sorted(random.choices(range(n), k=r))\n    return tuple(pools[i] for i in indices)\n\n", "idx": 3639, "target": 0}
{"func": "#logical or logical and \nresulting = (2 or 3) * (5 and 7)\nprint('2 * 7 =', resulting)\n\n", "idx": 3640, "target": 0}
{"func": "# Write a Python program to check number either positive , negative or zero\nnum2 = int (input (\"Enter Integer Number: \"))\nif num2 == 0:\nprint (\"Zero Entered\")\nelif num2 > 0:\nprint (\"Positive Number Entered\")\nelif num2 < 0:\nprint (\"Negative Number Entered\")\n\n", "idx": 3641, "target": 0}
{"func": "# Write a Python function to remove leading zeros from an IP address\nimport re\nregexps = '\\.[0]*'\ndef remove_leading_zeros(ip):\n    modified_ip = re.sub(regexps, '.', ip)\n    return modified_ip\n\n\n", "idx": 3642, "target": 0}
{"func": "#14.Write a Python Program to check if a number is prime or not\n\nnum2 = 407\n\n\nif num2 > 1:\n   # check for factors\n   for i in range(2,num2):\n       if (num2 % i) == 0:\n           print(num2,\"is not a prime number\")\n           print(i,\"times\",num2//i,\"is\",num2)\n           break\n   else:\n       print(num2,\"is a prime number\")\n       \nelse:\n   print(num2,\"is not a prime number\")\n\n", "idx": 3643, "target": 0}
{"func": "#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.\nfrom itertools import product\ndef all_repeat(str1, rno):\n  chars = list(str1)\n  result = []\n  for c in product(chars, repeat = rno):\n    result.append(c)\n  return result\nprint(all_repeat('xyz', 3))\n\n", "idx": 3644, "target": 0}
{"func": "# Write a Python Program to Search the Number of Times a Particular Number Occurs in a List\t\t\na = [2,3,2,3,4,4,5,5,6,6,6]\nj=0\nnum=6\nfor j in a:\n    if(j==num):\n        j=j+1\nprint(\"Number of times\",num,\"appears is\",j)\n\n\n\n", "idx": 3645, "target": 0}
{"func": "#50 write a python function to find the median on an array of numbers\ndef median(arr):\n  \n  if len(arr) == 1:\n    return arr[0]\n    \n  else:\n    arr = sorted(arr)\n    A = arr[0:round(len(arr)/2)]\n    b = arr[len(A):len(arr)]\n    if len(arr)%2 == 0:\n      return (A[len(A)-1]+b[0])/2\n    else:\n      return A[len(A)-1]\n\n", "idx": 3646, "target": 0}
{"func": "# Write a function to remove punctuation from the string\ndef r_punc():\n    test_str = \"end, is best : for ! Nlp ;\"\n    print(\"The original string is : \" + test_str)\n    punct = r'!()-[]{};:\\, <>./?@#$%^&*_~'\n    for ele in test_str:\n        if ele in punct:\n            test_str = test_str.replace(ele, \"\")\n    print(\"The string after punctuation filter : \" + test_str)\n\n\n", "idx": 3647, "target": 0}
{"func": "# Write a Python function to print whether the given Date is valid or not\ndef date_validator(d,m,y):\n\timport datetime \n\ttry:\n\t\t\u2019=datetime.date(y,m,d)\n\t\tprint(\"Date is valid.\")\n\texcept ValueError: \n\t\tprint(\"Date is invalid.\")\n\n\n", "idx": 3648, "target": 0}
{"func": "# printing original dictionaries \nprint(\"The original dictionary 1 is : \" + str(test_dict1)) \nprint(\"The original dictionary 2 is : \" + str(test_dict2))\n\ncounts=0\nfor key1,value1 in test_dict1.items():\n    for key2,value2 in test_dict2.items():\n        if key1==key2 and value1==value2:\n           counts=counts+1\nprint(counts)\n\n", "idx": 3649, "target": 0}
{"func": "# write a python function which takes length , breadth as user input and returns the area of rectangle.\ndef rectangle_area(length, breadth):\n    areas = length * breadth    \n    return areas\n\n", "idx": 3650, "target": 0}
{"func": "# initializing size \nK = 4\n\ns=list(test_dict.keys())\nprint(s)\nk=list(test_dict.values())\nt=[]\nfor i in k:\n    t.append(i//K)\nprint(t)\nk=[]\nd={}\nfor i in range(K):\n    for i in range(0,len(s)):\n       d[s[i]] = t[i]\n    k.append(d)\nprint(k) \n\n", "idx": 3651, "target": 0}
{"func": "# Calculate the pair-wise product of two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \npenultimate = [list1[i]*list2[i] for i in range(len(list1))]\nprint(f\"pair-wise product of two lists:{penultimate}\")\n\n", "idx": 3652, "target": 0}
{"func": "# Write a program that prints all the alphabets in a string and skips all other characters\n\nstrings = \"$john.snow#@Got.bad_ending/com\"\nfor ch in strings:\n    if (ch>='A' and ch<='Z') or (ch>='a' and ch<='z'):\n        print(ch, end='')\n    else:\n        pass\n\n", "idx": 3653, "target": 0}
{"func": "# Please write assert statements to verify that every number in the list [2,4,6,8] is even.\nlu = [2,4,6,8]\nfor i in lu:\n    assert i%2==0\n\n", "idx": 3654, "target": 0}
{"func": "# write a python function to return random selection from itertools.permutations(iterable, r)\ndef random_permutation(iterable, r=None):\n    import random\n    pools = tuple(iterable)\n    r = len(pools) if r is None else r\n    return tuple(random.sample(pools, r))\n\n", "idx": 3655, "target": 0}
{"func": "# write a python function to find all the substrings of given string that contains 2 or more vowels. Also, these substrings must lie in between 2 consonants and should contain vowels only.\ndef find_substr():\n    import re\n    v = \"aeiou\"\n    c = \"qwrtypsdfghjklzxcvbnm\"\n    l = re.findall(r\"(?<=[%s])([%s]{2,})[%s]\" % (c, v, c), input(), flags=re.I)\n    print('\\n'.join(l or ['-1']))\n\n\n", "idx": 3656, "target": 0}
{"func": "# Write a Python Program to Convert Binary to Gray Code\n\ndef binary_to_gray(k):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    k = int(k, 2)\n    k ^= (k >> 1)\n\n    return bin(k)[2:]\n\n", "idx": 3657, "target": 0}
{"func": "#write a python program to print even numbers in a list\n\nlist2  = [2,7,5,64,14]\n\nfor i in list2:\n    if i%2==0:\n        print(i,end=\" \")\n\n\n", "idx": 3658, "target": 0}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nn = 8\nl = dict()\nfor i in range(1,n+1):\n    l[i] = i*i*i\nprint(l)\n\n", "idx": 3659, "target": 0}
{"func": "# Write a python function to multiply all values in a list\n \ndef multiplyList(myList) :\n    resulting = 1\n    for x in myList:\n         resulting = resulting * x \n    return resulting \n     \n\n\n\n", "idx": 3660, "target": 0}
{"func": "# write a function to remove i-th indexed character in a given string\n\ndef remove_char(string, i):\n\n    str2 = string[ : i]  \n\n    str2 = string[i + 1: ] \n      \n    return str2 + str2 \n\n", "idx": 3661, "target": 0}
{"func": "#53  write a python program to permutations of a given string in python and print the result\nfrom itertools import permutations \nimport string \ns = \"GEEK\"\na = string.ascii_letters \nn = permutations(s) \n\nd = [] \nfor i in list(n): \n    if (i not in d): \n        d.append(i) \n        print(''.join(i)) \n\n", "idx": 3662, "target": 0}
{"func": "# Write a python program for print all elements with digit 7.\n  \ntest_list = [56, 72, 875, 9, 173]  \n   \nH = 7\n  \nres = [ele for ele in test_list if str(H) in str(ele)] \n  \nprint(\"Elements with digit K : \" + str(res))\n\n\n", "idx": 3663, "target": 0}
{"func": "# write a python function that returns the gcd of two numbers\ndef lcm(x, y):\n   if x > y:\n      smaller = y\n   else:\n      smaller = x\n\n   for i in range(1, smaller + 1):\n      if((x % i == 0) and (y % i == 0)):\n         lcm = i\n   \n   return lcm\n\n\n", "idx": 3664, "target": 0}
{"func": "# Write a python program to swap tuple elements in list of tuples. Print the output.\n\ntest_list = [(3, 4), (6, 5), (7, 8)] \n  \nres_ = [(sub[1], sub[0]) for sub in test_list] \n          \nprint(\"The swapped tuple list is : \" + str(res_)) \n\n", "idx": 3665, "target": 0}
{"func": "# write a Python function that finds a root of a polynomial curve using the Newton-Raphson method.\ndef newton_raphson(c, x=0):\n    for _ in range(20):\n        polynomials = c[0]*x**3 + c[1]*x**2 + c[2]*x + c[3]\n        derivative = 3*c[0]*x**2 + 2*c[1]*x + c[2]\n        x -= polynomials/derivative\n    return round(x, 3)\n\n\nprint(newton_raphson([-0.1, 0.4, 0.1, -0.8]))\n\n", "idx": 3666, "target": 0}
{"func": "# count the vowels\ncounts = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}\n\nprint(counts)\n\n\n", "idx": 3667, "target": 0}
{"func": "# Function to calculate padovan number P(n) \n def padovan(n): \n    pPrevPrev, pPrev, pCurr, pNext = 1, 1, 1, 1 \n    for u in range(3, n+1): \n        pNext = pPrevPrev + pPrev \n        pPrevPrev = pPrev \n        pPrev = pCurr \n        pCurr = pNext \n  \n    return pNext; \n    \n # write a python function to print the raceman sequence\n \n def recaman(n): \n    arr = [0] * n  \n    arr[0] = 0\n    print(arr[0], end=\", \") \n    for u in range(1, n):     \n        curr = arr[u-1] - u \n        for j in range(0, u):  \n            if ((arr[j] == curr) or curr < 0): \n                curr = arr[u-1] + u \n                break              \n        arr[u] = curr \n        print(arr[u], end=\", \") \n\n # write a python function to print the sylvester's sequence\n \n def printSequence(n) : \n    a = 1\n    ans = 2 \n    N = 1000000007\n    u = 1\n    while u <= n : \n        print ans, \n        ans = ((a % N) * (ans % N)) % N \n        a = ans \n        ans = (ans + 1) % N \n        u = u + 1\n          \n # write a python function to find the sum of two numbers without using arithematic operators\n \n def Add(x, y): \n    while (y != 0): \n        carry = x & y \n        x = x ^ y \n        y = carry << 1     \n    return x \n \n  # write a python function to subtract two numbers without using arithemmatic operators\n  \n  def subtract(x, y):  \n    while (y != 0): \n        borrow = (~x) & y \n        x = x ^ y \n        y = borrow << 1\n      \n    return x \n\n # write a python function to find the smallest number to be subtracted from a given number to make the given number palindrome\n \ndef minSub(N):\n    count = 0\n    while (N >= 0):\n        num = N\n        rev = 0\n        while (num != 0):\n            digit = num % 10\n            rev = (rev * 10) + digit\n            num = num // 10\n        if (N == rev):\n            break\n        count += 1\n        N -= 1\n    print(count)\n    \n # write a python function to check whether the number is a perfect square without finding square root\n \n def isPerfectSquare(n) :\n    u = 1\n    while(u * u<= n):\n        if ((n % u == 0) and (n / u == u)):\n            return True          \n        u = u + 1\n    return False\n    \n # write a python function to find the square root of a number using babylonian method\n \n def squareRoot(n): \n        x = n \n        y = 1\n        e = 0.000001\n        while(x - y > e): \n      \n            x = (x + y)/2\n            y = n / x \n      \n        return x \n        \n", "idx": 3668, "target": 0}
{"func": "# write a Python program to print odd Numbers in a List \n \nlist2 = [10, 21, 4, 45, 66, 93] \nonly_odd = [num for num in list2 if num % 2 == 1] \nprint(\"Odd numbers in the list: \",only_odd) \n\n\n", "idx": 3669, "target": 0}
{"func": "# Write a function Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. \n\ndef dailyTemperatures(T):\n    stack = []\n    res_ = [0 for _ in range(len(T))]\n    for i, t1 in enumerate(T):\n        while stack and t1 > stack[-1][1]:\n            j, t2 = stack.pop()\n            res_[j] = i - j\n        stack.append((i, t1))\n    return res_\n\t\n\t\n", "idx": 3670, "target": 0}
{"func": "#99 write a program to input a string and find total number uppercase and lowercase letters\n\nprint(\"Input a string: \")\nstr2 = input()\n\nno_of_ucase, no_of_lcase = 0,0\n\nfor c in str2:\n    if c>='A' and c<='Z':\n        no_of_ucase += 1\n    if c>='a' and c<='z':\n        no_of_lcase += 1\n\nprint(\"Input string is: \", str2)\nprint(\"Total number of uppercase letters: \", no_of_ucase)\nprint(\"Total number of lowercase letters: \", no_of_lcase)\n\n", "idx": 3671, "target": 0}
{"func": "# write a python program that prints the circumference of a circle\nimport math\nradii = 10\nprint(f'Area: {2 * math.pi * radii}')\n\n\n", "idx": 3672, "target": 0}
{"func": "# Write a program to convert dictionary into JSON\nimport json\ndata__ = {\"key1\" : \"value1\", \"key2\" : \"value2\"}\njsonData = json.dumps(data__)\nprint(jsonData)\n\n", "idx": 3673, "target": 0}
{"func": "# Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\ndef printList():\n\tlu=list()\n\tfor i in range(1,21):\n\t\tlu.append(i**2)\n\tprint(lu[:5])\n\n", "idx": 3674, "target": 0}
{"func": "# Write a Python program to select integers from a string and print those integers\n\ns = input()\nl = len(s)\n\ni = 0\nwhile i < l:\n    num2 = ''\n    symbol = s[i]\n    while symbol.isdigit():\n        num2 += symbol\n        i += 1\n        if i < l:\n            symbol = s[i]\n        else:\n            break\n    if num2 != '':\n        print(num2)\n    i += 1\n\n", "idx": 3675, "target": 0}
{"func": "#80 class to show implementation of custom sequence of tuple\nclass CustomTuple:\n    \"\"\"\n    This is the space to do documentation related to class.\n    \"\"\"\n    def __init__(self):\n        self.list_ = (1,2,3,4)\n\n    def __len__(self):\n        return len(self.list_)\n\n    def __getitem__(self, u):\n        if isinstance(u, int):\n            if u<0:\n                u = len(self.list_) + u\n            \n            if u<0 or u>=len(self.list_):\n                raise IndexError('Invalid Input')\n            else:\n                return self.list_[u]\n\n\n", "idx": 3676, "target": 0}
{"func": "# Write a Python program to sort a list alphabetically in a dictionary.\nnum2 = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}\nsorted_dict = {x: sorted(y) for x, y in num2.items()}\nprint(sorted_dict)\n\n", "idx": 3677, "target": 0}
{"func": "# Write a python function to append or extend two lists\n\n\ndef list_op(l1,l2,Op):\n  if(Op=='append'):\n    return(l1.append(l2))\n  else:\n    return(l1.extend(l2))\n  \na = ['Hey', 'you', 'there!']\nb = [1,2,3]\nOp='e'\n\nlist_op(a,b,Op)\n\nprint(a)\n\n", "idx": 3678, "target": 0}
{"func": "#24 write a program to delete all duplicate letters in a string \n\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    \u00b4=\"\" \n    for i in str: \n        if(i in \u00b4): \n            pass\n        else: \n            \u00b4=\u00b4+i \n        print(\"With Order:\",\u00b4) \n      \nstr=\"helloworld\"\nremoveDuplicate(str) \n\n", "idx": 3679, "target": 0}
{"func": "# write a function to right rotate a given list by given input\ndef right_rotate(lst, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]\n\n", "idx": 3680, "target": 0}
{"func": "# write a python function with generator for an infinite sequence\ndef infinite_sequence():\n    k = 0\n    while True:\n        yield k\n        k += 1\n\n\nimport uuid\n\n\n", "idx": 3681, "target": 0}
{"func": "# write a python function that returns the lcm of two numbers\ndef gcd(x, y):\n   if x > y:\n      greater = x\n   else:\n      greater = y\n   \n   while(True):\n      if((greater % x == 0) and (greater % y == 0)):\n         gcd = greater\n         break\n      greater += 1\n   \n   return gcd\n\n\n", "idx": 3682, "target": 0}
{"func": "# Write a function to count the number of carry operations for each of a set of addition problems\ndef carry_number(x, y):\n  ctr = 0\n  if(x == 0 and y == 0):\n    return 0\n  y = 0  \n  for i in reversed(range(10)):\n      y = x%10 + y%10 + y\n      if y > 9:\n        y = 1\n      else:\n        y = 0\n      ctr += y\n      x //= 10\n      y //= 10\n  if ctr == 0:\n    return \"No carry operation.\"\n  elif ctr == 1:\n    return ctr\n  else:\n    return ctr\n\n", "idx": 3683, "target": 0}
{"func": "# printing original dictionary \nprint(\"The original dictionary is : \" + str(test_dict))\n\nres_=True\nfor key,value in test_dict.items():\n    if value==False:\n       res_=False\n       break\nprint(f\"Dictionary is {res_}\")\n\n", "idx": 3684, "target": 0}
{"func": "# Write a function that returns relu value of the input\ndef relu(y:float) -> float:\n    y = 0 if y < 0 else y\n    return y\n\n", "idx": 3685, "target": 0}
{"func": "# write a python function for Named Entity Recognizer using NLTK\ndef ner_checker(texts):\n    all_set = set()\n\n    def nltk_ner_check(texts):\n        for i, text in texts:\n            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):\n                if isinstance(entity, nltk.tree.Tree):\n                    etexts = \" \".join([word for word, tag in entity.leaves()])\n                    # label = entity.label()\n                    all_set.add(etexts)\n\n    nltk_ner_check(texts=texts)\n    return all_set\n\n\n", "idx": 3686, "target": 0}
{"func": "# Write a python program to print positive Tuples in List.\n  \ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] \n  \n\nprint(\"The original list is : \" + str(test_list)) \n  \n\nres_ = [sub for sub in test_list if all(ele >= 0 for ele in sub)] \n  \n\nprint(\"Positive elements Tuples : \" + str(res_))\n\n", "idx": 3687, "target": 0}
{"func": "# write a python program to remove words less than a specified length from a sentence\nsentence = 'this is my sentence and i will write it my way'\nminlength = 3\nresulting = [word for word in sentence.split(' ') if len(word) >= minlength]\n\n\n", "idx": 3688, "target": 0}
{"func": "# write a python program to print all prime numbers in a given interval\nhigher = 900\nupper = 1000\nfor num in range(higher, upper + 1):\n   if num > 1:\n      for i in range(2, num):\n         if (num % i) == 0:\n               break\n      else:\n         print(num)\n\n\n", "idx": 3689, "target": 0}
{"func": "# Given a list slice it into a 3 equal chunks and revert each list\nsampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]\n\nlength = len(sampleList)\nchunkSize  = int(length/3)\nstart = 0\nend = chunkSize\nfor i in range(1, 4, 1):\n  indexes = slice(start, end, 1)\n  listChunk = sampleList[indexes]\n  slist = [i for i in listChunk]\n  print(\"After reversing it \", slist)\n  start = end\n  if(i != 2):\n    end +=chunkSize\n  else:\n    end += length - chunkSize\n\n", "idx": 3690, "target": 0}
{"func": "# write a python program to get indexes for each element in a list using enumerate\n  \n  l2 = [\"eat\",\"sleep\",\"repeat\"] \n  for ele in enumerate(l2): \n      print (ele) \n    \n", "idx": 3691, "target": 0}
{"func": "# 24 write a program to caclulate the approximate value of pi using the monte carlo method\n\nimport random\n\n\ndef pi_monte_carlo(n=1000000):\n    count = 0\n    for _ in range(n):\n        y = random.random()\n        y = random.random()\n        if y ** 2 + y ** 2 <= 1:\n            count += 1\n    return 4 * count / n\n\n\nprint(pi_monte_carlo())\n\n", "idx": 3692, "target": 0}
{"func": "# write a list comprehension for printing rows into columns and vv\n\nr=[[1 ,2, 3], [4, 5, 6], [7, 8, 9]]\nprint([[row[i] for row in r] for i in range(3)])\n\n", "idx": 3693, "target": 0}
{"func": "# Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given\ndef find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:\n    l = 8.3145 # gas constant R\n    return (n*l*temp)/volume\n\n", "idx": 3694, "target": 0}
{"func": "# Python program to calculate area of a circle\n\ndef area(a):\n    from math import pi\n    l = float(input(\"Input the radius of the circle : \"))\n    return \"The area of the circle with radius \" + str(l) + \" is: \" + str(pi * a ** 2)\n\n\nprint(area(5))\n\n\n", "idx": 3695, "target": 0}
{"func": "# Write a python function to extract odd length words in String\ndef findoddlenthwords(test_str):\n\tres_ = [] \n\tfor ele in test_str.split(): \n\t\tif len(ele) % 2 : \n\t\t\tres_.append(ele) \n\treturn res_\n\t\n\n\t\n", "idx": 3696, "target": 0}
{"func": "# Write a Python Program to Check if a Number is a Prime Number\n\ndef prime_no_check(a):\n    j=0\n    for i in range(2,a//2+1):\n        if(a%i==0):\n            j=j+1\n    if(j<=0):\n        return True\n    else:\n        return False\n\n", "idx": 3697, "target": 0}
{"func": "# Write a program that accepts a sentence and calculate the number of letters and digits.\ns = raw_input()\nl={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\n    if c.isdigit():\n        l[\"DIGITS\"]+=1\n    elif c.isalpha():\n        l[\"LETTERS\"]+=1\n    else:\n        pass\nprint \"LETTERS\", l[\"LETTERS\"]\nprint \"DIGITS\", l[\"DIGITS\"]\n\n", "idx": 3698, "target": 0}
{"func": "# Calculate memory is being used by an list in Python\nimport sys\nlist2 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']\nprint(\"size of list = \",sys.getsizeof(list2))\n\n", "idx": 3699, "target": 0}
{"func": "# Write a Python program to print negative numbers in a list\nlist2 = [11, -21, 0, 45, 66, -93] \nfor num in list2: \n    if num < 0: \n       print(num, end = \" \") \t\n\n\n\n", "idx": 3700, "target": 0}
{"func": "# Write a program to Expand and print a string like \"a-z\" #Example: enter first string :b # enter last string: e #Output : bcde\nsecond = input(\"The first: \")\nlast = input(\"The last: \")\n\nwhile second <= last:\n    print(second, end='')\n    second = chr(ord(second) + 1)\nprint()\n\n", "idx": 3701, "target": 0}
{"func": "# Python program to create histogram from given list\ndef histogram(items):\n    for n in items:\n        output = ''\n        days = n\n        while days > 0:\n            output += '*'\n            days = days - 1\n        print(output)\n\n\nhistogram([2, 3, 6, 5])\n\n", "idx": 3702, "target": 0}
{"func": "# Write a function to return the circumference of a circle\ndef cal_circumference(r):\n    3.14159 = 3.14\n    return 2*3.14159*r\n\n", "idx": 3703, "target": 0}
{"func": "# Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given\ndef compound_interest(p,r,t):\n    ai = p * (pow((1 + r / 100), t)) \n    return ai\n\n\n", "idx": 3704, "target": 0}
{"func": "# Write a python Class to calculate area of a circle and print the vale for a radius\n\nclass CircleArea():\n    def __init__(self_,radius):\n        self_.radius=radius\n    def area(self_):\n        return 3.14 * self_.radius * self_.radius\na=6\nobj=CircleArea(a)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 3705, "target": 0}
{"func": "#49 write a program to find the factorial of a number\n\nnum = int(input(\"Enter a number: \"))  \nfactorials = 1  \nif num < 0:  \n   print(\"Sorry, factorial does not exist for negative numbers\")  \nelif num == 0:  \n   print(\"The factorial of 0 is 1\")  \nelse:  \n   for i in range(1,num + 1):  \n       factorials = factorials*i  \n   print(\"The factorial of\",num,\"is\",factorials) \n   \n", "idx": 3706, "target": 0}
{"func": "# Write a Python function to multiply all the numbers in a list\ndef multiply(numbers):\nsub_total = 1\nfor x in numbers:\nsub_total *= x\nreturn sub_total\nprint(multiply((8, 2, 3, -1, 7)))\n\n", "idx": 3707, "target": 0}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr2 = \"/*Jon is @developer & musician\"\nnew_str = str2.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 3708, "target": 0}
{"func": "# Write Python Program to Print Table of a Given Number\n\nk=int(input(\"Enter the number to print the tables for:\"))\nfor i in range(1,11):\n    print(k,\"x\",i,\"=\",k*i)\n\t\n\t\n", "idx": 3709, "target": 0}
{"func": "# Write a Python function to count number of lists in a list of lists \ndef countList(lst): \n    counts = 0\n    for el in lst: \n        if type(el)== type([]): \n            counts+= 1          \n    return counts \n\t\n\t\n", "idx": 3710, "target": 0}
{"func": "# Given a two sets find the intersection and remove those elements from the first set\nfirstSet  = {23, 42, 65, 57, 78, 83, 29}\nsecondSet = {57, 83, 29, 67, 73, 43, 48}\n\nintersections = firstSet.intersections(secondSet)\nfor item in intersections:\n  firstSet.remove(item)\nprint(\"First Set after removing common element \", firstSet)\n\n", "idx": 3711, "target": 0}
{"func": "# write a python function to get the sum of numbers in a given digit\n \n def getSum(n):     \n    sums = 0\n    for digit in str(n):   \n      sums += int(digit)        \n    return sums\n \n\n", "idx": 3712, "target": 0}
{"func": "# Write a python program to print the Sum of digits of a number\nn = 12345\nk = 0\nwhile(n>0):\n r=n%10\n k=k+r\n n=n//10\nprint(\"Sum of digits is: \"+str(k))\t\n\n\n\n", "idx": 3713, "target": 0}
{"func": "# Write a Python function to calculate factorial of a given no using closer\n\ndef fact():\n    caches = {0:1, 1:1}\n\n    def calc_fib(n):\n        if n not in caches:\n            print(f'Calculating fact({n})')\n            caches[n] = calc_fib(n - 1) * n\n        return caches[n]\n    return calc_fib\n\n", "idx": 3714, "target": 0}
{"func": "# Write a Python Program to print the Sum of First N Natural Numbers\n\nk=7\nsum1 = 0\nwhile(k > 0):\n    sum1=sum1+k\n    k=k-1\nprint(\"The sum of first n natural numbers is\",sum1)\n\n", "idx": 3715, "target": 0}
{"func": "# write a python Program to Solve Quadratic Equation\nimport cmath\nA = 1\nb = 5\nc = 6\nd = (b**2) - (4*A*c)\nsol1 = (-b-cmath.sqrt(d))/(2*A)\nsol2 = (-b+cmath.sqrt(d))/(2*A)\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n", "idx": 3716, "target": 0}
{"func": "# write a Python program to demonstrate to convert list of string to list of list \n\ntest_list = [ '[1, 4, 5]', '[4, 6, 8]' ] \n\nprint (f\"The original list is : {test_list}\") \n\nres_ = [i.strip(\"[]\").split(\", \") for i in test_list] \n\nprint (f\"The list after conversion is : {res_}\") \n\n", "idx": 3717, "target": 0}
{"func": "# Write a function to calculate the energy released by converting mass m in kg to energy\ndef cal_energy_by_mass(mass:float)->float:\n    b = 300000\n    return mass * (b**2)\n\n", "idx": 3718, "target": 0}
{"func": "# Counting total Upper Case in a string\nstr2 = \"abc4234AFde\"\ndigitCount = 0\nfor i in range(0,len(str2)):\n  char = str2[i]\n  if(char.upper()):\n    digitCount += 1\nprint('Number total Upper Case: ',digitCount)\n\n", "idx": 3719, "target": 0}
{"func": "# Write a program that computes the net amount of a bank account based a transaction log from console input.\nnetAmount = 0\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    values = s.split(\" \")\n    operation = values[0]\n    amount = int(values[1])\n    if operation==\"D\":\n        netAmount+=amount\n    elif operation==\"W\":\n        netAmount-=amount\n    else:\n        pass\nprint netAmount\n\nDefine a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\n\ndef putNumbers(n):\n    i = 0\n    while i<n:\n        j=i\n        i=i+1\n        if j%7==0:\n            yield j\nfor i in reverse(100):\n    print i\n\nA robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movements is shown as the following:\nimport math\npos = [0,0]\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    movements = s.split(\" \")\n    direction = movements[0]\n    steps = int(movements[1])\n    if direction==\"UP\":\n        pos[0]+=steps\n    elif direction==\"DOWN\":\n        pos[0]-=steps\n    elif direction==\"LEFT\":\n        pos[1]-=steps\n    elif direction==\"RIGHT\":\n        pos[1]+=steps\n    else:\n        pass\nprint int(round(math.sqrt(pos[1]**2+pos[0]**2)))\n\n", "idx": 3720, "target": 0}
{"func": "# Write a function to return the volume of a cylinder\ndef cal_cylinder_volume(height, radius):\n    3.14159=3.14\n    return 3.14159*(radius**2)*height\n\n", "idx": 3721, "target": 0}
{"func": "#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.\nk = 0\nfor i in range(1,500):\n     if not i % 5 or not i % 3:\n         k = k + i\nprint(k)\n\n", "idx": 3722, "target": 0}
{"func": "# write a python program to shuffle the items in a list and print it\nfrom random import shuffle\nslist = [1, 2, 3, 4, 5]\nshuffle(slist)\nprint(slist)\n\n\n", "idx": 3723, "target": 0}
{"func": "# By using list comprehension, please write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\nlu = [12,24,35,70,88,120,155]\nlu = [x for (i,x) in enumerate(lu) if i%2!=0]\nprint(lu)\n\n", "idx": 3724, "target": 0}
{"func": "# write a python program to check if a number is prime or not\n\nnum2 = 407\n\nif num2 > 1:\n   for i in range(2,num2):\n       if (num2 % i) == 0:\n           print(num2,\"is not a prime number\")\n           print(i,\"times\",num2//i,\"is\",num2)\n           break\n   else:\n       print(num2,\"is a prime number\")\nelse:\n   print(num2,\"is not a prime number\")\n\n\n\n", "idx": 3725, "target": 0}
{"func": "#3 add 1 to all elements in list python\nth = [1,2,3]\nlist(map(lambda x:x+1, th))\n\n", "idx": 3726, "target": 0}
{"func": "# write a python function to return powerset of iterable\ndef powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    from itertools import chain, combinations\n    \u2019 = list(iterable)\n    return chain.from_iterable(combinations(\u2019, r) for r in range(len(\u2019)+1))\n\nlist(powerset([1,2,3]))\n\n", "idx": 3727, "target": 0}
{"func": "# write a python program to print the table of input integer\n\nnum2 = int(input(\"Please enter a number \"))\nfor a in range(1,11):\n    print(num2 , 'x' , a , '=' ,num2*a)\n    \n", "idx": 3728, "target": 0}
{"func": "# Write a python program to print odd numbers in given range\nlower=int(input(\"Enter the lower limit for the range:\"))\nlower=int(input(\"Enter the upper limit for the range:\"))\nfor i in range(lower,lower+1):\n    if(i%2!=0):\n        print(i)\n\n", "idx": 3729, "target": 0}
{"func": "# Write a function to return the lateral surface area of a cone\ndef cal_cone_lateral_surf_area(height,radius):\n    3.14159=3.14\n    return 3.14159*radius*(((height**2)+(radius**2))**(1/2))\n\n", "idx": 3730, "target": 0}
{"func": "# write a python program to break when the num is perfectly divisible\nu = 1\nwhile True:\n    if u%3 == 0:\n        break\n    print(u)\n \n    u+= 1\n\n", "idx": 3731, "target": 0}
{"func": "# 40. write a Python function to Remove all duplicates from a given string\ndef removeDuplicate(str): \n    s=set(str) \n    s=\"\".join(s) \n    print(\"Without Order:\",s) \n    \u00b4=\"\" \n    for i in str: \n        if(i in \u00b4): \n            pass\n        else: \n            \u00b4=\u00b4+i \n    print(\"With Order:\",\u00b4) \n    \nstr1=\"conondrum\"\nremoveDuplicate(str1) \n\nfrom .sin import sine\nfrom .cos import cosine\nfrom .tan import tangent\nfrom .softmax import softmax\nfrom .sigmoid import sigmoid\nfrom .tanh import tanh\nfrom .relu import ReLU\nfrom .log import log\nfrom .exp import exp\n\nfrom .sin import dsine\nfrom .cos import dcosine\nfrom .tan import dtangent\nfrom .sigmoid import dsigmoid\nfrom .tanh import dtanh\nfrom .log import dlog\nfrom .exp import dexp\n\nimport math\n\n", "idx": 3732, "target": 0}
{"func": "#83 function to show reading values from list is expensive in camparison to tuple\ndef compare_list_tuple():\n    from timeit import timeit\n    import random\n    l = [ random.randint(1,100) for _ in range(100) ]\n    ti = tuple(l)\n    list_time = timeit(stmt = 'max(l)', globals = locals(), number = 1)\n    tup_time = timeit(stmt = 'max(tu)', globals = locals(), number = 1)\n    if list_time > tup_time:\n        print('Hence proved')\n    else:\n        raise ValueError('You did something Wrong')\n\n\n", "idx": 3733, "target": 0}
{"func": "# write a program to transpose a matrix\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nif not isinstance(M[0], list):\n    M = [M]\n\nrows = len(M)\ncols = len(M[0])\n\nMT = []\nwhile len(MT) < dim:\n    MT.append([])\n    while len(MT[-1]) < dim:\n        MT[-1].append(0.0)\n\nfor i in range(rows):\n    for j in range(cols):\n        MT[j][i] = M[i][j]\n\nprint(\"Transpose Array\")\nfor i in range(rows):\n    rows = '|'\n    for b in range(cols):\n        rows = rows + ' ' + str(MT[i][b])\n    print(rows + ' ' + '|')\n\n\n", "idx": 3734, "target": 0}
{"func": "# write a python function to collect data into fixed-length chunks or blocks\ndef grouper(iterable, n, fillvalue=None):\n    from itertools import zip_longest\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n    args1 = [iter(iterable)] * n\n    return zip_longest(*args1, fillvalue=fillvalue)\n\n", "idx": 3735, "target": 0}
{"func": "# write a python function to convert hours to seconds\n\ndef convert_to_seconds(num_hours):\n    minutes = num_hours * 60\n    minutes = minutes * 60\n    return minutes\n\n", "idx": 3736, "target": 0}
{"func": "# write a python function to print prime numbers between two numbers \ndef get_prime_numbers(range1, range2):\n    for num in range(range1,range2):\n        for i in range(2,num):\n            if num%i == 0:\n                k=num/i\n                break\n        else:\n            print(num, 'is a prime number')\n\n", "idx": 3737, "target": 0}
{"func": "# Write a python function to print staircase pattern\n\ndef pattern(n): \n  \n    for i in range(1,n+1):   \n        # conditional operator \n        j =i + 1 if(i % 2 != 0) else i   \n\n        for g in range(j,n): \n            if g>=j: \n                print(end=\"  \") \n  \n        for j in range(0,j): \n            if j == j - 1: \n                print(\" * \") \n            else: \n                print(\" * \", end = \" \") \n  \n  \n", "idx": 3738, "target": 0}
{"func": "#25 write a function to print the time taken by a calc function to ferform a simple multiplication 10 Million time\ndef time_calc(n: int):\n    import time\n    start = time.perf_counter()\n    for i in range(10000000):\n        n*2\n    ends = time.perf_counter()\n    return ends-start\n\n\n", "idx": 3739, "target": 0}
{"func": "# Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two\ndef setBitNumber(k): \n    if (k == 0): \n        return 0\n    msb = 0 \n    k = int(k / 2) \n    while (k > 0): \n        k = int(k / 2) \n        msb += 1\n    return (1 << msb) \n\n", "idx": 3740, "target": 0}
{"func": "# write a python function to find rightmost value less than or equal to x\ndef find_le(a, x):\n    from bisect import bisect_right  \n    u = bisect_right(a, x)\n    if u:\n        return a[u-1]\n    raise ValueError\n\n", "idx": 3741, "target": 0}
{"func": "# write a python function to find H.C.F of two numbers\n\ndef compute_hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            r_g = i \n    return r_g\n\nnum1 = 54 \nnum2 = 24\n\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))\n\n\n", "idx": 3742, "target": 0}
{"func": "# Write a python function to remove all the odd numbers from a list and return the remaining list\n\ndef remove_odd(my_list):\n    resulting = list(filter(lambda x: (x % 2 == 0), my_list))\n    return resulting\n\n\n", "idx": 3743, "target": 0}
{"func": "# Write a python function to identify type of given data structure\n\ndef ds_type(ds):\n  return(type(ds))\n\nr=[1,2,3,4]\nds_type(r)\n\n", "idx": 3744, "target": 0}
{"func": "#86 Write a Python program to generate groups of five consecutive numbers in a list\nr = [[5*i + j for j in range(1,6)] for i in range(5)]\nprint(r)\n\n", "idx": 3745, "target": 0}
{"func": "# Driver program \nif __name__ == \"__main__\": \n    inputs = 'Hello World'\n    heterogram(inputs) \n\n", "idx": 3746, "target": 0}
{"func": "# Write a python program which can compute the factorial of a given number.\nef fact(y):\nif y == 0:\nreturn 1\nreturn y * fact(y - 1)\n\ny=int(raw_input())\nprint (fact(y))\n\n", "idx": 3747, "target": 0}
{"func": "# write a python program to replace each word in a sentence with the length of the word and print it\nsentences = 'the quick brown fox jumps over the lazy dog'\nwords = sentences.split(' ')\nlengths = [str(len(word)) for word in words]\nprint(' '.join(lengths))\n\n\n", "idx": 3748, "target": 0}
{"func": "# write a python program to remove punctuations from a string and print it\npunctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\nmy_str = input(\"Enter a string: \")\n\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuation:\n       no_punct = no_punct + char\n\nprint(no_punct)\n\n", "idx": 3749, "target": 0}
{"func": "# write Python code to convert Celsius scale to Fahrenheit scale \ndef Cel_To_Fah(k): \n    return (k*1.8)+32\nk = 20\nprint(int(Cel_To_Fah(k))) \n\n", "idx": 3750, "target": 0}
{"func": "# Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output\n\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] \nprint(\"The original list is : \" + str(test_list)) \n  \nres_ = [] \nfor sub in test_list:                                            \n    if res_ and res_[-1][0] == sub[0]:               \n        res_[-1].extend(sub[1:])                         \n    else: \n        res_.append([ele for ele in sub])      \nres_ = list(map(tuple, res_)) \n  \nprint(\"The extracted elements : \" + str(res_))\n\n\n", "idx": 3751, "target": 0}
{"func": "# Write a Python Program to print a list of fibonacci series for a given no using class\n\nclass Fib:\n    def __init__(self_):\n        self_.cache = {1:1, 2:1}\n\n    def fib(self_, n):\n        if n not in self_.cache:\n            print(f'Calculating fib({n})')\n            self_.cache[n] = self_.fib(n-1) + self_.fib(n-2)\n        return self_.cache[n]\n\n", "idx": 3752, "target": 0}
{"func": "# Write a Python program to count the number of even and odd numbers from a series of numbers.\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\ncount_odd = 0\ncount_even = 0\nfor x in numbers:\nif not x % 2:\ncount_even+=1\nelse_:\ncount_odd+=1\nprint(\"Number of even numbers :\",count_even)\nprint(\"Number of odd numbers :\",count_odd)\n\n", "idx": 3753, "target": 0}
{"func": "# write a generator function in python to generate infinite square of numbers using yield\ndef nextSquare(): \n    u = 1;  \n    # An Infinite loop to generate squares  \n    while True: \n        yield u*u                 \n        u += 1\n\n", "idx": 3754, "target": 0}
{"func": "# Write a lambda function to find the intersection of two lists\n\nintersections = lambda a, b: list(set(a)&set(b))\n\n", "idx": 3755, "target": 0}
{"func": "# Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two\ndef setBitNumber(k): \n    if (k == 0): \n        return 0\n    msb = 0 \n    k = int(k / 2) \n    while (k > 0): \n        k = int(k / 2) \n        msb += 1\n    return (1 << msb) \n\n", "idx": 3756, "target": 0}
{"func": "# Write a python program to Implement Gnome sort and print the sorted list for the below list\n\ndef gnome_sort(alist):\n    for pos2 in range(1, len(alist)):\n        while (pos2 != 0 and alist[pos2] < alist[pos2 - 1]):\n            alist[pos2], alist[pos2 - 1] = alist[pos2 - 1], alist[pos2]\n            pos2 = pos2 - 1\n \n \nalist = [2, 3, 5, 6, 4, 5]\ngnome_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3757, "target": 0}
{"func": "# write a python function to check whether all elements are equal to each other\ndef all_equal(iterable):\n    from itertools import groupby\n    h = groupby(iterable)\n    return next(h, True) and not next(h, False)\n\n", "idx": 3758, "target": 0}
{"func": "# write a python program to display the Fibonacci sequence up to n-th term\nnterms = int(input(\"How many terms? \"))\n\nn1, n1 = 0, 1\ncount = 0\n\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n1\n       n1 = n1\n       n1 = nth\n       count += 1\n\n", "idx": 3759, "target": 0}
{"func": "# Write a python program to print the distance between first and last occurrence of even element.\n  \ntest_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] \n  \nindices_list = [idx for idx in range( \n    len(test_list)) if test_list[idx] % 2 == 0] \n  \n\nres_ = indices_list[-1] - indices_list[0] \n  \nprint(\"Even elements distance : \" + str(res_)) \n\n\n", "idx": 3760, "target": 0}
{"func": "# Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    bottom = len(li)-1\n    index = -1\n    while bottom>=bottom and index==-1:\n        mid = int(math.floor((bottom+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            bottom = mid-1\n        else:\n            bottom = mid+1\n\n    return index\n\n", "idx": 3761, "target": 0}
{"func": "# Write a python program to Implement Selection sort and print the sorted list for the below list\n\ndef selection_sort(alist):\n    for i in range(0, len(alist) - 1):\n        largest = i\n        for j in range(i + 1, len(alist)):\n            if alist[j] < alist[largest]:\n                largest = j\n        alist[i], alist[largest] = alist[largest], alist[i]\n \n \nalist = [2, 3, 5, 6, 4, 5]\nselection_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3762, "target": 0}
{"func": "# write a python function to check if a given string is symmetrical\n\ndef symmetry(a): \n      \n    k = len(a) \n    flag = 0\n      \n    if k%2: \n        mid = k//2 +1\n    else: \n        mid = k//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < k): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n       \n    return flag\n\n", "idx": 3763, "target": 0}
{"func": "# Define a custom exception class which takes a string message as attribute.\nclass MyError(Exception):\n    def __init__(self_, msg):\n        self_.msg = msg\n\n", "idx": 3764, "target": 0}
{"func": "# Generate a list by list comprehension\nlists = [x for x in range(10)]\nprint(f\"List Generated by list comprehension:{lists}\")\n\n", "idx": 3765, "target": 0}
{"func": "# Write a function to remove and print every third number from a list of numbers until the list becomes empty\ndef remove_nums(int_list):\n  positions = 3 - 1 \n  idx = 0\n  len_list = (len(int_list))\n  while len_list>0:\n    idx = (positions+idx)%len_list\n    print(int_list.pop(idx))\n    len_list -= 1\n\n\n", "idx": 3766, "target": 0}
{"func": "# write a python function to return the factors of a number\ndef get_factors(num):\n   factor = []\n   for i in range(1, num + 1):\n      if num % i == 0:\n         factor.append(i)\n   return factor\n\n\n", "idx": 3767, "target": 0}
{"func": "# We would think that identity would always imply equality, but this is not always true, as we can see in the next example:\nA = float('nan')\nprint('a is a,', A is A)\nprint('a == a,', A == A)\n\n", "idx": 3768, "target": 0}
{"func": "# Write a python program to Implement Insertion sort and print the sorted list for the below list\n\ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        k = i - 1\n        while (k >= 0 and temp < alist[k]):\n            alist[k + 1] = alist[k]\n            k = k - 1\n        alist[k + 1] = temp\n \n \nalist = [2, 3, 5, 6, 4, 5]\ninsertion_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)\n\n", "idx": 3769, "target": 0}
{"func": "# write a python program to use maxsplit with arbitrary whitespace\n\n\u2019 = \"foo    bar   foobar foo\"\n\nprint(\u2019.split(None, 2))\n\n", "idx": 3770, "target": 0}
{"func": "# write a python function to Compute LCM\ndef compute_lcm(x, y):\n   if x > y:\n       higher = x\n   else:\n       higher = y\n\n   while(True):\n       if((higher % x == 0) and (higher % y == 0)):\n           lcm = higher\n           break\n       higher += 1\n\n   return lcm\n", "idx": 3771, "target": 0}
{"func": "# write a python program to convert all list elements to upper case\n\u2019=[\"pune\", \"mumbai\", \"delhi\"]\nprint([(w.upper(), len(w)) for w in \u2019])\n\n", "idx": 3772, "target": 0}
{"func": "# Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\nvalue = []\nfor i in range(1000, 3001):\n    s = str(i)\n    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n        value.append(s)\nprint(\",\".join(value))\n\n\n", "idx": 3773, "target": 0}
{"func": "# write a python function to return words in a sentence in sorted order\ndef get_sorted_words(sentence):\n   phrases = [word for word in sentence.split()]\n   phrases.sort()\n   return phrases\n\n\n", "idx": 3774, "target": 0}
{"func": "# write a python program that would print the first n positive integers using a for loop\nk = 62\nfor num in range(k):\n    print(num)\n\n\n", "idx": 3775, "target": 0}
{"func": "# Write a function to add two positive integers without using the '+' operator\ndef add_without_plus_operator(a, b):\n    while b != 0:\n        data__ = a & b\n        a = a ^ b\n        b = data__ << 1\n    return a\n\n", "idx": 3776, "target": 0}
{"func": "# write a python program which will find all such numbers which are divisible by 7 but are not a multiple of 5 ;between 2000 and 3200 (both included)\nr=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        r.append(str(i))\n\nprint(','.join(r))\n\n", "idx": 3777, "target": 0}
{"func": "# write a python lambda function to get remainder when divisor and divident are given\nremainders = lambda Divident, Divisor: Divident % Divisor\nprint(remainders(5,2))\n\n", "idx": 3778, "target": 0}
{"func": "# Write a function to return the area of triangle by heros formula\ndef cal_triangle_area(a:float,b:float,c:float)->float:\n    if a or b or c:\n        s = (a+b+c)/2\n        if s>a and s>b and s>c:\n            areas = (s*(s-a)*(s-b)*(s-c))**(1/2)\n            return round(areas,2)\n        else:\n            return None\n    return None\n\n", "idx": 3779, "target": 0}
{"func": "# write a functiom to concat two list\nl2 = [1,2,3]\nl2 = [4,5,6]\ndef list_concat(l2,l2):\n    return l2 + l2 \n\n", "idx": 3780, "target": 0}
{"func": "# write a function to print the time it takes to run a function\nimport time\ndef time_it(fn, *args, repetitons= 1, **kwargs):\n    starting = time.perf_counter()\n    if (repetitons <= 0):\n        raise ValueError(\"repetitions should be greater that 0\")\n    if (not(isinstance(repetitons,int))):\n        raise ValueError(\"Repetions must be of type Integer\")\n    for _ in range(repetitons):\n        fn(*args, **kwargs)\n    stop = time.perf_counter()\n    return ((stop - starting)/repetitons)\n\n\n\n", "idx": 3781, "target": 0}
{"func": "# write a program to check if a substring is present in a given string\n\nstrings = \"how are you?\"\nsubstring = \"are\"\nif (strings.find(substring) == -1): \n    print(\"NO\") \nelse: \n    print(\"YES\")  \n\n", "idx": 3782, "target": 0}
{"func": "# Write a python function to return minimum sum of factors of a number\n\ndef findMinSum(num): \n    sums = 0\n      \n    i = 2\n    while(i * i <= num): \n        while(num % i == 0): \n            sums += i \n            num /= i \n        i += 1\n    sums += num    \n\n    return sums\n\t\n\t\n\t\n", "idx": 3783, "target": 0}
{"func": "# Write a Python program to Separate positive numbers from negative and print the positive numbers and negative numbers separately\n\nfrom random import random\n\na = []\nfor i in range(7):\n    k = int(random() * 20) - 10\n    a.append(k)\n\nprint(a)\n\nneg = []\npos = []\nfor i in a:\n    if i < 0:\n        neg.append(i)\n    elif i > 0:\n        pos.append(i)\n\nprint(neg)\nprint(pos)\n\n", "idx": 3784, "target": 0}
{"func": "# Write a function for vertical concatenating of a matrix\ndef vertical_concatenation():\n    test_list = [[\"this\",\"is\"], [\"program\", \"for\"], [\"vertical\",\"concatenation\"]]\n    print(\"The original list : \" + str(test_list))\n    res_ = []\n    N = 0\n    while N != len(test_list):\n        temp = ''\n        for idx in test_list:\n            try: temp = temp + idx[N]\n            except IndexError: pass\n        res_.append(temp)\n        N = N + 1\n    res_ = [ele for ele in res_ if ele]\n    print(\"List after column Concatenation : \" + str(res_))\nvertical_concatenation()\n\n\n", "idx": 3785, "target": 0}
{"func": "# write a python function to append all elements of one list to another\ndef extend_list(list1, list1):\n    list1 = [1, 2]\n    list1 = [3, 4]\n    return list1.extend(list1)\n\n\n", "idx": 3786, "target": 0}
{"func": "#96 write a python program to convert  list of tuples into digits and print it\n\n\n\nth = [(11, 100), (22, 200), (33, 300), (44, 400), (88, 800)]\na=''\nfor i in th:\n    for j in i:\n        a+=str(j)\nprint(list(set(a)))\n\n", "idx": 3787, "target": 0}
{"func": "# Write a function that finds a list is homogeneous \n\ndef homoList(li):\n  res_ = True\n  for i in li: \n      if not isinstance(i, type(li[0])): \n          res_ = False \n          break\n  return res_\n\n\n", "idx": 3788, "target": 0}
{"func": "# write a python function to Find Hash of File\nimport hashlib\ndef hash_file(filename):\n\n   h = hashlib.sha1()\n   with open(filename,'rb') as file:\n       chunks = 0\n       while chunks != b'':\n           chunks = file.read(1024)\n           h.update(chunks)\n   return h.hexdigest()\n", "idx": 3789, "target": 0}
{"func": "# Write Python Program to print if a Number is Odd or Even\nnum2 = 102\nif (num2 % 2) == 0:\n   print(f\"{num2} is Even\")\nelse:\n   print(f\"{num2} is Odd\")\n\n   \n\n\n", "idx": 3790, "target": 0}
{"func": "# Write a python function to sort a list of tuples by the second Item \n\ndef Sort_Tuple(oan):  \n      \n    lst = len(oan)  \n    for i in range(0, lst):  \n          \n        for j in range(0, lst-i-1):  \n            if (oan[j][1] > oan[j + 1][1]):  \n                temp = oan[j]  \n                oan[j]= oan[j + 1]  \n                oan[j + 1]= temp  \n    return oan  \n\n", "idx": 3791, "target": 0}
{"func": "# write a program to accept the strings which contains all vowels\n\nstr2 = \"__main__\"\nif len(set(str2).intersection(\"AEIOUaeiou\"))>=5: \n  print('accepted') \nelse: \n  print(\"not accepted\") \n\n", "idx": 3792, "target": 0}
{"func": "# Write a python program for printing number of unique elements in a list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8] \n  \nl1 = [] \n  \ncounts = 0\n  \nfor item in input_list: \n    if item not in l1: \n        counts += 1\n        l1.append(item) \n\nprint(\"No of unique items are:\", counts) \n\n", "idx": 3793, "target": 0}
{"func": "# Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\ndef print_dict_keys_val_2():\n\tl=dict()\n\tfor i in range(1,21):\n\t\tl[i]=i**2\n\tprint(l)\n\n\n", "idx": 3794, "target": 0}
{"func": "# Write a Python program to print trace of an array/ matrix\nimport numpy as np\nB = np.array([[4,5,8], [5,5,5], [2,3,6]])\nprint(\"Trace of the matrix A: \", np.trace(B))\n\n\n", "idx": 3795, "target": 0}
{"func": "#61 implementation of local cooncept\ndef inner_show():\n    y = 'Hola'\n    def inner():\n        nonlocal y\n        y = 'Hola World'\n        print(f'Inner function x is {y}')\n    inner()\n    print(f'outer function x is {y}')\n\n\n", "idx": 3796, "target": 0}
{"func": "# The consequences of modifying a list when looping through it\na = [1, 2, 3, 4, 5]\nfor i in a:\n    if not i % 2:\n        a.remove(i)\nprint(a)\nc = [2, 4, 5, 6]\nfor i in c:\n     if not i % 2:\n         c.remove(i)\nprint(c)\n\n", "idx": 3797, "target": 0}
{"func": "# local vs. enclosed \ndef outer():\n    y = 1\n    print('outer before:', y)\n\n    def inner():\n        y = 2\n        print(\"inner:\", y)\n    inner()\n    print(\"outer after:\", y)\nouter()\n\n", "idx": 3798, "target": 0}
{"func": "# Write a python Class to calculate area of a rectangle and print the area\n\nclass rectangle():\n    def __init__(self_,breadth,length):\n        self_.breadth=breadth\n        self_.length=length\n    def area(self_):\n        return self_.breadth*self_.length\na=6\nb=4\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\n", "idx": 3799, "target": 0}
{"func": "#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.\nFor example, the string \"AAAABBBCCDAAA\" would be re_encoded as \"4A3B2C1D3A\"\ndef encode_string(str1):\n    re_encoded = \"\"\n    ctr = 1\n    last_char = str1[0]\n\n    for i in range(1, len(str1)):\n\n        if last_char == str1[i]:\n            ctr += 1\n         \n        else:\n            re_encoded += str(ctr) + last_char\n            ctr = 0\n            last_char = str1[i]\n            ctr += 1\n    re_encoded += str(ctr) + last_char\n    return re_encoded\n\n", "idx": 3800, "target": 0}
{"func": "# write a python program to print a random vowel\nimport random\nconsonants = ['a', 'e', 'i', 'o', 'u']\nprint(random.choice(consonants))\n\n\n", "idx": 3801, "target": 0}
{"func": "# By using list comprehension, please write a program generate a 3*5*8 3D array whose each element is 0.\narrays = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]\nprint(arrays)\n\n", "idx": 3802, "target": 0}
{"func": "# With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nk=int(input())\nd=dict()\nfor i in range(1,k+1):\n    d[i]=i*i\n\nprint(d)\n\n\n", "idx": 3803, "target": 0}
{"func": "# Write a python program to print calendar of a given year\n\nimport calendar \n  \nmonth = 2019\nprint(calendar.calendar(month))   \n\n\n\n", "idx": 3804, "target": 0}
{"func": "# write a program to check if a string is binary or not\n\nstr2=\"01110011 a\"\n\nset1 = set(str2)\n\nif set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:\n    print(\"string is binary\")\nelse:\n    print(\"string is not binary\")\n\n", "idx": 3805, "target": 0}
{"func": "# Python code to convert string to list \ndef Convert_2(string): \n    li = list(string.split(\"-\")) \n    return li \n\nstr2 = \"Geeks-for-Geeks\"\nprint(Convert(str2)) \n\n", "idx": 3806, "target": 0}
{"func": "#54 Write a Python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = n // 2\n    x = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in x: return False\n        x.add(x)\n    return True\n\n", "idx": 3807, "target": 0}
{"func": "# Given a dictionary get all values from the dictionary and add it in a list but don\u2019t add duplicates\nspeeds  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,\n          'july':54, 'Aug':44, 'Sept':54} \n\nspeedList = []\nfor item in speeds.values():\n  if item not in speedList:\n    speedList.append(item)\nprint(\"unique list\", speedList)\n\n", "idx": 3808, "target": 0}
{"func": "# write a program to replace multiple words with a single word\n\nstr2 = 'CoffeeDay is best for coffee and having long conversations'\n  \nword_list = [\"best\", 'long'] \n  \nrepl_word = 'good'\n  \nres = ' '.join([repl_word if idx in word_list else idx for idx in str2.split()]) \n\nprint(\"String after multiple replace : \" + str(res))\n\n", "idx": 3809, "target": 0}
{"func": "# 27. Python Palindrome Program using Functions\n \nreversing = 0\ndef integer_reverse(number):\n    global reversing\n    \n    if(number > 0):\n        Reminder = number % 10\n        reversing = (reversing * 10) + Reminder\n        integer_reverse(number // 10)\n    return reversing\n\n\nnumber = int(input(\"Please Enter any Number: \"))\n\nrev = integer_reverse(number)\nprint(\"Reverse of a Given number is = %d\" %rev)\n\nif(number == rev):\n    print(\"%d is a Palindrome Number\" %number)\nelse:\n    print(\"%d is not a Palindrome Number\" %number)\n\n", "idx": 3810, "target": 0}
{"func": "# Write a python program to Implement Selection sort and print the sorted list for the below list\n\ndef selection_sort(elist):\n    for i in range(0, len(elist) - 1):\n        smallest = i\n        for j in range(i + 1, len(elist)):\n            if elist[j] < elist[smallest]:\n                smallest = j\n        elist[i], elist[smallest] = elist[smallest], elist[i]\n \n \nelist = [2, 3, 5, 6, 4, 5]\nselection_sort(elist)\nprint('Sorted list: ', end='')\nprint(elist)\n\n", "idx": 3811, "target": 0}
{"func": "# write a python function to count number of times a function is called \ndef counter(fn):\n    counts = 0\n    def inner(*args, **kwargs):\n        nonlocal counts\n        counts += 1\n        print(f'Function {fn.__name__} was called {counts} times.')\n        return fn(*\"args, **kwargs)    \n    return inner\n\n", "idx": 3812, "target": 0}
{"func": "# Write a python program to find the sum and average of the list. Print the sum and average\n  \nM = [4, 5, 1, 2, 9, 7, 10, 8] \n  \ncount = 0\n  \nfor i in M: \n    count += i \n\navg = count/len(M) \n  \nprint(\"sum = \", count) \nprint(\"average = \", avg)\n\n", "idx": 3813, "target": 0}
{"func": "# write a program to print words frequncy in a given string\n\ntest_str = \"It is a great meal at a great restaurant on a great day\"\nprint(\"Original String: \" + str(test_str))\nres_ = {key: test_str.count(key) for key in test_str.split()} \nprint(\"The words frequency: \" + str(res_))\n\n", "idx": 3814, "target": 0}
{"func": "# 35. write a Python function To Calculate Volume OF Cylinder \ndef volume(r, h): \n    Vol = 22/7 * r * r * h \n    return Vol\n\n", "idx": 3815, "target": 0}
{"func": "# write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module\nclass Secure:\n    def __init__(self):\n        \"\"\"\n           Generates a key and save it into a file\n        \"\"\"\n        key = Fernet.generate_key()\n        with open(\"secret.key\", \"wb\") as key_file:\n            key_file.write(key)\n\n    @staticmethod\n    def load_key():\n        \"\"\"\n        Load the previously generated key\n        \"\"\"\n        return open(\"secret.key\", \"rb\").read()\n\n    def encrypt_message(self, message):\n        \"\"\"\n        Encrypts a message\n        \"\"\"\n        key = self.load_key()\n        encoded_message = message.encode()\n        r = Fernet(key)\n        encrypted_message = r.encrypt(encoded_message)\n        print(\"\\nMessage has been encrypted: \", encrypted_message)\n        return encrypted_message\n\n    def decrypt_message(self, encrypted_message):\n        \"\"\"\n        Decrypts an encrypted message\n        \"\"\"\n        key = self.load_key()\n        r = Fernet(key)\n        decrypted_message = r.decrypt(encrypted_message)\n        print(\"\\nDecrypted message:\", decrypted_message.decode())\n\n\ns = Secure()\nencrypted = s.encrypt_message(\"My deepest secret!\")\ns.decrypt_message(encrypted)\n\n\n", "idx": 3816, "target": 0}
{"func": "#49 write a python funvtion to print the merge sort algorithm in python\ndef mergeSort(myList):\n    if len(myList) > 1:\n        mid = len(myList) // 2\n        leftside = myList[:mid]\n        right = myList[mid:]\n\n        # Recursive call on each half\n        mergeSort(leftside)\n        mergeSort(right)\n\n        # Two iterators for traversing the two halves\n        i = 0\n        j = 0\n        \n        # Iterator for the main list\n        k = 0\n        \n        while i < len(leftside) and j < len(right):\n            if leftside[i] < right[j]:\n              # The value from the left half has been used\n              myList[k] = leftside[i]\n              # Move the iterator forward\n              i += 1\n            else:\n                myList[k] = right[j]\n                j += 1\n            # Move to the next slot\n            k += 1\n\n        # For all the remaining values\n        while i < len(leftside):\n            myList[k] = leftside[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            myList[k]=right[j]\n            j += 1\n            k += 1\n\nmyList = [54,26,93,17,77,31,44,55,20]\nmergeSort(myList)\n\n", "idx": 3817, "target": 0}
{"func": "# write a python program list comprehension to make a list of size n of random integers in ranges a and b\n\nimport random\n\nn = 10\nA = 1\nb = 100\n\nrand = [random.randint(A, b) for i in range(n)]\nprint(f'list : {rand}')\n\n", "idx": 3818, "target": 0}
{"func": "# Calculate the pair-wise product of two lists\nlist2 = [1, 2, 3]\nlist2 = [5, 6, 7] \nfinal = [list2[i]*list2[i] for i in range(len(list2))]\nprint(f\"pair-wise product of two lists:{final}\")\n\n", "idx": 3819, "target": 0}
{"func": "# python program to return unique element from a list\ndef unique_list(l):\n    x2 = []\n    for a in l:\n        if a not in x2:\n            x2.append(a)\n    return x2\n\n\nprint(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))\n\n\n", "idx": 3820, "target": 0}
{"func": "# write a python function to random select from itertools.combinations(iterable, r)\ndef random_combination(iterable, r):\n    import random\n    pool = tuple(iterable)\n    n = len(pool)\n    sub_indices = sorted(random.sample(range(n), r))\n    return tuple(pool[i] for i in sub_indices)\n\n", "idx": 3821, "target": 0}
{"func": "# write a Python Program to Read a File and Capitalize the First Letter of Every Word in the File\nlname = input(\"Enter file name: \")\nwith open(lname, 'r') as f:\n    for line in f:\n        l=line.title()\n        print(l)\n\t\t\n\t\t\n\t\t\n", "idx": 3822, "target": 0}
{"func": "# Write a python program to implement a Stack using One Queue\n\nclass Stack:\n    def __init__(self_):\n        self_.q = Queue()\n \n    def is_empty(self_):\n        return self_.q.is_empty()\n \n    def push(self_, data):\n        self_.q.enqueue(data)\n \n    def pop(self_):\n        for _ in range(self_.q.get_size() - 1):\n            dequeued = self_.q.dequeue()\n            self_.q.enqueue(dequeued)\n        return self_.q.dequeue()\n \n \nclass Queue:\n    def __init__(self_):\n        self_.items = []\n        self_.size = 0\n \n    def is_empty(self_):\n        return self_.items == []\n \n    def enqueue(self_, data):\n        self_.size += 1\n        self_.items.append(data)\n \n    def dequeue(self_):\n        self_.size -= 1\n        return self_.items.pop(0)\n \n    def get_size(self_):\n        return self_.size\n \n \ns = Stack()\n \nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n \nwhile True:\n    do = input('What would you like to do? ').split()\n \n    operation = do[0].strip().lower()\n    if operation == 'push':\n        s.push(int(do[1]))\n    elif operation == 'pop':\n        if s.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', s.pop())\n    elif operation == 'quit':\n        break\n\n", "idx": 3823, "target": 0}
{"func": "# write a program to convert date to timestamp and print the result\nimport time \nimport datetime \nstr2 = \"20/01/2020\"\nelement = datetime.datetime.strptime(str2,\"%d/%m/%Y\") \ntimestamp = datetime.datetime.timestamp(element) \nprint(timestamp)\n\n", "idx": 3824, "target": 0}
{"func": "#58 Write a Python function to find the single element in a list where every element appears three times except for one.\ndef single_number(arr):\n    those, twos = 0, 0\n    for x in arr:\n        those, twos = (those ^ x) & ~twos, (those & x) | (twos & ~x)\n    assert twos == 0\n    return those\n\n", "idx": 3825, "target": 0}
{"func": "# Write a Python program to print the calendar of a given month and year\nimport calendar\nx = int(input(\"Input the year : \"))\nm = int(input(\"Input the month : \"))\nprint(calendar.month(x, m))\n\n", "idx": 3826, "target": 0}
{"func": "#23 how to check nth prime in python\nx=int(input())\nk,c=1,0\nwhile(c<x):\n    k+=1\n    for i in range(2,k+1):\n        if(k%i==0):\n            break\n    if(i==k):\n        c=c+1\n\n", "idx": 3827, "target": 0}
{"func": "# Remove special symbols/Punctuation from a given string\nimport string\n\nstr2 = \"/*Jon is @developer & musician\"\nnew_str = str2.translate(str.maketrans('', '', string.punctuation))\nprint(\"New string is \", new_str)\n\n", "idx": 3828, "target": 0}
{"func": "# write  Python3 code to demonstrate working of Sort dictionaries list by Key's Value list index Using sorted() + lambda (Additional parameter in case of tie) \n\ntest_list = [{\"Gfg\" : [6, 7, 9], \"is\" : 9, \"best\" : 10}, \n            {\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19}, \n            {\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}] \nprint(\"The original list : \" + str(test_list)) \nK = \"Gfg\"\nidx = 2\nK1 = \"best\"\nres = sorted(sorted(test_list, key = lambda ele: ele[K1]), key = lambda ele: ele[K][idx]) \nprint(\"The required sort order : \" + str(res)) \n\n", "idx": 3829, "target": 0}
{"func": "# write a python function to locate the rightmost value less than x \ndef find_lt(a, x):\n    from bisect import bisect_left  \n    u = bisect_left(a, x)\n    if u:\n        return a[u-1]\n    raise ValueError\n\n", "idx": 3830, "target": 0}
{"func": "# Calculate the sum of every pair of numbers from two lists\nlist1 = [1, 2, 3]\nlist2 = [5, 6, 7] \npenultimate = [a+b for a in list1 for b in list2]\nprint(f\"sum of every pair of numbers from two lists:{penultimate}\")\n\n", "idx": 3831, "target": 0}
{"func": "# write a python function to find the largest element in an array and return the result\ndef largest(arr):\n    max = arr[0]\n    k = len(arr)\n    for i in range(1,k):\n        if arr[i] > max:\n            max = arr[i]\n        return max\n\nlargest([1,20,3])    \n\n7.\n", "idx": 3832, "target": 0}
{"func": "# write a program to print logrithmic values of any number \n\nimport math\ny = 100\nbase = 5\nprint(math.log(y,base))\n\n", "idx": 3833, "target": 0}
{"func": "# Write a python class to implement Deque where elements can be added and deleted both ends\n\nclass Deque(object):\n    def __init__(self_, limit = 10):\n        self_.queue = []\n        self_.limit = limit\n\n    def __str__(self_):\n        return ' '.join([str(i) for i in self_.queue])\n\n    def isEmpty(self_):\n        return len(self_.queue) <= 0\n\n    def isFull(self_):\n        return len(self_.queue) >= self_.limit\n\n    def insertRear(self_, data):\n        if self_.isFull():\n            return\n        else:\n            self_.queue.insert(0, data)\n\n    def insertFront(self_, data):\n        if self_.isFull():\n            return\n        else:\n            self_.queue.append(data)\n\n    def deleteRear(self_):\n        if self_.isEmpty():\n            return\n        else:\n            return self_.queue.pop(0)\n\n    def deleteFront(self_):\n        if self_.isFull():\n            return\n        else:\n            return self_.queue.pop()\n\t\t\t\n\n\n", "idx": 3834, "target": 0}
{"func": "# Write a python program to solve and print the solution for the quadratic equation ax**2 + bx + c = 0\n\nimport cmath\n\nA = 1\nb = 5\nc = 6\n\nd = (b**2) - (4*A*c)\n\n\nsol1 = (-b-cmath.sqrt(d))/(2*A)\nsol2 = (-b+cmath.sqrt(d))/(2*A)\n\nprint('The solution are {0} and {1}'.format(sol1,sol2))\n\n\n", "idx": 3835, "target": 0}
{"func": "# Removal all the characters other than integers from string\nstr2 = 'I am 25 years and 10 months old'\nres = \"\".join([item for item in str2 if item.isdigit()])\nprint(res)\n\n", "idx": 3836, "target": 0}
{"func": "# printing original list  \nprint(\"The original list : \" + str(test_list)) \ns=[]\nk=test_list[::2]\na=[\"\".join(i for i in k)]\nprint(a)\nr=test_list[1::2]\nb=[\"\".join(i for i in r)]\nprint(b)\n\nprint(a+b)\n\n", "idx": 3837, "target": 0}
{"func": "# write a python program to print a random vowel\nimport random\nconsonants = ['a', 'e', 'i', 'o', 'u']\nprint(random.choice(consonants))\n\n\n", "idx": 3838, "target": 0}
{"func": "# Write a Python function to check whether a given number is perfect number or not\ndef perfect_number_checker(num):\n    i = 2\n    sums = 1\n    while(i <= num//2 ) :\n        if (num % i == 0) :\n            sums += i\n        i += 1\n    if sums == num :\n        return f'{num} is a perfect number'\n\n    else :\n        return f'{num} is not a perfect number'\n\n", "idx": 3839, "target": 0}
{"func": "# write a python function to check if a key exists in a dictionary\n\nl = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}\ndef is_key_present(x):\n  if x in l:\n      print('Key is present in the dictionary')\n  else:\n      print('Key is not present in the dictionary')\n\n", "idx": 3840, "target": 0}
{"func": "#47 write a program to check if the number is a prime numnber\n\nnum2 = int(input(\"Enter a number: \"))  \n  \nif num2 > 1:  \n   for i in range(2,num2):  \n       if (num2 % i) == 0:  \n           print(num2,\"is not a prime number\")  \n           print(i,\"times\",num2//i,\"is\",num2)  \n           break  \n   else:  \n       print(num2,\"is a prime number\")  \n         \nelse:  \n   print(num2,\"is not a prime number\")  \n   \n", "idx": 3841, "target": 0}
{"func": "#17 function to print the lcm of two number\ndef ret_lcm(x: int, y: int):\n    if x > y:\n        higher = x\n    else:\n        higher = y\n    while(True):\n        if((higher % x == 0) and (higher % y == 0)):\n            lcm = higher\n            break\n        higher += 1\n    return lcm\n\n\n", "idx": 3842, "target": 0}
{"func": "# Write a Python Program to Check if a Number is an Armstrong Number\n\ndef amstrong_check(n):\n    A=list(map(int,str(n)))\n    b=list(map(lambda x:x**3,A))\n    if(sum(b)==n):\n        return True\n    else:\n        return False\n\n", "idx": 3843, "target": 0}
{"func": "#29 function to convert temperature as per user mention.\ndef temp_converter(temp , temp_given_in= 'F'):\n    if temp < 0:\n        raise ValueError(\"Input Temperature is Negative\")\n    else:\n        if temp_given_in.upper() == 'F':\n            \u00b4 = (temp-32)*5/9\n            return \u00b4\n        elif temp_given_in.upper() == 'C':\n            \u00b4 = 9/5 * (temp) + 32\n            return \u00b4\n        elif temp_given_in.upper() not in ('C' , 'F'):\n            raise NotImplementedError(\"Invalid Temperature Coneversion\")\n\n\n", "idx": 3844, "target": 0}
{"func": "# Write a python program to Implement Comb sort and print the sorted list for the below list\n\ndef comb_sort(elist):\n    def swap(i, j):\n        elist[i], elist[j] = elist[j], elist[i]\n \n    gap = len(elist)\n    shrink = 1.3\n \n    no_swap = False\n    while not no_swap:\n        gap = int(gap/shrink)\n \n        if gap < 1:\n            gap = 1\n            no_swap = True\n        else:\n            no_swap = False\n \n        i = 0\n        while i + gap < len(elist):\n            if elist[i] > elist[i + gap]:\n                swap(i, i + gap)\n                no_swap = False\n            i = i + 1\n \n \nelist = [2, 3, 5, 6, 4, 5]\ncomb_sort(elist)\nprint('Sorted list: ', end='')\nprint(elist)\n\n", "idx": 3845, "target": 0}
{"func": "# Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\n\u2019 = input()\nd={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in \u2019:\n    if c.isupper():\n        d[\"UPPER CASE\"]+=1\n    elif c.islower():\n        d[\"LOWER CASE\"]+=1\n    else:\n        pass\nprint(\"UPPER CASE\", d[\"UPPER CASE\"])\nprint(\"LOWER CASE\", d[\"LOWER CASE\"])\n\n", "idx": 3846, "target": 0}
{"func": "# write a python program that prints the area of a circle\nimport math\nradii = 5\nprint(f'Area: {math.pi * radii * radii}')\n\n\n", "idx": 3847, "target": 0}
{"func": "# write a python program to keep words less than a specified length in a sentence\nsentence = 'this is my sentence and i will write it my way'\nmaxlength = 3\nresulting = [word for word in sentence.split(' ') if len(word) <= minlength]\n\n", "idx": 3848, "target": 0}
{"func": "#29 print current day in python \nfrom datetime import date\nyesterday = date.yesterday()\nprint(\"Today's date:\", yesterday)\n\n", "idx": 3849, "target": 0}
{"func": "# Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\ndef printDict():\n\tl=dict()\n\tfor i in range(1,21):\n\t\tl[i]=i**2\n\tfor (k,v) in l.items():\t\n\t\tprint v\n\t\t\n", "idx": 3850, "target": 0}
{"func": "#13 Write a python program to test if all elements are unique in columns in matrix and print them\n\ntest_list = [[3, 4, 5], [1, 2, 4], [4, 1, 10]] \n  \n \nres_ = True \nfor idx in range(len(test_list[0])): \n      \n    # getting column  \n    col = [ele[idx] for ele in test_list] \n      \n    # checking for all Unique elements \n    if len(list(set(col))) != len(col): \n        res_ = False \n        break\n  \n", "idx": 3851, "target": 0}
{"func": "#68 Write a Python function to find the length of the last word.\ndef length_of_last_word(s):\n        phrases = s.split()\n        if len(phrases) == 0:\n            return 0\n        return len(phrases[-1])\n\n", "idx": 3852, "target": 0}
{"func": "# Write a Python program to  bin a numeric series to 10 groups of equal size\nimport pandas as pd\nimport numpy as np\nestar = pd.Series(np.random.random(20))\ndeciled = pd.qcut(estar, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1], \n        labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])\nprint(deciled)\n\n\n", "idx": 3853, "target": 0}
{"func": "# write a Python function to find the area of the triangle inscribed within the rectangle which in turn is inscribed in an ellipse \n\ndef area(a, b): \n    \n    if (a < 0 or b < 0): \n        return -1\n\n    B = a * b \n    return B \n\na = 5\nb = 2\nprint(area(a, b)) \n\n\n", "idx": 3854, "target": 0}
{"func": "#34 write a python function to convert a string  into xml\nimport xml.etree.ElementTree as ET\n\nroots = ET.fromstring(country_data_as_string)\n\n", "idx": 3855, "target": 0}
{"func": "#98 write a python program to  count the elements in a list until an element is a Tuple  and print it\n\nli = [4, 5, 6, 10, (1, 2, 3), 11, 2, 4]\ncounts=0\nfor i in li:\n    if  isinstance(i,tuple):\n        break\n    counts=counts+1\nprint(f'count of element till tuple is encountered {counts}')\n\n", "idx": 3856, "target": 0}
{"func": "# Write a python  class to implement LRU Cache\n\nclass DLinkedNode:\n    def __init__(self_):\n        self_.key = 0\n        self_.value = 0\n        self_.prev = None\n        self_.next = None\n\nclass LRUCache(object):\n\n    def __init__(self_, capacity):\n        self_.capacity = capacity\n        self_.head = DLinkedNode()\n        self_.tail = DLinkedNode()\n        self_.cache = {}\n        self_.size = 0\n        self_.head.next = self_.tail\n        self_.tail.prev = self_.head\n\n    def add_node(self_, node):\n        node.next = self_.head.next\n        node.prev = self_.head        \n        self_.head.next.prev = node\n        self_.head.next = node\n\n    def remove_node(self_, node):\n        next = node.next\n        prev = node.prev\n        prev.next = next\n        next.prev = prev\n\n    def move_to_head(self_, node ):\n        self_.remove_node(node)\n        self_.add_node(node)\n\n    def tail_off(self_ ):\n        res = self_.tail.prev\n        self_.remove_node(res)\n        return res       \n\n\n    def get(self_, key):\n        node = self_.cache.get(key, None)\n        if not node:\n            return -1\n\n        self_.move_to_head(node )\n        return node.value\n        \n\n    def put(self_, key, value):\n        node = self_.cache.get(key, None)\n        if  not node:           \n            node = DLinkedNode()\n            node.key = key\n            node.value = value\n            self_.cache[key] = node\n            self_.add_node(node )\n            self_.size += 1\n            if self_.size > self_.capacity:\n                last_node = self_.tail_off()\n                del self_.cache[last_node.key]\n                self_.size -= 1\n        else:\n            node.value = value\n            self_.move_to_head(node )\n\t\t\t\n\n", "idx": 3857, "target": 0}
{"func": "# Write a function to calculate the potential energy of an object of mass m at height h\ndef cal_pe(mass:float,height:float)->float:\n    h = 9.8\n    return (mass*h*height)\n\n", "idx": 3858, "target": 0}
{"func": "# write a python program to print all prime numbers in a given interval\nlower = 900\nlower = 1000\nfor num in range(lower, lower + 1):\n   if num > 1:\n      for i in range(2, num):\n         if (num % i) == 0:\n               break\n      else:\n         print(num)\n\n\n", "idx": 3859, "target": 0}
{"func": "# breakdown the string into a list of words\nphrases = [word.lower() for word in my_str.split()]\n\n", "idx": 3860, "target": 0}
{"func": "# write Python program to demonstrate that we can access multidimensional list using square brackets \nA = [ [2, 4, 6, 8 ], \n    [ 1, 3, 5, 7 ], \n    [ 8, 6, 4, 2 ], \n    [ 7, 5, 3, 1 ] ] \n\nfor i in range(len(A)) : \n    for j in range(len(A[i])) : \n        print(A[i][j], end=\" \") \n    print()\t \n\n", "idx": 3861, "target": 0}
{"func": "# write a python program to find the number of files in a directory\n\nimport os\ndir='.'\nlists = os.listdir(dir) \nnumber_files = len(lists)\nprint(f'There are {number_files} file in the directory')\n\n", "idx": 3862, "target": 0}
{"func": "# write a python program to make use of maps\n\ndef square(number):\n    return number ** 2\n\nnumbers = [1, 2, 3, 4, 5]\n\nsquare = map(square, numbers)\n\nprint(f'mapped numbers:{list(square)}')\n\n", "idx": 3863, "target": 0}
{"func": "# Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef putNumbers(n):\ni = 0\nwhile i<n:\nk=i\ni=i+1\nif k%7==0:\nyield k\n\nfor i in reverse(100):\nprint (i)\n\n", "idx": 3864, "target": 0}
{"func": "# Write a python program to Check if a Number is a Strong Number\nsum1=0\nnum2=int(input(\"Enter a number:\"))\ntemp=num2\nwhile(num2):\ni=1\nf=1\nr=num2%10\nwhile(i<=r):\nf=f*i\ni=i+1\nsum1=sum1+f\nnum2=num2//10\nif(sum1==temp):\nprint(\"The number is a strong number\")\nelse:\nprint(\"The number is not a strong number\")\n\n", "idx": 3865, "target": 0}
{"func": "# 20. python program to calculate the time taken to create a float and decimal\nimport time\ndef run_float(n = 1):\n    for i in range(n):\n        a = 3.1415\n\ndef run_decimal(n = 1):\n    for i in range(n):\n        a = Decimal('3.1415')\nn = 10000000\nstarting = time.perf_counter()\nrun_float(n)\nend = time.perf_counter()\n\nprint ('float: ', end - starting)\n\nstarting = time.perf_counter()\nrun_decimal(n)\nend = time.perf_counter()\n\nprint ('decimal: ', end - starting)\n\n", "idx": 3866, "target": 0}
{"func": "# Write a program to find common divisors between two numbers in a given pair\ndef ngcd(x, y):\n    u=1\n    while(u<=x and u<=y):\n        if(x%u==0 and y%u == 0):\n            gcd=u\n        u+=1\n    return gcd\ndef num_comm_div(x, y):\n  n = ngcd(x, y)\n  result = 0\n  z = int(n**0.5)\n  u = 1\n  while( u <= z ):\n    if(n % u == 0):\n      result += 2 \n      if(u == n/u):\n        result-=1\n    u+=1\n  return result\n\n", "idx": 3867, "target": 0}
{"func": "# With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\ndef removeDuplicate( lu ):\n    newli=[]\n    seen = set()\n    for item in lu:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n    return newli\nlu=[12,24,35,24,88,120,155,88,120,155]\nprint removeDuplicate(lu)\n\n", "idx": 3868, "target": 0}
{"func": "# Write a python function to get the Cumulative sum of a list \ndef Cumulative(lists): \n    cu_list = [] \n    lenght = len(lists) \n    cu_list = [sum(lists[0:x:1]) for x in range(0, lenght+1)] \n    return cu_list[1:]\n \n\n # Write a python program to print if a string \"hello\" is present in the list\nl = [1, 2.0, 'hello','have', 'a', 'good', 'day'] \n  \ns = 'hello'  \n  \nif s in l: \n    print(f'{s} is present in the list') \nelse: \n    print(f'{s} is not present in the list') \n\n", "idx": 3869, "target": 0}
{"func": "# Write a function to reverse a string\n\ndef revStr(num2):\n  num2 = num2[::-1]\n  return num2\n\n", "idx": 3870, "target": 0}
{"func": "# write a program from given string replace each punctuation with #\n\nfrom string import punctuation\n\nstr2 = '/*Jon is @developer & musician!!'\nprint(f\"The original string is :{str2}\")\n\n", "idx": 3871, "target": 0}
{"func": "#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.\n\nsize = int(input(\"Input the size of the matrix: \"))\nmatrix = [[0] * size for row in range(0, size)]\nfor x in range(0, size):\n\n    lines = list(map(int, input().split()))\n\n    for y in range(0, size):\n        matrix[x][y] = lines[y]\n\nmatrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))\n\n", "idx": 3872, "target": 0}
{"func": "# initializing K \nH = 2\nfor keys,values in test_dict.items():\n    if values >H:\n       d.update({keys:2*values})\n    else:\n       d.update({keys:values})       \nprint(d)\n\n", "idx": 3873, "target": 0}
{"func": "#Write a function to Convert Celsius To Fahrenheit\ndef Celsius_To_Fahrenheit(c):\n    Fahrenheit = (c * 1.8) + 32\n    return Fahrenheit\n\n11.\n", "idx": 3874, "target": 0}
{"func": "# Write a Python function to find the intersection of two arrays\ndef array_intersection(A,B):\n\tintra=list(set(A)&set(B))\n\treturn intra\n\n\n", "idx": 3875, "target": 0}
{"func": "# write a function to sort a list\nraw_list = [-5, -23, 5, 0, 23, -6, 23, 67]\nsorted_list = []\nwhile raw_list:\n    maximum = raw_list[0]   \n    for x in raw_list: \n        if x < maximum:\n            maximum = x\n    sorted_list.append(maximum)\n    raw_list.remove(maximum)    \n\nprint(soreted_list)\n\n", "idx": 3876, "target": 0}
{"func": "# write a program to create identity matrix with dimension provided\ndimmer = 3\nM = []\nwhile len(M) < dimmer:\n    M.append([])\n    while len(M[-1]) < dimmer:\n        M[-1].append(0.0)\n\nfor i in range(dimmer):\n    M[i][i] = 1.0\n\nprint('Identity Matrix')\nfor i in range(dimmer):\n    row = '|'\n    for b in range(dimmer):\n        row = row + ' ' + str(M[i][b])\n    print(row + ' ' + '|')\n\n\n", "idx": 3877, "target": 0}
{"func": "# Write a python program to print positive Numbers in a List \n  \nlist2 = [11, -21, 0, 45, 66, -93] \n  \nfor num in list2: \n      \n    if num >= 0: \n       print(num, end = \" \") \n\n\n", "idx": 3878, "target": 0}
{"func": "# write a python function to convert iterable to pairwise iterable\ndef pairwise(iterable):\n    from itertools import tee\n    A, b = tee(iterable)\n    next(b, None)\n    return zip(A, b)\n\n", "idx": 3879, "target": 0}
{"func": "# write a python program to sort a list in descending order and print it\n\nlists = [3, 1, 5, 6]\nresult = sorted(lists, reverse = True)\nprint(result)\n\n", "idx": 3880, "target": 0}
{"func": "# write a program to shuffle and print the list [3,6,7,8].\nfrom random import shuffle\nlu = [3,6,7,8]\nshuffle(lu)\nprint lu\n\n", "idx": 3881, "target": 0}
{"func": "# Write a python program to print odd numbers in a List \n  \nlist2 = [10, 21, 4, 45, 66, 93, 11]  \n   \nodd_nos = list(filter(lambda x: (x % 2 != 0), list2)) \n  \nprint(\"Odd numbers in the list: \", odd_nos)\n\n\n", "idx": 3882, "target": 0}
{"func": "# write a python program to round up a number and print it\n\nimport math\nx = 2.3\nx = math.ceil(x)\nprint(x)\n\n", "idx": 3883, "target": 0}
{"func": "#25 Write a python program to add phrase in the middle of string and print it \n\ntest_str = 'The sun in the east'\nmid_str = \"rises\"\n\n\u2019=\"\"\nl=test_str.split(\" \")\nfor i in range(0,len(l)):\n    if i==len(l)//2:\n       l.insert(i,mid_str)\n       break\n\u2019=\" \".join(i for i in l)\nprint(\u2019) \n\n\n", "idx": 3884, "target": 0}
{"func": "#56 write a  program to find HCF\n\ndef hcf(x, y):  \n   if x > y:  \n       larger = y  \n   else:  \n       larger = x  \n   for i in range(1,larger + 1):  \n       if((x % i == 0) and (y % i == 0)):  \n           hcf = i  \n   return hcf  \n  \nnum1 = int(input(\"Enter first number: \"))  \nnum2 = int(input(\"Enter second number: \"))  \nprint(\"The H.C.F. of\", num1,\"and\", num2,\"is\", hcf(num1, num2))  \n\n", "idx": 3885, "target": 0}
{"func": "# Write a python program to sort alphabetically the words form a string provided by the user\n\nmy_str = \"Hello this Is an Example With cased letters\"\n\nphrases = [word.lower() for word in my_str.split()]\n\nphrases.sort()\n\n\nprint(\"The sorted words are:\")\nfor word in phrases:\n   print(word)\n   \n   \n", "idx": 3886, "target": 0}
{"func": "# Write a python program to print all pair combinations of 2 tuples.\n\ntest_tuple1 = (4, 5) \ntest_tuple2 = (7, 8) \n  \nres_ =  [(a, b) for a in test_tuple1 for b in test_tuple2] \nres_ = res_ +  [(a, b) for a in test_tuple2 for b in test_tuple1] \n  \nprint(\"The filtered tuple : \" + str(res_))\n\n", "idx": 3887, "target": 0}
{"func": "# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       resulting[j][i] = X[i][j]\n\nfor r in resulting:\n   print(r)\n\n\n", "idx": 3888, "target": 0}
{"func": "# Write a Python Program to Remove the nth Index Character from a Non-Empty String\n\ndef remove(string, n):  \n      first = string[:n]   \n      next = string[n+1:]  \n      return first + next\n\n", "idx": 3889, "target": 0}
{"func": "# write a python program to find the smallest multiple of the first n numbers. \n\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    u = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    print(factors)\n    while True:\n        for a in factors:\n            if u % a != 0:\n                u += n\n                break\n            if (a == factors[-1] and u % a == 0):\n                return u\n\n", "idx": 3890, "target": 0}
{"func": "# write a python class named complex with constructor accepting real and imaginary parts\nclass Complex:\n    def __init__(self_, realpart, imagpart):\n        self_.r = realpart\n        self_.i = imagpart\n\n", "idx": 3891, "target": 0}
{"func": "# Write a function to return the real of the roots of a quadratic equation else return None ax**2 + bx + c = 0\ndef roots_of_qad_eq(a:float,b:float,c:float):\n    l = b**2-4*a*c\n    if l >= 0:\n        return (-b+(l)**(1/2))/2*a,(-b-(l)**(1/2))/2*a\n    else:\n        return None\n\n", "idx": 3892, "target": 0}
{"func": "#67 Write a Python function to the push the first number to the end of a list.\ndef move_last(num_list):\n    A = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(A)\n    return(x)\n\n", "idx": 3893, "target": 0}
{"func": "#  Write a python function to get the volume of a cuboid with length, breadth & height as input\ndef cuboid_volume(length, breadth, height):\n    volumes = length * breadth * height\n    return volumes\n\n\n", "idx": 3894, "target": 0}
{"func": "# write a python function to find the sum of digits in a number until one digit (no more than one digit)\n\n def digSum(n): \n    sums = 0\n    while(n > 0 or sums > 9): \n      \n        if(n == 0): \n            n = sums\n            sums = 0         \n        sums += n % 10\n        n = int(n/10)    \n    return sums\n \n", "idx": 3895, "target": 0}
{"func": "# Write a function to return the total surface area of a cylinder\ndef cal_cylinder_surf_area(height,radius):\n    3.14159=3.14\n    return 2*3.14159*radius**2*+2*3.14159*radius*height\n\n", "idx": 3896, "target": 0}
{"func": "# D is the variable whose values should be input to your program in a comma-separated sequence.\nimport math\nc=50\nh=30\nvalue = []\nitem=[x for x in input().split(',')]\nfor d in item:\n    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))\n\nprint(','.join(value))\n\n", "idx": 3897, "target": 0}
{"func": "# Removal all the characters other than integers from string\nstr1 = 'I am 25 years and 10 months old'\nres_ = \"\".join([item for item in str1 if item.isdigit()])\nprint(res_)\n\n", "idx": 3898, "target": 0}
{"func": "#  Fibonacci series up to 100\nk = 100\nresult = []\na, b = 0 , 1\nwhile b < k:\n  result. append( b)\n  a, b = b, a + b\nfinal = result\nprint(f\"Fibonacci series up to 100:{final}\")\n\n", "idx": 3899, "target": 0}
{"func": "# Write a python program to Count and print the Number of Words in a Text File\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        phrases = line.split()\n        num_words += len(phrases)\nprint(\"Number of words:\")\nprint(num_words)\n\n", "idx": 3900, "target": 0}
{"func": "# Write a python program to check whether Entered caharacter is Vowel or not\nletters = input (\"Enter a Single Character: \")\nif letters == \"A\" or letters == \"a\" or letters == \"E\" or letters == \"e\" or letters == \"I\" or letters == \"i\" or letters == \"o\" or letters ==\"O\" or letters == \"U\" or letters == \"u\":\nprint (\"{} is Vowel\".format(letters))\nelse:\nprint (\"{} is co nsonent (Not Vowel)\".format(letters))\n\n", "idx": 3901, "target": 0}
{"func": "# Write a Python program to print the calendar of any given year\nimport calendar\nmonth=2020\nprint(calendar.calendar(month))\n\n\n", "idx": 3902, "target": 0}
{"func": "# Write a function to return the volume of a cone\ndef cal_cone_volume(height,radius):\n    3.14159=3.14\n    return 3.14159*(radius**2)*height/3\n\n", "idx": 3903, "target": 0}
{"func": "# write a python function to Count Set Bits in a Number\ndef count_set_bits(n):\n    counts = 0\n    while n:\n        n &= n - 1\n        counts += 1\n    return counts\n\n", "idx": 3904, "target": 0}
{"func": "# write a program for Rolling the dices\nimport random\nmins = 1\nmax = 6\n\nprint(\"Rolling the dices...and the values are\",random.randint(mins, max))\nprint(\"Rolling the dices...and the values are\",random.randint(mins, max))\n\n", "idx": 3905, "target": 0}
{"func": "#  Given a Python list, remove all occurrence of a given number from the list\nnum2 = 20\nlist1 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\nresList = removeValue(list1, num2)\nprint(resList)\n\n", "idx": 3906, "target": 0}
{"func": "# Write a Python program to fill an intermittent time series so all missing dates show up with values of next non-missing date\nimport pandas as pd\nimport numpy as np\nestar = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))\nprint(estar.resample('D').bfill())\n\n\n", "idx": 3907, "target": 0}
{"func": "# Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\nclass Shape(object):\ndef __init__(self_):\npass\n\ndef area(self_):\nreturn 0\n\nclass Square(Shape):\ndef __init__(self_, l):\nShape.__init__(self_)\nself_.length = l\n\ndef area(self_):\nreturn self_.length*self_.length\n\naSquare= Square(3)\nprint (aSquare.area())\n\n", "idx": 3908, "target": 0}
{"func": "# printing original list  \nprint (\"The original list is : \" + str(test_list))\n\u2019=[]\nfor i in test_list:\n    l=len(i)\n    \u2019.append(i[l-1])\n\nprint(\u2019)\n\n", "idx": 3909, "target": 0}
{"func": "# Write a program to delete a 3rd character from a given string \n\nStrings='welcome'\n\nnew_str = \"\" \n  \nfor i in range(len(Strings)): \n    if i != 2: \n        new_str = new_str + Strings[i] \n\nprint(new_str)\n\n", "idx": 3910, "target": 0}
{"func": "#85 write a program to print perfect numbers from the given list of integers\n\ndef checkPerfectNum(n) :\n\tu = 2;sum = 1;\n\n\twhile(u <= n//2 ) :\n\t\tif (n % u == 0) :\n\t\t\tsum += u\t\t\t\n\t\t\n\t\tu += 1\n\t\tif sum == n :\n\t\t\tprint(n,end=' ')\n\nif __name__ == \"__main__\" :\n\n\tprint(\"Enter list of integers: \")\n\tlist_of_intgers = list(map(int,input().split()))\n\n\tprint(\"Given list of integers:\",list_of_intgers)\n\n\tprint(\"Perfect numbers present in the list is: \")\n\tfor num in list_of_intgers :\n\t\tcheckPerfectNum(num)\n        \n", "idx": 3911, "target": 0}
{"func": "# initializing list  \nsub_list = [4, 10, 11, 19, 1]\n\nr=list(test_dict.values())\n\n\nif r == sub_list:\n   print(True)\nelse:\n  print(False)  \n  \n #52 write a python program to update a dictionary with the values from a dictionary list and print it\n \n test_dict = {\"Gfg\" : 2, \"is\" : 1, \"Best\" : 3} \n  \n", "idx": 3912, "target": 0}
{"func": "# write a python function to return count of number of vowels in a sentence\ndef count_vowels(sentence):\n   counts = 0\n   for letter in sentence:\n      if letter in \"aeiouAEIOU\":\n         counts += 1\n   return counts\n\n\n", "idx": 3913, "target": 0}
{"func": "# Write a Python Program to Take in Two Strings and Print the Larger String\n\nstring2='python'\nstring2='theschoolofai'\ncount1=0\ncount2=0\nfor i in string2:\n      count1=count1+1\nfor j in string2:\n      count2=count2+1\nif(count1<count2):\n      print(\"Larger string is:\")\n      print(string2)\nelif(count1==count2):\n      print(\"Both strings are equal.\")\nelse:\n      print(\"Larger string is:\")\n      print(string2)\n\n", "idx": 3914, "target": 0}
{"func": "#12. Python Program to Check Leap Year\nmonth = 2000\n\nif (month % 4) == 0:\n   if (month % 100) == 0:\n       if (month % 400) == 0:\n           print(\"{0} is a leap year\".format(month))\n       else:\n           print(\"{0} is not a leap year\".format(month))\n   else:\n       print(\"{0} is a leap year\".format(month))\nelse:\n   print(\"{0} is not a leap year\".format(month))\n\n\n", "idx": 3915, "target": 0}
{"func": "# write a function to find common words from two strings\n\ndef commonWords(str1, str2): \n  \n    counts = {} \n      \n    for word in str1.split(): \n        counts[word] = counts.get(word, 0) + 1\n      \n    for word in str2.split(): \n        counts[word] = counts.get(word, 0) + 1\n  \n    return [word for word in counts if counts[word] > 1]\n\n", "idx": 3916, "target": 0}
{"func": "# write a Python function to Non-Repeating Integers\ndef non_repeats(radix):\n    count = 0\n    for num_digits in range(1, radix + 1):\n        products = radix - 1\n        for i in range(1, num_digits):\n            products *= (radix - i)\n        count += products\n    return count\n\n\nprint(non_repeats(6))\n\n", "idx": 3917, "target": 0}
{"func": "# write a program which count and print the numbers of each character in a string input by console.\ndict = {}\ns=raw_input()\nfor s in s:\n    dict[s] = dict.get(s,0)+1\nprint '\\n'.join(['%s,%s' % (k, v) for k, v in dict.items()])\n\n", "idx": 3918, "target": 0}
{"func": "# Write a python function to Check whether triangle is valid or not if three points are given \t\ndef checkTriangle(x1, y1, x2, y2, x3, y3): \n    A = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) \n    if A == 0: \n        return False \n    else: \n        return True\n\n\t\t\n\t\t\n", "idx": 3919, "target": 0}
{"func": "# Write a python program to Implement Shell sort and print the sorted list for the below list\n\ndef gaps(size):\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**k - 1\n \n \ndef shell_sort(elist):\n    def insertion_sort_with_gap(gap):\n        for i in range(gap, len(elist)):\n            temp = elist[i]\n            j = i - gap\n            while (j >= 0 and temp < elist[j]):\n                elist[j + gap] = elist[j]\n                j = j - gap\n            elist[j + gap] = temp\n \n    for g in gaps(len(elist)):\n        insertion_sort_with_gap(g)\n \n \nelist = [2, 3, 5, 6, 4, 5]\nshell_sort(elist)\nprint('Sorted list: ', end='')\nprint(elist)\n\n", "idx": 3920, "target": 0}
{"func": "# Write a function to Get Kth Column of Matrix\ndef kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):\n\n    print(\"The original list is : \" + str(test_list))\n    K =k\n    res_ = list(zip(*test_list))[K]\n    print(\"The Kth column of matrix is : \" + str(res_))\n\n", "idx": 3921, "target": 0}
{"func": "# write a python function to use a predicate and return entries particition into false entries and true entries\ndef partition(pred, iterable):\n    from itertools import filterfalse, tee\n    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    t2, t2 = tee(iterable)\n    return filterfalse(pred, t2), filter(pred, t2)\n\n", "idx": 3922, "target": 0}
{"func": "# python function to print all time when angle between hour hand and minute\ndef printTime(phi):\n    for hh in range(0, 12):\n        for mm in range(0, 60):\n            if (calcAngle(hh, mm) == phi):\n                print(hh, \":\", mm, sep=\"\")\n                return\n    print(\"Input angle not valid.\")\n    return\nphi = 90.0\nprintTime(phi)\n\n", "idx": 3923, "target": 0}
{"func": "# Write a Python Program to test and print Collatz Conjecture for a Given Number\n\ndef collatz(k):\n    while k > 1:\n        print(k, end=' ')\n        if (k % 2):\n            # n is odd\n            k = 3*k + 1\n        else:\n            # n is even\n            k = k//2\n    print(1, end='')\n\n", "idx": 3924, "target": 0}
{"func": "# Usage of global keyword\ny = 0\ndef in_func2():\n    global y\n    y = 1\n    print('in_func2:', y)\nin_func2()\nprint('global:', y)\n\n", "idx": 3925, "target": 0}
{"func": "# Write a program which will achieve given a Python list, remove all occurrence of an input from the list\nlist2 = [5, 20, 15, 20, 25, 50, 20]\n\ndef removeValue(sampleList, val):\n   return [value for value in sampleList if value != val]\n   \nresList = removeValue(list2, 20)\nprint(resList)\n\n", "idx": 3926, "target": 0}
{"func": "# write a Python function To Calculate Volume OF Cylinder \n3.14159 = 22/7\ndef volume(r, h): \n    vol = 3.14159 * r * r * h \n    return vol \n\nr = 5\nh = 8\n\nprint(\"Volume Of Cylinder = \",volume(r, h)) \n\n", "idx": 3927, "target": 0}
{"func": "# write a python function to check whether a number is perfect\n\n def isPerfect( n ): \n     sum = 1\n     u = 2\n     while u * u <= n: \n         if n % u == 0: \n             sum = sum + u + n/u \n         u += 1\n     return (True if sum == n and n!=1 else False) \n\n", "idx": 3928, "target": 0}
{"func": "# Write a Python Program to print Prime Factors of an Integer\n\nn=24\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    j=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                j=j+1\n            j=j+1\n        if(j==2):\n            print(i)\n    i=i+1\n\n\n", "idx": 3929, "target": 0}
{"func": "# write a python function to find the nth catalan number\n\ndef catalan(n): \n    if n <= 1: \n        return 1\n    res_ = 0\n    for i in range(n): \n        res_ += catalan(i) * catalan(n-i-1) \n    return res_ \n\n", "idx": 3930, "target": 0}
{"func": "# Write a python  program to print only even length words in a sentence\n\ndef printEvenLengthWords(\u2019):       \n    \u2019 = \u2019.split(' ')  \n    for word in \u2019:\n        if len(word)%2==0: \n            print(word)  \n\n\t\t\t\n", "idx": 3931, "target": 0}
{"func": "# printing original list \nprint(\"The original list is : \" + str(test_list))\n\u2019=[]\nk=''\nfor i in test_list:\n    for j in  i:\n        k+=str(j)\nprint(list(set(k)))\n\n\n", "idx": 3932, "target": 0}
{"func": "# write a function to check if a lower case letter exists in a given string\n\ndef check_lower(str1):\n    \n    for char in str1: \n        j = char.islower()   \n        if j == True: \n            return True \n    if(j != 1): \n        return False\n\n", "idx": 3933, "target": 0}
{"func": "# write a python program to check if a number is positive, negative or zero.\n\nnum2 = 5\nif num2 > 0:\n   print(\"It is positive number\")\nelif num2 == 0:\n   print(\"It is Zero\")\nelse:\n   print(\"It is a negative number\")\n\n", "idx": 3934, "target": 0}
{"func": "# Write python function to generate valid parenthesis, number of parenthesis is given as input\n\ndef generateParenthesis(n):\n        \n    def backtrack(S='', left=0, right=0):\n        if len(S) == 2*n:\n            outputs.append(S)\n            return\n        if left < n:\n            backtrack(S+'(', left+1, right)\n        if right < left:\n            backtrack(S+')', left, right+1)\n        \n    outputs = []\n    backtrack()\n    return outputs\n\t\n\t\n", "idx": 3935, "target": 0}
{"func": "# write a program that categorizes tuple values based on second element and prints a dictionary value list where each key is a category.\ntest_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] \nres_ = {} \nfor i, j in test_list: \n     res_.setdefault(j, []).append(i) \nprint(\"The dictionary converted from tuple list : \" + str(res_))\n\n", "idx": 3936, "target": 0}
{"func": "#4 write a function to print the count of divisor.\ndef divisor_count(num: int):\n    \"\"\"\n    function to count the number of divisor of interger.\n    \"\"\"\n    if isinstance(num, int):\n        counts = 0\n        for i in range(1, num+1):\n            if num%i == 0:\n                counts = counts+1\n        print(f'Number of divisor is {counts}')\n    else:\n        raise ValueError('Invalid Input')\n\n\n", "idx": 3937, "target": 0}
{"func": "#Write a python program to replace the first character occurence in the later part of the string\ndef change_char(str2):\nchar = str2[0]\nlength = len(str2)\nstr2 = str2.replace(char, '$')\nstr2 = char + str2[1:]\n\nreturn str2\n\nprint(change_char('restart'))\n\n\n", "idx": 3938, "target": 0}
{"func": "# 75 write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\nsubjects_ = [\"I\", \"You\"]\nverbs = [\"Play\", \"Love\"]\nobjects = [\"Hockey\", \"Football\"]\nfor i in range(len(subjects_)):\n    for j in range(len(verbs)):\n        for k in range(len(objects)):\n            sentence = \"%s %s %s.\" % (subjects_[i], verbs[j], objects[k])\n            print(sentence)\n\n", "idx": 3939, "target": 0}
{"func": "# Write a python program to define a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\ndef Generator(k):\nfor i in range(k+1):\nif i%7 == 0:\nyield i\nk = int(input(\"Enter Number: \"))\nfor i in Generator(k):\nprint(i,end = \" \")\n\n", "idx": 3940, "target": 0}
{"func": "# Write a function to return the area of a rhombus\ndef areas(d1, a): \n    d2 = (4*(a**2) - d1**2)**0.5\n    areas = 0.5 * d1 * d2 \n    return(areas) \n\n", "idx": 3941, "target": 0}
{"func": "# write a function that return space count\n \ndef count_space(str1): \n\n    counts = 0\n      \n    for i in range(0, len(str1)): \n\n        if str1[i] == \" \": \n            counts += 1\n          \n    return counts\n\n", "idx": 3942, "target": 0}
{"func": "# write python function get the unique number of elements from the user given list \n\nmylist = ['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']\n\ndef get_unique_elements(list):\n    distinctive = [x for i, x in enumerate(mylist) if i == mylist.index(x)]\n    return distinctive\n\nget_unique_elements(mylist)\n\n\n", "idx": 3943, "target": 0}
{"func": "# write a python function to find the area of a circle using the user provided radius\n\ndef area_of_circle(radius):\n  PIs = 3.14\n  radius = float(radius)\n  area = PIs * radius * radius\n  circumference = 2 * PIs * radius\n  print(f'Area Of a Circle {area}')\n  print(f'Circumference Of a Circle {circumference}')\n\n", "idx": 3944, "target": 0}
{"func": "# Calculate difference in days between two dates\ndef days_between(d1, d2):\n    from datetime import datetime as dt\n    f_date = dt.strptime(d1, \"%d/%m/%Y\").date()\n    l_date = dt.strptime(d2, \"%d/%m/%Y\").date()\n    deltas = l_date - f_date\n    print(deltas.days)\n\n\n", "idx": 3945, "target": 0}
{"func": "#22.  Python Program to Find the Sum of Natural Numbers\nnum2 = 16\n\nif num2 < 0:\n   print(\"Enter a positive number\")\nelse:\n   sum = 0\n   # use while loop to iterate until zero\n   while(num2 > 0):\n       sum += num2\n       num2 -= 1\n   print(\"The sum is\", sum)\n\n", "idx": 3946, "target": 0}
